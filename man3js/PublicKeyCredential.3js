.\" Automatically generated by Pandoc 3.4
.\"
.TH "PublicKeyCredential" "JS" "August 27, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential \- PublicKeyCredential
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]PublicKeyCredential\f[B]\f[R] interface provides
information about a public key / private key pair, which is a credential
for logging in to a service using an un\-phishable and data\-breach
resistant asymmetric key pair instead of a password.
It inherits from \f[CR]Credential\f[R], and is part of the Web
Authentication API extension to the Credential Management API.
.RS
.PP
\f[B]Note:\f[R] This API is restricted to top\-level contexts.
Use from within an \f[CR]<iframe>\f[R] element will not have any effect.
.RE
.SH INSTANCE PROPERTIES
.TP
\f[B]PublicKeyCredential.authenticatorAttachment\f[R] \f[I](read\-only)\f[R]
A string that indicates the mechanism by which the WebAuthn
implementation is attached to the authenticator at the time the
associated \f[CR]navigator.credentials.create()\f[R] or
\f[CR]navigator.credentials.get()\f[R] call completes.
.TP
\f[B]PublicKeyCredential.id\f[R] \f[I](read\-only)\f[R]
Inherited from \f[CR]Credential\f[R] and overridden to be the base64url
encoding of \f[CR]PublicKeyCredential.rawId\f[R].
.TP
\f[B]PublicKeyCredential.rawId\f[R] \f[I](read\-only)\f[R]
An \f[CR]ArrayBuffer\f[R] that holds the globally unique identifier for
this \f[CR]PublicKeyCredential\f[R].
This identifier can be used to look up credentials for future calls to
\f[CR]navigator.credentials.get()\f[R].
.TP
\f[B]PublicKeyCredential.response\f[R] \f[I](read\-only)\f[R]
An instance of an \f[CR]AuthenticatorResponse\f[R] object.
It is either of type \f[CR]AuthenticatorAttestationResponse\f[R] if the
\f[CR]PublicKeyCredential\f[R] was the results of a
\f[CR]navigator.credentials.create()\f[R] call, or of type
\f[CR]AuthenticatorAssertionResponse\f[R] if the
\f[CR]PublicKeyCredential\f[R] was the result of a
\f[CR]navigator.credentials.get()\f[R] call.
.TP
\f[B]PublicKeyCredential.type\f[R] \f[I](read\-only)\f[R]
Inherited from \f[CR]Credential\f[R].
Always set to \f[CR]public\-key\f[R] for \f[CR]PublicKeyCredential\f[R]
instances.
.SH STATIC METHODS
.TP
\f[B]PublicKeyCredential.isConditionalMediationAvailable()\f[R]
Returns a \f[CR]Promise\f[R] which resolves to \f[CR]true\f[R] if
conditional mediation is available.
.TP
\f[B]PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()\f[R]
Returns a \f[CR]Promise\f[R] which resolves to \f[CR]true\f[R] if an
authenticator bound to the platform is capable of \f[I]verifying\f[R]
the user.
.TP
\f[B]PublicKeyCredential.parseCreationOptionsFromJSON()\f[R]
Convenience method for deserializing server\-sent credential
registration data when registering a user with credentials.
.TP
\f[B]PublicKeyCredential.parseRequestOptionsFromJSON()\f[R]
Convenience method for deserializing server\-sent credential request
data when authenticating a (registered) user.
.SH INSTANCE METHODS
.TP
\f[B]PublicKeyCredential.getClientExtensionResults()\f[R]
If any extensions were requested, this method will return the results of
processing those extensions.
.TP
\f[B]PublicKeyCredential.toJSON()\f[R]
Convenience method for creating a JSON string representation of a
\f[CR]PublicKeyCredential\f[R] for sending to the server when
registering a user with credentials and authenticating a registered
user.
.SH EXAMPLES
.SS Creating a new instance of PublicKeyCredential
Here, we use \f[CR]navigator.credentials.create()\f[R] to generate a new
credential.
.IP
.EX
\f[B]const\f[R] createCredentialOptions = {
  publicKey: {
    challenge: \f[B]new\f[R] Uint8Array([
      21, 31, 105 \f[I]/* 29 more random bytes generated by the server */\f[R],
    ]),
    rp: {
      name: \[dq]Example CORP\[dq],
      id: \[dq]login.example.com\[dq],
    },
    user: {
      id: \f[B]new\f[R] Uint8Array(16),
      name: \[dq]canand\[at]example.com\[dq],
      displayName: \[dq]Carina Anand\[dq],
    },
    pubKeyCredParams: [
      {
        type: \[dq]public\-key\[dq],
        alg: \-7,
      },
    ],
  },
};

navigator.credentials
  .create(createCredentialOptions)
  .then((newCredentialInfo) \f[B]=>\f[R] {
    \f[B]const\f[R] response = newCredentialInfo.response;
    \f[B]const\f[R] clientExtensionsResults =
      newCredentialInfo.getClientExtensionResults();
  })
  .catch((err) \f[B]=>\f[R] {
    console.error(err);
  });
.EE
.SS Getting an existing instance of PublicKeyCredential
Here, we fetch an existing credential from an authenticator, using
\f[CR]navigator.credentials.get()\f[R].
.IP
.EX
\f[B]const\f[R] requestCredentialOptions = {
  publicKey: {
    challenge: \f[B]new\f[R] Uint8Array([
      \f[I]/* bytes sent from the server */\f[R]
    ]),
  },
};

navigator.credentials
  .get(requestCredentialOptions)
  .then((credentialInfoAssertion) \f[B]=>\f[R] {
    \f[I]// send assertion response back to the server\f[R]
    \f[I]// to proceed with the control of the credential\f[R]
  })
  .catch((err) \f[B]=>\f[R] {
    console.error(err);
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
The parent interface \f[CR]Credential\f[R]
