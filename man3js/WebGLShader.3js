.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBGLSHADER" "3JS" "May 23, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLShader \- WebGLShader
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]WebGLShader\f[R] is part of the WebGL API and can either be a
vertex or a fragment shader.
A \f[CR]WebGLProgram\f[R] requires both types of shaders.
.SH DESCRIPTION
To create a \f[B]WebGLShader\f[R] use
\f[CR]WebGLRenderingContext.createShader\f[R], then hook up the GLSL
source code using \f[CR]WebGLRenderingContext.shaderSource()\f[R], and
finally invoke \f[CR]WebGLRenderingContext.compileShader()\f[R] to
finish and compile the shader.
At this point the \f[B]WebGLShader\f[R] is still not in a usable form
and must still be attached to a \f[CR]WebGLProgram\f[R].
.IP
.EX
\f[B]function\f[R] createShader(gl, sourceCode, type) {
  \f[I]// Compiles either a shader of type gl.VERTEX_SHADER or gl.FRAGMENT_SHADER\f[R]
  \f[B]const\f[R] shader = gl.createShader(type);
  gl.shaderSource(shader, sourceCode);
  gl.compileShader(shader);

  \f[B]if\f[R] (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    \f[B]const\f[R] info = gl.getShaderInfoLog(shader);
    \f[B]throw\f[R] \f[B]new\f[R] Error(\(gaCould not compile WebGL program. \(rsn\(rsn${info}\(ga);
  }
  \f[B]return\f[R] shader;
}
.EE
.PP
See \f[CR]WebGLProgram\f[R] for information on attaching the shaders.
.SH EXAMPLES
.SS Creating a vertex shader
Note that there are many other strategies for writing and accessing
shader source code strings.
These example are for illustration purposes only.
.IP
.EX
\f[B]const\f[R] vertexShaderSource =
  \(dqattribute vec4 position;\(rsn\(dq +
  \(dqvoid main() {\(rsn\(dq +
  \(dq  gl_Position = position;\(rsn\(dq +
  \(dq}\(rsn\(dq;

\f[I]// Use the createShader function from the example above\f[R]
\f[B]const\f[R] vertexShader = createShader(gl, vertexShaderSource, gl.VERTEX_SHADER);
.EE
.SS Creating a fragment shader
.IP
.EX
\f[B]const\f[R] fragmentShaderSource = \(gavoid main() {
  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
}
\(ga;

\f[I]// Use the createShader function from the example above\f[R]
\f[B]const\f[R] fragmentShader = createShader(
  gl,
  fragmentShaderSource,
  gl.FRAGMENT_SHADER,
);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]WebGLProgram\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.attachShader()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.bindAttribLocation()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.compileShader()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.createProgram()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.createShader()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.deleteProgram()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.deleteShader()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.detachShader()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.getAttachedShaders()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.getProgramParameter()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.getProgramInfoLog()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.getShaderParameter()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.getShaderPrecisionFormat()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.getShaderInfoLog()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.getShaderSource()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.isProgram()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.isShader()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.linkProgram()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.shaderSource()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.useProgram()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.validateProgram()\f[R]
