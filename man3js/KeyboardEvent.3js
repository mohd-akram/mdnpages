.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "KeyboardEvent" "JS" "January 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
KeyboardEvent \- KeyboardEvent
.SH SYNOPSIS
\f[B]\f[CB]KeyboardEvent\f[B]\f[R] objects describe a user interaction
with the keyboard; each event describes a single interaction between the
user and a key (or combination of a key with modifier keys) on the
keyboard.
The event type (\f[CR]keydown\f[R], \f[CR]keypress\f[R], or
\f[CR]keyup\f[R]) identifies what kind of keyboard activity occurred.
.RS
.PP
\f[B]Note:\f[R] \f[CR]KeyboardEvent\f[R] events just indicate what
interaction the user had with a key on the keyboard at a low level,
providing no contextual meaning to that interaction.
When you need to handle text input, use the \f[CR]input\f[R] event
instead.
Keyboard events may not be fired if the user is using an alternate means
of entering text, such as a handwriting system on a tablet or graphics
tablet.
.RE
.SH CONSTRUCTOR
.TP
\f[B]KeyboardEvent()\f[R]
Creates a new \f[CR]KeyboardEvent\f[R] object.
.SH CONSTANTS
The \f[CR]KeyboardEvent\f[R] interface defines the following constants.
.SS Keyboard locations
The following constants identify which part of the keyboard the key
event originates from.
They are accessed as \f[CR]KeyboardEvent.DOM_KEY_LOCATION_STANDARD\f[R]
and so forth.
Keyboard location identifiers
Constant
Value
Description
DOM_KEY_LOCATION_STANDARD
0x00
The key described by the event is not identified as being located in a
particular area of the keyboard; it is not located on the numeric keypad
(unless it\[cq]s the NumLock key), and for keys that are duplicated on
the left and right sides of the keyboard, the key is, for whatever
reason, not to be associated with that location.
Examples include alphanumeric keys on the standard PC 101 US keyboard,
the NumLock key, and the space bar.
DOM_KEY_LOCATION_LEFT
0x01
The key is one which may exist in multiple locations on the keyboard
and, in this instance, is on the left side of the keyboard.
Examples include the left Control key, the left Command key on a
Macintosh keyboard, or the left Shift key.
DOM_KEY_LOCATION_RIGHT
0x02
The key is one which may exist in multiple positions on the keyboard
and, in this case, is located on the right side of the keyboard.
Examples include the right Shift key and the right Alt key (Option on a
Mac keyboard).
DOM_KEY_LOCATION_NUMPAD
0x03
The key is located on the numeric keypad, or is a virtual key associated
with the numeric keypad if there\[cq]s more than one place the key could
originate from.
The NumLock key does not fall into this group and is always encoded with
the location DOM_KEY_LOCATION_STANDARD.
Examples include the digits on the numeric keypad, the keypad\[cq]s
Enter key, and the decimal point on the keypad.
.SH INSTANCE PROPERTIES
\f[I]This interface also inherits properties of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]KeyboardEvent.altKey\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the Alt (Option or ⌥
on macOS) key was active when the key event was generated.
.TP
\f[B]KeyboardEvent.code\f[R] \f[I](read\-only)\f[R]
Returns a string with the code value of the physical key represented by
the event.
.RS
.RS
.PP
\f[B]Warning:\f[R] This ignores the user\[cq]s keyboard layout, so that
if the user presses the key at the \[lq]Y\[rq] position in a QWERTY
keyboard layout (near the middle of the row above the home row), this
will always return \[lq]KeyY\[rq], even if the user has a QWERTZ
keyboard (which would mean the user expects a \[lq]Z\[rq] and all the
other properties would indicate a \[lq]Z\[rq]) or a Dvorak keyboard
layout (where the user would expect an \[lq]F\[rq]).
If you want to display the correct keystrokes to the user, you can use
\f[CR]Keyboard.getLayoutMap()\f[R].
.RE
.RE
.TP
\f[B]KeyboardEvent.ctrlKey\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the Ctrl key was
active when the key event was generated.
.TP
\f[B]KeyboardEvent.isComposing\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the event is fired
between after \f[CR]compositionstart\f[R] and before
\f[CR]compositionend\f[R].
.TP
\f[B]KeyboardEvent.key\f[R] \f[I](read\-only)\f[R]
Returns a string representing the key value of the key represented by
the event.
.TP
\f[B]KeyboardEvent.location\f[R] \f[I](read\-only)\f[R]
Returns a number representing the location of the key on the keyboard or
other input device.
A list of the constants identifying the locations is shown above in
Keyboard locations.
.TP
\f[B]KeyboardEvent.metaKey\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the Meta key (on Mac
keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞))
was active when the key event was generated.
.TP
\f[B]KeyboardEvent.repeat\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the key is being held
down such that it is automatically repeating.
.TP
\f[B]KeyboardEvent.shiftKey\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the Shift key was
active when the key event was generated.
.SS Obsolete properties
.TP
\f[B]KeyboardEvent.charCode\f[R] \f[I](deprecated)\f[R] \f[I](read\-only)\f[R]
Returns a number representing the Unicode reference number of the key;
this property is used only by the \f[CR]keypress\f[R] event.
For keys whose \f[CR]char\f[R] property contains multiple characters,
this is the Unicode value of the first character in that property.
In Firefox 26 this returns codes for printable characters.
.RS
.RS
.PP
\f[B]Warning:\f[R] This property is deprecated; you should use
\f[CR]KeyboardEvent.key\f[R] instead, if available.
.RE
.RE
.TP
\f[B]KeyboardEvent.keyCode\f[R] \f[I](deprecated)\f[R] \f[I](read\-only)\f[R]
Returns a number representing a system and implementation dependent
numerical code identifying the unmodified value of the pressed key.
.RS
.RS
.PP
\f[B]Warning:\f[R] This property is deprecated; you should use
\f[CR]KeyboardEvent.key\f[R] instead, if available.
.RE
.RE
.TP
\f[B]KeyboardEvent.keyIdentifier\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R] \f[I](read\-only)\f[R]
This property is non\-standard and has been deprecated in favor of
\f[CR]KeyboardEvent.key\f[R].
It was part of an old version of DOM Level 3 Events.
.SH INSTANCE METHODS
\f[I]This interface also inherits methods of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]KeyboardEvent.getModifierState()\f[R]
Returns a boolean value indicating if a modifier key such as Alt, Shift,
Ctrl, or Meta, was pressed when the event was created.
.SS Obsolete methods
.TP
\f[B]KeyboardEvent.initKeyEvent()\f[R] \f[I](deprecated)\f[R]
Initializes a \f[CR]KeyboardEvent\f[R] object.
This was implemented only by Firefox, and is no longer supported even
there; instead, you should use the \f[CR]KeyboardEvent()\f[R]
constructor.
.TP
\f[B]KeyboardEvent.initKeyboardEvent()\f[R] \f[I](deprecated)\f[R]
Initializes a \f[CR]KeyboardEvent\f[R] object.
This is now deprecated.
You should instead use the \f[CR]KeyboardEvent()\f[R] constructor.
.SH EVENTS
The following events are based on the \f[CR]KeyboardEvent\f[R] type.
In the list below, each event links to the documentation for the
\f[CR]Element\f[R] handler for the event, which applies generally to all
of the recipients, including \f[CR]Element\f[R], \f[CR]Document\f[R],
and \f[CR]Window\f[R].
.TP
\f[B]keydown\f[R]
A key has been pressed.
.TP
\f[B]keyup\f[R]
A key has been released.
.SS Obsolete events
.TP
\f[B]keypress\f[R] \f[I](deprecated)\f[R]
A key that normally produces a character value has been pressed.
This event was highly device\-dependent and is obsolete.
You should not use it.
.SH USAGE NOTES
There are three types of keyboard events: \f[CR]keydown\f[R],
\f[CR]keypress\f[R], and \f[CR]keyup\f[R].
For most keys, Gecko dispatches a sequence of key events like this:
.IP "1." 3
When the key is first pressed, the \f[CR]keydown\f[R] event is sent.
.IP "2." 3
If the key is not a modifier key, the \f[CR]keypress\f[R] event is sent.
.IP "3." 3
When the user releases the key, the \f[CR]keyup\f[R] event is sent.
.SS Special cases
Some keys toggle the state of an indicator light; these include keys
such as Caps Lock, Num Lock, and Scroll Lock.
On Windows and Linux, these keys dispatch only the \f[CR]keydown\f[R]
and \f[CR]keyup\f[R] events.
.RS
.PP
\f[B]Note:\f[R] On Linux, Firefox 12 and earlier also dispatched the
\f[CR]keypress\f[R] event for these keys.
.RE
.PP
However, a limitation of the macOS event model causes Caps Lock to
dispatch only the \f[CR]keydown\f[R] event.
Num Lock was supported on some older laptop models (2007 models and
older), but since then, macOS hasn\[cq]t supported Num Lock even on
external keyboards.
On older MacBooks with a Num Lock key, that key doesn\[cq]t generate any
key events.
Gecko does support the Scroll Lock key if an external keyboard which has
an F14 key is connected.
In certain older versions of Firefox, this key generated a
\f[CR]keypress\f[R] event; this inconsistent behavior was \c
.UR https://bugzil.la/602812
Firefox bug 602812
.UE \c
\&.
.SS Auto\-repeat handling
When a key is pressed and held down, it begins to auto\-repeat.
This results in a sequence of events similar to the following being
dispatched:
.IP "1." 3
\f[CR]keydown\f[R]
.IP "2." 3
\f[CR]keypress\f[R]
.IP "3." 3
\f[CR]keydown\f[R]
.IP "4." 3
\f[CR]keypress\f[R]
.IP "5." 3
<<repeating until the user releases the key>>
.IP "6." 3
\f[CR]keyup\f[R]
.PP
This is what the DOM Level 3 specification says should happen.
There are some caveats, however, as described below.
.SS Auto\-repeat on some GTK environments such as Ubuntu 9.4
In some GTK\-based environments, auto\-repeat dispatches a native
key\-up event automatically during auto\-repeat, and there\[cq]s no way
for Gecko to know the difference between a repeated series of keypresses
and an auto\-repeat.
On those platforms, then, an auto\-repeat key will generate the
following sequence of events:
.IP "1." 3
\f[CR]keydown\f[R]
.IP "2." 3
\f[CR]keypress\f[R]
.IP "3." 3
\f[CR]keyup\f[R]
.IP "4." 3
\f[CR]keydown\f[R]
.IP "5." 3
\f[CR]keypress\f[R]
.IP "6." 3
\f[CR]keyup\f[R]
.IP "7." 3
<<repeating until the user releases the key>>
.IP "8." 3
\f[CR]keyup\f[R]
.PP
In these environments, unfortunately, there\[cq]s no way for web content
to tell the difference between auto\-repeating keys and keys that are
just being pressed repeatedly.
.SH EXAMPLE
.IP
.EX
document.addEventListener(
  \[dq]keydown\[dq],
  (event) \f[B]=>\f[R] {
    \f[B]const\f[R] keyName = event.key;

    \f[B]if\f[R] (keyName === \[dq]Control\[dq]) {
      \f[I]// do not alert when only Control key is pressed.\f[R]
      \f[B]return\f[R];
    }

    \f[B]if\f[R] (event.ctrlKey) {
      \f[I]// Even though event.key is not \[aq]Control\[aq] (e.g., \[aq]a\[aq] is pressed),\f[R]
      \f[I]// event.ctrlKey may be true if Ctrl key is pressed at the same time.\f[R]
      alert(\[ga]Combination of ctrlKey + ${keyName}\[ga]);
    } \f[B]else\f[R] {
      alert(\[ga]Key pressed ${keyName}\[ga]);
    }
  },
  \f[B]false\f[R],
);

document.addEventListener(
  \[dq]keyup\[dq],
  (event) \f[B]=>\f[R] {
    \f[B]const\f[R] keyName = event.key;

    \f[I]// As the user releases the Ctrl key, the key is no longer active,\f[R]
    \f[I]// so event.ctrlKey is false.\f[R]
    \f[B]if\f[R] (keyName === \[dq]Control\[dq]) {
      alert(\[dq]Control key was released\[dq]);
    }
  },
  \f[B]false\f[R],
);
.EE
.PP
The \f[CR]KeyboardEvent\f[R] interface specification went through
numerous draft versions, first under DOM Events Level 2 where it was
dropped as no consensus arose, then under DOM Events Level 3.
This led to the implementation of non\-standard initialization methods,
the early DOM Events Level 2 version,
\f[CR]KeyboardEvent.initKeyEvent()\f[R] by Gecko browsers and the early
DOM Events Level 3 version, \f[CR]KeyboardEvent.initKeyboardEvent()\f[R]
by others.
Both have been superseded by the modern usage of a constructor:
\f[CR]KeyboardEvent()\f[R].
.SS Compatibility notes
.IP \[bu] 2
As of Firefox 65, the \f[CR]keypress\f[R] event is no longer fired for
non\-printable keys (\c
.UR https://bugzil.la/968056
Firefox bug 968056
.UE \c
), except for the
.RS 2
.PP
Enter
.PP
key, and the
.PP
Shift
.PP
+
.PP
Enter
.PP
and
.PP
Ctrl
.PP
+
.PP
Enter
.PP
key combinations (these were kept for cross\-browser compatibility
purposes).
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]KeyboardEvent.code\f[R].
.IP \[bu] 2
\f[CR]KeyboardEvent.key\f[R].
.IP \[bu] 2
\f[CR]KeyboardEvent.getModifierState()\f[R]
