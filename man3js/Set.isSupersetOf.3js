.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SET.ISSUPERSETOF" "3JS" "March 5, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.isSupersetOf \- Set.prototype.isSupersetOf()
.SH SYNOPSIS
The \f[B]\f[CB]isSupersetOf()\f[B]\f[R] method of \f[CR]Set\f[R]
instances takes a set and returns a boolean indicating if all elements
of the given set are in this set.
.SH SYNTAX
.IP
.EX
isSupersetOf(other)
.EE
.SS Parameters
.TP
\f[B]other\f[R]
A \f[CR]Set\f[R] object, or set\-like object.
.SS Return value
\f[CR]true\f[R] if all elements in the \f[CR]other\f[R] set are also in
this set, and \f[CR]false\f[R] otherwise.
.SH DESCRIPTION
In mathematical notation, \f[I]superset\f[R] is defined as:
.PP
\ A⊇B⇔∀x∊B,x∊AAB xB,,xA 
.PP
And using Venn diagram:
[IMAGE: A Venn diagram with two circles.
A is a superset of B because B is completely contained in A.]
A Venn diagram with two circles.
A is a superset of B because B is completely contained in A.
.RS
.PP
\f[B]Note:\f[R] The \f[I]superset\f[R] relationship is not \f[I]proper
superset\f[R], which means \f[CR]isSupersetOf()\f[R] returns
\f[CR]true\f[R] if \f[CR]this\f[R] and \f[CR]other\f[R] contain the same
elements.
.RE
.PP
\f[CR]isSupersetOf()\f[R] accepts set\-like objects as the
\f[CR]other\f[R] parameter.
It requires \f[CR]this\f[R] to be an actual \f[CR]Set\f[R] instance,
because it directly retrieves the underlying data stored in
\f[CR]this\f[R] without invoking any user code.
Then, its behavior depends on the sizes of \f[CR]this\f[R] and
\f[CR]other\f[R]:
.IP \(bu 2
If there are fewer elements in \f[CR]this\f[R] than
\f[CR]other.size\f[R], then it directly returns \f[CR]false\f[R].
.IP \(bu 2
Otherwise, it iterates over \f[CR]other\f[R] by calling its
\f[CR]keys()\f[R] method, and if any element in \f[CR]other\f[R] is not
present in \f[CR]this\f[R], it returns \f[CR]false\f[R] (and closes the
\f[CR]keys()\f[R] iterator by calling its \f[CR]return()\f[R] method).
Otherwise, it returns \f[CR]true\f[R].
.SH EXAMPLES
.SS Using isSupersetOf()
The set of even numbers (<20) is a superset of multiples of 4 (<20):
.IP
.EX
\f[B]const\f[R] evens = \f[B]new\f[R] Set([2, 4, 6, 8, 10, 12, 14, 16, 18]);
\f[B]const\f[R] fours = \f[B]new\f[R] Set([4, 8, 12, 16]);
console.log(evens.isSupersetOf(fours)); \f[I]// true\f[R]
.EE
.PP
The set of all odd numbers (<20) is not a superset of prime numbers
(<20), because 2 is prime but not odd:
.IP
.EX
\f[B]const\f[R] primes = \f[B]new\f[R] Set([2, 3, 5, 7, 11, 13, 17, 19]);
\f[B]const\f[R] odds = \f[B]new\f[R] Set([3, 5, 7, 9, 11, 13, 15, 17, 19]);
console.log(odds.isSupersetOf(primes)); \f[I]// false\f[R]
.EE
.PP
Equivalent sets are supersets of each other:
.IP
.EX
\f[B]const\f[R] set1 = \f[B]new\f[R] Set([1, 2, 3]);
\f[B]const\f[R] set2 = \f[B]new\f[R] Set([1, 2, 3]);
console.log(set1.isSupersetOf(set2)); \f[I]// true\f[R]
console.log(set2.isSupersetOf(set1)); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#new-set-methods
Polyfill of \f[CR]Set.prototype.isSupersetOf\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/set.prototype.issupersetof
es\-shims polyfill of \f[CR]Set.prototype.isSupersetOf\f[R]
.UE \c
.IP \(bu 2
\f[CR]Set.prototype.difference()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.intersection()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.isDisjointFrom()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.isSubsetOf()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.symmetricDifference()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.union()\f[R]
