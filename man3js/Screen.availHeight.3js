.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Screen.availHeight" "JS" "July 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Screen.availHeight \- Screen: availHeight property
.SH SYNOPSIS
The read\-only \f[CR]Screen\f[R] interface\[cq]s
\f[B]\f[CB]availHeight\f[B]\f[R] property returns the height, in CSS
pixels, of the space available for Web content on the screen.
Since \f[CR]Screen\f[R] is exposed on the \f[CR]Window\f[R]
interface\[cq]s \f[CR]window.screen\f[R] property, you access
\f[CR]availHeight\f[R] using \f[CR]window.screen.availHeight\f[R].
.PP
You can similarly use \f[CR]Screen.availWidth\f[R] to get the number of
pixels which are horizontally available to the browser for its use.
.SH VALUE
A numeric value indicating the number of CSS pixels tall the
screen\[cq]s available space is.
This can be no larger than the value of \f[CR]window.screen.height\f[R],
and will be less if the device or user agent reserves any vertical space
for itself.
.PP
For instance, on a Mac whose Dock is located at the bottom of screen
(which is the default), the value of \f[CR]availHeight\f[R] is
approximately the value of \f[CR]height\f[R] (the total height of the
screen in CSS pixels) minus the heights of the Dock and menu bar, as
seen in the diagram below.
They only take up \f[CR]availHeight\f[R] if they are always shown: if
the page is fullscreened, or if the dock is configured to automatically
hide and show, then they won\[cq]t be counted in \f[CR]availHeight\f[R].
[IMAGE: Diagram showing how Screen.availHeight relates to Screen.height
and the screen\[cq]s contents]
Diagram showing how Screen.availHeight relates to Screen.height and the
screen\[cq]s contents
.SH EXAMPLES
If your web application needs to open a new window, such as a tool
palette which can contain multiple panels, and wants to position it so
that it occupies the entire vertical space available, you can do so
using code similar to what\[cq]s seen here.
.PP
In the main window, when it\[cq]s time to open the panels, code like the
following is used.
.IP
.EX
\f[B]const\f[R] paletteWindow = window.open(
  \[dq]panels.html\[dq],
  \[dq]Panels\[dq],
  \[dq]left=0, top=0, width=200\[dq],
);
.EE
.PP
The Panels window\[cq]s HTML, in \f[CR]panels.html\f[R], has JavaScript
code of its own, which is executed as soon as the window is created.
It doesn\[cq]t even need to wait for any particular event (or any event
at all).
That code handles resizing the window based on the available space:
.IP
.EX
window.outerHeight = window.screen.availHeight;
.EE
.PP
The result is something similar to the below.
Note the Panels window filling all available vertical space at the left
of the screen.
[IMAGE: Screenshot of the example for Screen.availHeight]
Screenshot of the example for Screen.availHeight
.PP
On a Windows system, this would function similarly, by opening the
window and sizing it vertically so it uses all available vertical space,
leaving room for the taskbar and any other interface elements that
reserve space.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Window\f[R]
.IP \[bu] 2
\f[CR]Screen\f[R]
.IP \[bu] 2
\f[CR]Screen.availWidth\f[R]
.IP \[bu] 2
\f[CR]Window.innerHeight\f[R]
