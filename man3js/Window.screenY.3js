.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Window.screenY" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.screenY \- Window: screenY property
.SH SYNOPSIS
The \f[B]\f[CB]Window.screenY\f[B]\f[R] read\-only property returns the
vertical distance, in CSS pixels, of the top border of the user\[cq]s
browser viewport to the top edge of the screen.
.RS
.PP
\f[B]Note:\f[R] An alias of \f[CR]screenY\f[R] was implemented across
modern browsers in more recent times \[em] \f[CR]Window.screenTop\f[R].
This was originally supported only in IE but was introduced everywhere
due to popularity.
.RE
.SH VALUE
A number equal to the number of CSS pixels from the top edge of the
browser viewport to the top edge of the screen.
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/screenleft-screentop/
screenleft\-screentop
.UE \c
\ example, you\[cq]ll see a canvas onto which has been drawn a circle.
In this example we are using
\f[CR]Window.screenLeft\f[R]/\f[CR]Window.screenTop\f[R] plus
\f[CR]Window.requestAnimationFrame()\f[R] to constantly redraw the
circle in the same physical position on the screen, even if the window
position is moved.
.IP
.EX
initialLeft = window.screenLeft + canvasElem.offsetLeft;
initialTop = window.screenTop + canvasElem.offsetTop;

\f[B]function\f[R] positionElem() {
  \f[B]let\f[R] newLeft = window.screenLeft + canvasElem.offsetLeft;
  \f[B]let\f[R] newTop = window.screenTop + canvasElem.offsetTop;

  \f[B]let\f[R] leftUpdate = initialLeft \- newLeft;
  \f[B]let\f[R] topUpdate = initialTop \- newTop;

  ctx.fillStyle = \[dq]rgb(0 0 0)\[dq];
  ctx.fillRect(0, 0, width, height);
  ctx.fillStyle = \[dq]rgb(0 0 255)\[dq];
  ctx.beginPath();
  ctx.arc(
    leftUpdate + width / 2,
    topUpdate + height / 2 + 35,
    50,
    degToRad(0),
    degToRad(360),
    \f[B]false\f[R],
  );
  ctx.fill();

  pElem.textContent = \[ga]Window.screenLeft: ${window.screenLeft}, Window.screenTop: ${window.screenTop}\[ga];

  window.requestAnimationFrame(positionElem);
}

window.requestAnimationFrame(positionElem);
.EE
.PP
These work in exactly the same way as
\f[CR]screenX\f[R]/\f[CR]screenY\f[R].
.PP
Also in the code we include a snippet that detects whether
\f[CR]screenLeft\f[R] is supported, and if not, polyfills in
\f[CR]screenLeft\f[R]/\f[CR]screenTop\f[R] using
\f[CR]screenX\f[R]/\f[CR]screenY\f[R].
.IP
.EX
\f[B]if\f[R] (!window.screenLeft) {
  window.screenLeft = window.screenX;
  window.screenTop = window.screenY;
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]window.screenTop\f[R]
.IP \[bu] 2
\f[CR]window.screenX\f[R]
