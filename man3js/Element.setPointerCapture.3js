.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Element.setPointerCapture" "JS" "June 10, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.setPointerCapture \- Element: setPointerCapture() method
.SH SYNOPSIS
The \f[B]\f[CB]setPointerCapture()\f[B]\f[R] method of the
\f[CR]Element\f[R] interface is used to designate a specific element as
the \f[I]capture target\f[R] of future pointer events.
Subsequent events for the pointer will be targeted at the capture
element until capture is released (via
\f[CR]Element.releasePointerCapture()\f[R] or the \f[CR]pointerup\f[R]
event is fired).
.RS
.PP
\f[B]Note:\f[R] Pointer capture will cause the target to capture all
subsequent pointer events as if they were occurring over the capturing
target.
Accordingly, \f[CR]pointerover\f[R], \f[CR]pointerenter\f[R],
\f[CR]pointerleave\f[R], and \f[CR]pointerout\f[R] \f[B]will not
fire\f[R] as long as this capture is set.
For touchscreen browsers that allow \c
.UR https://w3c.github.io/pointerevents/#dfn-direct-manipulation
direct manipulation
.UE \c
, an \c
.UR https://w3c.github.io/pointerevents/#dfn-implicit-pointer-capture
implicit pointer capture
.UE \c
\ will be called on the element when a \f[CR]pointerdown\f[R] event
triggers.
The capture can be released manually by calling
\f[CR]element.releasePointerCapture\f[R] on the target element, or it
will be implicitly released after a \f[CR]pointerup\f[R] or
\f[CR]pointercancel\f[R] event.
.RE
.RS
.PP
\f[B]Note:\f[R] If you need to move an element in the DOM, then make
sure to call \f[CR]setPointerCapture()\f[R] \f[B]after DOM
movements\f[R] so that \f[CR]setPointerCapture()\f[R] will not lose
track of it.
E.g., if you need to use \f[CR]Element.append()\f[R] to move an element
somewhere else, then make sure to call \f[CR]setPointerCapture()\f[R] on
it only after the call to \f[CR]Element.append()\f[R].
.RE
.SS Overview of pointer capture
\f[I]Pointer capture\f[R] allows events for a particular \f[I]pointer
event\f[R] (\f[CR]PointerEvent\f[R]) to be re\-targeted to a particular
element instead of the normal (or \f[I]hit test\f[R]) target at a
pointer\[cq]s location.
This can be used to ensure that an element continues to receive pointer
events even if the pointer device\[cq]s contact moves off the element
(such as by scrolling or panning).
.SH SYNTAX
.IP
.EX
setPointerCapture(pointerId)
.EE
.SS Parameters
.TP
\f[B]pointerId\f[R]
The \f[CR]pointerId\f[R] of a \f[CR]PointerEvent\f[R] object.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]pointerId\f[R] does not match any active pointer.
.SH EXAMPLES
This example sets pointer capture on a \f[CR]<div>\f[R] when you press
down on it.
This lets you slide the element horizontally, even when your pointer
moves outside of its boundaries.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]slider\[dq]>SLIDE ME</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]width\f[R]: 140px;
  \f[B]height\f[R]: 50px;
  \f[B]display\f[R]: flex;
  \f[B]align\-items\f[R]: center;
  \f[B]justify\-content\f[R]: center;
  \f[B]background\f[R]: #fbe;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]function\f[R] beginSliding(e) {
  slider.onpointermove = slide;
  slider.setPointerCapture(e.pointerId);
}

\f[B]function\f[R] stopSliding(e) {
  slider.onpointermove = \f[B]null\f[R];
  slider.releasePointerCapture(e.pointerId);
}

\f[B]function\f[R] slide(e) {
  slider.style.transform = \[ga]translate(${e.clientX \- 70}px)\[ga];
}

\f[B]const\f[R] slider = document.getElementById(\[dq]slider\[dq]);

slider.onpointerdown = beginSliding;
slider.onpointerup = stopSliding;
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Element.hasPointerCapture()\f[R]
.IP \[bu] 2
\f[CR]Element.releasePointerCapture()\f[R]
.IP \[bu] 2
\f[CR]Pointer Events\f[R]
