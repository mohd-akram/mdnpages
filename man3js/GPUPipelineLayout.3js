.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUPIPELINELAYOUT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUPipelineLayout \- GPUPipelineLayout
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUPipelineLayout\f[B]\f[R] interface of the WebGPU API
defines the \f[CR]GPUBindGroupLayout\f[R]s used by a pipeline.
\f[CR]GPUBindGroup\f[R]s used with the pipeline during command encoding
must have compatible \f[CR]GPUBindGroupLayout\f[R]s.
.PP
A \f[CR]GPUPipelineLayout\f[R] object instance is created using the
\f[CR]GPUDevice.createPipelineLayout()\f[R] method.
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Basic pipeline layout example
The following snippet:
.IP \(bu 2
Creates a \f[CR]GPUBindGroupLayout\f[R] that describes a binding with a
buffer, a texture, and a sampler.
.IP \(bu 2
Creates a \f[CR]GPUPipelineLayout\f[R] based on the
\f[CR]GPUBindGroupLayout\f[R].
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] bindGroupLayout = device.createBindGroupLayout({
  entries: [
    {
      binding: 0,
      visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,
      buffer: {},
    },
    {
      binding: 1,
      visibility: GPUShaderStage.FRAGMENT,
      texture: {},
    },
    {
      binding: 2,
      visibility: GPUShaderStage.FRAGMENT,
      sampler: {},
    },
  ],
});

\f[B]const\f[R] pipelineLayout = device.createPipelineLayout({
  bindGroupLayouts: [bindGroupLayout],
});

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
