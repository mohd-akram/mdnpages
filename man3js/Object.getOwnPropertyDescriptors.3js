.\" Automatically generated by Pandoc 3.4
.\"
.TH "Object.getOwnPropertyDescriptors" "JS" "August 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.getOwnPropertyDescriptors \- Object.getOwnPropertyDescriptors()
.SH SYNOPSIS
The \f[B]\f[CB]Object.getOwnPropertyDescriptors()\f[B]\f[R] static
method returns all own property descriptors of a given object.
.SH SYNTAX
.IP
.EX
Object.getOwnPropertyDescriptors(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object for which to get all own property descriptors.
.SS Return value
An object containing all own property descriptors of an object.
Might be an empty object, if there are no properties.
.SH DESCRIPTION
This method permits examination of the precise description of all own
properties of an object.
A \f[I]property\f[R] in JavaScript consists of either a string\-valued
name or a \f[CR]Symbol\f[R] and a property descriptor.
Further information about property descriptor types and their attributes
can be found in \f[CR]Object.defineProperty()\f[R].
.PP
A \f[I]property descriptor\f[R] is a record with some of the following
attributes:
.TP
\f[B]value\f[R]
The value associated with the property (data descriptors only).
.TP
\f[B]writable\f[R]
\f[CR]true\f[R] if and only if the value associated with the property
may be changed (data descriptors only).
.TP
\f[B]get\f[R]
A function which serves as a getter for the property, or
\f[CR]undefined\f[R] if there is no getter (accessor descriptors only).
.TP
\f[B]set\f[R]
A function which serves as a setter for the property, or
\f[CR]undefined\f[R] if there is no setter (accessor descriptors only).
.TP
\f[B]configurable\f[R]
\f[CR]true\f[R] if and only if the type of this property descriptor may
be changed and if the property may be deleted from the corresponding
object.
.TP
\f[B]enumerable\f[R]
\f[CR]true\f[R] if and only if this property shows up during enumeration
of the properties on the corresponding object.
.SH EXAMPLES
.SS Creating a shallow copy
Whereas the \f[CR]Object.assign()\f[R] method will only copy enumerable
and own properties from a source object to a target object, you are able
to use this method and \f[CR]Object.create()\f[R] for a shallow copy
between two unknown objects:
.IP
.EX
Object.create(
  Object.getPrototypeOf(obj),
  Object.getOwnPropertyDescriptors(obj),
);
.EE
.SS Creating a subclass
A typical way of creating a subclass is to define the subclass, set its
prototype to an instance of the superclass, and then define properties
on that instance.
This can get awkward especially for getters and setters.
Instead, you can use this code to set the prototype:
.IP
.EX
\f[B]function\f[R] superclass() {}
superclass.prototype = {
  \f[I]// Define the superclass constructor, methods, and properties here\f[R]
};
\f[B]function\f[R] subclass() {}
subclass.prototype = Object.create(superclass.prototype, {
  \f[I]// Define the subclass constructor, methods, and properties here\f[R]
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-object
Polyfill of \f[CR]Object.getOwnPropertyDescriptors\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Object.getOwnPropertyDescriptor()\f[R]
.IP \[bu] 2
\f[CR]Object.defineProperty()\f[R]
