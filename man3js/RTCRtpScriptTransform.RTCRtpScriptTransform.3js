.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCRtpScriptTransform.RTCRtpScriptTransform" "JS" "September 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpScriptTransform.RTCRtpScriptTransform \- RTCRtpScriptTransform:
RTCRtpScriptTransform() constructor
.SH SYNOPSIS
The \f[B]\f[CB]RTCRtpScriptTransform()\f[B]\f[R] constructor creates a
new \f[CR]RTCRtpScriptTransform\f[R] object.
.PP
Constructing the \f[CR]RTCRtpScriptTransform\f[R] creates a counterpart
\f[CR]RTCRtpScriptTransformer\f[R] in the specified worker, along with
passed options (if any).
Objects in the third parameter to the constructor are transferred.
.PP
The \f[CR]rtctransform\f[R] event is then fired at the worker global
object.
Worker code can use the \f[CR]event.transformer\f[R] property to get the
counterpart \f[CR]RTCRtpScriptTransformer\f[R], and
\f[CR]event.transformer.options\f[R] is used to get the options.
.PP
Note that the options are primarily used to inform the worker whether
the transformer is processing incoming or outgoing frames, so that it
can apply an appropriate transform.
.SH SYNTAX
.IP
.EX
new RTCRtpScriptTransform(worker)
new RTCRtpScriptTransform(worker, options)
new RTCRtpScriptTransform(worker, options, transfer)
.EE
.SS Parameters
.TP
\f[B]worker\f[R]
A \f[CR]Worker\f[R], which will define code for one or more WebRTC
transform streams.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An arbitrary object that will be made available in the worker.
This is most commonly used to inform the worker whether it injected into
the WebRTC sender or receiver pipeline, and hence which transform should
be applied.
However it may also be used to send any other object, such as a
\f[CR]MessagePort\f[R] for communicating dynamically with the
transformer.
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
An optional array of transferable objects that will be transferred to
the worker.
After transfer, these objects are unusable in the main thread.
.SS Exceptions
.TP
\f[B]DataCloneError\f[R] \f[B]DOMException\f[R]
Thrown if an object in \f[CR]transfer\f[R] cannot be transferred.
.SH EXAMPLES
The first example below shows construction of a
\f[CR]RTCRtpScriptTransform\f[R] that is then assigned to a
\f[CR]RTCRtpSender.transform\f[R].
The constructor takes an optional object with the property
\f[CR]name\f[R] and \f[CR]senderTransform\f[R].
The worker can use this option to understand when it is transforming
encoded frames from the encoder (rather than incoming frames from the
packetizer).
.IP
.EX
\f[I]// Create a worker containing a TransformStream\f[R]
\f[B]const\f[R] worker = \f[B]new\f[R] Worker(\[dq]worker.js\[dq]);
videoSender.transform = \f[B]new\f[R] RTCRtpScriptTransform(worker, {
  name: \[dq]senderTransform\[dq],
});
.EE
.PP
Any property name and value can be used in the options, as long as they
can be serialized (and transferred if specified in the last constructor
parameter).
The code below transfers the second port of a \f[CR]MessageChannel\f[R]
to the worker, which we might do in order to dynamically update
transform code with (say) a new encryption key.
.IP
.EX
\f[I]// Create a worker containing a TransformStream\f[R]
\f[B]const\f[R] worker = \f[B]new\f[R] Worker(\[dq]worker.js\[dq]);
\f[B]const\f[R] channel = \f[B]new\f[R] MessageChannel();

\f[B]const\f[R] transform = \f[B]new\f[R] RTCRtpScriptTransform(
  worker,
  { purpose: \[dq]encrypt\[dq], port: channel.port2 },
  [channel.port2],
);
.EE
.SH SEE ALSO
.IP \[bu] 2
Using WebRTC Encoded Transforms
.IP \[bu] 2
\f[CR]RTCRtpSender.transform\f[R]
.IP \[bu] 2
\f[CR]RTCRtpReceiver.transform\f[R]
