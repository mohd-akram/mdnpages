.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ExtendableMessageEvent" "JS" "May 13, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ExtendableMessageEvent \- ExtendableMessageEvent
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
The \f[B]\f[CB]ExtendableMessageEvent\f[B]\f[R] interface of the Service
Worker API represents the event object of a \f[CR]message\f[R] event
fired on a service worker (when a message is received on the
\f[CR]ServiceWorkerGlobalScope\f[R] from another context) \[em] extends
the lifetime of such events.
.PP
This interface inherits from the \f[CR]ExtendableEvent\f[R] interface.
.SH CONSTRUCTOR
.TP
\f[B]ExtendableMessageEvent()\f[R]
Creates a new \f[CR]ExtendableMessageEvent\f[R] object instance.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent,
\f[CI]ExtendableEvent\f[I]\f[R].
.TP
\f[B]ExtendableMessageEvent.data\f[R] \f[I](read\-only)\f[R]
Returns the event\[cq]s data.
It can be any data type.
If dispatched in \f[CR]messageerror\f[R] event, the property will be
\f[CR]null\f[R].
.TP
\f[B]ExtendableMessageEvent.origin\f[R] \f[I](read\-only)\f[R]
Returns the origin of the \f[CR]Client\f[R] that sent the message.
.TP
\f[B]ExtendableMessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
Represents, in server\-sent events, the last event ID of the event
source.
.TP
\f[B]ExtendableMessageEvent.source\f[R] \f[I](read\-only)\f[R]
Returns a reference to the \f[CR]Client\f[R] object that sent the
message.
.TP
\f[B]ExtendableMessageEvent.ports\f[R] \f[I](read\-only)\f[R]
Returns the array containing the \f[CR]MessagePort\f[R] objects
representing the ports of the associated message channel.
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]ExtendableEvent\f[I]\f[R].
.SH EXAMPLES
In the below example a page gets a handle to the
\f[CR]ServiceWorker\f[R] object via
\f[CR]ServiceWorkerRegistration.active\f[R], and then calls its
\f[CR]postMessage()\f[R] function.
.IP
.EX
\f[I]// in the page being controlled\f[R]
\f[B]if\f[R] (navigator.serviceWorker) {
  navigator.serviceWorker.register(\[dq]service\-worker.js\[dq]);

  navigator.serviceWorker.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
    \f[I]// event is a MessageEvent object\f[R]
    console.log(\[ga]The service worker sent me a message: ${event.data}\[ga]);
  });

  navigator.serviceWorker.ready.then((registration) \f[B]=>\f[R] {
    registration.active.postMessage(\[dq]Hi service worker\[dq]);
  });
}
.EE
.PP
The service worker can receive the message by listening to the
\f[CR]message\f[R] event:
.IP
.EX
\f[I]// in the service worker\f[R]
addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  \f[I]// event is an ExtendableMessageEvent object\f[R]
  console.log(\[ga]The client sent me a message: ${event.data}\[ga]);

  event.source.postMessage(\[dq]Hi client\[dq]);
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \[bu] 2
Channel Messaging
