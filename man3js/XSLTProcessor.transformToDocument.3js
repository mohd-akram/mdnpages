'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "XSLTProcessor.transformToDocument" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XSLTProcessor.transformToDocument \- XSLTProcessor:
transformToDocument() method
.SH SYNOPSIS
The \f[CR]transformToDocument()\f[R] method of the
\f[CR]XSLTProcessor\f[R] interface transforms the provided
\f[CR]Node\f[R] source to a \f[CR]Document\f[R] using the XSLT
stylesheet associated with \f[CR]XSLTProcessor\f[R].
.SH SYNTAX
.IP
.EX
transformToDocument(source)
.EE
.SS Parameters
.TP
\f[B]source\f[R]
The \f[CR]Node\f[R] source to apply the XSLT stylesheet to.
.SS Return value
A \f[CR]Document\f[R].
The actual interface depends on the output method of the stylesheet, as
specified by \f[CR]<xsl:output>\f[R] element\[cq]s \f[CR]method\f[R].
.PP
.TS
tab(@);
lw(7.9n) lw(62.1n).
T{
Output method
T}@T{
Result interface
T}
_
T{
\f[CR]html\f[R]
T}@T{
\f[CR]HTMLDocument\f[R]
T}
T{
\f[CR]xml\f[R]
T}@T{
\f[CR]XMLDocument\f[R]
T}
T{
\f[CR]text\f[R]
T}@T{
\f[CR]XMLDocument\f[R] with a single root element
\f[CR]<transformiix:result>\f[R] with the text as a child
T}
.TE
.SH EXAMPLES
.SS Using transformToDocument()
This example demonstrates how to use \f[CR]transformToDocument()\f[R] to
transform an XML document using XSLT, resulting in a new XML document
structure.
.SS HTML
.IP
.EX
<\f[B]pre\f[R] id=\[dq]result\[dq]></\f[B]pre\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] xmlString = \[ga]
<books>
  <book>
    <title>Book 1</title>
    <author>Author 1</author>
  </book>
  <book>
    <title>Book 2</title>
    <author>Author 2</author>
  </book>
</books>
\[ga];

\f[B]const\f[R] xsltString = \[ga]
<xsl:stylesheet version=\[dq]1.0\[dq] xmlns:xsl=\[dq]http://www.w3.org/1999/XSL/Transform\[dq]>
  <xsl:output method=\[dq]xml\[dq] indent=\[dq]yes\[dq]/>
  <xsl:template match=\[dq]/\[dq]>
    <catalog>
      <xsl:for\-each select=\[dq]books/book\[dq]>
        <item>
          <name><xsl:value\-of select=\[dq]title\[dq]/></name>
          <writer><xsl:value\-of select=\[dq]author\[dq]/></writer>
        </item>
      </xsl:for\-each>
    </catalog>
  </xsl:template>
</xsl:stylesheet>
\[ga];

\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
\f[B]const\f[R] xmlDoc = parser.parseFromString(xmlString, \[dq]application/xml\[dq]);
\f[B]const\f[R] xsltDoc = parser.parseFromString(xsltString, \[dq]application/xml\[dq]);

\f[B]const\f[R] xsltProcessor = \f[B]new\f[R] XSLTProcessor();
xsltProcessor.importStylesheet(xsltDoc);

\f[I]// Perform the transformation, returning the result as a new XML document\f[R]
\f[B]const\f[R] resultDoc = xsltProcessor.transformToDocument(xmlDoc);

\f[I]// Serialize the result document to a string\f[R]
\f[B]const\f[R] serializer = \f[B]new\f[R] XMLSerializer();
\f[B]const\f[R] resultString = serializer.serializeToString(resultDoc);

\f[I]// Display the transformed XML in the page\f[R]
document.getElementById(\[dq]result\[dq]).textContent = resultString;
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]XSLTProcessor.transformToFragment()\f[R]
