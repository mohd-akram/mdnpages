.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "CustomStateSet" "JS" "October 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CustomStateSet \- CustomStateSet
.SH SYNOPSIS
The \f[B]\f[CB]CustomStateSet\f[B]\f[R] interface of the Document Object
Model stores a list of states for an autonomous custom element, and
allows states to be added and removed from the set.
.PP
The interface can be used to expose the internal states of a custom
element, allowing them to be used in CSS selectors by code that uses the
element.
.SH INSTANCE PROPERTIES
.TP
\f[B]CustomStateSet.size\f[R]
Returns the number of values in the \f[CR]CustomStateSet\f[R].
.SH INSTANCE METHODS
.TP
\f[B]CustomStateSet.add()\f[R]
Adds a value to the set.
.TP
\f[B]CustomStateSet.clear()\f[R]
Removes all elements from the \f[CR]CustomStateSet\f[R] object.
.TP
\f[B]CustomStateSet.delete()\f[R]
Removes one value from the \f[CR]CustomStateSet\f[R] object.
.TP
\f[B]CustomStateSet.entries()\f[R]
Returns a new iterator with the values for each element in the
\f[CR]CustomStateSet\f[R] in insertion order.
.TP
\f[B]CustomStateSet.forEach()\f[R]
Executes a provided function for each value in the
\f[CR]CustomStateSet\f[R] object.
.TP
\f[B]CustomStateSet.has()\f[R]
Returns a \f[CR]Boolean\f[R] asserting whether an element is present
with the given value.
.TP
\f[B]CustomStateSet.keys()\f[R]
An alias for \f[CR]CustomStateSet.values()\f[R].
.TP
\f[B]CustomStateSet.values()\f[R]
Returns a new iterator object that yields the values for each element in
the \f[CR]CustomStateSet\f[R] object in insertion order.
.SH DESCRIPTION
Built in HTML elements can have different \f[I]states\f[R], such as
\[lq]enabled\[rq] and \[lq]disabled,\[rq]checked\[rq] and
\[lq]unchecked\[rq], \[lq]initial\[rq], \[lq]loading\[rq] and
\[lq]ready\[rq].
Some of these states are public and can be set or queried using
properties/attributes, while others are effectively internal, and cannot
be directly set.
Whether external or internal, element states can generally be selected
and styled using CSS pseudo\-classes as selectors.
.PP
The \f[CR]CustomStateSet\f[R] allows developers to add and delete states
for autonomous custom elements (but not elements derived from built\-in
elements).
These states can then be used as custom state pseudo\-class selectors in
a similar way to the pseudo\-classes for built\-in elements.
.SS Setting custom element states
To make the \f[CR]CustomStateSet\f[R] available, a custom element must
first call \f[CR]HTMLElement.attachInternals()\f[R] in order to attach
an \f[CR]ElementInternals\f[R] object.
\f[CR]CustomStateSet\f[R] is then returned by
\f[CR]ElementInternals.states\f[R].
Note that \f[CR]ElementInternals\f[R] cannot be attached to a custom
element based on a built\-in element, so this feature only works for
autonomous custom elements (see \c
.UR https://github.com/whatwg/html/issues/5166
github.com/whatwg/html/issues/5166
.UE \c
).
.PP
The \f[CR]CustomStateSet\f[R] instance is a \f[CR]Set\f[R]\-like object
that can hold an ordered set of state values.
Each value is a custom identifier.
Identifiers can be added to the set or deleted.
If an identifier is present in the set the particular state is
\f[CR]true\f[R], while if it is removed the state is \f[CR]false\f[R].
.PP
Custom elements that have states with more than two values can represent
them with multiple boolean states, only one of which is \f[CR]true\f[R]
(present in the \f[CR]CustomStateSet\f[R]) at a time.
.PP
The states can be used within the custom element but are not directly
accessible outside of the custom component.
.SS Interaction with CSS
You can select a custom element that is in a specific state using the
\f[CR]:state()\f[R] \f[I]custom state pseudo\-class\f[R].
The format of this pseudo\-class is \f[CR]:state(my\-state\-name)\f[R],
where \f[CR]my\-state\-name\f[R] is the state as defined in the element.
The custom state pseudo\-class matches the custom element only if the
state is \f[CR]true\f[R] (i.e., if \f[CR]my\-state\-name\f[R] is present
in the \f[CR]CustomStateSet\f[R]).
.PP
For example, the following CSS matches a \f[CR]labeled\-checkbox\f[R]
custom element when the element\[cq]s \f[CR]CustomStateSet\f[R] contains
the \f[CR]checked\f[R] state, and applies a \f[CR]solid\f[R] border to
the checkbox:
.IP
.EX
labeled\-checkbox\f[BI]:state(\f[R]checked\f[BI])\f[R] {
  \f[B]border\f[R]: solid;
}
.EE
.PP
CSS can also be used to match a custom state within a custom
element\[cq]s shadow DOM by specifying \f[CR]:state()\f[R] within the
\f[CR]:host()\f[R] pseudo\-class function.
.PP
Additionally, the \f[CR]:state()\f[R] pseudo\-class can be used after
the \f[CR]::part()\f[R] pseudo\-element to match the shadow parts of a
custom element that are in a particular state.
.RS
.PP
\f[B]Warning:\f[R] Browsers that do not yet support \f[CR]:state()\f[R]
will use a CSS \f[CR]<dashed\-ident>\f[R] for selecting custom states,
which is now deprecated.
For information about how to support both approaches see the
Compatibility with \f[CR]<dashed\-ident>\f[R] syntax section below.
.RE
.SH EXAMPLES
.SS Matching the custom state of a custom checkbox element
This example, which is adapted from the specification, demonstrates a
custom checkbox element that has an internal \[lq]checked\[rq] state.
This is mapped to the \f[CR]checked\f[R] custom state, allowing styling
to be applied using the \f[CR]:state(checked)\f[R] custom state pseudo
class.
.SS JavaScript
First we define our class \f[CR]LabeledCheckbox\f[R] which extends from
\f[CR]HTMLElement\f[R].
In the constructor we call the \f[CR]super()\f[R] method, add a listener
for the click event, and call \f[CR]this.attachInternals()\f[R] to
attach an \f[CR]ElementInternals\f[R] object.
.PP
Most of the rest of the \[lq]work\[rq] is then left to
\f[CR]connectedCallback()\f[R], which is invoked when a custom element
is added to the page.
The content of the element is defined using a \f[CR]<style>\f[R] element
to be the text \f[CR][]\f[R] or \f[CR][x]\f[R] followed by a label.
What\[cq]s noteworthy here is that the custom state pseudo class is used
to select the text to display: \f[CR]:host(:state(checked))\f[R].
After the example below, we\[cq]ll cover what\[cq]s happening in the
snippet in more detail.
.IP
.EX
\f[B]class\f[R] LabeledCheckbox \f[B]extends\f[R] HTMLElement {
  constructor() {
    \f[B]super\f[R]();
    \f[B]this\f[R]._boundOnClick = \f[B]this\f[R]._onClick.bind(\f[B]this\f[R]);
    \f[B]this\f[R].addEventListener(\[dq]click\[dq], \f[B]this\f[R]._boundOnClick);

    \f[I]// Attach an ElementInternals to get states property\f[R]
    \f[B]this\f[R]._internals = \f[B]this\f[R].attachInternals();
  }

  connectedCallback() {
    \f[B]const\f[R] shadowRoot = \f[B]this\f[R].attachShadow({ mode: \[dq]open\[dq] });
    shadowRoot.innerHTML = \[ga]<style>
  :host {
    display: block;
  }
  :host::before {
    content: \[dq][ ]\[dq];
    white\-space: pre;
    font\-family: monospace;
  }
  :host(:state(checked))::before {
    content: \[dq][x]\[dq];
  }
</style>
<slot>Label</slot>
\[ga];
  }

  \f[B]get\f[R] checked() {
    \f[B]return\f[R] \f[B]this\f[R]._internals.states.has(\[dq]checked\[dq]);
  }

  \f[B]set\f[R] checked(flag) {
    \f[B]if\f[R] (flag) {
      \f[B]this\f[R]._internals.states.add(\[dq]checked\[dq]);
    } \f[B]else\f[R] {
      \f[B]this\f[R]._internals.states.delete(\[dq]checked\[dq]);
    }
  }

  _onClick(event) {
    \f[I]// Toggle the \[aq]checked\[aq] property when the element is clicked\f[R]
    \f[B]this\f[R].checked = !\f[B]this\f[R].checked;
  }

  \f[B]static\f[R] isStateSyntaxSupported() {
    \f[B]return\f[R] CSS.supports(\[dq]selector(:state(checked))\[dq]);
  }
}

customElements.define(\[dq]labeled\-checkbox\[dq], LabeledCheckbox);

\f[I]// Display a warning to unsupported browsers\f[R]
document.addEventListener(\[dq]DOMContentLoaded\[dq], () \f[B]=>\f[R] {
  \f[B]if\f[R] (!LabeledCheckbox.isStateSyntaxSupported()) {
    \f[B]if\f[R] (!document.getElementById(\[dq]state\-warning\[dq])) {
      \f[B]const\f[R] warning = document.createElement(\[dq]div\[dq]);
      warning.id = \[dq]state\-warning\[dq];
      warning.style.color = \[dq]red\[dq];
      warning.textContent = \[dq]This feature is not supported by your browser.\[dq];
      document.body.insertBefore(warning, document.body.firstChild);
    }
  }
});
.EE
.PP
In the \f[CR]LabeledCheckbox\f[R] class:
.IP \[bu] 2
In the \f[CR]get checked()\f[R] and \f[CR]set checked()\f[R] we use
\f[CR]ElementInternals.states\f[R] to get the \f[CR]CustomStateSet\f[R].
.IP \[bu] 2
The \f[CR]set checked(flag)\f[R] method adds the
\f[CR]\[dq]checked\[dq]\f[R] identifier to the \f[CR]CustomStateSet\f[R]
if the flag is set and delete the identifier if the flag is
\f[CR]false\f[R].
.IP \[bu] 2
The \f[CR]get checked()\f[R] method just checks whether the
\f[CR]checked\f[R] property is defined in the set.
.IP \[bu] 2
The property value is toggled when the element is clicked.
.PP
We then call the \f[CR]define()\f[R] method on the object returned by
\f[CR]Window.customElements\f[R] in order to register the custom
element:
.IP
.EX
customElements.define(\[dq]labeled\-checkbox\[dq], LabeledCheckbox);
.EE
.SS HTML
After registering the custom element we can use the element in HTML as
shown:
.IP
.EX
<\f[B]labeled\-checkbox\f[R]>You need to check this</\f[B]labeled\-checkbox\f[R]>
.EE
.SS CSS
Finally we use the \f[CR]:state(checked)\f[R] custom state pseudo class
to select CSS for when the box is checked.
.IP
.EX
labeled\-checkbox {
  \f[B]border\f[R]: dashed red;
}
labeled\-checkbox\f[BI]:state(\f[R]checked\f[BI])\f[R] {
  \f[B]border\f[R]: solid;
}
.EE
.SS Result
Click the element to see a different border being applied as the
checkbox \f[CR]checked\f[R] state is toggled.
.SS Matching a custom state in a shadow part of a custom element
This example, which is adapted from the specification, demonstrates that
custom states can be used to target the shadow parts of a custom element
for styling.
Shadow parts are sections of the shadow tree that are intentionally
exposed to pages that use the custom element.
.PP
The example creates a \f[CR]<question\-box>\f[R] custom element that
displays a question prompt along with a checkbox labeled \[lq]Yes\[rq].
The element uses the \f[CR]<labeled\-checkbox>\f[R] defined in the
previous example for the checkbox.
.SS JavaScript
First, we define the custom element class \f[CR]QuestionBox\f[R], which
extends \f[CR]HTMLElement\f[R].
As always, the constructor first calls the \f[CR]super()\f[R] method.
Next, we attach a shadow DOM tree to the custom element by calling
\f[CR]attachShadow()\f[R].
.IP
.EX
\f[B]class\f[R] QuestionBox \f[B]extends\f[R] HTMLElement {
  constructor() {
    \f[B]super\f[R]();
    \f[B]const\f[R] shadowRoot = \f[B]this\f[R].attachShadow({ mode: \[dq]open\[dq] });
    shadowRoot.innerHTML = \[ga]<div><slot>Question</slot></div>
<labeled\-checkbox part=\[dq]checkbox\[dq]>Yes</labeled\-checkbox>
\[ga];
  }
}
.EE
.PP
The content of the shadow root is set using \f[CR]innerHTML\f[R].
This defines a \f[CR]<slot>\f[R] element that contains the default
prompt text \[lq]Question\[rq] for the element.
We then define a \f[CR]<labeled\-checkbox>\f[R] custom element with the
default text \f[CR]\[dq]Yes\[dq]\f[R].
This checkbox is exposed as a shadow part of the question box with the
name \f[CR]checkbox\f[R] using the \f[CR]part\f[R] attribute.
.PP
Note that the code and styling for the \f[CR]<labeled\-checkbox>\f[R]
element are exactly the same as in the previous example, and are
therefore not repeated here.
.PP
Next, we call the \f[CR]define()\f[R] method on the object returned by
\f[CR]Window.customElements\f[R] to register the custom element with the
name \f[CR]question\-box\f[R]:
.IP
.EX
customElements.define(\[dq]question\-box\[dq], QuestionBox);
.EE
.SS HTML
After registering the custom element, we can use the element in HTML as
shown below.
.IP
.EX
\f[I]<!\-\- Question box with default prompt \[dq]Question\[dq] \-\->\f[R]
<\f[B]question\-box\f[R]></\f[B]question\-box\f[R]>

\f[I]<!\-\- Question box with custom prompt \[dq]Continue?\[dq] \-\->\f[R]
<\f[B]question\-box\f[R]>Continue?</\f[B]question\-box\f[R]>
.EE
.SS CSS
The first block of CSS matches the exposed shadow part named
\f[CR]checkbox\f[R] using the \f[CR]::part()\f[R] selector, styling it
to be \f[CR]red\f[R] by default.
.IP
.EX
question\-box\f[BI]::part(\f[R]checkbox\f[BI])\f[R] {
  \f[B]color\f[R]: red;
}
.EE
.PP
The second block follows \f[CR]::part()\f[R] with \f[CR]:state()\f[R],
in order to match \f[CR]checkbox\f[R] parts that are in the
\f[CR]checked\f[R] state:
.IP
.EX
question\-box\f[BI]::part(\f[R]checkbox\f[BI]):state(\f[R]checked\f[BI])\f[R] {
  \f[B]color\f[R]: green;
}
.EE
.SS Result
Click either of the checkboxes to see the color change from
\f[CR]red\f[R] to \f[CR]green\f[R] when the \f[CR]checked\f[R] state
toggles.
.SS Non\-boolean internal states
This example shows how to handle the case where the custom element has
an internal property with multiple possible value.
.PP
The custom element in this case has a \f[CR]state\f[R] property with
allowed values: \[lq]loading\[rq], \[lq]interactive\[rq] and
\[lq]complete\[rq].
To make this work, we map each value to its custom state and create code
to ensure that only the identifier corresponding to the internal state
is set.
You can see this in the implementation of the \f[CR]set state()\f[R]
method: we set the internal state, add the identifier for the matching
custom state to \f[CR]CustomStateSet\f[R], and remove the identifiers
associated with all the other values.
.PP
Most of the remaining code is similar to the example that demonstrates a
single boolean state (we show different text for each state as the user
toggles through them).
.SS JavaScript
.IP
.EX
\f[B]class\f[R] ManyStateElement \f[B]extends\f[R] HTMLElement {
  constructor() {
    \f[B]super\f[R]();
    \f[B]this\f[R]._boundOnClick = \f[B]this\f[R]._onClick.bind(\f[B]this\f[R]);
    \f[B]this\f[R].addEventListener(\[dq]click\[dq], \f[B]this\f[R]._boundOnClick);
    \f[I]// Attach an ElementInternals to get states property\f[R]
    \f[B]this\f[R]._internals = \f[B]this\f[R].attachInternals();
  }

  connectedCallback() {
    \f[B]this\f[R].state = \[dq]loading\[dq];

    \f[B]const\f[R] shadowRoot = \f[B]this\f[R].attachShadow({ mode: \[dq]open\[dq] });
    shadowRoot.innerHTML = \[ga]<style>
  :host {
    display: block;
    font\-family: monospace;
  }
  :host::before {
    content: \[dq][ unknown ]\[dq];
    white\-space: pre;
  }
  :host(:state(loading))::before {
    content: \[dq][ loading ]\[dq];
  }
  :host(:state(interactive))::before {
    content: \[dq][ interactive ]\[dq];
  }
  :host(:state(complete))::before {
    content: \[dq][ complete ]\[dq];
  }
</style>
<slot>Click me</slot>
\[ga];
  }

  \f[B]get\f[R] state() {
    \f[B]return\f[R] \f[B]this\f[R]._state;
  }

  \f[B]set\f[R] state(stateName) {
    \f[I]// Set internal state to passed value\f[R]
    \f[I]// Add identifier matching state and delete others\f[R]
    \f[B]if\f[R] (stateName === \[dq]loading\[dq]) {
      \f[B]this\f[R]._state = \[dq]loading\[dq];
      \f[B]this\f[R]._internals.states.add(\[dq]loading\[dq]);
      \f[B]this\f[R]._internals.states.delete(\[dq]interactive\[dq]);
      \f[B]this\f[R]._internals.states.delete(\[dq]complete\[dq]);
    } \f[B]else\f[R] \f[B]if\f[R] (stateName === \[dq]interactive\[dq]) {
      \f[B]this\f[R]._state = \[dq]interactive\[dq];
      \f[B]this\f[R]._internals.states.delete(\[dq]loading\[dq]);
      \f[B]this\f[R]._internals.states.add(\[dq]interactive\[dq]);
      \f[B]this\f[R]._internals.states.delete(\[dq]complete\[dq]);
    } \f[B]else\f[R] \f[B]if\f[R] (stateName === \[dq]complete\[dq]) {
      \f[B]this\f[R]._state = \[dq]complete\[dq];
      \f[B]this\f[R]._internals.states.delete(\[dq]loading\[dq]);
      \f[B]this\f[R]._internals.states.delete(\[dq]interactive\[dq]);
      \f[B]this\f[R]._internals.states.add(\[dq]complete\[dq]);
    }
  }

  _onClick(event) {
    \f[I]// Cycle the state when element clicked\f[R]
    \f[B]if\f[R] (\f[B]this\f[R].state === \[dq]loading\[dq]) {
      \f[B]this\f[R].state = \[dq]interactive\[dq];
    } \f[B]else\f[R] \f[B]if\f[R] (\f[B]this\f[R].state === \[dq]interactive\[dq]) {
      \f[B]this\f[R].state = \[dq]complete\[dq];
    } \f[B]else\f[R] \f[B]if\f[R] (\f[B]this\f[R].state === \[dq]complete\[dq]) {
      \f[B]this\f[R].state = \[dq]loading\[dq];
    }
  }

  \f[B]static\f[R] isStateSyntaxSupported() {
    \f[B]return\f[R] CSS.supports(\[dq]selector(:state(loading))\[dq]);
  }
}

customElements.define(\[dq]many\-state\-element\[dq], ManyStateElement);

document.addEventListener(\[dq]DOMContentLoaded\[dq], () \f[B]=>\f[R] {
  \f[B]if\f[R] (!LabeledCheckbox.isStateSyntaxSupported()) {
    \f[B]if\f[R] (!document.getElementById(\[dq]state\-warning\[dq])) {
      \f[B]const\f[R] warning = document.createElement(\[dq]div\[dq]);
      warning.id = \[dq]state\-warning\[dq];
      warning.style.color = \[dq]red\[dq];
      warning.textContent = \[dq]This feature is not supported by your browser.\[dq];
      document.body.insertBefore(warning, document.body.firstChild);
    }
  }
});
.EE
.SS HTML
After registering the new element we add it to the HTML.
This is similar to the example that demonstrates a single boolean state,
except we don\[cq]t specify a value and use the default value from the
slot (\f[CR]<slot>Click me</slot>\f[R]).
.IP
.EX
<\f[B]many\-state\-element\f[R]></\f[B]many\-state\-element\f[R]>
.EE
.SS CSS
In the CSS we use the three custom state pseudo classes to select CSS
for each of the internal state values: \f[CR]:state(loading)\f[R],
\f[CR]:state(interactive)\f[R], \f[CR]:state(complete)\f[R].
Note that the custom element code ensures that only one of these custom
states can be defined at a time.
.IP
.EX
many\-state\-element\f[BI]:state(\f[R]loading\f[BI])\f[R] {
  \f[B]border\f[R]: dotted grey;
}
many\-state\-element\f[BI]:state(\f[R]interactive\f[BI])\f[R] {
  \f[B]border\f[R]: dashed blue;
}
many\-state\-element\f[BI]:state(\f[R]complete\f[BI])\f[R] {
  \f[B]border\f[R]: solid green;
}
.EE
.SS Results
Click the element to see a different border being applied as the state
changes.
.SH COMPATIBILITY WITH \f[CR]<dashed\-ident>\f[R] SYNTAX
Previously custom elements with custom states were selected using a
\f[CR]<dashed\-ident>\f[R] instead of the \f[CR]:state()\f[R] function.
Browser versions that don\[cq]t support \f[CR]:state()\f[R] will throw
an error when supplied with an ident that is not prefixed with the
double dash.
If support for these browsers is required, either use a try\&...catch
block to support both syntaxes, or use a \f[CR]<dashed\-ident>\f[R] as
the state\[cq]s value and select it with both the
\f[CR]:\-\-my\-state\f[R] and \f[CR]:state(\-\-my\-state)\f[R] CSS
selector.
.SS Using a try\&...catch block
This code shows how you can use \f[CR]try...catch\f[R] to attempt adding
a state identifier that does not use a \f[CR]<dashed\-ident>\f[R], and
fall back to \f[CR]<dashed\-ident>\f[R] if an error is thrown.
.SS JavaScript
.IP
.EX
\f[B]class\f[R] CompatibleStateElement \f[B]extends\f[R] HTMLElement {
  constructor() {
    \f[B]super\f[R]();
    \f[B]this\f[R]._internals = \f[B]this\f[R].attachInternals();
  }

  connectedCallback() {
    \f[I]// The double dash is required in browsers with the\f[R]
    \f[I]// legacy syntax, not supplying it will throw\f[R]
    \f[B]try\f[R] {
      \f[B]this\f[R]._internals.states.add(\[dq]loaded\[dq]);
    } \f[B]catch\f[R] {
      \f[B]this\f[R]._internals.states.add(\[dq]\-\-loaded\[dq]);
    }
  }
}
.EE
.SS CSS
.IP
.EX
compatible\-state\-element\f[BI]:is(:\-\-loaded\f[R], \f[BI]:state(\f[R]loaded\f[BI]))\f[R] {
  \f[B]border\f[R]: solid green;
}
.EE
.SS Using double dash prefixed idents
An alternative solution can be to use the \f[CR]<dashed\-ident>\f[R]
within JavaScript.
The downside to this approach is that the dashes must be included when
using the CSS \f[CR]:state()\f[R] syntax.
.SS JavaScript
.IP
.EX
\f[B]class\f[R] CompatibleStateElement \f[B]extends\f[R] HTMLElement {
  constructor() {
    \f[B]super\f[R]();
    \f[B]this\f[R]._internals = \f[B]this\f[R].attachInternals();
  }
  connectedCallback() {
    \f[I]// The double dash is required in browsers with the\f[R]
    \f[I]// legacy syntax, but works with the modern syntax\f[R]
    \f[B]this\f[R]._internals.states.add(\[dq]\-\-loaded\[dq]);
  }
}
.EE
.SS CSS
.IP
.EX
compatible\-state\-element\f[BI]:is(:\-\-loaded\f[R], \f[BI]:state(\f[R]\-\-loaded\f[BI]))\f[R] {
  \f[B]border\f[R]: solid green;
}
.EE
.SH SEE ALSO
Using custom elements
