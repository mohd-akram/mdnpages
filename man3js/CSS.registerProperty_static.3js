.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "CSS.registerProperty_static" "JS" "September 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSS.registerProperty_static \- CSS: registerProperty() static method
.SH SYNOPSIS
The \f[B]\f[CB]CSS.registerProperty()\f[B]\f[R] static method registers
custom properties, allowing for property type checking, default values,
and properties that do or do not inherit their value.
.PP
Registering a custom property allows you to tell the browser how the
custom property should behave; what types are allowed, whether the
custom property inherits its value, and what the default value of the
custom property is.
.SH SYNTAX
.IP
.EX
CSS.registerProperty(propertyDefinition)
.EE
.SS Parameters
.TP
\f[B]propertyDefinition\f[R]
An object containing the following properties:
.RS
.TP
\f[B]name\f[R]
A string representing the name of the property being defined.
.TP
\f[B]syntax\f[R] \f[I](optional)\f[R]
A string representing the expected syntax of the defined property.
Defaults to \f[CR]\[dq]*\[dq]\f[R].
.TP
\f[B]inherits\f[R]
A boolean value defining whether the defined property should be
inherited (\f[CR]true\f[R]), or not (\f[CR]false\f[R]).
Defaults to \f[CR]false\f[R].
.TP
\f[B]initialValue\f[R] \f[I](optional)\f[R]
A string representing the initial value of the defined property.
.RE
.SS Return value
\f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]InvalidModificationError\f[R] \f[B]DOMException\f[R]
The given \f[CR]name\f[R] has already been registered.
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
The given \f[CR]name\f[R] isn\[cq]t a valid custom property name (starts
with two dashes, e.g.\ \f[CR]\-\-foo\f[R]).
.TP
\f[B]TypeError\f[R]
The required \f[CR]name\f[R] and/or \f[CR]inherits\f[R] dictionary
members were not provided.
.SH EXAMPLES
The following will register a custom property, \f[CR]\-\-my\-color\f[R],
using \f[CR]registerProperty()\f[R], as a color, give it a default
value, and have it not inherit its value:
.IP
.EX
window.CSS.registerProperty({
  name: \[dq]\-\-my\-color\[dq],
  syntax: \[dq]<color>\[dq],
  inherits: \f[B]false\f[R],
  initialValue: \[dq]#c0ffee\[dq],
});
.EE
.PP
In this example, the custom property \f[CR]\-\-my\-color\f[R] has been
registered using the syntax \f[CR]<color>\f[R].
We can now use that property to transition a gradient on hover or focus.
Notice that with the registered property the transition works, but that
it doesn\[cq]t with the unregistered property!
.IP
.EX
\&.registered {
  \-\-my\-color: #c0ffee;
  \f[B]background\-image\f[R]: linear\-gradient(to right, #fff, var(\-\-my\-color));
  \f[B]transition\f[R]: \-\-my\-color 1s ease\-in\-out;
}

\&.registered\f[BI]:hover\f[R],
\&.registered\f[BI]:focus\f[R] {
  \-\-my\-color: #b4d455;
}

\&.unregistered {
  \-\-unregistered: #c0ffee;
  \f[B]background\-image\f[R]: linear\-gradient(to right, #fff, var(\-\-unregistered));
  \f[B]transition\f[R]: \-\-unregistered 1s ease\-in\-out;
}

\&.unregistered\f[BI]:hover\f[R],
\&.unregistered\f[BI]:focus\f[R] {
  \-\-unregistered: #b4d455;
}
button {
  \f[B]font\-size\f[R]: 3vw;
}
.EE
.PP
We can add these styles to some buttons:
.IP
.EX
<\f[B]button\f[R] class=\[dq]registered\[dq]>Background Registered</\f[B]button\f[R]>
<\f[B]button\f[R] class=\[dq]unregistered\[dq]>Background Not Registered</\f[B]button\f[R]>
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the CSS properties and values API
.IP \[bu] 2
\f[CR]CSS\f[R]
.IP \[bu] 2
\f[CR]CSS.supports()\f[R]
.IP \[bu] 2
\f[CR]CSS.escape()\f[R]
.IP \[bu] 2
CSS factory functions
.IP \[bu] 2
CSS \f[CR]\[at]property\f[R]
