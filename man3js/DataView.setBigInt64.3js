.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "DataView.setBigInt64" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataView.setBigInt64 \- DataView.prototype.setBigInt64()
.SH SYNOPSIS
The \f[B]\f[CB]setBigInt64()\f[B]\f[R] method of \f[CR]DataView\f[R]
instances takes a BigInt and stores it as a 64\-bit signed integer in
the 8 bytes starting at the specified byte offset of this
\f[CR]DataView\f[R].
There is no alignment constraint; multi\-byte values may be stored at
any offset within bounds.
.SH SYNTAX
.IP
.EX
setBigInt64(byteOffset, value)
setBigInt64(byteOffset, value, littleEndian)
.EE
.SS Parameters
.TP
\f[B]byteOffset\f[R]
The offset, in bytes, from the start of the view to store the data in.
.TP
\f[B]value\f[R]
The value to set as a \f[CR]BigInt\f[R].
For how the value is encoded in bytes, see Value encoding and
normalization.
.TP
\f[B]littleEndian\f[R] \f[I](optional)\f[R]
Indicates whether the data is stored in little\- or big\-endian format.
If \f[CR]false\f[R] or \f[CR]undefined\f[R], a big\-endian value is
written.
.SS Return value
\f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if the \f[CR]byteOffset\f[R] is set such that it would store
beyond the end of the view.
.SH EXAMPLES
.SS Using setBigInt64()
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(10);
\f[B]const\f[R] dataview = \f[B]new\f[R] DataView(buffer);
dataview.setBigInt64(0, 3n);
dataview.getBigInt64(1); \f[I]// 768n\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]DataView\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]BigInt64Array\f[R]
