.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "XSLTProcessor" "JS" "February 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XSLTProcessor \- XSLTProcessor
.SH SYNOPSIS
An \f[B]\f[CB]XSLTProcessor\f[B]\f[R] applies an XSLT stylesheet
transformation to an XML document to produce a new XML document as
output.
It has methods to load the XSLT stylesheet, to manipulate
\f[CR]<xsl:param>\f[R] parameter values, and to apply the transformation
to documents.
.SH CONSTRUCTOR
.TP
\f[B]XSLTProcessor()\f[R]
Create a new \f[CR]XSLTProcessor\f[R].
.SH INSTANCE METHODS
.TP
\f[B]XSLTProcessor.importStylesheet()\f[R]
Imports the XSLT stylesheet.
If the given node is a document node, you can pass in a full XSL
Transform or a \c
.UR https://www.w3.org/TR/xslt/#result-element-stylesheet
literal result element transform
.UE \c
; otherwise, it must be an \f[CR]<xsl:stylesheet>\f[R] or
\f[CR]<xsl:transform>\f[R] element.
.TP
\f[B]XSLTProcessor.transformToFragment()\f[R]
Transforms the node source by applying the XSLT stylesheet imported
using the \f[CR]XSLTProcessor.importStylesheet()\f[R] function.
The owner document of the resulting document fragment is the owner node.
.TP
\f[B]XSLTProcessor.transformToDocument()\f[R]
Transforms the node source applying the XSLT stylesheet given importing
using the \f[CR]XSLTProcessor.importStylesheet()\f[R] function.
.TP
\f[B]XSLTProcessor.setParameter()\f[R]
Sets a parameter (\f[CR]<xsl:param>\f[R]) value in the XSLT stylesheet
that was imported.
.TP
\f[B]XSLTProcessor.getParameter()\f[R]
Gets the value of a parameter from the XSLT stylesheet.
.TP
\f[B]XSLTProcessor.removeParameter()\f[R]
Removes the parameter if it was previously set.
This will make the \f[CR]XSLTProcessor\f[R] use the default value for
the parameter as specified in the XSLT stylesheet.
.TP
\f[B]XSLTProcessor.clearParameters()\f[R]
Removes all set parameters from the \f[CR]XSLTProcessor\f[R].
The \f[CR]XSLTProcessor\f[R] will then use the default values specified
in the XSLT stylesheet.
.TP
\f[B]XSLTProcessor.reset()\f[R]
Removes all parameters and stylesheets from the
\f[CR]XSLTProcessor\f[R].
.SH INSTANCE PROPERTIES
\f[I]This are no properties for this interface.\f[R]
.SH EXAMPLES
.SS Instantiating an \f[CR]XSLTProcessor\f[R]
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
  \f[B]const\f[R] xsltProcessor = \f[B]new\f[R] XSLTProcessor();

  \f[I]// Load the XSLT file, example1.xsl\f[R]
  \f[B]const\f[R] xslResponse = \f[B]await\f[R] fetch(\[dq]example1.xsl\[dq]);
  \f[B]const\f[R] xslText = \f[B]await\f[R] xslResponse.text();
  \f[B]const\f[R] xslStylesheet = parser.parseFromString(xslText, \[dq]application/xml\[dq]);
  xsltProcessor.importStylesheet(xslStylesheet);

  \f[I]// process the file\f[R]
  \f[I]// ...\f[R]
}
.EE
.SS Creating an XML document based on part of a document\[cq]s DOM
For the actual transformation, \f[CR]XSLTProcessor\f[R] requires an XML
document, which is used in conjunction with the imported XSL file to
produce the final result.
The XML document can be a separate XML file loaded using
\f[CR]fetch()\f[R], or it can be part of the existing page.
.PP
To process part of a page\[cq]s DOM, it is necessary to first create an
XML document in memory.
Assuming that the DOM to be processed is contained by an element with
the id \f[CR]example\f[R], that DOM can be \[lq]cloned\[rq] using the
in\-memory XML document\[cq]s \f[CR]Document.importNode()\f[R] method.
\f[CR]Document.importNode()\f[R] allows transferring a DOM fragment
between documents, in this case from an HTML document to an XML
document.
The first parameter references the DOM node to clone.
By making the second parameter \[lq]true\[rq], it will clone all
descendants as well (a deep clone).
The cloned DOM can then be inserted into the XML document using
\f[CR]Node.appendChild()\f[R], as shown below.
.IP
.EX
\f[I]// Create a new XML document in memory\f[R]
\f[B]const\f[R] xmlRef = document.implementation.createDocument(\[dq]\[dq], \[dq]\[dq], \f[B]null\f[R]);

\f[I]// We want to move a part of the DOM from an HTML document to an XML document.\f[R]
\f[I]// importNode is used to clone the nodes we want to process via XSLT \- true makes it do a deep clone\f[R]
\f[B]const\f[R] myNode = document.getElementById(\[dq]example\[dq]);
\f[B]const\f[R] clonedNode = xmlRef.importNode(myNode, \f[B]true\f[R]);

\f[I]// Add the cloned DOM into the XML document\f[R]
xmlRef.appendChild(clonedNode);
.EE
.PP
Once the stylesheet has been imported, \f[CR]XSLTProcessor\f[R] has to
perform two methods for the actual transformation, namely
\f[CR]XSLTProcessor.transformToDocument()\f[R] and
\f[CR]XSLTProcessor.transformToFragment()\f[R].
\f[CR]XSLTProcessor.transformToDocument()\f[R] returns a full XML
document while \f[CR]XSLTProcessor.transformToFragment()\f[R] returns a
document fragment that can be easily added to an existing document.
Both take in the XML document as the first parameter that will be
transformed.
\f[CR]XSLTProcessor.transformToFragment()\f[R] requires a second
parameter, namely the document object that will own the generated
fragment.
If the generated fragment will be inserted into the current HTML
document, passing in document is enough.
.SS Creating an XML document From a String `XML Soup'
You can use the \f[CR]DOMParser\f[R] to create an XML document from a
string of XML.
.IP
.EX
\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
\f[B]const\f[R] doc = parser.parseFromString(aStr, \[dq]text/xml\[dq]);
.EE
.SS Performing the transformation
.IP
.EX
\f[B]const\f[R] fragment = xsltProcessor.transformToFragment(xmlRef, document);
.EE
.SS Basic Example
The basic example will load an XML file and apply a XSL transformation
on it.
These are the same files used in the Generating HTML example.
The XML file describes an article and the XSL file formats the
information for display.
.SS XML
.IP
.EX
<?xml version=\[dq]1.0\[dq]?>
<\f[B]myNS:Article\f[R] xmlns:myNS=\[dq]http://devedge.netscape.com/2002/de\[dq]>
  <\f[B]myNS:Title\f[R]>My Article</\f[B]myNS:Title\f[R]>
  <\f[B]myNS:Authors\f[R]>
    <\f[B]myNS:Author\f[R] company=\[dq]Foopy Corp.\[dq]>Mr. Foo</\f[B]myNS:Author\f[R]>
    <\f[B]myNS:Author\f[R]>Mr. Bar</\f[B]myNS:Author\f[R]>
  </\f[B]myNS:Authors\f[R]>
  <\f[B]myNS:Body\f[R]>
    The <\f[B]b\f[R]>rain</\f[B]b\f[R]> in <\f[B]u\f[R]>Spain</\f[B]u\f[R]> stays mainly in the plains.
  </\f[B]myNS:Body\f[R]>
</\f[B]myNS:Article\f[R]>
.EE
.SS XSLT
.IP
.EX
<?xml version=\[dq]1.0\[dq]?>
<\f[B]xsl:stylesheet\f[R] version=\[dq]1.0\[dq]
                   xmlns:xsl=\[dq]http://www.w3.org/1999/XSL/Transform\[dq]
                   xmlns:myNS=\[dq]http://devedge.netscape.com/2002/de\[dq]>

  <\f[B]xsl:output\f[R] method=\[dq]html\[dq] />

  <\f[B]xsl:template\f[R] match=\[dq]/\[dq]>
    <\f[B]html\f[R]>

      <\f[B]head\f[R]>

        <\f[B]title\f[R]>
          <\f[B]xsl:value\-of\f[R] select=\[dq]/myNS:Article/myNS:Title\[dq]/>
        </\f[B]title\f[R]>

        <\f[B]style\f[R]>
          .myBox {margin:10px 155px 0 50px; border: 1px dotted #639ACE; padding:0 5px 0 5px;}
        </\f[B]style\f[R]>

      </\f[B]head\f[R]>

      <\f[B]body\f[R]>
        <\f[B]p\f[R] class=\[dq]myBox\[dq]>
          <\f[B]span\f[R] class=\[dq]title\[dq]>
            <\f[B]xsl:value\-of\f[R] select=\[dq]/myNS:Article/myNS:Title\[dq]/>
          </\f[B]span\f[R]> <\f[B]br\f[R] />

          Authors:   <\f[B]br\f[R] />
            <\f[B]xsl:apply\-templates\f[R] select=\[dq]/myNS:Article/myNS:Authors/myNS:Author\[dq]/>
          </\f[B]p\f[R]>

        <\f[B]p\f[R] class=\[dq]myBox\[dq]>
          <\f[B]xsl:apply\-templates\f[R] select=\[dq]//myNS:Body\[dq]/>
        </\f[B]p\f[R]>

      </\f[B]body\f[R]>

    </\f[B]html\f[R]>
  </\f[B]xsl:template\f[R]>

  <\f[B]xsl:template\f[R] match=\[dq]myNS:Author\[dq]>
     \-\-   <\f[B]xsl:value\-of\f[R] select=\[dq].\[dq] />

    <\f[B]xsl:if\f[R] test=\[dq]\[at]company\[dq]>
     ::   <\f[B]b\f[R]>  <\f[B]xsl:value\-of\f[R] select=\[dq]\[at]company\[dq] />  </\f[B]b\f[R]>
    </\f[B]xsl:if\f[R]>

    <\f[B]br\f[R] />
  </\f[B]xsl:template\f[R]>

  <\f[B]xsl:template\f[R] match=\[dq]myNS:Body\[dq]>
    <\f[B]xsl:copy\f[R]>
      <\f[B]xsl:apply\-templates\f[R] select=\[dq]\[at]*|node()\[dq]/>
    </\f[B]xsl:copy\f[R]>
  </\f[B]xsl:template\f[R]>

  <\f[B]xsl:template\f[R] match=\[dq]\[at]*|node()\[dq]>
      <\f[B]xsl:copy\f[R]>
        <\f[B]xsl:apply\-templates\f[R] select=\[dq]\[at]*|node()\[dq]/>
      </\f[B]xsl:copy\f[R]>
  </\f[B]xsl:template\f[R]>
</\f[B]xsl:stylesheet\f[R]>
.EE
.PP
The example loads both the .xsl (\f[CR]xslStylesheet\f[R]) and the .xml
(\f[CR]xmlDoc\f[R]) files into memory.
The .xsl file is then imported
(\f[CR]xsltProcessor.importStylesheet(xslStylesheet)\f[R]) and the
transformation run
(\f[CR]xsltProcessor.transformToFragment(xmlDoc, document)\f[R]).
This allows fetching of data after the page has been loaded, without
initiating a fresh page load.
.SS JavaScript
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
  \f[B]const\f[R] xsltProcessor = \f[B]new\f[R] XSLTProcessor();

  \f[I]// Load the XSLT file, example1.xsl\f[R]
  \f[B]const\f[R] xslResponse = \f[B]await\f[R] fetch(\[dq]example1.xsl\[dq]);
  \f[B]const\f[R] xslText = \f[B]await\f[R] xslResponse.text();
  \f[B]const\f[R] xslStylesheet = parser.parseFromString(xslText, \[dq]application/xml\[dq]);
  xsltProcessor.importStylesheet(xslStylesheet);

  \f[I]// Load the XML file, example1.xml\f[R]
  \f[B]const\f[R] xmlResponse = \f[B]await\f[R] fetch(\[dq]example1.xml\[dq]);
  \f[B]const\f[R] xmlText = \f[B]await\f[R] xmlResponse.text();
  \f[B]const\f[R] xmlDoc = parser.parseFromString(xmlText, \[dq]application/xml\[dq]);

  \f[B]const\f[R] fragment = xsltProcessor.transformToFragment(xmlDoc, document);

  document.getElementById(\[dq]example\[dq]).textContent = \[dq]\[dq];
  document.getElementById(\[dq]example\[dq]).appendChild(fragment);
}

init();
.EE
.SS Advanced example
This advanced example sorts several divs based on their content.
The example allows sorting the content multiple times, alternating
between ascending and descending order.
The JavaScript loads the .xsl file only on the first sort and sets the
\f[CR]xslLoaded\f[R] variable to true once it has finished loading the
file.
Using the \f[CR]XSLTProcessor.getParameter()\f[R] method, the code can
figure whether to sort in ascending or descending order.
It defaults to ascending if the parameter is empty (the first time the
sorting happens, as there is no value for it in the XSLT file).
The sorting value is set using \f[CR]XSLTProcessor.setParameter()\f[R].
.PP
The XSLT file has a parameter called \f[CR]myOrder\f[R] that JavaScript
sets to change the sorting method.
The \f[CR]xsl:sort\f[R] element\[cq]s order attribute can access the
value of the parameter using \f[CR]$myOrder\f[R].
However, the value needs to be an XPATH expression and not a string, so
\f[CR]{$myOrder}\f[R] is used.
Using {} evaluates the content as an XPath expression.
.PP
Once the transformation is complete, the result is appended to the
document, as shown in this example.
.SS XHTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]example\[dq]>
  <\f[B]div\f[R]>1</\f[B]div\f[R]>
  <\f[B]div\f[R]>2</\f[B]div\f[R]>
  <\f[B]div\f[R]>3</\f[B]div\f[R]>
  <\f[B]div\f[R]>4</\f[B]div\f[R]>
  <\f[B]div\f[R]>5</\f[B]div\f[R]>
  <\f[B]div\f[R]>6</\f[B]div\f[R]>
  <\f[B]div\f[R]>7</\f[B]div\f[R]>
  <\f[B]div\f[R]>8</\f[B]div\f[R]>
  <\f[B]div\f[R]>9</\f[B]div\f[R]>
  <\f[B]div\f[R]>10</\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]let\f[R] xslRef;
\f[B]let\f[R] xslLoaded = \f[B]false\f[R];
\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
\f[B]const\f[R] xsltProcessor = \f[B]new\f[R] XSLTProcessor();
\f[B]let\f[R] myDOM;

\f[B]let\f[R] xmlRef = document.implementation.createDocument(\[dq]\[dq], \[dq]\[dq], \f[B]null\f[R]);

\f[B]async\f[R] \f[B]function\f[R] sort() {
  \f[B]if\f[R] (!xslLoaded) {
    \f[B]const\f[R] response = \f[B]await\f[R] fetch(\[dq]example2.xsl\[dq]);
    \f[B]const\f[R] xslText = \f[B]await\f[R] response.text();
    xslRef = parser.parseFromString(xslText, \[dq]application/xml\[dq]);
    xsltProcessor.importStylesheet(xslRef);
    xslLoaded = \f[B]true\f[R];
  }

  \f[I]// Create a new XML document in memory\f[R]
  xmlRef = document.implementation.createDocument(\[dq]\[dq], \[dq]\[dq], \f[B]null\f[R]);

  \f[I]// We want to move a part of the DOM from an HTML document to an XML document.\f[R]
  \f[I]// importNode is used to clone the nodes we want to process via XSLT \- true makes it do a deep clone\f[R]
  \f[B]const\f[R] myNode = document.getElementById(\[dq]example\[dq]);
  \f[B]const\f[R] clonedNode = xmlRef.importNode(myNode, \f[B]true\f[R]);

  \f[I]// After cloning, we append\f[R]
  xmlRef.appendChild(clonedNode);

  \f[I]// Set the sorting parameter in the XSL file\f[R]
  \f[B]const\f[R] sortVal = xsltProcessor.getParameter(\f[B]null\f[R], \[dq]myOrder\[dq]);

  \f[B]if\f[R] (sortVal === \[dq]\[dq] || sortVal === \[dq]descending\[dq]) {
    xsltProcessor.setParameter(\f[B]null\f[R], \[dq]myOrder\[dq], \[dq]ascending\[dq]);
  } \f[B]else\f[R] {
    xsltProcessor.setParameter(\f[B]null\f[R], \[dq]myOrder\[dq], \[dq]descending\[dq]);
  }

  \f[I]// Initiate the transformation\f[R]
  \f[B]const\f[R] fragment = xsltProcessor.transformToFragment(xmlRef, document);

  \f[I]// Clear the contents\f[R]
  document.getElementById(\[dq]example\[dq]).textContent = \[dq]\[dq];

  myDOM = fragment;

  \f[I]// Add the new content from the transformation\f[R]
  document.getElementById(\[dq]example\[dq]).appendChild(fragment);
}
.EE
.SS XSLT
.IP
.EX
<?xml version=\[dq]1.0\[dq] encoding=\[dq]UTF\-8\[dq]?>
<\f[B]xsl:stylesheet\f[R] version=\[dq]1.0\[dq] xmlns=\[dq]http://www.w3.org/1999/xhtml\[dq] xmlns:html=\[dq]http://www.w3.org/1999/xhtml\[dq] xmlns:xsl=\[dq]http://www.w3.org/1999/XSL/Transform\[dq]>
  <\f[B]xsl:output\f[R] method=\[dq]html\[dq] indent=\[dq]yes\[dq] />

  <\f[B]xsl:param\f[R] name=\[dq]myOrder\[dq] />

  <\f[B]xsl:template\f[R] match=\[dq]/\[dq]>

    <\f[B]xsl:apply\-templates\f[R] select=\[dq]/div//div\[dq]>
      <\f[B]xsl:sort\f[R] select=\[dq].\[dq] data\-type=\[dq]number\[dq] order=\[dq]{$myOrder}\[dq] />
    </\f[B]xsl:apply\-templates\f[R]>
  </\f[B]xsl:template\f[R]>

  <\f[B]xsl:template\f[R] match=\[dq]div\[dq]>
    <\f[B]xsl:copy\-of\f[R] select=\[dq].\[dq] />
  </\f[B]xsl:template\f[R]>
</\f[B]xsl:stylesheet\f[R]>
.EE
.SH SEE ALSO
.IP \[bu] 2
XSLT
.IP \[bu] 2
Transforming with XSLT
.IP \[bu] 2
\c
.UR https://www.ibiblio.org/xml/books/bible3/chapters/ch15.html
Chapter 15 of the XML 1.1 Bible: XSL Transformations
.UE \c
.IP \[bu] 2
\c
.UR https://zvon.org/xxl/XSLTutorial/Books/Book1/index.html
XSLT Tutorial
.UE \c
\ at \c
.UR https://zvon.org/
zvon.org
.UE \c
.IP \[bu] 2
\c
.UR https://zvon.org/xxl/XPathTutorial/General/examples.html
XPath Tutorial
.UE \c
\ at \c
.UR https://zvon.org/
zvon.org
.UE \c
