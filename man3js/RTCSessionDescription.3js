.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCSessionDescription" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCSessionDescription \- RTCSessionDescription
.SH SYNOPSIS
The \f[B]\f[CB]RTCSessionDescription\f[B]\f[R] interface describes one
end of a connection\[em]or potential connection\[em]and how it\[cq]s
configured.
Each \f[CR]RTCSessionDescription\f[R] consists of a description
\f[CR]type\f[R] indicating which part of the offer/answer negotiation
process it describes and of the SDP descriptor of the session.
.PP
The process of negotiating a connection between two peers involves
exchanging \f[CR]RTCSessionDescription\f[R] objects back and forth, with
each description suggesting one combination of connection configuration
options that the sender of the description supports.
Once the two peers agree upon a configuration for the connection,
negotiation is complete.
.SH INSTANCE PROPERTIES
\f[I]The \f[CI]RTCSessionDescription\f[I] interface doesn\[cq]t inherit
any properties.\f[R]
.TP
\f[B]RTCSessionDescription.type\f[R] \f[I](read\-only)\f[R]
An enum describing the session description\[cq]s type.
.TP
\f[B]RTCSessionDescription.sdp\f[R] \f[I](read\-only)\f[R]
A string containing the SDP describing the session.
.SH INSTANCE METHODS
\f[I]The \f[CI]RTCSessionDescription\f[I] doesn\[cq]t inherit any
methods.\f[R]
.TP
\f[B]RTCSessionDescription()\f[R] \f[I](deprecated)\f[R]
This constructor returns a new \f[CR]RTCSessionDescription\f[R].
The parameter is a \f[CR]RTCSessionDescriptionInit\f[R] dictionary
containing the values to assign the two properties.
.TP
\f[B]RTCSessionDescription.toJSON()\f[R]
Returns a JSON description of the object.
The values of both properties, \f[CR]type\f[R] and \f[CR]sdp\f[R], are
contained in the generated JSON.
.SH EXAMPLE
.IP
.EX
signalingChannel.onmessage = (evt) \f[B]=>\f[R] {
  \f[B]if\f[R] (!pc) start(\f[B]false\f[R]);

  \f[B]const\f[R] message = JSON.parse(evt.data);
  \f[B]if\f[R] (message.sdp) {
    pc.setRemoteDescription(
      \f[B]new\f[R] RTCSessionDescription(message),
      () \f[B]=>\f[R] {
        \f[I]// if we received an offer, we need to answer\f[R]
        \f[B]if\f[R] (pc.remoteDescription.type === \[dq]offer\[dq]) {
          pc.createAnswer(localDescCreated, logError);
        }
      },
      logError,
    );
  } \f[B]else\f[R] {
    pc.addIceCandidate(
      \f[B]new\f[R] RTCIceCandidate(message.candidate),
      () \f[B]=>\f[R] {},
      logError,
    );
  }
};
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC
.IP \[bu] 2
\f[CR]RTCPeerConnection.setLocalDescription()\f[R] and
\f[CR]RTCPeerConnection.setRemoteDescription()\f[R]
