.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CLIPBOARDITEM" "3JS" "January 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ClipboardItem \- ClipboardItem
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]ClipboardItem\f[B]\f[R] interface of the Clipboard API
represents a single item format, used when reading or writing clipboard
data using \f[CR]Clipboard.read()\f[R] and \f[CR]Clipboard.write()\f[R]
respectively.
.PP
The \f[B]\f[CB]ClipboardItem\f[B]\f[R] interface enables developers to
use a single type to represent a range of different data formats.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]read()\f[R] and \f[CR]write()\f[R] methods can
be used to work with text strings and arbitrary data items represented
by \f[CR]Blob\f[R] instances.
However, if you are solely working with text, it is more convenient to
use the \f[CR]Clipboard.readText()\f[R] and
\f[CR]Clipboard.writeText()\f[R] methods.
.RE
.SH CONSTRUCTOR
.TP
\f[B]ClipboardItem()\f[R]
Creates a new \f[B]\f[CB]ClipboardItem\f[B]\f[R] object, with the MIME
type as the key and the data as the value.
.SH INSTANCE PROPERTIES
.TP
\f[B]types\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]Array\f[R] of MIME types available within the
\f[B]\f[CB]ClipboardItem\f[B]\f[R].
.TP
\f[B]presentationStyle\f[R] \f[I](read\-only)\f[R]
Returns one of the following: \f[CR]\(dqunspecified\(dq\f[R],
\f[CR]\(dqinline\(dq\f[R] or \f[CR]\(dqattachment\(dq\f[R].
.SH STATIC METHODS
.TP
\f[B]ClipboardItem.supports()\f[R]
Checks whether a given MIME type is supported by the clipboard.
This enables a website to detect whether a MIME type is supported before
attempting to write data.
.SH INSTANCE METHODS
.TP
\f[B]getType()\f[R]
Returns a \f[CR]Promise\f[R] that resolves with a \f[CR]Blob\f[R] of the
requested MIME type, or an error if the MIME type is not found.
.SH EXAMPLES
.SS Writing text to the clipboard
In this example we first define two constants containing references to a
\f[CR]<p>\f[R] element containing some text and a \f[CR]<button>\f[R]
element.
.PP
Next, we define a function called \f[CR]copyToClipboard()\f[R].
This starts off by storing a \f[CR]\(dqtext/plain\(dq\f[R] MIME type in
a constant, then creating an object called \f[CR]clipboardItemData\f[R]
that contains one property with a key equal to the MIME type and a value
of the text we want to copy to the clipboard (the content of the
\f[CR]<p>\f[R] element, in this case).
Because we are working with text, we can pass it in directly rather than
having to create a \f[CR]Blob\f[R].
.PP
We construct a new \f[CR]ClipboardItem\f[R] object using the
\f[CR]ClipboardItem()\f[R] constructor, and pass it into the
\f[CR]Clipboard.write()\f[R] method to copy the text to the clipboard.
.PP
Finally, we add an event listener to the \f[CR]<button>\f[R] so that it
runs the function when pressed.
.IP
.EX
\f[B]const\f[R] textSource = document.querySelector(\(dqp\(dq);
\f[B]const\f[R] copyBtn = document.querySelector(\(dqbutton\(dq);

\f[B]async\f[R] \f[B]function\f[R] copyToClipboard() {
  \f[B]const\f[R] type = \(dqtext/plain\(dq;
  \f[B]const\f[R] clipboardItemData = {
    [type]: textSource.textContent,
  };
  \f[B]const\f[R] clipboardItem = \f[B]new\f[R] ClipboardItem(clipboardItemData);
  \f[B]await\f[R] navigator.clipboard.write([clipboardItem]);
}

copyBtn.addEventListener(\(dqclick\(dq, copyToClipboard);
.EE
.SS Writing an image to the clipboard
Here we use \f[CR]supports()\f[R] to check whether the
\f[CR]image/svg+xml\f[R] MIME data type is supported.
If it is, we fetch an SVG image with the Fetch API, and then read it
into a \f[CR]Blob\f[R], which we can use to create a
\f[CR]ClipboardItem\f[R] that is written to the clipboard.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] writeClipImg() {
  \f[B]try\f[R] {
    \f[B]if\f[R] (ClipboardItem.supports(\(dqimage/svg+xml\(dq)) {
      \f[B]const\f[R] imgURL = \(dq/my\-image.svg\(dq;
      \f[B]const\f[R] data = \f[B]await\f[R] fetch(imgURL);
      \f[B]const\f[R] blob = \f[B]await\f[R] data.blob();
      \f[B]await\f[R] navigator.clipboard.write([
        \f[B]new\f[R] ClipboardItem({
          [blob.type]: blob,
        }),
      ]);
      console.log(\(dqFetched image copied.\(dq);
    } \f[B]else\f[R] {
      console.log(\(dqSVG images are not supported by the clipboard.\(dq);
    }
  } \f[B]catch\f[R] (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SS Reading from the clipboard
Here we\(cqre returning all items on the clipboard via the
\f[CR]clipboard.read()\f[R] method.
Then utilizing the \f[CR]ClipboardItem.types\f[R] property to set the
\f[CR]getType()\f[R] argument and return the corresponding blob object.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] getClipboardContents() {
  \f[B]try\f[R] {
    \f[B]const\f[R] clipboardItems = \f[B]await\f[R] navigator.clipboard.read();

    \f[B]for\f[R] (\f[B]const\f[R] clipboardItem \f[B]of\f[R] clipboardItems) {
      \f[B]for\f[R] (\f[B]const\f[R] type \f[B]of\f[R] clipboardItem.types) {
        \f[B]const\f[R] blob = \f[B]await\f[R] clipboardItem.getType(type);
        \f[I]// we can now use blob here\f[R]
      }
    }
  } \f[B]catch\f[R] (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SH SEE ALSO
.IP \(bu 2
Clipboard API
.IP \(bu 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
