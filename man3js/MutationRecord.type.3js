.\" Automatically generated by Pandoc 3.4
.\"
.TH "MutationRecord.type" "JS" "May 17, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.type \- MutationRecord: type property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]type\f[B]\f[R] is the type of the \f[CR]MutationRecord\f[R]
observed by a \f[CR]MutationObserver\f[R].
.SH VALUE
The property is set to the type of the mutation as a string.
The value can be one of the following:
.IP \[bu] 2
\f[CR]attributes\f[R] if the mutation was an attribute mutation.
.IP \[bu] 2
\f[CR]characterData\f[R] if it was a mutation to a
\f[CR]CharacterData\f[R] node.
.IP \[bu] 2
\f[CR]childList\f[R] if the mutation was a mutation to the tree of
nodes.
.SH EXAMPLES
.SS Log the type of a mutation
The following example gives you two buttons to manipulate the DOM.
The first button adds a new node to the example, and the second button
changes the \f[CR]color\f[R] attribute of all the added nodes.
A \f[CR]MutationObserver\f[R] is created to observe it all, and the
observer is set to log the \f[CR]type\f[R] of the mutation record to
\f[CR]#log\f[R].
.PP
You\[cq]ll notice the when you add a node, the \f[CR]type\f[R] is
\f[CR]childList\f[R], and when you change the \f[CR]color\f[R]
attribute, the \f[CR]type\f[R] is \f[CR]attributes\f[R].
.SS HTML
.IP
.EX
<\f[B]button\f[R] id=\[dq]add\-nodes\[dq]>Add a node</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]set\-attribute\[dq]>Change the color</\f[B]button\f[R]>

<\f[B]button\f[R] id=\[dq]reset\[dq]>Reset</\f[B]button\f[R]>

<\f[B]pre\f[R] id=\[dq]log\[dq]>Mutation type:</\f[B]pre\f[R]>
<\f[B]div\f[R] id=\[dq]target\[dq]><\f[B]p\f[R]>Node #0</\f[B]p\f[R]></\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] addNodes = document.querySelector(\[dq]#add\-nodes\[dq]);
\f[B]const\f[R] setAttribute = document.querySelector(\[dq]#set\-attribute\[dq]);
\f[B]const\f[R] reset = document.querySelector(\[dq]#reset\[dq]);
\f[B]const\f[R] log = document.querySelector(\[dq]#log\[dq]);
\f[B]const\f[R] target = document.querySelector(\[dq]#target\[dq]);
\f[B]let\f[R] nodeNumber = 1;

addNodes.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]const\f[R] newPara = document.createElement(\[dq]p\[dq]);
  newPara.textContent = \[ga]Node #${nodeNumber}\[ga];
  nodeNumber++;
  target.appendChild(newPara);
});

setAttribute.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]if\f[R] (target.getAttribute(\[dq]class\[dq]) === \[dq]red\[dq]) {
    target.setAttribute(\[dq]class\[dq], \[dq]blue\[dq]);
  } \f[B]else\f[R] {
    target.setAttribute(\[dq]class\[dq], \[dq]red\[dq]);
  }
});

reset.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] self.location.reload());

\f[B]function\f[R] logMutationType(records) {
  \f[B]for\f[R] (\f[B]const\f[R] record \f[B]of\f[R] records) {
    log.textContent = \[ga]Mutation type: ${record.type}\[ga];
  }
}

\f[B]const\f[R] observer = \f[B]new\f[R] MutationObserver(logMutationType);
observer.observe(target, { childList: \f[B]true\f[R], attributes: \f[B]true\f[R], subtree: \f[B]true\f[R] });
.EE
.SS Result
