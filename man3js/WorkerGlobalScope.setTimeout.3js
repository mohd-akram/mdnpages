.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "WorkerGlobalScope.setTimeout" "JS" "October 7, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WorkerGlobalScope.setTimeout \- WorkerGlobalScope: setTimeout() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Web Workers.
.PP
The \f[B]\f[CB]setTimeout()\f[B]\f[R] method of the
\f[CR]WorkerGlobalScope\f[R] interface sets a timer which executes a
function or specified piece of code once the timer expires.
.SH SYNTAX
.IP
.EX
setTimeout(code)
setTimeout(code, delay)

setTimeout(functionRef)
setTimeout(functionRef, delay)
setTimeout(functionRef, delay, param1)
setTimeout(functionRef, delay, param1, param2)
setTimeout(functionRef, delay, param1, param2, /* \&..., */ paramN)
.EE
.SS Parameters
.TP
\f[B]functionRef\f[R]
A \f[CR]function\f[R] to be executed after the timer expires.
.TP
\f[B]code\f[R]
An alternative syntax that allows you to include a string instead of a
function, which is compiled and executed when the timer expires.
This syntax is \f[B]not recommended\f[R] for the same reasons that make
using \f[CR]eval()\f[R] a security risk.
.TP
\f[B]delay\f[R] \f[I](optional)\f[R]
The time, in milliseconds that the timer should wait before the
specified function or code is executed.
If this parameter is omitted, a value of 0 is used, meaning execute
\[lq]immediately\[rq], or more accurately, the next event cycle.
.RS
.PP
Note that in either case, the actual delay may be longer than intended;
see Reasons for delays longer than specified.
.PP
Also note that if the value isn\[cq]t a number, implicit type coercion
is silently done on the value to convert it to a number \[em] which can
lead to unexpected and surprising results; see Non\-number delay values
are silently coerced into numbers for an example.
.RE
.TP
\f[B]param1\f[R], \&..., \f[B]paramN\f[R] \f[I](optional)\f[R]
Additional arguments which are passed through to the function specified
by \f[CR]functionRef\f[R].
.SS Return value
The returned \f[CR]timeoutID\f[R] is a positive integer value which
identifies the timer created by the call to \f[CR]setTimeout()\f[R].
This value can be passed to \f[CR]clearTimeout()\f[R] to cancel the
timeout.
.PP
It is guaranteed that a \f[CR]timeoutID\f[R] value will never be reused
by a subsequent call to \f[CR]setTimeout()\f[R] or
\f[CR]setInterval()\f[R] on the same worker while the timer is still
active.
However, different objects use separate pools of IDs.
.SH DESCRIPTION
See \f[CR]Window.setTimeout()\f[R] for detailed descriptions.
.SH EXAMPLES
See \f[CR]Window.setTimeout()\f[R] for examples.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#settimeout-and-setinterval
Polyfill of \f[CR]setTimeout\f[R] which allows passing arguments to the
callback in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Window.setTimeout()\f[R]
.IP \[bu] 2
\f[CR]WorkerGlobalScope.clearTimeout()\f[R]
.IP \[bu] 2
\f[CR]WorkerGlobalScope.setInterval()\f[R]
.IP \[bu] 2
\f[CR]DedicatedWorkerGlobalScope.requestAnimationFrame()\f[R]
.IP \[bu] 2
\f[CR]WorkerGlobalScope.queueMicrotask()\f[R]
