.\" Automatically generated by Pandoc 3.4
.\"
.TH "DataTransferItemList.remove" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList.remove \- DataTransferItemList: remove() method
.SH SYNOPSIS
The \f[B]\f[CB]DataTransferItemList.remove()\f[B]\f[R] method removes
the \f[CR]DataTransferItem\f[R] at the specified index from the list.
If the index is less than zero or greater than one less than the length
of the list, the list will not be changed.
.SH SYNTAX
.IP
.EX
remove(index)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
The zero\-based index number of the item in the drag data list to
remove.
If the \f[CR]index\f[R] doesn\[cq]t correspond to an existing item in
the list, the list is left unchanged.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the drag data store is not in read/write mode and so the item
cannot be removed.
.SH EXAMPLES
.SS Dragging and dropping an element
This example shows the use of the \f[CR]remove()\f[R] method.
.SS HTML
.IP
.EX
<\f[B]div\f[R]>
  <\f[B]p\f[R] id=\[dq]source\[dq] draggable=\[dq]true\[dq]>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </\f[B]p\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] id=\[dq]target\[dq]>Drop Zone</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]margin\f[R]: 0em;
  \f[B]padding\f[R]: 2em;
}

source {
  \f[B]color\f[R]: blue;
  \f[B]border\f[R]: 1px solid black;
}

target {
  \f[B]border\f[R]: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]function\f[R] dragstart_handler(ev) {
  console.log(\[dq]dragStart\[dq]);
  \f[I]// Add this element\[aq]s id to the drag payload so the drop handler will\f[R]
  \f[I]// know which element to add to its tree\f[R]
  \f[B]const\f[R] dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \[dq]text/plain\[dq]);
  \f[I]// Add some other items to the drag payload\f[R]
  dataList.add(\[dq]<p>Paragraph\&...</p>\[dq], \[dq]text/html\[dq]);
  dataList.add(\[dq]http://www.example.org\[dq], \[dq]text/uri\-list\[dq]);
}

\f[B]function\f[R] drop_handler(ev) {
  console.log(\[dq]Drop\[dq]);
  ev.preventDefault();
  \f[B]const\f[R] data = event.dataTransfer.items;
  \f[I]// Loop through the dropped items and log their data\f[R]
  \f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] data) {
    \f[B]if\f[R] (item.kind === \[dq]string\[dq] && item.type.match(\[dq]\[ha]text/plain\[dq])) {
      \f[I]// This item is the target node\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        ev.target.appendChild(document.getElementById(s));
      });
    } \f[B]else\f[R] \f[B]if\f[R] (item.kind === \[dq]string\[dq] && item.type.match(\[dq]\[ha]text/html\[dq])) {
      \f[I]// Drag data item is HTML\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        console.log(\[ga]\&... Drop: HTML = ${s}\[ga]);
      });
    } \f[B]else\f[R] \f[B]if\f[R] (item.kind === \[dq]string\[dq] && item.type.match(\[dq]\[ha]text/uri\-list\[dq])) {
      \f[I]// Drag data item is URI\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        console.log(\[ga]\&... Drop: URI = ${s}\[ga]);
      });
    }
  }
}

\f[B]function\f[R] dragover_handler(ev) {
  console.log(\[dq]dragOver\[dq]);
  ev.preventDefault();
  \f[I]// Set the dropEffect to move\f[R]
  ev.dataTransfer.dropEffect = \[dq]move\[dq];
}

\f[B]function\f[R] dragend_handler(ev) {
  console.log(\[dq]dragEnd\[dq]);
  \f[B]const\f[R] dataList = ev.dataTransfer.items;
  \f[I]// Clear all the files. Iterate in reverse order to safely remove.\f[R]
  \f[B]for\f[R] (\f[B]let\f[R] i = dataList.length \- 1; i >= 0; i\-\-) {
    \f[B]if\f[R] (dataList[i].kind === \[dq]file\[dq]) {
      dataList.remove(i);
    }
  }
  \f[I]// Clear any remaining drag data\f[R]
  dataList.clear();
}

\f[B]const\f[R] source = document.querySelector(\[dq]#source\[dq]);
source.addEventListener(\[dq]dragstart\[dq], dragstart_handler);
source.addEventListener(\[dq]dragend\[dq], dragend_handler);

\f[B]const\f[R] target = document.querySelector(\[dq]#target\[dq]);
target.addEventListener(\[dq]drop\[dq], drop_handler);
target.addEventListener(\[dq]dragover\[dq], dragover_handler);
.EE
.SS Result
