'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Intl.Locale" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.Locale \- Intl.Locale
.SH SYNOPSIS
The \f[B]\f[CB]Intl.Locale\f[B]\f[R] object is a standard built\-in
property of the Intl object that represents a Unicode locale identifier.
.IP
.EX
\f[B]const\f[R] korean = \f[B]new\f[R] Intl.Locale(\[dq]ko\[dq], {
  script: \[dq]Kore\[dq],
  region: \[dq]KR\[dq],
  hourCycle: \[dq]h23\[dq],
  calendar: \[dq]gregory\[dq],
});

\f[B]const\f[R] japanese = \f[B]new\f[R] Intl.Locale(\[dq]ja\-Jpan\-JP\-u\-ca\-japanese\-hc\-h12\[dq]);

console.log(korean.baseName, japanese.baseName);
\f[I]// Expected output: \[dq]ko\-Kore\-KR\[dq] \[dq]ja\-Jpan\-JP\[dq]\f[R]

console.log(korean.hourCycle, japanese.hourCycle);
\f[I]// Expected output: \[dq]h23\[dq] \[dq]h12\[dq]\f[R]
.EE
.SH DESCRIPTION
The \f[B]\f[CB]Intl.Locale\f[B]\f[R] object was created to allow for
easier manipulation of Unicode locales.
Unicode represents locales with a string, called a \f[I]locale
identifier\f[R].
The locale identifier consists of a \f[I]language identifier\f[R] and
\f[I]extension tags\f[R].
Language identifiers are the core of the locale, consisting of
\f[I]language\f[R], \f[I]script\f[R], and \f[I]region subtags\f[R].
Additional information about the locale is stored in the optional
\f[I]extension tags\f[R].
Extension tags hold information about locale aspects such as calendar
type, clock type, and numbering system type.
.PP
Traditionally, the Intl API used strings to represent locales, just as
Unicode does.
This is a simple and lightweight solution that works well.
Adding a Locale class, however, adds ease of parsing and manipulating
the language, script, and region, as well as extension tags.
The following properties of \f[CR]Intl.Locale\f[R] correspond to Unicode
locale identifier subtags:
.PP
.TS
tab(@);
lw(47.7n) lw(22.3n).
T{
Property
T}@T{
Corresponding subtag
T}
_
T{
\f[CR]language\f[R]
T}@T{
\f[CR]language\f[R] (first part)
T}
T{
\f[CR]script\f[R]
T}@T{
\f[CR]script\f[R] (second part)
T}
T{
\f[CR]region\f[R]
T}@T{
\f[CR]region\f[R] (second/third part)
T}
T{
\f[CR]calendar\f[R]
T}@T{
\f[CR]ca\f[R] (extension)
T}
T{
\f[CR]caseFirst\f[R]
T}@T{
\f[CR]kf\f[R] (extension)
T}
T{
\f[CR]collation\f[R]
T}@T{
\f[CR]co\f[R] (extension)
T}
T{
\f[CR]hourCycle\f[R]
T}@T{
\f[CR]hc\f[R] (extension)
T}
T{
\f[CR]numberingSystem\f[R]
T}@T{
\f[CR]nu\f[R] (extension)
T}
T{
\f[CR]numeric\f[R]
T}@T{
\f[CR]kn\f[R] (extension)
T}
.TE
.PP
The information above is exactly provided as\-is when the
\f[CR]Locale\f[R] object is constructed, without consulting any external
database.
The \f[CR]Intl.Locale\f[R] object additionally provides some methods
that return information about the locale\[cq]s real\-world information,
such as available calendars, collations, and numbering systems.
.SH CONSTRUCTOR
.TP
\f[B]Intl.Locale()\f[R]
Creates a new \f[CR]Locale\f[R] object.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Intl.Locale.prototype\f[R] and
shared by all \f[CR]Intl.Locale\f[R] instances.
.TP
\f[B]Intl.Locale.prototype.baseName\f[R]
Returns basic, core information about the \f[CR]Locale\f[R] in the form
of a substring of the complete data string.
.TP
\f[B]Intl.Locale.prototype.calendar\f[R]
Returns the part of the \f[CR]Locale\f[R] that indicates the
Locale\[cq]s calendar era.
.TP
\f[B]Intl.Locale.prototype.caseFirst\f[R]
Returns whether case is taken into account for the locale\[cq]s
collation rules.
.TP
\f[B]Intl.Locale.prototype.collation\f[R]
Returns the collation type for the \f[CR]Locale\f[R], which is used to
order strings according to the locale\[cq]s rules.
.TP
\f[B]Intl.Locale.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Intl.Locale\f[R] instances, the initial value is the
\f[CR]Intl.Locale\f[R] constructor.
.TP
\f[B]Intl.Locale.prototype.hourCycle\f[R]
Returns the time keeping format convention used by the locale.
.TP
\f[B]Intl.Locale.prototype.language\f[R]
Returns the language associated with the locale.
.TP
\f[B]Intl.Locale.prototype.numberingSystem\f[R]
Returns the numeral system used by the locale.
.TP
\f[B]Intl.Locale.prototype.numeric\f[R]
Returns whether the locale has special collation handling for numeric
characters.
.TP
\f[B]Intl.Locale.prototype.region\f[R]
Returns the region of the world (usually a country) associated with the
locale.
.TP
\f[B]Intl.Locale.prototype.script\f[R]
Returns the script used for writing the particular language used in the
locale.
.TP
\f[B]Intl.Locale.prototype[Symbol.toStringTag]\f[R]
The initial value of the \f[CR][Symbol.toStringTag]\f[R] property is the
string \f[CR]\[dq]Intl.Locale\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]Intl.Locale.prototype.getCalendars()\f[R]
Returns an \f[CR]Array\f[R] of available calendar identifiers, according
to the locale\[cq]s rules.
.TP
\f[B]Intl.Locale.prototype.getCollations()\f[R]
Returns an \f[CR]Array\f[R] of the collation types for the
\f[CR]Locale\f[R].
.TP
\f[B]Intl.Locale.prototype.getHourCycles()\f[R]
Returns an \f[CR]Array\f[R] of hour cycle identifiers, indicating either
the 12\-hour clock (\[lq]h12\[rq]), the Japanese 12\-hour clock
(\[lq]h11\[rq]), the 24\-hour clock (\[lq]h23\[rq]), or the unused
format \[lq]h24\[rq].
.TP
\f[B]Intl.Locale.prototype.getNumberingSystems()\f[R]
Returns an \f[CR]Array\f[R] of numbering system identifiers available
according to the locale\[cq]s rules.
.TP
\f[B]Intl.Locale.prototype.getTextInfo()\f[R]
Returns the part indicating the ordering of characters \f[CR]ltr\f[R]
(left\-to\-right) or \f[CR]rtl\f[R] (right\-to\-left).
.TP
\f[B]Intl.Locale.prototype.getTimeZones()\f[R]
Returns an \f[CR]Array\f[R] of time zone identifiers, associated with
the \f[CR]Locale\f[R].
.TP
\f[B]Intl.Locale.prototype.getWeekInfo()\f[R]
Returns \c
.UR https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements
UTS 35\[cq]s Week Elements
.UE \c
\ according to the locale rules.
.TP
\f[B]Intl.Locale.prototype.maximize()\f[R]
Gets the most likely values for the language, script, and region of the
locale based on existing values.
.TP
\f[B]Intl.Locale.prototype.minimize()\f[R]
Attempts to remove information about the locale that would be added by
calling \f[CR]maximize()\f[R].
.TP
\f[B]Intl.Locale.prototype.toString()\f[R]
Returns the Locale\[cq]s full locale identifier string.
.SH EXAMPLES
.SS Basic usage
At its very simplest, the \f[CR]Intl.Locale()\f[R] constructor takes a
locale identifier string as its argument:
.IP
.EX
\f[B]const\f[R] us = \f[B]new\f[R] Intl.Locale(\[dq]en\-US\[dq]);
.EE
.SS Using the Locale constructor with an options object
The constructor also takes an optional configuration object argument,
which can contain any of several extension types.
For example, set the \f[CR]hourCycle\f[R] property of the configuration
object to your desired hour cycle type, and then pass it into the
constructor:
.IP
.EX
\f[B]const\f[R] us12hour = \f[B]new\f[R] Intl.Locale(\[dq]en\-US\[dq], { hourCycle: \[dq]h12\[dq] });
console.log(us12hour.hourCycle); \f[I]// Prints \[dq]h12\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://formatjs.github.io/docs/polyfills/intl-locale/
Polyfill of \f[CR]Intl.Locale\f[R] in FormatJS
.UE \c
.IP \[bu] 2
\f[CR]Intl\f[R]
.IP \[bu] 2
\c
.UR https://www.unicode.org/reports/tr35/#Canonical_Unicode_Locale_Identifiers
Canonical Unicode Locale Identifiers
.UE \c
\ in the Unicode locale data markup language spec
