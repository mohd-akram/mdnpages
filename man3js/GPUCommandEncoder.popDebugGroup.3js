.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMMANDENCODER.POPDEBUGGROUP" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUCommandEncoder.popDebugGroup \- GPUCommandEncoder: popDebugGroup()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]popDebugGroup()\f[B]\f[R] method of the
\f[CR]GPUCommandEncoder\f[R] interface ends a debug group, which is
begun with a \f[CR]pushDebugGroup()\f[R] call.
.PP
This could be used for telemetry, or may be utilized in
\f[CR]GPUError\f[R] messages, browser dev tools, or other services in
the future to help with debugging.
.SH SYNTAX
.IP
.EX
popDebugGroup()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]popDebugGroup()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the
\f[CR]GPUCommandEncoder\f[R] becomes invalid:
.IP \(bu 2
The command encoder\(cqs debug stack is not empty (i.e., at least one
debug group was previously started with \f[CR]pushDebugGroup()\f[R]).
.SH EXAMPLES
.IP
.EX
\f[I]// \&...\f[R]

commandEncoder.pushDebugGroup(\(dqmy_group_marker\(dq); \f[I]// Start labeled debug group\f[R]

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.draw(3);

passEncoder.end();

commandEncoder.popDebugGroup(); \f[I]// End labeled debug group\f[R]

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
