.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RTCPEERCONNECTION.ADDTRACK" "3JS" "May 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.addTrack \- RTCPeerConnection: addTrack() method
.SH SYNOPSIS
The \f[B]\f[CB]addTrack()\f[B]\f[R] method of the
\f[CR]RTCPeerConnection\f[R] interface adds a new media track to the set
of tracks which will be transmitted to the other peer.
.RS
.PP
\f[B]Note:\f[R] Adding a track to a connection triggers renegotiation by
firing a \f[CR]negotiationneeded\f[R] event.
See Starting negotiation for details.
.RE
.SH SYNTAX
.IP
.EX
addTrack(track)
addTrack(track, stream1)
addTrack(track, stream1, stream2)
addTrack(track, stream1, stream2, /* \&..., */ streamN)
.EE
.SS Parameters
.TP
\f[B]track\f[R]
A \f[CR]MediaStreamTrack\f[R] object representing the media track to add
to the peer connection.
.TP
\f[B]stream1\f[R], \&..., \f[B]streamN\f[R] \f[I](optional)\f[R]
One or more local \f[CR]MediaStream\f[R] objects to which the track
should be added.
.PP
The specified \f[CR]track\f[R] doesn\(cqt necessarily have to already be
part of any of the specified \f[CR]stream\f[R]s.
Instead, the \f[CR]stream\f[R]s are a way to group tracks together on
the receiving end of the connection, making sure they are synchronized.
Any tracks that are added to the same stream on the local end of the
connection will be on the same stream on the remote end.
.SS Return value
The \f[CR]RTCRtpSender\f[R] object which will be used to transmit the
media data.
.RS
.PP
\f[B]Note:\f[R] Every \f[CR]RTCRtpSender\f[R] is paired with an
\f[CR]RTCRtpReceiver\f[R] to make up an \f[CR]RTCRtpTransceiver\f[R].
The associated receiver is muted (indicating that it is not able to
deliver packets) until and unless one or more streams are added to the
receiver by the remote peer.
.RE
.SS Exceptions
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Thrown if the specified track (or all of its underlying streams) is
already part of the \f[CR]RTCPeerConnection\f[R].
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]RTCPeerConnection\f[R] is closed.
.SH USAGE NOTES
.SS Adding tracks to multiple streams
After the \f[CR]track\f[R] parameter, you can optionally specify one or
more \f[CR]MediaStream\f[R] objects to add the track to.
Only tracks are sent from one peer to another, not streams.
Since streams are specific to each peer, specifying one or more streams
means the other peer will create a corresponding stream (or streams)
automatically on the other end of the connection, and will then
automatically add the received track to those streams.
.SS Streamless tracks
If no streams are specified, then the track is \f[B]streamless\f[R].
This is perfectly acceptable, although it will be up to the remote peer
to decide what stream to insert the track into, if any.
This is a very common way to use \f[CR]addTrack()\f[R] when building
many types of simple applications, where only one stream is needed.
For example, if all you\(cqre sharing with the remote peer is a single
stream with an audio track and a video track, you don\(cqt need to deal
with managing what track is in what stream, so you might as well just
let the transceiver handle it for you.
.PP
Here\(cqs an example showing a function that uses
\f[CR]getUserMedia()\f[R] to obtain a stream from a user\(cqs camera and
microphone, then adds each track from the stream to the peer connection,
without specifying a stream for each track:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] openCall(pc) {
  \f[B]const\f[R] gumStream = \f[B]await\f[R] navigator.mediaDevices.getUserMedia({
    video: \f[B]true\f[R],
    audio: \f[B]true\f[R],
  });
  \f[B]for\f[R] (\f[B]const\f[R] track \f[B]of\f[R] gumStream.getTracks()) {
    pc.addTrack(track);
  }
}
.EE
.PP
The result is a set of tracks being sent to the remote peer, with no
stream associations.
The handler for the \f[CR]track\f[R] event on the remote peer will be
responsible for determining what stream to add each track to, even if
that means adding them all to the same stream.
The \f[CR]ontrack\f[R] handler might look like this:
.IP
.EX
\f[B]let\f[R] inboundStream = \f[B]null\f[R];

pc.ontrack = (ev) \f[B]=>\f[R] {
  \f[B]if\f[R] (ev.streams && ev.streams[0]) {
    videoElem.srcObject = ev.streams[0];
  } \f[B]else\f[R] {
    \f[B]if\f[R] (!inboundStream) {
      inboundStream = \f[B]new\f[R] MediaStream();
      videoElem.srcObject = inboundStream;
    }
    inboundStream.addTrack(ev.track);
  }
};
.EE
.PP
Here, the \f[CR]track\f[R] event handler adds the track to the first
stream specified by the event, if a stream is specified.
Otherwise, the first time \f[CR]ontrack\f[R] is called, a new stream is
created and attached to the video element, and then the track is added
to the new stream.
From then on, new tracks are added to that stream.
.PP
You could also just create a new stream for each track received:
.IP
.EX
pc.ontrack = (ev) \f[B]=>\f[R] {
  \f[B]if\f[R] (ev.streams && ev.streams[0]) {
    videoElem.srcObject = ev.streams[0];
  } \f[B]else\f[R] {
    \f[B]let\f[R] inboundStream = \f[B]new\f[R] MediaStream(ev.track);
    videoElem.srcObject = inboundStream;
  }
};
.EE
.SS Associating tracks with specific streams
By specifying a stream and allowing \f[CR]RTCPeerConnection\f[R] to
create streams for you, the streams\(cq track associations are
automatically managed for you by the WebRTC infrastructure.
This includes things like changes to the transceiver\(cqs
\f[CR]direction\f[R] and tracks being halted using
\f[CR]removeTrack()\f[R].
.PP
For example, consider this function that an application might use to
begin streaming a device\(cqs camera and microphone input over an
\f[CR]RTCPeerConnection\f[R] to a remote peer:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] openCall(pc) {
  \f[B]const\f[R] gumStream = \f[B]await\f[R] navigator.mediaDevices.getUserMedia({
    video: \f[B]true\f[R],
    audio: \f[B]true\f[R],
  });
  \f[B]for\f[R] (\f[B]const\f[R] track \f[B]of\f[R] gumStream.getTracks()) {
    pc.addTrack(track, gumStream);
  }
}
.EE
.PP
The remote peer might then use a \f[CR]track\f[R] event handler that
looks like this:
.IP
.EX
pc.ontrack = ({ streams: [stream] }) \f[B]=>\f[R] (videoElem.srcObject = stream);
.EE
.PP
This sets the video element\(cqs current stream to the one that contains
the track that\(cqs been added to the connection.
.SS Reused senders
This method returns a new \f[CR]RTCRtpSender\f[R] or an existing
instance for reuse.
An \f[CR]RTCRtpSender\f[R] instance is only compatible for reuse if it
meets the following criteria:
.IP \(bu 2
There is no track already associated with the sender.
.IP \(bu 2
The \f[CR]RTCRtpTransceiver\f[R] associated with the sender has a
\f[CR]RTCRtpReceiver\f[R] whose \f[CR]track\f[R] property specifies a
\f[CR]MediaStreamTrack\f[R] whose \f[CR]kind\f[R] is the same as the
\f[CR]kind\f[R] of the \f[CR]track\f[R] parameter specified when calling
\f[CR]RTCPeerConnection.addTrack()\f[R].
This ensures that a transceiver only handles audio or video and never
both.
.IP \(bu 2
The \f[CR]RTCRtpTransceiver.currentDirection\f[R] property is not
\f[CR]\(dqstopped\(dq\f[R].
.IP \(bu 2
The \f[CR]RTCRtpSender\f[R] being considered has never been used to send
data.
If the transceiver\(cqs \f[CR]currentDirection\f[R] has ever been
\f[CR]\(dqsendrecv\(dq\f[R] or \f[CR]\(dqsendonly\(dq\f[R], the sender
can\(cqt be reused.
.PP
If all of those criteria are met, the sender gets reused, which results
in these changes occurring to the existing \f[CR]RTCRtpSender\f[R] and
its \f[CR]RTCRtpTransceiver\f[R]:
.IP \(bu 2
The \f[CR]RTCRtpSender\f[R]\(cqs \f[CR]track\f[R] is set to the
specified track.
.IP \(bu 2
The sender\(cqs set of associated streams is set to the list of streams
passed into this method, \f[CR]stream1\f[R], \&..., \f[CR]streamN\f[R].
.IP \(bu 2
The associated \f[CR]RTCRtpTransceiver\f[R] has its
\f[CR]currentDirection\f[R] updated to indicate that it is sending; if
its current value is \f[CR]\(dqrecvonly\(dq\f[R], it becomes
\f[CR]\(dqsendrecv\(dq\f[R], and if its current value is
\f[CR]\(dqinactive\(dq\f[R], it becomes \f[CR]\(dqsendonly\(dq\f[R].
.SS New senders
If no existing sender exists that can be reused, a new one is created.
This also results in the creation of the associated objects that must
exist.
The process of creating a new sender results in these changes:
.IP \(bu 2
The new \f[CR]RTCRtpSender\f[R] is created with the specified track and
set of stream(s).
.IP \(bu 2
A new \f[CR]RTCRtpReceiver\f[R] is created with a \f[I]new\f[R]
\f[CR]MediaStreamTrack\f[R] as its \f[CR]track\f[R] property (not the
track specified as a parameter when calling \f[CR]addTrack()\f[R]).
This track\(cqs \f[CR]kind\f[R] is set to match the \f[CR]kind\f[R] of
the track provided as an input parameter.
.IP \(bu 2
A new \f[CR]RTCRtpTransceiver\f[R] is created and associated with the
new sender and receiver.
.IP \(bu 2
The new transceiver\(cqs \f[CR]direction\f[R] is set to
\f[CR]\(dqsendrecv\(dq\f[R].
.IP \(bu 2
The new transceiver is added to the \f[CR]RTCPeerConnection\f[R]\(cqs
set of transceivers.
.SH EXAMPLES
This example is drawn from the code presented in the article Signaling
and video calling and its corresponding sample code.
It comes from the \f[CR]handleVideoOfferMsg()\f[R] method there, which
is called when an offer message is received from the remote peer.
.IP
.EX
\f[B]const\f[R] mediaConstraints = {
  audio: \f[B]true\f[R], \f[I]// We want an audio track\f[R]
  video: \f[B]true\f[R], \f[I]// And we want a video track\f[R]
};

\f[B]const\f[R] desc = \f[B]new\f[R] RTCSessionDescription(sdp);

pc.setRemoteDescription(desc)
  .then(() \f[B]=>\f[R] navigator.mediaDevices.getUserMedia(mediaConstraints))
  .then((stream) \f[B]=>\f[R] {
    previewElement.srcObject = stream;

    stream.getTracks().forEach((track) \f[B]=>\f[R] pc.addTrack(track, stream));
  });
.EE
.PP
This code takes SDP which has been received from the remote peer and
constructs a new \f[CR]RTCSessionDescription\f[R] to pass into
\f[CR]setRemoteDescription()\f[R].
Once that succeeds, it uses \f[CR]MediaDevices.getUserMedia()\f[R] to
obtain access to the local webcam and microphone.
.PP
If that succeeds, the resulting stream is assigned as the source for a
\f[CR]<video>\f[R] element which is referenced by the variable
\f[CR]previewElement\f[R].
.PP
The final step is to begin sending the local video across the peer
connection to the caller.
This is done by adding each track in the stream by iterating over the
list returned by \f[CR]MediaStream.getTracks()\f[R] and passing them to
\f[CR]addTrack()\f[R] along with the \f[CR]stream\f[R] which they\(cqre
a component of.
.SH SEE ALSO
.IP \(bu 2
WebRTC
.IP \(bu 2
Introduction to the Real\-time Transport Protocol (RTP)
.IP \(bu 2
\f[CR]track\f[R]
