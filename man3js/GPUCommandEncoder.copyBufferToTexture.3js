.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMMANDENCODER.COPYBUFFERTOTEXTURE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUCommandEncoder.copyBufferToTexture \- GPUCommandEncoder:
copyBufferToTexture() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]copyBufferToTexture()\f[B]\f[R] method of the
\f[CR]GPUCommandEncoder\f[R] interface encodes a command that copies
data from a \f[CR]GPUBuffer\f[R] to a \f[CR]GPUTexture\f[R].
.SH SYNTAX
.IP
.EX
copyBufferToTexture(source, destination, copySize)
.EE
.SS Parameters
.TP
\f[B]source\f[R]
An object that defines the buffer to copy from, plus the layout of the
data in the buffer to be copied to the texture.
Combined with \f[CR]copySize\f[R], it defines the region of the source
buffer.
\f[CR]source\f[R] can take the following properties:
.RS
.TP
\f[B]buffer\f[R]
The \f[CR]GPUBuffer\f[R] to copy from.
.TP
\f[B]offset\f[R] \f[I](optional)\f[R]
The offset, in bytes, from the beginning of \f[CR]data\f[R] to the start
of the image data to be copied.
If omitted, \f[CR]offset\f[R] defaults to 0.
.TP
\f[B]bytesPerRow\f[R] \f[I](optional)\f[R]
A number representing the stride, in bytes, between the start of each
block row (i.e., a row of complete texel blocks) and the subsequent
block row.
This is required if there are multiple block rows (i.e., the copy height
or depth is more than one block).
.TP
\f[B]rowsPerImage\f[R] \f[I](optional)\f[R]
The number of block rows per single image inside the data.
\f[CR]bytesPerRow\f[R] Ã— \f[CR]rowsPerImage\f[R] will give you the
stride, in bytes, between the start of each complete image.
This is required if there are multiple images to copy.
.RE
.TP
\f[B]destination\f[R]
An object defining the texture to write the data to.
Combined with \f[CR]copySize\f[R], defines the region of the destination
texture subresource.
\f[CR]destination\f[R] can take the following properties:
.RS
.TP
\f[B]aspect\f[R] \f[I](optional)\f[R]
An enumerated value defining which aspects of the texture to write the
data to.
Possible values are:
.RS
.TP
\f[B]\(dqall\(dq\f[R]
All available aspects of the texture format will be written to, which
can mean all or any of color, depth, and stencil, depending on what kind
of format you are dealing with.
.TP
\f[B]\(dqdepth\-only\(dq\f[R]
Only the depth aspect of a \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
\ will be written to.
.TP
\f[B]\(dqstencil\-only\(dq\f[R]
Only the stencil aspect of a depth\-or\-stencil format will be written
to.
.PP
If omitted, \f[CR]aspect\f[R] takes a value of \f[CR]\(dqall\(dq\f[R].
.RE
.TP
\f[B]mipLevel\f[R] \f[I](optional)\f[R]
A number representing the mip\-map level of the texture to write the
data to.
If omitted, \f[CR]mipLevel\f[R] defaults to 0.
.TP
\f[B]origin\f[R] \f[I](optional)\f[R]
An object or array specifying the origin of the copy \(em the minimum
corner of the texture region to write the data to.
Together with \f[CR]size\f[R], this defines the full extent of the
region to copy to.
The \f[CR]x\f[R], \f[CR]y\f[R], and \f[CR]z\f[R] values default to 0 if
any of all of \f[CR]origin\f[R] is omitted.
.RS
.PP
For example, you can pass an array like \f[CR][0, 0, 0]\f[R], or its
equivalent object \f[CR]{ x: 0, y: 0, z: 0 }\f[R].
.RE
.TP
\f[B]texture\f[R]
A \f[CR]GPUTexture\f[R] object representing the texture to write the
data to.
.RE
.TP
\f[B]copySize\f[R]
An object or array specifying the width, height, and depth/array layer
count of the copied data.
The width value must always be specified, while the height and
depth/array layer count values are optional and will default to 1 if
omitted.
.RS
.PP
For example, you can pass an array \f[CR][16, 16, 2]\f[R], or its
equivalent object
\f[CR]{ width: 16, height: 16, depthOrArrayLayers: 2 }\f[R].
.RE
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]copyBufferToTexture()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the
\f[CR]GPUCommandEncoder\f[R] becomes invalid.
.PP
For the \f[CR]source\f[R]:
.IP \(bu 2
\f[CR]source.bytesPerRow\f[R] is a multiple of 256.
.IP \(bu 2
The \f[CR]source.buffer\f[R]\(cqs \f[CR]GPUBuffer.usage\f[R] includes
the \f[CR]GPUBufferUsage.COPY_SRC\f[R] flag.
.PP
For the \f[CR]destination\f[R]:
.IP \(bu 2
\f[CR]mipLevel\f[R] is less than the
\f[CR]GPUTexture.mipLevelCount\f[R].
.IP \(bu 2
\f[CR]origin.x\f[R] is a multiple of the texel block width of the
\f[CR]GPUTexture.format\f[R].
.IP \(bu 2
\f[CR]origin.y\f[R] is a multiple of the texel block height of the
\f[CR]GPUTexture.format\f[R].
.IP \(bu 2
If the \f[CR]GPUTexture.format\f[R] is a \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
\ or \f[CR]GPUTexture.sampleCount\f[R] is more than 1, the subresource
size is equal to \f[CR]size\f[R].
.IP \(bu 2
The \f[CR]destination\f[R]\(cqs \f[CR]GPUTexture.usage\f[R] includes the
\f[CR]GPUTextureUsage.COPY_DST\f[R] flag.
.IP \(bu 2
The \f[CR]destination\f[R]\(cqs \f[CR]GPUTexture.sampleCount\f[R] is 1.
.IP \(bu 2
\f[CR]destination.aspect\f[R] refers to a single aspect of the
\f[CR]GPUTexture.format\f[R].
.IP \(bu 2
That aspect is a valid image copy destination according to \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil formats
.UE \c
\&.
.IP \(bu 2
The \f[CR]destination\f[R] is compatible with the \f[CR]copySize\f[R].
.SH EXAMPLES
.IP
.EX
commandEncoder.copyBufferToTexture(
  {
    buffer: sourceBuffer,
  },
  {
    texture: destinationTexture,
  },
  {
    width: 16,
    height: 16,
    depthOrArrayLayers: 2,
  },
);
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
