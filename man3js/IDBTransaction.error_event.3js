.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "IDBTransaction.error_event" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.error_event \- IDBTransaction: error event
.SH SYNOPSIS
The \f[CR]error\f[R] event is fired on \f[CR]IDBTransaction\f[R] when a
request returns an error and the event bubbles up to the transaction
object.
.RS
.PP
\f[B]Note:\f[R] To handle all the ways a transaction can fail, consider
listening for the \f[CR]abort\f[R] event instead.
.RE
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]error\[dq], (event) \f[B]=>\f[R] {});
onerror = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH BUBBLING
This event bubbles to \f[CR]IDBDatabase\f[R].
The \f[CR]event.target\f[R] property refers to the
\f[CR]IDBTransaction\f[R] object that bubbles up.
.PP
For more information, see Event bubbling.
.SH EXAMPLES
This example opens a database and tries to add a record, listening for
the \f[CR]error\f[R] event for the \f[CR]add()\f[R] operation (this will
occur if, for example, a record with the given \f[CR]taskTitle\f[R]
already exists):
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
};

dBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = dBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  transaction.addEventListener(\[dq]error\[dq], () \f[B]=>\f[R] {
    console.log(\[ga]Error adding new item: ${newItem.taskTitle}\[ga]);
  });

  \f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);
  \f[B]const\f[R] newItem = {
    taskTitle: \[dq]my task\[dq],
    hours: 10,
    minutes: 10,
    day: 10,
    month: \[dq]January\[dq],
    year: 2020,
  };

  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem);
};
.EE
.PP
The same example, using the \f[CR]onerror\f[R] property instead of
\f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
};

dBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = dBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  transaction.onerror = () \f[B]=>\f[R] {
    console.log(\[ga]Error adding new item: ${newItem.taskTitle}\[ga]);
  };

  \f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);
  \f[B]const\f[R] newItem = {
    taskTitle: \[dq]my task\[dq],
    hours: 10,
    minutes: 10,
    day: 10,
    month: \[dq]January\[dq],
    year: 2020,
  };

  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
