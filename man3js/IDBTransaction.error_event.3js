.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBTRANSACTION.ERROR_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.error_event \- IDBTransaction: error event
.SH SYNOPSIS
The \f[CR]error\f[R] event is fired on \f[CR]IDBTransaction\f[R] when a
request returns an error and the event bubbles up to the transaction
object.
.RS
.PP
\f[B]Note:\f[R] To handle all the ways a transaction can fail, consider
listening for the \f[CR]abort\f[R] event instead.
.RE
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqerror\(dq, (event) => { })

onerror = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH BUBBLING
This event bubbles to \f[CR]IDBDatabase\f[R].
The \f[CR]event.target\f[R] property refers to the
\f[CR]IDBTransaction\f[R] object that bubbles up.
.PP
For more information, see Event bubbling.
.SH EXAMPLES
This example opens a database and tries to add a record, listening for
the \f[CR]error\f[R] event for the \f[CR]add()\f[R] operation (this will
occur if, for example, a record with the given \f[CR]taskTitle\f[R]
already exists):
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

dBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = dBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\(dqtoDoList\(dq], \(dqreadwrite\(dq);

  transaction.addEventListener(\(dqerror\(dq, () \f[B]=>\f[R] {
    console.log(\(gaError adding new item: ${newItem.taskTitle}\(ga);
  });

  \f[B]const\f[R] objectStore = transaction.objectStore(\(dqtoDoList\(dq);
  \f[B]const\f[R] newItem = {
    taskTitle: \(dqmy task\(dq,
    hours: 10,
    minutes: 10,
    day: 10,
    month: \(dqJanuary\(dq,
    year: 2020,
  };

  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem);
};
.EE
.PP
The same example, using the \f[CR]onerror\f[R] property instead of
\f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

dBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = dBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\(dqtoDoList\(dq], \(dqreadwrite\(dq);

  transaction.onerror = () \f[B]=>\f[R] {
    console.log(\(gaError adding new item: ${newItem.taskTitle}\(ga);
  };

  \f[B]const\f[R] objectStore = transaction.objectStore(\(dqtoDoList\(dq);
  \f[B]const\f[R] newItem = {
    taskTitle: \(dqmy task\(dq,
    hours: 10,
    minutes: 10,
    day: 10,
    month: \(dqJanuary\(dq,
    year: 2020,
  };

  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem);
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
