.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "XRRigidTransform" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRRigidTransform \- XRRigidTransform
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]XRRigidTransform\f[B]\f[R] is a WebXR API interface that
represents the 3D geometric transform described by a position and
orientation.
.PP
\f[CR]XRRigidTransform\f[R] is used to specify transforms throughout the
WebXR APIs, including:
.IP \[bu] 2
The offset and orientation relative to the parent reference space to use
when creating a new reference space with
\f[CR]getOffsetReferenceSpace()\f[R].
.IP \[bu] 2
The \f[CR]transform\f[R] of an \f[CR]XRView\f[R].
.IP \[bu] 2
The \f[CR]transform\f[R] of an \f[CR]XRPose\f[R].
.IP \[bu] 2
The \f[CR]XRReferenceSpaceEvent\f[R] event\[cq]s \f[CR]transform\f[R]
property, as found in the \f[CR]reset\f[R] event received by an
\f[CR]XRReferenceSpace\f[R].
.PP
Using \f[CR]XRRigidTransform\f[R] in these places rather than bare
arrays that provide the matrix data has an advantage.
It automatically computes the inverse of the transform and even caches
it making subsequent requests significantly faster.
.SH CONSTRUCTOR
.TP
\f[B]XRRigidTransform()\f[R]
Creates a new \f[CR]XRRigidTransform\f[R] object which represents a
transform that applies a specified position and/or orientation.
.SH INSTANCE PROPERTIES
.TP
\f[B]XRRigidTransform.position\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMPointReadOnly\f[R] specifying a 3\-dimensional point,
expressed in meters, describing the translation component of the
transform.
The \f[CR]w\f[R] property is always \f[CR]1.0\f[R].
.TP
\f[B]XRRigidTransform.orientation\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMPointReadOnly\f[R] which contains a unit quaternion
describing the rotational component of the transform.
As a unit quaternion, its length is always normalized to \f[CR]1.0\f[R].
.TP
\f[B]XRRigidTransform.matrix\f[R] \f[I](read\-only)\f[R]
Returns the transform matrix in the form of a 16\-member
\f[CR]Float32Array\f[R].
See the section Matrix format for how the array is used to represent a
matrix.
.TP
\f[B]XRRigidTransform.inverse\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]XRRigidTransform\f[R] which is the inverse of this
transform.
That is, if applied to an object that had been previously transformed by
the original transform, it will undo the transform and return the
original object.
.SH USAGE NOTES
When an \f[CR]XRRigidTransform\f[R] is interpreted, the orientation is
always applied to the affected object before the position is applied.
.SH EXAMPLE
This code snippet creates an \f[CR]XRRigidTransform\f[R] to specify the
offset and orientation in relation to the current reference space to use
when creating a new reference space.
It then requests the first animation frame callback by calling the
session\[cq]s \f[CR]requestAnimationFrame()\f[R] method.
.IP
.EX
xrSession.requestReferenceSpace(refSpaceType).then((refSpace) \f[B]=>\f[R] {
  xrReferenceSpace = refSpace;
  xrReferenceSpace = xrReferenceSpace.getOffsetReferenceSpace(
    \f[B]new\f[R] XRRigidTransform(viewerStartPosition, cubeOrientation),
  );
  animationFrameRequestID = xrSession.requestAnimationFrame(drawFrame);
});
.EE
