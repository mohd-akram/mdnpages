.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "PublicKeyCredential.toJSON" "JS" "August 27, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential.toJSON \- PublicKeyCredential: toJSON() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]toJSON()\f[B]\f[R] method of the
\f[CR]PublicKeyCredential\f[R] interface returns a JSON type
representation of a \f[CR]PublicKeyCredential\f[R].
.PP
The properties of the returned object depend on whether the credential
is returned by \f[CR]navigator.credentials.create()\f[R] when creating a
key pair and registering a user, or
\f[CR]navigator.credentials.get()\f[R] when authenticating a user.
.PP
This method is automatically invoked when web app code calls
\f[CR]JSON.stringify()\f[R] to serialize a
\f[CR]PublicKeyCredential\f[R] so that it can be sent to relying party
server when registering or authenticating a user.
It not intended to be called directly in web app code.
.SH SYNTAX
.IP
.EX
toJSON()
.EE
.SS Parameters
None.
.SS Return value
A JSON type representation of a \f[CR]PublicKeyCredential\f[R] object.
.PP
The included properties depend on whether the credential was returned by
\f[CR]navigator.credentials.create()\f[R] on registration, or
\f[CR]navigator.credentials.get()\f[R] when authenticating a user.
The values and types of included properties are the same as for
\f[CR]PublicKeyCredential\f[R], with the exception that
base64url\-encoded strings are used in place of buffer properties.
.PP
The object properties are:
.TP
\f[B]id\f[R]
The value returned by \f[CR]PublicKeyCredential.id\f[R].
.TP
\f[B]rawId\f[R]
A base64url\-encoded version of \f[CR]PublicKeyCredential.rawId\f[R].
.TP
\f[B]authenticatorAttachment\f[R] \f[I](optional)\f[R]
The value returned by
\f[CR]PublicKeyCredential.authenticatorAttachment\f[R].
.TP
\f[B]type\f[R]
The string \f[CR]\[dq]public\-key\[dq]\f[R].
.TP
\f[B]clientExtensionResults\f[R]
An array contaning base64url\-encoded versions of the values returned by
\f[CR]PublicKeyCredential.getClientExtensionResults()\f[R].
.TP
\f[B]response\f[R]
The response property object depends on whether the credentials are
returned following a registration or authentication operation.
.RS
.IP \[bu] 2
When registering a new user \f[CR]response\f[R] will be a JSON\-type
representation of \f[CR]AuthenticatorAttestationResponse\f[R] where
buffer values have been base64url encoded.
.IP \[bu] 2
When authenticating a user the returned value will be a JSON\-type
representation version of \f[CR]AuthenticatorAssertionResponse\f[R]
where buffer values have been base64url encoded.
.RE
.SH EXAMPLES
When registering a new user, a relying party server will supply
information about the expected credentials to the web app.
The web app calls \f[CR]navigator.credentials.create()\f[R] with the
received information (\f[CR]createCredentialOptions\f[R] below), which
returns a promise that fulfills with the new credential (a
\f[CR]PublicKeyCredential\f[R]).
.IP
.EX
\f[B]const\f[R] newCredentialInfo = \f[B]await\f[R] navigator.credentials.create({
  createCredentialOptions,
});
.EE
.PP
The web app then serializes the returned credential using
\f[CR]JSON.stringify()\f[R] (which in turn calls \f[CR]toJSON()\f[R])
and posts it back to the server.
.IP
.EX
\f[B]const\f[R] registration_url = \[dq]https://example.com/registration\[dq];
\f[B]const\f[R] apiRegOptsResp = \f[B]await\f[R] fetch(registration_url, {
  method: \[dq]POST\[dq],
  headers: { \[dq]Content\-Type\[dq]: \[dq]application/json\[dq] },
  body: JSON.stringify(newCredentialInfo), \f[I]//Calls newCredentialInfo.toJSON\f[R]
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Web Authentication API
.IP \[bu] 2
\f[CR]PublicKeyCredential.parseCreationOptionsFromJSON()\f[R]
.IP \[bu] 2
\f[CR]PublicKeyCredential.parseRequestOptionsFromJSON()\f[R]
