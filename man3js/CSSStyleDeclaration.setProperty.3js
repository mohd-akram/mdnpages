.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CSSSTYLEDECLARATION.SETPROPERTY" "3JS" "March 22, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSSStyleDeclaration.setProperty \- CSSStyleDeclaration: setProperty()
method
.SH SYNOPSIS
The \f[B]\f[CB]CSSStyleDeclaration.setProperty()\f[B]\f[R] method
interface sets a new value for a property on a CSS style declaration
object.
.SH SYNTAX
.IP
.EX
setProperty(propertyName, value)
setProperty(propertyName, value, priority)
.EE
.SS Parameters
.TP
\f[B]propertyName\f[R]
A string representing the CSS property name (hyphen case) to be
modified.
.TP
\f[B]value\f[R] \f[I](optional)\f[R]
A string containing the new property value.
If not specified, treated as the empty string.
A \f[CR]null\f[R] value is treated the same as the empty string
(\f[CR]\(dq\(dq\f[R]).
> \f[B]Note:\f[R] \f[CR]value\f[R] must not contain
\f[CR]\(dq!important\(dq\f[R], that should be set using the
\f[CR]priority\f[R] parameter.
.TP
\f[B]priority\f[R] \f[I](optional)\f[R]
A string allowing the CSS priority to be set to important.
Only the values listed below are accepted:
.RS
.IP \(bu 2
\f[CR]\(dqimportant\(dq\f[R] (case\-insensitive) for setting the
property as \f[CR]!important\f[R];
.IP \(bu 2
\f[CR]\(dq\(dq\f[R], \f[CR]undefined\f[R], or \f[CR]null\f[R] for
removing the \f[CR]!important\f[R] flag if present.
.PP
Anything else causes the method to return early and no change to happen
(unless \f[CR]value\f[R] is empty, in which case the property is removed
regardless of the \f[CR]priority\f[R] value).
\f[CR]false\f[R], for example, is not a valid priority value.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]NoModificationAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if the property or declaration block is read only.
.SH ALTERNATIVE USAGE
If \f[CR]priority\f[R] can be omitted, JavaScript has a special simpler
syntax for setting a CSS property on a style declaration object:
.IP
.EX
style.cssPropertyName = \(dqvalue\(dq;
.EE
.SH EXAMPLES
In this example we have three buttons, which can be pressed to
dynamically alter our box paragraph\(cqs border, background color, and
text color to random values (see the live example at the end of this
section).
.PP
We know that the rule we want to alter to do this is contained inside
the second stylesheet applied to the page, so we grab a reference to it
using \f[CR]document.styleSheets[1]\f[R].
We then loop through the different rules contained inside the
stylesheet, which are contained in the array found at
\f[CR]stylesheet.cssRules\f[R]; for each one, we check whether its
\f[CR]CSSStyleRule.selectorText\f[R] property is equal to the selector
\f[CR].box p\f[R], which indicates it is the one we want.
.PP
If so, we store a reference to this \f[CR]CSSStyleRule\f[R] object in a
variable.
We then use three functions to generate random values for the properties
in question, and update the rule with these values.
In each case, this is done with the \f[CR]setProperty()\f[R] method, for
example
\f[CR]boxParaRule.style.setProperty(\(aqborder\(aq, newBorder);\f[R].
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\(dqcontrols\(dq>
  <\f[B]button\f[R] class=\(dqborder\(dq>Border</\f[B]button\f[R]>
  <\f[B]button\f[R] class=\(dqbgcolor\(dq>Background</\f[B]button\f[R]>
  <\f[B]button\f[R] class=\(dqcolor\(dq>Text</\f[B]button\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] class=\(dqbox\(dq>
  <\f[B]p\f[R]>Box</\f[B]p\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
html {
  \f[B]background\f[R]: orange;
  \f[B]font\-family\f[R]: sans\-serif;
  \f[B]height\f[R]: 100%;
}

body {
  \f[B]height\f[R]: inherit;
  \f[B]width\f[R]: 80%;
  \f[B]min\-width\f[R]: 500px;
  \f[B]max\-width\f[R]: 1000px;
  \f[B]margin\f[R]: 0 auto;
}

\&.controls {
  \f[B]display\f[R]: flex;
  \f[B]justify\-content\f[R]: space\-around;
  \f[B]align\-items\f[R]: center;
}

div button {
  \f[B]flex\f[R]: 1;
  \f[B]margin\f[R]: 20px;
  \f[B]height\f[R]: 30px;
  \f[B]line\-height\f[R]: 30px;
}

\&.box {
  \f[B]display\f[R]: flex;
  \f[B]justify\-content\f[R]: center;
  \f[B]align\-items\f[R]: center;
  \f[B]height\f[R]: calc(100% \- 70px);
}

\&.box p {
  \f[B]width\f[R]: 50%;
  \f[B]text\-align\f[R]: center;
  \f[B]font\-weight\f[R]: bold;
  \f[B]font\-size\f[R]: 40px;
  \f[B]height\f[R]: 150px;
  \f[B]line\-height\f[R]: 150px;
  \f[B]background\f[R]: red;
  \f[B]border\f[R]: 5px solid purple;
  \f[B]color\f[R]: white;
  \f[B]transition\f[R]: all 1s;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] borderBtn = document.querySelector(\(dq.border\(dq);
\f[B]const\f[R] bgColorBtn = document.querySelector(\(dq.bgcolor\(dq);
\f[B]const\f[R] colorBtn = document.querySelector(\(dq.color\(dq);
\f[B]const\f[R] box = document.querySelector(\(dq.box\(dq);

\f[B]function\f[R] random(min, max) {
  \f[B]const\f[R] num = Math.floor(Math.random() * (max \- min)) + min;
  \f[B]return\f[R] num;
}

\f[B]function\f[R] randomColor() {
  \f[B]return\f[R] \(gargb(${random(0, 255)} ${random(0, 255)} ${random(0, 255)})\(ga;
}

\f[B]const\f[R] stylesheet = document.styleSheets[1];
\f[B]const\f[R] boxParaRule = [...stylesheet.cssRules].find(
  (r) \f[B]=>\f[R] r.selectorText === \(dq.box p\(dq,
);

\f[B]function\f[R] setRandomBorder() {
  \f[B]const\f[R] newBorder = \(ga${random(1, 50)}px solid ${randomColor()}\(ga;
  boxParaRule.style.setProperty(\(dqborder\(dq, newBorder);
}

\f[B]function\f[R] setRandomBgColor() {
  \f[B]const\f[R] newBgColor = randomColor();
  boxParaRule.style.setProperty(\(dqbackground\-color\(dq, newBgColor);
}

\f[B]function\f[R] setRandomColor() {
  \f[B]const\f[R] newColor = randomColor();
  boxParaRule.style.setProperty(\(dqcolor\(dq, newColor);
}

borderBtn.addEventListener(\(dqclick\(dq, setRandomBorder);
bgColorBtn.addEventListener(\(dqclick\(dq, setRandomBgColor);
colorBtn.addEventListener(\(dqclick\(dq, setRandomColor);
.EE
.SS Result
