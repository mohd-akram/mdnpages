.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CLIPBOARDITEM.GETTYPE" "3JS" "January 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ClipboardItem.getType \- ClipboardItem: getType() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]getType()\f[B]\f[R] method of the
\f[CR]ClipboardItem\f[R] interface returns a \f[CR]Promise\f[R] that
resolves with a \f[CR]Blob\f[R] of the requested MIME type or an error
if the MIME type is not found.
.SH SYNTAX
.IP
.EX
getType(type)
.EE
.SS Parameters
.TP
\f[B]type\f[R]
A valid MIME type.
.SS Return value
A \f[CR]Promise\f[R] that resolves with a \f[CR]Blob\f[R] object.
.SS Exceptions
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
The \f[CR]type\f[R] does not match a known MIME type.
.TP
\f[B]TypeError\f[R]
No parameter is specified or the \f[CR]type\f[R] is not that of the
\f[CR]ClipboardItem\f[R].
.SH EXAMPLES
In the following example, we\(cqre returning all items on the clipboard
via the \f[CR]clipboard.read()\f[R] method.
For each one, we pass the \f[CR]ClipboardItem.types\f[R] property to the
\f[CR]getType()\f[R] method, which returns the corresponding
\f[CR]Blob\f[R] object.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] getClipboardContents() {
  \f[B]try\f[R] {
    \f[B]const\f[R] clipboardItems = \f[B]await\f[R] navigator.clipboard.read();

    \f[B]for\f[R] (\f[B]const\f[R] clipboardItem \f[B]of\f[R] clipboardItems) {
      \f[B]for\f[R] (\f[B]const\f[R] type \f[B]of\f[R] clipboardItem.types) {
        \f[B]const\f[R] blob = \f[B]await\f[R] clipboardItem.getType(type);
        \f[I]// we can now use blob here\f[R]
      }
    }
  } \f[B]catch\f[R] (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SH SEE ALSO
.IP \(bu 2
Clipboard API
.IP \(bu 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
