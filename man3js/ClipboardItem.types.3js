.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CLIPBOARDITEM.TYPES" "3JS" "January 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ClipboardItem.types \- ClipboardItem: types property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The read\-only \f[B]\f[CB]types\f[B]\f[R] property of the
\f[CR]ClipboardItem\f[R] interface returns an \f[CR]Array\f[R] of MIME
types available within the \f[CR]ClipboardItem\f[R].
.SH VALUE
An \f[CR]Array\f[R] of available MIME types.
.SH EXAMPLES
In the below example, we\(cqre returning all items on the clipboard via
the \f[CR]Clipboard.read()\f[R] method, then checking the
\f[CR]types\f[R] property for available types before utilizing the
\f[CR]ClipboardItem.getType()\f[R] method to return each data item as a
\f[CR]Blob\f[R].
If no clipboard contents is found for the specified type, an error is
returned.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] getClipboardContents() {
  \f[B]try\f[R] {
    \f[B]const\f[R] clipboardItems = \f[B]await\f[R] navigator.clipboard.read();

    \f[B]for\f[R] (\f[B]const\f[R] clipboardItem \f[B]of\f[R] clipboardItems) {
      \f[B]for\f[R] (\f[B]const\f[R] type \f[B]of\f[R] clipboardItem.types) {
        \f[B]const\f[R] blob = \f[B]await\f[R] clipboardItem.getType(type);
        \f[I]// we can now use blob here\f[R]
      }
    }
  } \f[B]catch\f[R] (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SH SEE ALSO
.IP \(bu 2
Clipboard API
.IP \(bu 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
