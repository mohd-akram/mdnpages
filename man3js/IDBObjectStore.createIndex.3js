.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "IDBObjectStore.createIndex" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore.createIndex \- IDBObjectStore: createIndex() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createIndex()\f[B]\f[R] method of the
\f[CR]IDBObjectStore\f[R] interface creates and returns a new
\f[CR]IDBIndex\f[R] object in the connected database.
It creates a new field/column defining a new data point for each
database record to contain.
.PP
Bear in mind that IndexedDB indexes can contain \f[I]any\f[R] JavaScript
data type; IndexedDB uses the structured clone algorithm to serialize
stored objects, which allows for storage of simple and complex objects.
.PP
Note that this method must be called only from a
\f[CR]VersionChange\f[R] transaction mode callback.
.SH SYNTAX
.IP
.EX
createIndex(indexName, keyPath)
createIndex(indexName, keyPath, options)
.EE
.SS Parameters
.TP
\f[B]indexName\f[R]
The name of the index to create.
Note that it is possible to create an index with an empty name.
.TP
\f[B]keyPath\f[R]
The key path for the index to use.
Note that it is possible to create an index with an empty
\f[CR]keyPath\f[R], and also to pass in a sequence (array) as a
\f[CR]keyPath\f[R].
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object which can include the following properties:
.RS
.TP
\f[B]unique\f[R]
If \f[CR]true\f[R], the index will not allow duplicate values for a
single key.
Defaults to \f[CR]false\f[R].
.TP
\f[B]multiEntry\f[R]
If \f[CR]true\f[R], the index will add an entry in the index for each
array element when the \f[CR]keyPath\f[R] resolves to an array.
If \f[CR]false\f[R], it will add one single entry containing the array.
Defaults to \f[CR]false\f[R].
.TP
\f[B]locale\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Allows you to specify a locale for the index.
Any sorting operations performed on the data via key ranges will then
obey sorting rules of that locale.
You can specify its value in one of three ways:
.RS
.IP \[bu] 2
\f[CR]string\f[R]: A string containing a specific locale code,
e.g.\ \f[CR]en\-US\f[R], or \f[CR]pl\f[R].
.IP \[bu] 2
\f[CR]auto\f[R]: The platform default locale will be used (may be
changed by user agent settings).
.IP \[bu] 2
\f[CR]null\f[R] or \f[CR]undefined\f[R]: If no locale is specified,
normal JavaScript sorting will be used \[em] not locale\-aware.
.RE
.RE
.SS Return value
An \f[CR]IDBIndex\f[R] object: the newly created index.
.SS Exceptions
This method may raise a \f[CR]DOMException\f[R] of one of the following
types:
.TP
\f[B]ConstraintError\f[R] \f[B]DOMException\f[R]
Thrown if an index with the same name already exists in the database.
Index names are case\-sensitive.
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Thrown if the provided key path is a sequence, and \f[CR]multiEntry\f[R]
is set to \f[CR]true\f[R] in the \f[CR]objectParameters\f[R] object.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if:
.RS
.IP \[bu] 2
The method was not called from a \f[CR]versionchange\f[R] transaction
mode callback, i.e.\ from inside a \f[CR]onupgradeneeded\f[R] handler.
.IP \[bu] 2
The object store has been deleted.
.RE
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if the provided \f[CR]keyPath\f[R] is not a valid key path.
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if the transaction this \f[CR]IDBObjectStore\f[R] belongs to is
not active (e.g.\ has been deleted or removed.)
In Firefox previous to version 41, an \f[CR]InvalidStateError\f[R] was
raised in this case as well, which was misleading; this has now been
fixed (see \c
.UR https://bugzil.la/1176165
Firefox bug 1176165
.UE \c
\&.)
.SH EXAMPLES
In the following example you can see the \f[CR]onupgradeneeded\f[R]
handler being used to update the database structure if a database with a
higher version number is loaded.
\f[CR]createIndex()\f[R] is used to create new indexes on the object
store.
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[B]let\f[R] db;

\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

\f[I]// Two event handlers for opening the database.\f[R]
DBOpenRequest.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Error loading database.\[dq];
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db variable.\f[R]
  \f[I]// This is used a lot below.\f[R]
  db = request.result;

  \f[I]// Run the displayData() function to populate the task list with\f[R]
  \f[I]// all the to\-do list data already in the IDB\f[R]
  displayData();
};

\f[I]// This handler fires when a new database is created and indicates\f[R]
\f[I]// either that one has not been created before, or a new version\f[R]
\f[I]// was submitted with window.indexedDB.open(). (See above.)\f[R]
\f[I]// It is only implemented in recent browsers.\f[R]
DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Error loading database.\[dq];
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]

  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]notified\[dq], \[dq]notified\[dq], { unique: \f[B]false\f[R] });
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
