.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MediaSourceHandle" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaSourceHandle \- MediaSourceHandle
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]MediaSourceHandle\f[B]\f[R] interface of the Media Source
Extensions API is a proxy for a \f[CR]MediaSource\f[R] that can be
transferred from a dedicated worker back to the main thread and attached
to a media element via its \f[CR]HTMLMediaElement.srcObject\f[R]
property.
\f[CR]MediaSource\f[R] objects are not transferable because they are
event targets, hence the need for \f[CR]MediaSourceHandle\f[R]s.
.PP
It can be accessed via the \f[CR]MediaSource.handle\f[R] property.
.PP
Each \f[CR]MediaSource\f[R] object created inside a dedicated worker has
its own distinct \f[CR]MediaSourceHandle\f[R].
The \f[CR]MediaSource.handle\f[R] getter will always return the
\f[CR]MediaSourceHandle\f[R] instance specific to the associated
dedicated worker \f[CR]MediaSource\f[R] instance.
If the handle has already been transferred to the main thread using
\f[CR]postMessage()\f[R], the handle instance in the worker is
technically detached and can\[cq]t be transferred again.
.SH INSTANCE PROPERTIES
None.
.SH INSTANCE METHODS
None.
.SH EXAMPLES
The \f[CR]handle\f[R] property can be accessed inside a dedicated worker
and the resulting \f[CR]MediaSourceHandle\f[R] object is then
transferred over to the thread that created the worker (in this case the
main thread) via a \f[CR]postMessage()\f[R] call:
.IP
.EX
\f[I]// Inside dedicated worker\f[R]
\f[B]let\f[R] mediaSource = \f[B]new\f[R] MediaSource();
\f[B]let\f[R] handle = mediaSource.handle;
\f[I]// Transfer the handle to the context that created the worker\f[R]
postMessage({ arg: handle }, [handle]);

mediaSource.addEventListener(\[dq]sourceopen\[dq], () \f[B]=>\f[R] {
  \f[I]// Await sourceopen on MediaSource before creating SourceBuffers\f[R]
  \f[I]// and populating them with fetched media \[em] MediaSource won\[aq]t\f[R]
  \f[I]// accept creation of SourceBuffers until it is attached to the\f[R]
  \f[I]// HTMLMediaElement and its readyState is \[dq]open\[dq]\f[R]
});
.EE
.PP
Over in the main thread, we receive the handle via a \f[CR]message\f[R]
event handler, attach it to a \f[CR]<video>\f[R] via its
\f[CR]HTMLMediaElement.srcObject\f[R] property, and \f[CR]play\f[R] the
video:
.IP
.EX
worker.addEventListener(\[dq]message\[dq], (msg) \f[B]=>\f[R] {
  \f[B]let\f[R] mediaSourceHandle = msg.data.arg;
  video.srcObject = mediaSourceHandle;
  video.play();
});
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]MediaSourceHandle\f[R]s cannot be successfully
transferred into or via a shared worker or service worker.
.RE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://wolenetz.github.io/mse-in-workers-demo/mse-in-workers-demo.html
MSE\-in\-Workers Demo by Matt Wolenetz
.UE \c
.IP \[bu] 2
Media Source Extensions API
.IP \[bu] 2
\f[CR]MediaSource\f[R]
.IP \[bu] 2
\f[CR]SourceBuffer\f[R]
