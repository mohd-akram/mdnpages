.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WORKERGLOBALSCOPE.BTOA" "3JS" "February 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WorkerGlobalScope.btoa \- WorkerGlobalScope: btoa() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Web Workers.
.PP
The \f[B]\f[CB]btoa()\f[B]\f[R] method of the
\f[CR]WorkerGlobalScope\f[R] interface creates a Base64\-encoded ASCII
string from a \f[I]binary string\f[R] (i.e., a string in which each
character in the string is treated as a byte of binary data).
.PP
You can use this method to encode data which may otherwise cause
communication problems, transmit it, then use the
\f[CR]WorkerGlobalScope.atob()\f[R] method to decode the data again.
For example, you can encode control characters such as ASCII values 0
through 31.
.SH SYNTAX
.IP
.EX
btoa(stringToEncode)
.EE
.SS Parameters
.TP
\f[B]stringToEncode\f[R]
The \f[I]binary string\f[R] to encode.
.SS Return value
An ASCII string containing the Base64 representation of
\f[CR]stringToEncode\f[R].
.SS Exceptions
.TP
\f[B]InvalidCharacterError\f[R] \f[B]DOMException\f[R]
The string contained a character that did not fit in a single byte.
See \(lqUnicode strings\(rq below for more detail.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] encodedData = self.btoa(\(dqHello, world\(dq); \f[I]// encode a string\f[R]
\f[B]const\f[R] decodedData = self.atob(encodedData); \f[I]// decode the string\f[R]
.EE
.SH UNICODE STRINGS
Base64, by design, expects binary data as its input.
In terms of JavaScript strings, this means strings in which the code
point of each character occupies only one byte.
So if you pass a string into \f[CR]btoa()\f[R] containing characters
that occupy more than one byte, you will get an error, because this is
not considered binary data.
.PP
For more information and workarounds see \f[CR]Window.btoa()\f[R].
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#base64-utility-methods
A polyfill of \f[CR]btoa\f[R]
.UE \c
\ is available in \c
.UR https://github.com/zloirock/core-js
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]data\f[R] URLs
.IP \(bu 2
\f[CR]WorkerGlobalScope.atob()\f[R]
.IP \(bu 2
\f[CR]Window.btoa()\f[R]: the same method, but in window scopes.
.IP \(bu 2
\f[CR]Uint8Array.prototype.toBase64()\f[R]
.IP \(bu 2
Base64
