.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Iterator.from" "JS" "September 11, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Iterator.from \- Iterator.from()
.SH SYNOPSIS
The \f[B]\f[CB]Iterator.from()\f[B]\f[R] static method creates a new
\f[CR]Iterator\f[R] object from an iterator or iterable object.
.SH SYNTAX
.IP
.EX
from(object)
.EE
.SS Parameters
.TP
\f[B]object\f[R]
An object that implements the iterable protocol or the iterator
protocol.
.SS Return value
If \f[CR]object\f[R] is an iterable, its \f[CR][Symbol.iterator]()\f[R]
method is called to obtain the iterator.
Otherwise, \f[CR]object\f[R] is assumed to be an iterator.
If the iterator is already \f[CR]instanceof\f[R] \f[CR]Iterator\f[R]
(which means it has \f[CR]Iterator.prototype\f[R] in its prototype
chain), it is returned directly.
Otherwise, a new \f[CR]Iterator\f[R] object is created that wraps the
original iterator.
.SH DESCRIPTION
This method exists to convert custom iterators, probably exported by
libraries, to proper iterators.
All iterator objects returned by \f[CR]Iterator.from()\f[R] inherit from
a common prototype object, which has the following methods:
.TP
\f[B]next()\f[R]
Calls the underlying iterator\[cq]s \f[CR]next()\f[R] method and returns
the result.
.TP
\f[B]return()\f[R]
Calls the underlying iterator\[cq]s \f[CR]return()\f[R] method and
returns the result, or returns
\f[CR]{ value: undefined, done: true }\f[R] if the underlying iterator
doesn\[cq]t have a \f[CR]return()\f[R] method.
.SH EXAMPLES
.SS Converting an iterable to a proper iterator
Because \f[CR]obj\f[R] is already an iterable that returns a proper
iterator when its \f[CR][Symbol.iterator]()\f[R] method is called,
\f[CR]Iterator.from(obj)\f[R] returns the same iterator.
.IP
.EX
\f[B]const\f[R] iterator = (\f[B]function\f[R]* () {
  \f[B]yield\f[R] 1;
  \f[B]yield\f[R] 2;
  \f[B]yield\f[R] 3;
})();

\f[B]const\f[R] obj = {
  [Symbol.iterator]() {
    \f[B]return\f[R] iterator;
  },
};

\f[B]const\f[R] iterator2 = Iterator.from(obj);
console.log(iterator2 === iterator); \f[I]// true\f[R]
.EE
.PP
Because \f[CR]obj2\f[R] is an iterable that returns a non\-proper
iterator when its \f[CR][Symbol.iterator]()\f[R] method is called,
\f[CR]Iterator.from(obj2)\f[R] returns a new iterator that wraps the
original iterator.
.IP
.EX
\f[B]const\f[R] iterator = {
  current: 0,
  next() {
    \f[B]return\f[R] { value: \f[B]this\f[R].current++, done: \f[B]false\f[R] };
  },
};

\f[B]const\f[R] obj2 = {
  [Symbol.iterator]() {
    \f[B]return\f[R] iterator;
  },
};

\f[B]const\f[R] iterator2 = Iterator.from(obj2);
console.log(iterator2 === iterator); \f[I]// false\f[R]
console.log(iterator2.next()); \f[I]// { value: 0, done: false }\f[R]
console.log(iterator.next()); \f[I]// { value: 1, done: false }\f[R]
.EE
.SS Converting an iterator to a proper iterator
Because \f[CR]obj\f[R] is already a proper iterator,
\f[CR]Iterator.from(obj)\f[R] returns itself.
.IP
.EX
\f[B]const\f[R] obj = (\f[B]function\f[R]* () {
  \f[B]yield\f[R] 1;
  \f[B]yield\f[R] 2;
  \f[B]yield\f[R] 3;
})();

\f[B]const\f[R] iterator = Iterator.from(obj);
console.log(iterator === obj); \f[I]// true\f[R]
.EE
.PP
Because \f[CR]obj2\f[R] is a non\-proper iterator,
\f[CR]Iterator.from(obj2)\f[R] returns a new iterator that wraps the
original iterator.
.IP
.EX
\f[B]const\f[R] obj2 = {
  current: 0,
  next() {
    \f[B]return\f[R] { value: \f[B]this\f[R].current++, done: \f[B]false\f[R] };
  },
};

\f[B]const\f[R] iterator = Iterator.from(obj2);
console.log(iterator === obj2); \f[I]// false\f[R]
console.log(iterator.next()); \f[I]// { value: 0, done: false }\f[R]
console.log(obj2.next()); \f[I]// { value: 1, done: false }\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#iterator-helpers
Polyfill of \f[CR]Iterator.from\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Iterator\f[R]
.IP \[bu] 2
\f[CR]Array.from()\f[R]
