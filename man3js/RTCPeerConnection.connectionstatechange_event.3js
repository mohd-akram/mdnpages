.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RTCPEERCONNECTION.CONNECTIONSTATECHANGE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.connectionstatechange_event \- RTCPeerConnection:
connectionstatechange event
.SH SYNOPSIS
The \f[B]\f[CB]connectionstatechange\f[B]\f[R] event is sent to the
\f[CR]onconnectionstatechange\f[R] event handler on an
\f[CR]RTCPeerConnection\f[R] object after a new track has been added to
an \f[CR]RTCRtpReceiver\f[R] which is part of the connection.
The new connection state can be found in \f[CR]connectionState\f[R], and
is one of the string values: \f[CR]new\f[R], \f[CR]connecting\f[R],
\f[CR]connected\f[R], \f[CR]disconnected\f[R], \f[CR]failed\f[R], or
\f[CR]closed\f[R].
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqconnectionstatechange\(dq, (event) => { })

onconnectionstatechange = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
For an \f[CR]RTCPeerConnection\f[R] named \f[CR]peerConnection\f[R],
this example uses \f[CR]addEventListener()\f[R] to handle changes to the
connectivity of the WebRTC session.
It calls an app\-defined function called \f[CR]setOnlineStatus()\f[R] to
update a status display.
.IP
.EX
peerConnection.addEventListener(
  \(dqconnectionstatechange\(dq,
  (event) \f[B]=>\f[R] {
    \f[B]switch\f[R] (peerConnection.connectionState) {
      \f[B]case\f[R] \(dqnew\(dq:
      \f[B]case\f[R] \(dqconnecting\(dq:
        setOnlineStatus(\(dqConnecting\&...\(dq);
        \f[B]break\f[R];
      \f[B]case\f[R] \(dqconnected\(dq:
        setOnlineStatus(\(dqOnline\(dq);
        \f[B]break\f[R];
      \f[B]case\f[R] \(dqdisconnected\(dq:
        setOnlineStatus(\(dqDisconnecting\&...\(dq);
        \f[B]break\f[R];
      \f[B]case\f[R] \(dqclosed\(dq:
        setOnlineStatus(\(dqOffline\(dq);
        \f[B]break\f[R];
      \f[B]case\f[R] \(dqfailed\(dq:
        setOnlineStatus(\(dqError\(dq);
        \f[B]break\f[R];
      \f[B]default\f[R]:
        setOnlineStatus(\(dqUnknown\(dq);
        \f[B]break\f[R];
    }
  },
  \f[B]false\f[R],
);
.EE
.PP
You can also create a handler for the \f[CR]connectionstatechange\f[R]
event using the \f[CR]RTCPeerConnection.onconnectionstatechange\f[R]
property:
.IP
.EX
peerConnection.onconnectionstatechange = (ev) \f[B]=>\f[R] {
  \f[B]switch\f[R] (peerConnection.connectionState) {
    \f[B]case\f[R] \(dqnew\(dq:
    \f[B]case\f[R] \(dqconnecting\(dq:
      setOnlineStatus(\(dqConnecting\&...\(dq);
      \f[B]break\f[R];
    \f[I]// \&...\f[R]
    \f[B]default\f[R]:
      setOnlineStatus(\(dqUnknown\(dq);
      \f[B]break\f[R];
  }
};
.EE
.SH SEE ALSO
.IP \(bu 2
WebRTC API
.IP \(bu 2
WebRTC connectivity
.IP \(bu 2
Lifetime of a WebRTC session
.IP \(bu 2
\f[CR]RTCPeerConnection.connectionState\f[R]
