.\" Automatically generated by Pandoc 3.4
.\"
.TH "PushSubscription" "JS" "November 29, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PushSubscription \- PushSubscription
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[CR]PushSubscription\f[R] interface of the Push API provides a
subscription\[cq]s URL endpoint along with the public key and secrets
that should be used for encrypting push messages to this subscription.
This information must be passed to the application server, using any
desired application\-specific method.
.PP
The interface also provides information about when the subscription will
expire, and a method to unsubscribe from the subscription.
.SH INSTANCE PROPERTIES
.TP
\f[B]PushSubscription.endpoint\f[R] \f[I](read\-only)\f[R]
A string containing the endpoint associated with the push subscription.
.TP
\f[B]PushSubscription.expirationTime\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMHighResTimeStamp\f[R] of the subscription expiration time
associated with the push subscription, if there is one, or null
otherwise.
.TP
\f[B]PushSubscription.options\f[R] \f[I](read\-only)\f[R]
An object containing the options used to create the subscription.
.TP
\f[B]PushSubscription.subscriptionId\f[R] \f[I](deprecated)\f[R] \f[I](read\-only)\f[R] \f[I](non\-standard)\f[R]
A string containing the subscription ID associated with the push
subscription.
.SH INSTANCE METHODS
.TP
\f[B]PushSubscription.getKey()\f[R]
Returns an \f[CR]ArrayBuffer\f[R] which contains the client\[cq]s public
key, which can then be sent to a server and used in encrypting push
message data.
.TP
\f[B]PushSubscription.toJSON()\f[R]
Standard serializer \[em] returns a JSON representation of the
subscription properties.
.TP
\f[B]PushSubscription.unsubscribe()\f[R]
Starts the asynchronous process of unsubscribing from the push service,
returning a \f[CR]Promise\f[R] that resolves to a boolean value when the
current subscription is successfully unregistered.
.SH DESCRIPTION
Each browser uses a particular push service.
A service worker can use \f[CR]PushManager.subscribe()\f[R] to subscribe
to the supported service, and use the returned
\f[CR]PushSubscription\f[R] to discover the endpoint where push messages
should be sent.
.PP
The \f[CR]PushSubscription\f[R] is also used to get the public key and
secret that the application server must use to encrypt the messages that
it sends to the push service.
Note that the private keys used to decrypt push messages are not shared
by the browser, and are used to decrypt messages before they are passed
to the service worker.
This ensures that push messages remain private as they pass through the
push server infrastructure.
.PP
The service worker doesn\[cq]t need to know anything about the endpoints
or encryption, other than to pass the relevant information onto the
application server.
Any mechanism may be used to share the information with the application
server.
.SH EXAMPLE
.SS Sending coding information to the server
The \f[CR]p256dh\f[R] public key and \f[CR]auth\f[R] secret used for
encrypting the message are provided to the service worker via its push
subscription, using the \f[CR]PushSubscription.getKey()\f[R] method,
along with the target endpoint for sending push messages in
\f[CR]PushSubscription.endpoint\f[R].
The coding that should be used for encryption is provided by the
\f[CR]PushManager.supportedContentEncodings\f[R] static property.
.PP
This example shows how you might put the needed information from
\f[CR]PushSubscription\f[R] and \f[CR]supportedContentEncodings\f[R]
into a JSON object, serialize it using \f[CR]JSON.stringify()\f[R], and
post the result to the application server.
.IP
.EX
\f[I]// Get a PushSubscription object\f[R]
\f[B]const\f[R] pushSubscription = \f[B]await\f[R] serviceWorkerRegistration.pushManager.subscribe();

\f[I]// Create an object containing the information needed by the app server\f[R]
\f[B]const\f[R] subscriptionObject = {
  endpoint: pushSubscription.endpoint,
  keys: {
    p256dh: pushSubscription.getKeys(\[aq]p256dh\[aq]),
    auth: pushSubscription.getKeys(\[aq]auth\[aq]),
  },
  encoding: PushManager.supportedContentEncodings,
  \f[I]/* other app\-specific data, such as user identity */\f[R]
};

\f[I]// Stringify the object an post to the app server\f[R]
fetch(\[ga]https://example.com/push/\[ga], {
  method: \[dq]post\[dq],
  body: JSON.stringify(pushSubscription);
});
.EE
.SS Unsubscribing from a push manager
.IP
.EX
navigator.serviceWorker.ready.then((reg) \f[B]=>\f[R] {
  reg.pushManager.getSubscription().then((subscription) \f[B]=>\f[R] {
    subscription
      .unsubscribe()
      .then((successful) \f[B]=>\f[R] {
        \f[I]// You\[aq]ve successfully unsubscribed\f[R]
      })
      .catch((e) \f[B]=>\f[R] {
        \f[I]// Unsubscribing failed\f[R]
      });
  });
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Push API
.IP \[bu] 2
Service Worker API
