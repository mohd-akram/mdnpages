.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Event.currentTarget" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Event.currentTarget \- Event: currentTarget property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]currentTarget\f[B]\f[R] read\-only property of the
\f[CR]Event\f[R] interface identifies the element to which the event
handler has been attached.
.PP
This will not always be the same as the element on which the event was
fired, because the event may have fired on a descendant of the element
with the handler, and then bubbled up to the element with the handler.
The element on which the event was fired is given by
\f[CR]Event.target\f[R].
.PP
Note that the value of \f[CR]currentTarget\f[R] is only available in a
handler for the event.
Outside an event handler it will be \f[CR]null\f[R].
This means that, for example, if you take a reference to the
\f[CR]Event\f[R] object inside an event handler and then access its
\f[CR]currentTarget\f[R] property outside the event handler, its value
will be \f[CR]null\f[R].
.SH VALUE
An \f[CR]EventTarget\f[R] representing the object to which the current
event handler is attached.
.SH EXAMPLES
.SS currentTarget versus target
This example illustrates the difference between \f[CR]currentTarget\f[R]
and \f[CR]target\f[R].
.SS HTML
The page has a \[lq]parent\[rq] \f[CR]<div>\f[R] containing a
\[lq]child\[rq] \f[CR]<div>\f[R].
.IP
.EX
<\f[B]div\f[R] id=\[dq]parent\[dq]>
  Click parent
  <\f[B]div\f[R] id=\[dq]child\[dq]>Click child</\f[B]div\f[R]>
</\f[B]div\f[R]>

<\f[B]button\f[R] id=\[dq]reset\[dq]>Reset</\f[B]button\f[R]>
<\f[B]pre\f[R] id=\[dq]output\[dq]></\f[B]pre\f[R]>
.EE
.SS JavaScript
The event handler is attached to the parent.
It logs the value of \f[CR]event.currentTarget\f[R] and
\f[CR]event.target\f[R].
.PP
We also have a \[lq]Reset\[rq] button that just reloads the example.
.IP
.EX
\f[B]const\f[R] output = document.querySelector(\[dq]#output\[dq]);
\f[B]const\f[R] parent = document.querySelector(\[dq]#parent\[dq]);
parent.addEventListener(\[dq]click\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] currentTarget = event.currentTarget.getAttribute(\[dq]id\[dq]);
  \f[B]const\f[R] target = event.target.getAttribute(\[dq]id\[dq]);
  output.textContent = \[ga]Current target: ${currentTarget}\[rs]n\[ga];
  output.textContent += \[ga]Target: ${target}\[ga];
});

\f[B]const\f[R] reset = document.querySelector(\[dq]#reset\[dq]);
reset.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] document.location.reload());
.EE
.SS Result
If you click inside the child \f[CR]<div>\f[R], then \f[CR]target\f[R]
identifies the child.
If you click inside the parent \f[CR]<div>\f[R], then \f[CR]target\f[R]
identifies the parent.
.PP
In both cases, \f[CR]currentTarget\f[R] identifies the parent, because
that\[cq]s the element that the handler is attached to.
.SH SEE ALSO
.IP \[bu] 2
Learn: Event bubbling
