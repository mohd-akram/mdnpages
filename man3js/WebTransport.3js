.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "WebTransport" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebTransport \- WebTransport
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebTransport\f[B]\f[R] interface of the WebTransport API
provides functionality to enable a user agent to connect to an HTTP/3
server, initiate reliable and unreliable transport in either or both
directions, and close the connection once it is no longer needed.
.SH CONSTRUCTOR
.TP
\f[B]WebTransport()\f[R]
Creates a new \f[CR]WebTransport\f[R] object instance.
.SH INSTANCE PROPERTIES
.TP
\f[B]closed\f[R] \f[I](read\-only)\f[R]
Returns a promise that resolves when the transport is closed.
.TP
\f[B]datagrams\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]WebTransportDatagramDuplexStream\f[R] instance that can
be used to send and receive datagrams.
.TP
\f[B]congestionControl\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a string that indicates the application preference for either
high throughput or low\-latency when sending data.
.TP
\f[B]incomingBidirectionalStreams\f[R] \f[I](read\-only)\f[R]
Represents one or more bidirectional streams opened by the server.
Returns a \f[CR]ReadableStream\f[R] of
\f[CR]WebTransportBidirectionalStream\f[R] objects.
Each one can be used to read data from the server and write data back to
it.
.TP
\f[B]incomingUnidirectionalStreams\f[R] \f[I](read\-only)\f[R]
Represents one or more unidirectional streams opened by the server.
Returns a \f[CR]ReadableStream\f[R] of
\f[CR]WebTransportReceiveStream\f[R] objects.
Each one can be used to read data from the server.
.TP
\f[B]ready\f[R] \f[I](read\-only)\f[R]
Returns a promise that resolves when the transport is ready to use.
.TP
\f[B]reliability\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a string that indicates whether the connection supports reliable
transports only, or whether it also supports unreliable transports (such
as UDP).
.SH INSTANCE METHODS
.TP
\f[B]close()\f[R]
Closes an ongoing WebTransport session.
.TP
\f[B]createBidirectionalStream()\f[R]
Asynchronously opens a bidirectional stream
(\f[CR]WebTransportBidirectionalStream\f[R]) that can be used to read
from and write to the server.
.TP
\f[B]createUnidirectionalStream()\f[R]
Asynchronously opens a unidirectional stream (\f[CR]WritableStream\f[R])
that can be used to write to the server.
.TP
\f[B]getStats()\f[R] \f[I](experimental)\f[R]
Asynchronously returns a \f[CR]Promise\f[R] that fulfills with an object
containing HTTP/3 connection statistics.
.SH EXAMPLES
The example code below shows how you\[cq]d connect to an HTTP/3 server
by passing its URL to the \f[CR]WebTransport()\f[R] constructor.
Note that the scheme needs to be HTTPS, and the port number needs to be
explicitly specified.
Once the \f[CR]WebTransport.ready\f[R] promise fulfills, you can start
using the connection.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] initTransport(url) {
  \f[I]// Initialize transport connection\f[R]
  \f[B]const\f[R] transport = \f[B]new\f[R] WebTransport(url);

  \f[I]// The connection can be used once ready fulfills\f[R]
  \f[B]await\f[R] transport.ready;
  \f[B]return\f[R] transport;
}
.EE
.PP
You can respond to the connection closing by waiting for the
\f[CR]WebTransport.closed\f[R] promise to fulfill.
Errors returned by \f[CR]WebTransport\f[R] operations are of type
\f[CR]WebTransportError\f[R], and contain additional data on top of the
standard \f[CR]DOMException\f[R] set.
.PP
The \f[CR]closeTransport()\f[R] method below shows a possible
implementation.
Within a \f[CR]try...catch\f[R] block it uses \f[CR]await\f[R] to wait
for the \f[CR]closed\f[R] promise to fulfill or reject, and then reports
whether or not the connection closed intentionally or due to error.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] closeTransport(transport) {
  \f[I]// Respond to connection closing\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] transport.closed;
    console.log(\[ga]The HTTP/3 connection to ${url} closed gracefully.\[ga]);
  } \f[B]catch\f[R] (error) {
    console.error(\[ga]The HTTP/3 connection to ${url} closed due to ${error}.\[ga]);
  }
}
.EE
.PP
We might call the asynchronous functions above in their own asynchronous
function, as shown below.
.IP
.EX
\f[I]// Use the transport\f[R]
\f[B]async\f[R] \f[B]function\f[R] useTransport(url) {
  \f[B]const\f[R] transport = \f[B]await\f[R] initTransport(url);

  \f[I]// Use the transport object to send and receive data\f[R]
  \f[I]// ...\f[R]

  \f[I]// When done, close the transport\f[R]
  \f[B]await\f[R] closeTransport(transport);
}

\f[B]const\f[R] url = \[dq]https://example.com:4999/wt\[dq];
useTransport(url);
.EE
.PP
For other example code, see the individual property and method pages.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/webtransport
Using WebTransport
.UE \c
.IP \[bu] 2
WebSockets API
.IP \[bu] 2
Streams API
.IP \[bu] 2
\c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/
WebTransport over HTTP/3
.UE \c
