.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERPIPELINE.LABEL" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderPipeline.label \- GPURenderPipeline: label property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]label\f[B]\f[R] property of the
\f[CR]GPURenderPipeline\f[R] interface provides a label that can be used
to identify the object, for example in \f[CR]GPUError\f[R] messages or
console warnings.
.PP
This can be set by providing a \f[CR]label\f[R] property in the
descriptor object passed into the originating
\f[CR]GPUDevice.createRenderPipeline()\f[R] or
\f[CR]GPUDevice.createRenderPipelineAsync()\f[R] call, or you can get
and set it directly on the \f[CR]GPURenderPipeline\f[R] object.
.SH VALUE
A string.
If this has not been previously set as described above, it will be an
empty string.
.SH EXAMPLES
Setting and getting a label via \f[CR]GPURenderPipeline.label\f[R]:
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] pipelineDescriptor = {
  vertex: {
    module: shaderModule,
    entryPoint: \(dqvertex_main\(dq,
    buffers: vertexBuffers,
  },
  fragment: {
    module: shaderModule,
    entryPoint: \(dqfragment_main\(dq,
    targets: [
      {
        format: navigator.gpu.getPreferredCanvasFormat(),
      },
    ],
  },
  primitive: {
    topology: \(dqtriangle\-list\(dq,
  },
  layout: \(dqauto\(dq,
};

\f[B]const\f[R] renderPipeline = device.createRenderPipeline(pipelineDescriptor);

renderPipeline.label = \(dqmy_render_pipeline\(dq;

console.log(renderPipeline.label); \f[I]// \(dqmy_render_pipeline\(dq\f[R]
.EE
.PP
Setting a label via a \f[CR]GPUDevice.createRenderPipeline()\f[R] call,
and then getting it via \f[CR]GPURenderPipeline.label\f[R]:
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] pipelineDescriptor = {
  vertex: {
    module: shaderModule,
    entryPoint: \(dqvertex_main\(dq,
    buffers: vertexBuffers,
  },
  fragment: {
    module: shaderModule,
    entryPoint: \(dqfragment_main\(dq,
    targets: [
      {
        format: navigator.gpu.getPreferredCanvasFormat(),
      },
    ],
  },
  primitive: {
    topology: \(dqtriangle\-list\(dq,
  },
  layout: \(dqauto\(dq,
  label: \(dqmy_render_pipeline\(dq,
};

\f[B]const\f[R] renderPipeline = device.createRenderPipeline(pipelineDescriptor);

console.log(renderPipeline.label); \f[I]// \(dqmy_render_pipeline\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
