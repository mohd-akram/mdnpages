.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Permissions.query" "JS" "January 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Permissions.query \- Permissions: query() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]query()\f[B]\f[R] method of the \f[CR]Permissions\f[R]
interface returns the state of a user permission on the global scope.
.PP
The user permission names are defined in the respective specifications
for each feature.
The permissions supported by different browser versions are listed in
the compatibility data of the \f[CR]Permissions\f[R] interface (see also
the relevant source code for \c
.UR https://searchfox.org/mozilla-central/source/dom/webidl/Permissions.webidl#10
Firefox values
.UE \c
, \c
.UR https://chromium.googlesource.com/chromium/src/+/refs/heads/main/third_party/blink/renderer/modules/permissions/permission_descriptor.idl
Chromium values
.UE \c
, and \c
.UR https://github.com/WebKit/WebKit/blob/main/Source/WebCore/Modules/permissions/PermissionName.idl
WebKit values
.UE \c
).
.PP
The APIs that are gated by each permission are listed in
Permission\-aware APIs in the Permissions API overview topic.
.SH SYNTAX
.IP
.EX
query(permissionDescriptor)
.EE
.SS Parameters
.TP
\f[B]permissionDescriptor\f[R]
An object that sets options for the \f[CR]query\f[R] operation.
The available options for this descriptor depend on the permission type.
.RS
.PP
All permissions have a name:
.TP
\f[B]name\f[R]
A string containing the name of the API whose permissions you want to
query, such as \f[CR]camera\f[R], \f[CR]bluetooth\f[R],
\f[CR]microphone\f[R], \f[CR]geolocation\f[R] (see
\f[CR]Permissions\f[R] for a more complete list).
The returned \f[CR]Promise\f[R] will reject with a \f[CR]TypeError\f[R]
if the permission name is not supported by the browser.
.PP
For the \f[CR]push\f[R] permissions you can also specify:
.TP
\f[B]userVisibleOnly\f[R] \f[I](optional)\f[R]
(Push only, not supported in Firefox \[em] see the Browser Support
section below) Indicates whether you want to show a notification for
every message or be able to send silent push notifications.
The default is \f[CR]false\f[R].
.PP
For the \f[CR]midi\f[R] permission you can also specify:
.TP
\f[B]sysex\f[R] \f[I](optional)\f[R]
Indicates whether you need and/or receive system exclusive messages.
The default is \f[CR]false\f[R].
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves to a \f[CR]PermissionStatus\f[R]
object.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]query()\f[R] method is invoked in the browsing context
and its associated document is not fully active.
.TP
\f[B]TypeError\f[R]
Thrown if retrieving the \f[CR]PermissionDescriptor\f[R] information
failed in some way, or the permission doesn\[cq]t exist or is
unsupported by the user agent.
.SH EXAMPLES
.SS Display news based on geolocation permission
This example shows how you might display news related to the current
location if the \f[CR]geolocation\f[R] permission is granted, and
otherwise prompt the user to enable granting access to the location.
.IP
.EX
navigator.permissions.query({ name: \[dq]geolocation\[dq] }).then((result) \f[B]=>\f[R] {
  \f[B]if\f[R] (result.state === \[dq]granted\[dq]) {
    showLocalNewsWithGeolocation();
  } \f[B]else\f[R] \f[B]if\f[R] (result.state === \[dq]prompt\[dq]) {
    showButtonToEnableLocalNews();
  }
  \f[I]// Don\[aq]t do anything if the permission was denied.\f[R]
});
.EE
.SS Test support for various permissions
This example shows the result of querying each of the permissions.
.PP
The code uses \f[CR]navigator.permissions.query()\f[R] to query each
permission, logging either the permission status or the fact that the
permission is not supported on the browser.
Note that the \f[CR]query()\f[R] is called inside a
\f[CR]try...catch\f[R] block because the associated \f[CR]Promise\f[R]
will reject if the permission is not supported.
.IP
.EX
\f[I]// Array of permissions\f[R]
\f[B]const\f[R] permissions = [
  \[dq]accelerometer\[dq],
  \[dq]accessibility\-events\[dq],
  \[dq]ambient\-light\-sensor\[dq],
  \[dq]background\-sync\[dq],
  \[dq]camera\[dq],
  \[dq]clipboard\-read\[dq],
  \[dq]clipboard\-write\[dq],
  \[dq]geolocation\[dq],
  \[dq]gyroscope\[dq],
  \[dq]local\-fonts\[dq],
  \[dq]magnetometer\[dq],
  \[dq]microphone\[dq],
  \[dq]midi\[dq],
  \[dq]notifications\[dq],
  \[dq]payment\-handler\[dq],
  \[dq]persistent\-storage\[dq],
  \[dq]push\[dq],
  \[dq]screen\-wake\-lock\[dq],
  \[dq]storage\-access\[dq],
  \[dq]top\-level\-storage\-access\[dq],
  \[dq]window\-management\[dq],
];

processPermissions();

\f[I]// Iterate through the permissions and log the result\f[R]
\f[B]async\f[R] \f[B]function\f[R] processPermissions() {
  \f[B]for\f[R] (\f[B]const\f[R] permission \f[B]of\f[R] permissions) {
    \f[B]const\f[R] result = \f[B]await\f[R] getPermission(permission);
    log(result);
  }
}

\f[I]// Query a single permission in a try...catch block and return result\f[R]
\f[B]async\f[R] \f[B]function\f[R] getPermission(permission) {
  \f[B]try\f[R] {
    \f[B]let\f[R] result;
    \f[B]if\f[R] (permission === \[dq]top\-level\-storage\-access\[dq]) {
      result = \f[B]await\f[R] navigator.permissions.query({
        name: permission,
        requestedOrigin: window.location.origin,
      });
    } \f[B]else\f[R] {
      result = \f[B]await\f[R] navigator.permissions.query({ name: permission });
    }
    \f[B]return\f[R] \[ga]${permission}: ${result.state}\[ga];
  } \f[B]catch\f[R] (error) {
    \f[B]return\f[R] \[ga]${permission} (not supported)\[ga];
  }
}
.EE
.PP
The log from running the code is shown below:
