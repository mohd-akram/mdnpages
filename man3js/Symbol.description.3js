.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SYMBOL.DESCRIPTION" "3JS" "March 5, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.description \- Symbol.prototype.description
.SH SYNOPSIS
The \f[B]\f[CB]description\f[B]\f[R] accessor property of
\f[CR]Symbol\f[R] values returns a string containing the description of
this symbol, or \f[CR]undefined\f[R] if the symbol has no description.
.IP
.EX
console.log(Symbol(\(dqdesc\(dq).description);
\f[I]// Expected output: \(dqdesc\(dq\f[R]

console.log(Symbol.iterator.description);
\f[I]// Expected output: \(dqSymbol.iterator\(dq\f[R]

console.log(Symbol.for(\(dqfoo\(dq).description);
\f[I]// Expected output: \(dqfoo\(dq\f[R]

console.log(\(ga${Symbol(\(dqfoo\(dq).description}bar\(ga);
\f[I]// Expected output: \(dqfoobar\(dq\f[R]
.EE
.SH DESCRIPTION
\f[CR]Symbol\f[R] objects can be created with an optional description
which can be used for debugging but not to access the symbol itself.
The \f[CR]Symbol.prototype.description\f[R] property can be used to read
that description.
It is different to \f[CR]Symbol.prototype.toString()\f[R] as it does not
contain the enclosing \f[CR]\(dqSymbol()\(dq\f[R] string.
See the examples.
.SH EXAMPLES
.SS Using description
.IP
.EX
Symbol(\(dqdesc\(dq).toString(); \f[I]// \(dqSymbol(desc)\(dq\f[R]
Symbol(\(dqdesc\(dq).description; \f[I]// \(dqdesc\(dq\f[R]
Symbol(\(dq\(dq).description; \f[I]// \(dq\(dq\f[R]
Symbol().description; \f[I]// undefined\f[R]

\f[I]// well\-known symbols\f[R]
Symbol.iterator.toString(); \f[I]// \(dqSymbol(Symbol.iterator)\(dq\f[R]
Symbol.iterator.description; \f[I]// \(dqSymbol.iterator\(dq\f[R]

\f[I]// global symbols\f[R]
Symbol.for(\(dqfoo\(dq).toString(); \f[I]// \(dqSymbol(foo)\(dq\f[R]
Symbol.for(\(dqfoo\(dq).description; \f[I]// \(dqfoo\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-symbol
Polyfill of \f[CR]Symbol.prototype.description\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/symbol.prototype.description
es\-shims polyfill of \f[CR]Symbol.prototype.description\f[R]
.UE \c
.IP \(bu 2
\f[CR]Symbol.prototype.toString()\f[R]
