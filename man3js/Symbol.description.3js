.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Symbol.description" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.description \- Symbol.prototype.description
.SH SYNOPSIS
The \f[B]\f[CB]description\f[B]\f[R] accessor property of
\f[CR]Symbol\f[R] values returns a string containing the description of
this symbol, or \f[CR]undefined\f[R] if the symbol has no description.
.SH DESCRIPTION
\f[CR]Symbol\f[R] objects can be created with an optional description
which can be used for debugging but not to access the symbol itself.
The \f[CR]Symbol.prototype.description\f[R] property can be used to read
that description.
It is different to \f[CR]Symbol.prototype.toString()\f[R] as it does not
contain the enclosing \f[CR]\[dq]Symbol()\[dq]\f[R] string.
See the examples.
.SH EXAMPLES
.SS Using description
.IP
.EX
Symbol(\[dq]desc\[dq]).toString(); \f[I]// \[dq]Symbol(desc)\[dq]\f[R]
Symbol(\[dq]desc\[dq]).description; \f[I]// \[dq]desc\[dq]\f[R]
Symbol(\[dq]\[dq]).description; \f[I]// \[dq]\[dq]\f[R]
Symbol().description; \f[I]// undefined\f[R]

\f[I]// well\-known symbols\f[R]
Symbol.iterator.toString(); \f[I]// \[dq]Symbol(Symbol.iterator)\[dq]\f[R]
Symbol.iterator.description; \f[I]// \[dq]Symbol.iterator\[dq]\f[R]

\f[I]// global symbols\f[R]
Symbol.for(\[dq]foo\[dq]).toString(); \f[I]// \[dq]Symbol(foo)\[dq]\f[R]
Symbol.for(\[dq]foo\[dq]).description; \f[I]// \[dq]foo\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-symbol
Polyfill of \f[CR]Symbol.prototype.description\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Symbol.prototype.toString()\f[R]
