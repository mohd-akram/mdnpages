.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "HTMLInputElement.reportValidity" "JS" "August 30, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLInputElement.reportValidity \- HTMLInputElement: reportValidity()
method
.SH SYNOPSIS
The \f[B]\f[CB]reportValidity()\f[B]\f[R] method of the
\f[CR]HTMLInputElement\f[R] interface performs the same validity
checking steps as the \f[CR]checkValidity()\f[R] method.
In addition, if the \f[CR]invalid\f[R] event is not canceled, the
browser displays the problem to the user.
.SH SYNTAX
.IP
.EX
reportValidity()
.EE
.SS Parameters
None.
.SS Return value
Returns \f[CR]true\f[R] if the element\[cq]s value has no validity
problems; otherwise, returns \f[CR]false\f[R].
.SH EXAMPLES
.SS Basic usage
.SS HTML
We include a form containing a required number field and two buttons:
one to check the form and the other to submit it.
.IP
.EX
<\f[B]form\f[R] action=\[dq]#\[dq] method=\[dq]post\[dq]>
  <\f[B]p\f[R]>
    <\f[B]label\f[R] for=\[dq]age\[dq]>Your (21 to 65) </\f[B]label\f[R]>
    <\f[B]input\f[R] type=\[dq]number\[dq] name=\[dq]age\[dq] required id=\[dq]age\[dq] min=\[dq]21\[dq] max=\[dq]65\[dq] />
  </\f[B]p\f[R]>
  <\f[B]p\f[R]>
    <\f[B]button\f[R] type=\[dq]submit\[dq]>Submit</\f[B]button\f[R]>
    <\f[B]button\f[R] type=\[dq]button\[dq] id=\[dq]report\[dq]>reportValidity()</\f[B]button\f[R]>
  </\f[B]p\f[R]>
  <\f[B]p\f[R] id=\[dq]log\[dq]></\f[B]p\f[R]>
</\f[B]form\f[R]>
.EE
.SS JavaScript
When the \[lq]reportValidity()\[rq] button is activated, we use the
\f[CR]reportValidity()\f[R] method to check if the input\[cq]s value
meets its constraints.
We log the return value.
If \f[CR]false\f[R], we also display the validation message and capture
the \f[CR]invalid\f[R] event.
.IP
.EX
\f[B]const\f[R] output = document.querySelector(\[dq]#log\[dq]);
\f[B]const\f[R] reportButton = document.querySelector(\[dq]#report\[dq]);
\f[B]const\f[R] ageInput = document.querySelector(\[dq]#age\[dq]);

ageInput.addEventListener(\[dq]invalid\[dq], () \f[B]=>\f[R] {
  console.log(\[dq]Invalid event fired.\[dq]);
});

reportButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]const\f[R] reportVal = ageInput.reportValidity();
  output.innerHTML = \[ga]\[dq]reportValidity()\[dq] returned: ${reportVal}\[ga];
  \f[B]if\f[R] (!reportVal) {
    output.innerHTML += \[ga]<br />Validation message: \[dq]${ageInput.validationMessage}\[dq]\[ga];
  }
});
.EE
.SS Results
When \f[CR]false\f[R], if the value is missing, is below 21, is above
65, or is othewise invalid, an error message appears, an invalid event
is fired, and we log that invalid event to the console.
.SS Custom error message
This example demonstrates how a custom error message can cause a
\f[CR]false\f[R] return value when the value is otherwise valid.
.SS HTML
We add a \[lq]Fix me\[rq] button to the HTML from the previous example.
.IP
.EX
<\f[B]button\f[R] type=\[dq]button\[dq] id=\[dq]fix\[dq]>Fix issues</\f[B]button\f[R]>
.EE
.SS JavaScript
We expand on the JavaScript from the basic example above, adding a
function that used the \f[CR]HTMLInputElement.setCustomValidity()\f[R]
method to provide custom error messages.
The \f[CR]validateAge()\f[R] function only sets the error message to an
empty string if the input is valid AND the \f[CR]enableValidation\f[R]
variable is \f[CR]true\f[R], with \f[CR]enableValidation\f[R] being
\f[CR]false\f[R] until the \[lq]fix issues\[rq] button has been
activated.
.IP
.EX
\f[B]const\f[R] output = document.querySelector(\[dq]#log\[dq]);
\f[B]const\f[R] reportButton = document.querySelector(\[dq]#report\[dq]);
\f[B]const\f[R] ageInput = document.querySelector(\[dq]#age\[dq]);
\f[B]const\f[R] fixButton = document.querySelector(\[dq]#fix\[dq]);
\f[B]let\f[R] enableValidation = \f[B]false\f[R];

fixButton.addEventListener(\[dq]click\[dq], (e) \f[B]=>\f[R] {
  enableValidation = \f[B]true\f[R];
  fixButton.innerHTML = \[dq]Error fixed\[dq];
  fixButton.disabled = \f[B]true\f[R];
});

reportButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  validateAge();
  \f[B]const\f[R] reportVal = ageInput.reportValidity();
  output.innerHTML = \[ga]\[dq]reportValidity()\[dq] returned: ${reportVal}\[ga];
  \f[B]if\f[R] (!reportVal) {
    output.innerHTML += \[ga]<br />Validation message: \[dq]${ageInput.validationMessage}\[dq]\[ga];
  }
});

\f[B]const\f[R] validateAge = () \f[B]=>\f[R] {
  \f[B]const\f[R] validityState_object = ageInput.validity;
  \f[B]if\f[R] (validityState_object.valueMissing) {
    ageInput.setCustomValidity(\[dq]Please set an age (required)\[dq]);
  } \f[B]else\f[R] \f[B]if\f[R] (ageInput.rangeUnderflow) {
    ageInput.setCustomValidity(\[dq]Your value is too low\[dq]);
  } \f[B]else\f[R] \f[B]if\f[R] (ageInput.rangeOverflow) {
    ageInput.setCustomValidity(\[dq]Your value is too high\[dq]);
  } \f[B]else\f[R] \f[B]if\f[R] (enableValidation) {
    \f[I]// sets to empty string if valid AND enableValidation has been set to true\f[R]
    ageInput.setCustomValidity(\[dq]\[dq]);
  }
};
.EE
.SS Results
If you activate the \[lq]reportValidity()\[rq] button before entering an
age, the \f[CR]reportValidity()\f[R] method returns \f[CR]false\f[R]
because it does not meet \f[CR]required\f[R] constraint validation.
This method fires an \f[CR]invalid\f[R] event on the input and reports
the problem to the user, displaying the custom error message \[lq]Please
set an age (required)\[rq].
As long as a custom error message is set, activating the
\[lq]reportValidity()\[rq] button will continue to display an error even
if you select a valid age.
To enable validation, we have to set the custom error message to the
empty string, which is done by clicking the \[lq]Fix issues\[rq] button.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]HTMLInputElement.checkValidity()\f[R]
.IP \[bu] 2
\f[CR]<input>\f[R]
.IP \[bu] 2
\f[CR]<form>\f[R]
.IP \[bu] 2
Learn: Client\-side form validation
.IP \[bu] 2
Guide: Constraint validation
.IP \[bu] 2
CSS \f[CR]:valid\f[R] and \f[CR]:invalid\f[R] pseudo\-classes
