.\" Automatically generated by Pandoc 3.4
.\"
.TH "Array.at" "JS" "August 9, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.at \- Array.prototype.at()
.SH SYNOPSIS
The \f[B]\f[CB]at()\f[B]\f[R] method of \f[CR]Array\f[R] instances takes
an integer value and returns the item at that index, allowing for
positive and negative integers.
Negative integers count back from the last item in the array.
.SH SYNTAX
.IP
.EX
at(index)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
Zero\-based index of the array element to be returned, converted to an
integer.
Negative index counts back from the end of the array \[em] if
\f[CR]index < 0\f[R], \f[CR]index + array.length\f[R] is accessed.
.SS Return value
The element in the array matching the given index.
Always returns \f[CR]undefined\f[R] if \f[CR]index < \-array.length\f[R]
or \f[CR]index >= array.length\f[R] without attempting to access the
corresponding property.
.SH DESCRIPTION
The \f[CR]at()\f[R] method is equivalent to the bracket notation when
\f[CR]index\f[R] is a non\-negative integer.
For example, \f[CR]array[0]\f[R] and \f[CR]array.at(0)\f[R] both return
the first item.
However, when counting elements from the end of the array, you cannot
use \f[CR]array[\-1]\f[R] like you may in Python or R, because all
values inside the square brackets are treated literally as string
properties, so you will end up reading \f[CR]array[\[dq]\-1\[dq]]\f[R],
which is just a normal string property instead of an array index.
.PP
The usual practice is to access \f[CR]length\f[R] and calculate the
index from that \[em] for example, \f[CR]array[array.length \- 1]\f[R].
The \f[CR]at()\f[R] method allows relative indexing, so this can be
shortened to \f[CR]array.at(\-1)\f[R].
.PP
By combining \f[CR]at()\f[R] with \f[CR]with()\f[R], you can both read
and write (respectively) an array using negative indices.
.PP
The \f[CR]at()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Return the last value of an array
The following example provides a function which returns the last element
found in a specified array.
.IP
.EX
\f[I]// Our array with items\f[R]
\f[B]const\f[R] cart = [\[dq]apple\[dq], \[dq]banana\[dq], \[dq]pear\[dq]];

\f[I]// A function which returns the last item of a given array\f[R]
\f[B]function\f[R] returnLast(arr) {
  \f[B]return\f[R] arr.at(\-1);
}

\f[I]// Get the last item of our array \[aq]cart\[aq]\f[R]
\f[B]const\f[R] item1 = returnLast(cart);
console.log(item1); \f[I]// \[aq]pear\[aq]\f[R]

\f[I]// Add an item to our \[aq]cart\[aq] array\f[R]
cart.push(\[dq]orange\[dq]);
\f[B]const\f[R] item2 = returnLast(cart);
console.log(item2); \f[I]// \[aq]orange\[aq]\f[R]
.EE
.SS Comparing methods
This example compares different ways to select the penultimate (last but
one) item of an \f[CR]Array\f[R].
While all the methods shown below are valid, this example highlights the
succinctness and readability of the \f[CR]at()\f[R] method.
.IP
.EX
\f[I]// Our array with items\f[R]
\f[B]const\f[R] colors = [\[dq]red\[dq], \[dq]green\[dq], \[dq]blue\[dq]];

\f[I]// Using length property\f[R]
\f[B]const\f[R] lengthWay = colors[colors.length \- 2];
console.log(lengthWay); \f[I]// \[aq]green\[aq]\f[R]

\f[I]// Using slice() method. Note an array is returned\f[R]
\f[B]const\f[R] sliceWay = colors.slice(\-2, \-1);
console.log(sliceWay[0]); \f[I]// \[aq]green\[aq]\f[R]

\f[I]// Using at() method\f[R]
\f[B]const\f[R] atWay = colors.at(\-2);
console.log(atWay); \f[I]// \[aq]green\[aq]\f[R]
.EE
.SS Calling at() on non\-array objects
The \f[CR]at()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and calculates the index to access.
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 2,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  2: \[dq]c\[dq], \f[I]// ignored by at() since length is 2\f[R]
};
console.log(Array.prototype.at.call(arrayLike, 0)); \f[I]// \[dq]a\[dq]\f[R]
console.log(Array.prototype.at.call(arrayLike, 2)); \f[I]// undefined\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#relative-indexing-method
Polyfill of \f[CR]Array.prototype.at\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.with()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.at()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.at()\f[R]
