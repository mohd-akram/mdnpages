.\" Automatically generated by Pandoc 3.4
.\"
.TH "XRInputSourceEvent" "JS" "July 18, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRInputSourceEvent \- XRInputSourceEvent
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The WebXR Device API\[cq]s \f[B]\f[CB]XRInputSourceEvent\f[B]\f[R]
interface describes an event which has occurred on a WebXR user input
device such as a hand controller, gaze tracking system, or motion
tracking system.
More specifically, they represent a change in the state of an
\f[CR]XRInputSource\f[R].
.PP
To learn more about handling inputs in a WebXR project, see the article
Inputs and input sources.
.SH CONSTRUCTOR
.TP
\f[B]XRInputSourceEvent()\f[R]
Creates and returns a new \f[CR]XRInputSourceEvent\f[R] object whose
properties match those provided in the \f[CR]eventInitDict\f[R]
dictionary provided.
.SH INSTANCE PROPERTIES
.TP
\f[B]frame\f[R] \f[I](read\-only)\f[R]
An \f[CR]XRFrame\f[R] object providing the needed information about the
event frame during which the event occurred.
This frame may have been rendered in the past rather than being a
current frame.
Because this is an \f[I]event\f[R] frame, not an \f[I]animation\f[R]
frame, you cannot call the \f[CR]XRFrame\f[R] method
\f[CR]getViewerPose()\f[R] on it; instead, use \f[CR]getPose()\f[R].
.TP
\f[B]inputSource\f[R] \f[I](read\-only)\f[R]
An \f[CR]XRInputSource\f[R] object indicating which input source
generated the input event.
.SH INSTANCE METHODS
\f[I]The \f[CI]XRInputSourceEvent\f[I] interface doesn\[cq]t define any
methods; however, several methods are inherited from the parent
interface, \f[CI]Event\f[I].\f[R]
.SH EVENT TYPES
.TP
\f[B]select\f[R]
Sent to an \f[CR]XRSession\f[R] when the sending input source has fully
completed a primary action.
.TP
\f[B]selectend\f[R]
Sent to an \f[CR]XRSession\f[R] when an ongoing primary action ends, or
when an input source with an ongoing primary action has been
disconnected from the system.
.TP
\f[B]selectstart\f[R]
Sent to an \f[CR]XRSession\f[R] when an input source begins its primary
action, indicating that the user has begun a command\-like input, such
as pressing a trigger or button, issuing a spoken command, tapping on a
touchpad, or the like.
.TP
\f[B]squeeze\f[R]
Sent to an \f[CR]XRSession\f[R] when the sending input source has fully
completed a primary squeeze action.
.TP
\f[B]squeezeend\f[R]
Sent to an \f[CR]XRSession\f[R] when an ongoing primary squeeze action
ends or when an input source with an ongoing primary squeeze action is
disconnected.
.TP
\f[B]squeezestart\f[R]
Sent to an \f[CR]XRSession\f[R] when an input source begins its primary
squeeze action, indicating that the user has begun to grab, squeeze, or
grip the controller.
.SH EXAMPLES
The code below sets up handlers for primary action events in order to
determine when the user clicks on (shoots at/pokes at/whatever) objects
in the scene.
.IP
.EX
xrSession.addEventListener(\[dq]select\[dq], (event) \f[B]=>\f[R] {
  \f[B]let\f[R] targetRayPose = event.frame.getPose(
    event.inputSource.targetRaySpace,
    myRefSpace,
  );

  \f[B]if\f[R] (targetRayPose) {
    \f[B]let\f[R] hit = myHitTest(targetRayPose.transform);
    \f[B]if\f[R] (hit) {
      \f[I]/* handle the hit */\f[R]
    }
  }
});
.EE
