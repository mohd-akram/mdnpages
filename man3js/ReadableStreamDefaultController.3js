.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ReadableStreamDefaultController" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStreamDefaultController \- ReadableStreamDefaultController
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]ReadableStreamDefaultController\f[B]\f[R] interface of
the Streams API represents a controller allowing control of a
\f[CR]ReadableStream\f[R]\[cq]s state and internal queue.
Default controllers are for streams that are not byte streams.
.SH CONSTRUCTOR
None.
\f[CR]ReadableStreamDefaultController\f[R] instances are created
automatically during \f[CR]ReadableStream\f[R] construction.
.SH INSTANCE PROPERTIES
.TP
\f[B]ReadableStreamDefaultController.desiredSize\f[R] \f[I](read\-only)\f[R]
Returns the desired size required to fill the stream\[cq]s internal
queue.
.SH INSTANCE METHODS
.TP
\f[B]ReadableStreamDefaultController.close()\f[R]
Closes the associated stream.
.TP
\f[B]ReadableStreamDefaultController.enqueue()\f[R]
Enqueues a given chunk in the associated stream.
.TP
\f[B]ReadableStreamDefaultController.error()\f[R]
Causes any future interactions with the associated stream to error.
.SH EXAMPLES
In the following simple example, a custom \f[CR]ReadableStream\f[R] is
created using a constructor (see our \c
.UR https://mdn.github.io/dom-examples/streams/simple-random-stream/
Simple random stream example
.UE \c
\ for the full code).
The \f[CR]start()\f[R] function generates a random string of text every
second and enqueues it into the stream.
A \f[CR]cancel()\f[R] function is also provided to stop the generation
if \f[CR]ReadableStream.cancel()\f[R] is called for any reason.
.PP
Note that a \f[CR]ReadableStreamDefaultController\f[R] object is
provided as the parameter of the \f[CR]start()\f[R] and
\f[CR]pull()\f[R] functions.
.PP
When a button is pressed, the generation is stopped, the stream is
closed using \f[CR]ReadableStreamDefaultController.close()\f[R], and
another function is run, which reads the data back out of the stream.
.IP
.EX
\f[B]let\f[R] interval;
\f[B]const\f[R] stream = \f[B]new\f[R] ReadableStream({
  start(controller) {
    interval = setInterval(() \f[B]=>\f[R] {
      \f[B]let\f[R] string = randomChars();

      \f[I]// Add the string to the stream\f[R]
      controller.enqueue(string);

      \f[I]// show it on the screen\f[R]
      \f[B]let\f[R] listItem = document.createElement(\[dq]li\[dq]);
      listItem.textContent = string;
      list1.appendChild(listItem);
    }, 1000);

    button.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
      clearInterval(interval);
      fetchStream();
      controller.close();
    });
  },
  pull(controller) {
    \f[I]// We don\[aq]t really need a pull in this example\f[R]
  },
  cancel() {
    \f[I]// This is called if the reader cancels,\f[R]
    \f[I]// so we should stop generating strings\f[R]
    clearInterval(interval);
  },
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Streams API concepts
.IP \[bu] 2
Using readable streams
.IP \[bu] 2
\f[CR]ReadableStream\f[R]
.IP \[bu] 2
\c
.UR https://whatwg-stream-visualizer.glitch.me/
WHATWG Stream Visualizer
.UE \c
, for a basic visualization of readable, writable, and transform
streams.
.IP \[bu] 2
\c
.UR https://github.com/MattiasBuelens/web-streams-polyfill
Web\-streams\-polyfill
.UE \c
\ or \c
.UR https://github.com/stardazed/sd-streams
sd\-streams
.UE \c
\ \- polyfills
