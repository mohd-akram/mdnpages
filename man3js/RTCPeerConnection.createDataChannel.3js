.\" Automatically generated by Pandoc 3.4
.\"
.TH "RTCPeerConnection.createDataChannel" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.createDataChannel \- RTCPeerConnection:
createDataChannel() method
.SH SYNOPSIS
The \f[B]\f[CB]createDataChannel()\f[B]\f[R] method of the
\f[CR]RTCPeerConnection\f[R] interface creates a new channel linked with
the remote peer, over which any kind of data may be transmitted.
This can be useful for back\-channel content, such as images, file
transfer, text chat, game update packets, and so forth.
.PP
If the new data channel is the first one added to the connection,
renegotiation is started by delivering a \f[CR]negotiationneeded\f[R]
event.
.SH SYNTAX
.IP
.EX
createDataChannel(label)
createDataChannel(label, options)
.EE
.SS Parameters
.TP
\f[B]label\f[R]
A human\-readable name for the channel.
This string may not be longer than 65,535 bytes.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object providing configuration options for the data channel.
It can contain the following fields:
.RS
.TP
\f[B]ordered\f[R] \f[I](optional)\f[R]
Indicates whether or not messages sent on the \f[CR]RTCDataChannel\f[R]
are required to arrive at their destination in the same order in which
they were sent (\f[CR]true\f[R]), or if they\[cq]re allowed to arrive
out\-of\-order (\f[CR]false\f[R]).
\f[B]Default: \f[CB]true\f[B].\f[R]
.TP
\f[B]maxPacketLifeTime\f[R] \f[I](optional)\f[R]
The maximum number of milliseconds that attempts to transfer a message
may take in unreliable mode.
While this value is a 16\-bit unsigned number, each user agent may clamp
it to whatever maximum it deems appropriate.
\f[B]Default: \f[CB]null\f[B].\f[R]
.TP
\f[B]maxRetransmits\f[R] \f[I](optional)\f[R]
The maximum number of times the user agent should attempt to retransmit
a message which fails the first time in unreliable mode.
While this value is a 16\-bit unsigned number, each user agent may clamp
it to whatever maximum it deems appropriate.
\f[B]Default: \f[CB]null\f[B].\f[R]
.TP
\f[B]protocol\f[R] \f[I](optional)\f[R]
The name of the sub\-protocol being used on the
\f[CR]RTCDataChannel\f[R], if any; otherwise, the empty string
(\f[CR]\[dq]\[dq]\f[R]).
\f[B]Default: empty string (\f[CB]\[dq]\[dq]\f[B]).\f[R] This string may
not be longer than 65,535 \f[I]bytes\f[R].
.TP
\f[B]negotiated\f[R] \f[I](optional)\f[R]
By default (\f[CR]false\f[R]), data channels are negotiated in\-band,
where one side calls \f[CR]createDataChannel\f[R], and the other side
listens to the \f[CR]RTCDataChannelEvent\f[R] event using the
\f[CR]ondatachannel\f[R] event handler.
Alternatively (\f[CR]true\f[R]), they can be negotiated out of\-band,
where both sides call \f[CR]createDataChannel\f[R] with an agreed\-upon
ID.
\f[B]Default: \f[CB]false\f[B].\f[R]
.TP
\f[B]id\f[R] \f[I](optional)\f[R]
A 16\-bit numeric ID for the channel; permitted values are 0 to 65534.
If you don\[cq]t include this option, the user agent will select an ID
for you.
.RE
.RS
.PP
\f[B]Note:\f[R] These options represent the script\-settable subset of
the properties on the \f[CR]RTCDataChannel\f[R] interface.
.RE
.SS Return value
A new \f[CR]RTCDataChannel\f[R] object with the specified
\f[CR]label\f[R], configured using the options specified by
\f[CR]options\f[R] if that parameter is included; otherwise, the
defaults listed above are established.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]RTCPeerConnection\f[R] is closed.
.TP
\f[B]TypeError\f[R]
Thrown in the following situations:
.RS
.IP \[bu] 2
The label and/or protocol string is too long; these cannot be longer
than 65,535 bytes (bytes, rather than characters).
.IP \[bu] 2
The \f[CR]id\f[R] is 65535.
While this is a valid unsigned 16\-bit value, it\[cq]s not a permitted
value for \f[CR]id\f[R].
.RE
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if values were specified for both the
\f[CR]maxPacketLifeTime\f[R] and \f[CR]maxRetransmits\f[R] options.
You may specify a non\-\f[CR]null\f[R] value for only one of these.
.TP
\f[B]ResourceInUse\f[R] \f[B]DOMException\f[R]
Thrown if an \f[CR]id\f[R] was specified, but another
\f[CR]RTCDataChannel\f[R] is already using the same value.
.TP
\f[B]OperationError\f[R] \f[B]DOMException\f[R]
Thrown if either the specified \f[CR]id\f[R] is already in use, or if no
\f[CR]id\f[R] was specified, the WebRTC layer was unable to
automatically generate an ID because all IDs are in use.
.SH EXAMPLES
This example shows how to create a data channel and set up handlers for
the \f[CR]open\f[R] and \f[CR]message\f[R] events to send and receive
messages on it (For brevity, the example assumes onnegotiationneeded is
set up).
.IP
.EX
\f[I]// Offerer side\f[R]

\f[B]const\f[R] pc = \f[B]new\f[R] RTCPeerConnection(options);
\f[B]const\f[R] channel = pc.createDataChannel(\[dq]chat\[dq]);
channel.onopen = (event) \f[B]=>\f[R] {
  channel.send(\[dq]Hi you!\[dq]);
};
channel.onmessage = (event) \f[B]=>\f[R] {
  console.log(event.data);
};
.EE
.IP
.EX
\f[I]// Answerer side\f[R]

\f[B]const\f[R] pc = \f[B]new\f[R] RTCPeerConnection(options);
pc.ondatachannel = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] channel = event.channel;
  channel.onopen = (event) \f[B]=>\f[R] {
    channel.send(\[dq]Hi back!\[dq]);
  };
  channel.onmessage = (event) \f[B]=>\f[R] {
    console.log(event.data);
  };
};
.EE
.PP
Alternatively, more symmetrical out\-of\-band negotiation can be used,
using an agreed\-upon id (0 here):
.IP
.EX
\f[I]// Both sides\f[R]

\f[B]const\f[R] pc = \f[B]new\f[R] RTCPeerConnection(options);
\f[B]const\f[R] channel = pc.createDataChannel(\[dq]chat\[dq], { negotiated: \f[B]true\f[R], id: 0 });
channel.onopen = (event) \f[B]=>\f[R] {
  channel.send(\[dq]Hi!\[dq]);
};
channel.onmessage = (event) \f[B]=>\f[R] {
  console.log(event.data);
};
.EE
.PP
For a more thorough example showing how the connection and channel are
established, see A simple RTCDataChannel sample.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]RTCDataChannel\f[R]
.IP \[bu] 2
A simple RTCDataChannel sample
.IP \[bu] 2
\f[CR]RTCPeerConnection\f[R]
