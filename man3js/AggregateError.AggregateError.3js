.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "AGGREGATEERROR.AGGREGATEERROR" "3JS" "March 5, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AggregateError.AggregateError \- AggregateError() constructor
.SH SYNOPSIS
The \f[B]\f[CB]AggregateError()\f[B]\f[R] constructor creates
\f[CR]AggregateError\f[R] objects.
.SH SYNTAX
.IP
.EX
new AggregateError(errors)
new AggregateError(errors, message)
new AggregateError(errors, message, options)

AggregateError(errors)
AggregateError(errors, message)
AggregateError(errors, message, options)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]AggregateError()\f[R] can be called with or
without \f[CR]new\f[R].
Both create a new \f[CR]AggregateError\f[R] instance.
.RE
.SS Parameters
.TP
\f[B]errors\f[R]
An iterable of errors, may not actually be \f[CR]Error\f[R] instances.
.TP
\f[B]message\f[R] \f[I](optional)\f[R]
An optional human\-readable description of the aggregate error.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that has the following properties:
.RS
.TP
\f[B]cause\f[R] \f[I](optional)\f[R]
A property indicating the specific cause of the error.
When catching and re\-throwing an error with a more\-specific or useful
error message, this property can be used to pass the original error.
.RE
.SH EXAMPLES
.SS Creating an AggregateError
.IP
.EX
\f[B]try\f[R] {
  \f[B]throw\f[R] \f[B]new\f[R] AggregateError([\f[B]new\f[R] Error(\(dqsome error\(dq)], \(dqHello\(dq);
} \f[B]catch\f[R] (e) {
  console.log(e \f[B]instanceof\f[R] AggregateError); \f[I]// true\f[R]
  console.log(e.message); \f[I]// \(dqHello\(dq\f[R]
  console.log(e.name); \f[I]// \(dqAggregateError\(dq\f[R]
  console.log(e.errors); \f[I]// [ Error: \(dqsome error\(dq ]\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-promise
Polyfill of \f[CR]AggregateError\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/es-aggregate-error
es\-shims polyfill of \f[CR]AggregateError\f[R]
.UE \c
.IP \(bu 2
\f[CR]Promise.any\f[R]
