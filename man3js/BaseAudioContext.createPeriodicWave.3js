.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "BaseAudioContext.createPeriodicWave" "JS" "April 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BaseAudioContext.createPeriodicWave \- BaseAudioContext:
createPeriodicWave() method
.SH SYNOPSIS
The \f[CR]createPeriodicWave()\f[R] method of the
\f[CR]BaseAudioContext\f[R] Interface is used to create a
\f[CR]PeriodicWave\f[R], which is used to define a periodic waveform
that can be used to shape the output of an \f[CR]OscillatorNode\f[R].
.SH SYNTAX
.IP
.EX
createPeriodicWave(real, imag)
createPeriodicWave(real, imag, constraints)
.EE
.SS Parameters
.TP
\f[B]real\f[R]
An array of cosine terms (traditionally the A terms).
.TP
\f[B]imag\f[R]
An array of sine terms (traditionally the B terms).
.PP
The \f[CR]real\f[R] and \f[CR]imag\f[R] arrays have to have the same
length, otherwise an error is thrown.
.TP
\f[B]constraints\f[R] \f[I](optional)\f[R]
An dictionary object that specifies whether normalization should be
disabled (if not specified, normalization is enabled by default.)
It takes one property:
.RS
.TP
\f[B]disableNormalization\f[R]
If set to \f[CR]true\f[R], normalization is disabled for the periodic
wave.
The default is \f[CR]false\f[R].
.RE
.RS
.PP
\f[B]Note:\f[R] If normalized, the resulting wave will have a maximum
absolute peak value of 1.
.RE
.SS Return value
A \f[CR]PeriodicWave\f[R].
.SH EXAMPLES
The following example illustrates simple usage of
\f[CR]createPeriodicWave()\f[R], to create a \f[CR]PeriodicWave\f[R]
object containing a simple sine wave.
.IP
.EX
\f[B]const\f[R] real = \f[B]new\f[R] Float32Array(2);
\f[B]const\f[R] imag = \f[B]new\f[R] Float32Array(2);
\f[B]const\f[R] ac = \f[B]new\f[R] AudioContext();
\f[B]const\f[R] osc = ac.createOscillator();

real[0] = 0;
imag[0] = 0;
real[1] = 1;
imag[1] = 0;

\f[B]const\f[R] wave = ac.createPeriodicWave(real, imag, { disableNormalization: \f[B]true\f[R] });

osc.setPeriodicWave(wave);

osc.connect(ac.destination);

osc.start();
osc.stop(2);
.EE
.PP
This works because a sound that contains only a fundamental tone is by
definition a sine wave
.PP
Here, we create a \f[CR]PeriodicWave\f[R] with two values.
The first value is the DC offset, which is the value at which the
oscillator starts.
0 is good here, because we want to start the curve at the middle of the
[\-1.0; 1.0] range.
.PP
The second and subsequent values are sine and cosine components.
You can think of it as the result of a Fourier transform, where you get
frequency domain values from time domain value.
Here, with \f[CR]createPeriodicWave()\f[R], you specify the frequencies,
and the browser performs an inverse Fourier transform to get a time
domain buffer for the frequency of the oscillator.
Here, we only set one component at full volume (1.0) on the fundamental
tone, so we get a sine wave.
Bear in mind the fundamental tone is the oscillator\[cq]s frequency
(which, by default, is 440 Hz).
Thus, by altering the oscillator\[cq]s frequency we are in effect
shifting the frequency of this periodic wave along with it.
.PP
The coefficients of the Fourier transform should be given in
\f[I]ascending\f[R] order (i.e.\  ( a + b i ) e i , ( c + d i ) e 2 i ,
( f + g i ) e 3 i (a+bi)e\[ha]{i} , (c+di)e\[ha]{2i} , (f+gi)e\[ha]{3i} 
etc.)
and can be positive or negative.
A simple way of manually obtaining such coefficients (though not the
best) is to use a graphing calculator.
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
