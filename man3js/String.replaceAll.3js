.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.REPLACEALL" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.replaceAll \- String.prototype.replaceAll()
.SH SYNOPSIS
The \f[B]\f[CB]replaceAll()\f[B]\f[R] method of \f[CR]String\f[R] values
returns a new string with all matches of a \f[CR]pattern\f[R] replaced
by a \f[CR]replacement\f[R].
The \f[CR]pattern\f[R] can be a string or a \f[CR]RegExp\f[R], and the
\f[CR]replacement\f[R] can be a string or a function to be called for
each match.
The original string is left unchanged.
.IP
.EX
\f[B]const\f[R] paragraph = \(dqI think Ruth\(aqs dog is cuter than your dog!\(dq;

console.log(paragraph.replaceAll(\(dqdog\(dq, \(dqmonkey\(dq));
\f[I]// Expected output: \(dqI think Ruth\(aqs monkey is cuter than your monkey!\(dq\f[R]

\f[I]// Global flag required when calling replaceAll with regex\f[R]
\f[B]const\f[R] regex = /dog/gi;
console.log(paragraph.replaceAll(regex, \(dqferret\(dq));
\f[I]// Expected output: \(dqI think Ruth\(aqs ferret is cuter than your ferret!\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
replaceAll(pattern, replacement)
.EE
.SS Parameters
.TP
\f[B]pattern\f[R]
Can be a string or an object with a \f[CR]Symbol.replace\f[R] method
\(em the typical example being a regular expression.
Any value that doesn\(cqt have the \f[CR]Symbol.replace\f[R] method will
be coerced to a string.
.RS
.PP
If \f[CR]pattern\f[R] is a regex, then it must have the global
(\f[CR]g\f[R]) flag set, or a \f[CR]TypeError\f[R] is thrown.
.RE
.TP
\f[B]replacement\f[R]
Can be a string or a function.
The replacement has the same semantics as that of
\f[CR]String.prototype.replace()\f[R].
.SS Return value
A new string, with all matches of a pattern replaced by a replacement.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the \f[CR]pattern\f[R] is a regex that does not have the
global (\f[CR]g\f[R]) flag set (its \f[CR]flags\f[R] property does not
contain \f[CR]\(dqg\(dq\f[R]).
.SH DESCRIPTION
This method does not mutate the string value it\(cqs called on.
It returns a new string.
.PP
Unlike \f[CR]replace()\f[R], this method replaces all occurrences of a
string, not just the first one.
While it is also possible to use \f[CR]replace()\f[R] with a global
regex dynamically constructed with \f[CR]RegExp()\f[R] to replace all
instances of a string, this can have unintended consequences if the
string contains special characters that have meaning in regular
expressions (which might happen if the replacement string comes from
user input).
While you can mitigate this case using \f[CR]RegExp.escape()\f[R] to
make the regular expression string into a literal pattern, it is better
to just use \f[CR]replaceAll()\f[R] and pass the string without
converting it to a regex.
.IP
.EX
\f[B]function\f[R] unsafeRedactName(text, name) {
  \f[B]return\f[R] text.replace(\f[B]new\f[R] RegExp(name, \(dqg\(dq), \(dq[REDACTED]\(dq);
}
\f[B]function\f[R] safeRedactName(text, name) {
  \f[B]return\f[R] text.replaceAll(name, \(dq[REDACTED]\(dq);
}

\f[B]const\f[R] report =
  \(dqA hacker called ha.*er used special characters in their name to breach the system.\(dq;

console.log(unsafeRedactName(report, \(dqha.*er\(dq)); \f[I]// \(dqA [REDACTED]s in their name to breach the system.\(dq\f[R]
console.log(safeRedactName(report, \(dqha.*er\(dq)); \f[I]// \(dqA hacker called [REDACTED] used special characters in their name to breach the system.\(dq\f[R]
.EE
.PP
If \f[CR]pattern\f[R] is an object with a \f[CR]Symbol.replace\f[R]
method (including \f[CR]RegExp\f[R] objects), that method is called with
the target string and \f[CR]replacement\f[R] as arguments.
Its return value becomes the return value of \f[CR]replaceAll()\f[R].
In this case the behavior of \f[CR]replaceAll()\f[R] is entirely encoded
by the \f[CR][Symbol.replace]()\f[R] method, and therefore will have the
same result as \f[CR]replace()\f[R] (apart from the extra input
validation that the regex is global).
.PP
If the \f[CR]pattern\f[R] is an empty string, the replacement will be
inserted in between every UTF\-16 code unit, similar to
\f[CR]split()\f[R] behavior.
.IP
.EX
\(dqxxx\(dq.replaceAll(\(dq\(dq, \(dq_\(dq); \f[I]// \(dq_x_x_x_\(dq\f[R]
.EE
.PP
For more information about how regex properties (especially the sticky
flag) interact with \f[CR]replaceAll()\f[R], see
\f[CR]RegExp.prototype[Symbol.replace]()\f[R].
.SH EXAMPLES
.SS Using replaceAll()
.IP
.EX
\(dqaabbcc\(dq.replaceAll(\(dqb\(dq, \(dq.\(dq);
\f[I]// \(aqaa..cc\(aq\f[R]
.EE
.SS Non\-global regex throws
When using a regular expression search value, it must be global.
This won\(cqt work:
.PP
\f[B]Bad\f[R]
.IP
.EX
\(dqaabbcc\(dq.replaceAll(/b/, \(dq.\(dq);
\f[I]// TypeError: replaceAll must be called with a global RegExp\f[R]
.EE
.PP
This will work:
.PP
\f[B]Good\f[R]
.IP
.EX
\(dqaabbcc\(dq.replaceAll(/b/g, \(dq.\(dq);
(\(dqaa..cc\(dq);
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]String.prototype.replaceAll\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/string.prototype.replaceall
es\-shims polyfill of \f[CR]String.prototype.replaceAll\f[R]
.UE \c
.IP \(bu 2
Regular expressions guide
.IP \(bu 2
\f[CR]String.prototype.replace()\f[R]
.IP \(bu 2
\f[CR]String.prototype.match()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.exec()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.test()\f[R]
