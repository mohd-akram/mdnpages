.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "HTMLSelectElement" "JS" "January 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLSelectElement \- HTMLSelectElement
.SH SYNOPSIS
The \f[B]\f[CB]HTMLSelectElement\f[B]\f[R] interface represents a
\f[CR]<select>\f[R] HTML Element.
These elements also share all of the properties and methods of other
HTML elements via the \f[CR]HTMLElement\f[R] interface.
.SH INSTANCE PROPERTIES
\f[I]This interface inherits the properties of \f[CI]HTMLElement\f[I],
and of \f[CI]Element\f[I] and \f[CI]Node\f[I].\f[R]
.TP
\f[B]HTMLSelectElement.disabled\f[R]
A boolean value reflecting the \f[CR]disabled\f[R] HTML attribute, which
indicates whether the control is disabled.
If it is disabled, it does not accept clicks.
.TP
\f[B]HTMLSelectElement.form\f[R] \f[I](read\-only)\f[R]
An \f[CR]HTMLFormElement\f[R] referencing the form that this element is
associated with.
If the element is not associated with of a \f[CR]<form>\f[R] element,
then it returns \f[CR]null\f[R].
.TP
\f[B]HTMLSelectElement.labels\f[R] \f[I](read\-only)\f[R]
A \f[CR]NodeList\f[R] of \f[CR]<label>\f[R] elements associated with the
element.
.TP
\f[B]HTMLSelectElement.length\f[R]
An \f[CR]unsigned long\f[R] The number of \f[CR]<option>\f[R] elements
in this \f[CR]select\f[R] element.
.TP
\f[B]HTMLSelectElement.multiple\f[R]
A boolean value reflecting the \f[CR]multiple\f[R] HTML attribute, which
indicates whether multiple items can be selected.
.TP
\f[B]HTMLSelectElement.name\f[R]
A string reflecting the \f[CR]name\f[R] HTML attribute, containing the
name of this control used by servers and DOM search functions.
.TP
\f[B]HTMLSelectElement.options\f[R] \f[I](read\-only)\f[R]
An \f[CR]HTMLOptionsCollection\f[R] representing the set of
\f[CR]<option>\f[R] (\f[CR]HTMLOptionElement\f[R]) elements contained by
this element.
.TP
\f[B]HTMLSelectElement.required\f[R]
A boolean value reflecting the \f[CR]required\f[R] HTML attribute, which
indicates whether the user is required to select a value before
submitting the form.
.TP
\f[B]HTMLSelectElement.selectedIndex\f[R]
A \f[CR]long\f[R] reflecting the index of the first selected
\f[CR]<option>\f[R] element.
The value \f[CR]\-1\f[R] indicates no element is selected.
.TP
\f[B]HTMLSelectElement.selectedOptions\f[R] \f[I](read\-only)\f[R]
An \f[CR]HTMLCollection\f[R] representing the set of \f[CR]<option>\f[R]
elements that are selected.
.TP
\f[B]HTMLSelectElement.size\f[R]
A \f[CR]long\f[R] reflecting the \f[CR]size\f[R] HTML attribute, which
contains the number of visible items in the control.
The default is 1, unless \f[CR]multiple\f[R] is \f[CR]true\f[R], in
which case it is 4.
.TP
\f[B]HTMLSelectElement.type\f[R] \f[I](read\-only)\f[R]
A string representing the form control\[cq]s type.
When \f[CR]multiple\f[R] is \f[CR]true\f[R], it returns
\f[CR]\[dq]select\-multiple\[dq]\f[R]; otherwise, it returns
\f[CR]\[dq]select\-one\[dq]\f[R].
.TP
\f[B]HTMLSelectElement.validationMessage\f[R] \f[I](read\-only)\f[R]
A string representing a localized message that describes the validation
constraints that the control does not satisfy (if any).
This attribute is the empty string if the control is not a candidate for
constraint validation (\f[CR]willValidate\f[R] is false), or it
satisfies its constraints.
.TP
\f[B]HTMLSelectElement.validity\f[R] \f[I](read\-only)\f[R]
A \f[CR]ValidityState\f[R] reflecting the validity state that this
control is in.
.TP
\f[B]HTMLSelectElement.value\f[R]
A string reflecting the value of the form control.
Returns the \f[CR]value\f[R] property of the first selected option
element if there is one, otherwise the empty string.
.TP
\f[B]HTMLSelectElement.willValidate\f[R] \f[I](read\-only)\f[R]
A boolean value that indicates whether the button is a candidate for
constraint validation.
It is \f[CR]false\f[R] if any conditions bar it from constraint
validation.
.SH INSTANCE METHODS
\f[I]This interface inherits the methods of \f[CI]HTMLElement\f[I], and
of \f[CI]Element\f[I] and \f[CI]Node\f[I].\f[R]
.TP
\f[B]HTMLSelectElement.add()\f[R]
Adds an element to the collection of \f[CR]option\f[R] elements for this
\f[CR]select\f[R] element.
.TP
\f[B]HTMLSelectElement.checkValidity()\f[R]
Checks whether the element has any constraints and whether it satisfies
them.
If the element fails its constraints, the browser fires a cancelable
\f[CR]invalid\f[R] event at the element (and returns \f[CR]false\f[R]).
.TP
\f[B]HTMLSelectElement.item()\f[R]
Gets an item from the options collection for this \f[CR]<select>\f[R]
element.
You can also access an item by specifying the index in square brackets
or parentheses, without calling this method explicitly.
.TP
\f[B]HTMLSelectElement.namedItem()\f[R]
Gets the item in the options collection with the specified name.
The name string can match either the \f[CR]id\f[R] or the
\f[CR]name\f[R] attribute of an option node.
You can also access an item by specifying the name in square brackets or
parentheses, without calling this method explicitly.
.TP
\f[B]HTMLSelectElement.remove()\f[R]
Removes the element at the specified index from the options collection
for this \f[CR]select\f[R] element.
.TP
\f[B]HTMLSelectElement.reportValidity()\f[R]
This method reports the problems with the constraints on the element, if
any, to the user.
If there are problems, it fires a cancelable \f[CR]invalid\f[R] event at
the element, and returns \f[CR]false\f[R]; if there are no problems, it
returns \f[CR]true\f[R].
.TP
\f[B]HTMLSelectElement.setCustomValidity()\f[R]
Sets the custom validity message for the selection element to the
specified message.
Use the empty string to indicate that the element does \f[I]not\f[R]
have a custom validity error.
.TP
\f[B]showPicker()\f[R]
Shows the option picker.
.SH EVENTS
\f[I]This interface inherits the events of \f[CI]HTMLElement\f[I], and
of \f[CI]Element\f[I] and \f[CI]Node\f[I].\f[R]
.PP
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface:
.TP
\f[B]change\f[R] event
Fires when the user selects an option.
.TP
\f[B]input\f[R] event
Fires when the \f[CR]value\f[R] of an \f[CR]<input>\f[R],
\f[CR]<select>\f[R], or \f[CR]<textarea>\f[R] element has been changed.
.SH EXAMPLE
.SS Get information about the selected option
.IP
.EX
\f[I]/* assuming we have the following HTML\f[R]
\f[I]<select id=\[aq]s\[aq]>\f[R]
\f[I]    <option>First</option>\f[R]
\f[I]    <option selected>Second</option>\f[R]
\f[I]    <option>Third</option>\f[R]
\f[I]</select>\f[R]
\f[I]*/\f[R]

\f[B]const\f[R] select = document.getElementById(\[dq]s\[dq]);

\f[I]// return the index of the selected option\f[R]
console.log(select.selectedIndex); \f[I]// 1\f[R]

\f[I]// return the value of the selected option\f[R]
console.log(select.options[select.selectedIndex].value); \f[I]// Second\f[R]
.EE
.PP
A better way to track changes to the user\[cq]s selection is to watch
for the \f[CR]change\f[R] event to occur on the \f[CR]<select>\f[R].
This will tell you when the value changes, and you can then update
anything you need to.
See the example provided in the documentation for the \f[CR]change\f[R]
event for details.
.SH SEE ALSO
.IP \[bu] 2
The \f[CR]<select>\f[R] HTML element, which implements this interface.
