.\" Automatically generated by Pandoc 3.4
.\"
.TH "DataTransfer.clearData" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.clearData \- DataTransfer: clearData() method
.SH SYNOPSIS
The \f[B]\f[CB]DataTransfer.clearData()\f[B]\f[R] method removes the
drag operation\[cq]s drag data for the given type.
If data for the given type does not exist, this method does nothing.
.PP
If this method is called with no arguments or the format is an empty
string, the data of all types will be removed.
.PP
This method does \f[I]not\f[R] remove files from the drag operation, so
it\[cq]s possible for there still to be an entry with the type
\f[CR]\[dq]Files\[dq]\f[R] left in the object\[cq]s
\f[CR]DataTransfer.types\f[R] list if there are any files included in
the drag.
.RS
.PP
\f[B]Note:\f[R] This method can only be used in the handler for the
\f[CR]dragstart\f[R] event, because that\[cq]s the only time the drag
operation\[cq]s data store is writable.
.RE
.SH SYNTAX
.IP
.EX
clearData()
clearData(format)
.EE
.SS Parameters
.TP
\f[B]format\f[R] \f[I](optional)\f[R]
A string which specifies the type of data to remove.
If this parameter is an empty string or is not provided, the data for
all types is removed.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
This example shows the use of the \f[CR]DataTransfer\f[R] object\[cq]s
\f[CR]getData()\f[R], \f[CR]setData()\f[R] and \f[CR]clearData()\f[R]
methods.
.SS HTML
.IP
.EX
<\f[B]span\f[R] class=\[dq]tweaked\[dq] id=\[dq]source\[dq] draggable=\[dq]true\[dq]>
  Select this element, drag it to the Drop Zone and then release the selection
  to move the element.
</\f[B]span\f[R]>
<\f[B]span\f[R] class=\[dq]tweaked\[dq] id=\[dq]target\[dq]>Drop Zone</\f[B]span\f[R]>
<\f[B]div\f[R]>Status: <\f[B]span\f[R] id=\[dq]status\[dq]>Drag to start</\f[B]span\f[R]></\f[B]div\f[R]>
<\f[B]div\f[R]>Data is: <\f[B]span\f[R] id=\[dq]data\[dq]>uninitialized</\f[B]span\f[R]></\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
span.tweaked {
  \f[B]display\f[R]: inline\-block;
  \f[B]margin\f[R]: 1em 0;
  \f[B]padding\f[R]: 1em 2em;
}

source {
  \f[B]color\f[R]: blue;
  \f[B]border\f[R]: 1px solid black;
}

target {
  \f[B]border\f[R]: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
window.addEventListener(\[dq]DOMContentLoaded\[dq], () \f[B]=>\f[R] {
  \f[I]// Select HTML elements\f[R]
  \f[B]const\f[R] draggable = document.getElementById(\[dq]source\[dq]);
  \f[B]const\f[R] droppable = document.getElementById(\[dq]target\[dq]);
  \f[B]const\f[R] status = document.getElementById(\[dq]status\[dq]);
  \f[B]const\f[R] data = document.getElementById(\[dq]data\[dq]);
  \f[B]let\f[R] dropped = \f[B]false\f[R];

  \f[I]// Register event handlers\f[R]
  draggable.addEventListener(\[dq]dragstart\[dq], dragStartHandler);
  draggable.addEventListener(\[dq]dragend\[dq], dragEndHandler);
  droppable.addEventListener(\[dq]dragover\[dq], dragOverHandler);
  droppable.addEventListener(\[dq]dragleave\[dq], dragLeaveHandler);
  droppable.addEventListener(\[dq]drop\[dq], dropHandler);

  \f[B]function\f[R] dragStartHandler(event) {
    status.textContent = \[dq]Drag in process\[dq];

    \f[I]// Change target element\[aq]s border to signify drag has started\f[R]
    event.currentTarget.style.border = \[dq]1px dashed blue\[dq];

    \f[I]// Start by clearing existing clipboards; this will affect all types since we\f[R]
    \f[I]// don\[aq]t give a specific type.\f[R]

    event.dataTransfer.clearData();

    \f[I]// Set the drag\[aq]s format and data (use event target\[aq]s id for data)\f[R]
    event.dataTransfer.setData(\[dq]text/plain\[dq], event.target.id);

    data.textContent = event.dataTransfer.getData(\[dq]text/plain\[dq]);
  }

  \f[B]function\f[R] dragEndHandler(event) {
    \f[B]if\f[R] (!dropped) {
      status.textContent = \[dq]Drag canceled\[dq];
    }

    data.textContent = event.dataTransfer.getData(\[dq]text/plain\[dq]) || \[dq]empty\[dq];

    \f[I]// Change border to signify drag is no longer in process\f[R]
    event.currentTarget.style.border = \[dq]1px solid black\[dq];

    \f[B]if\f[R] (dropped) {
      \f[I]// Remove all event listeners\f[R]
      draggable.removeEventListener(\[dq]dragstart\[dq], dragStartHandler);
      draggable.removeEventListener(\[dq]dragend\[dq], dragEndHandler);
      droppable.removeEventListener(\[dq]dragover\[dq], dragOverHandler);
      droppable.removeEventListener(\[dq]dragleave\[dq], dragLeaveHandler);
      droppable.removeEventListener(\[dq]drop\[dq], dropHandler);
    }
  }

  \f[B]function\f[R] dragOverHandler(event) {
    status.textContent = \[dq]Drop available\[dq];

    event.preventDefault();
  }

  \f[B]function\f[R] dragLeaveHandler(event) {
    status.textContent = \[dq]Drag in process (drop was available)\[dq];

    event.preventDefault();
  }

  \f[B]function\f[R] dropHandler(event) {
    dropped = \f[B]true\f[R];

    status.textContent = \[dq]Drop done\[dq];

    event.preventDefault();

    \f[I]// Get data linked to event format « text »\f[R]
    \f[B]const\f[R] _data = event.dataTransfer.getData(\[dq]text/plain\[dq]);
    \f[B]const\f[R] element = document.getElementById(_data);

    \f[I]// Append drag source element to event\[aq]s target element\f[R]
    event.target.appendChild(element);

    \f[I]// Change CSS styles and displayed text\f[R]
    element.style.cssText =
      \[dq]border: 1px solid black;display: block; color: red\[dq];
    element.textContent = \[dq]I\[aq]m in the Drop Zone!\[dq];
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Drag and drop
.IP \[bu] 2
Drag Operations
.IP \[bu] 2
Recommended Drag Types
.IP \[bu] 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
