.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBREQUEST.ERROR_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBRequest.error_event \- IDBRequest: error event
.SH SYNOPSIS
The \f[CR]error\f[R] handler is executed when an error caused a request
to fail.
In the \f[CR]error\f[R] event handler, you can access the error of the
request, as well as place more requests to the same transaction.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqerror\(dq, (event) => { })

onerror = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example opens a database and tries to add a record, listening for
the \f[CR]error\f[R] event for the \f[CR]add()\f[R] operation (this will
occur if, for example, a record with the given \f[CR]taskTitle\f[R]
already exists):
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

DBOpenRequest.addEventListener(\(dqupgradeneeded\(dq, (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
});

DBOpenRequest.addEventListener(\(dqsuccess\(dq, (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = DBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\(dqtoDoList\(dq], \(dqreadwrite\(dq);
  \f[B]const\f[R] objectStore = transaction.objectStore(\(dqtoDoList\(dq);
  \f[B]const\f[R] newItem = {
    taskTitle: \(dqmy task\(dq,
    hours: 10,
    minutes: 10,
    day: 10,
    month: \(dqJanuary\(dq,
    year: 2020,
  };

  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem);
  objectStoreRequest.addEventListener(\(dqerror\(dq, () \f[B]=>\f[R] {
    console.log(\(gaError adding new item: ${newItem.taskTitle}\(ga);
  });
});
.EE
.PP
The same example, using the \f[CR]onerror\f[R] property instead of
\f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = DBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\(dqtoDoList\(dq], \(dqreadwrite\(dq);
  \f[B]const\f[R] objectStore = transaction.objectStore(\(dqtoDoList\(dq);
  \f[B]const\f[R] newItem = {
    taskTitle: \(dqmy task\(dq,
    hours: 10,
    minutes: 10,
    day: 10,
    month: \(dqJanuary\(dq,
    year: 2020,
  };

  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem);
  objectStoreRequest.onerror = () \f[B]=>\f[R] {
    console.log(\(gaError adding new item: ${newItem.taskTitle}\(ga);
  };
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
