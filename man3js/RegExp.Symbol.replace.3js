.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REGEXP.SYMBOL.REPLACE" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.Symbol.replace \- RegExp.prototypeSymbol.replace
.SH SYNOPSIS
The \f[B]\f[CB][Symbol.replace]()\f[B]\f[R] method of \f[CR]RegExp\f[R]
instances specifies how \f[CR]String.prototype.replace()\f[R] and
\f[CR]String.prototype.replaceAll()\f[R] should behave when the regular
expression is passed in as the pattern.
.IP
.EX
\f[B]class\f[R] RegExp1 \f[B]extends\f[R] RegExp {
  [Symbol.replace](str) {
    \f[B]return\f[R] RegExp.prototype[Symbol.replace].call(\f[B]this\f[R], str, \(dq#!\(at?\(dq);
  }
}

console.log(\(dqfootball\(dq.replace(\f[B]new\f[R] RegExp1(\(dqfoo\(dq)));
\f[I]// Expected output: \(dq#!\(at?tball\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
regexp[Symbol.replace](str, replacement)
.EE
.SS Parameters
.TP
\f[B]str\f[R]
A \f[CR]String\f[R] that is a target of the replacement.
.TP
\f[B]replacement\f[R]
Can be a string or a function.
.RS
.IP \(bu 2
If it\(cqs a string, it will replace the substring matched by the
current regexp.
A number of special replacement patterns are supported; see the
Specifying a string as the replacement section of
\f[CR]String.prototype.replace\f[R].
.IP \(bu 2
If it\(cqs a function, it will be invoked for every match and the return
value is used as the replacement text.
The arguments supplied to this function are described in the Specifying
a function as the replacement section of
\f[CR]String.prototype.replace\f[R].
.RE
.SS Return value
A new string, with one, some, or all matches of the pattern replaced by
the specified replacement.
.SH DESCRIPTION
This method is called internally in
\f[CR]String.prototype.replace()\f[R] and
\f[CR]String.prototype.replaceAll()\f[R] if the \f[CR]pattern\f[R]
argument is a \f[CR]RegExp\f[R] object.
For example, the following two examples return the same result.
.IP
.EX
\(dqabc\(dq.replace(/a/, \(dqA\(dq);

/a/[Symbol.replace](\(dqabc\(dq, \(dqA\(dq);
.EE
.PP
If the regex is global (with the \f[CR]g\f[R] flag), the regex\(cqs
\f[CR]exec()\f[R] method will be repeatedly called until
\f[CR]exec()\f[R] returns \f[CR]null\f[R].
Otherwise, \f[CR]exec()\f[R] would only be called once.
For each \f[CR]exec()\f[R] result, the substitution will be prepared
based on the description in \f[CR]String.prototype.replace()\f[R].
.PP
Because \f[CR][Symbol.replace]()\f[R] would keep calling
\f[CR]exec()\f[R] until it returns \f[CR]null\f[R], and
\f[CR]exec()\f[R] would automatically reset the regex\(cqs
\f[CR]lastIndex\f[R] to 0 when the last match fails,
\f[CR][Symbol.replace]()\f[R] would typically not have side effects when
it exits.
However, when the regex is sticky but not global, \f[CR]lastIndex\f[R]
would not be reset.
In this case, each call to \f[CR]replace()\f[R] may return a different
result.
.IP
.EX
\f[B]const\f[R] re = /a/y;

\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < 5; i++) {
  console.log(\(dqaaa\(dq.replace(re, \(dqb\(dq), re.lastIndex);
}

\f[I]// baa 1\f[R]
\f[I]// aba 2\f[R]
\f[I]// aab 3\f[R]
\f[I]// aaa 0\f[R]
\f[I]// baa 1\f[R]
.EE
.PP
When the regex is sticky and global, it would still perform sticky
matches \(em i.e., it would fail to match any occurrences beyond the
\f[CR]lastIndex\f[R].
.IP
.EX
console.log(\(dqaa\-a\(dq.replace(/a/gy, \(dqb\(dq)); \f[I]// \(dqbb\-a\(dq\f[R]
.EE
.PP
If the current match is an empty string, the \f[CR]lastIndex\f[R] would
still be advanced \(em if the regex is Unicode\-aware, it would advance
by one Unicode code point; otherwise, it advances by one UTF\-16 code
unit.
.IP
.EX
console.log(\(dqðŸ˜„\(dq.replace(/(?:)/g, \(dq \(dq)); \f[I]// \(dq \(rsud83d \(rsude04 \(dq\f[R]
console.log(\(dqðŸ˜„\(dq.replace(/(?:)/gu, \(dq \(dq)); \f[I]// \(dq ðŸ˜„ \(dq\f[R]
.EE
.PP
This method exists for customizing replace behavior in \f[CR]RegExp\f[R]
subclasses.
.SH EXAMPLES
.SS Direct call
This method can be used in almost the same way as
\f[CR]String.prototype.replace()\f[R], except the different
\f[CR]this\f[R] and the different arguments order.
.IP
.EX
\f[B]const\f[R] re = /\-/g;
\f[B]const\f[R] str = \(dq2016\-01\-01\(dq;
\f[B]const\f[R] newStr = re[Symbol.replace](str, \(dq.\(dq);
console.log(newStr); \f[I]// 2016.01.01\f[R]
.EE
.SS Using \f[CR][Symbol.replace]()\f[R] in subclasses
Subclasses of \f[CR]RegExp\f[R] can override the
\f[CR][Symbol.replace]()\f[R] method to modify the default behavior.
.IP
.EX
\f[B]class\f[R] MyRegExp \f[B]extends\f[R] RegExp {
  constructor(pattern, flags, count) {
    \f[B]super\f[R](pattern, flags);
    \f[B]this\f[R].count = count;
  }
  [Symbol.replace](str, replacement) {
    \f[I]// Perform [Symbol.replace]() \(gacount\(ga times.\f[R]
    \f[B]let\f[R] result = str;
    \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < \f[B]this\f[R].count; i++) {
      result = RegExp.prototype[Symbol.replace].call(\f[B]this\f[R], result, replacement);
    }
    \f[B]return\f[R] result;
  }
}

\f[B]const\f[R] re = \f[B]new\f[R] MyRegExp(\(dq\(rs\(rsd\(dq, \(dq\(dq, 3);
\f[B]const\f[R] str = \(dq01234567\(dq;
\f[B]const\f[R] newStr = str.replace(re, \(dq#\(dq); \f[I]// String.prototype.replace calls re[Symbol.replace]().\f[R]
console.log(newStr); \f[I]// ###34567\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]RegExp.prototype[Symbol.replace]\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]String.prototype.replace()\f[R]
.IP \(bu 2
\f[CR]String.prototype.replaceAll()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.match]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.matchAll]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.search]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.split]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.exec()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.test()\f[R]
.IP \(bu 2
\f[CR]Symbol.replace\f[R]
