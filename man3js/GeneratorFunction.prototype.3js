'\" t
.\" Automatically generated by Pandoc 3.4
.\"
.TH "GeneratorFunction.prototype" "JS" "June 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GeneratorFunction.prototype \- GeneratorFunction.prototype.prototype
.SH SYNOPSIS
The \f[B]\f[CB]prototype\f[B]\f[R] property of
\f[CR]GeneratorFunction.prototype\f[R] is shared by all generator
functions.
Its value is \f[CR]Generator.prototype\f[R].
Each generator function created with the \f[CR]function*\f[R] syntax or
the \f[CR]GeneratorFunction()\f[R] constructor also has its own
\f[CR]prototype\f[R] property, whose prototype is
\f[CR]GeneratorFunction.prototype.prototype\f[R].
When the generator function is called, its \f[CR]prototype\f[R] property
becomes the prototype of the returned generator object.
.SH VALUE
The same object as \f[CR]Generator.prototype\f[R].
\f[CR]GeneratorFunction.prototype.prototype\f[R] is the technically more
accurate name, but \f[CR]Generator.prototype\f[R] appeals to the
intuition that it\[cq]s the prototype of generator objects.
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
yes
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.PP
The \f[CR]prototype\f[R] property of each \f[CR]GeneratorFunction\f[R]
instance is an empty object with no properties, whose prototype is
\f[CR]GeneratorFunction.prototype.prototype\f[R].
It has the following property attributes:
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
yes
T}
.TE
.SH DESCRIPTION
A generator function instance has two \f[CR]prototype\f[R] properties.
The first one is its own \f[CR]prototype\f[R] property.
The second one is the \f[CR]prototype\f[R] property on its prototype,
which is \f[CR]GeneratorFunction.prototype\f[R].
(Remember that every generator function is an instance of
\f[CR]GeneratorFunction\f[R], so it has
\f[CR]GeneratorFunction.prototype\f[R] as its prototype.)
.IP
.EX
\f[B]function\f[R]* genFunc() {}
\f[B]const\f[R] GeneratorFunctionPrototype = Object.getPrototypeOf(genFunc);
console.log(Object.hasOwn(genFunc, \[dq]prototype\[dq])); \f[I]// true\f[R]
console.log(Object.hasOwn(GeneratorFunctionPrototype, \[dq]prototype\[dq])); \f[I]// true\f[R]
.EE
.PP
When a generator function is called, the generator function\[cq]s
\f[CR]prototype\f[R] property becomes the prototype of the returned
generator object.
.IP
.EX
\f[B]const\f[R] gen = genFunc();
\f[B]const\f[R] proto = Object.getPrototypeOf;
console.log(proto(gen) === genFunc.prototype); \f[I]// true\f[R]
console.log(proto(proto(gen)) === GeneratorFunctionPrototype.prototype); \f[I]// true\f[R]
.EE
.PP
The following diagram illustrates the prototype chain of a generator
function and its instances.
Each hollow arrow indicates an inheritance relationship (i.e.\ a
prototype link), and each solid arrow indicates a property relationship.
Note that there\[cq]s no way to access \f[CR]genFunc\f[R] from
\f[CR]gen\f[R] \[em] they only have an \f[CR]instanceof\f[R]
relationship.
[IMAGE: \c
.UR https://mdn.github.io/shared-assets/images/diagrams/javascript/generatorfunction/prototype-chain.svg
The inheritance diagram of generators and generator functions
.UE \c
]
The inheritance diagram of generators and generator functions
.SH SEE ALSO
.IP \[bu] 2
\f[CR]function*\f[R]
.IP \[bu] 2
\f[CR]function*\f[R] expression
.IP \[bu] 2
\f[CR]AsyncGeneratorFunction\f[R]
.IP \[bu] 2
\f[CR]GeneratorFunction\f[R]
.IP \[bu] 2
Inheritance and the prototype chain
.IP \[bu] 2
Iterators and generators
