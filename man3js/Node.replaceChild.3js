.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Node.replaceChild" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Node.replaceChild \- Node: replaceChild() method
.SH SYNOPSIS
The \f[B]\f[CB]replaceChild()\f[B]\f[R] method of the \f[CR]Node\f[R]
interface replaces a child node within the given (parent) node.
.SH SYNTAX
.IP
.EX
replaceChild(newChild, oldChild)
.EE
.SS Parameters
.TP
\f[B]newChild\f[R]
The new node to replace \f[CR]oldChild\f[R].
> \f[B]Warning:\f[R] If the new node is already present somewhere else
in the DOM, it is first removed from that position.
.TP
\f[B]oldChild\f[R]
The child to be replaced.
.RS
.PP
\f[B]Note:\f[R] The parameter order, \f[I]new\f[R] before \f[I]old\f[R],
is unusual.
\f[CR]Element.replaceWith()\f[R], applying only to nodes that are
elements, may be easier to read and use.
.RE
.SS Return value
The replaced \f[CR]Node\f[R].
This is the same node as \f[CR]oldChild\f[R].
.SS Exceptions
.TP
\f[B]HierarchyRequestError\f[R] \f[B]DOMException\f[R]
Thrown when the constraints of the DOM tree are violated, that is if one
of the following cases occurs:
.RS
.IP \[bu] 2
If the parent of \f[CR]oldChild\f[R] is not a \f[CR]Document\f[R],
\f[CR]DocumentFragment\f[R], or an \f[CR]Element\f[R].
.IP \[bu] 2
If the replacement of \f[CR]oldChild\f[R] by \f[CR]newChild\f[R] would
lead to a cycle, that is if \f[CR]newChild\f[R] is an ancestor of the
node.
.IP \[bu] 2
If \f[CR]newChild\f[R] is not a \f[CR]DocumentFragment\f[R], a
\f[CR]DocumentType\f[R], an \f[CR]Element\f[R], or a
\f[CR]CharacterData\f[R].
.IP \[bu] 2
If the current node is a \f[CR]Text\f[R], and its parent is a
\f[CR]Document\f[R].
.IP \[bu] 2
If the current node is a \f[CR]DocumentType\f[R] and its parent is
\f[I]not\f[R] a \f[CR]Document\f[R], as a \f[I]doctype\f[R] should
always be a direct descendant of a \f[I]document\f[R].
.IP \[bu] 2
If the parent of the node is a \f[CR]Document\f[R] and
\f[CR]newChild\f[R] is a \f[CR]DocumentFragment\f[R] with more than one
\f[CR]Element\f[R] child, or that has a \f[CR]Text\f[R] child.
.IP \[bu] 2
If the replacement of \f[CR]oldChild\f[R] by \f[CR]newChild\f[R] would
lead to \f[CR]Document\f[R] with more than one \f[CR]Element\f[R] as
child.
.IP \[bu] 2
If the replacement of \f[CR]oldChild\f[R] by \f[CR]newChild\f[R] would
lead to the presence of an \f[CR]Element\f[R] node before a
\f[CR]DocumentType\f[R] node.
.RE
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if the parent of \f[CR]oldChild\f[R] is not the current node.
.SH EXAMPLE
.IP
.EX
\f[I]// Given:\f[R]
\f[I]// <div>\f[R]
\f[I]//  <span id=\[dq]childSpan\[dq]>foo bar</span>\f[R]
\f[I]// </div>\f[R]

\f[I]// Create an empty element node\f[R]
\f[I]// without an ID, any attributes, or any content\f[R]
\f[B]const\f[R] sp1 = document.createElement(\[dq]span\[dq]);

\f[I]// Give it an id attribute called \[aq]newSpan\[aq]\f[R]
sp1.id = \[dq]newSpan\[dq];

\f[I]// Create some content for the new element.\f[R]
\f[B]const\f[R] sp1_content = document.createTextNode(\[dq]new replacement span element.\[dq]);

\f[I]// Apply that content to the new element\f[R]
sp1.appendChild(sp1_content);

\f[I]// Build a reference to the existing node to be replaced\f[R]
\f[B]const\f[R] sp2 = document.getElementById(\[dq]childSpan\[dq]);
\f[B]const\f[R] parentDiv = sp2.parentNode;

\f[I]// Replace existing node sp2 with the new span element sp1\f[R]
parentDiv.replaceChild(sp1, sp2);

\f[I]// Result:\f[R]
\f[I]// <div>\f[R]
\f[I]//   <span id=\[dq]newSpan\[dq]>new replacement span element.</span>\f[R]
\f[I]// </div>\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Node.removeChild\f[R]
.IP \[bu] 2
\f[CR]Element.replaceWith\f[R]
