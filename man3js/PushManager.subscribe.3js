.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "PushManager.subscribe" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PushManager.subscribe \- PushManager: subscribe() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]subscribe()\f[B]\f[R] method of the
\f[CR]PushManager\f[R] interface subscribes to a push service.
.PP
It returns a \f[CR]Promise\f[R] that resolves to a
\f[CR]PushSubscription\f[R] object containing details of a push
subscription.
A new push subscription is created if the current service worker does
not have an existing subscription.
.SH SYNTAX
.IP
.EX
subscribe(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing optional configuration parameters.
It can have the following properties:
.RS
.TP
\f[B]userVisibleOnly\f[R]
A boolean indicating that the returned push subscription will only be
used for messages whose effect is made visible to the user.
.TP
\f[B]applicationServerKey\f[R]
A Base64\-encoded string or \f[CR]ArrayBuffer\f[R] containing an \c
.UR https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm
ECDSA
.UE \c
\ P\-256 public key that the push server will use to authenticate your
application server.
If specified, all messages from your application server must use the \c
.UR https://datatracker.ietf.org/doc/html/rfc8292
VAPID
.UE \c
\ authentication scheme, and include a JWT signed with the corresponding
private key.
This key \f[B]\f[BI]IS NOT\f[B]\f[R] the same ECDH key that you use to
encrypt the data.
For more information, see \[lq]\c
.UR https://blog.mozilla.org/services/2016/04/04/using-vapid-with-webpush/
Using VAPID with WebPush
.UE \c
\[rq].
.RS
.PP
\f[B]Note:\f[R] This parameter is required in some browsers like Chrome
and Edge.
They will reject the Promise if \f[CR]userVisibleOnly\f[R] is not set to
\f[CR]true\f[R].
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves to a \f[CR]PushSubscription\f[R]
object.
.SH EXAMPLES
.IP
.EX
\f[B]this\f[R].onpush = (event) \f[B]=>\f[R] {
  console.log(event.data);
  \f[I]// From here we can write the data to IndexedDB, send it to any open\f[R]
  \f[I]// windows, display a notification, etc.\f[R]
};

navigator.serviceWorker.register(\[dq]serviceworker.js\[dq]);

\f[I]// Use serviceWorker.ready to ensure that you can subscribe for push\f[R]
navigator.serviceWorker.ready.then((serviceWorkerRegistration) \f[B]=>\f[R] {
  \f[B]const\f[R] options = {
    userVisibleOnly: \f[B]true\f[R],
    applicationServerKey,
  };
  serviceWorkerRegistration.pushManager.subscribe(options).then(
    (pushSubscription) \f[B]=>\f[R] {
      console.log(pushSubscription.endpoint);
      \f[I]// The push subscription details needed by the application\f[R]
      \f[I]// server are now available, and can be sent to it using,\f[R]
      \f[I]// for example, the fetch() API.\f[R]
    },
    (error) \f[B]=>\f[R] {
      \f[I]// During development it often helps to log errors to the\f[R]
      \f[I]// console. In a production environment it might make sense to\f[R]
      \f[I]// also report information about errors back to the\f[R]
      \f[I]// application server.\f[R]
      console.error(error);
    },
  );
});
.EE
.SS Responding to user gestures
\f[CR]subscribe()\f[R] calls should be done in response to a user
gesture, such as clicking a button, for example:
.IP
.EX
btn.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  serviceWorkerRegistration.pushManager
    .subscribe(options)
    .then((pushSubscription) \f[B]=>\f[R] {
      \f[I]// handle subscription\f[R]
    });
});
.EE
.PP
This is not only best practice \[em] you should not be spamming users
with notifications they didn\[cq]t agree to \[em] but going forward
browsers will explicitly disallow notifications not triggered in
response to a user gesture.
Firefox is already doing this from version 72, for example.
