.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "PushManager" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PushManager \- PushManager
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]PushManager\f[B]\f[R] interface of the Push API provides
a way to receive notifications from third\-party servers as well as
request URLs for push notifications.
.PP
This interface is accessed via the
\f[CR]ServiceWorkerRegistration.pushManager\f[R] property.
.SH STATIC PROPERTIES
.TP
\f[B]PushManager.supportedContentEncodings\f[R]
Returns an array of supported content codings that can be used to
encrypt the payload of a push message.
.SH INSTANCE METHODS
.TP
\f[B]PushManager.getSubscription()\f[R]
Retrieves an existing push subscription.
It returns a \f[CR]Promise\f[R] that resolves to a
\f[CR]PushSubscription\f[R] object containing details of an existing
subscription.
If no existing subscription exists, this resolves to a \f[CR]null\f[R]
value.
.TP
\f[B]PushManager.permissionState()\f[R]
Returns a \f[CR]Promise\f[R] that resolves to the permission state of
the current \f[CR]PushManager\f[R], which will be one of
\f[CR]\[aq]granted\[aq]\f[R], \f[CR]\[aq]denied\[aq]\f[R], or
\f[CR]\[aq]prompt\[aq]\f[R].
.TP
\f[B]PushManager.subscribe()\f[R]
Subscribes to a push service.
It returns a \f[CR]Promise\f[R] that resolves to a
\f[CR]PushSubscription\f[R] object containing details of a push
subscription.
A new push subscription is created if the current service worker does
not have an existing subscription.
.SS Deprecated methods
.TP
\f[B]PushManager.hasPermission()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Returns a \f[CR]Promise\f[R] that resolves to the
\f[CR]PushPermissionStatus\f[R] of the requesting webapp, which will be
one of \f[CR]granted\f[R], \f[CR]denied\f[R], or \f[CR]default\f[R].
Replaced by \f[CR]PushManager.permissionState()\f[R].
.TP
\f[B]PushManager.register()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Subscribes to a push subscription.
Replaced by \f[CR]PushManager.subscribe()\f[R].
.TP
\f[B]PushManager.registrations()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Retrieves existing push subscriptions.
Replaced by \f[CR]PushManager.getSubscription()\f[R].
.TP
\f[B]PushManager.unregister()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Unregisters and deletes a specified subscription endpoint.
In the updated API, a subscription is unregistered by calling the
\f[CR]PushSubscription.unsubscribe()\f[R] method.
.SH EXAMPLE
.IP
.EX
\f[B]this\f[R].onpush = (event) \f[B]=>\f[R] {
  console.log(event.data);
  \f[I]// From here we can write the data to IndexedDB, send it to any open\f[R]
  \f[I]// windows, display a notification, etc.\f[R]
};

navigator.serviceWorker
  .register(\[dq]serviceworker.js\[dq])
  .then((serviceWorkerRegistration) \f[B]=>\f[R] {
    serviceWorkerRegistration.pushManager.subscribe().then(
      (pushSubscription) \f[B]=>\f[R] {
        console.log(pushSubscription.endpoint);
        \f[I]// The push subscription details needed by the application\f[R]
        \f[I]// server are now available, and can be sent to it using,\f[R]
        \f[I]// for example, the fetch() API.\f[R]
      },
      (error) \f[B]=>\f[R] {
        console.error(error);
      },
    );
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
Push API
.IP \[bu] 2
Service Worker API
