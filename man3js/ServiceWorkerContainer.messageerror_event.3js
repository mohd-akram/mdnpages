.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ServiceWorkerContainer.messageerror_event" "JS" "June 7, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerContainer.messageerror_event \- ServiceWorkerContainer:
messageerror event
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]messageerror\f[B]\f[R] event is fired to the
\f[CR]ServiceWorkerContainer\f[R] when an incoming message sent to the
associated worker can\[cq]t be deserialized.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]messageerror\[dq], (event) \f[B]=>\f[R] {});

onmessageerror = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
In this example the service worker get the client\[cq]s ID from a
\f[CR]fetch\f[R] event and then sends it a message using
\f[CR]Client.postMessage\f[R]:
.IP
.EX
\f[I]// service\-worker.js\f[R]
\f[B]async\f[R] \f[B]function\f[R] messageClient(clientId) {
  \f[B]const\f[R] client = \f[B]await\f[R] self.clients.get(clientId);
  client.postMessage(\[dq]Hi client!\[dq]);
}

self.addEventListener(\[dq]fetch\[dq], (event) \f[B]=>\f[R] {
  messageClient(event.clientId);
  event.respondWith(() \f[B]=>\f[R] {
    \f[I]// \&...\f[R]
  });
});
.EE
.PP
The service worker can listen for the message deserialization error by
listening to the \f[CR]messageerror\f[R] event:
.IP
.EX
\f[I]// main.js\f[R]
navigator.serviceWorker.addEventListener(\[dq]messageerror\[dq], (event) \f[B]=>\f[R] {
  console.error(\[dq]Receive message from service worker failed!\[dq]);
});
.EE
.PP
Alternatively, the script can listen for the message deserialization
error using \f[CR]onmessageerror\f[R]:
.IP
.EX
\f[I]// main.js\f[R]
navigator.serviceWorker.onmessageerror = (event) \f[B]=>\f[R] {
  console.error(\[dq]Receive message from service worker failed!\[dq]);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]message\f[R]
.IP \[bu] 2
\f[CR]Client.postMessage()\f[R]
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \[bu] 2
Using Web Workers
