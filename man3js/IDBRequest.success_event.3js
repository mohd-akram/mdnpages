.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "IDBRequest.success_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBRequest.success_event \- IDBRequest: success event
.SH SYNOPSIS
The \f[CR]success\f[R] event is fired when an \f[CR]IDBRequest\f[R]
succeeds.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]success\[dq], (event) \f[B]=>\f[R] {});

onsuccess = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example tries to open a database and listens for the
\f[CR]success\f[R] event using \f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] openRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

openRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\[dq]Error creating database\[dq]);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
};

openRequest.addEventListener(\[dq]success\[dq], (event) \f[B]=>\f[R] {
  console.log(\[dq]Database opened successfully!\[dq]);
});
.EE
.PP
The same example, but using the \f[CR]onsuccess\f[R] event handler
property:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] openRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

openRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\[dq]Error creating database\[dq]);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
};

openRequest.onsuccess = (event) \f[B]=>\f[R] {
  console.log(\[dq]Database opened successfully!\[dq]);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
