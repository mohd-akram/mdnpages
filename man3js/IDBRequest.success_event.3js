.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBREQUEST.SUCCESS_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBRequest.success_event \- IDBRequest: success event
.SH SYNOPSIS
The \f[CR]success\f[R] event is fired when an \f[CR]IDBRequest\f[R]
succeeds.
In the \f[CR]success\f[R] event handler, you can access the result of
the request, as well as place more requests to the same transaction.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqsuccess\(dq, (event) => { })

onsuccess = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example tries to open a database and listens for the
\f[CR]success\f[R] event using \f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] openRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

openRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

openRequest.addEventListener(\(dqsuccess\(dq, (event) \f[B]=>\f[R] {
  console.log(\(dqDatabase opened successfully!\(dq);
});
.EE
.PP
The same example, but using the \f[CR]onsuccess\f[R] event handler
property:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] openRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

openRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

openRequest.onsuccess = (event) \f[B]=>\f[R] {
  console.log(\(dqDatabase opened successfully!\(dq);
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
