.\" Automatically generated by Pandoc 3.4
.\"
.TH "Node.appendChild" "JS" "November 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Node.appendChild \- Node: appendChild() method
.SH SYNOPSIS
The \f[B]\f[CB]appendChild()\f[B]\f[R] method of the \f[CR]Node\f[R]
interface adds a node to the end of the list of children of a specified
parent node.
.RS
.PP
\f[B]Note:\f[R] If the given child is a reference to an existing node in
the document, \f[CR]appendChild()\f[R] moves it from its current
position to the new position.
.RE
.PP
If the given child is a \f[CR]DocumentFragment\f[R], the entire contents
of the \f[CR]DocumentFragment\f[R] are moved into the child list of the
specified parent node.
.PP
\f[CR]appendChild()\f[R] returns the newly appended node, or if the
child is a \f[CR]DocumentFragment\f[R], the emptied fragment.
.RS
.PP
\f[B]Note:\f[R] Unlike this method, the \f[CR]Element.append()\f[R]
method supports multiple arguments and appending strings.
You can prefer using it if your node is an element.
.RE
.SH SYNTAX
.IP
.EX
appendChild(aChild)
.EE
.SS Parameters
.TP
\f[B]aChild\f[R]
The node to append to the given parent node (commonly an element).
.SS Return value
A \f[CR]Node\f[R] that is the appended child (\f[CR]aChild\f[R]), except
when \f[CR]aChild\f[R] is a \f[CR]DocumentFragment\f[R], in which case
the empty \f[CR]DocumentFragment\f[R] is returned.
.SS Exceptions
.TP
\f[B]HierarchyRequestError\f[R] \f[B]DOMException\f[R]
Thrown when the constraints of the DOM tree are violated, that is if one
of the following cases occurs:
.RS
.IP \[bu] 2
If the parent of \f[CR]aChild\f[R] is not a \f[CR]Document\f[R],
\f[CR]DocumentFragment\f[R], or an \f[CR]Element\f[R].
.IP \[bu] 2
If the insertion of \f[CR]aChild\f[R] would lead to a cycle, that is if
\f[CR]aChild\f[R] is an ancestor of the node.
.IP \[bu] 2
If \f[CR]aChild\f[R] is not a \f[CR]DocumentFragment\f[R], a
\f[CR]DocumentType\f[R], an \f[CR]Element\f[R], or a
\f[CR]CharacterData\f[R].
.IP \[bu] 2
If the current node is a \f[CR]Text\f[R], and its parent is a
\f[CR]Document\f[R].
.IP \[bu] 2
If the current node is a \f[CR]DocumentType\f[R] and its parent is
\f[I]not\f[R] a \f[CR]Document\f[R], as a \f[I]doctype\f[R] should
always be a direct descendant of a \f[I]document\f[R].
.IP \[bu] 2
If the parent of the node is a \f[CR]Document\f[R] and \f[CR]aChild\f[R]
is a \f[CR]DocumentFragment\f[R] with more than one \f[CR]Element\f[R]
child, or that has a \f[CR]Text\f[R] child.
.IP \[bu] 2
If the insertion of \f[CR]aChild\f[R] would lead to \f[CR]Document\f[R]
with more than one \f[CR]Element\f[R] as child.
.RE
.SH DESCRIPTION
If the given child is a reference to an existing node in the document,
\f[CR]appendChild()\f[R] moves it from its current position to the new
position \[em] there is no requirement to remove the node from its
parent node before appending it to some other node.
This means that a node can\[cq]t be in two points of the document
simultaneously.
The \f[CR]Node.cloneNode()\f[R] method can be used to make a copy of the
node before appending it under the new parent.
Copies made with \f[CR]cloneNode\f[R] are not automatically kept in
sync.
.PP
\f[CR]appendChild()\f[R] returns the newly appended node, instead of the
parent node.
This means you can append the new node as soon as it\[cq]s created
without losing reference to it:
.IP
.EX
\f[B]const\f[R] paragraph = document.body.appendChild(document.createElement(\[dq]p\[dq]));
\f[I]// You can append more elements to the paragraph later\f[R]
.EE
.PP
On the other hand, you cannot use \f[CR]appendChild()\f[R] in a \c
.UR https://en.wikipedia.org/wiki/Fluent_interface
fluent API
.UE \c
\ fashion (like jQuery).
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[I]// This doesn\[aq]t append three paragraphs:\f[R]
\f[I]// the three elements will be nested instead of siblings\f[R]
document.body
  .appendChild(document.createElement(\[dq]p\[dq]))
  .appendChild(document.createElement(\[dq]p\[dq]))
  .appendChild(document.createElement(\[dq]p\[dq]));
.EE
.SH EXAMPLE
.SS Append a paragraph to the body
.IP
.EX
\f[I]// Create a new paragraph element, and append it to the end of the document body\f[R]
\f[B]const\f[R] p = document.createElement(\[dq]p\[dq]);
document.body.appendChild(p);
.EE
.SS Creating a nested DOM structure
In this example, we attempt to create a nested DOM structure using as
few temporary variables as possible.
.IP
.EX
\f[B]const\f[R] fragment = document.createDocumentFragment();
\f[B]const\f[R] li = fragment
  .appendChild(document.createElement(\[dq]section\[dq]))
  .appendChild(document.createElement(\[dq]ul\[dq]))
  .appendChild(document.createElement(\[dq]li\[dq]));
li.textContent = \[dq]hello world\[dq];

document.body.appendChild(fragment);
.EE
.PP
It generates the following DOM tree:
.IP
.EX
<\f[B]section\f[R]>
  <\f[B]ul\f[R]>
    <\f[B]li\f[R]>hello world</\f[B]li\f[R]>
  </\f[B]ul\f[R]>
</\f[B]section\f[R]>
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Node.removeChild()\f[R]
.IP \[bu] 2
\f[CR]Node.replaceChild()\f[R]
.IP \[bu] 2
\f[CR]Node.insertBefore()\f[R]
.IP \[bu] 2
\f[CR]Node.hasChildNodes()\f[R]
.IP \[bu] 2
\f[CR]Element.insertAdjacentElement()\f[R]
.IP \[bu] 2
\f[CR]Element.append()\f[R]
