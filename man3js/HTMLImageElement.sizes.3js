.\" Automatically generated by Pandoc 3.4
.\"
.TH "HTMLImageElement.sizes" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLImageElement.sizes \- HTMLImageElement: sizes property
.SH SYNOPSIS
The \f[CR]HTMLImageElement\f[R] property \f[B]\f[CB]sizes\f[B]\f[R]
allows you to specify the layout width of the image for each of a list
of media conditions.
This provides the ability to automatically select among different
images\[em]even images of different orientations or aspect ratios\[em]as
the document state changes to match different media conditions.
.PP
Each condition is specified using the same conditional format used by
media queries.
.SH VALUE
A string containing a comma\-separated list of source size descriptors
followed by an optional fallback size.
Each \f[B]source size descriptor\f[R] is comprised of a media condition,
then at least one whitespace character, then the \f[B]source size
value\f[R] to use for the image when the media condition evaluates to
\f[CR]true\f[R].
.SS Media conditions
Each source size descriptor consists of a media condition as defined by
the media queries standard.
Because a source size descriptor is used to specify the width to use for
the image during layout of the page, the media condition is typically
(but not necessarily) based entirely on width information.
See Using media queries, Syntax for details on how to construct a media
condition.
.SS Source size values
The source size value is a CSS \f[CR]length\f[R].
It may be specified using font\-relative units (such as \f[CR]em\f[R] or
\f[CR]ex\f[R]), absolute units (such as \f[CR]px\f[R] or \f[CR]cm\f[R]),
or the \f[CR]vw\f[R] unit, which lets you specify the width as a
percentage of the viewport width (\f[CR]1vw\f[R] being 1% of the
viewport width).
.RS
.PP
\f[B]Note:\f[R] The source size value must \f[I]not\f[R] be specified as
a percentage of the container size; that is, lengths such as
\f[CR]50%\f[R] or \f[CR]100%\f[R] are not allowed, as there would be
uncertainty as to what the specified value is a percentage of.
.RE
.SH EXAMPLES
.SS Selecting an image to fit window width
In this example, a blog\-like layout is created, displaying some text
and an image for which three size points are specified, depending on the
width of the window.
Three versions of the image are also available, with their widths
specified.
The browser takes all of this information and selects an image and width
that best meets the specified values.
.PP
How exactly the images are used may depend upon the browser and the
pixel density of the user\[cq]s display.
.PP
Buttons at the bottom of the example let you actually modify the
\f[CR]sizes\f[R] property slightly, switching the largest of the three
widths for the image between 40em and 50em.
.SS HTML
.IP
.EX
<\f[B]article\f[R]>
  <\f[B]h1\f[R]>An amazing headline</\f[B]h1\f[R]>
  <\f[B]div\f[R] class=\[dq]test\[dq]></\f[B]div\f[R]>
  <\f[B]p\f[R]>
    This is even more amazing content text. It\[aq]s really spectacular. And
    fascinating. Oh, it\[aq]s also clever and witty. Award\-winning stuff, I\[aq]m sure.
  </\f[B]p\f[R]>
  <\f[B]img\f[R]
    src=\[dq]new\-york\-skyline\-wide.jpg\[dq]
    srcset=\[dq]
      new\-york\-skyline\-wide.jpg 3724w,
      new\-york\-skyline\-4by3.jpg 1961w,
      new\-york\-skyline\-tall.jpg 1060w
    \[dq]
    sizes=\[dq]((min\-width: 50em) and (max\-width: 60em)) 50em,
              ((min\-width: 30em) and (max\-width: 50em)) 30em,
              (max\-width: 30em) 20em\[dq]
    alt=\[dq]The New York City skyline on a beautiful day, with the One World Trade Center building in the middle.\[dq] />
  <\f[B]p\f[R]>
    Then there\[aq]s even more amazing stuff to say down here. Can you believe it? I
    sure can\[aq]t.
  </\f[B]p\f[R]>

  <\f[B]button\f[R] id=\[dq]break40\[dq]>Last Width: 40em</\f[B]button\f[R]>
  <\f[B]button\f[R] id=\[dq]break50\[dq]>Last Width: 50em</\f[B]button\f[R]>
</\f[B]article\f[R]>
.EE
.SS CSS
.IP
.EX
article {
  \f[B]margin\f[R]: 1em;
  \f[B]max\-width\f[R]: 60em;
  \f[B]min\-width\f[R]: 20em;
  \f[B]border\f[R]: 4em solid #880e4f;
  \f[B]border\-radius\f[R]: 7em;
  \f[B]padding\f[R]: 1.5em;
  \f[B]font\f[R]:
    16px \[dq]Open Sans\[dq],
    Verdana,
    Arial,
    Helvetica,
    sans\-serif;
}

article img {
  \f[B]display\f[R]: block;
  \f[B]max\-width\f[R]: 100%;
  \f[B]border\f[R]: 1px solid #888;
  \f[B]box\-shadow\f[R]: 0 0.5em 0.3em #888;
  \f[B]margin\-bottom\f[R]: 1.25em;
}
.EE
.SS JavaScript
The JavaScript code handles the two buttons that let you toggle the
third width option between 40em and 50em; this is done by handling the
\f[CR]click\f[R] event, using the JavaScript string \f[CR]replace()\f[R]
method to replace the relevant portion of the \f[CR]sizes\f[R] string.
.IP
.EX
\f[B]const\f[R] image = document.querySelector(\[dq]article img\[dq]);
\f[B]const\f[R] break40 = document.getElementById(\[dq]break40\[dq]);
\f[B]const\f[R] break50 = document.getElementById(\[dq]break50\[dq]);

break40.addEventListener(
  \[dq]click\[dq],
  () \f[B]=>\f[R] (image.sizes = image.sizes.replace(/50em,/, \[dq]40em,\[dq])),
);

break50.addEventListener(
  \[dq]click\[dq],
  () \f[B]=>\f[R] (image.sizes = image.sizes.replace(/40em,/, \[dq]50em,\[dq])),
);
.EE
.SS Result
The page is best viewed in its own window, so you can adjust the sizes
fully.
.SH SEE ALSO
.IP \[bu] 2
Media queries
.IP \[bu] 2
Using media queries
.IP \[bu] 2
HTML images
.IP \[bu] 2
Responsive images
.IP \[bu] 2
Using the \f[CR]srcset\f[R] and \f[CR]sizes\f[R] attributes
