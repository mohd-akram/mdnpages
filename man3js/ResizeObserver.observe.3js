.\" Automatically generated by Pandoc 3.4
.\"
.TH "ResizeObserver.observe" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ResizeObserver.observe \- ResizeObserver: observe() method
.SH SYNOPSIS
The \f[B]\f[CB]observe()\f[B]\f[R] method of the
\f[CR]ResizeObserver\f[R] interface starts observing the specified
\f[CR]Element\f[R] or \f[CR]SVGElement\f[R].
.SH SYNTAX
.IP
.EX
observe(target)
observe(target, options)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A reference to an \f[CR]Element\f[R] or \f[CR]SVGElement\f[R] to be
observed.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An options object allowing you to set options for the observation.
Currently this only has one possible option that can be set:
.RS
.TP
\f[B]box\f[R]
Sets which box model the observer will observe changes to.
Possible values are:
.RS
.TP
\f[B]content\-box\f[R] (the default)
Size of the content area as defined in CSS.
.TP
\f[B]border\-box\f[R]
Size of the box border area as defined in CSS.
.TP
\f[B]device\-pixel\-content\-box\f[R]
The size of the content area as defined in CSS, in device pixels, before
applying any CSS transforms on the element or its ancestors.
.RE
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
None.
.SH EXAMPLES
The following snippet is taken from the \c
.UR https://mdn.github.io/dom-examples/resize-observer/resize-observer-text.html
resize\-observer\-text.html
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/blob/main/resize-observer/resize-observer-text.html
see source
.UE \c
) example:
.IP
.EX
\f[B]const\f[R] resizeObserver = \f[B]new\f[R] ResizeObserver((entries) \f[B]=>\f[R] {
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] entries) {
    \f[B]if\f[R] (entry.contentBoxSize) {
      \f[I]// Checking for chrome as using a non\-standard array\f[R]
      \f[B]if\f[R] (entry.contentBoxSize[0]) {
        h1Elem.style.fontSize = \[ga]${Math.max(
          1.5,
          entry.contentBoxSize[0].inlineSize / 200,
        )}rem\[ga];
        pElem.style.fontSize = \[ga]${Math.max(
          1,
          entry.contentBoxSize[0].inlineSize / 600,
        )}rem\[ga];
      } \f[B]else\f[R] {
        h1Elem.style.fontSize = \[ga]${Math.max(
          1.5,
          entry.contentBoxSize.inlineSize / 200,
        )}rem\[ga];
        pElem.style.fontSize = \[ga]${Math.max(
          1,
          entry.contentBoxSize.inlineSize / 600,
        )}rem\[ga];
      }
    } \f[B]else\f[R] {
      h1Elem.style.fontSize = \[ga]${Math.max(
        1.5,
        entry.contentRect.width / 200,
      )}rem\[ga];
      pElem.style.fontSize = \[ga]${Math.max(1, entry.contentRect.width / 600)}rem\[ga];
    }
  }
  console.log(\[dq]Size changed\[dq]);
});

resizeObserver.observe(divElem);
.EE
.PP
An \f[CR]observe()\f[R] call with an options object would look like so:
.IP
.EX
resizeObserver.observe(divElem, { box: \[dq]border\-box\[dq] });
.EE
