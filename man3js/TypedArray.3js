'\" t
.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "TypedArray" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray \- TypedArray
.SH SYNOPSIS
A \f[B]\f[BI]TypedArray\f[B]\f[R] object describes an array\-like view
of an underlying binary data buffer.
There is no global property named \f[CR]TypedArray\f[R], nor is there a
directly visible \f[CR]TypedArray\f[R] constructor.
Instead, there are a number of different global properties, whose values
are typed array constructors for specific element types, listed below.
On the following pages you will find common properties and methods that
can be used with any typed array containing elements of any type.
.SH DESCRIPTION
The \f[CR]TypedArray\f[R] constructor (often referred to as
\f[CR]%TypedArray%\f[R] to indicate its \[lq]intrinsicness\[rq], since
it does not correspond to any global exposed to a JavaScript program)
serves as the common superclass of all \f[CR]TypedArray\f[R] subclasses.
Think about \f[CR]%TypedArray%\f[R] as an \[lq]abstract class\[rq]
providing a common interface of utility methods for all typed array
subclasses.
This constructor is not directly exposed: there is no global
\f[CR]TypedArray\f[R] property.
It is only accessible through
\f[CR]Object.getPrototypeOf(Int8Array)\f[R] and similar.
.PP
When creating an instance of a \f[CR]TypedArray\f[R] subclass
(e.g.\ \f[CR]Int8Array\f[R]), an array buffer is created internally in
memory or, if an \f[CR]ArrayBuffer\f[R] object is given as constructor
argument, that \f[CR]ArrayBuffer\f[R] is used instead.
The buffer address is saved as an internal property of the instance and
all the methods of \f[CR]%TypedArray%.prototype\f[R] will set and get
values based on that array buffer address.
.SS TypedArray objects
.PP
.TS
tab(@);
lw(21.3n) lw(25.4n) lw(8.9n) lw(14.4n).
T{
Type
T}@T{
Value Range
T}@T{
Size in bytes
T}@T{
Web IDL type
T}
_
T{
\f[CR]Int8Array\f[R]
T}@T{
\-128 to 127
T}@T{
1
T}@T{
\f[CR]byte\f[R]
T}
T{
\f[CR]Uint8Array\f[R]
T}@T{
0 to 255
T}@T{
1
T}@T{
\f[CR]octet\f[R]
T}
T{
\f[CR]Uint8ClampedArray\f[R]
T}@T{
0 to 255
T}@T{
1
T}@T{
\f[CR]octet\f[R]
T}
T{
\f[CR]Int16Array\f[R]
T}@T{
\-32768 to 32767
T}@T{
2
T}@T{
\f[CR]short\f[R]
T}
T{
\f[CR]Uint16Array\f[R]
T}@T{
0 to 65535
T}@T{
2
T}@T{
\f[CR]unsigned short\f[R]
T}
T{
\f[CR]Int32Array\f[R]
T}@T{
\-2147483648 to 2147483647
T}@T{
4
T}@T{
\f[CR]long\f[R]
T}
T{
\f[CR]Uint32Array\f[R]
T}@T{
0 to 4294967295
T}@T{
4
T}@T{
\f[CR]unsigned long\f[R]
T}
T{
\f[CR]Float32Array\f[R]
T}@T{
\f[CR]\-3.4e38\f[R] to \f[CR]3.4e38\f[R]
T}@T{
4
T}@T{
\f[CR]unrestricted float\f[R]
T}
T{
\f[CR]Float64Array\f[R]
T}@T{
\f[CR]\-1.8e308\f[R] to \f[CR]1.8e308\f[R]
T}@T{
8
T}@T{
\f[CR]unrestricted double\f[R]
T}
T{
\f[CR]BigInt64Array\f[R]
T}@T{
\-2\[ha]63 to 2\[ha]63 \- 1
T}@T{
8
T}@T{
\f[CR]bigint\f[R]
T}
T{
\f[CR]BigUint64Array\f[R]
T}@T{
0 to 2\[ha]64 \- 1
T}@T{
8
T}@T{
\f[CR]bigint\f[R]
T}
.TE
.SS Value encoding and normalization
All typed arrays operate on \f[CR]ArrayBuffer\f[R]s, where you can
observe the exact byte representation of each element, so how the
numbers are encoded in binary format is significant.
.IP \[bu] 2
Unsigned integer arrays (\f[CR]Uint8Array\f[R], \f[CR]Uint16Array\f[R],
\f[CR]Uint32Array\f[R], and \f[CR]BigUint64Array\f[R]) store the number
directly in binary.
.IP \[bu] 2
Signed integer arrays (\f[CR]Int8Array\f[R], \f[CR]Int16Array\f[R],
\f[CR]Int32Array\f[R], and \f[CR]BigInt64Array\f[R]) store the number
using \c
.UR https://en.wikipedia.org/wiki/Two's_complement
two\[cq]s complement
.UE \c
\&.
.IP \[bu] 2
Floating\-point arrays (\f[CR]Float32Array\f[R] and
\f[CR]Float64Array\f[R]) store the number using \c
.UR https://en.wikipedia.org/wiki/IEEE_754
IEEE 754
.UE \c
\ floating\-point format.
The \f[CR]Number\f[R] reference has more information about the exact
format.
JavaScript numbers use double precision floating point format by
default, which is the same as \f[CR]Float64Array\f[R].
\f[CR]Float32Array\f[R] uses 23 (instead of 52) bits for the mantissa
and 8 (instead of 11) bits for the exponent.
Note that the spec requires all \f[CR]NaN\f[R] values to use the same
bit encoding, but the exact bit pattern is implementation\-dependent.
.IP \[bu] 2
\f[CR]Uint8ClampedArray\f[R] is a special case.
It stores the number in binary like \f[CR]Uint8Array\f[R] does, but when
you store a number outside the range, it \f[I]clamps\f[R] the number to
the range 0 to 255 by mathematical value, instead of truncating the most
significant bits.
.PP
All typed arrays except \f[CR]Int8Array\f[R], \f[CR]Uint8Array\f[R], and
\f[CR]Uint8ClampedArray\f[R] store each element using multiple bytes.
These bytes can either be ordered from most significant to least
significant (big\-endian) or from least significant to most significant
(little\-endian).
See Endianness for more explanation.
Typed arrays always use the platform\[cq]s native byte order.
If you want to specify the endianness when writing and reading from
buffers, you should use a \f[CR]DataView\f[R] instead.
.PP
When writing to these typed arrays, values that are outside the
representable range are normalized.
.IP \[bu] 2
All integer arrays (except \f[CR]Uint8ClampedArray\f[R]) use
fixed\-width number conversion, which first truncates the decimal part
of the number and then takes the lowest bits.
.IP \[bu] 2
\f[CR]Uint8ClampedArray\f[R] first clamps the number to the range 0 to
255 (values greater than 255 become 255 and values less than 0 become
0).
It then \f[I]rounds\f[R] (instead of flooring) the result to the nearest
integer, with half\-to\-even; meaning if the number is exactly between
two integers, it rounds to the nearest even integer.
For example, \f[CR]0.5\f[R] becomes \f[CR]0\f[R], \f[CR]1.5\f[R] becomes
\f[CR]2\f[R], and \f[CR]2.5\f[R] becomes \f[CR]2\f[R].
.IP \[bu] 2
\f[CR]Float32Array\f[R] performs a \[lq]round to even\[rq] to convert
64\-bit floating point numbers to 32\-bit.
This is the same algorithm as provided by \f[CR]Math.fround()\f[R].
.SS Behavior when viewing a resizable buffer
When a \f[CR]TypedArray\f[R] is created as a view of a resizable buffer,
resizing the underlying buffer will have different effects on the size
of the \f[CR]TypedArray\f[R] depending on whether the
\f[CR]TypedArray\f[R] is constructed as length\-tracking.
.PP
If a typed array is created without a specific size by omitting the
third parameter or passing \f[CR]undefined\f[R], the typed array will
become \f[I]length\-tracking\f[R], and will automatically resize to fit
the underlying \f[CR]buffer\f[R] as the latter is resized:
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8, { maxByteLength: 16 });
\f[B]const\f[R] float32 = \f[B]new\f[R] Float32Array(buffer);

console.log(float32.byteLength); \f[I]// 8\f[R]
console.log(float32.length); \f[I]// 2\f[R]

buffer.resize(12);

console.log(float32.byteLength); \f[I]// 12\f[R]
console.log(float32.length); \f[I]// 3\f[R]
.EE
.PP
If a typed array is created with a specific size using the third
\f[CR]length\f[R] parameter, it won\[cq]t resize to contain the
\f[CR]buffer\f[R] as the latter is grown:
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8, { maxByteLength: 16 });
\f[B]const\f[R] float32 = \f[B]new\f[R] Float32Array(buffer, 0, 2);

console.log(float32.byteLength); \f[I]// 8\f[R]
console.log(float32.length); \f[I]// 2\f[R]
console.log(float32[0]); \f[I]// 0, the initial value\f[R]

buffer.resize(12);

console.log(float32.byteLength); \f[I]// 8\f[R]
console.log(float32.length); \f[I]// 2\f[R]
console.log(float32[0]); \f[I]// 0, the initial value\f[R]
.EE
.PP
When a \f[CR]buffer\f[R] is shrunk, the viewing typed array may become
out of bounds, in which case the typed array\[cq]s observed size will
decrease to 0.
This is the only case where a non\-length\-tracking typed array\[cq]s
length may change.
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8, { maxByteLength: 16 });
\f[B]const\f[R] float32 = \f[B]new\f[R] Float32Array(buffer, 0, 2);

buffer.resize(7);

console.log(float32.byteLength); \f[I]// 0\f[R]
console.log(float32.length); \f[I]// 0\f[R]
console.log(float32[0]); \f[I]// undefined\f[R]
.EE
.PP
If you then grow the \f[CR]buffer\f[R] again to bring the typed array
back in bounds, the typed array\[cq]s size will be restored to its
original value.
.IP
.EX
buffer.resize(8);

console.log(float32.byteLength); \f[I]// 8\f[R]
console.log(float32.length); \f[I]// 2\f[R]
console.log(float32[0]); \f[I]// 0 \- back in bounds again!\f[R]
.EE
.PP
The same can happen for length\-tracking typed arrays as well, if the
buffer is shrunk beyond the \f[CR]byteOffset\f[R].
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8, { maxByteLength: 16 });
\f[B]const\f[R] float32 = \f[B]new\f[R] Float32Array(buffer, 4);
\f[I]// float32 is length\-tracking, but it only extends from the 4th byte\f[R]
\f[I]// to the end of the buffer, so if the buffer is resized to be shorter\f[R]
\f[I]// than 4 bytes, the typed array will become out of bounds\f[R]
buffer.resize(3);
console.log(float32.byteLength); \f[I]// 0\f[R]
.EE
.SH CONSTRUCTOR
This object cannot be instantiated directly \[em] attempting to
construct it with \f[CR]new\f[R] throws a \f[CR]TypeError\f[R].
.IP
.EX
\f[B]new\f[R] (Object.getPrototypeOf(Int8Array))();
\f[I]// TypeError: Abstract class TypedArray not directly constructable\f[R]
.EE
.PP
Instead, you create an instance of a typed array of a particular type,
such as an \f[CR]Int8Array\f[R] or a \f[CR]BigInt64Array\f[R].
These objects all have a common syntax for their constructors:
.IP
.EX
new TypedArray()
new TypedArray(length)
new TypedArray(typedArray)
new TypedArray(object)

new TypedArray(buffer)
new TypedArray(buffer, byteOffset)
new TypedArray(buffer, byteOffset, length)
.EE
.PP
Where \f[CR]TypedArray\f[R] is a constructor for one of the concrete
types.
.RS
.PP
\f[B]Note:\f[R] All \f[CR]TypedArray\f[R] subclasses\[cq] constructors
can only be constructed with \f[CR]new\f[R].
Attempting to call one without \f[CR]new\f[R] throws a
\f[CR]TypeError\f[R].
.RE
.SS Parameters
.TP
\f[B]typedArray\f[R]
When called with an instance of a \f[CR]TypedArray\f[R] subclass, the
\f[CR]typedArray\f[R] gets copied into a new typed array.
For a non\-bigint \f[CR]TypedArray\f[R] constructor, the
\f[CR]typedArray\f[R] parameter can only be of one of the non\-bigint
types (such as \f[CR]Int32Array\f[R]).
Similarly, for a bigint \f[CR]TypedArray\f[R] constructor
(\f[CR]BigInt64Array\f[R] or \f[CR]BigUint64Array\f[R]), the
\f[CR]typedArray\f[R] parameter can only be of one of the bigint types.
Each value in \f[CR]typedArray\f[R] is converted to the corresponding
type of the constructor before being copied into the new array.
The length of the new typed array will be same as the length of the
\f[CR]typedArray\f[R] argument.
.TP
\f[B]object\f[R]
When called with an object that\[cq]s not a \f[CR]TypedArray\f[R]
instance, a new typed array is created in the same way as the
\f[CR]TypedArray.from()\f[R] method.
.TP
\f[B]length\f[R] \f[I](optional)\f[R]
When called with a non\-object, the parameter will be treated as a
number specifying the length of the typed array.
An internal array buffer is created in memory, of size \f[CR]length\f[R]
multiplied by \f[CR]BYTES_PER_ELEMENT\f[R] bytes, filled with zeros.
Omitting all parameters is equivalent to using \f[CR]0\f[R] as
\f[CR]length\f[R].
.TP
\f[B]buffer\f[R], \f[B]byteOffset\f[R] \f[I](optional)\f[R], \f[B]length\f[R] \f[I](optional)\f[R]
When called with an \f[CR]ArrayBuffer\f[R] or
\f[CR]SharedArrayBuffer\f[R] instance, and optionally a
\f[CR]byteOffset\f[R] and a \f[CR]length\f[R] argument, a new typed
array view is created that views the specified buffer.
The \f[CR]byteOffset\f[R] (in bytes) and \f[CR]length\f[R] (in number of
elements, each occupying \f[CR]BYTES_PER_ELEMENT\f[R] bytes) parameters
specify the memory range that will be exposed by the typed array view.
If both are omitted, all of \f[CR]buffer\f[R] is viewed; if only
\f[CR]length\f[R] is omitted, the remainder of \f[CR]buffer\f[R]
starting from \f[CR]byteOffset\f[R] is viewed.
If \f[CR]length\f[R] is omitted, the typed array becomes
length\-tracking.
.SS Exceptions
All \f[CR]TypeArray\f[R] subclass constructors operate in the same way.
They would all throw the following exceptions:
.TP
\f[B]TypeError\f[R]
Thrown in one of the following cases:
.RS
.IP \[bu] 2
A \f[CR]typedArray\f[R] is passed but it is a bigint type while the
current constructor is not, or vice versa.
.IP \[bu] 2
A \f[CR]typedArray\f[R] is passed but the buffer it\[cq]s viewing is
detached, or a detached \f[CR]buffer\f[R] is directly passed.
.RE
.TP
\f[B]RangeError\f[R]
Thrown in one of the following cases:
.RS
.IP \[bu] 2
The new typed array\[cq]s length is too large.
.IP \[bu] 2
The length of \f[CR]buffer\f[R] (if the \f[CR]length\f[R] parameter is
not specified) or \f[CR]byteOffset\f[R] is not an integral multiple of
the new typed array\[cq]s element size.
.IP \[bu] 2
\f[CR]byteOffset\f[R] is not a valid array index (an integer between 0
and 2\[ha]53 \- 1).
.IP \[bu] 2
When creating a view from a buffer, the bounds are outside the buffer.
In other words,
\f[CR]byteOffset + length * TypedArray.BYTES_PER_ELEMENT > buffer.byteLength\f[R].
.RE
.SH STATIC PROPERTIES
These properties are defined on the \f[CR]TypedArray\f[R] constructor
object and are thus shared by all \f[CR]TypedArray\f[R] subclass
constructors.
.TP
\f[B]TypedArray[\[at]\[at]species]\f[R]
The constructor function used to create derived objects.
.PP
All \f[CR]TypedArray\f[R] subclasses also have the following static
properties:
.TP
\f[B]TypedArray.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size for the different
\f[CR]TypedArray\f[R] objects.
.SH STATIC METHODS
These methods are defined on the \f[CR]TypedArray\f[R] constructor
object and are thus shared by all \f[CR]TypedArray\f[R] subclass
constructors.
.TP
\f[B]TypedArray.from()\f[R]
Creates a new \f[CR]TypedArray\f[R] from an array\-like or iterable
object.
See also \f[CR]Array.from()\f[R].
.TP
\f[B]TypedArray.of()\f[R]
Creates a new \f[CR]TypedArray\f[R] with a variable number of arguments.
See also \f[CR]Array.of()\f[R].
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]TypedArray.prototype\f[R] and
shared by all \f[CR]TypedArray\f[R] subclass instances.
.TP
\f[B]TypedArray.prototype.buffer\f[R]
Returns the \f[CR]ArrayBuffer\f[R] referenced by the typed array.
.TP
\f[B]TypedArray.prototype.byteLength\f[R]
Returns the length (in bytes) of the typed array.
.TP
\f[B]TypedArray.prototype.byteOffset\f[R]
Returns the offset (in bytes) of the typed array from the start of its
\f[CR]ArrayBuffer\f[R].
.TP
\f[B]TypedArray.prototype.constructor\f[R]
The constructor function that created the instance object.
\f[CR]TypedArray.prototype.constructor\f[R] is the hidden
\f[CR]TypedArray\f[R] constructor function, but each typed array
subclass also defines its own \f[CR]constructor\f[R] property.
.TP
\f[B]TypedArray.prototype.length\f[R]
Returns the number of elements held in the typed array.
.TP
\f[B]TypedArray.prototype[\[at]\[at]toStringTag]\f[R]
The initial value of the
\f[CR]TypedArray.prototype[\[at]\[at]toStringTag]\f[R] property is a
getter that returns the same string as the typed array constructor\[cq]s
name.
It returns \f[CR]undefined\f[R] if the \f[CR]this\f[R] value is not one
of the typed array subclasses.
This property is used in \f[CR]Object.prototype.toString()\f[R].
However, because \f[CR]TypedArray\f[R] also has its own
\f[CR]toString()\f[R] method, this property is not used unless you call
\f[CR]Object.prototype.toString.call()\f[R] with a typed array as
\f[CR]thisArg\f[R].
.PP
All \f[CR]TypedArray\f[R] subclasses also have the following instance
properties:
.TP
\f[B]TypedArray.prototype.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size for the different
\f[CR]TypedArray\f[R] objects.
.SH INSTANCE METHODS
These methods are defined on the \f[CR]TypedArray\f[R] prototype object
and are thus shared by all \f[CR]TypedArray\f[R] subclass instances.
.TP
\f[B]TypedArray.prototype.at()\f[R]
Takes an integer value and returns the item at that index.
This method allows for negative integers, which count back from the last
item.
.TP
\f[B]TypedArray.prototype.copyWithin()\f[R]
Copies a sequence of array elements within the array.
See also \f[CR]Array.prototype.copyWithin()\f[R].
.TP
\f[B]TypedArray.prototype.entries()\f[R]
Returns a new \f[I]array iterator\f[R] object that contains the
key/value pairs for each index in the array.
See also \f[CR]Array.prototype.entries()\f[R].
.TP
\f[B]TypedArray.prototype.every()\f[R]
Tests whether all elements in the array pass the test provided by a
function.
See also \f[CR]Array.prototype.every()\f[R].
.TP
\f[B]TypedArray.prototype.fill()\f[R]
Fills all the elements of an array from a start index to an end index
with a static value.
See also \f[CR]Array.prototype.fill()\f[R].
.TP
\f[B]TypedArray.prototype.filter()\f[R]
Creates a new array with all of the elements of this array for which the
provided filtering function returns \f[CR]true\f[R].
See also \f[CR]Array.prototype.filter()\f[R].
.TP
\f[B]TypedArray.prototype.find()\f[R]
Returns the first \f[CR]element\f[R] in the array that satisfies a
provided testing function, or \f[CR]undefined\f[R] if no appropriate
element is found.
See also \f[CR]Array.prototype.find()\f[R].
.TP
\f[B]TypedArray.prototype.findIndex()\f[R]
Returns the first index value in the array that has an element that
satisfies a provided testing function, or \f[CR]\-1\f[R] if no
appropriate element was found.
See also \f[CR]Array.prototype.findIndex()\f[R].
.TP
\f[B]TypedArray.prototype.findLast()\f[R]
Returns the value of the last element in the array that satisfies a
provided testing function, or \f[CR]undefined\f[R] if no appropriate
element is found.
See also \f[CR]Array.prototype.findLast()\f[R].
.TP
\f[B]TypedArray.prototype.findLastIndex()\f[R]
Returns the index of the last element in the array that satisfies a
provided testing function, or \f[CR]\-1\f[R] if no appropriate element
was found.
See also \f[CR]Array.prototype.findLastIndex()\f[R].
.TP
\f[B]TypedArray.prototype.forEach()\f[R]
Calls a function for each element in the array.
See also \f[CR]Array.prototype.forEach()\f[R].
.TP
\f[B]TypedArray.prototype.includes()\f[R]
Determines whether a typed array includes a certain element, returning
\f[CR]true\f[R] or \f[CR]false\f[R] as appropriate.
See also \f[CR]Array.prototype.includes()\f[R].
.TP
\f[B]TypedArray.prototype.indexOf()\f[R]
Returns the first (least) index of an element within the array equal to
the specified value, or \f[CR]\-1\f[R] if none is found.
See also \f[CR]Array.prototype.indexOf()\f[R].
.TP
\f[B]TypedArray.prototype.join()\f[R]
Joins all elements of an array into a string.
See also \f[CR]Array.prototype.join()\f[R].
.TP
\f[B]TypedArray.prototype.keys()\f[R]
Returns a new array iterator that contains the keys for each index in
the array.
See also \f[CR]Array.prototype.keys()\f[R].
.TP
\f[B]TypedArray.prototype.lastIndexOf()\f[R]
Returns the last (greatest) index of an element within the array equal
to the specified value, or \f[CR]\-1\f[R] if none is found.
See also \f[CR]Array.prototype.lastIndexOf()\f[R].
.TP
\f[B]TypedArray.prototype.map()\f[R]
Creates a new array with the results of calling a provided function on
every element in this array.
See also \f[CR]Array.prototype.map()\f[R].
.TP
\f[B]TypedArray.prototype.reduce()\f[R]
Apply a function against an accumulator and each value of the array
(from left\-to\-right) as to reduce it to a single value.
See also \f[CR]Array.prototype.reduce()\f[R].
.TP
\f[B]TypedArray.prototype.reduceRight()\f[R]
Apply a function against an accumulator and each value of the array
(from right\-to\-left) as to reduce it to a single value.
See also \f[CR]Array.prototype.reduceRight()\f[R].
.TP
\f[B]TypedArray.prototype.reverse()\f[R]
Reverses the order of the elements of an array \[em] the first becomes
the last, and the last becomes the first.
See also \f[CR]Array.prototype.reverse()\f[R].
.TP
\f[B]TypedArray.prototype.set()\f[R]
Stores multiple values in the typed array, reading input values from a
specified array.
.TP
\f[B]TypedArray.prototype.slice()\f[R]
Extracts a section of an array and returns a new array.
See also \f[CR]Array.prototype.slice()\f[R].
.TP
\f[B]TypedArray.prototype.some()\f[R]
Returns \f[CR]true\f[R] if at least one element in this array satisfies
the provided testing function.
See also \f[CR]Array.prototype.some()\f[R].
.TP
\f[B]TypedArray.prototype.sort()\f[R]
Sorts the elements of an array in place and returns the array.
See also \f[CR]Array.prototype.sort()\f[R].
.TP
\f[B]TypedArray.prototype.subarray()\f[R]
Returns a new \f[CR]TypedArray\f[R] from the given start and end element
index.
.TP
\f[B]TypedArray.prototype.toLocaleString()\f[R]
Returns a localized string representing the array and its elements.
See also \f[CR]Array.prototype.toLocaleString()\f[R].
.TP
\f[B]TypedArray.prototype.toReversed()\f[R]
Returns a new array with the elements in reversed order, without
modifying the original array.
.TP
\f[B]TypedArray.prototype.toSorted()\f[R]
Returns a new array with the elements sorted in ascending order, without
modifying the original array.
.TP
\f[B]TypedArray.prototype.toString()\f[R]
Returns a string representing the array and its elements.
See also \f[CR]Array.prototype.toString()\f[R].
.TP
\f[B]TypedArray.prototype.values()\f[R]
Returns a new \f[I]array iterator\f[R] object that contains the values
for each index in the array.
See also \f[CR]Array.prototype.values()\f[R].
.TP
\f[B]TypedArray.prototype.with()\f[R]
Returns a new array with the element at the given index replaced with
the given value, without modifying the original array.
.TP
\f[B]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
Returns a new \f[I]array iterator\f[R] object that contains the values
for each index in the array.
.SH EXAMPLES
.SS Property access
You can reference elements in the array using standard array index
syntax (that is, using bracket notation).
However, getting or setting indexed properties on typed arrays will not
search in the prototype chain for this property, even when the indices
are out of bound.
Indexed properties will consult the \f[CR]ArrayBuffer\f[R] and will
never look at object properties.
You can still use named properties, just like with all objects.
.IP
.EX
\f[I]// Setting and getting using standard array syntax\f[R]
\f[B]const\f[R] int16 = \f[B]new\f[R] Int16Array(2);
int16[0] = 42;
console.log(int16[0]); \f[I]// 42\f[R]

\f[I]// Indexed properties on prototypes are not consulted (Fx 25)\f[R]
Int8Array.prototype[20] = \[dq]foo\[dq];
\f[B]new\f[R] Int8Array(32)[20]; \f[I]// 0\f[R]
\f[I]// even when out of bound\f[R]
Int8Array.prototype[20] = \[dq]foo\[dq];
\f[B]new\f[R] Int8Array(8)[20]; \f[I]// undefined\f[R]
\f[I]// or with negative integers\f[R]
Int8Array.prototype[\-1] = \[dq]foo\[dq];
\f[B]new\f[R] Int8Array(8)[\-1]; \f[I]// undefined\f[R]

\f[I]// Named properties are allowed, though (Fx 30)\f[R]
Int8Array.prototype.foo = \[dq]bar\[dq];
\f[B]new\f[R] Int8Array(32).foo; \f[I]// \[dq]bar\[dq]\f[R]
.EE
.SS Cannot be frozen
\f[CR]TypedArray\f[R]s that aren\[cq]t empty cannot be frozen, as their
underlying \f[CR]ArrayBuffer\f[R] could be mutated through another
\f[CR]TypedArray\f[R] view of the buffer.
This would mean that the object would never genuinely be frozen.
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] i8 = Int8Array.of(1, 2, 3);
Object.freeze(i8);
\f[I]// TypeError: Cannot freeze array buffer views with elements\f[R]
.EE
.SS ByteOffset must be aligned
When constructing a \f[CR]TypedArray\f[R] as a view onto an
\f[CR]ArrayBuffer\f[R], the \f[CR]byteOffset\f[R] argument must be
aligned to its element size; in other words, the offset must be a
multiple of \f[CR]BYTES_PER_ELEMENT\f[R].
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] i32 = \f[B]new\f[R] Int32Array(\f[B]new\f[R] ArrayBuffer(4), 1);
\f[I]// RangeError: start offset of Int32Array should be a multiple of 4\f[R]
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] i32 = \f[B]new\f[R] Int32Array(\f[B]new\f[R] ArrayBuffer(4), 0);
.EE
.SS ByteLength must be aligned
Like the \f[CR]byteOffset\f[R] parameter, the \f[CR]byteLength\f[R]
property of an \f[CR]ArrayBuffer\f[R] passed to a
\f[CR]TypedArray\f[R]\[cq]s constructor must be a multiple of the
constructor\[cq]s \f[CR]BYTES_PER_ELEMENT\f[R].
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] i32 = \f[B]new\f[R] Int32Array(\f[B]new\f[R] ArrayBuffer(3));
\f[I]// RangeError: byte length of Int32Array should be a multiple of 4\f[R]
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] i32 = \f[B]new\f[R] Int32Array(\f[B]new\f[R] ArrayBuffer(4));
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of typed arrays in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]DataView\f[R]
.IP \[bu] 2
\f[CR]TextDecoder\f[R]
