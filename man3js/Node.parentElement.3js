.\" Automatically generated by Pandoc 3.4
.\"
.TH "Node.parentElement" "JS" "July 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Node.parentElement \- Node: parentElement property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]parentElement\f[B]\f[R] property of
\f[CR]Node\f[R] interface returns the DOM node\[cq]s parent
\f[CR]Element\f[R], or \f[CR]null\f[R] if the node either has no parent,
or its parent isn\[cq]t a DOM \f[CR]Element\f[R].
\f[CR]Node.parentNode\f[R] on the other hand returns any kind of parent,
regardless of its type.
.SH VALUE
An \f[CR]Element\f[R] that is the parent element of the current node, or
\f[CR]null\f[R] if there isn\[cq]t one.
.SH EXAMPLE
.SS Using parentElement
This example sets the parent of \f[CR]node\f[R] to have a red text
color.
.IP
.EX
\f[B]if\f[R] (node.parentElement) {
  node.parentElement.style.color = \[dq]red\[dq];
}
.EE
.SS parentElement being null
\f[CR]parentElement\f[R] can be \f[CR]null\f[R] if the node has no
parent (for example, because it isn\[cq]t attached to a tree) or its
parent is not an \f[CR]Element\f[R].
On the other hand, \f[CR]Node.parentNode\f[R] always returns the parent
node, which may be a \f[CR]Document\f[R] or other node types.
.IP
.EX
<!doctype html>
<\f[B]html\f[R]>
  <\f[B]body\f[R]>
    <\f[B]script\f[R]>
      \f[B]const\f[R] html = document.querySelector(\[dq]html\[dq]);
      console.log(html.parentElement); \f[I]// null\f[R]
      console.log(html.parentNode); \f[I]// document\f[R]
    </\f[B]script\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Node.parentNode\f[R]
