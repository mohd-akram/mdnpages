.\" Automatically generated by Pandoc 3.4
.\"
.TH "StylePropertyMapReadOnly.get" "JS" "April 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
StylePropertyMapReadOnly.get \- StylePropertyMapReadOnly: get() method
.SH SYNOPSIS
The \f[B]\f[CB]get()\f[B]\f[R] method of the
\f[CR]StylePropertyMapReadOnly\f[R] interface returns a
\f[CR]CSSStyleValue\f[R] object for the first value of the specified
property.
.SH SYNTAX
.IP
.EX
get(property)
.EE
.SS Parameters
.TP
\f[B]property\f[R]
The name of the property to retrieve the value of.
.SS Return value
A \f[CR]CSSStyleValue\f[R] object.
.SH EXAMPLES
Let\[cq]s get just a few properties and values.
Let\[cq]s start by creating a link inside a paragraph in our HTML, and
adding a definition list which we will populate with JavaScript:
.IP
.EX
<\f[B]p\f[R]>
  <\f[B]a\f[R] href=\[dq]https://example.com\[dq]>Link</\f[B]a\f[R]>
</\f[B]p\f[R]>
<\f[B]dl\f[R] id=\[dq]results\[dq]></\f[B]dl\f[R]>
.EE
.PP
We add a bit of CSS, including a custom property and an inheritable
property:
.IP
.EX
p {
  \f[B]font\-weight\f[R]: bold;
}
a {
  \-\-color: red;
  \f[B]color\f[R]: var(\-\-color);
}
.EE
.PP
We use the Element\[cq]s \f[CR]computedStyleMap()\f[R] to return a
\f[I]StylePropertyMapReadOnly\f[R] object.
We create an array of properties of interest and use the
StylePropertyMapReadOnly\[cq]s \f[CR]get()\f[R] method to get only those
values.
.IP
.EX
\f[I]// get the element\f[R]
\f[B]const\f[R] myElement = document.querySelector(\[dq]a\[dq]);

\f[I]// Retrieve all computed styles with computedStyleMap()\f[R]
\f[B]const\f[R] styleMap = myElement.computedStyleMap();

\f[I]// get the <dl> we\[aq]ll be populating\f[R]
\f[B]const\f[R] stylesList = document.querySelector(\[dq]#results\[dq]);

\f[I]// array of properties we\[aq]re interested in\f[R]
\f[B]const\f[R] ofInterest = [\[dq]font\-weight\[dq], \[dq]border\-left\-color\[dq], \[dq]color\[dq], \[dq]\-\-color\[dq]];

\f[I]// iterate over our properties of interest\f[R]
\f[B]for\f[R] (\f[B]const\f[R] property \f[B]of\f[R] ofInterest) {
  \f[I]// properties\f[R]
  \f[B]const\f[R] cssProperty = document.createElement(\[dq]dt\[dq]);
  cssProperty.innerText = property;
  stylesList.appendChild(cssProperty);

  \f[I]// values\f[R]
  \f[B]const\f[R] cssValue = document.createElement(\[dq]dd\[dq]);
  \f[I]// use get() to find the value\f[R]
  cssValue.innerText = styleMap.get(property);
  stylesList.appendChild(cssValue);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
CSS Typed Object Model API
.IP \[bu] 2
Learning Houdini: the CSS Typed Object Model
