.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Highlight.values" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Highlight.values \- Highlight: values() method
.SH SYNOPSIS
The \f[B]\f[CB]values()\f[B]\f[R] method of the \f[CR]Highlight\f[R]
interface returns a new Iterator object that contains the values for
each \f[CR]Range\f[R] object in the \f[CR]Highlight\f[R] object in
insertion order.
.RS
.PP
\f[B]Note:\f[R] The \f[B]\f[CB]keys()\f[B]\f[R] method is an alias for
this method.
It behaves exactly the same and returns \f[B]values\f[R] of
\f[CR]Highlight\f[R] elements.
.RE
.PP
\f[CR]Highlight\f[R] is a \f[CR]Set\f[R]\-like object, so this is
similar to using \f[CR]Set.values()\f[R].
.SH SYNTAX
.IP
.EX
values()
.EE
.SS Return value
A new iterator object containing each \f[CR]Range\f[R] object in the
given \f[CR]Highlight\f[R], in insertion order.
.SH EXAMPLES
The following code snippet shows how to create a new
\f[CR]Highlight\f[R] object with three \f[CR]Range\f[R] objects, and use
the iterator returned by the \f[CR]values()\f[R] method to log the three
ranges:
.IP
.EX
\f[B]const\f[R] myHighlight = \f[B]new\f[R] Highlight();
myHighlight.add(\f[B]new\f[R] Range());
myHighlight.add(\f[B]new\f[R] Range());
myHighlight.add(\f[B]new\f[R] Range());

\f[B]const\f[R] iter = myHighlight.values();

\f[B]for\f[R] (value \f[B]of\f[R] iter) {
  console.log(value); \f[I]// Range\f[R]
}
.EE
.SH SEE ALSO
.IP \[bu] 2
The CSS Custom Highlight API
.IP \[bu] 2
\c
.UR https://css-tricks.com/css-custom-highlight-api-early-look/
CSS Custom Highlight API: The Future of Highlighting Text Ranges on the
Web
.UE \c
