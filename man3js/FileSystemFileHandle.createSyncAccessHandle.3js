.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "FileSystemFileHandle.createSyncAccessHandle" "JS" "April 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemFileHandle.createSyncAccessHandle \- FileSystemFileHandle:
createSyncAccessHandle() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is only available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]createSyncAccessHandle()\f[B]\f[R] method of the
\f[CR]FileSystemFileHandle\f[R] interface returns a \f[CR]Promise\f[R]
which resolves to a \f[CR]FileSystemSyncAccessHandle\f[R] object that
can be used to synchronously read from and write to a file.
The synchronous nature of this method brings performance advantages, but
it is only usable inside dedicated Web Workers for files within the
origin private file system.
.PP
Creating a \f[CR]FileSystemSyncAccessHandle\f[R] takes an exclusive lock
on the file associated with the file handle.
This prevents the creation of further
\f[CR]FileSystemSyncAccessHandle\f[R]s or
\f[CR]FileSystemWritableFileStream\f[R]s for the file until the existing
access handle is closed.
.SH SYNTAX
.IP
.EX
createSyncAccessHandle()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] which resolves to a
\f[CR]FileSystemSyncAccessHandle\f[R] object.
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]PermissionStatus.state\f[R] for the handle is not
\f[CR]granted\f[R] in \f[CR]readwrite\f[R] mode.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]FileSystemSyncAccessHandle\f[R] object does not
represent a file in the origin private file system.
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if current entry is not found.
.TP
\f[B]NoModificationAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if the browser is not able to acquire a lock on the file
associated with the file handle.
.SH EXAMPLES
The following asynchronous event handler function is contained inside a
Web Worker.
The snippet inside it creates a synchronous file access handle.
.IP
.EX
onmessage = \f[B]async\f[R] (e) \f[B]=>\f[R] {
  \f[I]// Retrieve message sent to work from main script\f[R]
  \f[B]const\f[R] message = e.data;

  \f[I]// Get handle to draft file\f[R]
  \f[B]const\f[R] root = \f[B]await\f[R] navigator.storage.getDirectory();
  \f[B]const\f[R] draftHandle = \f[B]await\f[R] root.getFileHandle(\[dq]draft.txt\[dq], { create: \f[B]true\f[R] });
  \f[I]// Get sync access handle\f[R]
  \f[B]const\f[R] accessHandle = \f[B]await\f[R] draftHandle.createSyncAccessHandle();

  \f[I]// \&...\f[R]

  \f[I]// Always close FileSystemSyncAccessHandle if done.\f[R]
  accessHandle.close();
};
.EE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
