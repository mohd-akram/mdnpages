.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "TYPEDARRAY.FINDLASTINDEX" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.findLastIndex \- TypedArray.prototype.findLastIndex()
.SH SYNOPSIS
The \f[B]\f[CB]findLastIndex()\f[B]\f[R] method of \f[CR]TypedArray\f[R]
instances iterates the typed array in reverse order and returns the
index of the first element that satisfies the provided testing function.
If no elements satisfy the testing function, \-1 is returned.
This method has the same algorithm as
\f[CR]Array.prototype.findLastIndex()\f[R].
.IP
.EX
\f[B]function\f[R] isNegative(element \f[I]/*, index, array */\f[R]) {
  \f[B]return\f[R] element < 0;
}

\f[B]const\f[R] int8 = \f[B]new\f[R] Int8Array([10, \-20, 30, \-40, 50]);

console.log(int8.findLastIndex(isNegative));
\f[I]// Expected output: 3\f[R]
.EE
.SH SYNTAX
.IP
.EX
findLastIndex(callbackFn)
findLastIndex(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the typed array.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the typed array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the typed array.
.TP
\f[B]array\f[R]
The typed array \f[CR]findLastIndex()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
The index of the last (highest\-index) element in the typed array that
passes the test.
Otherwise \f[CR]\-1\f[R] if no matching element is found.
.SH DESCRIPTION
See \f[CR]Array.prototype.findLastIndex()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Find the index of the last prime number in a typed array
The following example returns the index of the last element in the typed
array that is a prime number, or \f[CR]\-1\f[R] if there is no prime
number.
.IP
.EX
\f[B]function\f[R] isPrime(element) {
  \f[B]if\f[R] (element % 2 === 0 || element < 2) {
    \f[B]return\f[R] \f[B]false\f[R];
  }
  \f[B]for\f[R] (\f[B]let\f[R] factor = 3; factor <= Math.sqrt(element); factor += 2) {
    \f[B]if\f[R] (element % factor === 0) {
      \f[B]return\f[R] \f[B]false\f[R];
    }
  }
  \f[B]return\f[R] \f[B]true\f[R];
}

\f[B]let\f[R] uint8 = \f[B]new\f[R] Uint8Array([4, 6, 8, 12]);
console.log(uint8.findLastIndex(isPrime));
\f[I]// \-1 (no primes in array)\f[R]
uint8 = \f[B]new\f[R] Uint8Array([4, 5, 7, 8, 9, 11, 12]);
console.log(uint8.findLastIndex(isPrime));
\f[I]// 5\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#array-find-from-last
Polyfill of \f[CR]TypedArray.prototype.findLastIndex\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
JavaScript typed arrays guide
.IP \(bu 2
\f[CR]TypedArray\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.find()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.findIndex()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.findLast()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.indexOf()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.lastIndexOf()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.findLastIndex()\f[R]
