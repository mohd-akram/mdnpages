.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "IDBObjectStore.put" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore.put \- IDBObjectStore: put() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]put()\f[B]\f[R] method of the \f[CR]IDBObjectStore\f[R]
interface updates a given record in a database, or inserts a new record
if the given item does not already exist.
.PP
It returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread,
creates a \c
.UR https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#structured-clone
structured clone
.UE \c
\ of the value and stores the cloned value in the object store.
This is for adding new records, or updating existing records in an
object store when the transaction\[cq]s mode is \f[CR]readwrite\f[R].
If the record is successfully stored, then a success event is fired on
the returned request object with the \f[CR]result\f[R] set to the key
for the stored record, and the \f[CR]transaction\f[R] set to the
transaction in which this object store is opened.
.PP
The put method is an \f[I]update or insert\f[R] method.
See the \f[CR]IDBObjectStore.add\f[R] method for an \f[I]insert
only\f[R] method.
.PP
Bear in mind that if you have a \f[CR]IDBCursor\f[R] to the record you
want to update, updating it with \f[CR]IDBCursor.update()\f[R] is
preferable to using \f[CR]IDBObjectStore.put()\f[R].
Doing so makes it clear that an existing record will be updated, instead
of a new record being inserted.
.SH SYNTAX
.IP
.EX
put(item)
put(item, key)
.EE
.SS Parameters
.TP
\f[B]item\f[R]
The item you wish to update (or insert).
.TP
\f[B]key\f[R] \f[I](optional)\f[R]
The primary key of the record you want to update (e.g.\ from
\f[CR]IDBCursor.primaryKey\f[R]).
.SS Return value
An \f[CR]IDBRequest\f[R] object on which subsequent events related to
this operation are fired.
.PP
If the operation is successful, the value of the request\[cq]s
\f[CR]result\f[R] property is the key for the new or updated record.
.SS Exceptions
This method may raise a \f[CR]DOMException\f[R] of one of the following
types:
.TP
\f[B]ReadOnlyError\f[R] \f[B]DOMException\f[R]
Thrown if the transaction associated with this operation is in
read\-only mode.
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if this \f[CR]IDBObjectStore\f[R]\[cq]s transaction is inactive.
.TP
\f[B]DataError\f[R] \f[B]DOMException\f[R]
Thrown if any of the following conditions apply:
.RS
.IP \[bu] 2
The object store uses in\-line keys or has a key generator, and a
\f[CR]key\f[R] parameter was provided.
.IP \[bu] 2
The object store uses out\-of\-line keys and has no key generator, and
no \f[CR]key\f[R] parameter was provided.
.IP \[bu] 2
The object store uses in\-line keys but no \f[CR]key\f[R] generator, and
the object store\[cq]s key path does not yield a valid key.
.IP \[bu] 2
The \f[CR]key\f[R] parameter was provided but does not contain a valid
key.
.RE
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]IDBObjectStore\f[R] has been deleted or removed.
.TP
\f[B]DataCloneError\f[R] \f[B]DOMException\f[R]
Thrown if the data being stored could not be cloned by the internal
structured cloning algorithm.
.SH EXAMPLES
The following example requests a given record title; when that request
is successful the \f[CR]onsuccess\f[R] function gets the associated
record from the \f[CR]IDBObjectStore\f[R] (made available as
\f[CR]objectStoreTitleRequest.result\f[R]), updates one property of the
record, and then puts the updated record back into the object store in
another request with \f[CR]put()\f[R].
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[B]const\f[R] title = \[dq]Walk dog\[dq];

\f[I]// Open up a transaction as usual\f[R]
\f[B]const\f[R] objectStore = db
  .transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq])
  .objectStore(\[dq]toDoList\[dq]);

\f[I]// Get the to\-do list object that has this title as its title\f[R]
\f[B]const\f[R] objectStoreTitleRequest = objectStore.get(title);

objectStoreTitleRequest.onsuccess = () \f[B]=>\f[R] {
  \f[I]// Grab the data object returned as the result\f[R]
  \f[B]const\f[R] data = objectStoreTitleRequest.result;

  \f[I]// Update the notified value in the object to \[dq]yes\[dq]\f[R]
  data.notified = \[dq]yes\[dq];

  \f[I]// Create another request that inserts the item back into the database\f[R]
  \f[B]const\f[R] updateTitleRequest = objectStore.put(data);

  \f[I]// Log the transaction that originated this request\f[R]
  console.log(
    \[ga]The transaction that originated this request is ${updateTitleRequest.transaction}\[ga],
  );

  \f[I]// When this new request succeeds, run the displayData() function again to update the display\f[R]
  updateTitleRequest.onsuccess = () \f[B]=>\f[R] {
    displayData();
  };
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
