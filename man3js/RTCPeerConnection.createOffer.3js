.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "RTCPeerConnection.createOffer" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.createOffer \- RTCPeerConnection: createOffer() method
.SH SYNOPSIS
The \f[B]\f[CB]createOffer()\f[B]\f[R] method of the
\f[CR]RTCPeerConnection\f[R] interface initiates the creation of an SDP
offer for the purpose of starting a new WebRTC connection to a remote
peer.
.PP
The SDP offer includes information about any \f[CR]MediaStreamTrack\f[R]
objects already attached to the WebRTC session, codec, and options
supported by the browser, and any candidates already gathered by the ICE
agent, for the purpose of being sent over the signaling channel to a
potential peer to request a connection or to update the configuration of
an existing connection.
.PP
The return value is a \f[CR]Promise\f[R] which, when the offer has been
created, is resolved with a RTCSessionDescriptionInit dictionary
containing the newly\-created offer.
.SH SYNTAX
.IP
.EX
createOffer()
createOffer(options)

createOffer(successCallback, failureCallback) // deprecated
createOffer(successCallback, failureCallback, options) // deprecated
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object providing the following options requested for the offer:
.RS
.TP
\f[B]iceRestart\f[R] \f[I](optional)\f[R]
To restart ICE on an active connection, set this to \f[CR]true\f[R].
This will cause the returned offer to have different credentials than
those already in place.
If you then apply the returned offer, ICE will restart.
Specify \f[CR]false\f[R] to keep the same credentials and therefore not
restart ICE.
\f[B]The default is \f[CB]false\f[B]\f[R].
.TP
\f[B]offerToReceiveAudio\f[R] \f[I](optional)\f[R] \f[I](deprecated)\f[R]
Provides additional control over the directionality of audio.
For example, it can be used to ensure that audio can be received,
regardless if audio is sent or not.
.TP
\f[B]offerToReceiveVideo\f[R] \f[I](optional)\f[R] \f[I](deprecated)\f[R]
Provides additional control over the directionality of video.
For example, it can be used to ensure that video can be received,
regardless if video is sent or not.
.RE
.SS Deprecated parameters
In older code and documentation, you may see a callback\-based version
of this function.
This has been deprecated and its use is \f[B]strongly\f[R] discouraged.
You should update any existing code to use the \f[CR]Promise\f[R]\-based
version of \f[CR]createOffer()\f[R] instead.
The parameters for the older form of \f[CR]createOffer()\f[R] are
described below, to aid in updating existing code.
.TP
\f[B]successCallback\f[R] \f[I](deprecated)\f[R]
A callback function which will be passed a single
\f[CR]RTCSessionDescription\f[R] object describing the newly\-created
offer.
.TP
\f[B]errorCallback\f[R] \f[I](deprecated)\f[R]
A callback function which will be passed a single
\f[CR]DOMException\f[R] object explaining why the request to create an
offer failed.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An optional object providing options requested for the offer.
.SS Return value
A \f[CR]Promise\f[R] whose fulfillment handler will receive an object
conforming to the RTCSessionDescriptionInit dictionary which contains
the SDP describing the generated offer.
That received offer should be delivered through the signaling server to
a remote peer.
.SS Exceptions
These exceptions are returned by rejecting the returned promise.
Your rejection handler should examine the received exception to
determine which occurred.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Returned if the \f[CR]RTCPeerConnection\f[R] is closed.
.TP
\f[B]NotReadableError\f[R] \f[B]DOMException\f[R]
Returned if no certificate or set of certificates was provided for
securing the connection, and \f[CR]createOffer()\f[R] was unable to
create a new one.
Since all WebRTC connections are required to be secured, that results in
an error.
.TP
\f[B]OperationError\f[R] \f[B]DOMException\f[R]
Returned if examining the state of the system to determine resource
availability in order to generate the offer failed for some reason.
.SH EXAMPLES
Here we see a handler for the \f[CR]negotiationneeded\f[R] event which
creates the offer and sends it to the remote system over a signaling
channel.
.RS
.PP
\f[B]Note:\f[R] Keep in mind that this is part of the signaling process,
the transport layer for which is an implementation detail that\[cq]s
entirely up to you.
In this case, a WebSocket connection is used to send a JSON message with
a \f[CR]type\f[R] field with the value \[lq]video\-offer\[rq] to the
other peer.
The contents of the object being passed to the \f[CR]sendToServer()\f[R]
function, along with everything else in the promise fulfillment handler,
depend entirely on your design.
.RE
.IP
.EX
myPeerConnection
  .createOffer()
  .then((offer) \f[B]=>\f[R] myPeerConnection.setLocalDescription(offer))
  .then(() \f[B]=>\f[R] {
    sendToServer({
      name: myUsername,
      target: targetUsername,
      type: \[dq]video\-offer\[dq],
      sdp: myPeerConnection.localDescription,
    });
  })
  .catch((reason) \f[B]=>\f[R] {
    \f[I]// An error occurred, so handle the failure to connect\f[R]
  });
.EE
.PP
In this code, the offer is created, and once successful, the local end
of the \f[CR]RTCPeerConnection\f[R] is configured to match by passing
the offer (which is represented using an object conforming to
RTCSessionDescriptionInit) into \f[CR]setLocalDescription()\f[R].
Once that\[cq]s done, the offer is sent to the remote system over the
signaling channel; in this case, by using a custom function called
\f[CR]sendToServer()\f[R].
The implementation of the signaling server is independent from the
WebRTC specification, so it doesn\[cq]t matter how the offer is sent as
long as both the caller and potential receiver are using the same one.
.PP
Use \f[CR]Promise.catch()\f[R] to trap and handle errors.
.PP
See Signaling and video calling for the complete example from which this
snippet is derived; this will help you to understand how the signaling
code here works.
