.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MAP.GET" "3JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Map.get \- Map.prototype.get()
.SH SYNOPSIS
The \f[B]\f[CB]get()\f[B]\f[R] method of \f[CR]Map\f[R] instances
returns a specified element from this map.
If the value that is associated to the provided key is an object, then
you will get a reference to that object and any change made to that
object will effectively modify it inside the \f[CR]Map\f[R] object.
.IP
.EX
\f[B]const\f[R] map1 = \f[B]new\f[R] Map();
map1.set(\(dqbar\(dq, \(dqfoo\(dq);

console.log(map1.get(\(dqbar\(dq));
\f[I]// Expected output: \(dqfoo\(dq\f[R]

console.log(map1.get(\(dqbaz\(dq));
\f[I]// Expected output: undefined\f[R]
.EE
.SH SYNTAX
.IP
.EX
get(key)
.EE
.SS Parameters
.TP
\f[B]key\f[R]
The key of the element to return from the \f[CR]Map\f[R] object.
.SS Return value
The element associated with the specified key, or \f[CR]undefined\f[R]
if the key can\(cqt be found in the \f[CR]Map\f[R] object.
.SH EXAMPLES
.SS Using get()
.IP
.EX
\f[B]const\f[R] myMap = \f[B]new\f[R] Map();
myMap.set(\(dqbar\(dq, \(dqfoo\(dq);

console.log(myMap.get(\(dqbar\(dq)); \f[I]// Returns \(dqfoo\(dq\f[R]
console.log(myMap.get(\(dqbaz\(dq)); \f[I]// Returns undefined\f[R]
.EE
.SS Using get() to retrieve a reference to an object
.IP
.EX
\f[B]const\f[R] arr = [];
\f[B]const\f[R] myMap = \f[B]new\f[R] Map();
myMap.set(\(dqbar\(dq, arr);

myMap.get(\(dqbar\(dq).push(\(dqfoo\(dq);

console.log(arr); \f[I]// [\(dqfoo\(dq]\f[R]
console.log(myMap.get(\(dqbar\(dq)); \f[I]// [\(dqfoo\(dq]\f[R]
.EE
.PP
Note that the map holding a reference to the original object effectively
means the object cannot be garbage\-collected, which may lead to
unexpected memory issues.
If you want the object stored in the map to have the same lifespan as
the original one, consider using a \f[CR]WeakMap\f[R].
.SH SEE ALSO
.IP \(bu 2
\f[CR]Map\f[R]
.IP \(bu 2
\f[CR]Map.prototype.set()\f[R]
.IP \(bu 2
\f[CR]Map.prototype.has()\f[R]
