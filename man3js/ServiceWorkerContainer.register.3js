.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ServiceWorkerContainer.register" "JS" "June 9, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerContainer.register \- ServiceWorkerContainer: register()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]register()\f[B]\f[R] method of the
\f[CR]ServiceWorkerContainer\f[R] interface creates or updates a
\f[CR]ServiceWorkerRegistration\f[R] for the given \f[CR]scriptURL\f[R].
.PP
If successful, a service worker registration ties the provided script
URL to a \f[I]scope\f[R], which is subsequently used for navigation
matching.
You can call this method unconditionally from the controlled page.
I.e., you don\[cq]t need to first check whether there\[cq]s an active
registration.
.SH SYNTAX
.IP
.EX
register(scriptURL)
register(scriptURL, options)
.EE
.SS Parameters
.TP
\f[B]scriptURL\f[R]
The URL of the service worker script.
The registered service worker file needs to have a valid JavaScript MIME
type.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing registration options.
Currently available options are:
.RS
.TP
\f[B]scope\f[R]
A string representing a URL that defines a service worker\[cq]s
registration scope; that is, what range of URLs a service worker can
control.
This is usually a relative URL.
It is relative to the base URL of the application.
By default, the \f[CR]scope\f[R] value for a service worker registration
is set to the directory where the service worker script is located (by
resolving \f[CR]./\f[R] against \f[CR]scriptURL\f[R]).
See the Examples section for more information on how it works.
.TP
\f[B]type\f[R]
A string specifying the type of worker to create.
Valid values are:
.RS
.TP
\f[B]\[aq]classic\[aq]\f[R]
The loaded service worker is in a standard script.
This is the default.
.TP
\f[B]\[aq]module\[aq]\f[R]
The loaded service worker is in an ES module and the import statement is
available on worker contexts.
For ES module compatibility info, see the browser compatibility data
table for the \f[CR]ServiceWorker\f[R] interface.
.RE
.TP
\f[B]updateViaCache\f[R]
A string indicating how the HTTP cache is used for service worker
scripts resources during updates.
Note: This only refers to the service worker script and its imports, not
other resources fetched by these scripts.
.RS
.TP
\f[B]\[aq]all\[aq]\f[R]
The HTTP cache will be queried for the main script, and all imported
scripts.
If no fresh entry is found in the HTTP cache, then the scripts are
fetched from the network.
.TP
\f[B]\[aq]imports\[aq]\f[R]
The HTTP cache will be queried for imports, but the main script will
always be updated from the network.
If no fresh entry is found in the HTTP cache for the imports,
they\[cq]re fetched from the network.
.TP
\f[B]\[aq]none\[aq]\f[R]
The HTTP cache will not be used for the main script or its imports.
All service worker script resources will be updated from the network.
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with a
\f[CR]ServiceWorkerRegistration\f[R] object.
.SH EXAMPLES
The examples described here should be taken together to get a better
understanding of how service workers scope applies to a page.
.PP
The following example uses the default value of \f[CR]scope\f[R] (by
omitting it).
Suppose the service worker code is at \f[CR]example.com/sw.js\f[R], and
the registration code at \f[CR]example.com/index.html\f[R].
The service worker code will control \f[CR]example.com/index.html\f[R],
as well as pages underneath it, like
\f[CR]example.com/product/description.html\f[R].
.IP
.EX
\f[B]if\f[R] (\[dq]serviceWorker\[dq] \f[B]in\f[R] navigator) {
  \f[I]// Register a service worker hosted at the root of the\f[R]
  \f[I]// site using the default scope.\f[R]
  navigator.serviceWorker.register(\[dq]./sw.js\[dq]).then(
    (registration) \f[B]=>\f[R] {
      console.log(\[dq]Service worker registration succeeded:\[dq], registration);
    },
    (error) \f[B]=>\f[R] {
      console.error(\[ga]Service worker registration failed: ${error}\[ga]);
    },
  );
} \f[B]else\f[R] {
  console.error(\[dq]Service workers are not supported.\[dq]);
}
.EE
.PP
The following code, with all code in the same place, would apply to
exactly the same pages as the example above.
Alternatively, if the service worker code is at
\f[CR]example.com/product/sw.js\f[R], and the registration code at
\f[CR]example.com/product/description.html\f[R].
then the service worker would only apply to resources under
\f[CR]example.com/product\f[R].
Remember the scope, when included, uses the page\[cq]s location as its
base.
.IP
.EX
\f[B]if\f[R] (\[dq]serviceWorker\[dq] \f[B]in\f[R] navigator) {
  \f[I]// declaring scope manually\f[R]
  navigator.serviceWorker.register(\[dq]./sw.js\[dq], { scope: \[dq]./\[dq] }).then(
    (registration) \f[B]=>\f[R] {
      console.log(\[dq]Service worker registration succeeded:\[dq], registration);
    },
    (error) \f[B]=>\f[R] {
      console.error(\[ga]Service worker registration failed: ${error}\[ga]);
    },
  );
} \f[B]else\f[R] {
  console.error(\[dq]Service workers are not supported.\[dq]);
}
.EE
.PP
There is frequent confusion surrounding the meaning and use of
\f[I]scope\f[R].
A service worker can\[cq]t have a scope broader than its own location,
unless the server specifies a broader maximum scope in a \c
.UR https://w3c.github.io/ServiceWorker/#service-worker-allowed
Service\-Worker\-Allowed
.UE \c
\ header on the service worker script.
Therefore you should use the \f[CR]scope\f[R] option when you need a
\f[I]narrower\f[R] scope than the default.
.PP
The following code, if included in \f[CR]example.com/index.html\f[R], at
the root of a site, would only apply to resources under
\f[CR]example.com/product\f[R].
.IP
.EX
\f[B]if\f[R] (\[dq]serviceWorker\[dq] \f[B]in\f[R] navigator) {
  \f[I]// declaring scope manually\f[R]
  navigator.serviceWorker.register(\[dq]./sw.js\[dq], { scope: \[dq]/product/\[dq] }).then(
    (registration) \f[B]=>\f[R] {
      console.log(\[dq]Service worker registration succeeded:\[dq], registration);
    },
    (error) \f[B]=>\f[R] {
      console.error(\[ga]Service worker registration failed: ${error}\[ga]);
    },
  );
} \f[B]else\f[R] {
  console.error(\[dq]Service workers are not supported.\[dq]);
}
.EE
.PP
As noted above, servers can change the default maximum scope by setting
the \f[CR]Service\-Worker\-Allowed\f[R] header on the service worker
script.
In this case, the \f[CR]scope\f[R] option should specify a scope
narrower than the header value, but potentially larger than the service
worker\[cq]s location.
.PP
The following code, if included in
\f[CR]example.com/product/index.html\f[R], would apply to all resources
under \f[CR]example.com\f[R] if the server set the
\f[CR]Service\-Worker\-Allowed\f[R] header to \f[CR]/\f[R] or
\f[CR]https://example.com/\f[R] when serving \f[CR]sw.js\f[R].
If the server doesn\[cq]t set the header, the service worker
registration will fail, as the requested \f[CR]scope\f[R] is too broad.
.IP
.EX
\f[B]if\f[R] (\[dq]serviceWorker\[dq] \f[B]in\f[R] navigator) {
  \f[I]// Declaring a broadened scope\f[R]
  navigator.serviceWorker.register(\[dq]./sw.js\[dq], { scope: \[dq]/\[dq] }).then(
    (registration) \f[B]=>\f[R] {
      \f[I]// The registration succeeded because the Service\-Worker\-Allowed header\f[R]
      \f[I]// had set a broadened maximum scope for the service worker script\f[R]
      console.log(\[dq]Service worker registration succeeded:\[dq], registration);
    },
    (error) \f[B]=>\f[R] {
      \f[I]// This happens if the Service\-Worker\-Allowed header doesn\[aq]t broaden the scope\f[R]
      console.error(\[ga]Service worker registration failed: ${error}\[ga]);
    },
  );
} \f[B]else\f[R] {
  console.error(\[dq]Service workers are not supported.\[dq]);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
ServiceWorkerRegistration: \f[CR]unregister()\f[R] method
.IP \[bu] 2
Service worker API
.IP \[bu] 2
Using service workers
