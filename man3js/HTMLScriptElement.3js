.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "HTMLScriptElement" "JS" "April 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLScriptElement \- HTMLScriptElement
.SH SYNOPSIS
HTML \f[CR]<script>\f[R] elements expose the
\f[B]\f[CB]HTMLScriptElement\f[B]\f[R] interface, which provides special
properties and methods for manipulating the behavior and execution of
\f[CR]<script>\f[R] elements (beyond the inherited
\f[CR]HTMLElement\f[R] interface).
.PP
JavaScript files should be served with the \f[CR]text/javascript\f[R]
MIME type, but browsers are lenient and block them only if the script is
served with an image type (\f[CR]image/*\f[R]), video type
(\f[CR]video/*\f[R]), audio type (\f[CR]audio/*\f[R]), or
\f[CR]text/csv\f[R].
If the script is blocked, its element receives an \f[CR]error\f[R]
event; otherwise, it receives a \f[CR]load\f[R] event.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent, \f[CI]HTMLElement\f[I].\f[R]
.TP
\f[B]HTMLScriptElement.async\f[R], \f[B]HTMLScriptElement.defer\f[R]
The \f[CR]async\f[R] and \f[CR]defer\f[R] attributes are boolean
attributes that control how the script should be executed.
\f[B]The \f[CB]defer\f[B] and \f[CB]async\f[B] attributes must not be
specified if the \f[CB]src\f[B] attribute is absent.\f[R]
.RS
.PP
There are three possible execution modes:
.IP "1." 3
If the \f[CR]async\f[R] attribute is present, then the script will be
executed asynchronously as soon as it downloads.
.IP "2." 3
If the \f[CR]async\f[R] attribute is absent but the \f[CR]defer\f[R]
attribute is present, then the script is executed when the page has
finished parsing.
.IP "3." 3
If neither attribute is present, then the script is fetched and executed
immediately, blocking further parsing of the page.
.PP
The \f[CR]defer\f[R] attribute may be specified with the
\f[CR]async\f[R] attribute, so legacy browsers that only support
\f[CR]defer\f[R] (and not \f[CR]async\f[R]) fall back to the
\f[CR]defer\f[R] behavior instead of the default blocking behavior.
.RS
.PP
\f[B]Note:\f[R] The exact processing details for these attributes are
complex, involving many different aspects of HTML, and therefore are
scattered throughout the specification.
\c
.UR https://html.spec.whatwg.org/multipage/scripting.html
These algorithms
.UE \c
\ describe the core ideas, but they rely on the parsing rules for
\f[CR]<script>\f[R] \c
.UR https://html.spec.whatwg.org/multipage/syntax.html#start-tags
start
.UE \c
\ and \c
.UR https://html.spec.whatwg.org/multipage/syntax.html#end-tags
end
.UE \c
\ tags in HTML, \c
.UR https://html.spec.whatwg.org/multipage/syntax.html#foreign-elements
in foreign content
.UE \c
, and \c
.UR https://html.spec.whatwg.org/multipage/xhtml.html
in XML
.UE \c
; the rules for the \f[CR]document.write()\f[R] method; the handling of
\c
.UR https://html.spec.whatwg.org/multipage/webappapis.html
scripting
.UE \c
; and so on.
.RE
.RE
.TP
\f[B]HTMLScriptElement.charset\f[R] \f[I](deprecated)\f[R]
A string representing the character encoding of an external script.
It reflects the \f[CR]charset\f[R] attribute.
.TP
\f[B]HTMLScriptElement.crossOrigin\f[R]
A string reflecting the CORS setting for the script element.
For classic scripts from other origins, this controls if error
information will be exposed.
.TP
\f[B]HTMLScriptElement.event\f[R] \f[I](deprecated)\f[R]
A string; an obsolete way of registering event handlers on elements in
an HTML document.
.TP
\f[B]HTMLScriptElement.fetchPriority\f[R]
An optional string representing a hint given to the browser on how it
should prioritize fetching of an external script relative to other
external scripts.
If this value is provided, it must be one of the possible permitted
values: \f[CR]high\f[R] to fetch at a high priority, \f[CR]low\f[R] to
fetch at a low priority, or \f[CR]auto\f[R] to indicate no preference
(which is the default).
It reflects the \f[CR]fetchpriority\f[R] attribute of the
\f[CR]<script>\f[R] element.
.TP
\f[B]HTMLScriptElement.noModule\f[R]
A boolean value that if true, stops the script\[cq]s execution in
browsers that support ES modules \[em] used to run fallback scripts in
older browsers that do \f[I]not\f[R] support JavaScript modules.
.TP
\f[B]HTMLScriptElement.referrerPolicy\f[R]
A string that reflects the \f[CR]referrerPolicy\f[R] HTML attribute
indicating which referrer to use when fetching the script, and fetches
done by that script.
.TP
\f[B]HTMLScriptElement.src\f[R]
A string representing the URL of an external script; this can be used as
an alternative to embedding a script directly within a document.
It reflects the \f[CR]src\f[R] attribute of the \f[CR]<script>\f[R]
element.
.TP
\f[B]HTMLScriptElement.text\f[R]
A string that joins and returns the contents of all \f[CR]Text\f[R]
nodes inside the \f[CR]<script>\f[R] element (ignoring other nodes like
comments) in tree order.
On setting, it acts the same way as the \f[CR]Node.textContent\f[R]
property.
.RS
.RS
.PP
\f[B]Note:\f[R] When inserted using the \f[CR]Document.write()\f[R]
method, \f[CR]<script>\f[R] elements execute (typically synchronously),
but when inserted using \f[CR]Element.innerHTML\f[R] or
\f[CR]Element.outerHTML\f[R], they do not execute at all.
.RE
.RE
.TP
\f[B]HTMLScriptElement.type\f[R]
A string representing the type of the script.
It reflects the \f[CR]type\f[R] attribute of the \f[CR]<script>\f[R]
element.
.SH STATIC METHODS
.TP
\f[B]HTMLScriptElement.supports()\f[R]
Returns \f[CR]true\f[R] if the browser supports scripts of the specified
type and \f[CR]false\f[R] otherwise.
This method provides a simple and unified method for script\-related
feature detection.
.SH INSTANCE METHODS
\f[I]No specific methods; inherits methods from its parent,
\f[CI]HTMLElement\f[I].\f[R]
.SH EVENTS
\f[I]No specific events; inherits events from its parent,
\f[CI]HTMLElement\f[I].\f[R]
.SH EXAMPLES
.SS Dynamically importing scripts
Let\[cq]s create a function that imports new scripts within a document
creating a \f[CR]<script>\f[R] node \f[I]immediately before\f[R] the
\f[CR]<script>\f[R] that hosts the following code (through
\f[CR]document.currentScript\f[R]).
These scripts will be \f[B]asynchronously\f[R] executed.
For more details, see the \f[CR]defer\f[R] and \f[CR]async\f[R]
properties.
.IP
.EX
\f[B]function\f[R] loadError(oError) {
  \f[B]throw\f[R] \f[B]new\f[R] URIError(\[ga]The script ${oError.target.src} didn\[aq]t load correctly.\[ga]);
}

\f[B]function\f[R] prefixScript(url, onloadFunction) {
  \f[B]const\f[R] newScript = document.createElement(\[dq]script\[dq]);
  newScript.onerror = loadError;
  \f[B]if\f[R] (onloadFunction) {
    newScript.onload = onloadFunction;
  }
  document.currentScript.parentNode.insertBefore(
    newScript,
    document.currentScript,
  );
  newScript.src = url;
}
.EE
.PP
This next function, instead of prepending the new scripts immediately
before the \f[CR]document.currentScript\f[R] element, appends them as
children of the \f[CR]<head>\f[R] tag.
.IP
.EX
\f[B]function\f[R] loadError(oError) {
  \f[B]throw\f[R] \f[B]new\f[R] URIError(\[ga]The script ${oError.target.src} didn\[aq]t load correctly.\[ga]);
}

\f[B]function\f[R] affixScriptToHead(url, onloadFunction) {
  \f[B]const\f[R] newScript = document.createElement(\[dq]script\[dq]);
  newScript.onerror = loadError;
  \f[B]if\f[R] (onloadFunction) {
    newScript.onload = onloadFunction;
  }
  document.head.appendChild(newScript);
  newScript.src = url;
}
.EE
.PP
Sample usage:
.IP
.EX
affixScriptToHead(\[dq]myScript1.js\[dq]);
affixScriptToHead(\[dq]myScript2.js\[dq], () \f[B]=>\f[R] {
  alert(\[aq]The script \[dq]myScript2.js\[dq] has been correctly loaded.\[aq]);
});
.EE
.SS Checking if a script type is supported
\f[CR]HTMLScriptElement.supports()\f[R] provides a unified mechanism for
checking whether a browser supports particular types of scripts.
.PP
The example below shows how to check for module support, using the
existence of the \f[CR]noModule\f[R] attribute as a fallback.
.IP
.EX
\f[B]function\f[R] checkModuleSupport() {
  \f[B]if\f[R] (\[dq]supports\[dq] \f[B]in\f[R] HTMLScriptElement) {
    \f[B]return\f[R] HTMLScriptElement.supports(\[dq]module\[dq]);
  }
  \f[B]return\f[R] \[dq]noModule\[dq] \f[B]in\f[R] document.createElement(\[dq]script\[dq]);
}
.EE
.PP
Classic scripts are assumed to be supported on all browsers.
.SH SEE ALSO
.IP \[bu] 2
HTML \f[CR]<script>\f[R] element
.IP \[bu] 2
HTML \f[CR]<noscript>\f[R] element
.IP \[bu] 2
\f[CR]document.currentScript\f[R]
.IP \[bu] 2
Web Workers (code snippets similar to scripts but executed in another
global context)
