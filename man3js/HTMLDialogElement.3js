.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HTMLDIALOGELEMENT" "3JS" "May 9, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLDialogElement \- HTMLDialogElement
.SH SYNOPSIS
The \f[B]\f[CB]HTMLDialogElement\f[B]\f[R] interface provides methods to
manipulate \f[CR]<dialog>\f[R] elements.
It inherits properties and methods from the \f[CR]HTMLElement\f[R]
interface.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]HTMLElement\f[I].\f[R]
.TP
\f[B]HTMLDialogElement.closedBy\f[R] \f[I](experimental)\f[R]
A string that sets or returns the \f[CR]closedby\f[R] attribute value of
the \f[CR]<dialog>\f[R] element, which indicates the types of user
actions that can be used to close the dialog.
.TP
\f[B]HTMLDialogElement.open\f[R]
A boolean value reflecting the \f[CR]open\f[R] HTML attribute,
indicating whether the dialog is available for interaction.
.TP
\f[B]HTMLDialogElement.returnValue\f[R]
A string that sets or returns the return value for the dialog.
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]HTMLElement\f[I].\f[R]
.TP
\f[B]HTMLDialogElement.close()\f[R]
Closes the dialog.
An optional string may be passed as an argument, updating the
\f[CR]returnValue\f[R] of the dialog.
.TP
\f[B]HTMLDialogElement.requestClose()\f[R]
Requests to close the dialog.
An optional string may be passed as an argument, updating the
\f[CR]returnValue\f[R] of the dialog.
.TP
\f[B]HTMLDialogElement.show()\f[R]
Displays the dialog modelessly, i.e., still allowing interaction with
content outside of the dialog.
.TP
\f[B]HTMLDialogElement.showModal()\f[R]
Displays the dialog as a modal, over the top of any other dialogs that
might be present.
Everything outside the dialog are inert with interactions outside the
dialog being blocked.
.SH EVENTS
\f[I]Also inherits events from its parent interface,
\f[CI]HTMLElement\f[I].\f[R]
.PP
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]cancel\f[R]
Fired when the dialog is requested to close, whether with the escape
key, or via the \f[CR]HTMLDialogElement.requestClose()\f[R] method.
.TP
\f[B]close\f[R]
Fired when the dialog is closed, whether with the escape key, the
\f[CR]HTMLDialogElement.close()\f[R] method, or via submitting a form
within the dialog with \f[CR]method=\(dqdialog\(dq\f[R].
.SH EXAMPLES
.SS Opening a modal dialog
The following example shows a button that, when clicked, uses the
\f[CR]HTMLDialogElement.showModal()\f[R] function to open a modal
\f[CR]<dialog>\f[R] containing a form.
.PP
While open, everything other than the modal dialog\(cqs contents is
inert.
You can click the \f[I]Cancel\f[R] button to close the dialog (via the
\f[CR]HTMLDialogElement.close()\f[R] function), or submit the form via
the \f[I]Confirm\f[R] button.
.PP
The example demonstrates how you might use all the \(lqstate change\(rq
events that can be fired on the dialog: \f[CR]cancel\f[R] and
\f[CR]close\f[R], and the inherited events \f[CR]beforetoggle\f[R], and
\f[CR]toggle\f[R].
.SS HTML
.IP
.EX
\f[I]<!\-\- pop\-up dialog box, containing a form \-\->\f[R]
<\f[B]dialog\f[R] id=\(dqfavDialog\(dq>
  <\f[B]form\f[R] method=\(dqdialog\(dq>
    <\f[B]p\f[R]>
      <\f[B]label\f[R] for=\(dqfavAnimal\(dq>Favorite animal:</\f[B]label\f[R]>
      <\f[B]select\f[R] id=\(dqfavAnimal\(dq name=\(dqfavAnimal\(dq>
        <\f[B]option\f[R]></\f[B]option\f[R]>
        <\f[B]option\f[R]>Brine shrimp</\f[B]option\f[R]>
        <\f[B]option\f[R]>Red panda</\f[B]option\f[R]>
        <\f[B]option\f[R]>Spider monkey</\f[B]option\f[R]>
      </\f[B]select\f[R]>
    </\f[B]p\f[R]>
    <\f[B]div\f[R]>
      <\f[B]button\f[R] id=\(dqcancel\(dq type=\(dqreset\(dq>Cancel</\f[B]button\f[R]>
      <\f[B]button\f[R] id=\(dqsubmit\(dq type=\(dqsubmit\(dq>Confirm</\f[B]button\f[R]>
    </\f[B]div\f[R]>
  </\f[B]form\f[R]>
</\f[B]dialog\f[R]>

<\f[B]div\f[R]>
  <\f[B]button\f[R] id=\(dqupdateDetails\(dq>Update details</\f[B]button\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.SS Showing the dialog
The code first gets objects for the \f[CR]<button>\f[R] elements, the
\f[CR]<dialog>\f[R] element, and the \f[CR]<select>\f[R] element.
It then adds a listener to call the
\f[CR]HTMLDialogElement.showModal()\f[R] function when the
\f[I]Update\f[R] button is clicked.
.IP
.EX
\f[B]const\f[R] updateButton = document.getElementById(\(dqupdateDetails\(dq);
\f[B]const\f[R] confirmButton = document.getElementById(\(dqsubmit\(dq);
\f[B]const\f[R] cancelButton = document.getElementById(\(dqcancel\(dq);
\f[B]const\f[R] dialog = document.getElementById(\(dqfavDialog\(dq);
\f[B]const\f[R] selectElement = document.getElementById(\(dqfavAnimal\(dq);

\f[I]// Update button opens a modal dialog\f[R]
updateButton.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  dialog.showModal();
});
.EE
.SS Cancel and confirm buttons
Next we add listeners to the \f[I]Confirm\f[R] and \f[I]Cancel\f[R]
button \f[CR]click\f[R] events.
The handlers call \f[CR]HTMLDialogElement.close()\f[R] with the
selection value (if present) and no value, which in turn set the return
value of the dialog (\f[CR]HTMLDialogElement.returnValue\f[R]) to the
selection value and \f[CR]null\f[R], respectively.
.IP
.EX
\f[I]// Confirm button closes dialog if there is a selection.\f[R]
confirmButton.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[B]if\f[R] (selectElement.value) {
    \f[I]// Set dialog.returnValue to selected value\f[R]
    dialog.close(selectElement.value);
  }
});

\f[I]// Cancel button closes the dialog box\f[R]
cancelButton.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  dialog.close(); \f[I]// Set dialog.returnValue to null\f[R]
});
.EE
.PP
Calling \f[CR]close()\f[R] also fires the \f[CR]close\f[R] event, which
we implement below by logging the return value of the dialog.
If the \f[I]Confirm\f[R] button was clicked this should be the selected
value in the dialog, otherwise it should be \f[CR]null\f[R].
.IP
.EX
dialog.addEventListener(\(dqclose\(dq, (event) \f[B]=>\f[R] {
  log(\(gaclose_event: (dialog.returnValue: \(dq${dialog.returnValue}\(dq)\(ga);
});
.EE
.SS Cancel event
The \f[CR]cancel\f[R] event is fired when \(lqplatform specific
methods\(rq are used to close the dialog, such as the Esc key.
It is also fired when the \f[CR]HTMLDialogElement.requestClose()\f[R]
method is called.
The event is \(lqcancelable\(rq which means that we could use it to
prevent the dialog from closing.
Here we just treat the cancel as a \(lqclose\(rq operation, and reset
the \f[CR]HTMLDialogElement.returnValue\f[R] to \f[CR]\(dq\(dq\f[R] to
clear any value that may have been set.
.IP
.EX
dialog.addEventListener(\(dqcancel\(dq, (event) \f[B]=>\f[R] {
  log(\(gacancel_event: (dialog.returnValue: \(dq${dialog.returnValue}\(dq)\(ga);
  dialog.returnValue = \(dq\(dq; \f[I]// Reset value\f[R]
});
.EE
.SS Toggle event
The \f[CR]toggle\f[R] event (inherited from \f[CR]HTMLElement\f[R]) is
fired just after a dialog has opened or closed (but before the
\f[CR]closed\f[R] event).
.PP
Here we add a listener to log when the Dialog opens and closes.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]toggle\f[R] and \f[CR]beforetoggle\f[R] events
may not be fired at dialog elements on all browsers.
On these browser versions you can instead check the
\f[CR]HTMLDialogElement.open\f[R] property after attempting to
open/close the dialog.
.RE
.IP
.EX
dialog.addEventListener(\(dqtoggle\(dq, (event) \f[B]=>\f[R] {
  log(\(gatoggle_event: Dialog ${event.newState}\(ga);
});
.EE
.SS Beforetoggle event
The \f[CR]beforetoggle\f[R] event (inherited from
\f[CR]HTMLElement\f[R]) is a cancellable event that is fired just before
a dialog is opened or closed.
If needed, this can be used to prevent a dialog from showing, or to
perform actions on other elements that are affected by the dialog
open/close state, such as adding classes on them to trigger animations.
.PP
In this case we just log the old and new state.
.IP
.EX
dialog.addEventListener(\(dqbeforetoggle\(dq, (event) \f[B]=>\f[R] {
  log(
    \(gabeforetoggle event: oldState: ${event.oldState}, newState: ${event.newState}\(ga,
  );

  \f[I]// Call event.preventDefault() to prevent a dialog opening\f[R]
  \f[I]/*\f[R]
\f[I]    if (shouldCancel()) {\f[R]
\f[I]        event.preventDefault();\f[R]
\f[I]    }\f[R]
\f[I]  */\f[R]
});
.EE
.SS Result
Try out the example below.
Note that both \f[CR]Confirm\f[R] and \f[CR]Cancel\f[R] buttons result
in the \f[CR]close\f[R] event being fired, and that the result should
reflect the selected dialog option.
.SH SEE ALSO
.IP \(bu 2
The HTML element implementing this interface: \f[CR]<dialog>\f[R].
