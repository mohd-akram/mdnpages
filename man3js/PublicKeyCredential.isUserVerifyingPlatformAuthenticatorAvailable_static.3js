.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable_static" "JS" "August 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable_static
\- PublicKeyCredential: isUserVerifyingPlatformAuthenticatorAvailable()
static method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]isUserVerifyingPlatformAuthenticatorAvailable()\f[B]\f[R]
static method of the \f[CR]PublicKeyCredential\f[R] interface returns a
\f[CR]Promise\f[R] which resolves to \f[CR]true\f[R] if a
user\-verifying platform authenticator is present.
.PP
A user\-verifying platform authenticator is a kind of multi\-factor
authenticator that is part of the client device (it is generally not
removable) and that involves an action from the user in order to
identify them.
Common user\-verifying platform authenticators include:
.IP \[bu] 2
Touch ID or Face ID (macOS and iOS)
.IP \[bu] 2
Windows Hello (Windows)
.IP \[bu] 2
Device unlock (fingerprint, face, PIN, etc.)
on Android
.RS
.PP
\f[B]Note:\f[R] This method may only be used in top\-level contexts and
will not be available in an \f[CR]<iframe>\f[R] for example.
.RE
.SH SYNTAX
.IP
.EX
PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] which resolves to a boolean value indicating
whether or a not a user\-verifying platform authenticator is available.
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the specification, the boolean
also conveyed the consent of the user to disclose such an authenticator
existed.
.RE
.SH EXAMPLES
.IP
.EX
PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()
  .then((available) \f[B]=>\f[R] {
    \f[B]if\f[R] (available) {
      \f[I]// We can proceed with the creation of a PublicKeyCredential\f[R]
      \f[I]// with this authenticator\f[R]
    } \f[B]else\f[R] {
      \f[I]// Use another kind of authenticator or a classical login/password\f[R]
      \f[I]// workflow\f[R]
    }
  })
  .catch((err) \f[B]=>\f[R] {
    \f[I]// Something went wrong\f[R]
    console.error(err);
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/windows-hello
Windows Hello
.UE \c
.IP \[bu] 2
\c
.UR https://learn.microsoft.com/en-us/archive/microsoft-edge/legacy/developer/
Web Authentication and Windows Hello \- MSDN Guide
.UE \c
\ and especially the \c
.UR https://learn.microsoft.com/en-us/archive/microsoft-edge/legacy/developer/#special-considerations-for-windows-hello
special considerations mentioning
\f[CR]isUserVerifyingPlatformAuthenticator()\f[R]
.UE \c
