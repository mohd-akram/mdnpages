.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Intl.NumberFormat.formatRangeToParts" "JS" "August 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.NumberFormat.formatRangeToParts \-
Intl.NumberFormat.prototype.formatRangeToParts()
.SH SYNOPSIS
The \f[B]\f[CB]formatRangeToParts()\f[B]\f[R] method of
\f[CR]Intl.NumberFormat\f[R] instances returns an \f[CR]Array\f[R] of
objects containing the locale\-specific tokens from which it is possible
to build custom strings while preserving the locale\-specific parts.
This makes it possible to provide locale\-aware custom formatting ranges
of number strings.
.SH SYNTAX
.IP
.EX
formatRangeToParts(startRange, endRange)
.EE
.SS Parameters
.TP
\f[B]startRange\f[R]
A \f[CR]Number\f[R] or \f[CR]BigInt\f[R].
.TP
\f[B]endRange\f[R]
A \f[CR]Number\f[R] or \f[CR]BigInt\f[R].
.SS Return value
An \f[CR]Array\f[R] of objects containing the formatted range of numbers
in parts.
.PP
The structure of the returned looks like this:
.IP
.EX
[
  { type: \[dq]integer\[dq], value: \[dq]3\[dq], source: \[dq]startRange\[dq] },
  { type: \[dq]literal\[dq], value: \[dq]\-\[dq], source: \[dq]shared\[dq] },
  { type: \[dq]integer\[dq], value: \[dq]5\[dq], source: \[dq]endRange\[dq] },
  { type: \[dq]literal\[dq], value: \[dq] \[dq], source: \[dq]shared\[dq] },
  { type: \[dq]currency\[dq], value: \[dq]€\[dq], source: \[dq]shared\[dq] },
];
.EE
.PP
Possible values for the \f[CR]type\f[R] property include:
.TP
\f[B]currency\f[R]
The currency string, such as the symbols \[lq]$\[rq] and \[lq]€\[rq] or
the name \[lq]Dollar\[rq], \[lq]Euro\[rq], depending on how
\f[CR]currencyDisplay\f[R] is specified.
.TP
\f[B]decimal\f[R]
The decimal separator string (\[lq].\[rq]).
.TP
\f[B]fraction\f[R]
The fraction number.
.TP
\f[B]group\f[R]
The group separator string (\[lq],\[rq]).
.TP
\f[B]infinity\f[R]
The \f[CR]Infinity\f[R] string (\[lq]∞\[rq]).
.TP
\f[B]integer\f[R]
The integer number.
.TP
\f[B]literal\f[R]
Any literal strings or whitespace in the formatted number.
.TP
\f[B]minusSign\f[R]
The minus sign string (\[lq]\-\[rq]).
.TP
\f[B]nan\f[R]
The \f[CR]NaN\f[R] string (\[lq]NaN\[rq]).
.TP
\f[B]plusSign\f[R]
The plus sign string (\[lq]+\[rq]).
.TP
\f[B]percentSign\f[R]
The percent sign string (\[lq]%\[rq]).
.TP
\f[B]unit\f[R]
The unit string, such as the \[lq]l\[rq] or \[lq]litres\[rq], depending
on how \f[CR]unitDisplay\f[R] is specified.
.PP
Possible values for the \f[CR]source\f[R] property include:
.TP
\f[B]startRange\f[R]
The object is the start part of the range.
.TP
\f[B]endRange\f[R]
The object is the end part of the range.
.TP
\f[B]shared\f[R]
The object is a \[lq]shared\[rq] part of the range, such as a separator
or currency.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]startRange\f[R] is less than \f[CR]endRange\f[R], or
either value is \f[CR]NaN\f[R].
.TP
\f[B]TypeError\f[R]
Thrown if either \f[CR]startRange\f[R] or \f[CR]endRange\f[R] is
undefined.
.SH EXAMPLES
.SS Comparing formatRange and formatRangeToParts
\f[CR]NumberFormat\f[R] outputs localized, opaque strings that cannot be
manipulated directly:
.IP
.EX
\f[B]const\f[R] startRange = 3500;
\f[B]const\f[R] endRange = 9500;

\f[B]const\f[R] formatter = \f[B]new\f[R] Intl.NumberFormat(\[dq]de\-DE\[dq], {
  style: \[dq]currency\[dq],
  currency: \[dq]EUR\[dq],
});

console.log(formatter.formatRange(startRange, endRange));
\f[I]// \[dq]3.500,00\[en]9.500,00 €\[dq]\f[R]
.EE
.PP
However, for many user interfaces there is a need to customize the
formatting of this string.
The \f[CR]formatRangeToParts\f[R] method enables locale\-aware
formatting of strings produced by \f[CR]NumberFormat\f[R] formatters by
providing you the string in parts:
.IP
.EX
console.log(formatter.formatRangeToParts(startRange, endRange));

\f[I]// return value:\f[R]
[
  { type: \[dq]integer\[dq], value: \[dq]3\[dq], source: \[dq]startRange\[dq] },
  { type: \[dq]group\[dq], value: \[dq].\[dq], source: \[dq]startRange\[dq] },
  { type: \[dq]integer\[dq], value: \[dq]500\[dq], source: \[dq]startRange\[dq] },
  { type: \[dq]decimal\[dq], value: \[dq],\[dq], source: \[dq]startRange\[dq] },
  { type: \[dq]fraction\[dq], value: \[dq]00\[dq], source: \[dq]startRange\[dq] },
  { type: \[dq]literal\[dq], value: \[dq]\[en]\[dq], source: \[dq]shared\[dq] },
  { type: \[dq]integer\[dq], value: \[dq]9\[dq], source: \[dq]endRange\[dq] },
  { type: \[dq]group\[dq], value: \[dq].\[dq], source: \[dq]endRange\[dq] },
  { type: \[dq]integer\[dq], value: \[dq]500\[dq], source: \[dq]endRange\[dq] },
  { type: \[dq]decimal\[dq], value: \[dq],\[dq], source: \[dq]endRange\[dq] },
  { type: \[dq]fraction\[dq], value: \[dq]00\[dq], source: \[dq]endRange\[dq] },
  { type: \[dq]literal\[dq], value: \[dq] \[dq], source: \[dq]shared\[dq] },
  { type: \[dq]currency\[dq], value: \[dq]€\[dq], source: \[dq]shared\[dq] },
];
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Intl.NumberFormat\f[R]
.IP \[bu] 2
\f[CR]Intl.NumberFormat.prototype.format()\f[R]
.IP \[bu] 2
\f[CR]Intl.DateTimeFormat.prototype.formatRangeToParts()\f[R]
