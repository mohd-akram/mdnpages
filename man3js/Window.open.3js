.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Window.open" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.open \- Window: open() method
.SH SYNOPSIS
The \f[B]\f[CB]open()\f[B]\f[R] method of the \f[CR]Window\f[R]
interface loads a specified resource into a new or existing browsing
context (that is, a tab, a window, or an iframe) under a specified name.
.SH SYNTAX
.IP
.EX
open()
open(url)
open(url, target)
open(url, target, windowFeatures)
.EE
.SS Parameters
.TP
\f[B]url\f[R] \f[I](optional)\f[R]
A string indicating the URL or path of the resource to be loaded.
If an empty string (\f[CR]\[dq]\[dq]\f[R]) is specified or this
parameter is omitted, a blank page is opened into the targeted browsing
context.
.TP
\f[B]target\f[R] \f[I](optional)\f[R]
A string, without whitespace, specifying the name of the browsing
context the resource is being loaded into.
If the name doesn\[cq]t identify an existing context, a new context is
created and given the specified name.
The special \f[CR]target\f[R] keywords, \f[CR]_self\f[R],
\f[CR]_blank\f[R] (default), \f[CR]_parent\f[R], \f[CR]_top\f[R], and
\f[CR]_unfencedTop\f[R] can also be used.
\f[CR]_unfencedTop\f[R] is only relevant to fenced frames.
.RS
.PP
This name can be used as the \f[CR]target\f[R] attribute of
\f[CR]<a>\f[R] or \f[CR]<form>\f[R] elements.
.RE
.TP
\f[B]windowFeatures\f[R] \f[I](optional)\f[R]
A string containing a comma\-separated list of window features in the
form \f[CR]name=value\f[R].
Boolean values can be set to true using one of: \f[CR]name\f[R],
\f[CR]name=yes\f[R], \f[CR]name=true\f[R], or \f[CR]name=n\f[R] where
\f[CR]n\f[R] is any non\-zero integer.
These features include options such as the window\[cq]s default size and
position, whether or not to open a minimal popup window, and so forth.
The following options are supported:
.RS
.TP
\f[B]attributionsrc\f[R] \f[I](experimental)\f[R]
Indicates that you want the browser to send an
\f[CR]Attribution\-Reporting\-Eligible\f[R] header along with the
\f[CR]open()\f[R] call.
This call must be made with transient activation (i.e.\ inside a user
interaction event handle such as \f[CR]click\f[R]), within five seconds
of user interaction.
On the server\-side this is used to trigger sending an
\f[CR]Attribution\-Reporting\-Register\-Source\f[R] header in the
response to complete registration of an attribution source.
.RS
.PP
In addition, the browser is also triggered to store the associated
source data (as provided in the
\f[CR]Attribution\-Reporting\-Register\-Source\f[R] response header)
when the \f[CR]open()\f[R] method completes.
.PP
See the Attribution Reporting API for more details.
.RS
.PP
\f[B]Note:\f[R] \f[CR]open()\f[R] calls cannot be used to register an
attribution trigger.
.RE
.RE
.TP
\f[B]popup\f[R]
By default, \f[CR]window.open\f[R] opens the page in a new tab.
If \f[CR]popup\f[R] is set to true, it requests that a minimal popup
window be used.
The UI features included in the popup window will be automatically
decided by the browser, generally including an address bar only.
If \f[CR]popup\f[R] is present and set to false, a new tab is still
opened.
.RS
.PP
There are a few legacy features, which used to control UI features of
the opened window.
In modern browsers, they only have the effect of requesting a popup.
If \f[CR]popup\f[R] is unspecified, and \f[CR]windowFeatures\f[R]
contains any features (including unrecognized ones) other than
\f[CR]noopener\f[R], \f[CR]noreferrer\f[R], or
\f[CR]attributionsrc\f[R], the window is also opened as a popup if any
of the following conditions apply:
.IP \[bu] 2
\f[CR]location\f[R] and \f[CR]toolbar\f[R] are both false or absent
.IP \[bu] 2
\f[CR]menubar\f[R] is false or absent
.IP \[bu] 2
\f[CR]resizable\f[R] is false
.IP \[bu] 2
\f[CR]scrollbars\f[R] is false or absent
.IP \[bu] 2
\f[CR]status\f[R] is false or absent
.PP
Otherwise the window is opened as a tab.
.RE
.TP
\f[B]width\f[R] or \f[B]innerWidth\f[R]
Specifies the width of the content area, including scrollbars.
The minimum required value is 100.
.TP
\f[B]height\f[R] or \f[B]innerHeight\f[R]
Specifies the height of the content area, including scrollbars.
The minimum required value is 100.
.TP
\f[B]left\f[R] or \f[B]screenX\f[R]
Specifies the distance in pixels from the left side of the work area as
defined by the user\[cq]s operating system where the new window will be
generated.
.TP
\f[B]top\f[R] or \f[B]screenY\f[R]
Specifies the distance in pixels from the top side of the work area as
defined by the user\[cq]s operating system where the new window will be
generated.
.TP
\f[B]noopener\f[R]
If this feature is set, the new window will not have access to the
originating window via \f[CR]Window.opener\f[R] and returns
\f[CR]null\f[R].
.RS
.PP
When \f[CR]noopener\f[R] is used, non\-empty target names, other than
\f[CR]_top\f[R], \f[CR]_self\f[R], and \f[CR]_parent\f[R], are treated
like \f[CR]_blank\f[R] in terms of deciding whether to open a new
browsing context.
.RE
.TP
\f[B]noreferrer\f[R]
If this feature is set, the browser will omit the \f[CR]Referer\f[R]
header, as well as set \f[CR]noopener\f[R] to true.
See \f[CR]rel=\[dq]noreferrer\[dq]\f[R] for more information.
.PP
A \f[CR]null\f[R] value is treated the same as the empty string
(\f[CR]\[dq]\[dq]\f[R]).
.RE
.RS
.PP
\f[B]Note:\f[R] Requested position (\f[CR]top\f[R], \f[CR]left\f[R]),
and requested dimension (\f[CR]width\f[R], \f[CR]height\f[R]) values in
\f[CR]windowFeatures\f[R] \f[B]will be corrected\f[R] if any of such
requested value does not allow the entire browser popup to be rendered
within the work area for applications of the user\[cq]s operating
system.
In other words, no part of the new popup can be initially positioned
offscreen.
.RE
.SS Return value
If the browser successfully opens the new browsing context, a
\f[CR]WindowProxy\f[R] object is returned.
The returned reference can be used to access properties and methods of
the new context as long as it complies with the same\-origin policy
security requirements.
.PP
\f[CR]null\f[R] is returned if the browser fails to open the new
browsing context, for example because it was blocked by a browser popup
blocker.
.SH DESCRIPTION
The \f[CR]Window\f[R] interface\[cq]s \f[CR]open()\f[R] method takes a
URL as a parameter, and loads the resource it identifies into a new or
existing tab or window.
The \f[CR]target\f[R] parameter determines which window or tab to load
the resource into, and the \f[CR]windowFeatures\f[R] parameter can be
used to control to open a new popup with minimal UI features and control
its size and position.
.PP
Remote URLs won\[cq]t load immediately.
When \f[CR]window.open()\f[R] returns, the window always contains
\f[CR]about:blank\f[R].
The actual fetching of the URL is deferred and starts after the current
script block finishes executing.
The window creation and the loading of the referenced resource are done
asynchronously.
.PP
Modern browsers have strict popup blocker policies.
Popup windows must be opened in direct response to user input, and a
separate user gesture event is required for each
\f[CR]Window.open()\f[R] call.
This prevents sites from spamming users with lots of windows.
However, this poses an issue for multi\-window applications.
To work around this limitation, you can design your applications to:
.IP \[bu] 2
Open no more than one new window at once.
.IP \[bu] 2
Reuse existing windows to display different pages.
.IP \[bu] 2
Advise users on how to update their browser settings to allow multiple
windows.
.SH EXAMPLES
.SS Opening a new tab
.IP
.EX
window.open(\[dq]https://www.mozilla.org/\[dq], \[dq]mozillaTab\[dq]);
.EE
.SS Opening a popup
Alternatively, the following example demonstrates how to open a popup,
using the \f[CR]popup\f[R] feature.
.IP
.EX
window.open(\[dq]https://www.mozilla.org/\[dq], \[dq]mozillaWindow\[dq], \[dq]popup\[dq]);
.EE
.PP
It is possible to control the size and position of the new popup:
.IP
.EX
\f[B]const\f[R] windowFeatures = \[dq]left=100,top=100,width=320,height=320\[dq];
\f[B]const\f[R] handle = window.open(
  \[dq]https://www.mozilla.org/\[dq],
  \[dq]mozillaWindow\[dq],
  windowFeatures,
);
\f[B]if\f[R] (!handle) {
  \f[I]// The window wasn\[aq]t allowed to open\f[R]
  \f[I]// This is likely caused by built\-in popup blockers.\f[R]
  \f[I]// \&...\f[R]
}
.EE
.SH PROGRESSIVE ENHANCEMENT
In some cases, JavaScript is disabled or unavailable and
\f[CR]window.open()\f[R] will not work.
Instead of solely relying on the presence of this feature, we can
provide an alternative solution so that the site or application still
functions.
.SS Provide alternative ways when JavaScript is disabled
If JavaScript support is disabled or non\-existent, then the user agent
will create a secondary window accordingly or will render the referenced
resource according to its handling of the \f[CR]target\f[R] attribute.
The goal and the idea are to provide (and \f[I]not impose\f[R]) to the
user a way to open the referenced resource.
.SS HTML
.IP
.EX
<\f[B]a\f[R] href=\[dq]https://www.wikipedia.org/\[dq] target=\[dq]OpenWikipediaWindow\[dq]>
  Wikipedia, a free encyclopedia (opens in another, possibly already existing,
  tab)
</\f[B]a\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]let\f[R] windowObjectReference = \f[B]null\f[R]; \f[I]// global variable\f[R]
\f[B]function\f[R] openRequestedTab(url, windowName) {
  \f[B]if\f[R] (windowObjectReference === \f[B]null\f[R] || windowObjectReference.closed) {
    windowObjectReference = window.open(url, windowName);
  } \f[B]else\f[R] {
    windowObjectReference.focus();
  }
}

\f[B]const\f[R] link = document.querySelector(\[dq]a[target=\[aq]OpenWikipediaWindow\[aq]]\[dq]);
link.addEventListener(
  \[dq]click\[dq],
  (event) \f[B]=>\f[R] {
    openRequestedTab(link.href);
    event.preventDefault();
  },
  \f[B]false\f[R],
);
.EE
.PP
The above code solves a few usability problems related to links opening
popups.
The purpose of the \f[CR]event.preventDefault()\f[R] in the code is to
cancel the default action of the link: if the event listener for
\f[CR]click\f[R] is executed, then there is no need to execute the
default action of the link.
But if JavaScript support is disabled or non\-existent on the user\[cq]s
browser, then the event listener for \f[CR]click\f[R] is ignored, and
the browser loads the referenced resource in the target frame or window
that has the name \f[CR]\[dq]WikipediaWindowName\[dq]\f[R].
If no frame nor window has the name
\f[CR]\[dq]WikipediaWindowName\[dq]\f[R], then the browser will create a
new window and name it \f[CR]\[dq]WikipediaWindowName\[dq]\f[R].
.RS
.PP
\f[B]Note:\f[R] For more details about the \f[CR]target\f[R] attribute,
see \f[CR]<a>\f[R] or \f[CR]<form>\f[R].
.RE
.SS Reuse existing windows and avoid \f[CR]target=\[dq]_blank\[dq]\f[R]
Using \f[CR]\[dq]_blank\[dq]\f[R] as the target attribute value will
create several new and unnamed windows on the user\[cq]s desktop that
cannot be recycled or reused.
Try to provide a meaningful name to your \f[CR]target\f[R] attribute and
reuse such \f[CR]target\f[R] attribute on your page so that a click on
another link may load the referenced resource in an already created and
rendered window (therefore speeding up the process for the user) and
therefore justifying the reason (and user system resources, time spent)
for creating a secondary window in the first place.
Using a single \f[CR]target\f[R] attribute value and reusing it in links
is much more user resources friendly as it only creates one single
secondary window, which is recycled.
.PP
Here is an example where a secondary window can be opened and reused for
other links:
.SS HTML
.IP
.EX
<\f[B]p\f[R]>
  <\f[B]a\f[R] href=\[dq]https://www.wikipedia.org/\[dq] target=\[dq]SingleSecondaryWindowName\[dq]>
    Wikipedia, a free encyclopedia (opens in another, possibly already existing,
    tab)
  </\f[B]a\f[R]>
</\f[B]p\f[R]>
<\f[B]p\f[R]>
  <\f[B]a\f[R]
    href=\[dq]https://support.mozilla.org/products/firefox\[dq]
    target=\[dq]SingleSecondaryWindowName\[dq]>
    Firefox FAQ (opens in another, possibly already existing, tab)
  </\f[B]a\f[R]>
</\f[B]p\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]let\f[R] windowObjectReference = \f[B]null\f[R]; \f[I]// global variable\f[R]
\f[B]let\f[R] previousURL; \f[I]/* global variable that will store the\f[R]
\f[I]                    url currently in the secondary window */\f[R]
\f[B]function\f[R] openRequestedSingleTab(url) {
  \f[B]if\f[R] (windowObjectReference === \f[B]null\f[R] || windowObjectReference.closed) {
    windowObjectReference = window.open(url, \[dq]SingleSecondaryWindowName\[dq]);
  } \f[B]else\f[R] \f[B]if\f[R] (previousURL !== url) {
    windowObjectReference = window.open(url, \[dq]SingleSecondaryWindowName\[dq]);
    \f[I]/* if the resource to load is different,\f[R]
\f[I]       then we load it in the already opened secondary window and then\f[R]
\f[I]       we bring such window back on top/in front of its parent window. */\f[R]
    windowObjectReference.focus();
  } \f[B]else\f[R] {
    windowObjectReference.focus();
  }
  previousURL = url;
  \f[I]/* explanation: we store the current url in order to compare url\f[R]
\f[I]     in the event of another call of this function. */\f[R]
}

\f[B]const\f[R] links = document.querySelectorAll(
  \[dq]a[target=\[aq]SingleSecondaryWindowName\[aq]]\[dq],
);
\f[B]for\f[R] (\f[B]const\f[R] link \f[B]of\f[R] links) {
  link.addEventListener(
    \[dq]click\[dq],
    (event) \f[B]=>\f[R] {
      openRequestedSingleTab(link.href);
      event.preventDefault();
    },
    \f[B]false\f[R],
  );
}
.EE
.SH SAME\-ORIGIN POLICY
If the newly opened browsing context does not share the same origin, the
opening script will not be able to interact (reading or writing) with
the browsing context\[cq]s content.
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[I]// Script from example.com\f[R]
\f[B]const\f[R] otherOriginContext = window.open(\[dq]https://example.org\[dq]);
\f[I]// example.com and example.org are not the same origin\f[R]

console.log(otherOriginContext.origin);
\f[I]// DOMException: Permission denied to access property \[dq]origin\[dq] on cross\-origin object\f[R]
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[I]// Script from example.com\f[R]
\f[B]const\f[R] sameOriginContext = window.open(\[dq]https://example.com\[dq]);
\f[I]// This time, the new browsing context has the same origin\f[R]

console.log(sameOriginContext.origin);
\f[I]// https://example.com\f[R]
.EE
.PP
For more information, refer to the Same\-origin policy article.
.SH ACCESSIBILITY CONCERNS
.SS Avoid resorting to window.open()
It is preferable to avoid resorting to \f[CR]window.open()\f[R], for
several reasons:
.IP \[bu] 2
Modern browsers offer a popup\-blocking feature.
.IP \[bu] 2
Modern browsers offer tab\-browsing, and tab\-capable browser users
prefer opening new tabs to opening new windows in most situations.
.IP \[bu] 2
Users may use browser built\-in features or extensions to choose whether
to open a link in a new window, in the same window, in a new tab, the
same tab, or in the background.
Forcing the opening to happen in a specific way, using
\f[CR]window.open()\f[R], will confuse them and disregard their habits.
.IP \[bu] 2
Popups don\[cq]t have a menu toolbar, whereas new tabs use the user
interface of the browser window; therefore, many users prefer
tab\-browsing because the interface remains stable.
.SS Never use window.open() inline in HTML
Avoid
\f[CR]<a href=\[dq]#\[dq] onclick=\[dq]window.open(\&...);\[dq]>\f[R] or
\f[CR]<a href=\[dq]javascript:window\[rs].open(\&...)\[dq] \&...>\f[R].
.PP
These bogus \f[CR]href\f[R] values cause unexpected behavior when
copying/dragging links, opening links in a new tab/window, bookmarking,
or when JavaScript is loading, errors, or is disabled.
They also convey incorrect semantics to assistive technologies, like
screen readers.
.PP
If necessary, use a \f[CR]<button>\f[R] element instead.
In general, \f[I]you should only use a link for navigation to a real
URL\f[R].
.SS Always identify links leading to a secondary window
Identify links that will open new windows in a way that helps navigation
for users.
.IP
.EX
<\f[B]a\f[R] target=\[dq]WikipediaWindow\[dq] href=\[dq]https://www.wikipedia.org\[dq]>
  Wikipedia (opens in new tab)
</\f[B]a\f[R]>
.EE
.PP
The purpose is to warn users of context changes to minimize confusion on
the user\[cq]s part: changing the current window or popping up new
windows can be very disorienting to users (in the case of a popup, no
toolbar provides a \[lq]Previous\[rq] button to get back to the previous
window).
.PP
When extreme changes in context are explicitly identified before they
occur, then the users can determine if they wish to proceed or so they
can be prepared for the change: not only they will not be confused or
feel disoriented, but more experienced users can better decide how to
open such links (in a new window or not, in the same window, in a new
tab or not, in \[lq]background\[rq] or not).
.IP \[bu] 2
\c
.UR https://webaim.org/techniques/hypertext/hypertext_links
WebAIM: Links and Hypertext \- Hypertext Links
.UE \c
.IP \[bu] 2
MDN / Understanding WCAG, Guideline 3.2
.IP \[bu] 2
\c
.UR https://www.w3.org/TR/WCAG20-TECHS/G200.html
G200: Opening new windows and tabs from a link only when necessary
.UE \c
.IP \[bu] 2
\c
.UR https://www.w3.org/TR/WCAG20-TECHS/G201.html
G201: Giving users advanced warning when opening a new window
.UE \c
.SH SEE ALSO
.IP \[bu] 2
\f[CR]target\f[R] attribute documentation:
.RS 2
.IP \[bu] 2
\f[CR]<a>\f[R]
.IP \[bu] 2
\f[CR]<form>\f[R]
.RE
.IP \[bu] 2
\f[CR]window.close()\f[R]
.IP \[bu] 2
\f[CR]window.closed\f[R]
.IP \[bu] 2
\f[CR]window.focus()\f[R]
.IP \[bu] 2
\f[CR]window.opener\f[R]
.IP \[bu] 2
\f[CR]rel=\[dq]opener\[dq]\f[R] and \f[CR]rel=\[dq]noopener\[dq]\f[R]
.IP \[bu] 2
Same\-origin policy
