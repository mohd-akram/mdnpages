.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Crypto.getRandomValues" "JS" "September 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Crypto.getRandomValues \- Crypto: getRandomValues() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]Crypto.getRandomValues()\f[B]\f[R] method lets you get
cryptographically strong random values.
The array given as the parameter is filled with random numbers (random
in its cryptographic meaning).
.PP
To guarantee enough performance, implementations are not using a truly
random number generator, but they are using a pseudo\-random number
generator \f[I]seeded\f[R] with a value with enough entropy.
The pseudo\-random number generator algorithm (PRNG) may vary across
user agents, but is suitable for cryptographic purposes.
.PP
\f[CR]getRandomValues()\f[R] is the only member of the \f[CR]Crypto\f[R]
interface which can be used from an insecure context.
.SH SYNTAX
.IP
.EX
getRandomValues(typedArray)
.EE
.SS Parameters
.TP
\f[B]typedArray\f[R]
An integer\-based \f[CR]TypedArray\f[R], that is one of:
\f[CR]Int8Array\f[R], \f[CR]Uint8Array\f[R],
\f[CR]Uint8ClampedArray\f[R], \f[CR]Int16Array\f[R],
\f[CR]Uint16Array\f[R], \f[CR]Int32Array\f[R], \f[CR]Uint32Array\f[R],
\f[CR]BigInt64Array\f[R], \f[CR]BigUint64Array\f[R] (but \f[B]not\f[R]
\f[CR]Float32Array\f[R] nor \f[CR]Float64Array\f[R]).
All elements in the array will be overwritten with random numbers.
.SS Return value
The same array passed as \f[CR]typedArray\f[R] but with its contents
replaced with the newly generated random numbers.
Note that \f[CR]typedArray\f[R] is modified in\-place, and no copy is
made.
.SS Exceptions
.TP
\f[B]QuotaExceededError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]byteLength\f[R] of \f[CR]typedArray\f[R] exceeds
65,536.
.SH USAGE NOTES
Prefer the \f[CR]generateKey()\f[R] method for key generation, which is
guaranteed to be running in a secure context.
.PP
There is no minimum degree of entropy mandated by the Web Cryptography
specification.
User agents are instead urged to provide the best entropy they can when
generating random numbers, using a well\-defined, efficient pseudorandom
number generator built into the user agent itself, but seeded with
values taken from an external source of pseudorandom numbers, such as a
platform\-specific random number function, the Unix
\f[CR]/dev/urandom\f[R] device, or other source of random or
pseudorandom data.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] array = \f[B]new\f[R] Uint32Array(10);
self.crypto.getRandomValues(array);

console.log(\[dq]Your lucky numbers:\[dq]);
\f[B]for\f[R] (\f[B]const\f[R] num \f[B]of\f[R] array) {
  console.log(num);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Web Crypto API
.IP \[bu] 2
\f[CR]Math.random\f[R], a non\-cryptographic source of random numbers.
