.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice \- GPUDevice
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUDevice\f[B]\f[R] interface of the WebGPU API
represents a logical GPU device.
This is the main interface through which the majority of WebGPU
functionality is accessed.
.PP
A \f[CR]GPUDevice\f[R] object is requested using the
\f[CR]GPUAdapter.requestDevice()\f[R] method.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent, \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]adapterInfo\f[R] \f[I](experimental)\f[R] \f[I](read\-only)\f[R]
A \f[CR]GPUAdapterInfo\f[R] object containing identifying information
about the device\(cqs originating adapter.
.TP
\f[B]features\f[R] \f[I](read\-only)\f[R]
A \f[CR]GPUSupportedFeatures\f[R] object that describes additional
functionality supported by the device.
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]limits\f[R] \f[I](read\-only)\f[R]
A \f[CR]GPUSupportedLimits\f[R] object that describes the limits
supported by the device.
.TP
\f[B]lost\f[R] \f[I](read\-only)\f[R]
Contains a \f[CR]Promise\f[R] that remains pending throughout the
device\(cqs lifetime and resolves with a \f[CR]GPUDeviceLostInfo\f[R]
object when the device is lost.
.TP
\f[B]queue\f[R] \f[I](read\-only)\f[R]
Returns the primary \f[CR]GPUQueue\f[R] for the device.
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]createBindGroup()\f[R]
Creates a \f[CR]GPUBindGroup\f[R] based on a
\f[CR]GPUBindGroupLayout\f[R] that defines a set of resources to be
bound together in a group and how those resources are used in shader
stages.
.TP
\f[B]createBindGroupLayout()\f[R]
Creates a \f[CR]GPUBindGroupLayout\f[R] that defines the structure and
purpose of related GPU resources such as buffers that will be used in a
pipeline, and is used as a template when creating
\f[CR]GPUBindGroup\f[R]s.
.TP
\f[B]createBuffer()\f[R]
Creates a \f[CR]GPUBuffer\f[R] in which to store raw data to use in GPU
operations.
.TP
\f[B]createCommandEncoder()\f[R]
Creates a \f[CR]GPUCommandEncoder\f[R], which is used to encode commands
to be issued to the GPU.
.TP
\f[B]createComputePipeline()\f[R]
Creates a \f[CR]GPUComputePipeline\f[R] that can control the compute
shader stage and be used in a \f[CR]GPUComputePassEncoder\f[R].
.TP
\f[B]createComputePipelineAsync()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a
\f[CR]GPUComputePipeline\f[R], which can control the compute shader
stage and be used in a \f[CR]GPUComputePassEncoder\f[R], once the
pipeline can be used without any stalling.
.TP
\f[B]createPipelineLayout()\f[R]
Creates a \f[CR]GPUPipelineLayout\f[R] that defines the
\f[CR]GPUBindGroupLayout\f[R]s used by a pipeline.
\f[CR]GPUBindGroup\f[R]s used with the pipeline during command encoding
must have compatible \f[CR]GPUBindGroupLayout\f[R]s.
.TP
\f[B]createQuerySet()\f[R]
Creates a \f[CR]GPUQuerySet\f[R] that can be used to record the results
of queries on passes, such as occlusion or timestamp queries.
.TP
\f[B]createRenderBundleEncoder()\f[R]
Creates a \f[CR]GPURenderBundleEncoder\f[R] that can be used to
pre\-record bundles of commands.
These can be reused in \f[CR]GPURenderPassEncoder\f[R]s via the
\f[CR]executeBundles()\f[R] method, as many times as required.
.TP
\f[B]createRenderPipeline()\f[R]
Creates a \f[CR]GPURenderPipeline\f[R] that can control the vertex and
fragment shader stages and be used in a \f[CR]GPURenderPassEncoder\f[R]
or \f[CR]GPURenderBundleEncoder\f[R].
.TP
\f[B]createRenderPipelineAsync()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a
\f[CR]GPURenderPipeline\f[R], which can control the vertex and fragment
shader stages and be used in a \f[CR]GPURenderPassEncoder\f[R] or
\f[CR]GPURenderBundleEncoder\f[R], once the pipeline can be used without
any stalling.
.TP
\f[B]createSampler()\f[R]
Creates a \f[CR]GPUSampler\f[R], which controls how shaders transform
and filter texture resource data.
.TP
\f[B]createShaderModule()\f[R]
Creates a \f[CR]GPUShaderModule\f[R] from a string of WGSL source code.
.TP
\f[B]createTexture()\f[R]
Creates a \f[CR]GPUTexture\f[R] in which to store texture data to use in
GPU rendering operations.
.TP
\f[B]destroy()\f[R]
Destroys the device, preventing further operations on it.
.TP
\f[B]importExternalTexture()\f[R]
Takes an \f[CR]HTMLVideoElement\f[R] as an input and returns a
\f[CR]GPUExternalTexture\f[R] wrapper object containing a snapshot of
the video that can be used in GPU rendering operations.
.TP
\f[B]popErrorScope()\f[R]
Pops an existing GPU error scope from the error scope stack and returns
a \f[CR]Promise\f[R] that resolves to an object
(\f[CR]GPUInternalError\f[R], \f[CR]GPUOutOfMemoryError\f[R], or
\f[CR]GPUValidationError\f[R]) describing the first error captured in
the scope, or \f[CR]null\f[R] if no error occurred.
.TP
\f[B]pushErrorScope()\f[R]
Pushes a new GPU error scope onto the device\(cqs error scope stack,
allowing you to capture errors of a particular type.
.SH EVENTS
.TP
\f[B]uncapturederror\f[R] \f[I](experimental)\f[R]
Fired when an error is thrown that has not been observed by a GPU error
scope, to provide a way to report unexpected errors.
Known error cases should be handled using \f[CR]pushErrorScope()\f[R]
and \f[CR]popErrorScope()\f[R].
.SH EXAMPLES
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();
  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[B]const\f[R] device = \f[B]await\f[R] adapter.requestDevice();

  \f[B]const\f[R] shaderModule = device.createShaderModule({
    code: shaders,
  });

  \f[I]// \&...\f[R]
}
.EE
.PP
See the individual member pages listed above and the following demo
sites for a lot more examples of \f[CR]GPUDevice\f[R] usage:
.IP \(bu 2
\c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
Basic compute demo
.UE \c
.IP \(bu 2
\c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
Basic render demo
.UE \c
.IP \(bu 2
\c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
