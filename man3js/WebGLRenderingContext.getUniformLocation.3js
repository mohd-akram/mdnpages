.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "WebGLRenderingContext.getUniformLocation" "JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.getUniformLocation \- WebGLRenderingContext:
getUniformLocation() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
Part of the WebGL API, the \f[CR]WebGLRenderingContext\f[R] method
\f[B]\f[CB]getUniformLocation()\f[B]\f[R] returns the location of a
specific \f[B]uniform\f[R] variable which is part of a given
\f[CR]WebGLProgram\f[R].
.PP
The uniform variable is returned as a \f[CR]WebGLUniformLocation\f[R]
object, which is an opaque identifier used to specify where in the
GPU\[cq]s memory that uniform variable is located.
.PP
Once you have the uniform\[cq]s location, you can access the uniform
itself using one of the other uniform access methods, passing in the
uniform location as one of the inputs:
.TP
\f[B]getUniform()\f[R]
Returns the value of the uniform at the given location.
.TP
\f[B]WebGLRenderingContext.uniform[1234][fi][v]()\f[R]
Sets the uniform\[cq]s value to the specified value, which may be a
single floating point or integer number, or a 2\-4 component vector
specified either as a list of values or as a \f[CR]Float32Array\f[R] or
\f[CR]Int32Array\f[R].
.TP
\f[B]WebGLRenderingContext.uniformMatrix[234][fv]()\f[R]
Sets the uniform\[cq]s value to the specified matrix, possibly with
transposition.
The value is represented as a sequence of \f[CR]GLfloat\f[R] values or
as a \f[CR]Float32Array\f[R].
.PP
The uniform itself is declared in the shader program using GLSL.
.SH SYNTAX
.IP
.EX
getUniformLocation(program, name)
.EE
.SS Parameters
.TP
\f[B]program\f[R]
The \f[CR]WebGLProgram\f[R] in which to locate the specified uniform
variable.
.TP
\f[B]name\f[R]
A string specifying the name of the uniform variable whose location is
to be returned.
The name can\[cq]t have any whitespace in it, and you can\[cq]t use this
function to get the location of any uniforms starting with the reserved
string \f[CR]\[dq]gl_\[dq]\f[R], since those are internal to the WebGL
layer.
.RS
.PP
The possible values correspond to the uniform names returned by
\f[CR]getActiveUniform\f[R]; see that function for specifics on how
declared uniforms map to uniform location names.
.PP
Additionally, for uniforms declared as arrays, the following names are
also valid:
.IP \[bu] 2
The uniform name without the \f[CR][0]\f[R] suffix.
E.g.
the location returned for \f[CR]arrayUniform\f[R] is equivalent to the
one for \f[CR]arrayUniform[0]\f[R].
.IP \[bu] 2
The uniform name indexed with an integer.
E.g.
the location returned for \f[CR]arrayUniform[2]\f[R] would point
directly to the third entry of the \f[CR]arrayUniform\f[R] uniform.
.RE
.SS Return value
A \f[CR]WebGLUniformLocation\f[R] value indicating the location of the
named variable, if it exists.
If the specified variable doesn\[cq]t exist, \f[CR]null\f[R] is returned
instead.
.PP
The \f[CR]WebGLUniformLocation\f[R] is an opaque value used to uniquely
identify the location in the GPU\[cq]s memory at which the uniform
variable is located.
With this value in hand, you can call other WebGL methods to access the
value of the uniform variable.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]WebGLUniformLocation\f[R] type is compatible
with the \f[CR]GLint\f[R] type when specifying the index or location of
a uniform attribute.
.RE
.SS Errors
The following errors may occur; to check for errors after
\f[CR]getUniformLocation()\f[R] returns, call \f[CR]getError()\f[R].
.TP
\f[B]GL_INVALID_VALUE\f[R]
The \f[CR]program\f[R] parameter is not a value or object generated by
WebGL.
.TP
\f[B]GL_INVALID_OPERATION\f[R]
The \f[CR]program\f[R] parameter doesn\[cq]t correspond to a GLSL
program generated by WebGL, or the specified program hasn\[cq]t been
linked successfully.
.SH EXAMPLES
In this example, taken from the \f[CR]animateScene()\f[R] method in the
article A basic 2D WebGL animation example, obtains the locations of
three uniforms from the shading program, then sets the value of each of
the three uniforms.
.IP
.EX
gl.useProgram(shaderProgram);

uScalingFactor = gl.getUniformLocation(shaderProgram, \[dq]uScalingFactor\[dq]);
uGlobalColor = gl.getUniformLocation(shaderProgram, \[dq]uGlobalColor\[dq]);
uRotationVector = gl.getUniformLocation(shaderProgram, \[dq]uRotationVector\[dq]);

gl.uniform2fv(uScalingFactor, currentScale);
gl.uniform2fv(uRotationVector, currentRotation);
gl.uniform4fv(uGlobalColor, [0.1, 0.7, 0.2, 1.0]);
.EE
.RS
.PP
\f[B]Note:\f[R] This code snippet is taken from the function
\f[CR]animateScene()\f[R] in \[lq]A basic 2D WebGL animation
example.\[rq] See that article for the full sample and to see the
resulting animation in action.
.RE
.PP
After setting the current shading program to \f[CR]shaderProgram\f[R],
this code fetches the three uniforms
\f[CR]\[dq]uScalingFactor\[dq]\f[R], \f[CR]\[dq]uGlobalColor\[dq]\f[R],
and \f[CR]\[dq]uRotationVector\[dq]\f[R], calling
\f[CR]getUniformLocation()\f[R] once for each uniform.
.PP
Then the three uniforms\[cq] values are set:
.IP \[bu] 2
The \f[CR]uScalingFactor\f[R] uniform \[em] a 2\-component vertex \[em]
receives the horizontal and vertical scaling factors from the variable
\f[CR]currentScale\f[R].
.IP \[bu] 2
The uniform \f[CR]uRotationVector\f[R] is set to the contents of the
variable \f[CR]currentRotation\f[R].
This, too, is a 2\-component vertex.
.IP \[bu] 2
Finally, the uniform \f[CR]uGlobalColor\f[R] is set to the color
\f[CR][0.1, 0.7, 0.2, 1.0]\f[R], the components in this 4\-component
vector represent the values of red, green, blue, and alpha,
respectively.
.PP
Having done this, the next time the shading functions are called, their
own variables named \f[CR]uScalingFactor\f[R], \f[CR]uGlobalColor\f[R],
and \f[CR]uRotationVector\f[R] will all have the values provided by the
JavaScript code.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getAttribLocation()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getActiveUniform()\f[R]
.IP \[bu] 2
\f[CR]WebGLUniformLocation\f[R]
