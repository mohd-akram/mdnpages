.\" Automatically generated by Pandoc 3.4
.\"
.TH "ReadableStreamDefaultReader.read" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStreamDefaultReader.read \- ReadableStreamDefaultReader: read()
method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]read()\f[B]\f[R] method of the
\f[CR]ReadableStreamDefaultReader\f[R] interface returns a
\f[CR]Promise\f[R] providing access to the next chunk in the
stream\[cq]s internal queue.
.SH SYNTAX
.IP
.EX
read()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R], which fulfills/rejects with a result depending on
the state of the stream.
The different possibilities are as follows:
.IP \[bu] 2
If a chunk is available, the promise will be fulfilled with an object of
the form \f[CR]{ value: theChunk, done: false }\f[R].
.IP \[bu] 2
If the stream becomes closed, the promise will be fulfilled with an
object of the form \f[CR]{ value: undefined, done: true }\f[R].
.IP \[bu] 2
If the stream becomes errored, the promise will be rejected with the
relevant error.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The source object is not a \f[CR]ReadableStreamDefaultReader\f[R], the
stream has no owner, or
\f[CR]ReadableStreamDefaultReader.releaseLock()\f[R] is called (when
there\[cq]s a pending read request).
.SH EXAMPLES
.SS Example 1 \- simple example
This example shows the basic API usage, but doesn\[cq]t try to deal with
complications like stream chunks not ending on line boundaries for
example.
.PP
In this example, \f[CR]stream\f[R] is a previously\-created custom
\f[CR]ReadableStream\f[R].
It is read using a \f[CR]ReadableStreamDefaultReader\f[R] created using
\f[CR]getReader()\f[R].
(see our \c
.UR https://mdn.github.io/dom-examples/streams/simple-random-stream/
Simple random stream example
.UE \c
\ for the full code).
Each chunk is read sequentially and output to the UI as an array of
UTF\-8 bytes, until the stream has finished being read, at which point
we return out of the recursive function and print the entire stream to
another part of the UI.
.IP
.EX
\f[B]function\f[R] fetchStream() {
  \f[B]const\f[R] reader = stream.getReader();
  \f[B]let\f[R] charsReceived = 0;

  \f[I]// read() returns a promise that fulfills\f[R]
  \f[I]// when a value has been received\f[R]
  reader.read().then(\f[B]function\f[R] processText({ done, value }) {
    \f[I]// Result objects contain two properties:\f[R]
    \f[I]// done  \- true if the stream has already given you all its data.\f[R]
    \f[I]// value \- some data. Always undefined when done is true.\f[R]
    \f[B]if\f[R] (done) {
      console.log(\[dq]Stream complete\[dq]);
      para.textContent = result;
      \f[B]return\f[R];
    }

    \f[I]// value for fetch streams is a Uint8Array\f[R]
    charsReceived += value.length;
    \f[B]const\f[R] chunk = value;
    \f[B]let\f[R] listItem = document.createElement(\[dq]li\[dq]);
    listItem.textContent = \[ga]Received ${charsReceived} characters so far. Current chunk = ${chunk}\[ga];
    list2.appendChild(listItem);

    result += chunk;

    \f[I]// Read some more, and call this function again\f[R]
    \f[B]return\f[R] reader.read().then(processText);
  });
}
.EE
.SS Example 2 \- handling text line by line
This example shows how you might fetch a text file and handle it as a
stream of text lines.
It deals with stream chunks not ending on line boundaries, and with
converting from \f[CR]Uint8Array\f[R] to strings.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R]* makeTextFileLineIterator(fileURL) {
  \f[B]const\f[R] utf8Decoder = \f[B]new\f[R] TextDecoder(\[dq]utf\-8\[dq]);
  \f[B]let\f[R] response = \f[B]await\f[R] fetch(fileURL);
  \f[B]let\f[R] reader = response.body.getReader();
  \f[B]let\f[R] { value: chunk, done: readerDone } = \f[B]await\f[R] reader.read();
  chunk = chunk ? utf8Decoder.decode(chunk, { stream: \f[B]true\f[R] }) : \[dq]\[dq];

  \f[B]let\f[R] re = /\[rs]r\[rs]n|\[rs]n|\[rs]r/gm;
  \f[B]let\f[R] startIndex = 0;

  \f[B]for\f[R] (;;) {
    \f[B]let\f[R] result = re.exec(chunk);
    \f[B]if\f[R] (!result) {
      \f[B]if\f[R] (readerDone) {
        \f[B]break\f[R];
      }
      \f[B]let\f[R] remainder = chunk.substr(startIndex);
      ({ value: chunk, done: readerDone } = \f[B]await\f[R] reader.read());
      chunk =
        remainder + (chunk ? utf8Decoder.decode(chunk, { stream: \f[B]true\f[R] }) : \[dq]\[dq]);
      startIndex = re.lastIndex = 0;
      \f[B]continue\f[R];
    }
    \f[B]yield\f[R] chunk.substring(startIndex, result.index);
    startIndex = re.lastIndex;
  }
  \f[B]if\f[R] (startIndex < chunk.length) {
    \f[I]// last line didn\[aq]t end in a newline char\f[R]
    \f[B]yield\f[R] chunk.substr(startIndex);
  }
}

\f[B]for\f[R] \f[B]await\f[R] (\f[B]let\f[R] line \f[B]of\f[R] makeTextFileLineIterator(urlOfFile)) {
  processLine(line);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ReadableStreamDefaultReader()\f[R] constructor
.IP \[bu] 2
Using readable streams
