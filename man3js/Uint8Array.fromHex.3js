.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "UINT8ARRAY.FROMHEX" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Uint8Array.fromHex \- Uint8Array.fromHex()
.SH SYNOPSIS
The \f[B]\f[CB]Uint8Array.fromHex()\f[B]\f[R] static method creates a
new \f[CR]Uint8Array\f[R] object from a hexadecimal string.
.PP
This method parses the string into a byte array.
To convert the string into a single number, use the
\f[CR]parseInt()\f[R] function with \f[CR]radix\f[R] set to
\f[CR]16\f[R] instead.
.SH SYNTAX
.IP
.EX
Uint8Array.fromHex(string)
.EE
.SS Parameters
.TP
\f[B]string\f[R]
A hexadecimal string encoding bytes to convert to a
\f[CR]Uint8Array\f[R].
The string must:
.RS
.IP \(bu 2
Have an even number of characters because two characters encode one
byte.
.IP \(bu 2
Only contain characters in the hexadecimal alphabet, which includes
0\(en9 and A\(enF (case\-insensitive).
.IP \(bu 2
Not contain whitespace (unlike
\f[CR]Uint8Array.prototype.setFromBase64()\f[R]).
.RE
.SS Return value
A new \f[CR]Uint8Array\f[R] object containing the decoded bytes from the
hexadecimal string.
.SS Exceptions
.TP
\f[B]SyntaxError\f[R]
Thrown if the input string contains characters outside the hex alphabet,
or its length is odd.
.TP
\f[B]TypeError\f[R]
Thrown if the input string is not a string.
.SH EXAMPLES
.SS Decoding a hexadecimal string
This example decodes a hexadecimal string into a \f[CR]Uint8Array\f[R].
.IP
.EX
\f[B]const\f[R] hexString = \(dqcafed00d\(dq;
\f[B]const\f[R] bytes = Uint8Array.fromHex(hexString);
console.log(bytes); \f[I]// Uint8Array [ 202, 254, 208, 13 ]\f[R]
.EE
.PP
Uppercase characters are also supported:
.IP
.EX
\f[B]const\f[R] hexString = \(dqCAFEd00d\(dq;
\f[B]const\f[R] bytes = Uint8Array.fromHex(hexString);
console.log(bytes); \f[I]// Uint8Array [ 202, 254, 208, 13 ]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#uint8array-to--from-base64-and-hex
Polyfill of \f[CR]Uint8Array.fromHex\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/es-arraybuffer-base64
es\-shims polyfill of \f[CR]Uint8Array.fromHex\f[R]
.UE \c
.IP \(bu 2
\f[CR]Uint8Array\f[R]
.IP \(bu 2
\f[CR]Uint8Array.prototype.setFromHex()\f[R]
.IP \(bu 2
\f[CR]Uint8Array.prototype.toHex()\f[R]
.IP \(bu 2
\f[CR]parseInt()\f[R]
