.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "TRUSTEDTYPEPOLICY" "3JS" "August 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TrustedTypePolicy \- TrustedTypePolicy
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]TrustedTypePolicy\f[B]\f[R] interface of the Trusted
Types API defines a group of functions which create
\f[CR]TrustedType\f[R] objects.
.PP
A \f[CR]TrustedTypePolicy\f[R] object is created by
\f[CR]TrustedTypePolicyFactory.createPolicy()\f[R] to define a policy
for enforcing security rules on input.
Therefore, \f[CR]TrustedTypePolicy\f[R] has no constructor.
.SH INSTANCE PROPERTIES
.TP
\f[B]TrustedTypePolicy.name\f[R] \f[I](read\-only)\f[R]
A string containing the name of the policy.
.SH INSTANCE METHODS
.TP
\f[B]TrustedTypePolicy.createHTML()\f[R]
Creates a \f[CR]TrustedHTML\f[R] object.
.TP
\f[B]TrustedTypePolicy.createScript()\f[R]
Creates a \f[CR]TrustedScript\f[R] object.
.TP
\f[B]TrustedTypePolicy.createScriptURL()\f[R]
Creates a \f[CR]TrustedScriptURL\f[R] object.
.SH EXAMPLES
In the below example we create a policy that will create
\f[CR]TrustedHTML\f[R] objects using
\f[CR]TrustedTypePolicyFactory.createPolicy()\f[R].
We can then use \f[CR]TrustedTypePolicy.createHTML\f[R] to create a
sanitized HTML string to be inserted into the document.
.PP
The sanitized value can then be used with \f[CR]Element.innerHTML\f[R]
to ensure that no new HTML elements can be injected.
.IP
.EX
<\f[B]div\f[R] id=\(dqmyDiv\(dq></\f[B]div\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] escapeHTMLPolicy = trustedTypes.createPolicy(\(dqmyEscapePolicy\(dq, {
  createHTML: (string) \f[B]=>\f[R] string.replace(/</g, \(dq&lt;\(dq),
});

\f[B]let\f[R] el = document.getElementById(\(dqmyDiv\(dq);
\f[B]const\f[R] escaped = escapeHTMLPolicy.createHTML(\(dq<img src=x onerror=alert(1)>\(dq);
console.log(escaped \f[B]instanceof\f[R] TrustedHTML); \f[I]// true\f[R]
el.innerHTML = escaped;
.EE
