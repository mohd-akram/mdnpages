.\" Automatically generated by Pandoc 3.4
.\"
.TH "TypedArray.of" "JS" "October 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.of \- TypedArray.of()
.SH SYNOPSIS
The \f[B]\f[CB]TypedArray.of()\f[B]\f[R] static method creates a new
typed array from a variable number of arguments.
This method is nearly the same as \f[CR]Array.of()\f[R].
.SH SYNTAX
.IP
.EX
TypedArray.of()
TypedArray.of(element1)
TypedArray.of(element1, element2)
TypedArray.of(element1, element2, /* \&..., */ elementN)
.EE
.PP
Where \f[CR]TypedArray\f[R] is one of:
.IP \[bu] 2
\f[CR]Int8Array\f[R]
.IP \[bu] 2
\f[CR]Uint8Array\f[R]
.IP \[bu] 2
\f[CR]Uint8ClampedArray\f[R]
.IP \[bu] 2
\f[CR]Int16Array\f[R]
.IP \[bu] 2
\f[CR]Uint16Array\f[R]
.IP \[bu] 2
\f[CR]Int32Array\f[R]
.IP \[bu] 2
\f[CR]Uint32Array\f[R]
.IP \[bu] 2
\f[CR]Float16Array\f[R]
.IP \[bu] 2
\f[CR]Float32Array\f[R]
.IP \[bu] 2
\f[CR]Float64Array\f[R]
.IP \[bu] 2
\f[CR]BigInt64Array\f[R]
.IP \[bu] 2
\f[CR]BigUint64Array\f[R]
.SS Parameters
.TP
\f[B]element1\f[R], \&..., \f[B]elementN\f[R]
Elements used to create the typed array.
.SS Return value
A new \f[CR]TypedArray\f[R] instance.
.SH DESCRIPTION
See \f[CR]Array.of()\f[R] for more details.
There are some subtle distinctions between \f[CR]Array.of()\f[R] and
\f[CR]TypedArray.of()\f[R]:
.IP \[bu] 2
If the \f[CR]this\f[R] value passed to \f[CR]TypedArray.of()\f[R] is not
a constructor, \f[CR]TypedArray.of()\f[R] will throw a
\f[CR]TypeError\f[R], while \f[CR]Array.of()\f[R] defaults to creating a
new \f[CR]Array\f[R].
.IP \[bu] 2
\f[CR]TypedArray.of()\f[R] uses \f[CR][[Set]]\f[R] while
\f[CR]Array.of()\f[R] uses \f[CR][[DefineOwnProperty]]\f[R].
Hence, when working with \f[CR]Proxy\f[R] objects, it calls
\f[CR]handler.set()\f[R] to create new elements rather than
\f[CR]handler.defineProperty()\f[R].
.SH EXAMPLES
.SS Using of()
.IP
.EX
Uint8Array.of(1); \f[I]// Uint8Array [ 1 ]\f[R]
Int8Array.of(\[dq]1\[dq], \[dq]2\[dq], \[dq]3\[dq]); \f[I]// Int8Array [ 1, 2, 3 ]\f[R]
Float32Array.of(1, 2, 3); \f[I]// Float32Array [ 1, 2, 3 ]\f[R]
Int16Array.of(\f[B]undefined\f[R]); \f[I]// Int16Array [ 0 ]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]TypedArray.of\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]TypedArray.from()\f[R]
.IP \[bu] 2
\f[CR]Array.of()\f[R]
