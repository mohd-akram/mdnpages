.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "MediaDevices" "JS" "February 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaDevices \- MediaDevices
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]MediaDevices\f[B]\f[R] interface of the Media Capture and
Streams API provides access to connected media input devices like
cameras and microphones, as well as screen sharing.
In essence, it lets you obtain access to any hardware source of media
data.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]enumerateDevices()\f[R]
Obtains an array of information about the media input and output devices
available on the system.
.TP
\f[B]getSupportedConstraints()\f[R]
Returns an object conforming to
\f[CR]MediaTrackSupportedConstraints\f[R] indicating which constrainable
properties are supported on the \f[CR]MediaStreamTrack\f[R] interface.
See Media Streams API to learn more about constraints and how to use
them.
.TP
\f[B]getDisplayMedia()\f[R]
Prompts the user to select a display or portion of a display (such as a
window) to capture as a \f[CR]MediaStream\f[R] for sharing or recording
purposes.
Returns a promise that resolves to a \f[CR]MediaStream\f[R].
.TP
\f[B]getUserMedia()\f[R]
With the user\[cq]s permission through a prompt, turns on a camera
and/or a microphone on the system and provides a \f[CR]MediaStream\f[R]
containing a video track and/or an audio track with the input.
.TP
\f[B]selectAudioOutput()\f[R] \f[I](experimental)\f[R]
Prompts the user to select a specific audio output device.
.SH EVENTS
.TP
\f[B]devicechange\f[R]
Fired when a media input or output device is attached to or removed from
the user\[cq]s computer.
.SH EXAMPLE
.IP
.EX
\f[I]// Put variables in global scope to make them available to the browser console.\f[R]
\f[B]const\f[R] video = document.querySelector(\[dq]video\[dq]);
\f[B]const\f[R] constraints = {
  audio: \f[B]false\f[R],
  video: \f[B]true\f[R],
};

navigator.mediaDevices
  .getUserMedia(constraints)
  .then((stream) \f[B]=>\f[R] {
    \f[B]const\f[R] videoTracks = stream.getVideoTracks();
    console.log(\[dq]Got stream with constraints:\[dq], constraints);
    console.log(\[ga]Using video device: ${videoTracks[0].label}\[ga]);
    stream.onremovetrack = () \f[B]=>\f[R] {
      console.log(\[dq]Stream ended\[dq]);
    };
    video.srcObject = stream;
  })
  .catch((error) \f[B]=>\f[R] {
    \f[B]if\f[R] (error.name === \[dq]OverconstrainedError\[dq]) {
      console.error(
        \[ga]The resolution ${constraints.video.width.exact}x${constraints.video.height.exact} px is not supported by your device.\[ga],
      );
    } \f[B]else\f[R] \f[B]if\f[R] (error.name === \[dq]NotAllowedError\[dq]) {
      console.error(
        \[dq]You need to grant this page permission to access your camera and microphone.\[dq],
      );
    } \f[B]else\f[R] {
      console.error(\[ga]getUserMedia error: ${error.name}\[ga], error);
    }
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
Media Capture and Streams API: The API this interface is part of.
.IP \[bu] 2
Screen Capture API: The API defining the \f[CR]getDisplayMedia()\f[R]
method.
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
\f[CR]Navigator.mediaDevices\f[R]: Returns a reference to a
\f[CR]MediaDevices\f[R] object that can be used to access devices.
.IP \[bu] 2
\c
.UR https://github.com/chrisjohndigital/CameraCaptureJS
CameraCaptureJS:
.UE \c
\ HTML video capture and playback using \f[CR]MediaDevices\f[R] and the
MediaStream Recording API
.IP \[bu] 2
\c
.UR https://github.com/chrisjohndigital/OpenLang
OpenLang
.UE \c
: HTML video language lab web application using \f[CR]MediaDevices\f[R]
and the MediaStream Recording API for video recording
