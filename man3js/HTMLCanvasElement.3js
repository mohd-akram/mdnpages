.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "HTMLCanvasElement" "JS" "April 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLCanvasElement \- HTMLCanvasElement
.SH SYNOPSIS
The \f[B]\f[CB]HTMLCanvasElement\f[B]\f[R] interface provides properties
and methods for manipulating the layout and presentation of
\f[CR]<canvas>\f[R] elements.
The \f[CR]HTMLCanvasElement\f[R] interface also inherits the properties
and methods of the \f[CR]HTMLElement\f[R] interface.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent, \f[CI]HTMLElement\f[I].\f[R]
.TP
\f[B]HTMLCanvasElement.height\f[R]
The \f[CR]height\f[R] HTML attribute of the \f[CR]<canvas>\f[R] element
is a non\-negative \f[CR]integer\f[R] reflecting the number of logical
pixels (or RGBA values) going down one column of the canvas.
When the attribute is not specified, or if it is set to an invalid
value, like a negative, the default value of \f[CR]150\f[R] is used.
If no [separate] CSS height is assigned to the \f[CR]<canvas>\f[R], then
this value will also be used as the height of the canvas in the
length\-unit CSS Pixel.
.TP
\f[B]HTMLCanvasElement.width\f[R]
The \f[CR]width\f[R] HTML attribute of the \f[CR]<canvas>\f[R] element
is a non\-negative \f[CR]integer\f[R] reflecting the number of logical
pixels (or RGBA values) going across one row of the canvas.
When the attribute is not specified, or if it is set to an invalid
value, like a negative, the default value of \f[CR]300\f[R] is used.
If no [separate] CSS width is assigned to the \f[CR]<canvas>\f[R], then
this value will also be used as the width of the canvas in the
length\-unit CSS Pixel.
.TP
\f[B]HTMLCanvasElement.mozOpaque\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
A boolean value reflecting the \f[CR]moz\-opaque\f[R] HTML attribute of
the \f[CR]<canvas>\f[R] element.
It lets the canvas know whether or not translucency will be a factor.
If the canvas knows there\[cq]s no translucency, painting performance
can be optimized.
This is only supported in Mozilla\-based browsers; use the standardized
\f[CR]canvas.getContext(\[aq]2d\[aq], { alpha: false })\f[R] instead.
.TP
\f[B]HTMLCanvasElement.mozPrintCallback\f[R] \f[I](non\-standard)\f[R]
A \f[CR]function\f[R] that is Initially null.
Web content can set this to a JavaScript function that will be called
when the canvas is to be redrawn while the page is being printed.
When called, the callback is passed a \[lq]printState\[rq] object that
implements the \c
.UR https://searchfox.org/mozilla-central/search?q=interface%20MozCanvasPrintState&path=HTMLCanvasElement.webidl
MozCanvasPrintState
.UE \c
\ interface.
The callback can get the context to draw to from the printState object
and must then call done() on it when finished.
The purpose of \f[CR]mozPrintCallback\f[R] is to obtain a higher
resolution rendering of the canvas at the resolution of the printer
being used.
\c
.UR https://blog.mozilla.org/labs/2012/09/a-new-way-to-control-printing-output/
See this blog post.
.UE \c
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]HTMLElement\f[I].\f[R]
.TP
\f[B]HTMLCanvasElement.captureStream()\f[R]
Returns a \f[CR]CanvasCaptureMediaStreamTrack\f[R] that is a real\-time
video capture of the surface of the canvas.
.TP
\f[B]HTMLCanvasElement.getContext()\f[R]
Returns a drawing context on the canvas, or null if the context ID is
not supported.
A drawing context lets you draw on the canvas.
Calling getContext with \f[CR]\[dq]2d\[dq]\f[R] returns a
\f[CR]CanvasRenderingContext2D\f[R] object, whereas calling it with
\f[CR]\[dq]webgl\[dq]\f[R] (or \f[CR]\[dq]experimental\-webgl\[dq]\f[R])
returns a \f[CR]WebGLRenderingContext\f[R] object.
This context is only available on browsers that implement WebGL.
.TP
\f[B]HTMLCanvasElement.toDataURL()\f[R]
Returns a data\-URL containing a representation of the image in the
format specified by the \f[CR]type\f[R] parameter (defaults to
\f[CR]png\f[R]).
The returned image is in a resolution of 96dpi.
.TP
\f[B]HTMLCanvasElement.toBlob()\f[R]
Creates a \f[CR]Blob\f[R] object representing the image contained in the
canvas; this file may be cached on the disk or stored in memory at the
discretion of the user agent.
.TP
\f[B]HTMLCanvasElement.transferControlToOffscreen()\f[R]
Transfers control to an \f[CR]OffscreenCanvas\f[R] object, either on the
main thread or on a worker.
.SH EVENTS
\f[I]Inherits events from its parent, \f[CI]HTMLElement\f[I].\f[R]
.PP
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]contextlost\f[R]
Fired if the browser detects that the
\f[CR]CanvasRenderingContext2D\f[R] context has been lost.
.TP
\f[B]contextrestored\f[R]
Fired if the browser successfully restores a
\f[CR]CanvasRenderingContext2D\f[R] context
.TP
\f[B]webglcontextcreationerror\f[R]
Fired if the user agent is unable to create a
\f[CR]WebGLRenderingContext\f[R] or \f[CR]WebGL2RenderingContext\f[R]
context.
.TP
\f[B]webglcontextlost\f[R]
Fired if the user agent detects that the drawing buffer associated with
a \f[CR]WebGLRenderingContext\f[R] or \f[CR]WebGL2RenderingContext\f[R]
object has been lost.
.TP
\f[B]webglcontextrestored\f[R]
Fired if the user agent restores the drawing buffer for a
\f[CR]WebGLRenderingContext\f[R] or \f[CR]WebGL2RenderingContext\f[R]
object.
.SH SEE ALSO
.IP \[bu] 2
HTML element implementing this interface: \f[CR]<canvas>\f[R]
