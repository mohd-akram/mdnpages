.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Proxy.Proxy.getOwnPropertyDescriptor" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Proxy.Proxy.getOwnPropertyDescriptor \-
handler.getOwnPropertyDescriptor()
.SH SYNOPSIS
The \f[B]\f[CB]handler.getOwnPropertyDescriptor()\f[B]\f[R] method is a
trap for the \f[CR][[GetOwnProperty]]\f[R] object internal method, which
is used by operations such as
\f[CR]Object.getOwnPropertyDescriptor()\f[R].
.SH SYNTAX
.IP
.EX
new Proxy(target, {
  getOwnPropertyDescriptor(target, prop) {
  }
});
.EE
.SS Parameters
The following parameters are passed to the
\f[CR]getOwnPropertyDescriptor()\f[R] method.
\f[CR]this\f[R] is bound to the handler.
.TP
\f[B]target\f[R]
The target object.
.TP
\f[B]prop\f[R]
The name of the property whose description should be retrieved.
.SS Return value
The \f[CR]getOwnPropertyDescriptor()\f[R] method must return an object
or \f[CR]undefined\f[R].
.SH DESCRIPTION
.SS Interceptions
This trap can intercept these operations:
.IP \[bu] 2
\f[CR]Object.getOwnPropertyDescriptor()\f[R]
.IP \[bu] 2
\f[CR]Reflect.getOwnPropertyDescriptor()\f[R]
.PP
Or any other operation that invokes the \f[CR][[GetOwnProperty]]\f[R]
internal method.
.SS Invariants
If the following invariants are violated, the trap throws a
\f[CR]TypeError\f[R] when invoked.
.IP \[bu] 2
\f[CR]getOwnPropertyDescriptor()\f[R] must return an object or
\f[CR]undefined\f[R].
.IP \[bu] 2
A property cannot be reported as non\-existent, if it exists as a
non\-configurable own property of the target object.
.IP \[bu] 2
A property cannot be reported as non\-existent, if it exists as an own
property of the target object and the target object is not extensible.
.IP \[bu] 2
A property cannot be reported as existent, if it does not exists as an
own property of the target object and the target object is not
extensible.
.IP \[bu] 2
A property cannot be reported as non\-configurable, if it does not
exists as an own property of the target object or if it exists as a
configurable own property of the target object.
.IP \[bu] 2
The result of \f[CR]Object.getOwnPropertyDescriptor(target)\f[R] can be
applied to the target object using \f[CR]Object.defineProperty()\f[R]
and will not throw an exception.
.SH EXAMPLES
.SS Trapping of getOwnPropertyDescriptor
The following code traps \f[CR]Object.getOwnPropertyDescriptor()\f[R].
.IP
.EX
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(
  { a: 20 },
  {
    getOwnPropertyDescriptor(target, prop) {
      console.log(\[ga]called: ${prop}\[ga]);
      \f[B]return\f[R] { configurable: \f[B]true\f[R], enumerable: \f[B]true\f[R], value: 10 };
    },
  },
);

console.log(Object.getOwnPropertyDescriptor(p, \[dq]a\[dq]).value);
\f[I]// \[dq]called: a\[dq]\f[R]
\f[I]// 10\f[R]
.EE
.PP
The following code violates an invariant.
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] obj = { a: 10 };
Object.preventExtensions(obj);
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(obj, {
  getOwnPropertyDescriptor(target, prop) {
    \f[B]return\f[R] \f[B]undefined\f[R];
  },
});

Object.getOwnPropertyDescriptor(p, \[dq]a\[dq]); \f[I]// TypeError is thrown\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Proxy\f[R]
.IP \[bu] 2
\f[CR]Proxy()\f[R] constructor
.IP \[bu] 2
\f[CR]Object.getOwnPropertyDescriptor()\f[R]
.IP \[bu] 2
\f[CR]Reflect.getOwnPropertyDescriptor()\f[R]
