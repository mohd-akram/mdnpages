.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Proxy.Proxy.getOwnPropertyDescriptor" "JS" "July 11, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Proxy.Proxy.getOwnPropertyDescriptor \-
handler.getOwnPropertyDescriptor()
.SH SYNOPSIS
The \f[B]\f[CB]handler.getOwnPropertyDescriptor()\f[B]\f[R] method is a
trap for the \f[CR][[GetOwnProperty]]\f[R] object internal method, which
is used by operations such as
\f[CR]Object.getOwnPropertyDescriptor()\f[R].
.SH SYNTAX
.IP
.EX
new Proxy(target, {
  getOwnPropertyDescriptor(target, property) {
  }
})
.EE
.SS Parameters
The following parameters are passed to the
\f[CR]getOwnPropertyDescriptor()\f[R] method.
\f[CR]this\f[R] is bound to the handler.
.TP
\f[B]target\f[R]
The target object.
.TP
\f[B]property\f[R]
A string or \f[CR]Symbol\f[R] representing the property name.
.SS Return value
The \f[CR]getOwnPropertyDescriptor()\f[R] method must return an object
or \f[CR]undefined\f[R], representing the property descriptor.
Missing attributes are normalized in the same way as
\f[CR]Object.defineProperty()\f[R].
.SH DESCRIPTION
.SS Interceptions
This trap can intercept these operations:
.IP \[bu] 2
\f[CR]Object.getOwnPropertyDescriptor()\f[R]
.IP \[bu] 2
\f[CR]Reflect.getOwnPropertyDescriptor()\f[R]
.PP
Or any other operation that invokes the \f[CR][[GetOwnProperty]]\f[R]
internal method.
.SS Invariants
The proxy\[cq]s \f[CR][[GetOwnProperty]]\f[R] internal method throws a
\f[CR]TypeError\f[R] if the handler definition violates one of the
following invariants:
.IP \[bu] 2
The result must be either an \f[CR]Object\f[R] or \f[CR]undefined\f[R].
.IP \[bu] 2
A property cannot be reported as non\-existent, if it exists as a
non\-configurable own property of the target object.
That is, if \f[CR]Reflect.getOwnPropertyDescriptor()\f[R] returns
\f[CR]configurable: false\f[R] for the property on \f[CR]target\f[R],
then the trap must not return \f[CR]undefined\f[R].
.IP \[bu] 2
A property cannot be reported as non\-existent, if it exists as an own
property of a non\-extensible target object.
That is, if \f[CR]Reflect.isExtensible()\f[R] returns \f[CR]false\f[R]
for the target object, then the trap must not return
\f[CR]undefined\f[R].
.IP \[bu] 2
A property cannot be reported as existent, if it does not exist as an
own property of the target object and the target object is not
extensible.
That is, if \f[CR]Reflect.isExtensible()\f[R] returns \f[CR]false\f[R]
for the target object, and \f[CR]Reflect.getOwnPropertyDescriptor()\f[R]
returns \f[CR]undefined\f[R] for the property on \f[CR]target\f[R], then
the trap must return \f[CR]undefined\f[R].
.IP \[bu] 2
A property cannot be reported as non\-configurable, unless it exists as
a non\-configurable own property of the target object.
That is, if \f[CR]Reflect.getOwnPropertyDescriptor()\f[R] returns
\f[CR]undefined\f[R] or \f[CR]configurable: true\f[R] for the property
on \f[CR]target\f[R], then the trap must not return
\f[CR]configurable: false\f[R].
.IP \[bu] 2
A property cannot be reported as both non\-configurable and
non\-writable, unless it exists as a non\-configurable, non\-writable
own property of the target object.
That is, in addition to the previous invariant, if
\f[CR]Reflect.getOwnPropertyDescriptor()\f[R] returns
\f[CR]configurable: false, writable: true\f[R] for the property on
\f[CR]target\f[R], then the trap must not return
\f[CR]configurable: false, writable: false\f[R].
.IP \[bu] 2
If a property has a corresponding property on the target object, then
the target object property\[cq]s descriptor must be compatible with
\f[CR]descriptor\f[R].
That is, pretending \f[CR]target\f[R] is an ordinary object, then
\f[CR]Object.defineProperty(target, property, resultObject)\f[R] must
not throw an error.
The \f[CR]Object.defineProperty()\f[R] reference contains more
information, but to summarize, when the target property is
non\-configurable, the following must hold:
.RS 2
.IP \[bu] 2
\f[CR]configurable\f[R], \f[CR]enumerable\f[R], \f[CR]get\f[R], and
\f[CR]set\f[R] must be the same as original.
\f[CR]writable\f[R] must also be the original by virtue of the previous
invariant.
.IP \[bu] 2
the property must stay as data or accessor
.IP \[bu] 2
the \f[CR]value\f[R] attribute can only be changed if
\f[CR]writable\f[R] is \f[CR]true\f[R]
.RE
.SH EXAMPLES
.SS Trapping of getOwnPropertyDescriptor
The following code traps \f[CR]Object.getOwnPropertyDescriptor()\f[R].
.IP
.EX
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(
  { a: 20 },
  {
    getOwnPropertyDescriptor(target, prop) {
      console.log(\[ga]called: ${prop}\[ga]);
      \f[B]return\f[R] { configurable: \f[B]true\f[R], enumerable: \f[B]true\f[R], value: 10 };
    },
  },
);

console.log(Object.getOwnPropertyDescriptor(p, \[dq]a\[dq]).value);
\f[I]// \[dq]called: a\[dq]\f[R]
\f[I]// 10\f[R]
.EE
.PP
The following code violates an invariant.
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] obj = { a: 10 };
Object.preventExtensions(obj);
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(obj, {
  getOwnPropertyDescriptor(target, prop) {
    \f[B]return\f[R] \f[B]undefined\f[R];
  },
});

Object.getOwnPropertyDescriptor(p, \[dq]a\[dq]); \f[I]// TypeError is thrown\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Proxy\f[R]
.IP \[bu] 2
\f[CR]Proxy()\f[R] constructor
.IP \[bu] 2
\f[CR]Object.getOwnPropertyDescriptor()\f[R]
.IP \[bu] 2
\f[CR]Reflect.getOwnPropertyDescriptor()\f[R]
