.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUTEXTURE.CREATEVIEW" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUTexture.createView \- GPUTexture: createView() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createView()\f[B]\f[R] method of the
\f[CR]GPUTexture\f[R] interface creates a \f[CR]GPUTextureView\f[R]
representing a specific view of the \f[CR]GPUTexture\f[R].
.SH SYNTAX
.IP
.EX
createView()
createView(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R] \f[I](optional)\f[R]
An object containing the following properties:
.RS
.TP
\f[B]arrayLayerCount\f[R] \f[I](optional)\f[R]
A number defining how many array layers are accessible to the view,
starting with the \f[CR]baseArrayLayer\f[R] value.
.RS
.PP
If \f[CR]arrayLayerCount\f[R] is omitted, it is given a value as
follows:
.IP \(bu 2
If \f[CR]dimension\f[R] is \f[CR]\(dq1d\(dq\f[R], \f[CR]\(dq2d\(dq\f[R],
or \f[CR]\(dq3d\(dq\f[R], \f[CR]arrayLayerCount\f[R] is 1.
.IP \(bu 2
If \f[CR]dimension\f[R] is \f[CR]\(dqcube\(dq\f[R],
\f[CR]arrayLayerCount\f[R] is 6.
.IP \(bu 2
If \f[CR]dimension\f[R] is \f[CR]\(dq2d\-array\(dq\f[R], or
\f[CR]\(dqcube\-array\(dq\f[R], \f[CR]arrayLayerCount\f[R] is
\f[CR]GPUTexture.depthOrArrayLayers\f[R] \- \f[CR]baseArrayLayer\f[R].
.RE
.TP
\f[B]aspect\f[R] \f[I](optional)\f[R]
An enumerated value specifying which aspect(s) of the texture are
accessible to the texture view.
Possible values are:
.RS
.TP
\f[B]\(dqall\(dq\f[R]
All available aspects of the texture format will be accessible to the
view, which can mean all or any of color, depth, and stencil, depending
on what kind of format you are dealing with.
.TP
\f[B]\(dqdepth\-only\(dq\f[R]
Only the depth aspect of a \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
\ will be accessible to the view.
.TP
\f[B]\(dqstencil\-only\(dq\f[R]
Only the stencil aspect of a depth\-or\-stencil format will be
accessible to the view.
.PP
If omitted, \f[CR]aspect\f[R] takes a value of \f[CR]\(dqall\(dq\f[R].
.RE
.TP
\f[B]baseArrayLayer\f[R] \f[I](optional)\f[R]
A number defining the index of the first array layer accessible to the
view.
If omitted, \f[CR]baseArrayLayer\f[R] takes a value of 0.
.TP
\f[B]baseMipLevel\f[R] \f[I](optional)\f[R]
A number representing the first (most detailed) mipmap level accessible
to the view.
If omitted, \f[CR]baseMipLevel\f[R] takes a value of 0.
.TP
\f[B]dimension\f[R] \f[I](optional)\f[R]
An enumerated value specifying the format to view the texture as.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dq1d\(dq\f[R]: The texture is viewed as a one\-dimensional
image.
.IP \(bu 2
\f[CR]\(dq2d\(dq\f[R]: The texture is viewed as a single
two\-dimensional image.
.IP \(bu 2
\f[CR]\(dq2d\-array\(dq\f[R]: The texture is viewed as an array of
two\-dimensional images.
.IP \(bu 2
\f[CR]\(dqcube\(dq\f[R]: The texture is viewed as a cubemap.
The view has 6 array layers, corresponding to the
\f[CR][+X, \-X, +Y, \-Y, +Z, \-Z]\f[R] faces of the cube.
Sampling is done seamlessly across the faces of the cubemap.
.IP \(bu 2
\f[CR]\(dqcube\-array\(dq\f[R]: The texture is viewed as a packed array
of N cubemaps, each with 6 array layers corresponding to the
\f[CR][+X, \-X, +Y, \-Y, +Z, \-Z]\f[R] faces of the cube.
Sampling is done seamlessly across the faces of the cubemaps.
.IP \(bu 2
\f[CR]\(dq3d\(dq\f[R]: The texture is viewed as a three\-dimensional
image.
.PP
If \f[CR]dimension\f[R] is omitted, it is given a value as follows:
.IP \(bu 2
If \f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq1d\(dq\f[R],
\f[CR]dimension\f[R] is \f[CR]\(dq1d\(dq\f[R].
.IP \(bu 2
If \f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq2d\(dq\f[R] and
\f[CR]GPUTexture.depthOrArrayLayers\f[R] is 1, \f[CR]dimension\f[R] is
\f[CR]\(dq2d\(dq\f[R].
.IP \(bu 2
If \f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq2d\(dq\f[R] and
\f[CR]GPUTexture.depthOrArrayLayers\f[R] is more than 1,
\f[CR]dimension\f[R] is \f[CR]\(dq2d\-array\(dq\f[R].
.IP \(bu 2
If \f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq3d\(dq\f[R],
\f[CR]dimension\f[R] is \f[CR]\(dq3d\(dq\f[R].
.RE
.TP
\f[B]format\f[R] \f[I](optional)\f[R]
An enumerated value specifying the format of the texture view.
See the \c
.UR https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat
Texture formats
.UE \c
\ section of the specification for all the possible values.
.RS
.PP
If \f[CR]format\f[R] is omitted, it will be given a value as follows:
.IP \(bu 2
If \f[CR]aspect\f[R] is \f[CR]\(dqdepth\-only\(dq\f[R] or
\f[CR]\(dqstencil\-only\(dq\f[R], and \f[CR]GPUTexture.format\f[R] is a
\c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
, \f[CR]format\f[R] will be set equal to the appropriate \c
.UR https://gpuweb.github.io/gpuweb/#aspect-specific-format
aspect\-specific format
.UE \c
\&.
.IP \(bu 2
Otherwise it will be set equal to \f[CR]GPUTexture.format\f[R].
.RE
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]mipLevelCount\f[R] \f[I](optional)\f[R]
A number defining how many mipmap levels are accessible to the view,
starting with the \f[CR]baseMipLevel\f[R] value.
.RS
.PP
If \f[CR]mipLevelCount\f[R] is omitted, it will be given a value of
\f[CR]GPUTexture.mipLevelCount\f[R] \- \f[CR]baseMipLevel\f[R].
.RE
.TP
\f[B]usage\f[R] \f[I](optional)\f[R]
A set of bitwise flags representing a subset of the source texture\(cqs
usage flags (available in the \f[CR]GPUTexture.usage\f[R] property) that
are compatible with the chosen view format.
This can be used to restrict the allowed view usage in cases where the
view format is incompatible with certain usages.
The available usage flags are listed in the \f[CR]GPUTexture.usage\f[R]
value table.
.RS
.PP
The default value is \f[CR]0\f[R], which represents the source
texture\(cqs full set of usage flags.
If the view\(cqs \f[CR]format\f[R] doesn\(cqt support all of the
texture\(cqs usages, the default will fail, and the view\(cqs usage must
be specified explicitly.
.RE
.RE
.SS Return value
A \f[CR]GPUTextureView\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createView()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUTextureView\f[R] object is returned:
.IP \(bu 2
If \f[CR]aspect\f[R] is \f[CR]\(dqall\(dq\f[R], \f[CR]format\f[R] is
equal to \f[CR]GPUTexture.format\f[R], or one of the
\f[CR]viewFormats\f[R] specified in the originating
\f[CR]GPUDevice.createTexture()\f[R] call\(cqs descriptor object.
.IP \(bu 2
If \f[CR]aspect\f[R] is \f[CR]\(dqdepth\-only\(dq\f[R] or
\f[CR]\(dqstencil\-only\(dq\f[R], \f[CR]format\f[R] is equal to the
appropriate \c
.UR https://gpuweb.github.io/gpuweb/#aspect-specific-format
aspect\-specific format
.UE \c
\ of the \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
\&.
.IP \(bu 2
\f[CR]mipLevelCount\f[R] is greater than 0.
.IP \(bu 2
\f[CR]mipLevelCount\f[R] + \f[CR]baseMipLevel\f[R] is less than or equal
to \f[CR]GPUTexture.mipLevelCount\f[R].
.IP \(bu 2
\f[CR]arrayLayerCount\f[R] is greater than 0.
.IP \(bu 2
\f[CR]arrayLayerCount\f[R] + \f[CR]baseArrayLayer\f[R] is less than or
equal to \f[CR]GPUTexture.depthOrArrayLayers\f[R] if
\f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq2d\(dq\f[R], or less than
or equal to 1 if \f[CR]GPUTexture.dimension\f[R] is
\f[CR]\(dq1d\(dq\f[R] or \f[CR]\(dq3d\(dq\f[R].
.IP \(bu 2
If \f[CR]sampleCount\f[R] is greater than 1, \f[CR]dimension\f[R] is
\f[CR]\(dq2d\(dq\f[R].
.IP \(bu 2
If \f[CR]dimension\f[R] is:
.RS 2
.IP \(bu 2
\f[CR]\(dq1d\(dq\f[R]
.RS 2
.IP \(bu 2
\f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq1d\(dq\f[R]
.IP \(bu 2
\f[CR]arrayLayerCount\f[R] is 1
.RE
.IP \(bu 2
\f[CR]\(dq2d\(dq\f[R]
.RS 2
.IP \(bu 2
\f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq2d\(dq\f[R]
.IP \(bu 2
\f[CR]arrayLayerCount\f[R] is 1
.RE
.IP \(bu 2
\f[CR]\(dq2d\-array\(dq\f[R]
.RS 2
.IP \(bu 2
\f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq2d\(dq\f[R]
.RE
.IP \(bu 2
\f[CR]\(dqcube\(dq\f[R]
.RS 2
.IP \(bu 2
\f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq2d\(dq\f[R]
.IP \(bu 2
\f[CR]arrayLayerCount\f[R] is 6
.IP \(bu 2
\f[CR]GPUTexture.width\f[R] is equal to \f[CR]GPUTexture.height\f[R]
.RE
.IP \(bu 2
\f[CR]\(dqcube\-array\(dq\f[R]
.RS 2
.IP \(bu 2
\f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq2d\(dq\f[R]
.IP \(bu 2
\f[CR]arrayLayerCount\f[R] is a multiple of 6
.IP \(bu 2
\f[CR]GPUTexture.width\f[R] is equal to \f[CR]GPUTexture.height\f[R]
.RE
.IP \(bu 2
\f[CR]\(dq3d\(dq\f[R]
.RS 2
.IP \(bu 2
\f[CR]GPUTexture.dimension\f[R] is \f[CR]\(dq3d\(dq\f[R]
.IP \(bu 2
\f[CR]arrayLayerCount\f[R] is 1
.RE
.RE
.IP \(bu 2
The view\(cqs \f[CR]format\f[R] supports all of the usages specified in
the \f[CR]usage\f[R] property.
.SH EXAMPLES
.SS Typical \f[CR]createView()\f[R] usage
In the WebGPU Samples \c
.UR https://webgpu.github.io/webgpu-samples/samples/cubemap/
Cubemap demo
.UE \c
, you will see multiple examples of how \f[CR]createView()\f[R] is used,
both as to create a view \f[CR]resource\f[R] for a
\f[CR]GPUDevice.createBindGroup()\f[R] call, and to provide a
\f[CR]view\f[R] in the \f[CR]depthStencilAttachment\f[R] object of a
\f[CR]GPUCommandEncoder.beginRenderPass()\f[R] descriptor.
.IP
.EX
\f[B]const\f[R] uniformBindGroup = device.createBindGroup({
  layout: pipeline.getBindGroupLayout(0),
  entries: [
    {
      binding: 0,
      resource: {
        buffer: uniformBuffer,
        offset: 0,
        size: uniformBufferSize,
      },
    },
    {
      binding: 1,
      resource: sampler,
    },
    {
      binding: 2,
      resource: cubemapTexture.createView({
        dimension: \(dqcube\(dq,
      }),
    },
  ],
});

\f[B]const\f[R] renderPassDescriptor: GPURenderPassDescriptor = {
  colorAttachments: [
    {
      view: \f[B]undefined\f[R], \f[I]// Assigned later\f[R]
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
    },
  ],
  depthStencilAttachment: {
    view: depthTexture.createView(),

    depthClearValue: 1.0,
    depthLoadOp: \(dqclear\(dq,
    depthStoreOp: \(dqstore\(dq,
  },
};

\f[I]// \&...\f[R]

\f[B]const\f[R] commandEncoder = device.createCommandEncoder();
\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// \&...\f[R]
.EE
.SS \f[CR]createView()\f[R] with usage restriction
In this snippet, we create a texture and then create a view that has its
usage restricted via the \f[CR]usage\f[R] property.
.IP
.EX
\f[B]const\f[R] texture = myDevice.createTexture({
  size: [4, 4],
  format: \(dqrgba8unorm\(dq,
  usage:
    GPUTextureUsage.RENDER_ATTACHMENT |
    GPUTextureUsage.TEXTURE_BINDING |
    GPUTextureUsage.STORAGE_BINDING,
  viewFormats: [\(dqrgba8unorm\-srgb\(dq],
});

\f[B]const\f[R] view = texture.createView({
  format: \(dqrgba8unorm\-srgb\(dq,
  usage: GPUTextureUsage.RENDER_ATTACHMENT, \f[I]// Restrict allowed usage\f[R]
});
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
