.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CANVASRENDERINGCONTEXT2D.TRANSFORM" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.transform \- CanvasRenderingContext2D:
transform() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.transform()\f[B]\f[R] method of
the Canvas 2D API multiplies the current transformation with the matrix
described by the arguments of this method.
This lets you scale, rotate, translate (move), and skew the context.
.RS
.PP
\f[B]Note:\f[R] See also the \f[CR]setTransform()\f[R] method, which
resets the current transform to the identity matrix and then invokes
\f[CR]transform()\f[R].
.RE
.SH SYNTAX
.IP
.EX
transform(a, b, c, d, e, f)
.EE
.PP
The transformation matrix is described by: [acebdf001].
.SS Parameters
.TP
\f[B]a\f[R] (\f[B]m11\f[R])
The cell in the first row and first column of the matrix.
.TP
\f[B]b\f[R] (\f[B]m12\f[R])
The cell in the second row and first column of the matrix.
.TP
\f[B]c\f[R] (\f[B]m21\f[R])
The cell in the first row and second column of the matrix.
.TP
\f[B]d\f[R] (\f[B]m22\f[R])
The cell in the second row and second column of the matrix.
.TP
\f[B]e\f[R] (\f[B]m41\f[R])
The cell in the first row and third column of the matrix.
.TP
\f[B]f\f[R] (\f[B]m42\f[R])
The cell in the second row and third column of the matrix.
.PP
If a point originally had coordinates (x,y)(x, y), then after the
transformation it will have coordinates (ax+cy+e,bx+dy+f)(ax + cy + e,
bx + dy + f).
This means:
.IP \(bu 2
\f[CR]e\f[R] and \f[CR]f\f[R] control the horizontal and vertical
translation of the context.
.IP \(bu 2
When \f[CR]b\f[R] and \f[CR]c\f[R] are \f[CR]0\f[R], \f[CR]a\f[R] and
\f[CR]d\f[R] control the horizontal and vertical scaling of the context.
.IP \(bu 2
When \f[CR]a\f[R] and \f[CR]d\f[R] are \f[CR]1\f[R], \f[CR]b\f[R] and
\f[CR]c\f[R] control the horizontal and vertical skewing of the context.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Skewing a shape
This example skews a rectangle both vertically (\f[CR].2\f[R]) and
horizontally (\f[CR].8\f[R]).
Scaling and translation remain unchanged.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

ctx.transform(1, 0.2, 0.8, 1, 0, 0);
ctx.fillRect(0, 0, 100, 100);
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \(bu 2
\f[CR]CanvasRenderingContext2D.setTransform()\f[R]
