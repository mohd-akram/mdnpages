.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Element.beforeinput_event" "JS" "January 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.beforeinput_event \- Element: beforeinput event
.SH SYNOPSIS
The DOM \f[B]\f[CB]beforeinput\f[B]\f[R] event fires when the value of
an \f[CR]<input>\f[R] or \f[CR]<textarea>\f[R] element is about to be
modified.
But in contrast to the \f[CR]input\f[R] event, it does not fire on the
\f[CR]<select>\f[R] element.
The event also applies to elements with \f[CR]contenteditable\f[R]
enabled, and to any element when \f[CR]designMode\f[R] is turned on.
.PP
This allows web apps to override text edit behavior before the browser
modifies the DOM tree, and provides more control over input events to
improve performance.
.PP
In the case of \f[CR]contenteditable\f[R] and \f[CR]designMode\f[R], the
event target is the \f[B]editing host\f[R].
If these properties apply to multiple elements, the editing host is the
nearest ancestor element whose parent isn\[cq]t editable.
.RS
.PP
\f[B]Note:\f[R] Not every user modification results in
\f[CR]beforeinput\f[R] firing.
Also the event may fire but be non\-cancelable.
This may happen when the modification is done by autocomplete, by
accepting a correction from a spell checker, by password manager
autofill, by IME, or in other ways.
The details vary by browser and OS.
To override the edit behavior in all situations, the code needs to
handle the \f[CR]input\f[R] event and possibly revert any modifications
that were not handled by the \f[CR]beforeinput\f[R] handler.
See bugs \c
.UR https://bugzil.la/1673558
1673558
.UE \c
\ and \c
.UR https://bugzil.la/1763669
1763669
.UE \c
\&.
.RE
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]beforeinput\[dq], (event) \f[B]=>\f[R] {});

onbeforeinput = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
An \f[CR]InputEvent\f[R].
Inherits from \f[CR]UIEvent\f[R].
.SH EVENT PROPERTIES
\f[I]This interface inherits properties from its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]InputEvent.data\f[R] \f[I](read\-only)\f[R]
Returns a string with the inserted characters.
This may be an empty string if the change doesn\[cq]t insert text (for
example, when deleting characters).
.TP
\f[B]InputEvent.dataTransfer\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]DataTransfer\f[R] object containing information about
richtext or plaintext data being added to or removed from editable
content.
.TP
\f[B]InputEvent.inputType\f[R] \f[I](read\-only)\f[R]
Returns the type of change for editable content such as, for example,
inserting, deleting, or formatting text.
.TP
\f[B]InputEvent.isComposing\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Boolean\f[R] value indicating if the event is fired
after \f[CR]compositionstart\f[R] and before \f[CR]compositionend\f[R].
.SH EXAMPLES
.SS Feature Detection
The following function returns true if \f[CR]beforeinput\f[R], and thus
\f[CR]getTargetRanges\f[R], is supported.
.IP
.EX
\f[B]function\f[R] isBeforeInputEventAvailable() {
  \f[B]return\f[R] (
    window.InputEvent &&
    \f[B]typeof\f[R] InputEvent.prototype.getTargetRanges === \[dq]function\[dq]
  );
}
.EE
.SS Simple logger
This example logs the current value of the element, immediately before
replacing that value with the new one applied to the \f[CR]<input>\f[R]
element.
.SS HTML
.IP
.EX
<\f[B]input\f[R] placeholder=\[dq]Enter some text\[dq] name=\[dq]name\[dq] />
<\f[B]p\f[R] id=\[dq]values\[dq]></\f[B]p\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] input = document.querySelector(\[dq]input\[dq]);
\f[B]const\f[R] log = document.getElementById(\[dq]values\[dq]);

input.addEventListener(\[dq]beforeinput\[dq], updateValue);

\f[B]function\f[R] updateValue(e) {
  log.textContent = e.target.value;
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related event: \f[CR]input\f[R]
