.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERPASSENCODER.DRAW" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderPassEncoder.draw \- GPURenderPassEncoder: draw() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]draw()\f[B]\f[R] method of the
\f[CR]GPURenderPassEncoder\f[R] interface draws primitives based on the
vertex buffers provided by \f[CR]setVertexBuffer()\f[R].
.SH SYNTAX
.IP
.EX
draw(vertexCount)
draw(vertexCount, instanceCount)
draw(vertexCount, instanceCount, firstVertex)
draw(vertexCount, instanceCount, firstVertex, firstInstance)
.EE
.SS Parameters
.TP
\f[B]vertexCount\f[R]
A number defining the number of vertices to draw.
.TP
\f[B]instanceCount\f[R] \f[I](optional)\f[R]
A number defining the number of instances to draw.
If omitted, \f[CR]instanceCount\f[R] defaults to 1.
.TP
\f[B]firstVertex\f[R] \f[I](optional)\f[R]
A number defining the offset into the vertex buffers, in vertices, to
begin drawing from.
If omitted, \f[CR]firstVertex\f[R] defaults to 0.
.TP
\f[B]firstInstance\f[R] \f[I](optional)\f[R]
A number defining the first instance to draw.
If omitted, \f[CR]firstInstance\f[R] defaults to 0.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, several commands are recorded via a \f[CR]GPUCommandEncoder\f[R].
Most of these commands originate from the
\f[CR]GPURenderPassEncoder\f[R] created via
\f[CR]GPUCommandEncoder.beginRenderPass()\f[R].
\f[CR]draw()\f[R] is used to specify that three vertices should be drawn
to create our triangle.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] renderPipeline = device.createRenderPipeline(pipelineDescriptor);

\f[I]// Create GPUCommandEncoder to issue commands to the GPU\f[R]
\f[I]// Note: render pass descriptor, command encoder, etc. are destroyed after use, fresh one needed for each frame.\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Create GPURenderPassDescriptor to tell WebGPU which texture to draw into, then initiate render pass\f[R]
\f[B]const\f[R] renderPassDescriptor = {
  colorAttachments: [
    {
      clearValue: clearColor,
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
      view: context.getCurrentTexture().createView(),
    },
  ],
};

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// Draw the triangle\f[R]
passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.draw(3);

\f[I]// End the render pass\f[R]
passEncoder.end();

\f[I]// End frame by passing array of command buffers to command queue for execution\f[R]
device.queue.submit([commandEncoder.finish()]);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
