.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ReadableStream.getReader" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStream.getReader \- ReadableStream: getReader() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]getReader()\f[B]\f[R] method of the
\f[CR]ReadableStream\f[R] interface creates a reader and locks the
stream to it.
While the stream is locked, no other reader can be acquired until this
one is released.
.SH SYNTAX
.IP
.EX
getReader()
getReader(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing the following properties:
.RS
.TP
\f[B]mode\f[R] \f[I](optional)\f[R]
An property that specifies the type of reader to create.
Values can be:
.RS
.IP \[bu] 2
\f[CR]\[dq]byob\[dq]\f[R], which results in a
\f[CR]ReadableStreamBYOBReader\f[R] being created that can read readable
byte streams (streams that support zero\-copy transfer from an
underlying byte source to the reader when internal stream buffers are
empty).
.IP \[bu] 2
\f[CR]undefined\f[R] (or not specified at all \[em] this is the
default), which results in a \f[CR]ReadableStreamDefaultReader\f[R]
being created that can read individual chunks from a stream.
.RE
.RE
.SS Return value
A \f[CR]ReadableStreamDefaultReader\f[R] or
\f[CR]ReadableStreamBYOBReader\f[R] object instance, depending on the
\f[CR]mode\f[R] value.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if the provided mode value is not \f[CR]\[dq]byob\[dq]\f[R] or
\f[CR]undefined\f[R].
.TP
\f[B]TypeError\f[R]
Thrown if the stream you are trying to create a reader for is already
locked, or not a \f[CR]ReadableStream\f[R].
This is also thrown if a BYOB reader is requested and the stream
controller is not a \f[CR]ReadableByteStreamController\f[R] (the stream
was not constructed as an underlying source with
\f[CR]type=\[dq]bytes\[dq]\f[R]).
.SH EXAMPLES
In the following simple example, a previously\-created custom
\f[CR]ReadableStream\f[R] is read using a
\f[CR]ReadableStreamDefaultReader\f[R] created using
\f[CR]getReader()\f[R].
(see our \c
.UR https://mdn.github.io/dom-examples/streams/simple-random-stream/
Simple random stream example
.UE \c
\ for the full code).
Each chunk is read sequentially and output to the UI, until the stream
has finished being read, at which point we return out of the recursive
function and print the entire stream to another part of the UI.
.IP
.EX
\f[B]function\f[R] fetchStream() {
  \f[B]const\f[R] reader = stream.getReader();
  \f[B]let\f[R] charsReceived = 0;

  \f[I]// read() returns a promise that resolves\f[R]
  \f[I]// when a value has been received\f[R]
  reader.read().then(\f[B]function\f[R] processText({ done, value }) {
    \f[I]// Result objects contain two properties:\f[R]
    \f[I]// done  \- true if the stream has already given you all its data.\f[R]
    \f[I]// value \- some data. Always undefined when done is true.\f[R]
    \f[B]if\f[R] (done) {
      console.log(\[dq]Stream complete\[dq]);
      para.textContent = value;
      \f[B]return\f[R];
    }

    \f[I]// value for fetch streams is a Uint8Array\f[R]
    charsReceived += value.length;
    \f[B]const\f[R] chunk = value;
    \f[B]let\f[R] listItem = document.createElement(\[dq]li\[dq]);
    listItem.textContent = \[ga]Received ${charsReceived} characters so far. Current chunk = ${chunk}\[ga];
    list2.appendChild(listItem);

    result += chunk;

    \f[I]// Read some more, and call this function again\f[R]
    \f[B]return\f[R] reader.read().then(processText);
  });
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ReadableStream()\f[R] constructor
.IP \[bu] 2
\f[CR]ReadableStreamDefaultReader\f[R]
.IP \[bu] 2
\f[CR]ReadableStreamBYOBReader\f[R]
.IP \[bu] 2
Using readable streams
.IP \[bu] 2
Using readable byte stream
