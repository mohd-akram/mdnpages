.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "XRInputSourceEvent.frame" "JS" "March 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRInputSourceEvent.frame \- XRInputSourceEvent: frame property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The read\-only \f[CR]XRInputSourceEvent\f[R] property
\f[B]\f[CB]frame\f[B]\f[R] specifies an \f[CR]XRFrame\f[R] object
representing the event frame during which a WebXR user input occurred.
This may thus be an event which occurred in the past rather than a
current or impending event.
.SH VALUE
An \f[CR]XRFrame\f[R] indicating the event frame at which the user input
event described by the object took place.
.SH USAGE NOTES
The event frame does not correspond to a visual frame as is delivered to
the frame rendering callback function (see Rendering and the WebXR frame
rendering callback for details on the callback).
Instead, the \f[CR]XRFrame\f[R] specified by the \f[CR]frame\f[R]
property is a method to provide access to the \f[CR]getPose()\f[R]
method, which you can use to get the relative positions of the objects
in the scene at the time the event occurred.
.PP
However, since the event frame isn\[cq]t an animation frame, there is no
viewer pose available to represent the viewer\[cq]s current point of
view; the results of calling \f[CR]getViewerPose()\f[R] will be an
\f[CR]XRViewerPose\f[R] with an empty \f[CR]views\f[R] list.
.SH EXAMPLES
This code shows a handler for the \f[CR]selectstart\f[R] event which
gets the target ray\[cq]s pose from the frame, mapping the pose
representing the ray (\f[CR]event.inputSource.targetRaySpace\f[R]) to
the overall reference space \f[CR]myRefSpace\f[R].
.PP
Then, if the result isn\[cq]t \f[CR]null\f[R], the target ray pose\[cq]s
transform is passed into a function called
\f[CR]myCheckAndHandleHit()\f[R] to see if the ray was pointing at
anything when the select was triggered.
.IP
.EX
xrSession.onselectstart = (event) \f[B]=>\f[R] {
  \f[B]let\f[R] targetRayPose = event.frame.getPose(
    event.inputSource.targetRaySpace,
    myRefSpace,
  );
  \f[B]if\f[R] (targetRayPose) {
    checkAndHandleHit(targetRayPose.transform);
  }
};
.EE
