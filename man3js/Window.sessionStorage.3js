.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WINDOW.SESSIONSTORAGE" "3JS" "February 22, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.sessionStorage \- Window: sessionStorage property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]sessionStorage\f[B]\f[R] property accesses a
session \f[CR]Storage\f[R] object for the current origin.
\f[CR]sessionStorage\f[R] is similar to \f[CR]localStorage\f[R]; the
difference is that while \f[CR]localStorage\f[R] is partitioned by
origin only, \f[CR]sessionStorage\f[R] is partitioned by both origin and
browser tabs (top\-level browsing contexts).
The data in \f[CR]sessionStorage\f[R] is only kept for the duration of
the page session.
.IP \(bu 2
Whenever a document is loaded in a particular tab in the browser, a
unique page session gets created and assigned to that particular tab.
That page session is accessible only in that particular tab.
The main document, and all embedded browsing contexts (iframes), are
grouped by their origin and each origin has access to its own separate
storage area.
.IP \(bu 2
If the page has a \f[CR]opener\f[R], the \f[CR]sessionStorage\f[R] is
initially a copy of the opener\(cqs \f[CR]sessionStorage\f[R] object.
However, they are still separate and changes to one do not affect the
other.
To prevent the \f[CR]sessionStorage\f[R] from being copied, use one of
the techniques that remove \f[CR]opener\f[R] (see
\f[CR]Window.opener\f[R]).
.IP \(bu 2
A page session lasts as long as the tab or the browser is open, and
survives over page reloads and restores.
.IP \(bu 2
Opening a page in a new tab or window creates a new session with the
value of the top\-level browsing context, which differs from how session
cookies work.
.IP \(bu 2
Closing the tab/window ends the session and clears the data in
\f[CR]sessionStorage\f[R].
.SH VALUE
A \f[CR]Storage\f[R] object which can be used to access the current
origin\(cqs session storage space.
.SS Exceptions
.TP
\f[B]SecurityError\f[R]
Thrown in one of the following cases:
.RS
.IP \(bu 2
The origin is not a valid scheme/host/port tuple.
This can happen if the origin uses the \f[CR]file:\f[R] or
\f[CR]data:\f[R] schemes, for example.
.IP \(bu 2
The request violates a policy decision.
For example, the user has configured the browsers to prevent the page
from persisting data.
.PP
Note that if the user blocks cookies, browsers will probably interpret
this as an instruction to prevent the page from persisting data.
.RE
.SH EXAMPLES
.SS Basic usage
.IP
.EX
\f[I]// Save data to sessionStorage\f[R]
sessionStorage.setItem(\(dqkey\(dq, \(dqvalue\(dq);

\f[I]// Get saved data from sessionStorage\f[R]
\f[B]let\f[R] data = sessionStorage.getItem(\(dqkey\(dq);

\f[I]// Remove saved data from sessionStorage\f[R]
sessionStorage.removeItem(\(dqkey\(dq);

\f[I]// Remove all saved data from sessionStorage\f[R]
sessionStorage.clear();
.EE
.SS Saving text between refreshes
The following example autosaves the contents of a text field, and if the
browser is refreshed, restores the text field content so that no writing
is lost.
.IP
.EX
\f[I]// Get the text field that we\(aqre going to track\f[R]
\f[B]let\f[R] field = document.getElementById(\(dqfield\(dq);

\f[I]// See if we have an autosave value\f[R]
\f[I]// (this will only happen if the page is accidentally refreshed)\f[R]
\f[B]if\f[R] (sessionStorage.getItem(\(dqautosave\(dq)) {
  \f[I]// Restore the contents of the text field\f[R]
  field.value = sessionStorage.getItem(\(dqautosave\(dq);
}

\f[I]// Listen for changes in the text field\f[R]
field.addEventListener(\(dqchange\(dq, () \f[B]=>\f[R] {
  \f[I]// And save the results into the session storage object\f[R]
  sessionStorage.setItem(\(dqautosave\(dq, field.value);
});
.EE
.RS
.PP
\f[B]Note:\f[R] Please refer to the Using the Web Storage API article
for a full example.
.RE
.SH SEE ALSO
.IP \(bu 2
Using the Web Storage API
.IP \(bu 2
\f[CR]Window.localStorage\f[R]
