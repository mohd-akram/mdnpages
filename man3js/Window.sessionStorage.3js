.\" Automatically generated by Pandoc 3.4
.\"
.TH "Window.sessionStorage" "JS" "August 17, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.sessionStorage \- Window: sessionStorage property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]sessionStorage\f[B]\f[R] property accesses a
session \f[CR]Storage\f[R] object for the current origin.
\f[CR]sessionStorage\f[R] is similar to \f[CR]localStorage\f[R]; the
difference is that while data in \f[CR]localStorage\f[R] doesn\[cq]t
expire, data in \f[CR]sessionStorage\f[R] is cleared when the \f[I]page
session\f[R] ends.
.IP \[bu] 2
Whenever a document is loaded in a particular tab in the browser, a
unique page session gets created and assigned to that particular tab.
That page session is valid only for that particular tab.
.IP \[bu] 2
A page session lasts as long as the tab or the browser is open, and
survives over page reloads and restores.
.IP \[bu] 2
\f[B]Opening a page in a new tab or window creates a new session with
the value of the top\-level browsing context, which differs from how
session cookies work.\f[R]
.IP \[bu] 2
Opening multiple tabs/windows with the same URL creates
\f[CR]sessionStorage\f[R] for each tab/window.
.IP \[bu] 2
Duplicating a tab copies the tab\[cq]s \f[CR]sessionStorage\f[R] into
the new tab.
.IP \[bu] 2
Closing a tab/window ends the session and clears objects in
\f[CR]sessionStorage\f[R].
.PP
Data stored in \f[CR]sessionStorage\f[R] \f[B]is specific to the
protocol of the page\f[R].
In particular, data stored by a script on a site accessed with HTTP
(e.g., \f[CR]http://example.com/\f[R]) is put in a different
\f[CR]sessionStorage\f[R] object from the same site accessed with HTTPS
(e.g., \f[CR]https://example.com/\f[R]).
.PP
The keys and the values are \f[I]always\f[R] in the UTF\-16 string
format, which uses two bytes per character.
As with objects, integer keys are automatically converted to strings.
.SH VALUE
A \f[CR]Storage\f[R] object which can be used to access the current
origin\[cq]s session storage space.
.SS Exceptions
.TP
\f[B]SecurityError\f[R]
Thrown in one of the following cases:
.RS
.IP \[bu] 2
The origin is not a valid scheme/host/port tuple.
This can happen if the origin uses the \f[CR]file:\f[R] or
\f[CR]data:\f[R] schemes, for example.
.IP \[bu] 2
The request violates a policy decision.
For example, the user has configured the browsers to prevent the page
from persisting data.
.PP
Note that if the user blocks cookies, browsers will probably interpret
this as an instruction to prevent the page from persisting data.
.RE
.SH EXAMPLES
.SS Basic usage
.IP
.EX
\f[I]// Save data to sessionStorage\f[R]
sessionStorage.setItem(\[dq]key\[dq], \[dq]value\[dq]);

\f[I]// Get saved data from sessionStorage\f[R]
\f[B]let\f[R] data = sessionStorage.getItem(\[dq]key\[dq]);

\f[I]// Remove saved data from sessionStorage\f[R]
sessionStorage.removeItem(\[dq]key\[dq]);

\f[I]// Remove all saved data from sessionStorage\f[R]
sessionStorage.clear();
.EE
.SS Saving text between refreshes
The following example autosaves the contents of a text field, and if the
browser is refreshed, restores the text field content so that no writing
is lost.
.IP
.EX
\f[I]// Get the text field that we\[aq]re going to track\f[R]
\f[B]let\f[R] field = document.getElementById(\[dq]field\[dq]);

\f[I]// See if we have an autosave value\f[R]
\f[I]// (this will only happen if the page is accidentally refreshed)\f[R]
\f[B]if\f[R] (sessionStorage.getItem(\[dq]autosave\[dq])) {
  \f[I]// Restore the contents of the text field\f[R]
  field.value = sessionStorage.getItem(\[dq]autosave\[dq]);
}

\f[I]// Listen for changes in the text field\f[R]
field.addEventListener(\[dq]change\[dq], () \f[B]=>\f[R] {
  \f[I]// And save the results into the session storage object\f[R]
  sessionStorage.setItem(\[dq]autosave\[dq], field.value);
});
.EE
.RS
.PP
\f[B]Note:\f[R] Please refer to the Using the Web Storage API article
for a full example.
.RE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Storage API
.IP \[bu] 2
\f[CR]Window.localStorage\f[R]
