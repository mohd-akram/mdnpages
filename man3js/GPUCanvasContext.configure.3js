.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCANVASCONTEXT.CONFIGURE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUCanvasContext.configure \- GPUCanvasContext: configure() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]configure()\f[B]\f[R] method of the
\f[CR]GPUCanvasContext\f[R] interface configures the context to use for
rendering with a given \f[CR]GPUDevice\f[R].
When called the canvas will initially be cleared to transparent black.
.SH SYNTAX
.IP
.EX
configure(configuration)
.EE
.SS Parameters
.TP
\f[B]configuration\f[R]
An object containing the following properties:
.RS
.TP
\f[B]alphaMode\f[R] \f[I](optional)\f[R]
An enumerated value that specifies the effect that alpha values will
have on the content of textures returned by
\f[CR]getCurrentTexture()\f[R] when read, displayed, or used as an image
source.
Possible values are:
.RS
.IP \(bu 2
\f[CR]opaque\f[R]: Alpha values are ignored \(em if a texture is not
already opaque, the alpha channel is cleared to 1.0 when it is used as
an image source or displayed to the screen.
This is the default value.
.IP \(bu 2
\f[CR]premultiplied\f[R]: Color values are premultiplied by their alpha
value.
For example, 100% red at 50% alpha is \f[CR][0.5, 0, 0, 0.5]\f[R].
.RE
.TP
\f[B]colorSpace\f[R] \f[I](optional)\f[R]
The color space that values written into textures returned by
\f[CR]getCurrentTexture()\f[R] should be displayed with.
Possible values are \f[CR]srgb\f[R] (the default) and
\f[CR]display\-p3\f[R].
.TP
\f[B]device\f[R]
The \f[CR]GPUDevice\f[R] that the rendering information for the context
will come from.
.TP
\f[B]format\f[R]
The format that textures returned by \f[CR]getCurrentTexture()\f[R] will
have.
This can be \f[CR]bgra8unorm\f[R], \f[CR]rgba8unorm\f[R], or
\f[CR]rgba16float\f[R].
The optimal canvas texture format for the current system can be returned
by \f[CR]GPU.getPreferredCanvasFormat()\f[R].
Using this is recommended \(em if you don\(cqt use the preferred format
when configuring the canvas context, you may incur additional overhead,
such as additional texture copies, depending on the platform.
.TP
\f[B]toneMapping\f[R] \f[I](optional)\f[R]
An object specifying parameters that define the tone mapping for the
context \(em how the content of associated textures are to be displayed.
This allows WebGPU to draw colors brighter than \f[CR]white\f[R]
(\f[CR]#FFFFFF\f[R]).
Possible properties are:
.RS
.TP
\f[B]mode\f[R] \f[I](optional)\f[R]
An enumerated value specifying the tone mapping mode for the canvas.
Possible values include:
.RS
.TP
\f[B]standard\f[R]
The default value.
Restricts rendered content to the Standard Dynamic Range (SDR) of the
display.
This mode is accomplished by clamping all color values in the color
space of the screen to the \f[CR][0, 1]\f[R] interval.
.TP
\f[B]extended\f[R]
Allows content to be rendered in the full High Dynamic Range (HDR) of
the display, where available.
HDR mode allows a wider range of colors and brightness levels to be
displayed, with more precise instructions as to what color should be
displayed in each case.
This mode matches \f[CR]\(dqstandard\(dq\f[R] in the \f[CR][0, 1]\f[R]
range of the screen.
Clamping or projection is done to the extended dynamic range of the
screen but not \f[CR][0, 1]\f[R].
.RE
.RE
.TP
\f[B]usage\f[R] \f[I](optional)\f[R]
Bitwise flags specifying the allowed usage for textures returned by
\f[CR]getCurrentTexture()\f[R].
Possible values are:
.RS
.IP \(bu 2
\f[CR]GPUTextureUsage.COPY_SRC\f[R]: The texture can be used as the
source of a copy operation, for example the source argument of a
\f[CR]GPUCommandEncoder.copyTextureToBuffer()\f[R] call.
.IP \(bu 2
\f[CR]GPUTextureUsage.COPY_DST\f[R]: The texture can be used as the
destination of a copy/write operation, for example the destination
argument of a \f[CR]GPUCommandEncoder.copyTextureToTexture()\f[R] call.
.IP \(bu 2
\f[CR]GPUTextureUsage.RENDER_ATTACHMENT\f[R]: The texture can be used as
a color attachment in a render pass, for example in a color attachment
view in a \f[CR]GPUCommandEncoder.beginRenderPass()\f[R] call.
\f[CR]GPUTextureUsage.RENDER_ATTACHMENT\f[R] is the default
\f[CR]usage\f[R], but note that it is not automatically included if a
different value is explicitly set; in such cases you need to include it
in addition.
.IP \(bu 2
\f[CR]GPUTextureUsage.TEXTURE_BINDING\f[R]: The texture can be bound for
use as a sampled texture in a shader, for example in a bind group entry
in a \f[CR]GPUDevice.createBindGroup()\f[R] call.
.IP \(bu 2
\f[CR]GPUTextureUsage.STORAGE_BINDING\f[R]: The texture can be bound for
use as a storage texture in a shader, for example in a bind group entry
in a \f[CR]GPUDevice.createBindGroup()\f[R] call.
.PP
Note that multiple possible usages can be specified using the bitwise OR
operator.
For example,
\f[CR]usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\f[R].
.RE
.TP
\f[B]viewFormats\f[R] \f[I](optional)\f[R]
An array of formats that views created from textures returned by
\f[CR]getCurrentTexture()\f[R] may use.
See \c
.UR https://gpuweb.github.io/gpuweb/#texture-formats
Texture Formats
.UE \c
\ for all the possible values.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Basic usage
.IP
.EX
\f[B]const\f[R] canvas = document.querySelector(\(dq#gpuCanvas\(dq);
\f[B]const\f[R] context = canvas.getContext(\(dqwebgpu\(dq);

context.configure({
  device,
  format: navigator.gpu.getPreferredCanvasFormat(),
  alphaMode: \(dqpremultiplied\(dq,
});
.EE
.SS HDR \f[CR]toneMapping\f[R] demos
See the \c
.UR https://webgpu.github.io/webgpu-samples/?sample=particles
Particles (HDR)
.UE \c
\ sample and \c
.UR https://ccameron-chromium.github.io/webgpu-hdr/example.html
HDR support
.UE \c
\ test.
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
