.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Client.postMessage" "JS" "November 18, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Client.postMessage \- Client: postMessage() method
.SH SYNOPSIS
The \f[B]\f[CB]postMessage()\f[B]\f[R] method of the \f[CR]Client\f[R]
interface allows a service worker to send a message to a client (a
\f[CR]Window\f[R], \f[CR]Worker\f[R], or \f[CR]SharedWorker\f[R]).
The message is received in the \[lq]\f[CR]message\f[R]\[rq] event on
\f[CR]navigator.serviceWorker\f[R].
.SH SYNTAX
.IP
.EX
postMessage(message)
postMessage(message, options)
postMessage(message, transferables)
.EE
.SS Parameters
.TP
\f[B]message\f[R]
The message to send to the client.
This can be any structured\-cloneable type.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An optional object containing a \f[CR]transfer\f[R] field with an array
of transferable objects to transfer ownership of.
The ownership of these objects is given to the destination side and they
are no longer usable on the sending side.
.TP
\f[B]transferables\f[R] \f[I](optional)\f[R]
An optional array of transferable objects to transfer ownership of.
The ownership of these objects is given to the destination side and they
are no longer usable on the sending side.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
The code below sends a message from a service worker to a client.
The client is fetched using the \f[CR]get()\f[R] method on
\f[CR]clients\f[R], which is a global in service worker scope.
.IP
.EX
addEventListener(\[dq]fetch\[dq], (event) \f[B]=>\f[R] {
  event.waitUntil(
    (\f[B]async\f[R] () \f[B]=>\f[R] {
      \f[I]// Exit early if we don\[aq]t have access to the client.\f[R]
      \f[I]// Eg, if it\[aq]s cross\-origin.\f[R]
      \f[B]if\f[R] (!event.clientId) \f[B]return\f[R];

      \f[I]// Get the client.\f[R]
      \f[B]const\f[R] client = \f[B]await\f[R] self.clients.get(event.clientId);
      \f[I]// Exit early if we don\[aq]t get the client.\f[R]
      \f[I]// Eg, if it closed.\f[R]
      \f[B]if\f[R] (!client) \f[B]return\f[R];

      \f[I]// Send a message to the client.\f[R]
      client.postMessage({
        msg: \[dq]Hey I just got a fetch from you!\[dq],
        url: event.request.url,
      });
    })(),
  );
});
.EE
.PP
Receiving that message:
.IP
.EX
navigator.serviceWorker.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  console.log(event.data.msg, event.data.url);
});
.EE
