.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CLIENT.POSTMESSAGE" "3JS" "September 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Client.postMessage \- Client: postMessage() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
The \f[B]\f[CB]postMessage()\f[B]\f[R] method of the \f[CR]Client\f[R]
interface allows a service worker to send a message to a client (a
\f[CR]Window\f[R], \f[CR]Worker\f[R], or \f[CR]SharedWorker\f[R]).
The message is received in the \f[CR]message\f[R] event on
\f[CR]navigator.serviceWorker\f[R].
.SH SYNTAX
.IP
.EX
postMessage(message)
postMessage(message, transfer)
postMessage(message, options)
.EE
.SS Parameters
.TP
\f[B]message\f[R]
The message to send to the client.
This can be any structured\-cloneable type.
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
An optional array of transferable objects to transfer ownership of.
The ownership of these objects is given to the destination side and they
are no longer usable on the sending side.
These transferable objects should be attached to the message; otherwise
they would be moved but not actually accessible on the receiving end.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An optional object containing the following properties:
.RS
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
Has the same meaning as the \f[CR]transfer\f[R] parameter.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
The code below sends a message from a service worker to a client.
The client is fetched using the \f[CR]get()\f[R] method on
\f[CR]clients\f[R], which is a global in service worker scope.
.IP
.EX
addEventListener(\(dqfetch\(dq, (event) \f[B]=>\f[R] {
  event.waitUntil(
    (\f[B]async\f[R] () \f[B]=>\f[R] {
      \f[I]// Exit early if we don\(aqt have access to the client.\f[R]
      \f[I]// Eg, if it\(aqs cross\-origin.\f[R]
      \f[B]if\f[R] (!event.clientId) \f[B]return\f[R];

      \f[I]// Get the client.\f[R]
      \f[B]const\f[R] client = \f[B]await\f[R] self.clients.get(event.clientId);
      \f[I]// Exit early if we don\(aqt get the client.\f[R]
      \f[I]// Eg, if it closed.\f[R]
      \f[B]if\f[R] (!client) \f[B]return\f[R];

      \f[I]// Send a message to the client.\f[R]
      client.postMessage({
        msg: \(dqHey I just got a fetch from you!\(dq,
        url: event.request.url,
      });
    })(),
  );
});
.EE
.PP
Receiving that message:
.IP
.EX
navigator.serviceWorker.addEventListener(\(dqmessage\(dq, (event) \f[B]=>\f[R] {
  console.log(event.data.msg, event.data.url);
});
.EE
