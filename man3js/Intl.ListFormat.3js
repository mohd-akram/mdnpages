.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Intl.ListFormat" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.ListFormat \- Intl.ListFormat
.SH SYNOPSIS
The \f[B]\f[CB]Intl.ListFormat\f[B]\f[R] object enables
language\-sensitive list formatting.
.SH CONSTRUCTOR
.TP
\f[B]Intl.ListFormat()\f[R]
Creates a new \f[CR]Intl.ListFormat\f[R] object.
.SH STATIC METHODS
.TP
\f[B]Intl.ListFormat.supportedLocalesOf()\f[R]
Returns an array containing those of the provided locales that are
supported without having to fall back to the runtime\[cq]s default
locale.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Intl.ListFormat.prototype\f[R] and
shared by all \f[CR]Intl.ListFormat\f[R] instances.
.TP
\f[B]Intl.ListFormat.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Intl.ListFormat\f[R] instances, the initial value is the
\f[CR]Intl.ListFormat\f[R] constructor.
.TP
\f[B]Intl.ListFormat.prototype[Symbol.toStringTag]\f[R]
The initial value of the \f[CR][Symbol.toStringTag]\f[R] property is the
string \f[CR]\[dq]Intl.ListFormat\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]Intl.ListFormat.prototype.format()\f[R]
Returns a language\-specific formatted string representing the elements
of the list.
.TP
\f[B]Intl.ListFormat.prototype.formatToParts()\f[R]
Returns an array of objects representing the different components that
can be used to format a list of values in a locale\-aware fashion.
.TP
\f[B]Intl.ListFormat.prototype.resolvedOptions()\f[R]
Returns a new object with properties reflecting the locale and style
formatting options computed during the construction of the current
\f[CR]Intl.ListFormat\f[R] object.
.SH EXAMPLES
.SS Using format
The following example shows how to create a List formatter using the
English language.
.IP
.EX
\f[B]const\f[R] list = [\[dq]Motorcycle\[dq], \[dq]Bus\[dq], \[dq]Car\[dq]];

console.log(
  \f[B]new\f[R] Intl.ListFormat(\[dq]en\-GB\[dq], { style: \[dq]long\[dq], type: \[dq]conjunction\[dq] }).format(
    list,
  ),
);
\f[I]// Motorcycle, Bus and Car\f[R]

console.log(
  \f[B]new\f[R] Intl.ListFormat(\[dq]en\-GB\[dq], { style: \[dq]short\[dq], type: \[dq]disjunction\[dq] }).format(
    list,
  ),
);
\f[I]// Motorcycle, Bus or Car\f[R]

console.log(
  \f[B]new\f[R] Intl.ListFormat(\[dq]en\-GB\[dq], { style: \[dq]narrow\[dq], type: \[dq]unit\[dq] }).format(list),
);
\f[I]// Motorcycle Bus Car\f[R]
.EE
.SS Using formatToParts
The following example shows how to create a List formatter returning
formatted parts
.IP
.EX
\f[B]const\f[R] list = [\[dq]Motorcycle\[dq], \[dq]Bus\[dq], \[dq]Car\[dq]];
console.log(
  \f[B]new\f[R] Intl.ListFormat(\[dq]en\-GB\[dq], {
    style: \[dq]long\[dq],
    type: \[dq]conjunction\[dq],
  }).formatToParts(list),
);

\f[I]// [ { \[dq]type\[dq]: \[dq]element\[dq], \[dq]value\[dq]: \[dq]Motorcycle\[dq] },\f[R]
\f[I]//   { \[dq]type\[dq]: \[dq]literal\[dq], \[dq]value\[dq]: \[dq], \[dq] },\f[R]
\f[I]//   { \[dq]type\[dq]: \[dq]element\[dq], \[dq]value\[dq]: \[dq]Bus\[dq] },\f[R]
\f[I]//   { \[dq]type\[dq]: \[dq]literal\[dq], \[dq]value\[dq]: \[dq], and \[dq] },\f[R]
\f[I]//   { \[dq]type\[dq]: \[dq]element\[dq], \[dq]value\[dq]: \[dq]Car\[dq] } ];\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://formatjs.io/docs/polyfills/intl-listformat/
Polyfill of \f[CR]Intl.ListFormat\f[R] in FormatJS
.UE \c
.IP \[bu] 2
\f[CR]Intl\f[R]
