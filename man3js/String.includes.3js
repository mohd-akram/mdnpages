.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.INCLUDES" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.includes \- String.prototype.includes()
.SH SYNOPSIS
The \f[B]\f[CB]includes()\f[B]\f[R] method of \f[CR]String\f[R] values
performs a case\-sensitive search to determine whether a given string
may be found within this string, returning \f[CR]true\f[R] or
\f[CR]false\f[R] as appropriate.
.IP
.EX
\f[B]const\f[R] sentence = \(dqThe quick brown fox jumps over the lazy dog.\(dq;

\f[B]const\f[R] word = \(dqfox\(dq;

console.log(
  \(gaThe word \(dq${word}\(dq ${
    sentence.includes(word) ? \(dqis\(dq : \(dqis not\(dq
  } in the sentence\(ga,
);
\f[I]// Expected output: \(dqThe word \(dqfox\(dq is in the sentence\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
includes(searchString)
includes(searchString, position)
.EE
.SS Parameters
.TP
\f[B]searchString\f[R]
A string to be searched for within \f[CR]str\f[R].
Cannot be a regex.
All values that are not regexes are coerced to strings, so omitting it
or passing \f[CR]undefined\f[R] causes \f[CR]includes()\f[R] to search
for the string \f[CR]\(dqundefined\(dq\f[R], which is rarely what you
want.
.TP
\f[B]position\f[R] \f[I](optional)\f[R]
The position within the string at which to begin searching for
\f[CR]searchString\f[R].
(Defaults to \f[CR]0\f[R].)
.SS Return value
\f[B]\f[CB]true\f[B]\f[R] if the search string is found anywhere within
the given string, including when \f[CR]searchString\f[R] is an empty
string; otherwise, \f[B]\f[CB]false\f[B]\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]searchString\f[R] is a regex.
.SH DESCRIPTION
This method lets you determine whether or not a string includes another
string.
.SS Case\-sensitivity
The \f[CR]includes()\f[R] method is case sensitive.
For example, the following expression returns \f[CR]false\f[R]:
.IP
.EX
\(dqBlue Whale\(dq.includes(\(dqblue\(dq); \f[I]// returns false\f[R]
.EE
.PP
You can work around this constraint by transforming both the original
string and the search string to all lowercase:
.IP
.EX
\(dqBlue Whale\(dq.toLowerCase().includes(\(dqblue\(dq); \f[I]// returns true\f[R]
.EE
.SH EXAMPLES
.SS Using includes()
.IP
.EX
\f[B]const\f[R] str = \(dqTo be, or not to be, that is the question.\(dq;

console.log(str.includes(\(dqTo be\(dq)); \f[I]// true\f[R]
console.log(str.includes(\(dqquestion\(dq)); \f[I]// true\f[R]
console.log(str.includes(\(dqnonexistent\(dq)); \f[I]// false\f[R]
console.log(str.includes(\(dqTo be\(dq, 1)); \f[I]// false\f[R]
console.log(str.includes(\(dqTO BE\(dq)); \f[I]// false\f[R]
console.log(str.includes(\(dq\(dq)); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]String.prototype.includes\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/string.prototype.includes
es\-shims polyfill of \f[CR]String.prototype.includes\f[R]
.UE \c
.IP \(bu 2
\f[CR]Array.prototype.includes()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.includes()\f[R]
.IP \(bu 2
\f[CR]String.prototype.indexOf()\f[R]
.IP \(bu 2
\f[CR]String.prototype.lastIndexOf()\f[R]
.IP \(bu 2
\f[CR]String.prototype.startsWith()\f[R]
.IP \(bu 2
\f[CR]String.prototype.endsWith()\f[R]
