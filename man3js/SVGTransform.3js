'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "SVGTransform" "JS" "August 13, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SVGTransform \- SVGTransform
.SH SYNOPSIS
.SH SVG TRANSFORM INTERFACE
\f[CR]SVGTransform\f[R] is the interface for one of the component
transformations within an \f[CR]SVGTransformList\f[R]; thus, an
\f[CR]SVGTransform\f[R] object corresponds to a single component (e.g.,
\f[CR]scale(\&...)\f[R] or \f[CR]matrix(\&...)\f[R]) within a
\f[CR]transform\f[R] attribute.
.PP
An \f[CR]SVGTransform\f[R] object can be designated as read only, which
means that attempts to modify the object will result in an exception
being thrown.
.SS Interface overview
.PP
.TS
tab(@);
lw(35.0n) lw(35.0n).
T{
Also implement
T}@T{
\f[I]None\f[R]
T}
T{
Methods
T}@T{
.IP \[bu] 2
\f[CR]void setMatrix(in \[ga]DOMMatrix\[ga] matrix)\f[R]
.IP \[bu] 2
\f[CR]void setTranslate(in float tx, in float ty)\f[R]
.IP \[bu] 2
\f[CR]void setScale(in float sx, in float sy)\f[R]
.IP \[bu] 2
\f[CR]void setRotate(in float angle, in float cx, in float cy)\f[R]
.IP \[bu] 2
\f[CR]void setSkewX(in float angle)\f[R]
.IP \[bu] 2
\f[CR]void setSkewY(in float angle)\f[R]
T}
T{
Properties
T}@T{
.IP \[bu] 2
readonly unsigned short \f[CR]type\f[R]
.IP \[bu] 2
readonly float \f[CR]angle\f[R]
.IP \[bu] 2
readonly \[ga]DOMMatrix\[ga] \f[CR]matrix\f[R]
T}
T{
Constants
T}@T{
.IP \[bu] 2
\f[CR]SVG_TRANSFORM_UNKNOWN\f[R] = 0
.IP \[bu] 2
\f[CR]SVG_TRANSFORM_MATRIX\f[R] = 1
.IP \[bu] 2
\f[CR]SVG_TRANSFORM_TRANSLATE\f[R] = 2
.IP \[bu] 2
\f[CR]SVG_TRANSFORM_SCALE\f[R] = 3
.IP \[bu] 2
\f[CR]SVG_TRANSFORM_ROTATE\f[R] = 4
.IP \[bu] 2
\f[CR]SVG_TRANSFORM_SKEWX\f[R] = 5
.IP \[bu] 2
\f[CR]SVG_TRANSFORM_SKEWY\f[R] = 6
T}
T{
Normative document
T}@T{
\c
.UR https://www.w3.org/TR/SVG11/coords.html#InterfaceSVGTransform
SVG 1.1 (2nd Edition)
.UE \c
T}
.TE
.SH CONSTANTS
.PP
.TS
tab(@);
l l l.
T{
Name
T}@T{
Value
T}@T{
Description
T}
T{
\f[CR]SVG_TRANSFORM_UNKNOWN\f[R]
T}@T{
0
T}@T{
The unit type is not one of predefined unit types.
It is invalid to attempt to define a new value of this type or to
attempt to switch an existing value to this type.
T}
T{
\f[CR]SVG_TRANSFORM_MATRIX\f[R]
T}@T{
1
T}@T{
A \f[CR]matrix(\&...)\f[R] transformation
T}
T{
\f[CR]SVG_TRANSFORM_TRANSLATE\f[R]
T}@T{
2
T}@T{
A \f[CR]translate(\&...)\f[R] transformation
T}
T{
\f[CR]SVG_TRANSFORM_SCALE\f[R]
T}@T{
3
T}@T{
A \f[CR]scale(\&...)\f[R] transformation
T}
T{
\f[CR]SVG_TRANSFORM_ROTATE\f[R]
T}@T{
4
T}@T{
A \f[CR]rotate(\&...)\f[R] transformation
T}
T{
\f[CR]SVG_TRANSFORM_SKEWX\f[R]
T}@T{
5
T}@T{
A \f[CR]skewx(\&...)\f[R] transformation
T}
T{
\f[CR]SVG_TRANSFORM_SKEWY\f[R]
T}@T{
6
T}@T{
A \f[CR]skewy(\&...)\f[R] transformation
T}
.TE
.SH INSTANCE PROPERTIES
.PP
.TS
tab(@);
lw(23.3n) lw(23.3n) lw(23.3n).
T{
Name
T}@T{
Type
T}@T{
Description
T}
_
T{
\f[CR]type\f[R]
T}@T{
unsigned short
T}@T{
The type of the value as specified by one of the SVG_TRANSFORM_*
constants defined on this interface.
T}
T{
\f[CR]angle\f[R]
T}@T{
float
T}@T{
A convenience attribute for \f[CR]SVG_TRANSFORM_ROTATE\f[R],
\f[CR]SVG_TRANSFORM_SKEWX\f[R] and \f[CR]SVG_TRANSFORM_SKEWY\f[R].
It holds the angle that was specified.
.PD 0
.P
.PD
.PD 0
.P
.PD
For \f[CR]SVG_TRANSFORM_MATRIX\f[R], \f[CR]SVG_TRANSFORM_TRANSLATE\f[R]
and \f[CR]SVG_TRANSFORM_SCALE\f[R], \f[CR]angle\f[R] will be zero.
T}
T{
\f[CR]matrix\f[R]
T}@T{
\[ga]DOMMatrix\[ga]
T}@T{
.PP
The matrix that represents this transformation.
The matrix object is live, meaning that any changes made to the
\f[CR]SVGTransform\f[R] object are immediately reflected in the matrix
object and vice versa.
In case the matrix object is changed directly (i.e., without using the
methods on the \f[CR]SVGTransform\f[R] interface itself) then the type
of the \f[CR]SVGTransform\f[R] changes to
\f[CR]SVG_TRANSFORM_MATRIX\f[R].
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_MATRIX\f[R], the matrix contains the a, b, c, d,
e, f values supplied by the user.
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_TRANSLATE\f[R], e and f represent the
translation amounts (a=1, b=0, c=0 and d=1).
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_SCALE\f[R], a and d represent the scale amounts
(b=0, c=0, e=0 and f=0).
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_SKEWX\f[R] and \f[CR]SVG_TRANSFORM_SKEWY\f[R],
a, b, c and d represent the matrix which will result in the given skew
(e=0 and f=0).
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_ROTATE\f[R], a, b, c, d, e and f together
represent the matrix which will result in the given rotation.
When the rotation is around the center point (0, 0), e and f will be
zero.
T}
.TE
.SH INSTANCE METHODS
.PP
.TS
tab(@);
lw(23.3n) lw(23.3n) lw(23.3n).
T{
Name & Arguments
T}@T{
Return
T}@T{
Description
T}
_
T{
\f[B]\f[CB]setMatrix\f[B]\f[R]\f[CR](in \[ga]DOMMatrix\[ga] \f[R]\f[I]\f[CI]matrix\f[I]\f[R]\f[CR])\f[R]
T}@T{
\f[I]void\f[R]
T}@T{
.PP
Sets the transform type to \f[CR]SVG_TRANSFORM_MATRIX\f[R], with
parameter matrix defining the new transformation.
Note that the values from the parameter \f[CR]matrix\f[R] are copied.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when attempting to
modify a read only attribute or when the object itself is read only.
T}
T{
\f[B]\f[CB]setTranslate\f[B]\f[R]\f[CR](in float \f[R]\f[I]\f[CI]tx\f[I]\f[R]\f[CR], in float \f[R]\f[I]\f[CI]ty\f[I]\f[R]\f[CR])\f[R]
T}@T{
\f[I]void\f[R]
T}@T{
.PP
Sets the transform type to \f[CR]SVG_TRANSFORM_TRANSLATE\f[R], with
parameters \f[CR]tx\f[R] and \f[CR]ty\f[R] defining the translation
amounts.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when attempting to
modify a read only attribute or when the object itself is read only.
T}
T{
\f[B]\f[CB]setScale\f[B]\f[R]\f[CR](in float \f[R]\f[I]\f[CI]sx\f[I]\f[R]\f[CR], in float \f[R]\f[I]\f[CI]sy\f[I]\f[R]\f[CR])\f[R]
T}@T{
\f[I]void\f[R]
T}@T{
.PP
Sets the transform type to \f[CR]SVG_TRANSFORM_SCALE\f[R], with
parameters \f[CR]sx\f[R] and \f[CR]sy\f[R] defining the scale amounts.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when attempting to
modify a read only attribute or when the object itself is read only.
T}
T{
\f[B]\f[CB]setRotate\f[B]\f[R]\f[CR](in float \f[R]\f[I]\f[CI]angle\f[I]\f[R]\f[CR], in float \f[R]\f[I]\f[CI]cx\f[I]\f[R]\f[CR], in float \f[R]\f[I]\f[CI]cy\f[I]\f[R]\f[CR])\f[R]
T}@T{
\f[I]void\f[R]
T}@T{
.PP
Sets the transform type to \f[CR]SVG_TRANSFORM_ROTATE\f[R], with
parameter \f[CR]angle\f[R] defining the rotation angle and parameters
\f[CR]cx\f[R] and \f[CR]cy\f[R] defining the optional center of
rotation.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when attempting to
modify a read only attribute or when the object itself is read only.
T}
T{
\f[B]\f[CB]setSkewX\f[B]\f[R]\f[CR](in float \f[R]\f[I]\f[CI]angle\f[I]\f[R]\f[CR])\f[R]
T}@T{
\f[I]void\f[R]
T}@T{
.PP
Sets the transform type to \f[CR]SVG_TRANSFORM_SKEWX\f[R], with
parameter \f[CR]angle\f[R] defining the amount of skew.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when attempting to
modify a read only attribute or when the object itself is read only.
T}
T{
\f[B]\f[CB]setSkewY\f[B]\f[R]\f[CR](in float \f[R]\f[I]\f[CI]angle\f[I]\f[R]\f[CR])\f[R]
T}@T{
\f[I]void\f[R]
T}@T{
.PP
Sets the transform type to \f[CR]SVG_TRANSFORM_SKEWY\f[R], with
parameter \f[CR]angle\f[R] defining the amount of skew.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when attempting to
modify a read only attribute or when the object itself is read only.
T}
.TE
