.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "RTCDataChannel.binaryType" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCDataChannel.binaryType \- RTCDataChannel: binaryType property
.SH SYNOPSIS
The property \f[B]\f[CB]binaryType\f[B]\f[R] on the
\f[CR]RTCDataChannel\f[R] interface is a string which specifies the type
of object which should be used to represent binary data received on the
\f[CR]RTCDataChannel\f[R].
Values allowed by the \f[CR]WebSocket.binaryType\f[R] property are also
permitted here: \f[CR]blob\f[R] if \f[CR]Blob\f[R] objects are being
used or \f[CR]arraybuffer\f[R] if \f[CR]ArrayBuffer\f[R] objects are
being used.
The default is \f[CR]blob\f[R].
.PP
When a binary message is received on the data channel, the resulting
\f[CR]message\f[R] event\[cq]s \f[CR]MessageEvent.data\f[R] property is
an object of the type specified by the \f[CR]binaryType\f[R].
.SH VALUE
A string that can have one of these values:
.TP
\f[B]\[dq]blob\[dq]\f[R]
Received binary messages\[cq] contents will be contained in
\f[CR]Blob\f[R] objects.
.TP
\f[B]\[dq]arraybuffer\[dq]\f[R]
Received binary messages\[cq] contents will be contained in
\f[CR]ArrayBuffer\f[R] objects.
.SH EXAMPLE
This code configures a data channel to receive binary data in
\f[CR]ArrayBuffer\f[R] objects, and establishes a listener for
\f[CR]message\f[R] events which constructs a string representing the
received data as a list of hexadecimal byte values.
.IP
.EX
\f[B]const\f[R] dc = peerConnection.createDataChannel(\[dq]Binary\[dq]);
dc.binaryType = \[dq]arraybuffer\[dq];

dc.onmessage = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] byteArray = \f[B]new\f[R] Uint8Array(event.data);
  \f[B]let\f[R] hexString = \[dq]\[dq];

  byteArray.forEach((byte) \f[B]=>\f[R] {
    hexString += \[ga]${byte.toString(16)} \[ga];
  });
};
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC
.IP \[bu] 2
Using WebRTC data channels
.IP \[bu] 2
\f[CR]RTCDataChannel\f[R]
.IP \[bu] 2
\f[CR]RTCDataChannel.send()\f[R]
