.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "EVENTSOURCE" "3JS" "March 13, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
EventSource \- EventSource
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]EventSource\f[B]\f[R] interface is web content\(cqs
interface to server\-sent events.
.PP
An \f[CR]EventSource\f[R] instance opens a persistent connection to an
HTTP server, which sends events in \f[CR]text/event\-stream\f[R] format.
The connection remains open until closed by calling
\f[CR]EventSource.close()\f[R].
.PP
Once the connection is opened, incoming messages from the server are
delivered to your code in the form of events.
If there is an event field in the incoming message, the triggered event
is the same as the event field value.
If no event field is present, then a generic \f[CR]message\f[R] event is
fired.
.PP
Unlike WebSockets, server\-sent events are unidirectional; that is, data
messages are delivered in one direction, from the server to the client
(such as a user\(cqs web browser).
That makes them an excellent choice when there\(cqs no need to send data
from the client to the server in message form.
For example, \f[CR]EventSource\f[R] is a useful approach for handling
things like social media status updates, news feeds, or delivering data
into a client\-side storage mechanism like IndexedDB or web storage.
.RS
.PP
\f[B]Warning:\f[R] When \f[B]not used over HTTP/2\f[R], SSE suffers from
a limitation to the maximum number of open connections, which can be
specially painful when opening various tabs as the limit is \f[I]per
browser\f[R] and set to a very low number (6).
The issue has been marked as \(lqWon\(cqt fix\(rq in \c
.UR https://crbug.com/275955
Chrome
.UE \c
\ and \c
.UR https://bugzil.la/906896
Firefox
.UE \c
\&.
This limit is per browser + domain, so that means that you can open 6
SSE connections across all of the tabs to \f[CR]www.example1.com\f[R]
and another 6 SSE connections to \f[CR]www.example2.com\f[R].
(from \c
.UR https://stackoverflow.com/questions/5195452/websockets-vs-server-sent-events-eventsource/5326159
Stack Overflow
.UE \c
).
When using HTTP/2, the maximum number of simultaneous \f[I]HTTP
streams\f[R] is negotiated between the server and the client (defaults
to 100).
.RE
.SH CONSTRUCTOR
.TP
\f[B]EventSource()\f[R]
Creates a new \f[CR]EventSource\f[R] to handle receiving server\-sent
events from a specified URL, optionally in credentials mode.
.SH INSTANCE PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]EventSource.readyState\f[R] \f[I](read\-only)\f[R]
A number representing the state of the connection.
Possible values are \f[CR]CONNECTING\f[R] (\f[CR]0\f[R]),
\f[CR]OPEN\f[R] (\f[CR]1\f[R]), or \f[CR]CLOSED\f[R] (\f[CR]2\f[R]).
.TP
\f[B]EventSource.url\f[R] \f[I](read\-only)\f[R]
A string representing the URL of the source.
.TP
\f[B]EventSource.withCredentials\f[R] \f[I](read\-only)\f[R]
A boolean value indicating whether the \f[CR]EventSource\f[R] object was
instantiated with cross\-origin (CORS) credentials set
(\f[CR]true\f[R]), or not (\f[CR]false\f[R], the default).
.SH INSTANCE METHODS
\f[I]This interface also inherits methods from its parent,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]EventSource.close()\f[R]
Closes the connection, if any, and sets the \f[CR]readyState\f[R]
attribute to \f[CR]CLOSED\f[R].
If the connection is already closed, the method does nothing.
.SH EVENTS
.TP
\f[B]error\f[R]
Fired when a connection to an event source failed to open.
.TP
\f[B]message\f[R]
Fired when data is received from an event source.
.TP
\f[B]open\f[R]
Fired when a connection to an event source has opened.
.PP
Additionally, the event source itself may send messages with an event
field, which will create ad hoc events keyed to that value.
.SH EXAMPLES
In this basic example, an \f[CR]EventSource\f[R] is created to receive
unnamed events from the server; a page with the name \f[CR]sse.php\f[R]
is responsible for generating the events.
.IP
.EX
\f[B]const\f[R] evtSource = \f[B]new\f[R] EventSource(\(dqsse.php\(dq);
\f[B]const\f[R] eventList = document.querySelector(\(dqul\(dq);

evtSource.onmessage = (e) \f[B]=>\f[R] {
  \f[B]const\f[R] newElement = document.createElement(\(dqli\(dq);

  newElement.textContent = \(gamessage: ${e.data}\(ga;
  eventList.appendChild(newElement);
};
.EE
.PP
Each received event causes our \f[CR]EventSource\f[R] object\(cqs
\f[CR]onmessage\f[R] event handler to be run.
It, in turn, creates a new \f[CR]<li>\f[R] element and writes the
message\(cqs data into it, then appends the new element to the list
element already in the document.
.RS
.PP
\f[B]Note:\f[R] You can find a full example on GitHub \(em see \c
.UR https://github.com/mdn/dom-examples/tree/main/server-sent-events
Simple SSE demo using PHP
.UE \c
\&.
.RE
.PP
To listen to named events, you\(cqll require a listener for each type of
event sent.
.IP
.EX
\f[B]const\f[R] sse = \f[B]new\f[R] EventSource(\(dq/api/v1/sse\(dq);

\f[I]/*\f[R]
\f[I] * This will listen only for events\f[R]
\f[I] * similar to the following:\f[R]
\f[I] *\f[R]
\f[I] * event: notice\f[R]
\f[I] * data: useful data\f[R]
\f[I] * id: some\-id\f[R]
\f[I] */\f[R]
sse.addEventListener(\(dqnotice\(dq, (e) \f[B]=>\f[R] {
  console.log(e.data);
});

\f[I]/*\f[R]
\f[I] * Similarly, this will listen for events\f[R]
\f[I] * with the field \(gaevent: update\(ga\f[R]
\f[I] */\f[R]
sse.addEventListener(\(dqupdate\(dq, (e) \f[B]=>\f[R] {
  console.log(e.data);
});

\f[I]/*\f[R]
\f[I] * The event \(dqmessage\(dq is a special case, as it\f[R]
\f[I] * will capture events without an event field\f[R]
\f[I] * as well as events that have the specific type\f[R]
\f[I] * \(gaevent: message\(ga It will not trigger on any\f[R]
\f[I] * other event type.\f[R]
\f[I] */\f[R]
sse.addEventListener(\(dqmessage\(dq, (e) \f[B]=>\f[R] {
  console.log(e.data);
});
.EE
.SH SEE ALSO
.IP \(bu 2
Server\-sent events
.IP \(bu 2
Using server\-sent events
