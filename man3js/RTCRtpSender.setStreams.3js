.\" Automatically generated by Pandoc 3.4
.\"
.TH "RTCRtpSender.setStreams" "JS" "July 27, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpSender.setStreams \- RTCRtpSender: setStreams() method
.SH SYNOPSIS
The \f[CR]RTCRtpSender\f[R] method \f[B]\f[CB]setStreams()\f[B]\f[R]
associates the sender\[cq]s \f[CR]track\f[R] with the specified
\f[CR]MediaStream\f[R] objects.
.SH SYNTAX
.IP
.EX
setStreams()
setStreams(mediaStream1)
setStreams(mediaStream1, mediaStream2)
setStreams(mediaStream1, mediaStream2, /* \&..., */ mediaStreamN)
.EE
.SS Parameters
.TP
\f[B]mediaStreamN\f[R] \f[I](optional)\f[R]
An arbitrary number of \f[CR]MediaStream\f[R] objects specified as
arguments, that identify the streams to which the
\f[CR]RTCRtpSender\f[R]\[cq]s \f[CR]track\f[R] belongs.
If this parameter isn\[cq]t specified, no new streams will be associated
with the track.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the sender\[cq]s connection is closed.
.SH DESCRIPTION
\f[CR]setStreams()\f[R] is purely additive.
It doesn\[cq]t remove the track from any streams; it adds it to new
ones.
If you specify streams to which the track already belongs, that stream
is unaffected.
.PP
Once the track has been added to all of the streams, renegotiation of
the connection will be triggered by the \f[CR]negotiationneeded\f[R]
event being dispatched to the \f[CR]RTCPeerConnection\f[R] to which the
sender belongs.
.SH EXAMPLES
This example adds all of an \f[CR]RTCPeerConnection\f[R]\[cq]s tracks to
the specified stream.
.IP
.EX
\f[B]function\f[R] addTracksToStream(stream) {
  \f[B]let\f[R] senders = pc.getSenders();

  senders.forEach((sender) \f[B]=>\f[R] {
    \f[B]if\f[R] (sender.track && sender.transport.state === connected) {
      sender.setStreams(stream);
    }
  });
}
.EE
.PP
After calling the \f[CR]RTCPeerConnection\f[R] method
\f[CR]getSenders()\f[R] to get the list of the connection\[cq]s senders,
the \f[CR]addTracksToStream()\f[R] function iterates over the list.
For each sender, if the sender\[cq]s track is non\-null and its
transport\[cq]s state is \f[CR]connected\f[R], we call
\f[CR]setStreams()\f[R] to add the track to the \f[CR]stream\f[R]
specified.
