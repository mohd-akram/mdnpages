.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ReadableStreamBYOBReader" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStreamBYOBReader \- ReadableStreamBYOBReader
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[CR]ReadableStreamBYOBReader\f[R] interface of the Streams API
defines a reader for a \f[CR]ReadableStream\f[R] that supports
zero\-copy reading from an underlying byte source.
It is used for efficient copying from underlying sources where the data
is delivered as an \[lq]anonymous\[rq] sequence of bytes, such as files.
.PP
An instance of this reader type should usually be obtained by calling
\f[CR]ReadableStream.getReader()\f[R] on the stream, specifying
\f[CR]mode: \[dq]byob\[dq]\f[R] in the options parameter.
The readable stream must have an \f[I]underlying byte source\f[R].
In other words, it must have been constructed specifying an underlying
source with \f[CR]type: \[dq]bytes\[dq]\f[R]).
.PP
Using this kind of reader, a \f[CR]read()\f[R] request when the readable
stream\[cq]s internal queues are empty will result in a zero copy
transfer from the underlying source (bypassing the stream\[cq]s internal
queues).
If the internal queues are not empty, a \f[CR]read()\f[R] will satisfy
the request from the buffered data.
.PP
Note that the methods and properties are similar to those for the
default reader (\f[CR]ReadableStreamDefaultReader\f[R]).
The \f[CR]read()\f[R] method differs in that it provides a view into
which data should be written.
.SH CONSTRUCTOR
.TP
\f[B]ReadableStreamBYOBReader()\f[R]
Creates and returns a \f[CR]ReadableStreamBYOBReader\f[R] object
instance.
.SH INSTANCE PROPERTIES
.TP
\f[B]ReadableStreamBYOBReader.closed\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Promise\f[R] that fulfills when the stream closes, or
rejects if the stream throws an error or the reader\[cq]s lock is
released.
This property enables you to write code that responds to an end to the
streaming process.
.SH INSTANCE METHODS
.TP
\f[B]ReadableStreamBYOBReader.cancel()\f[R]
Returns a \f[CR]Promise\f[R] that resolves when the stream is canceled.
Calling this method signals a loss of interest in the stream by a
consumer.
The supplied \f[CR]reason\f[R] argument will be given to the underlying
source, which may or may not use it.
.TP
\f[B]ReadableStreamBYOBReader.read()\f[R]
Passes a view into which data must be written, and returns a
\f[CR]Promise\f[R] that resolves with the next chunk in the stream or
rejects with an indication that the stream is closed or has errored.
.TP
\f[B]ReadableStreamBYOBReader.releaseLock()\f[R]
Releases the reader\[cq]s lock on the stream.
.SH EXAMPLES
The example below is taken from the live examples in Using readable byte
streams.
.PP
First create the reader using \f[CR]ReadableStream.getReader()\f[R] on
the stream, specifying \f[CR]mode: \[dq]byob\[dq]\f[R] in the options
parameter.
As this is a \[lq]Bring Your Own Buffer\[rq] reader, we also need to
create an \f[CR]ArrayBuffer\f[R] to read into.
.IP
.EX
\f[B]const\f[R] reader = stream.getReader({ mode: \[dq]byob\[dq] });
\f[B]let\f[R] buffer = \f[B]new\f[R] ArrayBuffer(200);
.EE
.PP
A function that uses the reader is shown below.
This calls the \f[CR]read()\f[R] method recursively to read data into
the buffer.
The method takes a \f[CR]Uint8Array\f[R] typed array which is a view
over the part of the original array buffer that has not yet been
written.
The parameters of the view are calculated from the data that was
received in previous calls, which define an offset into the original
array buffer.
.IP
.EX
readStream(reader);

\f[B]function\f[R] readStream(reader) {
  \f[B]let\f[R] bytesReceived = 0;
  \f[B]let\f[R] offset = 0;

  \f[I]// read() returns a promise that resolves when a value has been received\f[R]
  reader
    .read(\f[B]new\f[R] Uint8Array(buffer, offset, buffer.byteLength \- offset))
    .then(\f[B]function\f[R] processText({ done, value }) {
      \f[I]// Result objects contain two properties:\f[R]
      \f[I]// done  \- true if the stream has already given all its data.\f[R]
      \f[I]// value \- some data. Always undefined when done is true.\f[R]

      \f[B]if\f[R] (done) {
        logConsumer(\[ga]readStream() complete. Total bytes: ${bytesReceived}\[ga]);
        \f[B]return\f[R];
      }

      buffer = value.buffer;
      offset += value.byteLength;
      bytesReceived += value.byteLength;

      logConsumer(
        \[ga]Read ${value.byteLength} (${bytesReceived}) bytes: ${value}\[ga],
      );
      result += value;

      \f[I]// Read some more, and call this function again\f[R]
      \f[B]return\f[R] reader
        .read(\f[B]new\f[R] Uint8Array(buffer, offset, buffer.byteLength \- offset))
        .then(processText);
    });
}
.EE
.PP
When there is no more data in the stream, the \f[CR]read()\f[R] method
resolves with an object with the property \f[CR]done\f[R] set to
\f[CR]true\f[R], and the function returns.
.PP
The \f[CR]ReadableStreamBYOBReader.closed\f[R] property returns a
promise that can be used to monitor for the stream being closed or
errored, or the reader lock being released.
.IP
.EX
reader.closed
  .then(() \f[B]=>\f[R] {
    \f[I]// Resolved \- code to handle stream closing\f[R]
  })
  .catch(() \f[B]=>\f[R] {
    \f[I]// Rejected \- code to handle error\f[R]
  });
.EE
.PP
To cancel the stream call \f[CR]ReadableStreamBYOBReader.cancel()\f[R],
optionally specifying a \f[I]reason\f[R].
This returns a promise that will resolve when the stream has been
cancelled.
When the stream is cancelled the controller will in turn call
\f[CR]cancel()\f[R] on the underlying source, passing in the optional
reason.
.PP
The example code in Using readable byte streams calls the cancel method
when a button is pressed, as shown:
.IP
.EX
button.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  reader.cancel(\[dq]user choice\[dq]).then(() \f[B]=>\f[R] console.log(\[dq]cancel complete\[dq]));
});
.EE
.PP
The consumer can also call \f[CR]releaseLock()\f[R] to release the
reader\[cq]s hold on the stream, but only when no read is pending:
.IP
.EX
reader.releaseLock();
.EE
.SH SEE ALSO
.IP \[bu] 2
Streams API concepts
.IP \[bu] 2
Using readable byte stream
.IP \[bu] 2
\f[CR]ReadableStream\f[R]
.IP \[bu] 2
\c
.UR https://whatwg-stream-visualizer.glitch.me/
WHATWG Stream Visualizer
.UE \c
, for a basic visualization of readable, writable, and transform
streams.
.IP \[bu] 2
\c
.UR https://github.com/MattiasBuelens/web-streams-polyfill
Web\-streams\-polyfill
.UE \c
\ or \c
.UR https://github.com/stardazed/sd-streams
sd\-streams
.UE \c
\ \- polyfills
