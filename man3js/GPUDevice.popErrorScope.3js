.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.POPERRORSCOPE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.popErrorScope \- GPUDevice: popErrorScope() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]popErrorScope()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface pops an existing GPU error scope from the
error scope stack (originally pushed using
\f[CR]GPUDevice.pushErrorScope()\f[R]) and returns a \f[CR]Promise\f[R]
that resolves to an object describing the first error captured in the
scope, or \f[CR]null\f[R] if no error occurred.
.SH SYNTAX
.IP
.EX
popErrorScope()
.EE
.SS Parameters
None.
.SS Return value
a \f[CR]Promise\f[R] that resolves to an object describing the first
error captured in the scope.
This can be of type:
.IP \(bu 2
\f[CR]GPUInternalError\f[R]
.IP \(bu 2
\f[CR]GPUOutOfMemoryError\f[R]
.IP \(bu 2
\f[CR]GPUValidationError\f[R]
.PP
If no error occurred, it resolves to \f[CR]null\f[R].
.SH EXAMPLES
The following example uses an error scope to capture a suspected
validation error, logging it to the console.
.IP
.EX
device.pushErrorScope(\(dqvalidation\(dq);

\f[B]let\f[R] sampler = device.createSampler({
  maxAnisotropy: 0, \f[I]// Invalid, maxAnisotropy must be at least 1.\f[R]
});

device.popErrorScope().then((error) \f[B]=>\f[R] {
  \f[B]if\f[R] (error) {
    sampler = \f[B]null\f[R];
    console.error(\(gaAn error occurred while creating sampler: ${error.message}\(ga);
  }
});
.EE
.PP
See \c
.UR https://toji.dev/webgpu-best-practices/error-handling
WebGPU Error Handling best practices
.UE \c
\ for a lot more examples and information.
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
