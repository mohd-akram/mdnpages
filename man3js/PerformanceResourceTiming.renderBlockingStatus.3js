.\" Automatically generated by Pandoc 3.4
.\"
.TH "PerformanceResourceTiming.renderBlockingStatus" "JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.renderBlockingStatus \-
PerformanceResourceTiming: renderBlockingStatus property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]renderBlockingStatus\f[B]\f[R] read\-only property
returns the render\-blocking status of the resource.
.PP
It is useful to determine resources that:
.IP \[bu] 2
weren\[cq]t render\-blocking and therefore could be delayed, or
.IP \[bu] 2
were render\-blocking and therefore could be preloaded.
.SH DESCRIPTION
Render\-blocking resources are static files, such as fonts, CSS, and
JavaScript that block or delay the browser from rendering page content
to the screen.
The browser determines these blocking resources automatically and
doesn\[cq]t render any pixel to the screen before all stylesheets and
synchronous scripts are loaded and evaluated.
This prevents Flash of Unstyled Contents (\[lq]FOUC\[rq]).
.PP
In addition to the automatic render\-blocking mechanism,
\f[CR]blocking=\[dq]render\[dq]\f[R] can be provided as an attribute and
value to \f[CR]<script>\f[R], \f[CR]<style>\f[R] or \f[CR]<link>\f[R]
elements to specify explicit render\-blocking.
For example:
.IP
.EX
<\f[B]script\f[R] blocking=\[dq]render\[dq] src=\[dq]important.js\[dq] defer></\f[B]script\f[R]>
.EE
.SH VALUE
The \f[CR]renderBlockingStatus\f[R] property can have the following
values:
.TP
\f[B]\[dq]blocking\[dq]\f[R]
The resource might potentially block rendering.
.TP
\f[B]\[dq]non\-blocking\[dq]\f[R]
The resource does not block rendering.
.SH EXAMPLES
.SS Logging resources that block rendering
The \f[CR]renderBlockingStatus\f[R] property can be used to see
resources that block rendering.
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]if\f[R] (entry.renderBlockingStatus === \[dq]blocking\[dq]) {
      console.log(\[ga]${entry.name} is render\-blocking.\[ga]);
    }
  });
});

observer.observe({ type: \[dq]resource\[dq], buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) \f[B]=>\f[R] {
  \f[B]if\f[R] (entry.renderBlockingStatus === \[dq]blocking\[dq]) {
    console.log(\[ga]${entry.name} is render\-blocking.\[ga]);
  }
});
.EE
