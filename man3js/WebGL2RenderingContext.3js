.\" Automatically generated by Pandoc 3.4
.\"
.TH "WebGL2RenderingContext" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGL2RenderingContext \- WebGL2RenderingContext
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]WebGL2RenderingContext\f[R] interface provides the OpenGL ES
3.0 rendering context for the drawing surface of an HTML
\f[CR]<canvas>\f[R] element.
.PP
To get an object of this interface, call \f[CR]getContext()\f[R] on a
\f[CR]<canvas>\f[R] element, supplying \[lq]webgl2\[rq] as the argument:
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]myCanvas\[dq]);
\f[B]const\f[R] gl = canvas.getContext(\[dq]webgl2\[dq]);
.EE
.RS
.PP
\f[B]Note:\f[R] WebGL 2 is an extension to WebGL 1.
The \f[CR]WebGL2RenderingContext\f[R] interface implements all members
of the \f[CR]WebGLRenderingContext\f[R] interface.
Some methods of the WebGL 1 context can accept additional values when
used in a WebGL 2 context.
You will find this info noted on the WebGL 1 reference pages.
.RE
.PP
The WebGL tutorial has more information, examples, and resources on how
to get started with WebGL.
.SH CONSTANTS
See the WebGL constants page.
.SH STATE INFORMATION
.TP
\f[B]WebGL2RenderingContext.getIndexedParameter()\f[R]
Returns the indexed value for the given \f[CR]target\f[R].
.SH BUFFERS
.TP
\f[B]WebGL2RenderingContext.bufferData()\f[R]
Initializes and creates the buffer object\[cq]s data store.
.TP
\f[B]WebGL2RenderingContext.bufferSubData()\f[R]
Updates a subset of a buffer object\[cq]s data store.
.TP
\f[B]WebGL2RenderingContext.copyBufferSubData()\f[R]
Copies part of the data of a buffer to another buffer.
.TP
\f[B]WebGL2RenderingContext.getBufferSubData()\f[R]
Reads data from a buffer and writes them to an \f[CR]ArrayBuffer\f[R] or
\f[CR]SharedArrayBuffer\f[R].
.SH FRAMEBUFFERS
.TP
\f[B]WebGL2RenderingContext.blitFramebuffer()\f[R]
Transfers a block of pixels from the read framebuffer to the draw
framebuffer.
.TP
\f[B]WebGL2RenderingContext.framebufferTextureLayer()\f[R]
Attaches a single layer of a texture to a framebuffer.
.TP
\f[B]WebGL2RenderingContext.invalidateFramebuffer()\f[R]
Invalidates the contents of attachments in a framebuffer.
.TP
\f[B]WebGL2RenderingContext.invalidateSubFramebuffer()\f[R]
Invalidates portions of the contents of attachments in a framebuffer
.TP
\f[B]WebGL2RenderingContext.readBuffer()\f[R]
Selects a color buffer as the source for pixels.
.SH RENDERBUFFERS
.TP
\f[B]WebGL2RenderingContext.getInternalformatParameter()\f[R]
Returns information about implementation\-dependent support for internal
formats.
.TP
\f[B]WebGL2RenderingContext.renderbufferStorageMultisample()\f[R]
Creates and initializes a renderbuffer object\[cq]s data store and
allows specifying the number of samples to be used.
.SH TEXTURES
.TP
\f[B]WebGL2RenderingContext.texStorage2D()\f[R]
Specifies all levels of two\-dimensional texture storage.
.TP
\f[B]WebGL2RenderingContext.texStorage3D()\f[R]
Specifies all levels of a three\-dimensional texture or two\-dimensional
array texture.
.TP
\f[B]WebGL2RenderingContext.texImage3D()\f[R]
Specifies a three\-dimensional texture image.
.TP
\f[B]WebGL2RenderingContext.texSubImage3D()\f[R]
Specifies a sub\-rectangle of the current 3D texture.
.TP
\f[B]WebGL2RenderingContext.copyTexSubImage3D()\f[R]
Copies pixels from the current \f[CR]WebGLFramebuffer\f[R] into an
existing 3D texture sub\-image.
.TP
\f[B]WebGL2RenderingContext.compressedTexImage3D\f[R]
Specifies a three\-dimensional texture image in a compressed format.
.TP
\f[B]WebGL2RenderingContext.compressedTexSubImage3D()\f[R]
Specifies a three\-dimensional sub\-rectangle for a texture image in a
compressed format.
.SH PROGRAMS AND SHADERS
.TP
\f[B]WebGL2RenderingContext.getFragDataLocation()\f[R]
Returns the binding of color numbers to user\-defined varying out
variables.
.SH UNIFORMS AND ATTRIBUTES
.TP
\f[B]WebGL2RenderingContext.uniform[1234][uif][v]()\f[R]
Methods specifying values of uniform variables.
.TP
\f[B]WebGL2RenderingContext.uniformMatrix[234]x[234]fv()\f[R]
Methods specifying matrix values for uniform variables.
.TP
\f[B]WebGL2RenderingContext.vertexAttribI4[u]i[v]()\f[R]
Methods specifying integer values for generic vertex attributes.
.TP
\f[B]WebGL2RenderingContext.vertexAttribIPointer()\f[R]
Specifies integer data formats and locations of vertex attributes in a
vertex attributes array.
.SH COLOR SPACES
.TP
\f[B]WebGL2RenderingContext.drawingBufferColorSpace\f[R]
Specifies the color space of the WebGL drawing buffer.
.TP
\f[B]WebGL2RenderingContext.unpackColorSpace\f[R]
Specifies the color space to convert to when importing textures.
.SH DRAWING BUFFERS
.TP
\f[B]WebGL2RenderingContext.vertexAttribDivisor()\f[R]
Modifies the rate at which generic vertex attributes advance when
rendering multiple instances of primitives with
\f[CR]gl.drawArraysInstanced()\f[R] and
\f[CR]gl.drawElementsInstanced()\f[R].
.TP
\f[B]WebGL2RenderingContext.drawArraysInstanced()\f[R]
Renders primitives from array data.
In addition, it can execute multiple instances of the range of elements.
.TP
\f[B]WebGL2RenderingContext.drawElementsInstanced()\f[R]
Renders primitives from array data.
In addition, it can execute multiple instances of a set of elements.
.TP
\f[B]WebGL2RenderingContext.drawRangeElements()\f[R]
Renders primitives from array data in a given range.
.TP
\f[B]WebGL2RenderingContext.drawBuffers()\f[R]
Specifies a list of color buffers to be drawn into.
.TP
\f[B]WebGL2RenderingContext.clearBuffer[fiuv]()\f[R]
Clears buffers from the currently bound framebuffer.
.SH QUERY OBJECTS
Methods for working with \f[CR]WebGLQuery\f[R] objects.
.TP
\f[B]WebGL2RenderingContext.createQuery()\f[R]
Creates a new \f[CR]WebGLQuery\f[R] object.
.TP
\f[B]WebGL2RenderingContext.deleteQuery()\f[R]
Deletes a given \f[CR]WebGLQuery\f[R] object.
.TP
\f[B]WebGL2RenderingContext.isQuery()\f[R]
Returns \f[CR]true\f[R] if a given object is a valid
\f[CR]WebGLQuery\f[R] object.
.TP
\f[B]WebGL2RenderingContext.beginQuery()\f[R]
Begins an asynchronous query.
.TP
\f[B]WebGL2RenderingContext.endQuery()\f[R]
Marks the end of an asynchronous query.
.TP
\f[B]WebGL2RenderingContext.getQuery()\f[R]
Returns a \f[CR]WebGLQuery\f[R] object for a given target.
.TP
\f[B]WebGL2RenderingContext.getQueryParameter()\f[R]
Returns information about a query.
.SH SAMPLER OBJECTS
.TP
\f[B]WebGL2RenderingContext.createSampler()\f[R]
Creates a new \f[CR]WebGLSampler\f[R] object.
.TP
\f[B]WebGL2RenderingContext.deleteSampler()\f[R]
Deletes a given \f[CR]WebGLSampler\f[R] object.
.TP
\f[B]WebGL2RenderingContext.bindSampler()\f[R]
Binds a given \f[CR]WebGLSampler\f[R] to a texture unit.
.TP
\f[B]WebGL2RenderingContext.isSampler()\f[R]
Returns \f[CR]true\f[R] if a given object is a valid
\f[CR]WebGLSampler\f[R] object.
.TP
\f[B]WebGL2RenderingContext.samplerParameter[if]()\f[R]
Sets sampler parameters.
.TP
\f[B]WebGL2RenderingContext.getSamplerParameter()\f[R]
Returns sampler parameter information.
.SH SYNC OBJECTS
.TP
\f[B]WebGL2RenderingContext.fenceSync()\f[R]
Creates a new \f[CR]WebGLSync\f[R] object and inserts it into the GL
command stream.
.TP
\f[B]WebGL2RenderingContext.isSync()\f[R]
Returns \f[CR]true\f[R] if the passed object is a valid
\f[CR]WebGLSync\f[R] object.
.TP
\f[B]WebGL2RenderingContext.deleteSync()\f[R]
Deletes a given \f[CR]WebGLSync\f[R] object.
.TP
\f[B]WebGL2RenderingContext.clientWaitSync()\f[R]
Blocks and waits for a \f[CR]WebGLSync\f[R] object to become signaled or
a given timeout to be passed.
.TP
\f[B]WebGL2RenderingContext.waitSync()\f[R]
Returns immediately, but waits on the GL server until the given
\f[CR]WebGLSync\f[R] object is signaled.
.TP
\f[B]WebGL2RenderingContext.getSyncParameter()\f[R]
Returns parameter information of a \f[CR]WebGLSync\f[R] object.
.SH TRANSFORM FEEDBACK
.TP
\f[B]WebGL2RenderingContext.createTransformFeedback()\f[R]
Creates and initializes \f[CR]WebGLTransformFeedback\f[R] objects.
.TP
\f[B]WebGL2RenderingContext.deleteTransformFeedback()\f[R]
Deletes a given \f[CR]WebGLTransformFeedback\f[R] object.
.TP
\f[B]WebGL2RenderingContext.isTransformFeedback()\f[R]
Returns \f[CR]true\f[R] if the passed object is a valid
\f[CR]WebGLTransformFeedback\f[R] object.
.TP
\f[B]WebGL2RenderingContext.bindTransformFeedback()\f[R]
Binds a passed \f[CR]WebGLTransformFeedback\f[R] object to the current
GL state.
.TP
\f[B]WebGL2RenderingContext.beginTransformFeedback()\f[R]
Starts a transform feedback operation.
.TP
\f[B]WebGL2RenderingContext.endTransformFeedback()\f[R]
Ends a transform feedback operation.
.TP
\f[B]WebGL2RenderingContext.transformFeedbackVaryings()\f[R]
Specifies values to record in \f[CR]WebGLTransformFeedback\f[R] buffers.
.TP
\f[B]WebGL2RenderingContext.getTransformFeedbackVarying()\f[R]
Returns information about varying variables from
\f[CR]WebGLTransformFeedback\f[R] buffers.
.TP
\f[B]WebGL2RenderingContext.pauseTransformFeedback()\f[R]
Pauses a transform feedback operation.
.TP
\f[B]WebGL2RenderingContext.resumeTransformFeedback()\f[R]
Resumes a transform feedback operation.
.SH UNIFORM BUFFER OBJECTS
.TP
\f[B]WebGL2RenderingContext.bindBufferBase()\f[R]
Binds a given \f[CR]WebGLBuffer\f[R] to a given binding point
(\f[CR]target\f[R]) at a given \f[CR]index\f[R].
.TP
\f[B]WebGL2RenderingContext.bindBufferRange()\f[R]
Binds a range of a given \f[CR]WebGLBuffer\f[R] to a given binding point
(\f[CR]target\f[R]) at a given \f[CR]index\f[R].
.TP
\f[B]WebGL2RenderingContext.getUniformIndices()\f[R]
Retrieves the indices of a number of uniforms within a
\f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGL2RenderingContext.getActiveUniforms()\f[R]
Retrieves information about active uniforms within a
\f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGL2RenderingContext.getUniformBlockIndex()\f[R]
Retrieves the index of a uniform block within a \f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGL2RenderingContext.getActiveUniformBlockParameter()\f[R]
Retrieves information about an active uniform block within a
\f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGL2RenderingContext.getActiveUniformBlockName()\f[R]
Retrieves the name of the active uniform block at a given index within a
\f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGL2RenderingContext.uniformBlockBinding()\f[R]
Assigns binding points for active uniform blocks.
.SH VERTEX ARRAY OBJECTS
Methods for working with \f[CR]WebGLVertexArrayObject\f[R] (VAO)
objects.
.TP
\f[B]WebGL2RenderingContext.createVertexArray()\f[R]
Creates a new \f[CR]WebGLVertexArrayObject\f[R].
.TP
\f[B]WebGL2RenderingContext.deleteVertexArray()\f[R]
Deletes a given \f[CR]WebGLVertexArrayObject\f[R].
.TP
\f[B]WebGL2RenderingContext.isVertexArray()\f[R]
Returns \f[CR]true\f[R] if a given object is a valid
\f[CR]WebGLVertexArrayObject\f[R].
.TP
\f[B]WebGL2RenderingContext.bindVertexArray()\f[R]
Binds a given \f[CR]WebGLVertexArrayObject\f[R] to the buffer.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]HTMLCanvasElement\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext\f[R]
