.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RegExp.\[at]\[at]split" "JS" "June 22, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.\[at]\[at]split \- RegExp.prototype\[at]\[at]split
.SH SYNOPSIS
The \f[B]\f[CB][\[at]\[at]split]()\f[B]\f[R] method of \f[CR]RegExp\f[R]
instances specifies how \f[CR]String.prototype.split\f[R] should behave
when the regular expression is passed in as the separator.
.SH SYNTAX
.IP
.EX
regexp[Symbol.split](str)
regexp[Symbol.split](str, limit)
.EE
.SS Parameters
.TP
\f[B]str\f[R]
The target of the split operation.
.TP
\f[B]limit\f[R] \f[I](optional)\f[R]
Integer specifying a limit on the number of splits to be found.
The \f[CR][\[at]\[at]split]()\f[R] method still splits on every match of
\f[CR]this\f[R] RegExp pattern (or, in the Syntax above,
\f[CR]regexp\f[R]), until the number of split items match the
\f[CR]limit\f[R] or the string falls short of \f[CR]this\f[R] pattern.
.SS Return value
An \f[CR]Array\f[R] containing substrings as its elements.
Capturing groups are included.
.SH DESCRIPTION
This method is called internally in \f[CR]String.prototype.split()\f[R]
when a \f[CR]RegExp\f[R] is passed as the separator.
For example, the following two examples return the same result.
.IP
.EX
\[dq]a\-b\-c\[dq].split(/\-/);

/\-/[Symbol.split](\[dq]a\-b\-c\[dq]);
.EE
.PP
This method exists for customizing the behavior of \f[CR]split()\f[R] in
\f[CR]RegExp\f[R] subclasses.
.PP
The \f[CR]RegExp.prototype[\[at]\[at]split]()\f[R] base method exhibits
the following behaviors:
.IP \[bu] 2
It starts by using \f[CR]\[at]\[at]species\f[R] to construct a new
regexp, thus avoiding mutating the original regexp in any way.
.IP \[bu] 2
The regexp\[cq]s \f[CR]g\f[R] (\[lq]global\[rq]) flag is ignored, and
the \f[CR]y\f[R] (\[lq]sticky\[rq]) flag is always applied even when it
was not originally present.
.IP \[bu] 2
If the target string is empty, and the regexp can match empty strings
(for example, \f[CR]/a?/\f[R]), an empty array is returned.
Otherwise, if the regexp can\[cq]t match an empty string,
\f[CR][\[dq]\[dq]]\f[R] is returned.
.IP \[bu] 2
The matching proceeds by continuously calling \f[CR]this.exec()\f[R].
Since the regexp is always sticky, this will move along the string, each
time yielding a matching string, index, and any capturing groups.
.IP \[bu] 2
For each match, the substring between the last matched string\[cq]s end
and the current matched string\[cq]s beginning is first appended to the
result array.
Then, the capturing groups\[cq] values are appended one\-by\-one.
.IP \[bu] 2
If the current match is an empty string, or if the regexp doesn\[cq]t
match at the current position (since it\[cq]s sticky), the
\f[CR]lastIndex\f[R] would still be advanced \[em] if the regex is
Unicode\-aware, it would advance by one Unicode code point; otherwise,
it advances by one UTF\-16 code unit.
.IP \[bu] 2
If the regexp doesn\[cq]t match the target string, the target string is
returned as\-is, wrapped in an array.
.IP \[bu] 2
The returned array\[cq]s length will never exceed the \f[CR]limit\f[R]
parameter, if provided, while trying to be as close as possible.
Therefore, the last match and its capturing groups may not all be
present in the returned array if the array is already filled.
.SH EXAMPLES
.SS Direct call
This method can be used in almost the same way as
\f[CR]String.prototype.split()\f[R], except the different
\f[CR]this\f[R] and the different order of arguments.
.IP
.EX
\f[B]const\f[R] re = /\-/g;
\f[B]const\f[R] str = \[dq]2016\-01\-02\[dq];
\f[B]const\f[R] result = re[Symbol.split](str);
console.log(result); \f[I]// [\[dq]2016\[dq], \[dq]01\[dq], \[dq]02\[dq]]\f[R]
.EE
.SS Using \[at]\[at]split in subclasses
Subclasses of \f[CR]RegExp\f[R] can override the
\f[CR][\[at]\[at]split]()\f[R] method to modify the default behavior.
.IP
.EX
\f[B]class\f[R] MyRegExp \f[B]extends\f[R] RegExp {
  [Symbol.split](str, limit) {
    \f[B]const\f[R] result = RegExp.prototype[Symbol.split].call(\f[B]this\f[R], str, limit);
    \f[B]return\f[R] result.map((x) \f[B]=>\f[R] \[ga](${x})\[ga]);
  }
}

\f[B]const\f[R] re = \f[B]new\f[R] MyRegExp(\[dq]\-\[dq]);
\f[B]const\f[R] str = \[dq]2016\-01\-02\[dq];
\f[B]const\f[R] result = str.split(re); \f[I]// String.prototype.split calls re[\[at]\[at]split].\f[R]
console.log(result); \f[I]// [\[dq](2016)\[dq], \[dq](01)\[dq], \[dq](02)\[dq]]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]RegExp.prototype[\[at]\[at]split]\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]String.prototype.split()\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype[\[at]\[at]match]()\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype[\[at]\[at]matchAll]()\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype[\[at]\[at]replace]()\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype[\[at]\[at]search]()\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.exec()\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.test()\f[R]
.IP \[bu] 2
\f[CR]Symbol.split\f[R]
