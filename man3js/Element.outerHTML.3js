.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Element.outerHTML" "JS" "July 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.outerHTML \- Element: outerHTML property
.SH SYNOPSIS
The \f[B]\f[CB]outerHTML\f[B]\f[R] attribute of the \f[CR]Element\f[R]
DOM interface gets the serialized HTML fragment describing the element
including its descendants.
It can also be set to replace the element with nodes parsed from the
given string.
.PP
To only obtain the HTML representation of the contents of an element, or
to replace the contents of an element, use the \f[CR]innerHTML\f[R]
property instead.
.SH VALUE
Reading the value of \f[CR]outerHTML\f[R] returns a string containing an
HTML serialization of the \f[CR]element\f[R] and its descendants.
Setting the value of \f[CR]outerHTML\f[R] replaces the element and all
of its descendants with a new DOM tree constructed by parsing the
specified \f[CR]htmlString\f[R].
.PP
When set to the \f[CR]null\f[R] value, that \f[CR]null\f[R] value is
converted to the empty string (\f[CR]\[dq]\[dq]\f[R]), so
\f[CR]elt.outerHTML = null\f[R] is equivalent to
\f[CR]elt.outerHTML = \[dq]\[dq]\f[R].
.SS Exceptions
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if an attempt was made to set \f[CR]outerHTML\f[R] using an HTML
string which is not valid.
.TP
\f[B]NoModificationAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if an attempt was made to set \f[CR]outerHTML\f[R] on an element
which is a direct child of a \f[CR]Document\f[R], such as
\f[CR]Document.documentElement\f[R].
.SH EXAMPLES
.SS Getting the value of an element\[cq]s outerHTML property
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]d\[dq]>
  <\f[B]p\f[R]>Content</\f[B]p\f[R]>
  <\f[B]p\f[R]>Further Elaborated</\f[B]p\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] d = document.getElementById(\[dq]d\[dq]);
console.log(d.outerHTML);

\f[I]// The string \[aq]<div id=\[dq]d\[dq]><p>Content</p><p>Further Elaborated</p></div>\[aq]\f[R]
\f[I]// is written to the console window\f[R]
.EE
.SS Replacing a node by setting the outerHTML property
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]container\[dq]>
  <\f[B]div\f[R] id=\[dq]d\[dq]>This is a div.</\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] container = document.getElementById(\[dq]container\[dq]);
\f[B]const\f[R] d = document.getElementById(\[dq]d\[dq]);

console.log(container.firstElementChild.nodeName); \f[I]// logs \[dq]DIV\[dq]\f[R]

d.outerHTML = \[dq]<p>This paragraph replaced the original div.</p>\[dq];

console.log(container.firstElementChild.nodeName); \f[I]// logs \[dq]P\[dq]\f[R]

\f[I]// The #d div is no longer part of the document tree,\f[R]
\f[I]// the new paragraph replaced it.\f[R]
.EE
.SH NOTES
If the element has no parent node, setting its \f[CR]outerHTML\f[R]
property will not change it or its descendants.
For example:
.IP
.EX
\f[B]const\f[R] div = document.createElement(\[dq]div\[dq]);
div.outerHTML = \[aq]<div class=\[dq]test\[dq]>test</div>\[aq];
console.log(div.outerHTML); \f[I]// output: \[dq]<div></div>\[dq]\f[R]
.EE
.PP
Also, while the element will be replaced in the document, the variable
whose \f[CR]outerHTML\f[R] property was set will still hold a reference
to the original element:
.IP
.EX
\f[B]const\f[R] p = document.querySelector(\[dq]p\[dq]);
console.log(p.nodeName); \f[I]// shows: \[dq]P\[dq]\f[R]
p.outerHTML = \[dq]<div>This div replaced a paragraph.</div>\[dq];
console.log(p.nodeName); \f[I]// still \[dq]P\[dq];\f[R]
.EE
.PP
The returned value will contain HTML escaped attributes:
.IP
.EX
\f[B]const\f[R] anc = document.createElement(\[dq]a\[dq]);
anc.href = \[dq]https://developer.mozilla.org?a=b&c=d\[dq];
console.log(anc.outerHTML); \f[I]// output: \[dq]<a href=\[aq]https://developer.mozilla.org?a=b&amp;c=d\[aq]></a>\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
Serializing DOM trees into XML strings: \f[CR]XMLSerializer\f[R]
.IP \[bu] 2
Parsing XML or HTML into DOM trees: \f[CR]DOMParser\f[R]
.IP \[bu] 2
\f[CR]HTMLElement.outerText\f[R]
