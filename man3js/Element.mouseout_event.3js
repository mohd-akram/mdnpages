.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Element.mouseout_event" "JS" "March 4, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.mouseout_event \- Element: mouseout event
.SH SYNOPSIS
The \f[B]\f[CB]mouseout\f[B]\f[R] event is fired at an
\f[CR]Element\f[R] when a pointing device (usually a mouse) is used to
move the cursor so that it is no longer contained within the element or
one of its children.
.PP
\f[CR]mouseout\f[R] is also delivered to an element if the cursor enters
a child element, because the child element obscures the visible area of
the element.
.PP
If the target element has child elements, \f[CR]mouseout\f[R] and
\f[CR]mouseover\f[R] events fire as the mouse moves over the boundaries
of these elements too, not just the target element itself.
Usually, \f[CR]mouseenter\f[R] and \f[CR]mouseleave\f[R] events\[cq]
behavior is more sensible, because they are not affected by moving into
child elements.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]mouseout\[dq], (event) \f[B]=>\f[R] {});

onmouseout = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MouseEvent\f[R].
Inherits from \f[CR]UIEvent\f[R] and \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]MouseEvent.altKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the alt key was down when the mouse event was
fired.
.TP
\f[B]MouseEvent.button\f[R] \f[I](read\-only)\f[R]
The button number that was pressed (if applicable) when the mouse event
was fired.
.TP
\f[B]MouseEvent.buttons\f[R] \f[I](read\-only)\f[R]
The buttons being pressed (if any) when the mouse event was fired.
.TP
\f[B]MouseEvent.clientX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.clientY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.ctrlKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the control key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.layerX\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the horizontal coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.layerY\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the vertical coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.metaKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the meta key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.movementX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.movementY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.offsetX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.offsetY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.pageX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.pageY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.relatedTarget\f[R] \f[I](read\-only)\f[R]
The secondary target for the event, if there is one.
.TP
\f[B]MouseEvent.screenX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.screenY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.shiftKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the shift key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.mozInputSource\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The type of device that generated the event (one of the
\f[CR]MOZ_SOURCE_*\f[R] constants).
This lets you, for example, determine whether a mouse event was
generated by an actual mouse or by a touch event (which might affect the
degree of accuracy with which you interpret the coordinates associated
with the event).
.TP
\f[B]MouseEvent.webkitForce\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The amount of pressure applied when clicking.
.TP
\f[B]MouseEvent.x\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientX\f[R].
.TP
\f[B]MouseEvent.y\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientY\f[R].
.SH EXAMPLES
The following examples show the use of the \f[CR]mouseout\f[R] event.
.SS mouseout and mouseleave
The following example illustrates the difference between
\f[CR]mouseout\f[R] and \f[CR]mouseleave\f[R] events.
The \f[CR]mouseleave\f[R] event is added to the \f[CR]<ul>\f[R] to color
the list purple whenever the mouse exits the \f[CR]<ul>\f[R].
\f[CR]mouseout\f[R] is added to the list to color the targeted element
orange when the mouse exits it.
.PP
When you try this out, you\[cq]ll find that \f[CR]mouseout\f[R] is
delivered to the individual list items, while \f[CR]mouseleave\f[R] goes
to the overall list, courtesy of the hierarchy of the items and the fact
that list items obscure the underlying \f[CR]<ul>\f[R].
.SS HTML
.IP
.EX
<\f[B]ul\f[R] id=\[dq]test\[dq]>
  <\f[B]li\f[R]>item 1</\f[B]li\f[R]>
  <\f[B]li\f[R]>item 2</\f[B]li\f[R]>
  <\f[B]li\f[R]>item 3</\f[B]li\f[R]>
</\f[B]ul\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] test = document.getElementById(\[dq]test\[dq]);

\f[I]// Briefly make the list purple when the mouse moves off the\f[R]
\f[I]// <ul> element\f[R]
test.addEventListener(
  \[dq]mouseleave\[dq],
  (event) \f[B]=>\f[R] {
    \f[I]// highlight the mouseleave target\f[R]
    event.target.style.color = \[dq]purple\[dq];

    \f[I]// reset the color after a short delay\f[R]
    setTimeout(() \f[B]=>\f[R] {
      event.target.style.color = \[dq]\[dq];
    }, 1000);
  },
  \f[B]false\f[R],
);

\f[I]// Briefly make an <li> orange when the mouse moves off of it\f[R]
test.addEventListener(
  \[dq]mouseout\[dq],
  (event) \f[B]=>\f[R] {
    \f[I]// highlight the mouseout target\f[R]
    event.target.style.color = \[dq]orange\[dq];

    \f[I]// reset the color after a short delay\f[R]
    setTimeout(() \f[B]=>\f[R] {
      event.target.style.color = \[dq]\[dq];
    }, 500);
  },
  \f[B]false\f[R],
);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Learn: Introduction to events
.IP \[bu] 2
\f[CR]mousedown\f[R]
.IP \[bu] 2
\f[CR]mouseup\f[R]
.IP \[bu] 2
\f[CR]mousemove\f[R]
.IP \[bu] 2
\f[CR]click\f[R]
.IP \[bu] 2
\f[CR]dblclick\f[R]
.IP \[bu] 2
\f[CR]mouseover\f[R]
.IP \[bu] 2
\f[CR]mouseenter\f[R]
.IP \[bu] 2
\f[CR]mouseleave\f[R]
.IP \[bu] 2
\f[CR]contextmenu\f[R]
.IP \[bu] 2
\f[CR]pointerout\f[R]
