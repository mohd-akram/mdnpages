.\" Automatically generated by Pandoc 3.4
.\"
.TH "Array.push" "JS" "May 13, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.push \- Array.prototype.push()
.SH SYNOPSIS
The \f[B]\f[CB]push()\f[B]\f[R] method of \f[CR]Array\f[R] instances
adds the specified elements to the end of an array and returns the new
length of the array.
.SH SYNTAX
.IP
.EX
push()
push(element1)
push(element1, element2)
push(element1, element2, /* \&..., */ elementN)
.EE
.SS Parameters
.TP
\f[B]element1\f[R], \&..., \f[B]elementN\f[R]
The element(s) to add to the end of the array.
.SS Return value
The new \f[CR]length\f[R] property of the object upon which the method
was called.
.SH DESCRIPTION
The \f[CR]push()\f[R] method appends values to an array.
.PP
\f[CR]Array.prototype.unshift()\f[R] has similar behavior to
\f[CR]push()\f[R], but applied to the start of an array.
.PP
The \f[CR]push()\f[R] method is a mutating method.
It changes the length and the content of \f[CR]this\f[R].
In case you want the value of \f[CR]this\f[R] to be the same, but return
a new array with elements appended to the end, you can use
\f[CR]arr.concat([element0, element1, /* ... ,*/ elementN])\f[R]
instead.
Notice that the elements are wrapped in an extra array \[em] otherwise,
if the element is an array itself, it would be spread instead of pushed
as a single element due to the behavior of \f[CR]concat()\f[R].
.PP
The \f[CR]push()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
Although strings are also array\-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH EXAMPLES
.SS Adding elements to an array
The following code creates the \f[CR]sports\f[R] array containing two
elements, then appends two elements to it.
The \f[CR]total\f[R] variable contains the new length of the array.
.IP
.EX
\f[B]const\f[R] sports = [\[dq]soccer\[dq], \[dq]baseball\[dq]];
\f[B]const\f[R] total = sports.push(\[dq]football\[dq], \[dq]swimming\[dq]);

console.log(sports); \f[I]// [\[aq]soccer\[aq], \[aq]baseball\[aq], \[aq]football\[aq], \[aq]swimming\[aq]]\f[R]
console.log(total); \f[I]// 4\f[R]
.EE
.SS Merging two arrays
This example uses spread syntax to push all elements from a second array
into the first one.
.IP
.EX
\f[B]const\f[R] vegetables = [\[dq]parsnip\[dq], \[dq]potato\[dq]];
\f[B]const\f[R] moreVegs = [\[dq]celery\[dq], \[dq]beetroot\[dq]];

\f[I]// Merge the second array into the first one\f[R]
vegetables.push(...moreVegs);

console.log(vegetables); \f[I]// [\[aq]parsnip\[aq], \[aq]potato\[aq], \[aq]celery\[aq], \[aq]beetroot\[aq]]\f[R]
.EE
.PP
Merging two arrays can also be done with the \f[CR]concat()\f[R] method.
.SS Calling push() on non\-array objects
The \f[CR]push()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R].
It then sets each index of \f[CR]this\f[R] starting at \f[CR]length\f[R]
with the arguments passed to \f[CR]push()\f[R].
Finally, it sets the \f[CR]length\f[R] to the previous length plus the
number of pushed elements.
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  2: 4,
};
Array.prototype.push.call(arrayLike, 1, 2);
console.log(arrayLike);
\f[I]// { \[aq]2\[aq]: 4, \[aq]3\[aq]: 1, \[aq]4\[aq]: 2, length: 5, unrelated: \[aq]foo\[aq] }\f[R]

\f[B]const\f[R] plainObj = {};
\f[I]// There\[aq]s no length property, so the length is 0\f[R]
Array.prototype.push.call(plainObj, 1, 2);
console.log(plainObj);
\f[I]// { \[aq]0\[aq]: 1, \[aq]1\[aq]: 2, length: 2 }\f[R]
.EE
.SS Using an object in an array\-like fashion
As mentioned above, \f[CR]push\f[R] is intentionally generic, and we can
use that to our advantage.
\f[CR]Array.prototype.push\f[R] can work on an object just fine, as this
example shows.
.PP
Note that we don\[cq]t create an array to store a collection of objects.
Instead, we store the collection on the object itself and use
\f[CR]call\f[R] on \f[CR]Array.prototype.push\f[R] to trick the method
into thinking we are dealing with an array\[em]and it just works, thanks
to the way JavaScript allows us to establish the execution context in
any way we want.
.IP
.EX
\f[B]const\f[R] obj = {
  length: 0,

  addElem(elem) {
    \f[I]// obj.length is automatically incremented\f[R]
    \f[I]// every time an element is added.\f[R]
    [].push.call(\f[B]this\f[R], elem);
  },
};

\f[I]// Let\[aq]s add some empty objects just to illustrate.\f[R]
obj.addElem({});
obj.addElem({});
console.log(obj.length); \f[I]// 2\f[R]
.EE
.PP
Note that although \f[CR]obj\f[R] is not an array, the method
\f[CR]push\f[R] successfully incremented \f[CR]obj\f[R]\[cq]s
\f[CR]length\f[R] property just like if we were dealing with an actual
array.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.push\f[R] in \f[CR]core\-js\f[R] with
fixes of this method
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.pop()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.shift()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.unshift()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.concat()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.splice()\f[R]
