.\" Automatically generated by Pandoc 3.4
.\"
.TH "Intl.NumberFormat" "JS" "October 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.NumberFormat \- Intl.NumberFormat
.SH SYNOPSIS
The \f[B]\f[CB]Intl.NumberFormat\f[B]\f[R] object enables
language\-sensitive number formatting.
.SH CONSTRUCTOR
.TP
\f[B]Intl.NumberFormat()\f[R]
Creates a new \f[CR]NumberFormat\f[R] object.
.SH STATIC METHODS
.TP
\f[B]Intl.NumberFormat.supportedLocalesOf()\f[R]
Returns an array containing those of the provided locales that are
supported without having to fall back to the runtime\[cq]s default
locale.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Intl.NumberFormat.prototype\f[R]
and shared by all \f[CR]Intl.NumberFormat\f[R] instances.
.TP
\f[B]Intl.NumberFormat.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Intl.NumberFormat\f[R] instances, the initial value is the
\f[CR]Intl.NumberFormat\f[R] constructor.
.TP
\f[B]Intl.NumberFormat.prototype[Symbol.toStringTag]\f[R]
The initial value of the \f[CR][Symbol.toStringTag]\f[R] property is the
string \f[CR]\[dq]Intl.NumberFormat\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]Intl.NumberFormat.prototype.format()\f[R]
Getter function that formats a number according to the locale and
formatting options of this \f[CR]Intl.NumberFormat\f[R] object.
.TP
\f[B]Intl.NumberFormat.prototype.formatRange()\f[R]
Getter function that formats a range of numbers according to the locale
and formatting options of the \f[CR]Intl.NumberFormat\f[R] object from
which the method is called.
.TP
\f[B]Intl.NumberFormat.prototype.formatRangeToParts()\f[R]
Returns an \f[CR]Array\f[R] of objects representing the range of number
strings in parts that can be used for custom locale\-aware formatting.
.TP
\f[B]Intl.NumberFormat.prototype.formatToParts()\f[R]
Returns an \f[CR]Array\f[R] of objects representing the number string in
parts that can be used for custom locale\-aware formatting.
.TP
\f[B]Intl.NumberFormat.prototype.resolvedOptions()\f[R]
Returns a new object with properties reflecting the locale and collation
options computed during initialization of the object.
.SH EXAMPLES
.SS Basic usage
In basic use without specifying a locale, a formatted string in the
default locale and with default options is returned.
.IP
.EX
\f[B]const\f[R] number = 3500;

console.log(\f[B]new\f[R] Intl.NumberFormat().format(number));
\f[I]// \[aq]3,500\[aq] if in US English locale\f[R]
.EE
.SS Using locales
This example shows some of the variations in localized number formats.
In order to get the format of the language used in the user interface of
your application, make sure to specify that language (and possibly some
fallback languages) using the \f[CR]locales\f[R] argument:
.IP
.EX
\f[B]const\f[R] number = 123456.789;

\f[I]// German uses comma as decimal separator and period for thousands\f[R]
console.log(\f[B]new\f[R] Intl.NumberFormat(\[dq]de\-DE\[dq]).format(number));
\f[I]// 123.456,789\f[R]

\f[I]// Arabic in most Arabic speaking countries uses real Arabic digits\f[R]
console.log(\f[B]new\f[R] Intl.NumberFormat(\[dq]ar\-EG\[dq]).format(number));
\f[I]// ١٢٣٤٥٦٫٧٨٩\f[R]

\f[I]// India uses thousands/lakh/crore separators\f[R]
console.log(\f[B]new\f[R] Intl.NumberFormat(\[dq]en\-IN\[dq]).format(number));
\f[I]// 1,23,456.789\f[R]

\f[I]// the nu extension key requests a numbering system, e.g. Chinese decimal\f[R]
console.log(\f[B]new\f[R] Intl.NumberFormat(\[dq]zh\-Hans\-CN\-u\-nu\-hanidec\[dq]).format(number));
\f[I]// 一二三,四五六.七八九\f[R]

\f[I]// when requesting a language that may not be supported, such as\f[R]
\f[I]// Balinese, include a fallback language, in this case Indonesian\f[R]
console.log(\f[B]new\f[R] Intl.NumberFormat([\[dq]ban\[dq], \[dq]id\[dq]]).format(number));
\f[I]// 123.456,789\f[R]
.EE
.SS Using options
The results can be customized using the \f[CR]options\f[R] argument:
.IP
.EX
\f[B]const\f[R] number = 123456.789;

\f[I]// request a currency format\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\[dq]de\-DE\[dq], { style: \[dq]currency\[dq], currency: \[dq]EUR\[dq] }).format(
    number,
  ),
);
\f[I]// 123.456,79 €\f[R]

\f[I]// the Japanese yen doesn\[aq]t use a minor unit\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\[dq]ja\-JP\[dq], { style: \[dq]currency\[dq], currency: \[dq]JPY\[dq] }).format(
    number,
  ),
);
\f[I]// ￥123,457\f[R]

\f[I]// limit to three significant digits\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\[dq]en\-IN\[dq], { maximumSignificantDigits: 3 }).format(
    number,
  ),
);
\f[I]// 1,23,000\f[R]

\f[I]// Formatting with units\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\[dq]pt\-PT\[dq], {
    style: \[dq]unit\[dq],
    unit: \[dq]kilometer\-per\-hour\[dq],
  }).format(50),
);
\f[I]// 50 km/h\f[R]

console.log(
  (16).toLocaleString(\[dq]en\-GB\[dq], {
    style: \[dq]unit\[dq],
    unit: \[dq]liter\[dq],
    unitDisplay: \[dq]long\[dq],
  }),
);
\f[I]// 16 litres\f[R]
.EE
.PP
For an exhaustive list of options, see the
\f[CR]Intl.NumberFormat()\f[R] constructor page.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://formatjs.github.io/docs/polyfills/intl-numberformat/
Polyfill of \f[CR]Intl.NumberFormat\f[R] in FormatJS
.UE \c
.IP \[bu] 2
\f[CR]Intl\f[R]
