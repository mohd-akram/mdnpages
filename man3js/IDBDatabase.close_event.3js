.\" Automatically generated by Pandoc 3.4
.\"
.TH "IDBDatabase.close_event" "JS" "September 2, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBDatabase.close_event \- IDBDatabase: close event
.SH SYNOPSIS
The \f[CR]close\f[R] event is fired on \f[CR]IDBDatabase\f[R] when the
database connection is unexpectedly closed.
This could happen, for example, if the underlying storage is removed or
if the user clears the database in the browser\[cq]s history
preferences.
.PP
Note that it is not fired if the database connection is closed normally
using \f[CR]IDBDatabase.close()\f[R].
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]close\[dq], (event) \f[B]=>\f[R] {});
onclose = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example opens a database and listens for the \f[CR]close\f[R]
event:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
};

dBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = dBOpenRequest.result;
  db.addEventListener(\[dq]close\[dq], () \f[B]=>\f[R] {
    console.log(\[dq]Database connection closed\[dq]);
  });
};
.EE
.PP
The same example, using the \f[CR]onclose\f[R] property instead of
\f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
};

dBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = dBOpenRequest.result;
  db.onclose = () \f[B]=>\f[R] {
    console.log(\[dq]Database connection closed\[dq]);
  };
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
