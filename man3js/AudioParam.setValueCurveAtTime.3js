.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "AUDIOPARAM.SETVALUECURVEATTIME" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioParam.setValueCurveAtTime \- AudioParam: setValueCurveAtTime()
method
.SH SYNOPSIS
The \f[B]\f[CB]setValueCurveAtTime()\f[B]\f[R] method of the
\f[CR]AudioParam\f[R] interface schedules the parameter\(cqs value to
change following a curve defined by a list of values.
.PP
The curve is a linear interpolation between the sequence of values
defined in an array of floating\-point values, which are scaled to fit
into the given interval starting at \f[CR]startTime\f[R] and a specific
duration.
.SH SYNTAX
.IP
.EX
setValueCurveAtTime(values, startTime, duration)
.EE
.SS Parameters
.TP
\f[B]values\f[R]
An array of floating\-point numbers representing the value curve the
\f[CR]AudioParam\f[R] will change through along the specified
\f[CR]duration\f[R].
Every value in the array must be a finite number; if any value is
\f[CR]NaN\f[R], \f[CR]Infinity\f[R], or \f[CR]\-Infinity\f[R], a
\f[CR]TypeError\f[R] exception is thrown.
.TP
\f[B]startTime\f[R]
A double representing the time (in seconds) after the
\f[CR]AudioContext\f[R] was first created that the change in value will
happen.
If this value is lower than \f[CR]AudioContext.currentTime\f[R], it is
clamped to \f[CR]currentTime\f[R].
.TP
\f[B]duration\f[R]
A double representing the total time (in seconds) over which the
parameter\(cqs \f[CR]value\f[R] will change following the specified
curve.
The specified values are spaced equally along this duration.
.SS Return value
A reference to this \f[CR]AudioParam\f[R] object.
Some older browser implementations of this interface return
\f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the specified array of \f[CR]values\f[R] has fewer than 2
items in it.
.TP
\f[B]RangeError\f[R]
Thrown if the specified \f[CR]startTime\f[R] is either negative or a
non\-finite value, or \f[CR]duration\f[R] is not a finite, strictly
positive number.
.TP
\f[B]TypeError\f[R]
Thrown if one or more of the values in the \f[CR]values\f[R] array is
non\-finite.
Non\-finite values are \f[CR]NaN\f[R], \f[CR]Infinity\f[R], and
\f[CR]\-Infinity\f[R].
.SH USAGE NOTES
When the parameter\(cqs value finishes following the curve, its value is
guaranteed to match the last value in the set of values specified in the
\f[CR]values\f[R] parameter.
.RS
.PP
\f[B]Note:\f[R] Some early implementations of the Web Audio API did not
ensure this to be the case, causing unexpected results.
.RE
.SH EXAMPLES
In this example, we have a media source with a single button (see the \c
.UR https://github.com/mdn/webaudio-examples/blob/main/audio-param/index.html
webaudio\-examples repo
.UE \c
\ for the source code, or \c
.UR https://mdn.github.io/webaudio-examples/audio-param/
view the example live
.UE \c
\&.)
When this button is pressed, \f[CR]setValueCurveAtTime()\f[R] is used to
change the gain value between the values contained in the waveArray
array:
.IP
.EX
\f[I]// create audio context\f[R]
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[I]// set basic variables for example\f[R]
\f[B]const\f[R] myAudio = document.querySelector(\(dqaudio\(dq);

\f[B]const\f[R] valueCurve = document.querySelector(\(dq.value\-curve\(dq);

\f[I]// Create a MediaElementAudioSourceNode\f[R]
\f[I]// Feed the HTMLMediaElement into it\f[R]
\f[B]const\f[R] source = audioCtx.createMediaElementSource(myAudio);

\f[I]// Create a gain node and set its gain value to 0.5\f[R]
\f[B]const\f[R] gainNode = audioCtx.createGain();
gainNode.gain.value = 0.5;
\f[B]const\f[R] currGain = gainNode.gain.value;

\f[I]// connect the AudioBufferSourceNode to the gainNode\f[R]
\f[I]// and the gainNode to the destination\f[R]
source.connect(gainNode);
gainNode.connect(audioCtx.destination);

\f[I]// set button to do something onclick\f[R]

\f[B]const\f[R] waveArray = \f[B]new\f[R] Float32Array(9);
waveArray[0] = 0.5;
waveArray[1] = 1;
waveArray[2] = 0.5;
waveArray[3] = 0;
waveArray[4] = 0.5;
waveArray[5] = 1;
waveArray[6] = 0.5;
waveArray[7] = 0;
waveArray[8] = 0.5;

valueCurve.onclick = () \f[B]=>\f[R] {
  gainNode.gain.setValueCurveAtTime(waveArray, audioCtx.currentTime, 2);
};
.EE
.PP
Versions before Chrome 46 use nearest neighbor instead of linear
interpolation.
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
