.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.LOST" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.lost \- GPUDevice: lost property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]lost\f[B]\f[R] read\-only property of the
\f[CR]GPUDevice\f[R] interface contains a \f[CR]Promise\f[R] that
remains pending throughout the device\(cqs lifetime and resolves with a
\f[CR]GPUDeviceLostInfo\f[R] object when the device is lost.
.PP
\f[CR]GPUAdapter.requestDevice()\f[R] will never return \f[CR]null\f[R],
and it will reject only if the request is invalid, i.e., it exceeds the
capabilities of the \f[CR]GPUAdapter\f[R].
If a valid device request can\(cqt be fulfilled for some reason however
it may resolve to a device that has already been lost.
Additionally, devices can be lost at any time after creation for a
variety of reasons (such as browser resource management or driver
updates), so it\(cqs a good idea to always handle lost devices
gracefully.
.PP
Many causes for lost devices are transient, so you should try getting a
new device once a previous one has been lost unless the loss was caused
by the application intentionally destroying the device (i.e., with
\f[CR]GPUDevice.destroy()\f[R]).
Note that any WebGPU resources created with a previous device (buffers,
textures, etc.)
will need to be re\-created with the new one.
.RS
.PP
\f[B]Note:\f[R] Also bear in mind that a \f[CR]GPUAdapter\f[R] may
become unavailable, e.g., if the physical GPU is unplugged from the
system or disabled to save power.
From then on, the adapter can no longer return valid devices, and will
always return already\-lost devices.
.RE
.SH VALUE
A promise that resolves with a \f[CR]GPUDeviceLostInfo\f[R] object when
the device is lost.
.SH EXAMPLES
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();
  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[I]// Create a GPUDevice\f[R]
  \f[B]let\f[R] device = \f[B]await\f[R] adapter.requestDevice(descriptor);

  \f[I]// Use lost to handle lost devices\f[R]
  device.lost.then((info) \f[B]=>\f[R] {
    console.error(\(gaWebGPU device was lost: ${info.message}\(ga);
    device = \f[B]null\f[R];

    \f[B]if\f[R] (info.reason !== \(dqdestroyed\(dq) {
      init();
    }
  });

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
