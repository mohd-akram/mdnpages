.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DOCUMENT.PARSEHTMLUNSAFE_STATIC" "3JS" "June 8, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.parseHTMLUnsafe_static \- Document: parseHTMLUnsafe() static
method
.SH SYNOPSIS
The \f[B]\f[CB]parseHTMLUnsafe()\f[B]\f[R] static method of the
\f[CR]Document\f[R] object is used to parse an HTML input, optionally
filtering unwanted HTML elements and attributes, in order to create a
new \f[CR]Document\f[R] instance.
.PP
Unlike with \f[CR]Document.parseHTML()\f[R], XSS\-unsafe HTML entities
are not guaranteed to be removed.
.SH SYNTAX
.IP
.EX
Document.parseHTMLUnsafe(input)
Document.parseHTMLUnsafe(input, options)
.EE
.SS Parameters
.TP
\f[B]input\f[R]
A string or \f[CR]TrustedHTML\f[R] instance defining HTML to be parsed.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An options object with the following optional parameters:
.RS
.TP
\f[B]sanitizer\f[R] \f[I](optional)\f[R]
A \f[CR]Sanitizer\f[R] or \f[CR]SanitizerConfig\f[R] object which
defines what elements of the input will be allowed or removed.
Note that generally a \f[CR]\(dqSanitizer\f[R] is expected than the to
be more efficient than a \f[CR]SanitizerConfig\f[R] if the configuration
is to reused.
If not specified, no sanitizer is used.
.RE
.SS Return value
A \f[CR]Document\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
This is thrown if:
.RS
.IP \(bu 2
\f[CR]html\f[R] is passed a string when Trusted Types are enforced by a
CSP and no default policy is defined.
.IP \(bu 2
\f[CR]options.sanitizer\f[R] is passed a:
.RS 2
.IP \(bu 2
value that is not a \f[CR]Sanitizer\f[R], \f[CR]SanitizerConfig\f[R], or
string.
.IP \(bu 2
non\-normalized \f[CR]SanitizerConfig\f[R] (one that includes both
\(lqallowed\(rq and \(lqremoved\(rq configuration settings).
.IP \(bu 2
string that does not have the value \f[CR]\(dqdefault\(dq\f[R].
.RE
.RE
.SH DESCRIPTION
The \f[B]\f[CB]parseHTMLUnsafe()\f[B]\f[R] static method can be used to
create a new \f[CR]Document\f[R] instance, optionally filter out
unwanted elements and attributes.
The resulting \f[CR]Document\f[R] will have a content type of
\(lqtext/html\(rq, a character set of UTF\-8, and a URL of
\(lqabout:blank\(rq.
.PP
The suffix \(lqUnsafe\(rq in the method name indicates that, while the
method does allow the input string to be filtered of unwanted HTML
entities, it does not enforce the sanitization or removal of potentially
unsafe XSS\-relevant input.
If no sanitizer configuration is specified in the
\f[CR]options.sanitizer\f[R] parameter, \f[CR]parseHTMLUnsafe()\f[R] is
used without any sanitization.
Note that \f[CR]<script>\f[R] elements are not evaluated during parsing.
.PP
The input HTML may include declarative shadow roots.
If the string of HTML defines more than one declarative shadow root in a
particular shadow host then only the first \f[CR]ShadowRoot\f[R] is
created \(em subsequent declarations are parsed as \f[CR]<template>\f[R]
elements within that shadow root.
.PP
\f[CR]parseHTMLUnsafe()\f[R] should be instead of
\f[CR]Document.parseHTML()\f[R] when parsing potentially unsafe strings
of HTML that for whatever reason need to contain XSS\-unsafe elements or
attributes.
If the HTML to be parsed doesn\(cqt need to contain unsafe HTML
entities, then you should use \f[CR]Document.parseHTML()\f[R].
.PP
Note that since this method does not necessarily sanitize input strings
of XSS\-unsafe entities, input strings should also be validated using
the Trusted Types API.
If the method is used with both a trusted types and a sanitizer, the
HTML input will be passed through the trusted type transformation
function before it is sanitized.
.SH SEE ALSO
.IP \(bu 2
\f[CR]Document.parseHTML()\f[R]
.IP \(bu 2
\f[CR]Element.setHTML()\f[R] and \f[CR]Element.setHTMLUnsafe()\f[R]
.IP \(bu 2
\f[CR]ShadowRoot.setHTML()\f[R] and
\f[CR]ShadowRoot.setHTMLUnsafe()\f[R]
.IP \(bu 2
\f[CR]DOMParser.parseFromString()\f[R] for parsing HTML or XML into a
DOM tree
.IP \(bu 2
HTML Sanitizer API
