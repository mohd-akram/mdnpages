.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Response.bytes" "JS" "October 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Response.bytes \- Response: bytes() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]bytes()\f[B]\f[R] method of the \f[CR]Response\f[R]
interface takes a \f[CR]Response\f[R] stream and reads it to completion.
It returns a promise that resolves with a \f[CR]Uint8Array\f[R].
.SH SYNTAX
.IP
.EX
bytes()
.EE
.SS Parameters
None.
.SS Return value
A promise that resolves with an \f[CR]Uint8Array\f[R].
.SS Exceptions
.TP
\f[B]DOMException\f[R] \f[B]AbortError\f[R]
The request was aborted.
.TP
\f[B]TypeError\f[R]
Thrown for one of the following reasons:
.RS
.IP \[bu] 2
The response body is disturbed or locked.
.IP \[bu] 2
There was an error decoding the body content (for example, because the
\f[CR]Content\-Encoding\f[R] header is incorrect).
.RE
.TP
\f[B]RangeError\f[R]
There was a problem creating the associated \f[CR]ArrayBuffer\f[R].
For example, if the data size is more than
\f[CR]Number.MAX_SAFE_INTEGER\f[R].
.SH EXAMPLES
.SS Fetching and decoding a file
The code below shows how you might fetch a text file, return the body as
a \f[CR]Uint8Array\f[R], and then decode this into a string.
.IP
.EX
\f[B]const\f[R] response = \f[B]await\f[R] fetch(\[dq]https://www.example.com/textfile.txt\[dq]);
\f[B]const\f[R] textFile = \f[B]await\f[R] response.bytes();
\f[B]const\f[R] string = \f[B]new\f[R] TextDecoder().decode(textFile);
console.log(string);
.EE
.SS Getting an image file signature
This example demonstrates how you can use \f[CR]bytes()\f[R] to read the
signature bytes of a number of image files, and identify the type.
.SS HTML
First we define a \f[CR]<select>\f[R] element for choosing the file
type, with corresponding values that indicate the specific file on
WikiMedia commons to fetch.
.IP
.EX
<\f[B]label\f[R] for=\[dq]file\-select\[dq]>Choose a file:</\f[B]label\f[R]>

<\f[B]select\f[R] name=\[dq]Files\[dq] id=\[dq]file\-select\[dq]>
  <\f[B]option\f[R] value=\[dq]\[dq]>\-\-Select an image type\-\-</\f[B]option\f[R]>
  <\f[B]option\f[R]
    value=\[dq]https://upload.wikimedia.org/wikipedia/commons/7/70/Example.png\[dq]>
    PNG
  </\f[B]option\f[R]>
  <\f[B]option\f[R]
    value=\[dq]https://upload.wikimedia.org/wikipedia/commons/a/a9/Example.jpg\[dq]>
    JPG
  </\f[B]option\f[R]>
  <\f[B]option\f[R]
    value=\[dq]https://upload.wikimedia.org/wikipedia/commons/8/8f/Example.gif\[dq]>
    GIF89a
  </\f[B]option\f[R]>
</\f[B]select\f[R]>
.EE
.SS JavaScript
The code first checks if the \f[CR]bytes()\f[R] method is supported.
If the method is supported it adds an event handler for the
\f[CR]change\f[R] event event on the \f[CR]<select>\f[R] element.
When the value changes, it passes the value of the selection (a URL for
an image file) to the \f[CR]checkSignature()\f[R] method defined below.
If the method is not supported it logs this information.
.IP
.EX
\f[B]if\f[R] (\[dq]bytes\[dq] \f[B]in\f[R] Response.prototype) {
  \f[B]const\f[R] selectFileElement = document.getElementById(\[dq]file\-select\[dq]);
  selectFileElement.addEventListener(\[dq]change\[dq], (event) \f[B]=>\f[R] {
    \f[B]try\f[R] {
      checkSignature(event.target.value);
    } \f[B]catch\f[R] (e) {
      log(e);
    }
  });
} \f[B]else\f[R] {
  log(\[dq]Response.bytes() not supported\[dq]);
}
.EE
.PP
The \f[CR]checkSignature()\f[R] method is defined below.
This fetches a file at the given \f[CR]url\f[R], and uses
\f[CR]response.bytes()\f[R] to get its contents as a byte array.
The initial bytes are then compared to the initial signature bytes of a
number of common file types.
The file name and the file type are then logged.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] checkSignature(url) {
  \f[B]if\f[R] (url == \[dq]\[dq]) \f[B]return\f[R];
  log(\[ga]File: ${url}\[ga]);
  \f[B]const\f[R] response = \f[B]await\f[R] fetch(url);
  \f[B]const\f[R] image = \f[B]await\f[R] response.bytes();

  \f[I]// File signatures from: https://en.wikipedia.org/wiki/List_of_file_signatures\f[R]
  \f[B]const\f[R] jpgSignature = [0xff, 0xd8, 0xff, 0xe0];
  \f[B]const\f[R] pngSignature = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];
  \f[B]const\f[R] gif89aSignature = [0x47, 0x49, 0x46, 0x38, 0x39, 0x61];

  \f[B]if\f[R] (
    image
      .slice(0, jpgSignature.length)
      .every((byte, index) \f[B]=>\f[R] byte === jpgSignature[index])
  ) {
    log(\[ga]JPG signature: FF D8 FF E0\[ga]);
  } \f[B]else\f[R] \f[B]if\f[R] (
    image
      .slice(0, pngSignature.length)
      .every((byte, index) \f[B]=>\f[R] byte === pngSignature[index])
  ) {
    log(\[ga]PNG signature: 89 50 4E 47 0D 0A 1A 0A\[ga]);
  } \f[B]else\f[R] \f[B]if\f[R] (
    image
      .slice(0, gif89aSignature.length)
      .every((byte, index) \f[B]=>\f[R] byte === gif89aSignature[index])
  ) {
    log(\[ga]GIF (GIF89a) signature: 47 49 46 38 39 61\[ga]);
  } \f[B]else\f[R] {
    log(\[dq]Unknown format\[dq]);
  }
}
.EE
.SS Result
Choose an image type using the selection list.
The log should then display the file name, along with the file type that
was determined from the file\[cq]s signature.
.SH SEE ALSO
.IP \[bu] 2
ServiceWorker API
.IP \[bu] 2
HTTP access control (CORS)
.IP \[bu] 2
HTTP
