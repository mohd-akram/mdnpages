.\" Automatically generated by Pandoc 3.4
.\"
.TH "Element.keydown_event" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.keydown_event \- Element: keydown event
.SH SYNOPSIS
The \f[B]\f[CB]keydown\f[B]\f[R] event is fired when a key is pressed.
.PP
Unlike the deprecated \f[CR]keypress\f[R] event, the \f[CR]keydown\f[R]
event is fired for all keys, regardless of whether they produce a
character value.
.PP
The \f[CR]keydown\f[R] and \f[CR]keyup\f[R] events provide a code
indicating which key is pressed, while \f[CR]keypress\f[R] indicates
which character was entered.
For example, a lowercase \[lq]a\[rq] will be reported as 65 by
\f[CR]keydown\f[R] and \f[CR]keyup\f[R], but as 97 by
\f[CR]keypress\f[R].
An uppercase \[lq]A\[rq] is reported as 65 by all events.
.PP
The event target of a key event is the currently focused element which
is processing the keyboard activity.
This includes: \f[CR]<input>\f[R], \f[CR]<textarea>\f[R], anything that
is \f[CR]contentEditable\f[R], and anything else that can be interacted
with the keyboard, such as \f[CR]<a>\f[R], \f[CR]<button>\f[R], and
\f[CR]<summary>\f[R].
If no suitable element is in focus, the event target will be the
\f[CR]<body>\f[R] or the root.
If not caught, the event bubbles up the DOM tree until reaching
\f[CR]Document\f[R].
.PP
The event target might change between different key events.
For example, the \f[CR]keydown\f[R] target for pressing the Tab key
would be different from the \f[CR]keyup\f[R] target, because the focus
has changed.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]keydown\[dq], (event) \f[B]=>\f[R] {});

onkeydown = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]KeyboardEvent\f[R].
Inherits from \f[CR]UIEvent\f[R] and \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]KeyboardEvent.altKey\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the Alt (Option or ⌥
on macOS) key was active when the key event was generated.
.TP
\f[B]KeyboardEvent.code\f[R] \f[I](read\-only)\f[R]
Returns a string with the code value of the physical key represented by
the event.
.RS
.RS
.PP
\f[B]Warning:\f[R] This ignores the user\[cq]s keyboard layout, so that
if the user presses the key at the \[lq]Y\[rq] position in a QWERTY
keyboard layout (near the middle of the row above the home row), this
will always return \[lq]KeyY\[rq], even if the user has a QWERTZ
keyboard (which would mean the user expects a \[lq]Z\[rq] and all the
other properties would indicate a \[lq]Z\[rq]) or a Dvorak keyboard
layout (where the user would expect an \[lq]F\[rq]).
If you want to display the correct keystrokes to the user, you can use
\f[CR]Keyboard.getLayoutMap()\f[R].
.RE
.RE
.TP
\f[B]KeyboardEvent.ctrlKey\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the Ctrl key was
active when the key event was generated.
.TP
\f[B]KeyboardEvent.isComposing\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the event is fired
between after \f[CR]compositionstart\f[R] and before
\f[CR]compositionend\f[R].
.TP
\f[B]KeyboardEvent.key\f[R] \f[I](read\-only)\f[R]
Returns a string representing the key value of the key represented by
the event.
.TP
\f[B]KeyboardEvent.location\f[R] \f[I](read\-only)\f[R]
Returns a number representing the location of the key on the keyboard or
other input device.
A list of the constants identifying the locations is shown in Keyboard
locations.
.TP
\f[B]KeyboardEvent.metaKey\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the Meta key (on Mac
keyboards, the ⌘ Command key; on Windows keyboards, the Windows key (⊞))
was active when the key event was generated.
.TP
\f[B]KeyboardEvent.repeat\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the key is being held
down such that it is automatically repeating.
.TP
\f[B]KeyboardEvent.shiftKey\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that is \f[CR]true\f[R] if the Shift key was
active when the key event was generated.
.SH EXAMPLES
.SS addEventListener keydown example
This example logs the \f[CR]KeyboardEvent.code\f[R] value whenever you
press down a key inside the \f[CR]<input>\f[R] element.
.IP
.EX
<\f[B]input\f[R] placeholder=\[dq]Click here, then press down a key.\[dq] size=\[dq]40\[dq] />
<\f[B]p\f[R] id=\[dq]log\[dq]></\f[B]p\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] input = document.querySelector(\[dq]input\[dq]);
\f[B]const\f[R] log = document.getElementById(\[dq]log\[dq]);

input.addEventListener(\[dq]keydown\[dq], logKey);

\f[B]function\f[R] logKey(e) {
  log.textContent += \[ga] ${e.code}\[ga];
}
.EE
.SS keydown events with IME
Since Firefox 65, the \f[CR]keydown\f[R] and \f[CR]keyup\f[R] events are
now fired during Input method editor composition, to improve
cross\-browser compatibility for CJKT users (\c
.UR https://bugzil.la/354358
Firefox bug 354358
.UE \c
).
To ignore all \f[CR]keydown\f[R] events that are part of composition, do
something like this (229 is a special value set for a \f[CR]keyCode\f[R]
relating to an event that has been processed by an IME):
.IP
.EX
eventTarget.addEventListener(\[dq]keydown\[dq], (event) \f[B]=>\f[R] {
  \f[B]if\f[R] (event.isComposing || event.keyCode === 229) {
    \f[B]return\f[R];
  }
  \f[I]// do something\f[R]
});
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]compositionstart\f[R] may fire \f[I]after\f[R]
\f[CR]keydown\f[R] when typing the first character that opens up the
IME, and \f[CR]compositionend\f[R] may fire \f[I]before\f[R]
\f[CR]keydown\f[R] when typing the last character that closes the IME.
In these cases, \f[CR]isComposing\f[R] is false even when the event is
part of composition.
However, \f[CR]KeyboardEvent.keyCode\f[R] is still \f[CR]229\f[R] in
these cases, so it\[cq]s still advisable to check \f[CR]keyCode\f[R] as
well, although it\[cq]s deprecated.
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]input\f[R]
.IP \[bu] 2
\f[CR]keypress\f[R]
.IP \[bu] 2
\f[CR]keyup\f[R]
