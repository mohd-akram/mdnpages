.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.SYMBOL.ITERATOR" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.Symbol.iterator \- String.prototypeSymbol.iterator
.SH SYNOPSIS
The \f[B]\f[CB][Symbol.iterator]()\f[B]\f[R] method of \f[CR]String\f[R]
values implements the iterable protocol and allows strings to be
consumed by most syntaxes expecting iterables, such as the spread syntax
and \f[CR]for...of\f[R] loops.
It returns a string iterator object that yields the Unicode code points
of the string value as individual strings.
.IP
.EX
\f[B]const\f[R] str = \(dqThe quick red fox jumped over the lazy dog\(aqs back.\(dq;

\f[B]const\f[R] iterator = str[Symbol.iterator]();
\f[B]let\f[R] theChar = iterator.next();

\f[B]while\f[R] (!theChar.done && theChar.value !== \(dq \(dq) {
  console.log(theChar.value);
  theChar = iterator.next();
  \f[I]// Expected output: \(dqT\(dq\f[R]
  \f[I]//                  \(dqh\(dq\f[R]
  \f[I]//                  \(dqe\(dq\f[R]
}
.EE
.SH SYNTAX
.IP
.EX
string[Symbol.iterator]()
.EE
.SS Parameters
None.
.SS Return value
A new iterable iterator object that yields the Unicode code points of
the string value as individual strings.
.SH DESCRIPTION
Strings are iterated by Unicode code points.
This means grapheme clusters will be split, but surrogate pairs will be
preserved.
.IP
.EX
\f[I]// \(dqBackhand Index Pointing Right: Dark Skin Tone\(dq\f[R]
[...\(dqüëâüèø\(dq]; \f[I]// [\(aqüëâ\(aq, \(aqüèø\(aq]\f[R]
\f[I]// splits into the basic \(dqBackhand Index Pointing Right\(dq emoji and\f[R]
\f[I]// the \(dqDark skin tone\(dq emoji\f[R]

\f[I]// \(dqFamily: Man, Boy\(dq\f[R]
[...\(dqüë®‚Äçüë¶\(dq]; \f[I]// [ \(aqüë®\(aq, \(aq‚Äç\(aq, \(aqüë¶\(aq ]\f[R]
\f[I]// splits into the \(dqMan\(dq and \(dqBoy\(dq emoji, joined by a ZWJ\f[R]
.EE
.SH EXAMPLES
.SS Iteration using for\&...of loop
Note that you seldom need to call this method directly.
The existence of the \f[CR][Symbol.iterator]()\f[R] method makes strings
iterable, and iterating syntaxes like the \f[CR]for...of\f[R] loop
automatically call this method to obtain the iterator to loop over.
.IP
.EX
\f[B]const\f[R] str = \(dqA\(rsuD835\(rsuDC68B\(rsuD835\(rsuDC69C\(rsuD835\(rsuDC6A\(dq;

\f[B]for\f[R] (\f[B]const\f[R] v \f[B]of\f[R] str) {
  console.log(v);
}
\f[I]// \(dqA\(dq\f[R]
\f[I]// \(dq\(rsuD835\(rsuDC68\(dq\f[R]
\f[I]// \(dqB\(dq\f[R]
\f[I]// \(dq\(rsuD835\(rsuDC69\(dq\f[R]
\f[I]// \(dqC\(dq\f[R]
\f[I]// \(dq\(rsuD835\(rsuDC6A\(dq\f[R]
.EE
.SS Manually hand\-rolling the iterator
You may still manually call the \f[CR]next()\f[R] method of the returned
iterator object to achieve maximum control over the iteration process.
.IP
.EX
\f[B]const\f[R] str = \(dqA\(rsuD835\(rsuDC68\(dq;

\f[B]const\f[R] strIter = str[Symbol.iterator]();

console.log(strIter.next().value); \f[I]// \(dqA\(dq\f[R]
console.log(strIter.next().value); \f[I]// \(dq\(rsuD835\(rsuDC68\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]String.prototype[Symbol.iterator]\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
Numbers and strings guide
.IP \(bu 2
\f[CR]Symbol.iterator\f[R]
.IP \(bu 2
Iteration protocols
