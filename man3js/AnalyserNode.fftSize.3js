.\" Automatically generated by Pandoc 3.4
.\"
.TH "AnalyserNode.fftSize" "JS" "July 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AnalyserNode.fftSize \- AnalyserNode: fftSize property
.SH SYNOPSIS
The \f[B]\f[CB]fftSize\f[B]\f[R] property of the \f[CR]AnalyserNode\f[R]
interface is an unsigned long value and represents the window size in
samples that is used when performing a \c
.UR https://en.wikipedia.org/wiki/Fast_Fourier_transform
Fast Fourier Transform
.UE \c
\ (FFT) to get frequency domain data.
.SH VALUE
An unsigned integer, representing the window size of the FFT, given in
number of samples.
A higher value will result in more details in the frequency domain but
fewer details in the amplitude domain.
.PP
Must be a power of 2 between 2\[ha]5 and 2\[ha]15, so one of:
\f[CR]32\f[R], \f[CR]64\f[R], \f[CR]128\f[R], \f[CR]256\f[R],
\f[CR]512\f[R], \f[CR]1024\f[R], \f[CR]2048\f[R], \f[CR]4096\f[R],
\f[CR]8192\f[R], \f[CR]16384\f[R], and \f[CR]32768\f[R].
Defaults to \f[CR]2048\f[R].
.SS Exceptions
.TP
\f[B]IndexSizeError\f[R] \f[B]DOMException\f[R]
Thrown if the value set is not a power of 2, or is outside the allowed
range.
.SH EXAMPLES
The following example shows basic usage of an \f[CR]AudioContext\f[R] to
create an \f[CR]AnalyserNode\f[R], then \f[CR]requestAnimationFrame\f[R]
and \f[CR]<canvas>\f[R] to collect time domain data repeatedly and draw
an \[lq]oscilloscope style\[rq] output of the current audio input.
For more complete applied examples/information, check out our \c
.UR https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR https://github.com/mdn/webaudio-examples/blob/main/voice-change-o-matic/scripts/app.js#L108-L193
app.js lines 108\[en]193
.UE \c
\ for relevant code).
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();
\f[B]const\f[R] analyser = audioCtx.createAnalyser();

\f[I]// \&...\f[R]

analyser.fftSize = 2048;
\f[B]const\f[R] bufferLength = analyser.frequencyBinCount;
\f[B]const\f[R] dataArray = \f[B]new\f[R] Uint8Array(bufferLength);
analyser.getByteTimeDomainData(dataArray);

\f[I]// draw an oscilloscope of the current audio source\f[R]

\f[B]function\f[R] draw() {
  drawVisual = requestAnimationFrame(draw);

  analyser.getByteTimeDomainData(dataArray);

  canvasCtx.fillStyle = \[dq]rgb(200 200 200)\[dq];
  canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

  canvasCtx.lineWidth = 2;
  canvasCtx.strokeStyle = \[dq]rgb(0 0 0)\[dq];

  canvasCtx.beginPath();

  \f[B]const\f[R] sliceWidth = (WIDTH * 1.0) / bufferLength;
  \f[B]let\f[R] x = 0;

  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < bufferLength; i++) {
    \f[B]const\f[R] v = dataArray[i] / 128.0;
    \f[B]const\f[R] y = (v * HEIGHT) / 2;

    \f[B]if\f[R] (i === 0) {
      canvasCtx.moveTo(x, y);
    } \f[B]else\f[R] {
      canvasCtx.lineTo(x, y);
    }

    x += sliceWidth;
  }

  canvasCtx.lineTo(canvas.width, canvas.height / 2);
  canvasCtx.stroke();
}

draw();
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
