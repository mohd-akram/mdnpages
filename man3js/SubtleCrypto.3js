.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "SubtleCrypto" "JS" "February 19, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SubtleCrypto \- SubtleCrypto
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]SubtleCrypto\f[B]\f[R] interface of the Web Crypto API
provides a number of low\-level cryptographic functions.
Access to the features of \f[CR]SubtleCrypto\f[R] is obtained through
the \f[CR]subtle\f[R] property of the \f[CR]Crypto\f[R] object you get
from the \f[CR]crypto\f[R] property.
.RS
.PP
\f[B]Warning:\f[R] This API provides a number of low\-level
cryptographic primitives.
It\[cq]s very easy to misuse them, and the pitfalls involved can be very
subtle.
.PP
Even assuming you use the basic cryptographic functions correctly,
secure key management and overall security system design are extremely
hard to get right, and are generally the domain of specialist security
experts.
.PP
Errors in security system design and implementation can make the
security of the system completely ineffective.
.PP
Please learn and experiment, but don\[cq]t guarantee or imply the
security of your work before an individual knowledgeable in this subject
matter thoroughly reviews it.
The \c
.UR https://www.crypto101.io/
Crypto 101 Course
.UE \c
\ can be a great place to start learning about the design and
implementation of secure systems.
.RE
.SH INSTANCE PROPERTIES
\f[I]This interface doesn\[cq]t inherit any properties, as it has no
parent interface.\f[R]
.SH INSTANCE METHODS
\f[I]This interface doesn\[cq]t inherit any methods, as it has no parent
interface.\f[R]
.TP
\f[B]SubtleCrypto.encrypt()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with the encrypted data
corresponding to the clear text, algorithm, and key given as parameters.
.TP
\f[B]SubtleCrypto.decrypt()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with the clear data
corresponding to the encrypted text, algorithm, and key given as
parameters.
.TP
\f[B]SubtleCrypto.sign()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with the signature
corresponding to the text, algorithm, and key given as parameters.
.TP
\f[B]SubtleCrypto.verify()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a boolean value
indicating if the signature given as a parameter matches the text,
algorithm, and key that are also given as parameters.
.TP
\f[B]SubtleCrypto.digest()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a digest generated from
the algorithm and text given as parameters.
.TP
\f[B]SubtleCrypto.generateKey()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a newly\-generated
\f[CR]CryptoKey\f[R], for symmetrical algorithms, or a
\f[CR]CryptoKeyPair\f[R], containing two newly generated keys, for
asymmetrical algorithms.
These will match the algorithm, usages, and extractability given as
parameters.
.TP
\f[B]SubtleCrypto.deriveKey()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a newly generated
\f[CR]CryptoKey\f[R] derived from the master key and specific algorithm
given as parameters.
.TP
\f[B]SubtleCrypto.deriveBits()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a newly generated buffer
of pseudo\-random bits derived from the master key and specific
algorithm given as parameters.
.TP
\f[B]SubtleCrypto.importKey()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a \f[CR]CryptoKey\f[R]
corresponding to the format, the algorithm, raw key data, usages, and
extractability given as parameters.
.TP
\f[B]SubtleCrypto.exportKey()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with the raw key data
containing the key in the requested format.
.TP
\f[B]SubtleCrypto.wrapKey()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a wrapped symmetric key
for usage (transfer and storage) in insecure environments.
The wrapped key matches the format specified in the given parameters,
and wrapping is done by the given wrapping key, using the specified
algorithm.
.TP
\f[B]SubtleCrypto.unwrapKey()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a \f[CR]CryptoKey\f[R]
corresponding to the wrapped key given in the parameter.
.SH USING SUBTLECRYPTO
We can split the functions implemented by this API into two groups:
cryptography functions and key management functions.
.SS Cryptography functions
These are the functions you can use to implement security features such
as privacy and authentication in a system.
The \f[CR]SubtleCrypto\f[R] API provides the following cryptography
functions:
.IP \[bu] 2
\f[CR]sign()\f[R] and \f[CR]verify()\f[R]: create and verify digital
signatures.
.IP \[bu] 2
\f[CR]encrypt()\f[R] and \f[CR]decrypt()\f[R]: encrypt and decrypt data.
.IP \[bu] 2
\f[CR]digest()\f[R]: create a fixed\-length, collision\-resistant digest
of some data.
.SS Key management functions
Except for \f[CR]digest()\f[R], all the cryptography functions in the
API use cryptographic keys.
In the \f[CR]SubtleCrypto\f[R] API a cryptographic key is represented
using a \f[CR]CryptoKey\f[R] object.
To perform operations like signing and encrypting, you pass a
\f[CR]CryptoKey\f[R] object into the \f[CR]sign()\f[R] or
\f[CR]encrypt()\f[R] function.
.SS Generating and deriving keys
The \f[CR]generateKey()\f[R] and \f[CR]deriveKey()\f[R] functions both
create a new \f[CR]CryptoKey\f[R] object.
.PP
The difference is that \f[CR]generateKey()\f[R] will generate a new
distinct key value each time you call it, while \f[CR]deriveKey()\f[R]
derives a key from some initial keying material.
If you provide the same keying material to two separate calls to
\f[CR]deriveKey()\f[R], you will get two \f[CR]CryptoKey\f[R] objects
that have the same underlying value.
This is useful if, for example, you want to derive an encryption key
from a password and later derive the same key from the same password to
decrypt the data.
.SS Importing and exporting keys
To make keys available outside your app, you need to export the key, and
that\[cq]s what \f[CR]exportKey()\f[R] is for.
You can choose one of a number of export formats.
.PP
The inverse of \f[CR]exportKey()\f[R] is \f[CR]importKey()\f[R].
You can import keys from other systems, and support for standard formats
like \c
.UR https://datatracker.ietf.org/doc/html/rfc5208
PKCS #8
.UE \c
\ and \c
.UR https://datatracker.ietf.org/doc/html/rfc7517
JSON Web Key
.UE \c
\ helps you do this.
The \f[CR]exportKey()\f[R] function exports the key in an unencrypted
format.
.PP
If the key is sensitive you should use \f[CR]wrapKey()\f[R], which
exports the key and then encrypts it using another key; the API calls a
\[lq]key\-wrapping key\[rq].
.PP
The inverse of \f[CR]wrapKey()\f[R] is \f[CR]unwrapKey()\f[R], which
decrypts then imports the key.
.SS Storing keys
\f[CR]CryptoKey\f[R] objects can be stored using the structured clone
algorithm, meaning that you can store and retrieve them using standard
web storage APIs.
The specification expects that most developers will use the IndexedDB
API to store \f[CR]CryptoKey\f[R] objects.
.SS Supported algorithms
The cryptographic functions provided by the Web Crypto API can be
performed by one or more different \f[I]cryptographic algorithms\f[R]:
the \f[CR]algorithm\f[R] argument to the function indicates which
algorithm to use.
Some algorithms need extra parameters: in these cases the
\f[CR]algorithm\f[R] argument is a dictionary object that includes the
extra parameters.
.PP
The table below summarizes which algorithms are suitable for which
cryptographic operations:
sign()verify()
encrypt()decrypt()
digest()
deriveBits()deriveKey()
wrapKey()unwrapKey()
RSASSA\-PKCS1\-v1_5
✓
RSA\-PSS
✓
ECDSA
✓
HMAC
✓
RSA\-OAEP
✓
✓
AES\-CTR
✓
✓
AES\-CBC
✓
✓
AES\-GCM
✓
✓
SHA\-1
✓
SHA\-256
✓
SHA\-384
✓
SHA\-512
✓
ECDH
✓
HKDF
✓
PBKDF2
✓
AES\-KW
✓
.SH SEE ALSO
.IP \[bu] 2
Web Crypto API
.IP \[bu] 2
Non\-cryptographic uses of SubtleCrypto
.IP \[bu] 2
Web security
.IP \[bu] 2
Privacy, permissions, and information security
.IP \[bu] 2
\f[CR]Crypto\f[R] and \f[CR]Crypto.subtle\f[R].
.IP \[bu] 2
\c
.UR https://www.crypto101.io/
Crypto 101
.UE \c
: an introductory course on cryptography.
