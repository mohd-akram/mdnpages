.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "AuthenticatorResponse.clientDataJSON" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AuthenticatorResponse.clientDataJSON \- AuthenticatorResponse:
clientDataJSON property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]clientDataJSON\f[B]\f[R] property of the
\f[CR]AuthenticatorResponse\f[R] interface stores a JSON string in an
\f[CR]ArrayBuffer\f[R], representing the client data that was passed to
\f[CR]navigator.credentials.create()\f[R] or
\f[CR]navigator.credentials.get()\f[R].
This property is only accessed on one of the child objects of
\f[CR]AuthenticatorResponse\f[R], specifically
\f[CR]AuthenticatorAttestationResponse\f[R] or
\f[CR]AuthenticatorAssertionResponse\f[R].
.SH VALUE
An \f[CR]ArrayBuffer\f[R].
.SH INSTANCE PROPERTIES
After the \f[CR]clientDataJSON\f[R] object is converted from an
\f[CR]ArrayBuffer\f[R] to a JavaScript object, it will have the
following properties:
.TP
\f[B]challenge\f[R]
The base64url encoded version of the cryptographic challenge sent from
the relying party\[cq]s server.
The original value are passed as the \f[CR]challenge\f[R] option in
\f[CR]CredentialsContainer.get()\f[R] or
\f[CR]CredentialsContainer.create()\f[R].
.TP
\f[B]crossOrigin\f[R] \f[I](optional)\f[R]
A boolean.
If set to \f[CR]true\f[R], it means that the calling context is an
\f[CR]<iframe>\f[R] that is not same origin with its ancestor frames.
.TP
\f[B]origin\f[R]
The fully qualified origin of the relying party which has been given by
the client/browser to the authenticator.
We should expect the \f[I]relying party\[cq]s id\f[R] to be a suffix of
this value.
.TP
\f[B]tokenBinding\f[R] \f[I](optional)\f[R] \f[I](deprecated)\f[R]
An object describing the state of \c
.UR https://datatracker.ietf.org/doc/html/rfc8471
the token binding protocol
.UE \c
\ for the communication with the relying party.
It has two properties:
.RS
.IP \[bu] 2
\f[CR]status\f[R]: A string which is either
\f[CR]\[dq]supported\[dq]\f[R] which indicates the client support token
binding but did not negotiate with the relying party or
\f[CR]\[dq]present\[dq]\f[R] when token binding was used already
.IP \[bu] 2
\f[CR]id\f[R]: A string which is the base64url encoding of the token
binding ID which was used for the communication.
.PP
Should this property be absent, it would indicate that the client does
not support token binding.
.RS
.PP
\f[B]Note:\f[R] \f[CR]tokenBinding\f[R] is deprecated as of Level 3 of
the spec, but the field is reserved so that it won\[cq]t be reused for a
different purpose.
.RE
.RE
.TP
\f[B]topOrigin\f[R] \f[I](optional)\f[R]
Contains the fully qualified top\-level origin of the relying party.
It is set only if it \f[CR]crossOrigin\f[R] is \f[CR]true\f[R].
.TP
\f[B]type\f[R]
A string which is either \f[CR]\[dq]webauthn.get\[dq]\f[R] when an
existing credential is retrieved or \f[CR]\[dq]webauthn.create\[dq]\f[R]
when a new credential is created.
.SH EXAMPLES
.IP
.EX
\f[B]function\f[R] arrayBufferToStr(buf) {
  \f[B]return\f[R] String.fromCharCode.apply(\f[B]null\f[R], \f[B]new\f[R] Uint8Array(buf));
}

\f[I]// pk is a PublicKeyCredential that is the result of a create() or get() Promise\f[R]
\f[B]const\f[R] clientDataStr = arrayBufferToStr(pk.response.clientDataJSON);
\f[B]const\f[R] clientDataObj = JSON.parse(clientDataStr);

console.log(clientDataObj.type); \f[I]// \[dq]webauthn.create\[dq] or \[dq]webauthn.get\[dq]\f[R]
console.log(clientDataObj.challenge); \f[I]// base64 encoded String containing the original challenge\f[R]
console.log(clientDataObj.origin); \f[I]// the window.origin\f[R]
.EE
