.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Atomics.isLockFree" "JS" "June 17, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Atomics.isLockFree \- Atomics.isLockFree()
.SH SYNOPSIS
The \f[B]\f[CB]Atomics.isLockFree()\f[B]\f[R] static method is used to
determine whether the \f[CR]Atomics\f[R] methods use locks or atomic
hardware operations when applied to typed arrays with the given element
byte size.
It is intended as an optimization primitive, so that high\-performance
algorithms can determine whether to use locks or atomic operations in
critical sections.
If an atomic primitive is not lock\-free, it is often more efficient for
an algorithm to provide its own locking.
.SH SYNTAX
.IP
.EX
Atomics.isLockFree(size)
.EE
.SS Parameters
.TP
\f[B]size\f[R]
The size in bytes to check.
.SS Return value
A \f[CR]true\f[R] or \f[CR]false\f[R] value indicating whether the
operation is lock free.
.IP \[bu] 2
Always \f[CR]true\f[R] if \f[CR]size\f[R] is 4, because all known
platforms support 4\-byte atomic operations.
.IP \[bu] 2
Always \f[CR]false\f[R] if the given size is not one of the
\f[CR]BYTES_PER_ELEMENT\f[R] property of integer TypedArray types.
.SH EXAMPLES
.SS Using isLockFree
.IP
.EX
Atomics.isLockFree(1); \f[I]// true (platform\-dependent)\f[R]
Atomics.isLockFree(2); \f[I]// true (platform\-dependent)\f[R]
Atomics.isLockFree(3); \f[I]// false\f[R]
Atomics.isLockFree(4); \f[I]// true\f[R]
Atomics.isLockFree(5); \f[I]// false\f[R]
Atomics.isLockFree(6); \f[I]// false\f[R]
Atomics.isLockFree(7); \f[I]// false\f[R]
Atomics.isLockFree(8); \f[I]// true (platform\-dependent)\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Atomics\f[R]
