.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "XSLTProcessor.clearParameters" "JS" "November 1, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XSLTProcessor.clearParameters \- XSLTProcessor: clearParameters() method
.SH SYNOPSIS
The \f[CR]clearParameters()\f[R] method of the \f[CR]XSLTProcessor\f[R]
interface removes all parameters (\f[CR]<xsl:param>\f[R]) and their
values from the stylesheet imported in the processor.
The \f[CR]XSLTProcessor\f[R] will then use the default values specified
in the XSLT stylesheet.
.SH SYNTAX
.IP
.EX
clearParameters()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Using clearParameters()
This example shows how \f[CR]clearParameters()\f[R] can be used to reset
all parameters back to their default values as specified in the XSLT
stylesheet.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]result\[dq]></\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] xmlString = \[ga]
<items>
  <item>Item 1</item>
  <item>Item 2</item>
  <item>Item 3</item>
</items>
\[ga];

\f[B]const\f[R] xsltString = \[ga]
<xsl:stylesheet version=\[dq]1.0\[dq] xmlns:xsl=\[dq]http://www.w3.org/1999/XSL/Transform\[dq]>
  <xsl:param name=\[dq]showItems\[dq] select=\[dq]\[aq]yes\[aq]\[dq]/>
  <xsl:template match=\[dq]/\[dq]>
    <!\-\- If showItems is \[aq]yes\[aq], display the list of items \-\->
    <xsl:if test=\[dq]$showItems = \[aq]yes\[aq]\[dq]>
      <ul>
        <xsl:for\-each select=\[dq]items/item\[dq]>
          <li><xsl:value\-of select=\[dq].\[dq]/></li>
        </xsl:for\-each>
      </ul>
    </xsl:if>
    <!\-\- If showItems is \[aq]no\[aq], display a message \-\->
    <xsl:if test=\[dq]$showItems = \[aq]no\[aq]\[dq]>
      <div>No content to show</div>
    </xsl:if>
  </xsl:template>
</xsl:stylesheet>
\[ga];

\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
\f[B]const\f[R] xmlDoc = parser.parseFromString(xmlString, \[dq]application/xml\[dq]);
\f[B]const\f[R] xsltDoc = parser.parseFromString(xsltString, \[dq]application/xml\[dq]);

\f[B]const\f[R] xsltProcessor = \f[B]new\f[R] XSLTProcessor();
xsltProcessor.importStylesheet(xsltDoc);

\f[I]// Set the \[aq]showItems\[aq] parameter to \[aq]no\[aq] and perform the first transformation\f[R]
xsltProcessor.setParameter(\f[B]null\f[R], \[dq]showItems\[dq], \[dq]no\[dq]);
\f[B]let\f[R] resultFragment = xsltProcessor.transformToFragment(xmlDoc, document);
document.getElementById(\[dq]result\[dq]).appendChild(resultFragment);

\f[I]// Add a horizontal rule to separate the results\f[R]
document.getElementById(\[dq]result\[dq]).appendChild(document.createElement(\[dq]hr\[dq]));

\f[I]// Clear all parameters, resetting \[aq]showItems\[aq] to its default value (\[aq]yes\[aq])\f[R]
xsltProcessor.clearParameters();
resultFragment = xsltProcessor.transformToFragment(xmlDoc, document);
document.getElementById(\[dq]result\[dq]).appendChild(resultFragment);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]XSLTProcessor.getParameter()\f[R]
.IP \[bu] 2
\f[CR]XSLTProcessor.setParameter()\f[R]
.IP \[bu] 2
\f[CR]XSLTProcessor.removeParameter()\f[R]
.IP \[bu] 2
\f[CR]XSLTProcessor.reset()\f[R]
