.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Element.animationcancel_event" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.animationcancel_event \- Element: animationcancel event
.SH SYNOPSIS
The \f[B]\f[CB]animationcancel\f[B]\f[R] event is fired when a CSS
Animation unexpectedly aborts.
In other words, any time it stops running without sending an
\f[CR]animationend\f[R] event.
This might happen when the \f[CR]animation\-name\f[R] is changed such
that the animation is removed, or when the animating node is hidden
using CSS.
Therefore, either directly or because any of its containing nodes are
hidden.
.PP
An event handler for this event can be added by setting the
\f[CR]onanimationcancel\f[R] property, or using
\f[CR]addEventListener()\f[R].
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]animationcancel\[dq], (event) \f[B]=>\f[R] {});

onanimationcancel = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
An \f[CR]AnimationEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent \f[CI]Event\f[I]\f[R].
.TP
\f[B]AnimationEvent.animationName\f[R] \f[I](read\-only)\f[R]
A string containing the value of the \f[CR]animation\-name\f[R] that
generated the animation.
.TP
\f[B]AnimationEvent.elapsedTime\f[R] \f[I](read\-only)\f[R]
A \f[CR]float\f[R] giving the amount of time the animation has been
running, in seconds, when this event fired, excluding any time the
animation was paused.
For an \f[CR]animationstart\f[R] event, \f[CR]elapsedTime\f[R] is
\f[CR]0.0\f[R] unless there was a negative value for
\f[CR]animation\-delay\f[R], in which case the event will be fired with
\f[CR]elapsedTime\f[R] containing \f[CR](\-1 * delay)\f[R].
.TP
\f[B]AnimationEvent.pseudoElement\f[R] \f[I](read\-only)\f[R]
A string, starting with \f[CR]\[aq]::\[aq]\f[R], containing the name of
the pseudo\-element the animation runs on.
If the animation doesn\[cq]t run on a pseudo\-element but on the
element, an empty string: \f[CR]\[aq]\[aq]\f[R].
.SH EXAMPLES
This code gets an element that\[cq]s currently being animated and adds a
listener to the \f[CR]animationcancel\f[R] event.
It then sets the element\[cq]s \f[CR]display\f[R] property to
\f[CR]none\f[R], which will trigger the \f[CR]animationcancel\f[R]
event.
.IP
.EX
\f[B]const\f[R] animated = document.querySelector(\[dq].animated\[dq]);

animated.addEventListener(\[dq]animationcancel\[dq], () \f[B]=>\f[R] {
  console.log(\[dq]Animation canceled\[dq]);
});

animated.style.display = \[dq]none\[dq];
.EE
.PP
The same, but using the \f[CR]onanimationcancel\f[R] property instead of
\f[CR]addEventListener()\f[R]:
.IP
.EX
\f[B]const\f[R] animated = document.querySelector(\[dq].animated\[dq]);
animated.onanimationcancel = () \f[B]=>\f[R] {
  console.log(\[dq]Animation canceled\[dq]);
};

animated.style.display = \[dq]none\[dq];
.EE
.SS Live example
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\[dq]animation\-example\[dq]>
  <\f[B]div\f[R] class=\[dq]container\[dq]>
    <\f[B]p\f[R] class=\[dq]animation\[dq]>You chose a cold night to visit our planet.</\f[B]p\f[R]>
  </\f[B]div\f[R]>
  <\f[B]button\f[R] class=\[dq]activate\[dq] type=\[dq]button\[dq]>Activate animation</\f[B]button\f[R]>
  <\f[B]div\f[R] class=\[dq]event\-log\[dq]></\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
\&.container {
  \f[B]height\f[R]: 3rem;
}

\&.event\-log {
  \f[B]width\f[R]: 25rem;
  \f[B]height\f[R]: 2rem;
  \f[B]border\f[R]: 1px solid black;
  \f[B]margin\f[R]: 0.2rem;
  \f[B]padding\f[R]: 0.2rem;
}

\&.animation.active {
  \f[B]animation\-duration\f[R]: 2s;
  \f[B]animation\-name\f[R]: slide\-in;
  \f[B]animation\-iteration\-count\f[R]: 2;
}

\f[B]\[at]keyframes\f[R] slide\-in {
  from {
    \f[B]transform\f[R]: translateX(100%) scaleX(3);
  }
  to {
    \f[B]transform\f[R]: translateX(0) scaleX(1);
  }
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] animation = document.querySelector(\[dq]p.animation\[dq]);
\f[B]const\f[R] animationEventLog = document.querySelector(
  \[dq].animation\-example>.event\-log\[dq],
);
\f[B]const\f[R] applyAnimation = document.querySelector(
  \[dq].animation\-example>button.activate\[dq],
);
\f[B]let\f[R] iterationCount = 0;

animation.addEventListener(\[dq]animationstart\[dq], () \f[B]=>\f[R] {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation started\[aq] \[ga];
});

animation.addEventListener(\[dq]animationiteration\[dq], () \f[B]=>\f[R] {
  iterationCount++;
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation iterations: ${iterationCount}\[aq] \[ga];
});

animation.addEventListener(\[dq]animationend\[dq], () \f[B]=>\f[R] {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation ended\[aq]\[ga];
  animation.classList.remove(\[dq]active\[dq]);
  applyAnimation.textContent = \[dq]Activate animation\[dq];
});

animation.addEventListener(\[dq]animationcancel\[dq], () \f[B]=>\f[R] {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation canceled\[aq]\[ga];
});

applyAnimation.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  animation.classList.toggle(\[dq]active\[dq]);
  animationEventLog.textContent = \[dq]\[dq];
  iterationCount = 0;
  \f[B]const\f[R] active = animation.classList.contains(\[dq]active\[dq]);
  applyAnimation.textContent = active
    ? \[dq]Cancel animation\[dq]
    : \[dq]Activate animation\[dq];
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
CSS Animations
.IP \[bu] 2
Using CSS Animations
.IP \[bu] 2
\f[CR]AnimationEvent\f[R]
.IP \[bu] 2
Related events: \f[CR]animationstart\f[R], \f[CR]animationend\f[R],
\f[CR]animationiteration\f[R]
