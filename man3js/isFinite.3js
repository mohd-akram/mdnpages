.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ISFINITE" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
isFinite \- isFinite()
.SH SYNOPSIS
The \f[B]\f[CB]isFinite()\f[B]\f[R] function determines whether a value
is finite, first converting the value to a number if necessary.
A finite number is one that\(cqs not \f[CR]NaN\f[R] or
±\f[CR]Infinity\f[R].
Because coercion inside the \f[CR]isFinite()\f[R] function can be
surprising, you may prefer to use \f[CR]Number.isFinite()\f[R].
.IP
.EX
\f[B]function\f[R] div(x) {
  \f[B]if\f[R] (isFinite(1000 / x)) {
    \f[B]return\f[R] \(dqNumber is NOT Infinity.\(dq;
  }
  \f[B]return\f[R] \(dqNumber is Infinity!\(dq;
}

console.log(div(0));
\f[I]// Expected output: \(dqNumber is Infinity!\(dq\(dq\f[R]

console.log(div(1));
\f[I]// Expected output: \(dqNumber is NOT Infinity.\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
isFinite(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
The value to be tested.
.SS Return value
\f[CR]false\f[R] if the given value is \f[CR]NaN\f[R],
\f[CR]Infinity\f[R], or \f[CR]\-Infinity\f[R] after being converted to a
number; otherwise, \f[CR]true\f[R].
.SH DESCRIPTION
\f[CR]isFinite()\f[R] is a function property of the global object.
.PP
When the argument to the \f[CR]isFinite()\f[R] function is not of type
Number, the value is first coerced to a number, and the resulting value
is then compared against \f[CR]NaN\f[R] and ±Infinity.
This is as confusing as the behavior of \f[CR]isNaN\f[R] \(em for
example, \f[CR]isFinite(\(dq1\(dq)\f[R] is \f[CR]true\f[R].
.PP
\f[CR]Number.isFinite()\f[R] is a more reliable way to test whether a
value is a finite number value, because it returns \f[CR]false\f[R] for
any non\-number input.
.SH EXAMPLES
.SS Using isFinite()
.IP
.EX
isFinite(\f[B]Infinity\f[R]); \f[I]// false\f[R]
isFinite(\f[B]NaN\f[R]); \f[I]// false\f[R]
isFinite(\-\f[B]Infinity\f[R]); \f[I]// false\f[R]

isFinite(0); \f[I]// true\f[R]
isFinite(2e64); \f[I]// true\f[R]
isFinite(910); \f[I]// true\f[R]

\f[I]// Would\(aqve been false with the more robust Number.isFinite():\f[R]
isFinite(\f[B]null\f[R]); \f[I]// true\f[R]
isFinite(\(dq0\(dq); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Number.isFinite()\f[R]
.IP \(bu 2
\f[CR]Number.NaN\f[R]
.IP \(bu 2
\f[CR]Number.POSITIVE_INFINITY\f[R]
.IP \(bu 2
\f[CR]Number.NEGATIVE_INFINITY\f[R]
