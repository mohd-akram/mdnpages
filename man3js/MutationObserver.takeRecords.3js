.\" Automatically generated by Pandoc 3.4
.\"
.TH "MutationObserver.takeRecords" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationObserver.takeRecords \- MutationObserver: takeRecords() method
.SH SYNOPSIS
The \f[CR]MutationObserver\f[R] method
\f[B]\f[CB]takeRecords()\f[B]\f[R] returns a list of all matching DOM
changes that have been detected but not yet processed by the
observer\[cq]s callback function, leaving the mutation queue empty.
.PP
The most common use case for this is to immediately fetch all pending
mutation records immediately prior to disconnecting the observer, so
that any pending mutations can be processed when shutting down the
observer.
.SH SYNTAX
.IP
.EX
takeRecords()
.EE
.SS Parameters
None.
.SS Return value
An array of \f[CR]MutationRecord\f[R] objects, each describing one
change applied to the observed portion of the document\[cq]s DOM tree.
.RS
.PP
\f[B]Note:\f[R] The queue of mutations which have occurred, but not been
delivered to the observer\[cq]s callback is left empty after calling
\f[CR]takeRecords()\f[R].
.RE
.SH EXAMPLES
In this example, we demonstrate how to handle any undelivered
\f[CR]MutationRecord\f[R]s by calling \f[CR]takeRecords()\f[R] just
before disconnecting the observer.
.IP
.EX
\f[B]const\f[R] targetNode = document.querySelector(\[dq]#someElement\[dq]);
\f[B]const\f[R] observerOptions = {
  childList: \f[B]true\f[R],
  attributes: \f[B]true\f[R],
};

\f[B]const\f[R] observer = \f[B]new\f[R] MutationObserver(callback);
observer.observe(targetNode, observerOptions);

\f[I]/* later, when it\[aq]s time to stop observing\&... */\f[R]

\f[I]/* handle any still\-pending mutations */\f[R]

\f[B]let\f[R] mutations = observer.takeRecords();

observer.disconnect();

\f[B]if\f[R] (mutations.length > 0) {
  callback(mutations);
}
.EE
.PP
The code fetches any unprocessed mutation records, then invokes the
callback with the records so that they can be processed.
This is done immediately prior to calling \f[CR]disconnect()\f[R] to
stop observing the DOM.
