.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "WebSocket.WebSocket" "JS" "February 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebSocket.WebSocket \- WebSocket: WebSocket() constructor
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebSocket()\f[B]\f[R] constructor returns a new
\f[CR]WebSocket\f[R] object and immediately attempts to establish a
connection to the specified WebSocket URL.
.SH SYNTAX
.IP
.EX
new WebSocket(url)
new WebSocket(url, protocols)
.EE
.SS Parameters
.TP
\f[B]url\f[R]
The URL of the target WebSocket server to connect to.
The URL must use one of the following schemes: \f[CR]ws\f[R],
\f[CR]wss\f[R], \f[CR]http\f[R], or \f[CR]https\f[R], and cannot include
a URL fragment.
If a relative URL is provided, it is relative to the base URL of the
calling script.
.TP
\f[B]protocols\f[R] \f[I](optional)\f[R]
A single string or an array of strings representing the sub\-protocol(s)
that the client would like to use, in order of preference.
If it is omitted, an empty array is used by default,
i.e.\ \f[CR][]\f[R].
.RS
.PP
A single server can implement multiple WebSocket sub\-protocols, and
handle different types of interactions depending on the specified value.
Note however that only one sub\-protocol can be selected per connection.
.PP
The allowed values are those that can be specified in the
\f[CR]Sec\-WebSocket\-Protocol\f[R] HTTP header.
These are values selected from the \c
.UR https://www.iana.org/assignments/websocket/websocket.xml#subprotocol-name
IANA WebSocket Subprotocol Name Registry
.UE \c
, such as \f[CR]soap\f[R], \f[CR]wamp\f[R], \f[CR]ship\f[R] and so on,
or may be a custom name jointly understood by the client and the server.
.RS
.PP
\f[B]Note:\f[R] The connection is not established until the
sub\-protocol is negotiated with the server.
The selected protocol can then be read from
\f[CR]WebSocket.protocol\f[R]: it will be the empty string if a
connection cannot be established.
.RE
.RE
.SS Exceptions
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if:
.RS
.IP \[bu] 2
parsing of \f[CR]url\f[R] fails
.IP \[bu] 2
\f[CR]url\f[R] has a scheme other than \f[CR]ws\f[R], \f[CR]wss\f[R],
\f[CR]http\f[R], or \f[CR]https\f[R]
.IP \[bu] 2
\f[CR]url\f[R] has a fragment
.IP \[bu] 2
any of the values in \f[CR]protocols\f[R] occur more than once, or
otherwise fail to match the requirements for elements that comprise the
value of \f[CR]Sec\-WebSocket\-Protocol\f[R] fields as defined by the
WebSocket Protocol specification
.RE
.SH EXAMPLES
The examples below show how you might connect to a \f[CR]WebSocket\f[R].
.PP
The code below shows how we can connect to a socket using an URL with
the \f[CR]wss\f[R] schema:
.IP
.EX
\f[B]const\f[R] wssWebSocket = \f[B]new\f[R] WebSocket(\[aq]wss://websocket.example.org\[aq]);
console.log(wssWebSocket.url); \f[I]// \[aq]wss://websocket.example.org\[aq]\f[R]
\&... \f[I]// Do something with socket\f[R]
wssWebSocket.close();
.EE
.PP
The code for connecting to an HTTPS URL is nearly the same.
Under the hood the browser resolves this to a \[lq]WSS\[rq] connection,
so the \f[CR]WebSocket.url\f[R] will have the schema \[lq]wss:\[rq].
.IP
.EX
\f[B]const\f[R] httpsWebSocket = \f[B]new\f[R] WebSocket(\[aq]https://websocket.example.org\[aq]);
console.log(httpsWebSocket.url); \f[I]// \[aq]wss://websocket.example.org\[aq]\f[R]
\&... \f[I]// Do something with socket\f[R]
httpsWebSocket.close();
.EE
.PP
We can also resolve relative URLs.
The absolute URL will depend on the base URL of the context in which it
is called.
.IP
.EX
relativeWebSocket = \f[B]new\f[R] WebSocket(\[aq]/local/url\[aq]);
\&... \f[I]// Do something with socket\f[R]
relativeWebSocket.close();
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://www.rfc-editor.org/rfc/rfc6455.html
RFC 6455
.UE \c
\ (the WebSocket Protocol specification)
