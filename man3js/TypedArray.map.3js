.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "TYPEDARRAY.MAP" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.map \- TypedArray.prototype.map()
.SH SYNOPSIS
The \f[B]\f[CB]map()\f[B]\f[R] method of \f[CR]TypedArray\f[R] instances
creates a new typed array populated with the results of calling a
provided function on every element in the calling typed array.
This method has the same algorithm as \f[CR]Array.prototype.map()\f[R].
.IP
.EX
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array([25, 36, 49]);
\f[B]const\f[R] roots = uint8.map(Math.sqrt);

console.log(roots);
\f[I]// Expected output: Uint8Array [5, 6, 7]\f[R]
.EE
.SH SYNTAX
.IP
.EX
map(callbackFn)
map(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the typed array.
Its return value is added as a single element in the new typed array.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the typed array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the typed array.
.TP
\f[B]array\f[R]
The typed array \f[CR]map()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
A new typed array with each element being the result of the callback
function.
.SH DESCRIPTION
See \f[CR]Array.prototype.map()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Mapping a typed array to a typed array of square roots
The following code takes a typed array and creates a new typed array
containing the square roots of the numbers in the first typed array.
.IP
.EX
\f[B]const\f[R] numbers = \f[B]new\f[R] Uint8Array([1, 4, 9]);
\f[B]const\f[R] roots = numbers.map(Math.sqrt);
\f[I]// roots is now: Uint8Array [1, 2, 3],\f[R]
\f[I]// numbers is still Uint8Array [1, 4, 9]\f[R]
.EE
.SS Mapping a typed array of numbers using a function containing an argument
The following code shows how \f[CR]map()\f[R] works when a function
requiring one argument is used with it.
The argument will automatically be assigned to each element of the typed
array as \f[CR]map()\f[R] loops through the original typed array.
.IP
.EX
\f[B]const\f[R] numbers = \f[B]new\f[R] Uint8Array([1, 4, 9]);
\f[B]const\f[R] doubles = numbers.map((num) \f[B]=>\f[R] num * 2);
\f[I]// doubles is now Uint8Array [2, 8, 18]\f[R]
\f[I]// numbers is still Uint8Array [1, 4, 9]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]TypedArray.prototype.map\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
JavaScript typed arrays guide
.IP \(bu 2
\f[CR]TypedArray\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.forEach()\f[R]
.IP \(bu 2
\f[CR]TypedArray.from()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.map()\f[R]
.IP \(bu 2
\f[CR]Map\f[R]
