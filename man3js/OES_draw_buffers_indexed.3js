.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "OES_draw_buffers_indexed" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OES_draw_buffers_indexed \- OES_draw_buffers_indexed
.SH SYNOPSIS
The \f[B]\f[CB]OES_draw_buffers_indexed\f[B]\f[R] extension is part of
the WebGL API and enables the use of different blend options when
writing to multiple color buffers simultaneously.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] This extension is only available to WebGL2 contexts.
.RE
.SH INSTANCE METHODS
.TP
\f[B]OES_draw_buffers_indexed.blendEquationiOES()\f[R]
Sets both the RGB and alpha blend equations for a particular draw
buffer.
.TP
\f[B]OES_draw_buffers_indexed.blendEquationSeparateiOES()\f[R]
Sets the RGB and alpha blend equations separately for a particular draw
buffer.
.TP
\f[B]OES_draw_buffers_indexed.blendFunciOES()\f[R]
Defines which function is used when blending pixels for a particular
draw buffer.
.TP
\f[B]OES_draw_buffers_indexed.blendFuncSeparateiOES()\f[R]
Defines which function is used when blending pixels for RGB and alpha
components separately for a particular draw buffer.
.TP
\f[B]OES_draw_buffers_indexed.colorMaskiOES()\f[R]
Sets which color components to enable or to disable when drawing or
rendering for a particular draw buffer.
.TP
\f[B]OES_draw_buffers_indexed.disableiOES()\f[R]
Disables blending for a particular draw buffer.
.TP
\f[B]OES_draw_buffers_indexed.enableiOES()\f[R]
Enables blending for a particular draw buffer.
.SH EXAMPLES
.SS Using the \f[CR]OES_draw_buffers_indexed\f[R] extension
Enable the extension with a call to
\f[CR]WebGLRenderingContext.getExtension()\f[R].
.IP
.EX
\f[B]const\f[R] ext = gl.getExtension(\[dq]OES_draw_buffers_indexed\[dq]);
.EE
.PP
You can now enable blending, set blending equation, blending function,
and color mask for a particular draw buffer.
.IP
.EX
\f[I]// For gl.DRAW_BUFFER0\f[R]
ext.enableiOES(gl.BLEND, 0);
ext.blendEquationiOES(0, gl.FUNC_ADD);
ext.blendFunciOES(0, gl.ONE, gl.ONE);
ext.colorMaskiOES(0, 1, 0, 0, 0);

\f[I]// For gl.DRAW_BUFFER1\f[R]
ext.enableiOES(gl.BLEND, 1);
ext.blendEquationSeparateiOES(1, gl.FUNC_ADD, gl.FUNC_SUBTRACT);
ext.blendFuncSeparateiOES(
  1,
  gl.SRC_ALPHA,
  gl.ONE_MINUS_SRC_ALPHA,
  gl.ZERO,
  gl.ZERO,
);
ext.colorMaskiOES(1, 0, 1, 0, 0);
.EE
.PP
To retrieve settings for a particular draw buffer, use
\f[CR]WebGL2RenderingContext.getIndexedParameter()\f[R].
.IP
.EX
\f[I]// For gl.DRAW_BUFFER0\f[R]
gl.getIndexedParameter(gl.BLEND_EQUATION_RGB, 0);
gl.getIndexedParameter(gl.BLEND_EQUATION_ALPHA, 0);
gl.getIndexedParameter(gl.BLEND_SRC_RGB, 0);
gl.getIndexedParameter(gl.BLEND_SRC_ALPHA, 0);
gl.getIndexedParameter(gl.BLEND_DST_RGB, 0);
gl.getIndexedParameter(gl.BLEND_DST_ALPHA, 0);
gl.getIndexedParameter(gl.COLOR_WRITEMASK, 0);

\f[I]// For gl.DRAW_BUFFER1\f[R]
gl.getIndexedParameter(gl.BLEND_EQUATION_RGB, 1);
gl.getIndexedParameter(gl.BLEND_EQUATION_ALPHA, 1);
gl.getIndexedParameter(gl.BLEND_SRC_RGB, 1);
gl.getIndexedParameter(gl.BLEND_SRC_ALPHA, 1);
gl.getIndexedParameter(gl.BLEND_DST_RGB, 1);
gl.getIndexedParameter(gl.BLEND_DST_ALPHA, 1);
gl.getIndexedParameter(gl.COLOR_WRITEMASK, 1);
.EE
.PP
You can use \f[CR]WebGLRenderingContext.getParameter()\f[R] to see how
many draw buffers are available.
.IP
.EX
\f[B]const\f[R] maxDrawBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);
.EE
