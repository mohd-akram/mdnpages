.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "PerformanceResourceTiming.encodedBodySize" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.encodedBodySize \- PerformanceResourceTiming:
encodedBodySize property
.SH SYNOPSIS
The \f[B]\f[CB]encodedBodySize\f[B]\f[R] read\-only property represents
the size (in octets) received from the fetch (HTTP or cache) of the
payload body before removing any applied content encodings (like gzip or
Brotli).
If the resource is retrieved from an application cache or a local
resource, it must return the size of the payload body before removing
any applied content encoding.
.SH VALUE
The \f[CR]encodedBodySize\f[R] property can have the following values:
.IP \[bu] 2
A number representing the size (in octets) received from the fetch (HTTP
or cache), of the payload body, before removing any applied content
encoding.
.IP \[bu] 2
\f[CR]0\f[R] if the resource is a cross\-origin request and no
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header is used.
.SH EXAMPLES
.SS Checking if content was compressed
If the \f[CR]encodedBodySize\f[R] and \f[CR]decodedBodySize\f[R]
properties are non\-null and differ, the content was compressed (for
example, gzip or Brotli).
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]const\f[R] uncompressed =
      entry.decodedBodySize && entry.decodedBodySize === entry.encodedBodySize;
    \f[B]if\f[R] (uncompressed) {
      console.log(\[ga]${entry.name} was not compressed!\[ga]);
    }
  });
});

observer.observe({ type: \[dq]resource\[dq], buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) \f[B]=>\f[R] {
  \f[B]const\f[R] uncompressed =
    entry.decodedBodySize && entry.decodedBodySize === entry.encodedBodySize;
  \f[B]if\f[R] (uncompressed) {
    console.log(\[ga]${entry.name} was not compressed!\[ga]);
  }
});
.EE
.SS Cross\-origin content size information
If the value of the \f[CR]encodedBodySize\f[R] property is \f[CR]0\f[R],
the resource might be a cross\-origin request.
To expose cross\-origin content size information, the
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header needs to be set.
.PP
For example, to allow \f[CR]https://developer.mozilla.org\f[R] to see
content sizes, the cross\-origin resource should send:
.IP
.EX
Timing\-Allow\-Origin: https://developer.mozilla.org
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Timing\-Allow\-Origin\f[R]
