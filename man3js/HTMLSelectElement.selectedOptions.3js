.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "HTMLSelectElement.selectedOptions" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLSelectElement.selectedOptions \- HTMLSelectElement: selectedOptions
property
.SH SYNOPSIS
The \f[B]read\-only\f[R] \f[CR]HTMLSelectElement\f[R] property
\f[B]\f[CB]selectedOptions\f[B]\f[R] contains a list of the
\f[CR]<option>\f[R] elements contained within the \f[CR]<select>\f[R]
element that are currently selected.
The list of selected options is an \f[CR]HTMLCollection\f[R] object with
one entry per currently selected option.
.PP
An option is considered selected if it has an
\f[CR]HTMLOptionElement.selected\f[R] attribute.
.SH VALUE
An \f[CR]HTMLCollection\f[R] which lists every currently selected
\f[CR]HTMLOptionElement\f[R] which is either a child of the
\f[CR]HTMLSelectElement\f[R] or of an \f[CR]HTMLOptGroupElement\f[R]
within the \f[CR]<select>\f[R] element.
.PP
In other words, any option contained within the \f[CR]<select>\f[R]
element may be part of the results, but option groups are not included
in the list.
.PP
If no options are currently selected, the collection is empty and
returns a \f[CR]length\f[R] of 0.
.SH EXAMPLES
In this example, a \f[CR]<select>\f[R] element with a number of options
is used to let the user order various food items.
.SS HTML
The HTML that creates the selection box and the \f[CR]<option>\f[R]
elements representing each of the food choices looks like this:
.IP
.EX
<\f[B]label\f[R] for=\[dq]foods\[dq]>What do you want to eat?</\f[B]label\f[R]><\f[B]br\f[R] />
<\f[B]select\f[R] id=\[dq]foods\[dq] name=\[dq]foods\[dq] size=\[dq]7\[dq] multiple>
  <\f[B]option\f[R] value=\[dq]1\[dq]>Burrito</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\[dq]2\[dq]>Cheeseburger</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\[dq]3\[dq]>Double Bacon Burger Supreme</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\[dq]4\[dq]>Pepperoni Pizza</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\[dq]5\[dq]>Taco</\f[B]option\f[R]>
</\f[B]select\f[R]>
<\f[B]br\f[R] />
<\f[B]button\f[R] name=\[dq]order\[dq] id=\[dq]order\[dq]>Order Now</\f[B]button\f[R]>
<\f[B]p\f[R] id=\[dq]output\[dq]></\f[B]p\f[R]>
.EE
.PP
The \f[CR]<select>\f[R] element is set to allow multiple items to be
selected, and it is 7 rows tall.
Note also the \f[CR]<button>\f[R], whose role it is to trigger fetching
the \f[CR]HTMLCollection\f[R] of selected elements using the
\f[CR]selected\f[R] property.
.SS JavaScript
The JavaScript code that establishes the event handler for the button,
as well as the event handler itself, looks like this:
.IP
.EX
\f[B]let\f[R] orderButton = document.getElementById(\[dq]order\[dq]);
\f[B]let\f[R] itemList = document.getElementById(\[dq]foods\[dq]);
\f[B]let\f[R] outputBox = document.getElementById(\[dq]output\[dq]);

orderButton.addEventListener(
  \[dq]click\[dq],
  () \f[B]=>\f[R] {
    \f[B]let\f[R] collection = itemList.selectedOptions;
    \f[B]let\f[R] output = \[dq]\[dq];

    \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < collection.length; i++) {
      \f[B]if\f[R] (output === \[dq]\[dq]) {
        output = \[dq]Your order for the following items has been placed: \[dq];
      }
      output += collection[i].label;

      \f[B]if\f[R] (i === collection.length \- 2 && collection.length < 3) {
        output += \[dq] and \[dq];
      } \f[B]else\f[R] \f[B]if\f[R] (i < collection.length \- 2) {
        output += \[dq], \[dq];
      } \f[B]else\f[R] \f[B]if\f[R] (i === collection.length \- 2) {
        output += \[dq], and \[dq];
      }
    }

    \f[B]if\f[R] (output === \[dq]\[dq]) {
      output = \[dq]You didn\[aq]t order anything!\[dq];
    }

    outputBox.textContent = output;
  },
  \f[B]false\f[R],
);
.EE
.PP
This script sets up a \f[CR]click\f[R] event listener on the \[lq]Order
Now\[rq] button.
When clicked, the event handler fetches the list of selected options
using \f[CR]selectedOptions\f[R], then iterates over the options in the
list.
A string is constructed to list the ordered items, with logic to build
the list using proper English grammar rules (including a \c
.UR https://en.wikipedia.org/wiki/Serial_comma
serial comma
.UE \c
).
.SS Result
The resulting content looks like this in action:
.SH SEE ALSO
.IP \[bu] 2
Drop\-down controls
