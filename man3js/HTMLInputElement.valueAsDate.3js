.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "HTMLInputElement.valueAsDate" "JS" "February 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLInputElement.valueAsDate \- HTMLInputElement: valueAsDate property
.SH SYNOPSIS
The \f[B]\f[CB]valueAsDate\f[B]\f[R] property of the
\f[CR]HTMLInputElement\f[R] interface represents the current value of
the \f[CR]<input>\f[R] element as a \f[CR]Date\f[R], or \f[CR]null\f[R]
if conversion is not possible.
.PP
This property can also be set directly, for example to set a default
date based on some condition.
If the provided value is neither \f[CR]null\f[R] nor a \f[CR]Date\f[R]
object, a \f[CR]TypeError\f[R] is thrown.
If the provided value is \f[CR]null\f[R] or an invalid date, the input
value is set to the empty string.
.PP
This property always returns \f[CR]null\f[R] when accessed on an input
that isn\[cq]t date\- or time\-based.
When setting this property on such an input, an
\f[CR]InvalidStateError\f[R] \f[CR]DOMException\f[R] is thrown.
.SH VALUE
A \f[CR]Date\f[R] object or \f[CR]null\f[R] if a conversion is
impossible.
The date returned should always be interpreted as a UTC time\[em]for
example, using methods like \f[CR]getUTCDate()\f[R] instead of
\f[CR]getDate()\f[R].
If you are not careful, the result may be off by 1\[em]for example, if
the user lives in a negative UTC offset (the US, for example), then
interpreting the date as a local date will result in the previous day
from what the user selected.
.PP
The \f[CR]month\f[R], \f[CR]date\f[R], and \f[CR]week\f[R] input types
return a UTC date that represents the first instant of the inputted time
span\[em]that is, they are always midnight in UTC.
For \f[CR]month\f[R], the date is the first day of the month.
For \f[CR]week\f[R], the date is the Monday of the week.
The \f[CR]time\f[R] input type always has the date set to
\f[CR]1970\-01\-01\f[R].
.PP
The \f[CR]datetime\-local\f[R] input type does not support the
\f[CR]valueAsDate\f[R] property, because it represents a date and time
in the local time zone (a wall clock time), but \f[CR]Date\f[R] objects
represent an absolute point in time.
However, some browsers may provide a non\-standard implementation.
\c
.UR https://github.com/whatwg/html/issues/10882
WHATWG is working on integrating
.UE \c
\ the \f[CR]Temporal\f[R] API with the date/time inputs to account for
this use case.
.SH EXAMPLES
.SS Retrieving a date value
This example demonstrates accessing the \f[CR]valueAsDate\f[R] property
on an \f[CR]<input>\f[R] of type \f[CR]week\f[R].
.SS HTML
We include an \f[CR]<input>\f[R] of type \f[CR]week\f[R]:
.IP
.EX
<\f[B]label\f[R] for=\[dq]date\[dq]>Pick a date and time:</\f[B]label\f[R]>

<\f[B]input\f[R] name=\[dq]date\[dq] id=\[dq]date\[dq] type=\[dq]week\[dq] />

<\f[B]pre\f[R] id=\[dq]log\[dq]></\f[B]pre\f[R]>
.EE
.SS JavaScript
When no date or time is selected, the empty input resolves to
\f[CR]null\f[R].
Each time a selection is made, a \f[CR]change\f[R] event is fired,
updating the \f[CR]<pre>\f[R] content showing the
\f[CR]HTMLInputElement.value\f[R] of the form control compared to that
value as a date.
.IP
.EX
\f[B]const\f[R] logElement = document.getElementById(\[dq]log\[dq]);
\f[B]const\f[R] inputElement = document.getElementById(\[dq]date\[dq]);

logElement.innerText = \[ga]Initial value: ${inputElement.valueAsDate}\[ga];

inputElement.addEventListener(\[dq]change\[dq], () \f[B]=>\f[R] {
  logElement.innerText = \[ga]${inputElement.value} resolves to ${inputElement.valueAsDate}\[ga];
});
.EE
.SS Results
.SS Using Date methods
This example demonstrates applying \f[CR]Date\f[R] methods directly to
the \f[CR]valueAsDate\f[R] property of an \f[CR]<input>\f[R] of type
\f[CR]date\f[R].
.SS HTML
We include an \f[CR]<input>\f[R] of type \f[CR]date\f[R]:
.IP
.EX
<\f[B]label\f[R] for=\[dq]date2\[dq]>Pick a date:</\f[B]label\f[R]>

<\f[B]input\f[R] name=\[dq]date2\[dq] id=\[dq]date2\[dq] type=\[dq]date\[dq] />

<\f[B]pre\f[R] id=\[dq]log\[dq]></\f[B]pre\f[R]>
.EE
.SS JavaScript
When no date is selected, the empty string resolves to \f[CR]null\f[R].
Each time a selection is made, a \f[CR]change\f[R] event is fired.
We then populate the log with the date selected, formatted using the
\f[CR]Date\f[R] object\[cq]s \f[CR]toLocaleDateString()\f[R] method.
.IP
.EX
\f[B]const\f[R] logElement = document.getElementById(\[dq]log\[dq]);
\f[B]const\f[R] inputElement = document.getElementById(\[dq]date2\[dq]);
\f[B]const\f[R] options = {
  weekday: \[dq]long\[dq],
  year: \[dq]numeric\[dq],
  month: \[dq]long\[dq],
  day: \[dq]numeric\[dq],
};

logElement.innerText = \[ga]Initial value: ${inputElement.valueAsDate}\[ga];

inputElement.addEventListener(\[dq]change\[dq], () \f[B]=>\f[R] {
  \f[B]if\f[R] (inputElement.valueAsDate !== \f[B]null\f[R]) {
    logElement.innerText = \[ga]You selected ${inputElement.valueAsDate.toLocaleDateString(\[dq]en\-US\[dq], options)}\[ga];
  } \f[B]else\f[R] {
    logElement.innerText = \[ga]${inputElement.value} resolves to ${inputElement.valueAsDate}\[ga];
  }
});
.EE
.SS Results
The date may be a day off due to your local timezone.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]<input>\f[R]
.IP \[bu] 2
\f[CR]HTMLInputElement.value\f[R]
.IP \[bu] 2
\f[CR]HTMLInputElement.valueAsNumber\f[R]
