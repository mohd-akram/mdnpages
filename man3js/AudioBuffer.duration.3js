.\" Automatically generated by Pandoc 3.4
.\"
.TH "AudioBuffer.duration" "JS" "March 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioBuffer.duration \- AudioBuffer: duration property
.SH SYNOPSIS
The \f[B]\f[CB]duration\f[B]\f[R] property of the \f[CR]AudioBuffer\f[R]
interface returns a double representing the duration, in seconds, of the
PCM data stored in the buffer.
.SH VALUE
A double.
.SH EXAMPLES
.IP
.EX
\f[I]// Stereo\f[R]
\f[B]const\f[R] channels = 2;

\f[I]// Create an empty two second stereo buffer at the\f[R]
\f[I]// sample rate of the AudioContext\f[R]
\f[B]const\f[R] frameCount = audioCtx.sampleRate * 2.0;
\f[B]const\f[R] myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);

button.onclick = () \f[B]=>\f[R] {
  \f[I]// Fill the buffer with white noise;\f[R]
  \f[I]// just random values between \-1.0 and 1.0\f[R]
  \f[B]for\f[R] (\f[B]let\f[R] channel = 0; channel < channels; channel++) {
    \f[I]// This gives us the actual ArrayBuffer that contains the data\f[R]
    \f[B]const\f[R] nowBuffering = myArrayBuffer.getChannelData(channel);
    \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < frameCount; i++) {
      \f[I]// Math.random() is in [0; 1.0]\f[R]
      \f[I]// audio needs to be in [\-1.0; 1.0]\f[R]
      nowBuffering[i] = Math.random() * 2 \- 1;
    }
  }

  console.log(myArrayBuffer.duration);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
