.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Array.entries" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.entries \- Array.prototype.entries()
.SH SYNOPSIS
The \f[B]\f[CB]entries()\f[B]\f[R] method of \f[CR]Array\f[R] instances
returns a new \f[I]array iterator\f[R] object that contains the
key/value pairs for each index in the array.
.IP
.EX
\f[B]const\f[R] array1 = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];

\f[B]const\f[R] iterator1 = array1.entries();

console.log(iterator1.next().value);
\f[I]// Expected output: Array [0, \[dq]a\[dq]]\f[R]

console.log(iterator1.next().value);
\f[I]// Expected output: Array [1, \[dq]b\[dq]]\f[R]
.EE
.SH SYNTAX
.IP
.EX
entries()
.EE
.SS Parameters
None.
.SS Return value
A new iterable iterator object.
.SH DESCRIPTION
When used on sparse arrays, the \f[CR]entries()\f[R] method iterates
empty slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]entries()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Iterating with index and element
.IP
.EX
\f[B]const\f[R] a = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];

\f[B]for\f[R] (\f[B]const\f[R] [index, element] \f[B]of\f[R] a.entries()) {
  console.log(index, element);
}

\f[I]// 0 \[aq]a\[aq]\f[R]
\f[I]// 1 \[aq]b\[aq]\f[R]
\f[I]// 2 \[aq]c\[aq]\f[R]
.EE
.SS Using a for\&...of loop
.IP
.EX
\f[B]const\f[R] array = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
\f[B]const\f[R] arrayEntries = array.entries();

\f[B]for\f[R] (\f[B]const\f[R] element \f[B]of\f[R] arrayEntries) {
  console.log(element);
}

\f[I]// [0, \[aq]a\[aq]]\f[R]
\f[I]// [1, \[aq]b\[aq]]\f[R]
\f[I]// [2, \[aq]c\[aq]]\f[R]
.EE
.SS Iterating sparse arrays
\f[CR]entries()\f[R] will visit empty slots as if they are
\f[CR]undefined\f[R].
.IP
.EX
\f[B]for\f[R] (\f[B]const\f[R] element \f[B]of\f[R] [, \[dq]a\[dq]].entries()) {
  console.log(element);
}
\f[I]// [0, undefined]\f[R]
\f[I]// [1, \[aq]a\[aq]]\f[R]
.EE
.SS Calling entries() on non\-array objects
The \f[CR]entries()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each property whose key is a
nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  2: \[dq]c\[dq],
  3: \[dq]d\[dq], \f[I]// ignored by entries() since length is 3\f[R]
};
\f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] Array.prototype.entries.call(arrayLike)) {
  console.log(entry);
}
\f[I]// [ 0, \[aq]a\[aq] ]\f[R]
\f[I]// [ 1, \[aq]b\[aq] ]\f[R]
\f[I]// [ 2, \[aq]c\[aq] ]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.entries\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.keys()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.values()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype[Symbol.iterator]()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.entries()\f[R]
.IP \[bu] 2
Iteration protocols
