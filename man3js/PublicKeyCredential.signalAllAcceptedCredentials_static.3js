.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PUBLICKEYCREDENTIAL.SIGNALALLACCEPTEDCREDENTIALS_STATIC" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential.signalAllAcceptedCredentials_static \-
PublicKeyCredential: signalAllAcceptedCredentials() static method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]signalAllAcceptedCredentials()\f[B]\f[R] static method of
the \f[CR]PublicKeyCredential\f[R] interface signals to the
authenticator all of the valid credential IDs that the \c
.UR https://en.wikipedia.org/wiki/Relying_party
relying party
.UE \c
\ (RP) server still holds for a particular user.
.PP
This allows the authenticator to update credential information, removing
all credentials that are no longer recognized by the RP, such as those
for deleted accounts.
The method should be called each time a user authenticates with the RP.
.PP
\f[CR]signalAllAcceptedCredentials()\f[R] should \f[I]only\f[R] be
called when the current user is authenticated \(em after sign up or
sign\-in, or when the user deletes a credential \(em as it exposes
sensitive information belonging to the user.
.SH SYNTAX
.IP
.EX
signalAllAcceptedCredentials(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R]
An object representing the valid credentials, which contains the
following properties:
.RS
.TP
\f[B]allAcceptedCredentialIds\f[R]
An array of base64url\-encoded strings representing the \f[CR]id\f[R]s
of the credentials that are still valid.
.TP
\f[B]rpId\f[R]
A string representing the \f[CR]id\f[R] of the RP that sent the signal.
.TP
\f[B]userId\f[R]
A base64url\-encoded string representing the \f[CR]id\f[R] of the user
the credentials relate to.
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves to \f[CR]undefined\f[R].
.SS Exceptions
The promise rejects with the following exceptions:
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
The RP domain is not valid.
.TP
\f[B]TypeError\f[R] \f[B]DOMException\f[R]
The \f[CR]userId\f[R] or any of the \f[CR]allAcceptedCredentialIds\f[R]
elements are not valid base64url\-encoded strings.
.SH DESCRIPTION
It is possible for the information stored in a user\(cqs authenticator
about a discoverable credential (for example, \c
.UR https://passkeys.dev/
a passkey
.UE \c
) to go out sync with the server.
This usually occurs when the user deletes a credential from the RP web
app without updating the authenticator.
.PP
When a user attempts to log in using discoverable credentials, they are
presented with a set of credentials from the authenticator to choose
from, and the selected credential is returned to the RP web app to log
in with.
If the user selects a credential that has been deleted from the RP
server, it won\(cqt be recognized, and the login will fail.
This is a confusing experience for users, who expect to only be offered
credentials that should succeed.
.PP
To mitigate this issue, \f[CR]signalAllAcceptedCredentials()\f[R] should
be called by the RP web app each time a user deletes a credential or
signs in, to tell the authenticator which credentials are still valid
for the given user.
It is up to the authenticator how to handle this information, but the
expectation is that it will synchronize its information with the
provided credentials list.
Credentials that don\(cqt appear in the list should be removed so that
the user won\(cqt be offered credentials that don\(cqt exist in the
sign\-in UI.
.RS
.PP
\f[B]Warning:\f[R] Exercise caution when invoking
\f[CR]signalAllAcceptedCredentials()\f[R] \(em any valid credentials not
included in the list are intended to be removed from the authenticator,
which will prevent the user from signing in with them.
Passing an empty list may remove all of the user\(cqs credentials.
Some authenticators may support restoring credentials via a subsequent
call to \f[CR]signalAllAcceptedCredentials()\f[R] with the previously
removed credential IDs included in the list.
.RE
.PP
\f[CR]signalAllAcceptedCredentials()\f[R] should \f[I]only\f[R] be
called when the current user is authenticated because it exposes
sensitive information belonging to the user.
If the user is not authenticated because they tried to log in with a
credential that does not exist on the RP server, you should instead call
\f[CR]PublicKeyCredential.signalUnknownCredential()\f[R] with the
unrecognized credential, so the authenticator can delete it.
See Discoverable credential synchronization methods for a more detailed
comparison.
.SH EXAMPLES
.SS Signaling the accepted credentials
In this example, we invoke the \f[CR]signalAllAcceptedCredentials()\f[R]
method, passing it the details of all credentials belonging to the user,
including those they just logged in with.
As a result, the authenticator should update its own copy of the
credentials so that they stay in sync with the RP.
.IP
.EX
\f[B]if\f[R] (PublicKeyCredential.signalAllAcceptedCredentials) {
  \f[B]await\f[R] PublicKeyCredential.signalAllAcceptedCredentials({
    rpId: \(dqexample.com\(dq,
    userId: \(dqM2YPl\-KGnA8\(dq, \f[I]// base64url\-encoded user ID\f[R]
    allAcceptedCredentialIds: [
      \f[I]// A list of base64url\-encoded credential IDs\f[R]
      \(dqvI0qOggiE3OT01ZRWBYz5l4MEgU0c7PmAA\(dq,
      \f[I]// \&...\f[R]
    ],
  });
}
.EE
.PP
For a complete example, see \c
.UR https://signal-api-demo.glitch.me/
WebAuthn Signal API Demo
.UE \c
\ (see \c
.UR https://glitch.com/edit/#!/signal-api-demo?path=site.js
the source code
.UE \c
).
.SH SEE ALSO
.IP \(bu 2
\f[CR]PublicKeyCredential.signalCurrentUserDetails()\f[R]
.IP \(bu 2
\f[CR]PublicKeyCredential.signalUnknownCredential()\f[R]
.IP \(bu 2
\c
.UR https://developer.chrome.com/docs/identity/webauthn-signal-api
Keep passkeys consistent with credentials on your server with the Signal
API
.UE \c
\ on developer.chrome.com (2024)
