.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REFLECT.GETOWNPROPERTYDESCRIPTOR" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.getOwnPropertyDescriptor \- Reflect.getOwnPropertyDescriptor()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.getOwnPropertyDescriptor()\f[B]\f[R] static
method is like \f[CR]Object.getOwnPropertyDescriptor()\f[R].
It returns a property descriptor of the given property if it exists on
the object, \f[CR]undefined\f[R] otherwise.
.IP
.EX
\f[B]const\f[R] object1 = {
  property1: 42,
};

console.log(Reflect.getOwnPropertyDescriptor(object1, \(dqproperty1\(dq).value);
\f[I]// Expected output: 42\f[R]

console.log(Reflect.getOwnPropertyDescriptor(object1, \(dqproperty2\(dq));
\f[I]// Expected output: undefined\f[R]

console.log(Reflect.getOwnPropertyDescriptor(object1, \(dqproperty1\(dq).writable);
\f[I]// Expected output: true\f[R]
.EE
.SH SYNTAX
.IP
.EX
Reflect.getOwnPropertyDescriptor(target, propertyKey)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target object in which to look for the property.
.TP
\f[B]propertyKey\f[R]
The name of the property to get an own property descriptor for.
.SS Return value
A property descriptor object if the property exists as an own property
of \f[CR]target\f[R]; otherwise, \f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] is not an object.
.SH DESCRIPTION
\f[CR]Reflect.getOwnPropertyDescriptor()\f[R] provides the reflective
semantic of retrieving the property descriptor of an object.
The only difference with \f[CR]Object.getOwnPropertyDescriptor()\f[R] is
how non\-object targets are handled.
\f[CR]Reflect.getOwnPropertyDescriptor()\f[R] throws a
\f[CR]TypeError\f[R] if the target is not an object, while
\f[CR]Object.getOwnPropertyDescriptor()\f[R] coerces it to an object.
.PP
\f[CR]Reflect.getOwnPropertyDescriptor()\f[R] invokes the
\f[CR][[GetOwnProperty]]\f[R] object internal method of
\f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.getOwnPropertyDescriptor()
.IP
.EX
Reflect.getOwnPropertyDescriptor({ x: \(dqhello\(dq }, \(dqx\(dq);
\f[I]// {value: \(dqhello\(dq, writable: true, enumerable: true, configurable: true}\f[R]

Reflect.getOwnPropertyDescriptor({ x: \(dqhello\(dq }, \(dqy\(dq);
\f[I]// undefined\f[R]

Reflect.getOwnPropertyDescriptor([], \(dqlength\(dq);
\f[I]// {value: 0, writable: true, enumerable: false, configurable: false}\f[R]
.EE
.SS Difference with Object.getOwnPropertyDescriptor()
If the \f[CR]target\f[R] argument to this method is not an object (a
primitive), then it will cause a \f[CR]TypeError\f[R].
With \f[CR]Object.getOwnPropertyDescriptor\f[R], a non\-object first
argument will be coerced to an object at first.
.IP
.EX
Reflect.getOwnPropertyDescriptor(\(dqfoo\(dq, 0);
\f[I]// TypeError: \(dqfoo\(dq is not non\-null object\f[R]

Object.getOwnPropertyDescriptor(\(dqfoo\(dq, 0);
\f[I]// { value: \(dqf\(dq, writable: false, enumerable: true, configurable: false }\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-reflect
Polyfill of \f[CR]Reflect.getOwnPropertyDescriptor\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]Reflect\f[R]
.IP \(bu 2
\f[CR]Object.getOwnPropertyDescriptor()\f[R]
.IP \(bu 2
\f[CR]handler.getOwnPropertyDescriptor()\f[R]
