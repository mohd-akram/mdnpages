.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.POINTERRAWUPDATE_EVENT" "3JS" "May 31, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.pointerrawupdate_event \- Element: pointerrawupdate event
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]pointerrawupdate\f[B]\f[R] event is fired when a pointer
changes any properties that don\(cqt fire \f[CR]pointerdown\f[R] or
\f[CR]pointerup\f[R] events.
See \f[CR]pointermove\f[R] for a list of these properties.
.PP
The \f[CR]pointerrawupdate\f[R] event may have coalesced events if there
is already another \f[CR]pointerrawupdate\f[R] event with the same
pointer ID that hasn\(cqt been dispatched in the event loop.
For information on coalesced events, see the
\f[CR]PointerEvent.getCoalescedEvents()\f[R] documentation.
.PP
\f[CR]pointerrawupdate\f[R] is intended for applications that require
high\-precision input handling and cannot achieve smooth interaction
using coalesced \f[CR]pointermove\f[R] events alone.
However, because listening to \f[CR]pointerrawupdate\f[R] events can
affect performance, you should add these listeners only if your
JavaScript needs high\-frequency events and can handle them as quickly
as they are dispatched.
For most use cases, other pointer event types should suffice.
.PP
This event bubbles and is composed, but is not cancelable and has no
default action.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqpointerrawupdate\(dq, (event) => { })

onpointerrawupdate = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]PointerEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface inherits properties from \f[CI]MouseEvent\f[I] and
\f[CI]Event\f[I].\f[R]
.TP
\f[B]PointerEvent.altitudeAngle\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Represents the angle between a transducer (a pointer or stylus) axis and
the X\-Y plane of a device screen.
.TP
\f[B]PointerEvent.azimuthAngle\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Represents the angle between the Y\-Z plane and the plane containing
both the transducer (a pointer or stylus) axis and the Y axis.
.TP
\f[B]PointerEvent.persistentDeviceId\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
A unique identifier for the pointing device generating the
\f[CR]PointerEvent\f[R].
.TP
\f[B]PointerEvent.pointerId\f[R] \f[I](read\-only)\f[R]
A unique identifier for the pointer causing the event.
.TP
\f[B]PointerEvent.width\f[R] \f[I](read\-only)\f[R]
The width (magnitude on the X axis), in CSS pixels, of the contact
geometry of the pointer.
.TP
\f[B]PointerEvent.height\f[R] \f[I](read\-only)\f[R]
The height (magnitude on the Y axis), in CSS pixels, of the contact
geometry of the pointer.
.TP
\f[B]PointerEvent.pressure\f[R] \f[I](read\-only)\f[R]
The normalized pressure of the pointer input in the range \f[CR]0\f[R]
to \f[CR]1\f[R], where \f[CR]0\f[R] and \f[CR]1\f[R] represent the
minimum and maximum pressure the hardware is capable of detecting,
respectively.
.TP
\f[B]PointerEvent.tangentialPressure\f[R] \f[I](read\-only)\f[R]
The normalized tangential pressure of the pointer input (also known as
barrel pressure or \c
.UR https://en.wikipedia.org/wiki/Cylinder_stress
cylinder stress
.UE \c
) in the range \f[CR]\-1\f[R] to \f[CR]1\f[R], where \f[CR]0\f[R] is the
neutral position of the control.
.TP
\f[B]PointerEvent.tiltX\f[R] \f[I](read\-only)\f[R]
The plane angle (in degrees, in the range of \f[CR]\-90\f[R] to
\f[CR]90\f[R]) between the Y\(enZ plane and the plane containing both
the pointer (e.g., pen stylus) axis and the Y axis.
.TP
\f[B]PointerEvent.tiltY\f[R] \f[I](read\-only)\f[R]
The plane angle (in degrees, in the range of \f[CR]\-90\f[R] to
\f[CR]90\f[R]) between the X\(enZ plane and the plane containing both
the pointer (e.g., pen stylus) axis and the X axis.
.TP
\f[B]PointerEvent.twist\f[R] \f[I](read\-only)\f[R]
The clockwise rotation of the pointer (e.g., pen stylus) around its
major axis in degrees, with a value in the range \f[CR]0\f[R] to
\f[CR]359\f[R].
.TP
\f[B]PointerEvent.pointerType\f[R] \f[I](read\-only)\f[R]
Indicates the device type that caused the event (mouse, pen, touch,
etc.).
.TP
\f[B]PointerEvent.isPrimary\f[R] \f[I](read\-only)\f[R]
Indicates if the pointer represents the primary pointer of this pointer
type.
.SH EXAMPLE
.IP
.EX
addEventListener(\(dqpointerrawupdate\(dq, (event) \f[B]=>\f[R] {
  \f[B]if\f[R] (event.getCoalescedEvents && event.getCoalescedEvents().length > 1) {
    console.log(\(dqCoalesced events:\(dq, event.getCoalescedEvents().length);
    \f[B]for\f[R] (\f[B]let\f[R] coalescedEvent \f[B]of\f[R] event.getCoalescedEvents()) {
      \f[I]// Do something with the coalesced events.\f[R]
    }
  } \f[B]else\f[R] {
    \f[I]// Do something with the event.\f[R]
    console.log(\(dqRaw event\(dq, event);
  }
});
.EE
.SH SEE ALSO
.IP \(bu 2
Related events
.RS 2
.IP \(bu 2
\f[CR]gotpointercapture\f[R]
.IP \(bu 2
\f[CR]lostpointercapture\f[R]
.IP \(bu 2
\f[CR]pointerover\f[R]
.IP \(bu 2
\f[CR]pointerenter\f[R]
.IP \(bu 2
\f[CR]pointerdown\f[R]
.IP \(bu 2
\f[CR]pointermove\f[R]
.IP \(bu 2
\f[CR]pointerup\f[R]
.IP \(bu 2
\f[CR]pointercancel\f[R]
.IP \(bu 2
\f[CR]pointerout\f[R]
.IP \(bu 2
\f[CR]pointerleave\f[R]
.RE
