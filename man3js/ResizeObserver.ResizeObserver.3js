.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ResizeObserver.ResizeObserver" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ResizeObserver.ResizeObserver \- ResizeObserver: ResizeObserver()
constructor
.SH SYNOPSIS
The \f[B]\f[CB]ResizeObserver\f[B]\f[R] constructor creates a new
\f[CR]ResizeObserver\f[R] object, which can be used to report changes to
the content or border box of an \f[CR]Element\f[R] or the bounding box
of an \f[CR]SVGElement\f[R].
.SH SYNTAX
.IP
.EX
new ResizeObserver(callback)
.EE
.SS Parameters
.TP
\f[B]callback\f[R]
The function called whenever an observed resize occurs.
The function is called with two parameters:
.RS
.TP
\f[B]entries\f[R]
An array of \f[CR]ResizeObserverEntry\f[R] objects that can be used to
access the new dimensions of the element after each change.
.TP
\f[B]observer\f[R]
A reference to the \f[CR]ResizeObserver\f[R] itself, so it will
definitely be accessible from inside the callback, should you need it.
This could be used for example to automatically unobserve the observer
when a certain condition is reached, but you can omit it if you
don\[cq]t need it.
.PP
The callback will generally follow a pattern along the lines of:
.IP
.EX
\f[B]function\f[R] callback(entries, observer) {
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] entries) {
    \f[I]// Do something to each entry\f[R]
    \f[I]// and possibly something to the observer itself\f[R]
  }
}
.EE
.RE
.SH EXAMPLES
The following snippet is taken from the \c
.UR https://mdn.github.io/dom-examples/resize-observer/resize-observer-text.html
resize\-observer\-text.html
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/blob/main/resize-observer/resize-observer-text.html
see source
.UE \c
) example:
.IP
.EX
\f[B]const\f[R] resizeObserver = \f[B]new\f[R] ResizeObserver((entries) \f[B]=>\f[R] {
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] entries) {
    \f[B]if\f[R] (entry.contentBoxSize) {
      \f[B]if\f[R] (entry.contentBoxSize[0]) {
        h1Elem.style.fontSize = \[ga]${Math.max(
          1.5,
          entry.contentBoxSize[0].inlineSize / 200,
        )}rem\[ga];
        pElem.style.fontSize = \[ga]${Math.max(
          1,
          entry.contentBoxSize[0].inlineSize / 600,
        )}rem\[ga];
      } \f[B]else\f[R] {
        \f[I]// legacy path\f[R]
        h1Elem.style.fontSize = \[ga]${Math.max(
          1.5,
          entry.contentBoxSize.inlineSize / 200,
        )}rem\[ga];
        pElem.style.fontSize = \[ga]${Math.max(
          1,
          entry.contentBoxSize.inlineSize / 600,
        )}rem\[ga];
      }
    } \f[B]else\f[R] {
      h1Elem.style.fontSize = \[ga]${Math.max(
        1.5,
        entry.contentRect.width / 200,
      )}rem\[ga];
      pElem.style.fontSize = \[ga]${Math.max(1, entry.contentRect.width / 600)}rem\[ga];
    }
  }
  console.log(\[dq]Size changed\[dq]);
});

resizeObserver.observe(divElem);
.EE
