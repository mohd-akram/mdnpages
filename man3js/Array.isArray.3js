.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Array.isArray" "JS" "February 24, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.isArray \- Array.isArray()
.SH SYNOPSIS
The \f[B]\f[CB]Array.isArray()\f[B]\f[R] static method determines
whether the passed value is an \f[CR]Array\f[R].
.IP
.EX
console.log(Array.isArray([1, 3, 5]));
\f[I]// Expected output: true\f[R]

console.log(Array.isArray(\[dq][]\[dq]));
\f[I]// Expected output: false\f[R]

console.log(Array.isArray(\f[B]new\f[R] Array(5)));
\f[I]// Expected output: true\f[R]

console.log(Array.isArray(\f[B]new\f[R] Int16Array([15, 33])));
\f[I]// Expected output: false\f[R]
.EE
.SH SYNTAX
.IP
.EX
Array.isArray(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
The value to be checked.
.SS Return value
\f[CR]true\f[R] if \f[CR]value\f[R] is an \f[CR]Array\f[R]; otherwise,
\f[CR]false\f[R].
\f[CR]false\f[R] is always returned if \f[CR]value\f[R] is a
\f[CR]TypedArray\f[R] instance.
.SH DESCRIPTION
\f[CR]Array.isArray()\f[R] checks if the passed value is an
\f[CR]Array\f[R].
It performs a \f[I]branded check\f[R], similar to the \f[CR]in\f[R]
operator, for a private property initialized by the \f[CR]Array()\f[R]
constructor.
.PP
It is a more robust alternative to \f[CR]instanceof Array\f[R] because
it avoids false positives and false negatives:
.IP \[bu] 2
\f[CR]Array.isArray()\f[R] rejects values that aren\[cq]t actual
\f[CR]Array\f[R] instances, even if they have \f[CR]Array.prototype\f[R]
their prototype chain \[em] \f[CR]instanceof Array\f[R] would accept
these as it does check the prototype chain.
.IP \[bu] 2
\f[CR]Array.isArray()\f[R] accepts \f[CR]Array\f[R] objects constructed
in another realm \[em] \f[CR]instanceof Array\f[R] returns
\f[CR]false\f[R] for these because the identity of the \f[CR]Array\f[R]
constructor is different across realms.
.PP
See the article \c
.UR https://web.mit.edu/jwalden/www/isArray.html
\[lq]Determining with absolute accuracy whether or not a JavaScript
object is an array\[rq]
.UE \c
\ for more details.
.SH EXAMPLES
.SS Using Array.isArray()
.IP
.EX
\f[I]// all following calls return true\f[R]
Array.isArray([]);
Array.isArray([1]);
Array.isArray(\f[B]new\f[R] Array());
Array.isArray(\f[B]new\f[R] Array(\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq], \[dq]d\[dq]));
Array.isArray(\f[B]new\f[R] Array(3));
\f[I]// Little known fact: Array.prototype itself is an array:\f[R]
Array.isArray(Array.prototype);

\f[I]// all following calls return false\f[R]
Array.isArray();
Array.isArray({});
Array.isArray(\f[B]null\f[R]);
Array.isArray(\f[B]undefined\f[R]);
Array.isArray(17);
Array.isArray(\[dq]Array\[dq]);
Array.isArray(\f[B]true\f[R]);
Array.isArray(\f[B]false\f[R]);
Array.isArray(\f[B]new\f[R] Uint8Array(32));
\f[I]// This is not an array, because it was not created using the\f[R]
\f[I]// array literal syntax or the Array constructor\f[R]
Array.isArray({ __proto__: Array.prototype });
.EE
.SS instanceof vs.\ Array.isArray()
When checking for \f[CR]Array\f[R] instance, \f[CR]Array.isArray()\f[R]
is preferred over \f[CR]instanceof\f[R] because it works across realms.
.IP
.EX
\f[B]const\f[R] iframe = document.createElement(\[dq]iframe\[dq]);
document.body.appendChild(iframe);
\f[B]const\f[R] xArray = window.frames[window.frames.length \- 1].Array;
\f[B]const\f[R] arr = \f[B]new\f[R] xArray(1, 2, 3); \f[I]// [1, 2, 3]\f[R]

\f[I]// Correctly checking for Array\f[R]
Array.isArray(arr); \f[I]// true\f[R]
\f[I]// The prototype of arr is xArray.prototype, which is a\f[R]
\f[I]// different object from Array.prototype\f[R]
arr \f[B]instanceof\f[R] Array; \f[I]// false\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.isArray\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
