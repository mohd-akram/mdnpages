.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "TypedArray.findIndex" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.findIndex \- TypedArray.prototype.findIndex()
.SH SYNOPSIS
The \f[B]\f[CB]findIndex()\f[B]\f[R] method of \f[CR]TypedArray\f[R]
instances returns the index of the first element in a typed array that
satisfies the provided testing function.
If no elements satisfy the testing function, \-1 is returned.
This method has the same algorithm as
\f[CR]Array.prototype.findIndex()\f[R].
.IP
.EX
\f[B]function\f[R] isNegative(element, index, array) {
  \f[B]return\f[R] element < 0;
}

\f[B]const\f[R] int8 = \f[B]new\f[R] Int8Array([10, \-20, 30, \-40, 50]);

console.log(int8.findIndex(isNegative));
\f[I]// Expected output: 1\f[R]
.EE
.SH SYNTAX
.IP
.EX
findIndex(callbackFn)
findIndex(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the typed array.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the typed array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the typed array.
.TP
\f[B]array\f[R]
The typed array \f[CR]findIndex()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
The index of the first element in the typed array that passes the test.
Otherwise, \f[CR]\-1\f[R].
.SH DESCRIPTION
See \f[CR]Array.prototype.findIndex()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Find the index of the first prime number in a typed array
The following example returns the index of the first element in the
typed array that is a prime number, or \f[CR]\-1\f[R] if there is no
prime number.
.IP
.EX
\f[B]function\f[R] isPrime(element, index, array) {
  \f[B]let\f[R] start = 2;
  \f[B]while\f[R] (start <= Math.sqrt(element)) {
    \f[B]if\f[R] (element % start++ < 1) {
      \f[B]return\f[R] \f[B]false\f[R];
    }
  }
  \f[B]return\f[R] element > 1;
}

\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array([4, 6, 8, 12]);
\f[B]const\f[R] uint16 = \f[B]new\f[R] Uint16Array([4, 6, 7, 12]);

console.log(uint8.findIndex(isPrime)); \f[I]// \-1, not found\f[R]
console.log(uint16.findIndex(isPrime)); \f[I]// 2\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]TypedArray.prototype.findIndex\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.findLast()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.findLastIndex()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findIndex()\f[R]
