.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCAudioSourceStats" "JS" "March 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCAudioSourceStats \- RTCAudioSourceStats
.SH SYNOPSIS
The \f[B]\f[CB]RTCAudioSourceStats\f[B]\f[R] dictionary of the WebRTC
API provides statistics information about an audio track
(\f[CR]MediaStreamTrack\f[R]) that is attached to one or more senders
(\f[CR]RTCRtpSender\f[R]).
.PP
These statistics can be obtained by iterating the
\f[CR]RTCStatsReport\f[R] returned by \f[CR]RTCRtpSender.getStats()\f[R]
or \f[CR]RTCPeerConnection.getStats()\f[R] until you find a report with
the \f[CR]type\f[R] of \f[CR]media\-source\f[R] and a \f[CR]kind\f[R] of
\f[CR]audio\f[R].
.RS
.PP
\f[B]Note:\f[R] For audio information about remotely sourced tracks
(that are being received), see \f[CR]RTCInboundRtpStreamStats\f[R].
.RE
.SH INSTANCE PROPERTIES
.TP
\f[B]audioLevel\f[R] *(experimental)**(optional)*
A number that represents the audio level of the media source.
.TP
\f[B]totalAudioEnergy\f[R] *(experimental)**(optional)*
A number that represents the total audio energy of the media source over
the lifetime of the stats object.
.TP
\f[B]totalSamplesDuration\f[R] *(experimental)**(optional)*
A number that represents the total duration of all samples produced by
the media source over the lifetime of the stats object.
.SS Common media\-source properties
The following properties are present in both
\f[CR]RTCAudioSourceStats\f[R] and \f[CR]RTCVideoSourceStats\f[R]:
.TP
\f[B]trackIdentifier\f[R]
A string that contains the \f[CR]id\f[R] value of the
\f[CR]MediaStreamTrack\f[R] associated with the audio source.
.TP
\f[B]kind\f[R]
A string indicating whether this object represents stats for a video
source or a media source.
For an \f[CR]RTCAudioSourceStats\f[R] this will always be
\f[CR]audio\f[R].
.SS Common instance properties
The following properties are common to all statistics objects.
.TP
\f[B]id\f[R]
A string that uniquely identifies the object that is being monitored to
produce this set of statistics.
.TP
\f[B]timestamp\f[R]
A \f[CR]DOMHighResTimeStamp\f[R] object indicating the time at which the
sample was taken for this statistics object.
.TP
\f[B]type\f[R]
A string with the value \f[CR]\[dq]media\-source\[dq]\f[R], indicating
that the object is an instance of either \f[CR]RTCAudioSourceStats\f[R]
or \f[CR]RTCVideoSourceStats\f[R].
.SH DESCRIPTION
The interface provides statistics about an audio media source attached
to one or more senders.
The information includes the current audio level, averaged over a short
(implementation dependent) duration.
.PP
The statistics also include the accumulated total energy and total
sample duration, at a particular timestamp.
The totals can be used to determine the average audio level over the
lifetime of the stats object.
You can calculate a root mean square (RMS) value in the same units as
\f[CR]audioLevel\f[R] using the following formula:
.PP
\   totalAudioEnergy totalSamplesDuration  
.PP
You can also use the accumulated totals to calculate the average audio
level over an arbitrary time period.
.PP
The total audio energy of the stats object is accumulated by adding the
energy of every sample over the lifetime of the stats object, while the
total duration is accumulated by adding the duration of each sample.
The energy of each sample is determined using the following formula,
where \f[CR]sample_level\f[R] is the level of the sample,
\f[CR]max_level\f[R] is the highest\-intensity encodable value, and
\f[CR]duration\f[R] is the duration of the sample in seconds:
.PP
\  duration ⁢   (  sample_level max_level  )  2  
.PP
The average audio level between any two different \f[CR]getStats()\f[R]
calls, over any duration, can be calculated using the following
equation:
.PP
\     totalAudioEnergy 2  \-  totalAudioEnergy 1    
totalSamplesDuration 2  \-  totalSamplesDuration 1    
.SH EXAMPLES
This example shows how you might iterate the stats object returned from
\f[CR]RTCRtpSender.getStats()\f[R] to get the audio source stats, and
then extract the \f[CR]audioLevel\f[R].
.IP
.EX
\f[I]// where sender is an RTCRtpSender\f[R]
\f[B]const\f[R] stats = \f[B]await\f[R] sender.getStats();
\f[B]let\f[R] audioSourceStats = \f[B]null\f[R];

stats.forEach((report) \f[B]=>\f[R] {
  \f[B]if\f[R] (report.type === \[dq]media\-source\[dq] && report.kind===\[dq]audio\[dq]) {
    audioSourceStats = report;
    \f[B]break\f[R];
  }
});

\f[B]const\f[R] audioLevel = audioSourceStats?.audioLevel;
.EE
