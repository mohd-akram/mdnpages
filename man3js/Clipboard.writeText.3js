.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CLIPBOARD.WRITETEXT" "3JS" "February 11, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clipboard.writeText \- Clipboard: writeText() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]writeText()\f[B]\f[R] method of the \f[CR]Clipboard\f[R]
interface writes the specified text to the system clipboard, returning a
\f[CR]Promise\f[R] that is resolved once the system clipboard has been
updated.
.SH SYNTAX
.IP
.EX
writeText(newClipText)
.EE
.SS Parameters
.TP
\f[B]newClipText\f[R]
The string to be written to the clipboard.
.SS Return value
A \f[CR]Promise\f[R] that is resolved once the clipboard\(cqs contents
have been updated.
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if writing to the clipboard is not allowed.
.SH SECURITY CONSIDERATIONS
Writing to the clipboard can only be done in a secure context.
.PP
Additional security requirements are covered in the Security
consideration section of the API overview topic.
.SH EXAMPLES
This example sets the clipboard\(cqs contents to the string \(lq<empty
clipboard>\(rq.
.IP
.EX
button.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] writeClipboardText(\(dq<empty clipboard>\(dq));

\f[B]async\f[R] \f[B]function\f[R] writeClipboardText(text) {
  \f[B]try\f[R] {
    \f[B]await\f[R] navigator.clipboard.writeText(text);
  } \f[B]catch\f[R] (error) {
    console.error(error.message);
  }
}
.EE
.SH SEE ALSO
.IP \(bu 2
Clipboard API
.IP \(bu 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
.IP \(bu 2
\f[CR]Clipboard.write()\f[R]
.IP \(bu 2
\f[CR]Clipboard.read()\f[R]
.IP \(bu 2
\f[CR]Clipboard.readText()\f[R]
