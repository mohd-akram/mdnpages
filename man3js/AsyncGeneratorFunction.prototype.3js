'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ASYNCGENERATORFUNCTION.PROTOTYPE" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AsyncGeneratorFunction.prototype \-
AsyncGeneratorFunction.prototype.prototype
.SH SYNOPSIS
The \f[B]\f[CB]prototype\f[B]\f[R] property of
\f[CR]AsyncGeneratorFunction.prototype\f[R] is shared by all async
generator functions.
Its value is \f[CR]AsyncGenerator.prototype\f[R].
Each async generator function created with the
\f[CR]async function*\f[R] syntax or the
\f[CR]AsyncGeneratorFunction()\f[R] constructor also has its own
\f[CR]prototype\f[R] property, whose prototype is
\f[CR]AsyncGeneratorFunction.prototype.prototype\f[R].
When the async generator function is called, its \f[CR]prototype\f[R]
property becomes the prototype of the returned async generator object.
.SH VALUE
The same object as \f[CR]AsyncGenerator.prototype\f[R].
\f[CR]AsyncGeneratorFunction.prototype.prototype\f[R] is the technically
more accurate name, but \f[CR]AsyncGenerator.prototype\f[R] appeals to
the intuition that it\(cqs the prototype of async generator objects.
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
yes
T}
.TE
.PP
The \f[CR]prototype\f[R] property of each
\f[CR]AsyncGeneratorFunction\f[R] instance is an empty object with no
properties, whose prototype is
\f[CR]AsyncGeneratorFunction.prototype.prototype\f[R].
It has the following property attributes:
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
yes
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
An async generator function instance has two \f[CR]prototype\f[R]
properties.
The first one is its own \f[CR]prototype\f[R] property.
The second one is the \f[CR]prototype\f[R] property on its prototype,
which is \f[CR]AsyncGeneratorFunction.prototype\f[R].
(Remember that every async generator function is an instance of
\f[CR]AsyncGeneratorFunction\f[R], so it has
\f[CR]AsyncGeneratorFunction.prototype\f[R] as its prototype.)
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R]* genFunc() {}
\f[B]const\f[R] AsyncGeneratorFunctionPrototype = Object.getPrototypeOf(genFunc);
console.log(Object.hasOwn(genFunc, \(dqprototype\(dq)); \f[I]// true\f[R]
console.log(Object.hasOwn(AsyncGeneratorFunctionPrototype, \(dqprototype\(dq)); \f[I]// true\f[R]
.EE
.PP
When an async generator function is called, the async generator
function\(cqs \f[CR]prototype\f[R] property becomes the prototype of the
returned async generator object.
.IP
.EX
\f[B]const\f[R] gen = genFunc();
\f[B]const\f[R] proto = Object.getPrototypeOf;
console.log(proto(gen) === genFunc.prototype); \f[I]// true\f[R]
console.log(proto(proto(gen)) === AsyncGeneratorFunctionPrototype.prototype); \f[I]// true\f[R]
.EE
.PP
The following diagram illustrates the prototype chain of an async
generator function and its instances.
Each hollow arrow indicates an inheritance relationship (i.e., a
prototype link), and each solid arrow indicates a property relationship.
Note that there\(cqs no way to access \f[CR]genFunc\f[R] from
\f[CR]gen\f[R] \(em they only have an \f[CR]instanceof\f[R]
relationship.
[IMAGE: \c
.UR https://mdn.github.io/shared-assets/images/diagrams/javascript/asyncgeneratorfunction/prototype-chain.svg
The inheritance diagram of async generators and async generator
functions
.UE \c
]
The inheritance diagram of async generators and async generator
functions
.SH SEE ALSO
.IP \(bu 2
\f[CR]async function*\f[R]
.IP \(bu 2
\f[CR]async function*\f[R] expression
.IP \(bu 2
\f[CR]AsyncGeneratorFunction\f[R]
.IP \(bu 2
\f[CR]GeneratorFunction\f[R]
.IP \(bu 2
Inheritance and the prototype chain
.IP \(bu 2
Iterators and generators
