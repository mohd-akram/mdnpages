.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBDATABASE.CREATEOBJECTSTORE" "3JS" "December 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBDatabase.createObjectStore \- IDBDatabase: createObjectStore() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createObjectStore()\f[B]\f[R] method of the
\f[CR]IDBDatabase\f[R] interface creates and returns a new
\f[CR]IDBObjectStore\f[R].
.PP
The method takes the name of the store as well as a parameter object
that lets you define important optional properties.
You can use the property to uniquely identify individual objects in the
store.
As the property is an identifier, it should be unique to every object,
and every object should have that property.
.PP
This method can be called \f[I]only\f[R] within a
\f[CR]versionchange\f[R] transaction.
.SH SYNTAX
.IP
.EX
createObjectStore(name)
createObjectStore(name, options)
.EE
.SS Parameters
.TP
\f[B]name\f[R]
The name of the new object store to be created.
Note that it is possible to create an object store with an empty name.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An options object whose attributes are optional parameters to the
method.
It includes the following properties:
.RS
.TP
\f[B]keyPath\f[R] \f[I](optional)\f[R]
The key path to be used by the new object store.
If empty or not specified, the object store is created without a key
path and uses out\-of\-line keys.
You can also pass in an array as a \f[CR]keyPath\f[R].
.TP
\f[B]autoIncrement\f[R] \f[I](optional)\f[R]
If \f[CR]true\f[R], the object store has a key generator.
Defaults to false.
.RE
.SS Return value
A new \f[CR]IDBObjectStore\f[R].
.SS Exceptions
This method may raise a \f[CR]DOMException\f[R] with a \f[CR]name\f[R]
of one of the following types:
.TP
\f[B]ConstraintError\f[R] \f[B]DOMException\f[R]
Thrown if an object store with the given name (based on a
case\-sensitive comparison) already exists in the connected database.
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]autoIncrement\f[R] is set to true and \f[CR]keyPath\f[R]
is either an empty string or an array.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the method was not called from a \f[CR]versionchange\f[R]
transaction callback.
.TP
\f[B]SyntaxError\f[R]
Thrown if the \f[CR]keyPath\f[R] option contains an invalid key path.
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if a request is made on a source database that does not exist
(for example, when the database has been deleted or removed), or if the
associated upgrade transaction has completed or is processing a request.
.SH EXAMPLES
.IP
.EX
\f[I]// Let us open our database\f[R]
\f[B]const\f[R] request = window.indexedDB.open(\(dqtoDoList\(dq, 4);

\f[I]// This handler is called when a new version of the database\f[R]
\f[I]// is created, either when one has not been created before\f[R]
\f[I]// or when a new version number is submitted by calling\f[R]
\f[I]// window.indexedDB.open().\f[R]
\f[I]// This handler is only supported in recent browsers.\f[R]
request.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\(dqli\(dq)).textContent =
      \(dqError loading database.\(dq;
  };

  \f[I]// Create an objectStore for this database\f[R]

  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]

  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });

  objectStore.createIndex(\(dqnotified\(dq, \(dqnotified\(dq, { unique: \f[B]false\f[R] });

  note.appendChild(document.createElement(\(dqli\(dq)).textContent =
    \(dqObject store created.\(dq;
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
.IP \(bu 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \(bu 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \(bu 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \(bu 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \(bu 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \(bu 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
