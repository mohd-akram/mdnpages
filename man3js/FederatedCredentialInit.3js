.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "FEDERATEDCREDENTIALINIT" "3JS" "August 13, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FederatedCredentialInit \- FederatedCredentialInit
.SH SYNOPSIS
The \f[B]\f[CB]FederatedCredentialInit\f[B]\f[R] dictionary represents
the object passed to \f[CR]CredentialsContainer.create()\f[R] as the
value of the \f[CR]federated\f[R] option: that is, when creating a
\f[CR]FederatedCredential\f[R] object representing a credential
associated with a federated identify provider.
.RS
.PP
\f[B]Note:\f[R] The Federated Credential Management API (FedCM)
supersedes the \f[CR]FederatedCredential\f[R] interface in favor of the
\f[CR]IdentityCredential\f[R] interface.
.PP
The \f[CR]FederatedCredentialInit\f[R] dictionary is not used when
working with the \f[CR]IdentityCredential\f[R] interface.
.RE
.SH INSTANCE PROPERTIES
.TP
\f[B]iconURL\f[R] \f[I](optional)\f[R]
A string representing the URL of an icon or avatar to be associated with
the credential.
.TP
\f[B]id\f[R]
A string representing a unique ID for the credential.
.TP
\f[B]name\f[R] \f[I](optional)\f[R]
A string representing the credential username.
.TP
\f[B]origin\f[R]
A string representing the credential\(cqs origin.
\f[CR]FederatedCredential\f[R] objects are origin\-bound, which means
that they will only be usable on the specified origin they were intended
to be used on.
.TP
\f[B]protocol\f[R] \f[I](optional)\f[R]
A string representing the protocol of the credentials\(cq federated
identity provider (for example, \f[CR]\(dqopenidconnect\(dq\f[R]).
.TP
\f[B]provider\f[R]
A string representing the credentials\(cq federated identity provider
(for example \f[CR]\(dqhttps://www.facebook.com\(dq\f[R] or
\f[CR]\(dqhttps://accounts.google.com\(dq\f[R]).
.SH EXAMPLES
.SS Creating a federated identity credential
.IP
.EX
\f[B]const\f[R] credInit = {
  id: \(dq1234\(dq,
  name: \(dqSerpentina\(dq,
  origin: \(dqhttps://example.org\(dq,
  protocol: \(dqopenidconnect\(dq,
  provider: \(dqhttps://provider.example.org\(dq,
};

\f[B]const\f[R] makeCredential = document.querySelector(\(dq#make\-credential\(dq);

makeCredential.addEventListener(\(dqclick\(dq, \f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]const\f[R] cred = \f[B]await\f[R] navigator.credentials.create({
    federated: credInit,
  });
  console.log(cred.name);
  console.log(cred.provider);
});
.EE
