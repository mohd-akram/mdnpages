.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "IDBObjectStore.clear" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore.clear \- IDBObjectStore: clear() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]clear()\f[B]\f[R] method of the \f[CR]IDBObjectStore\f[R]
interface creates and immediately returns an \f[CR]IDBRequest\f[R]
object, and clears this object store in a separate thread.
This is for deleting all the current data out of an object store.
.PP
Clearing an object store consists of removing all records from the
object store and removing all records in indexes that reference the
object store.
To remove only some of the records in a store, use
\f[CR]IDBObjectStore.delete\f[R] passing a key or
\f[CR]IDBKeyRange\f[R].
.SH SYNTAX
.IP
.EX
clear()
.EE
.SS Parameters
None.
.SS Return value
An \f[CR]IDBRequest\f[R] object on which subsequent events related to
this operation are fired.
.PP
If the operation is successful, the value of the request\[cq]s
\f[CR]result\f[R] property is \f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]ReadOnlyError\f[R] \f[B]DOMException\f[R]
Thrown if the transaction associated with this operation is in
read\-only mode.
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if this \f[CR]IDBObjectStore\f[R]\[cq]s transaction is inactive.
.SH EXAMPLES
In the following code snippet, we open a read/write transaction on our
database and clear all the current data out of the object store using
\f[CR]clear()\f[R].
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.innerHTML += \[dq]<li>Database initialized.</li>\[dq];

  \f[I]// store the result of opening the database in the db variable.\f[R]
  \f[I]// This is used a lot below\f[R]
  db = DBOpenRequest.result;

  \f[I]// Clear all the data from the object store\f[R]
  clearData();
};

\f[B]function\f[R] clearData() {
  \f[I]// open a read/write db transaction, ready for clearing the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  \f[I]// report on the success of the transaction completing, when everything is done\f[R]
  transaction.oncomplete = (event) \f[B]=>\f[R] {
    note.innerHTML += \[dq]<li>Transaction completed.</li>\[dq];
  };

  transaction.onerror = (event) \f[B]=>\f[R] {
    note.innerHTML += \[ga]<li>Transaction not opened due to error: ${transaction.error}</li>\[ga];
  };

  \f[I]// create an object store on the transaction\f[R]
  \f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);

  \f[I]// Make a request to clear all the data out of the object store\f[R]
  \f[B]const\f[R] objectStoreRequest = objectStore.clear();

  objectStoreRequest.onsuccess = (event) \f[B]=>\f[R] {
    \f[I]// report the success of our request\f[R]
    note.innerHTML += \[dq]<li>Request successful.</li>\[dq];
  };
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
