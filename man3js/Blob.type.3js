.\" Automatically generated by Pandoc 3.4
.\"
.TH "Blob.type" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Blob.type \- Blob: type property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]type\f[B]\f[R] read\-only property of the \f[CR]Blob\f[R]
interface returns the MIME type of the file.
.RS
.PP
\f[B]Note:\f[R] Based on the current implementation, browsers won\[cq]t
actually read the bytestream of a file to determine its media type.
It is assumed based on the file extension; a PNG image file renamed to
\&.txt would give \[lq]\f[I]text/plain\f[R]\[rq] and not
\[lq]\f[I]image/png\f[R]\[rq].
Moreover, \f[CR]blob.type\f[R] is generally reliable only for common
file types like images, HTML documents, audio and video.
Uncommon file extensions would return an empty string.
Client configuration (for instance, the Windows Registry) may result in
unexpected values even for common types.
\f[B]Developers are advised not to rely on this property as a sole
validation scheme.\f[R]
.RE
.SH VALUE
A string containing the file\[cq]s MIME type, or an empty string if the
type could not be determined.
.SH EXAMPLES
This example asks the user to select a number of files, then checks each
file to make sure it\[cq]s one of a given set of image file types.
.SS HTML
.IP
.EX
<\f[B]input\f[R] type=\[dq]file\[dq] id=\[dq]input\[dq] multiple />
<\f[B]output\f[R] id=\[dq]output\[dq]>Choose image files\&...</\f[B]output\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[I]// Our application only allows GIF, PNG, and JPEG images\f[R]
\f[B]const\f[R] allowedFileTypes = [\[dq]image/png\[dq], \[dq]image/jpeg\[dq], \[dq]image/gif\[dq]];

\f[B]const\f[R] input = document.getElementById(\[dq]input\[dq]);
\f[B]const\f[R] output = document.getElementById(\[dq]output\[dq]);

input.addEventListener(\[dq]change\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] files = event.target.files;

  \f[B]if\f[R] (files.length === 0) {
    output.innerText = \[dq]Choose image files\&...\[dq];
    \f[B]return\f[R];
  }

  \f[B]const\f[R] allAllowed = Array.from(files).every((file) \f[B]=>\f[R]
    allowedFileTypes.includes(file.type),
  );
  output.innerText = allAllowed
    ? \[dq]All files clear!\[dq]
    : \[dq]Please choose image files only.\[dq];
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Blob\f[R]
.IP \[bu] 2
Using files from web applications
