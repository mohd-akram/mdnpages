.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "SubtleCrypto.generateKey" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SubtleCrypto.generateKey \- SubtleCrypto: generateKey() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
Use the \f[B]\f[CB]generateKey()\f[B]\f[R] method of the
\f[CR]SubtleCrypto\f[R] interface to generate a new key (for symmetric
algorithms) or key pair (for public\-key algorithms).
.SH SYNTAX
.IP
.EX
generateKey(algorithm, extractable, keyUsages)
.EE
.SS Parameters
.TP
\f[B]algorithm\f[R]
An object defining the type of key to generate and providing extra
algorithm\-specific parameters.
.RS
.IP \[bu] 2
For RSASSA\-PKCS1\-v1_5, RSA\-PSS, or RSA\-OAEP: pass an
\f[CR]RsaHashedKeyGenParams\f[R] object.
.IP \[bu] 2
For ECDSA or ECDH: pass an \f[CR]EcKeyGenParams\f[R] object.
.IP \[bu] 2
For HMAC: pass an \f[CR]HmacKeyGenParams\f[R] object.
.IP \[bu] 2
For AES\-CTR, AES\-CBC, AES\-GCM, or AES\-KW: pass an
\f[CR]AesKeyGenParams\f[R] object.
.RE
.TP
\f[B]extractable\f[R]
A boolean value indicating whether it will be possible to export the key
using \f[CR]SubtleCrypto.exportKey()\f[R] or
\f[CR]SubtleCrypto.wrapKey()\f[R].
.TP
\f[B]keyUsages\f[R]
An \f[CR]Array\f[R] indicating what can be done with the newly generated
key.
Possible values for array elements are:
.RS
.IP \[bu] 2
\f[CR]encrypt\f[R]: The key may be used to \f[CR]encrypt\f[R] messages.
.IP \[bu] 2
\f[CR]decrypt\f[R]: The key may be used to \f[CR]decrypt\f[R] messages.
.IP \[bu] 2
\f[CR]sign\f[R]: The key may be used to \f[CR]sign\f[R] messages.
.IP \[bu] 2
\f[CR]verify\f[R]: The key may be used to \f[CR]verify\f[R] signatures.
.IP \[bu] 2
\f[CR]deriveKey\f[R]: The key may be used in
\f[CR]deriving a new key\f[R].
.IP \[bu] 2
\f[CR]deriveBits\f[R]: The key may be used in \f[CR]deriving bits\f[R].
.IP \[bu] 2
\f[CR]wrapKey\f[R]: The key may be used to \f[CR]wrap a key\f[R].
.IP \[bu] 2
\f[CR]unwrapKey\f[R]: The key may be used to \f[CR]unwrap a key\f[R].
.RE
.SS Return value
A \f[CR]Promise\f[R] that fulfills with a \f[CR]CryptoKey\f[R] (for
symmetric algorithms) or a \f[CR]CryptoKeyPair\f[R] (for public\-key
algorithms).
.SS Exceptions
The promise is rejected when the following exception is encountered:
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Raised when the result is a \f[CR]CryptoKey\f[R] of type
\f[CR]secret\f[R] or \f[CR]private\f[R] but \f[CR]keyUsages\f[R] is
empty.
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Raised when the result is a \f[CR]CryptoKeyPair\f[R] and its
\f[CR]privateKey.usages\f[R] attribute is empty.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] You can \c
.UR https://mdn.github.io/dom-examples/web-crypto/encrypt-decrypt/index.html
try the working examples
.UE \c
\ on GitHub.
.RE
.SS RSA key pair generation
This code generates an RSA\-OAEP encryption key pair.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/encrypt-decrypt/rsa-oaep.js
See the complete code on GitHub.
.UE \c
.IP
.EX
\f[B]let\f[R] keyPair = \f[B]await\f[R] window.crypto.subtle.generateKey(
  {
    name: \[dq]RSA\-OAEP\[dq],
    modulusLength: 4096,
    publicExponent: \f[B]new\f[R] Uint8Array([1, 0, 1]),
    hash: \[dq]SHA\-256\[dq],
  },
  \f[B]true\f[R],
  [\[dq]encrypt\[dq], \[dq]decrypt\[dq]],
);
.EE
.SS Elliptic curve key pair generation
This code generates an ECDSA signing key pair.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/ecdsa.js
See the complete code on GitHub.
.UE \c
.IP
.EX
\f[B]let\f[R] keyPair = \f[B]await\f[R] window.crypto.subtle.generateKey(
  {
    name: \[dq]ECDSA\[dq],
    namedCurve: \[dq]P\-384\[dq],
  },
  \f[B]true\f[R],
  [\[dq]sign\[dq], \[dq]verify\[dq]],
);
.EE
.SS HMAC key generation
This code generates an HMAC signing key.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/hmac.js
See the complete code on GitHub.
.UE \c
.IP
.EX
\f[B]let\f[R] key = \f[B]await\f[R] window.crypto.subtle.generateKey(
  {
    name: \[dq]HMAC\[dq],
    hash: { name: \[dq]SHA\-512\[dq] },
  },
  \f[B]true\f[R],
  [\[dq]sign\[dq], \[dq]verify\[dq]],
);
.EE
.SS AES key generation
This code generates an AES\-GCM encryption key.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/encrypt-decrypt/aes-gcm.js
See the complete code on GitHub.
.UE \c
.IP
.EX
\f[B]let\f[R] key = \f[B]await\f[R] window.crypto.subtle.generateKey(
  {
    name: \[dq]AES\-GCM\[dq],
    length: 256,
  },
  \f[B]true\f[R],
  [\[dq]encrypt\[dq], \[dq]decrypt\[dq]],
);
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://www.keylength.com/
Cryptographic key length recommendations
.UE \c
\&.
.IP \[bu] 2
\c
.UR https://csrc.nist.gov/publications/detail/sp/800-131a/rev-2/final
NIST Transitioning the Use of Cryptographic Algorithms and Key Lengths
.UE \c
\&.
