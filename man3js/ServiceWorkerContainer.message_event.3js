.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SERVICEWORKERCONTAINER.MESSAGE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerContainer.message_event \- ServiceWorkerContainer: message
event
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]message\f[B]\f[R] event is used in a page controlled by a
service worker to receive messages from the service worker.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqmessage\(dq, (event) => { })

onmessage = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g., in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
In this example the service worker get the client\(cqs ID from a
\f[CR]fetch\f[R] event and then sends it a message using
\f[CR]Client.postMessage\f[R]:
.IP
.EX
\f[I]// service\-worker.js\f[R]
\f[B]async\f[R] \f[B]function\f[R] messageClient(clientId) {
  \f[B]const\f[R] client = \f[B]await\f[R] clients.get(clientId);
  client.postMessage(\(dqHi client!\(dq);
}

addEventListener(\(dqfetch\(dq, (event) \f[B]=>\f[R] {
  messageClient(event.clientId);
  event.respondWith(() \f[B]=>\f[R] {
    \f[I]// \&...\f[R]
  });
});
.EE
.PP
The client can receive the message by listening to the
\f[CR]message\f[R] event:
.IP
.EX
\f[I]// main.js\f[R]
navigator.serviceWorker.addEventListener(\(dqmessage\(dq, (message) \f[B]=>\f[R] {
  console.log(message);
});
.EE
.PP
Alternatively, the client can receive the message with the
\f[CR]onmessage\f[R] event handler:
.IP
.EX
\f[I]// main.js\f[R]
navigator.serviceWorker.onmessage = (message) \f[B]=>\f[R] {
  console.log(message);
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using Service Workers
.IP \(bu 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \(bu 2
Using web workers
