.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERBUNDLEENCODER.DRAWINDEXED" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderBundleEncoder.drawIndexed \- GPURenderBundleEncoder:
drawIndexed() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]drawIndexed()\f[B]\f[R] method of the
\f[CR]GPURenderBundleEncoder\f[R] interface draws indexed primitives
based on the vertex and index buffers provided by
\f[CR]setVertexBuffer()\f[R] and \f[CR]setIndexBuffer()\f[R].
.RS
.PP
\f[B]Note:\f[R] This method is functionally identical to its equivalent
on \f[CR]GPURenderPassEncoder\f[R] \(em \f[CR]drawIndexed()\f[R].
.RE
.SH SYNTAX
.IP
.EX
drawIndexed(indexCount)
drawIndexed(indexCount, instanceCount)
drawIndexed(indexCount, instanceCount, firstIndex)
drawIndexed(indexCount, instanceCount, firstIndex, baseVertex)
drawIndexed(indexCount, instanceCount, firstIndex, baseVertex, firstInstance)
.EE
.SS Parameters
.TP
\f[B]indexCount\f[R]
A number defining the number of indices to draw.
.TP
\f[B]instanceCount\f[R] \f[I](optional)\f[R]
A number defining the number of instances to draw.
If omitted, \f[CR]instanceCount\f[R] defaults to 1.
.TP
\f[B]firstIndex\f[R] \f[I](optional)\f[R]
A number defining the offset into the index buffer, in indices, to begin
drawing from.
If omitted, \f[CR]firstIndex\f[R] defaults to 0.
.TP
\f[B]baseVertex\f[R] \f[I](optional)\f[R]
A number added to each index value before indexing into the vertex
buffers.
If omitted, \f[CR]baseVertex\f[R] defaults to 0.
.TP
\f[B]firstInstance\f[R] \f[I](optional)\f[R]
A number defining the first instance to draw.
If omitted, \f[CR]firstInstance\f[R] defaults to 0.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SH EXAMPLES
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] bundleEncoder = device.createRenderBundleEncoder(descriptor);

bundleEncoder.setPipeline(pipeline);
bundleEncoder.setBindGroup(0, sceneBindGroupForRender);
bundleEncoder.setBindGroup(1, modelBindGroup);
bundleEncoder.setVertexBuffer(0, vertexBuffer);
bundleEncoder.setIndexBuffer(indexBuffer, \(dquint16\(dq);
bundleEncoder.drawIndexed(indexCount);

\f[B]const\f[R] renderBundle = bundleEncoder.finish();

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
