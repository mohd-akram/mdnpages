.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "FormDataEvent" "JS" "July 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FormDataEvent \- FormDataEvent
.SH SYNOPSIS
The \f[B]\f[CB]FormDataEvent\f[B]\f[R] interface represents a
\f[CR]formdata\f[R] event \[em] such an event is fired on an
\f[CR]HTMLFormElement\f[R] object after the entry list representing the
form\[cq]s data is constructed.
This happens when the form is submitted, but can also be triggered by
the invocation of a \f[CR]FormData()\f[R] constructor.
.PP
This allows a \f[CR]FormData\f[R] object to be quickly obtained in
response to a \f[CR]formdata\f[R] event firing, rather than needing to
put it together yourself when you wish to submit form data via a method
like \f[CR]fetch()\f[R] (see Using FormData objects).
.SH CONSTRUCTOR
.TP
\f[B]FormDataEvent()\f[R]
Creates a new \f[CR]FormDataEvent\f[R] object instance.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent interface,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]FormDataEvent.formData\f[R]
Contains the \f[CR]FormData\f[R] object representing the data contained
in the form when the event was fired.
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent interface, \f[CI]Event\f[I].\f[R]
.SH EXAMPLES
.IP
.EX
\f[I]// grab reference to form\f[R]

\f[B]const\f[R] formElem = document.querySelector(\[dq]form\[dq]);

\f[I]// submit handler\f[R]

formElem.addEventListener(\[dq]submit\[dq], (e) \f[B]=>\f[R] {
  \f[I]// on form submission, prevent default\f[R]
  e.preventDefault();

  console.log(form.querySelector(\[aq]input[name=\[dq]field1\[dq]]\[aq])); \f[I]// FOO\f[R]
  console.log(form.querySelector(\[aq]input[name=\[dq]field2\[dq]]\[aq])); \f[I]// BAR\f[R]

  \f[I]// construct a FormData object, which fires the formdata event\f[R]
  \f[B]const\f[R] formData = \f[B]new\f[R] FormData(formElem);
  \f[I]// formdata gets modified by the formdata event\f[R]
  console.log(formData.get(\[dq]field1\[dq])); \f[I]// foo\f[R]
  console.log(formData.get(\[dq]field2\[dq])); \f[I]// bar\f[R]
});

\f[I]// formdata handler to retrieve data\f[R]

formElem.addEventListener(\[dq]formdata\[dq], (e) \f[B]=>\f[R] {
  console.log(\[dq]formdata fired\[dq]);

  \f[I]// modifies the form data\f[R]
  \f[B]const\f[R] formData = e.formData;
  formData.set(\[dq]field1\[dq], formData.get(\[dq]field1\[dq]).toLowerCase());
  formData.set(\[dq]field2\[dq], formData.get(\[dq]field2\[dq]).toLowerCase());
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]fetch()\f[R]
.IP \[bu] 2
\f[CR]FormData\f[R]
.IP \[bu] 2
Using FormData objects
.IP \[bu] 2
\f[CR]<Form>\f[R]
