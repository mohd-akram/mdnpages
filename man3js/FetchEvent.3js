.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "FetchEvent" "JS" "September 1, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FetchEvent \- FetchEvent
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
This is the event type for \f[CR]fetch\f[R] events dispatched on the
service worker global scope.
It contains information about the fetch, including the request and how
the receiver will treat the response.
It provides the \f[CR]event.respondWith()\f[R] method, which allows us
to provide a response to this fetch.
.SH CONSTRUCTOR
.TP
\f[B]FetchEvent()\f[R]
Creates a new \f[CR]FetchEvent\f[R] object.
This constructor is not typically used.
The browser creates these objects and provides them to \f[CR]fetch\f[R]
event callbacks.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its ancestor, \f[CI]Event\f[I]\f[R].
.TP
\f[B]FetchEvent.clientId\f[R] \f[I](read\-only)\f[R]
The \f[CR]id\f[R] of the same\-origin \f[CR]client\f[R] that initiated
the fetch.
.TP
\f[B]FetchEvent.handled\f[R] \f[I](read\-only)\f[R]
A promise that is pending while the event has not been handled, and
fulfilled once it has.
.TP
\f[B]FetchEvent.isReload\f[R] \f[I](read\-only)\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Returns \f[CR]true\f[R] if the event was dispatched by the user
attempting to reload the page, and \f[CR]false\f[R] otherwise.
.TP
\f[B]FetchEvent.preloadResponse\f[R] \f[I](read\-only)\f[R]
A \f[CR]Promise\f[R] for a \f[CR]Response\f[R], or \f[CR]undefined\f[R]
if this fetch is not a navigation, or navigation preload is not enabled.
.TP
\f[B]FetchEvent.replacesClientId\f[R] \f[I](read\-only)\f[R]
The \f[CR]id\f[R] of the \f[CR]client\f[R] that is being replaced during
a page navigation.
.TP
\f[B]FetchEvent.resultingClientId\f[R] \f[I](read\-only)\f[R]
The \f[CR]id\f[R] of the \f[CR]client\f[R] that replaces the previous
client during a page navigation.
.TP
\f[B]FetchEvent.request\f[R] \f[I](read\-only)\f[R]
The \f[CR]Request\f[R] the browser intends to make.
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]ExtendableEvent\f[I]\f[R].
.TP
\f[B]FetchEvent.respondWith()\f[R]
Prevent the browser\[cq]s default fetch handling, and provide (a promise
for) a response yourself.
.TP
\f[B]ExtendableEvent.waitUntil()\f[R]
Extends the lifetime of the event.
Used to notify the browser of tasks that extend beyond the returning of
a response, such as streaming and caching.
.SH EXAMPLES
This fetch event uses the browser default for non\-GET requests.
For GET requests it tries to return a match in the cache, and falls back
to the network.
If it finds a match in the cache, it asynchronously updates the cache
for next time.
.IP
.EX
self.addEventListener(\[dq]fetch\[dq], (event) \f[B]=>\f[R] {
  \f[I]// Let the browser do its default thing\f[R]
  \f[I]// for non\-GET requests.\f[R]
  \f[B]if\f[R] (event.request.method !== \[dq]GET\[dq]) \f[B]return\f[R];

  \f[I]// Prevent the default, and handle the request ourselves.\f[R]
  event.respondWith(
    (\f[B]async\f[R] () \f[B]=>\f[R] {
      \f[I]// Try to get the response from a cache.\f[R]
      \f[B]const\f[R] cache = \f[B]await\f[R] caches.open(\[dq]dynamic\-v1\[dq]);
      \f[B]const\f[R] cachedResponse = \f[B]await\f[R] cache.match(event.request);

      \f[B]if\f[R] (cachedResponse) {
        \f[I]// If we found a match in the cache, return it, but also\f[R]
        \f[I]// update the entry in the cache in the background.\f[R]
        event.waitUntil(cache.add(event.request));
        \f[B]return\f[R] cachedResponse;
      }

      \f[I]// If we didn\[aq]t find a match in the cache, use the network.\f[R]
      \f[B]return\f[R] fetch(event.request);
    })(),
  );
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]fetch\f[R] event
.IP \[bu] 2
\f[CR]Promise\f[R]
.IP \[bu] 2
Fetch API
