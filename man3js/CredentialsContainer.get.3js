.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CREDENTIALSCONTAINER.GET" "3JS" "March 25, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CredentialsContainer.get \- CredentialsContainer: get() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]get()\f[B]\f[R] method of the
\f[CR]CredentialsContainer\f[R] interface returns a \f[CR]Promise\f[R]
that fulfills with a single credential, which can then be used to
authenticate a user to a website.
.PP
The method accepts a single optional \f[CR]options\f[R] argument, which
may include:
.IP \(bu 2
A \f[CR]mediation\f[R] property indicating how and whether the user
should be asked to participate in the operation.
This controls, for example, whether the site can silently sign a user in
using a stored credential.
.IP \(bu 2
A \f[CR]signal\f[R] property enabling the operation to be cancelled
using an \f[CR]AbortController\f[R].
.IP \(bu 2
One or more properties \(em \f[CR]password\f[R], \f[CR]federated\f[R],
\f[CR]identity\f[R], \f[CR]otp\f[R], \f[CR]publicKey\f[R] \(em which
indicate the types of credential being requested.
If set, the values of these properties include any parameters that the
browser needs in order to find an appropriate credential of the
requested type.
.PP
The API always fulfills with a single credential or \f[CR]null\f[R].
If multiple credentials are available and user mediation is allowed,
then the browser will ask the user to select a single credential.
.SH SYNTAX
.IP
.EX
get()
get(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that contains options for the request.
It can contain the following properties:
.RS
.TP
\f[B]mediation\f[R] \f[I](optional)\f[R]
A string indicating whether the user will be required to login for every
visit to a client app.
The value can be one of the following:
.RS
.TP
\f[B]\(dqconditional\(dq\f[R]
Discovered credentials are presented to the user in a non\-modal dialog
box along with an indication of the origin requesting credentials.
In practice, this means autofilling available credentials; see \c
.UR https://web.dev/articles/passkey-form-autofill
Sign in with a passkey through form autofill
.UE \c
\ for more details of how this is used;
\f[CR]PublicKeyCredential.isConditionalMediationAvailable()\f[R] also
provides some useful information.
.TP
\f[B]\(dqoptional\(dq\f[R]
If credentials can be handed over for a given operation without user
mediation, they will be, enabling automatic reauthentication without
user mediation.
If user mediation is required, then the user agent will ask the user to
authenticate.
This value is intended for situations where you have reasonable
confidence that a user won\(cqt be surprised or confused at seeing a
login dialog box \(em for example on a site that doesn\(cqt
automatically log users in, when a user has just clicked a
\(lqLogin/Signup\(rq button.
.TP
\f[B]\(dqrequired\(dq\f[R]
The user will always be asked to authenticate.
This value is intended for situations where you want to force user
authentication \(em for example if you want a user to reauthenticate
when a sensitive operation is being performed (like confirming a credit
card payment), or when switching users.
.TP
\f[B]\(dqsilent\(dq\f[R]
The user will not be asked to authenticate.
The user agent will automatically reauthenticate the user and log them
in if possible.
If consent is required, the promise will fulfill with \f[CR]null\f[R].
This value is intended for situations where you would want to
automatically sign a user in upon visiting a web app if possible, but if
not, you don\(cqt want to present them with a confusing login dialog
box.
Instead, you\(cqd want to wait for them to explicitly click a
\(lqLogin/Signup\(rq button.
.PP
The default value is \f[CR]\(dqoptional\(dq\f[R].
.RS
.PP
\f[B]Note:\f[R] In the case of a federated authentication (FedCM API)
request, a \f[CR]mediation\f[R] value of \f[CR]optional\f[R] or
\f[CR]silent\f[R] may result in attempted auto\-reauthentication.
Whether this occurred is communicated to the identity provider (IdP) via
the \f[CR]is_auto_selected\f[R] parameter sent to the IdP\(cqs
\f[CR]id_assertion_endpoint\f[R] during validation and the relying party
(RP) via the \f[CR]IdentityCredential.isAutoSelected\f[R] property.
This is useful for performance evaluation, security requirements (the
IdP may wish to reject automatic reauthentication requests and always
require user mediation), and general UX (an IdP or RP may wish to
present different UX for auto and non\-auto login experiences).
.RE
.RE
.TP
\f[B]signal\f[R] \f[I](optional)\f[R]
An \f[CR]AbortSignal\f[R] object instance that allows an ongoing
\f[CR]get()\f[R] operation to be aborted.
An aborted operation may complete normally (generally if the abort was
received after the operation finished) or reject with an
\f[CR]AbortError\f[R] \f[CR]DOMException\f[R].
.TP
\f[B]password\f[R] \f[I](optional)\f[R]
This option asks the browser to retrieve a stored password as a
\f[CR]PasswordCredential\f[R] object.
It is a boolean value.
.TP
\f[B]identity\f[R] \f[I](optional)\f[R]
This option asks the browser to retrieve a federated identity credential
as an \f[CR]IdentityCredential\f[R] object, using the Federated
Credential Management API.
.RS
.PP
This option\(cqs value is an \f[CR]IdentityCredentialRequestOptions\f[R]
object containing details of the specific identity providers that the
website wants to use.
.RE
.TP
\f[B]federated\f[R] \f[I](optional)\f[R]
This option asks the browser to retrieve a federated identity credential
as a \f[CR]FederatedCredential\f[R] object.
This interface is now superseded, and developers should prefer to use
the \f[CR]identity\f[R] option, if it is available.
.RS
.PP
This option\(cqs value is an object with the following properties:
.TP
\f[B]protocols\f[R]
An array of strings representing the protocols of the requested
credentials\(cq federated identity providers (for example,
\f[CR]\(dqopenidconnect\(dq\f[R]).
.TP
\f[B]providers\f[R]
An array of strings representing the credentials\(cq federated identity
providers (for example \f[CR]\(dqhttps://www.facebook.com\(dq\f[R] or
\f[CR]\(dqhttps://accounts.google.com\(dq\f[R]).
.RE
.TP
\f[B]otp\f[R] \f[I](optional)\f[R]
This option asks the browser to retrieve a one\-time password (OTP) as
an \f[CR]OTPCredential\f[R] object.
.RS
.PP
This option\(cqs value is an array of strings which may only contain the
string value \f[CR]\(dqsms\(dq\f[R].
.RE
.TP
\f[B]publicKey\f[R] \f[I](optional)\f[R]
This option asks the browser to retrieve an assertion signed using the
Web Authentication API as a \f[CR]PublicKeyCredential\f[R].
.RS
.PP
This option\(cqs value is a \f[CR]PublicKeyCredentialRequestOptions\f[R]
object.
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with one of the following subclasses
of \f[CR]Credential\f[R]:
.IP \(bu 2
\f[CR]PasswordCredential\f[R]
.IP \(bu 2
\f[CR]IdentityCredential\f[R]
.IP \(bu 2
\f[CR]FederatedCredential\f[R]
.IP \(bu 2
\f[CR]OTPCredential\f[R]
.IP \(bu 2
\f[CR]PublicKeyCredential\f[R]
.PP
If conditional mediation was specified in the \f[CR]get()\f[R] call, the
browser UI dialog is shown and the promise remains pending until the
user picks an account to sign\-in with from available autofill
suggestions:
.IP \(bu 2
If the user then makes a gesture outside of the browser UI dialog, it
closes without resolving or rejecting the promise and without causing a
user\-visible error condition.
.IP \(bu 2
If the user selects a credential, the relevant
\f[CR]PublicKeyCredential\f[R] is returned to the caller.
.PP
If a single credential cannot be unambiguously obtained, the promise
resolves with \f[CR]null\f[R].
.SS Exceptions
.TP
\f[B]AbortError\f[R] \f[B]DOMException\f[R]
The request was aborted by a call to the \f[CR]abort()\f[R] method of
the \f[CR]AbortController\f[R] associated with this method\(cqs
\f[CR]signal\f[R] option.
.TP
\f[B]IdentityCredentialError\f[R] \f[B]DOMException\f[R]
When requesting an \f[CR]IdentityCredential\f[R], the request to the ID
assertion endpoint is unable to validate the authentication, and rejects
with an error response containing information about the reason.
.TP
\f[B]NetworkError\f[R] \f[B]DOMException\f[R]
When requesting an \f[CR]IdentityCredential\f[R], the identity provider
(IdP) did not respond within 60 seconds, the provided credentials were
not valid/found, or the browser\(cqs login status for the IdP is set to
\f[CR]\(dqlogged\-out\(dq\f[R] (see Update login status using the Login
Status API for more information about FedCM login status).
In the latter case, there may be some delay in the rejection to avoid
leaking the IdP login status to the RP.
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown in one of the following situations:
.RS
.IP \(bu 2
The user canceled the request.
.IP \(bu 2
Use of this API was blocked by one of the following permissions
policies:
.RS 2
.IP \(bu 2
\f[CR]identity\-credentials\-get\f[R]
.IP \(bu 2
\f[CR]publickey\-credentials\-get\f[R]
.IP \(bu 2
\f[CR]otp\-credentials\f[R]
.RE
.IP \(bu 2
The calling origin is an opaque origin.
.RE
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
The calling domain is not a valid domain.
.SH EXAMPLES
.SS Retrieving a federated identity credential
Relying parties can call \f[CR]get()\f[R] with the \f[CR]identity\f[R]
option to make a request for users to sign in to the relying party via
an identity provider (IdP), using identity federation.
A typical request would look like this:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] signIn() {
  \f[B]const\f[R] identityCredential = \f[B]await\f[R] navigator.credentials.get({
    identity: {
      providers: [
        {
          configURL: \(dqhttps://accounts.idp.example/config.json\(dq,
          clientId: \(dq********\(dq,
          nonce: \(dq******\(dq,
        },
      ],
    },
  });
}
.EE
.PP
Check out Federated Credential Management (FedCM) API for more details
on how this works.
This call will start off the sign\-in flow described in FedCM sign\-in
flow.
.PP
A similar call including the \f[CR]context\f[R] and \f[CR]loginHint\f[R]
extensions would look like so:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] signIn() {
  \f[B]const\f[R] identityCredential = \f[B]await\f[R] navigator.credentials.get({
    identity: {
      context: \(dqsignup\(dq,
      providers: [
        {
          configURL: \(dqhttps://accounts.idp.example/config.json\(dq,
          clientId: \(dq********\(dq,
          nonce: \(dq******\(dq,
          loginHint: \(dquser1\(atexample.com\(dq,
        },
      ],
    },
  });
}
.EE
.PP
If the IdP is unable to validate a request to the ID assertion endpoint
it will reject the promise returned from
\f[CR]CredentialsContainer.get()\f[R]:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] signIn() {
  \f[B]try\f[R] {
    \f[B]const\f[R] identityCredential = \f[B]await\f[R] navigator.credentials.get({
      identity: {
        providers: [
          {
            configURL: \(dqhttps://accounts.idp.example/config.json\(dq,
            clientId: \(dq********\(dq,
            nonce: \(dq******\(dq,
          },
        ],
      },
    });
  } \f[B]catch\f[R] (e) {
    \f[I]// Handle the error in some way, for example provide information\f[R]
    \f[I]// to help the user succeed in a future sign\-in attempt\f[R]
    console.error(e);
  }
}
.EE
.SS Retrieving a public key credential
The following snippet shows a typical \f[CR]get()\f[R] call with the
WebAuthn \f[CR]publicKey\f[R] option:
.IP
.EX
\f[B]const\f[R] publicKey = {
  challenge: \f[B]new\f[R] Uint8Array([139, 66, 181, 87, 7, 203 \f[I]/* ,\&... */\f[R]]),
  rpId: \(dqacme.com\(dq,
  allowCredentials: [
    {
      type: \(dqpublic\-key\(dq,
      id: \f[B]new\f[R] Uint8Array([64, 66, 25, 78, 168, 226, 174 \f[I]/* ,\&... */\f[R]]),
    },
  ],
  userVerification: \(dqrequired\(dq,
};

navigator.credentials.get({ publicKey });
.EE
.PP
A successful \f[CR]get()\f[R] call returns a promise that resolves with
a \f[CR]PublicKeyCredential\f[R] object instance, representing a public
key credential previously created via a WebAuthn \f[CR]create()\f[R]
that has now been used to authenticate a user.
Its \f[CR]PublicKeyCredential.response\f[R] property contains an
\f[CR]AuthenticatorAssertionResponse\f[R] object providing access to
several useful pieces of information including the authenticator data,
signature, and user handle.
.IP
.EX
navigator.credentials.get({ publicKey }).then((publicKeyCredential) \f[B]=>\f[R] {
  \f[B]const\f[R] response = publicKeyCredential.response;

  \f[I]// Access authenticator data ArrayBuffer\f[R]
  \f[B]const\f[R] authenticatorData = response.authenticatorData;

  \f[I]// Access client JSON\f[R]
  \f[B]const\f[R] clientJSON = response.clientDataJSON;

  \f[I]// Access signature ArrayBuffer\f[R]
  \f[B]const\f[R] signature = response.signature;

  \f[I]// Access userHandle ArrayBuffer\f[R]
  \f[B]const\f[R] userHandle = response.userHandle;
});
.EE
.PP
Some of this data will need to be stored on the server \(em for example
the \f[CR]signature\f[R] to provide proof that authenticator possesses
the genuine private key used to create the credential, and the
\f[CR]userHandle\f[R] to link the user with the credential, sign in
attempt, and other data.
.PP
See Authenticating a user for more information about how the overall
flow works.
.SS Retrieving a one\-time password
The code below triggers the browser\(cqs permission flow when an SMS
message arrives.
If permission is granted, then the promise resolves with an
\f[CR]OTPCredential\f[R] object.
The contained \f[CR]code\f[R] value is then set as the value of an
\f[CR]<input>\f[R] form element, which is then submitted.
.IP
.EX
navigator.credentials
  .get({
    otp: { transport: [\(dqsms\(dq] },
    signal: ac.signal,
  })
  .then((otp) \f[B]=>\f[R] {
    input.value = otp.code;
    \f[B]if\f[R] (form) form.submit();
  })
  .catch((err) \f[B]=>\f[R] {
    console.error(err);
  });
.EE
