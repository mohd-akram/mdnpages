.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CredentialsContainer.get" "JS" "May 2, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CredentialsContainer.get \- CredentialsContainer: get() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]get()\f[B]\f[R] method of the
\f[CR]CredentialsContainer\f[R] interface returns a \f[CR]Promise\f[R]
that fulfills with a single credential instance that matches the
provided parameters, which the browser can then use to authenticate with
a relying party.
This is used by several different credential\-related APIs with
significantly different purposes:
.IP \[bu] 2
The Credential Management API uses \f[CR]get()\f[R] to authenticate
using basic federated credentials or username/password credentials.
.IP \[bu] 2
The Web Authentication API uses \f[CR]get()\f[R] to authenticate or
provide additional factors during MFA with public key credentials (based
on asymmetric cryptography).
.IP \[bu] 2
The Federated Credential Management (FedCM) API uses \f[CR]get()\f[R] to
authenticate with federated identity providers (IdPs).
.IP \[bu] 2
The WebOTP API uses \f[CR]get()\f[R] to request retrieval of a one\-time
password (OTP) from a specially\-formatted SMS message sent by an app
server.
.PP
The below reference page starts with a syntax section that explains the
general method call structure and parameters that apply to all the
different APIs.
After that, it is split into separate sections providing parameters,
return values, and examples specific to each API.
.SH GENERAL SYNTAX
.IP
.EX
get()
get(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that contains options for the request.
The options include criteria that the credentials are required or
allowed to have, and options for interacting with the user.
It can contain the following properties:
.RS
.TP
\f[B]mediation\f[R] \f[I](optional)\f[R]
A string indicating whether the user will be required to login for every
visit to a client app.
The value can be one of the following:
.RS
.IP \[bu] 2
\f[CR]\[dq]conditional\[dq]\f[R]: Discovered credentials are presented
to the user in a non\-modal dialog box along with an indication of the
origin requesting credentials.
In practice, this means autofilling available credentials; see \c
.UR https://web.dev/articles/passkey-form-autofill
Sign in with a passkey through form autofill
.UE \c
\ for more details of how this is used;
\f[CR]PublicKeyCredential.isConditionalMediationAvailable()\f[R] also
provides some useful information.
.IP \[bu] 2
\f[CR]\[dq]optional\[dq]\f[R]: If credentials can be handed over for a
given operation without user mediation, they will be, enabling automatic
reauthentication without user mediation.
If user mediation is required, then the user agent will ask the user to
authenticate.
This value is intended for situations where you have reasonable
confidence that a user won\[cq]t be surprised or confused at seeing a
login dialog box \[em] for example on a site that doesn\[cq]t
automatically log users in, when a user has just clicked a
\[lq]Login/Signup\[rq] button.
.IP \[bu] 2
\f[CR]\[dq]required\[dq]\f[R]: The user will always be asked to
authenticate, even if prevent silent access (see
\f[CR]CredentialsContainer.preventSilentAccess()\f[R]) is set to
\f[CR]false\f[R].
This value is intended for situations where you want to force user
authentication \[em] for example if you want a user to reauthenticate
when a sensitive operation is being performed (like confirming a credit
card payment), or when switching users.
.IP \[bu] 2
\f[CR]\[dq]silent\[dq]\f[R]: The user will not be asked to authenticate.
The user agent will automatically reauthenticate the user and log them
in if possible.
If consent is required, the promise will fulfill with \f[CR]null\f[R].
This value is intended for situations where you would want to
automatically sign a user in upon visiting a web app if possible, but if
not, you don\[cq]t want to present them with a confusing login dialog
box.
Instead, you\[cq]d want to wait for them to explicitly click a
\[lq]Login/Signup\[rq] button.
.PP
If \f[CR]mediation\f[R] is omitted, it will default to
\f[CR]\[dq]optional\[dq]\f[R].
.RS
.PP
\f[B]Note:\f[R] In the case of a federated authentication (FedCM API)
request, a \f[CR]mediation\f[R] value of \f[CR]optional\f[R] or
\f[CR]silent\f[R] may result in attempted auto\-reauthentication.
Whether this occurred is communicated to the identity provider (IdP) via
the \f[CR]is_auto_selected\f[R] parameter sent to the IdP\[cq]s
\f[CR]id_assertion_endpoint\f[R] during validation and the relying party
(RP) via the \f[CR]IdentityCredential.isAutoSelected\f[R] property.
This is useful for performance evaluation, security requirements (the
IdP may wish to reject automatic reauthentication requests and always
require user mediation), and general UX (an IdP or RP may wish to
present different UX for auto and non\-auto login experiences).
.RE
.RE
.TP
\f[B]signal\f[R] \f[I](optional)\f[R]
An \f[CR]AbortSignal\f[R] object instance that allows an ongoing
\f[CR]get()\f[R] operation to be aborted.
An aborted operation may complete normally (generally if the abort was
received after the operation finished) or reject with an
\[lq]\f[CR]AbortError\f[R]\[rq] \f[CR]DOMException\f[R].
.PP
Each of the following properties represents a \f[I]credential type\f[R]
being requested:
.TP
\f[B]federated\f[R] \f[I](optional)\f[R]
An object containing requirements for a requested credential from a
federated identify provider.
Bear in mind that the Federated Credential Management API (the
\f[CR]identity\f[R] credential type) supersedes this credential type.
See the Credential Management API section below for more details.
.TP
\f[B]password\f[R] \f[I](optional)\f[R]
A boolean value indicating that a password credential is being
requested.
See the Credential Management API section below for more details.
.TP
\f[B]identity\f[R] \f[I](optional)\f[R]
An object containing details of federated identity providers (IdPs) that
a relying party (RP) website can use for purposes such as signing in or
signing up on a website.
It causes the \f[CR]get()\f[R] call to initiate a request for a user to
sign in to an RP with an IdP.
See the Federated Credential Management API section below for more
details.
.TP
\f[B]otp\f[R] \f[I](optional)\f[R]
An object containing transport type hints.
Causes the \f[CR]get()\f[R] call to initiate a request for the retrieval
of an OTP.
See the WebOTP API section below for more details.
.TP
\f[B]publicKey\f[R] \f[I](optional)\f[R]
An object containing requirements for returned public key credentials.
Causes the \f[CR]get()\f[R] call to use an existing set of public key
credentials to authenticate to a relying party.
See the Web Authentication API section below for more details.
.RE
.SH CREDENTIAL MANAGEMENT API
The Credential Management API lets a website store and retrieve password
and federated credentials.
These capabilities allow users to sign in without typing passwords, see
the federated account they used to sign in to a site, and resume a
session without the explicit sign\-in flow of an expired session.
.SS \f[CR]federated\f[R] object structure
\f[CR]federated\f[R] will contain the following properties:
.TP
\f[B]protocols\f[R]
An array of strings representing the protocols of the requested
credentials\[cq] federated identity providers (for example,
\f[CR]\[dq]openidconnect\[dq]\f[R]).
.TP
\f[B]providers\f[R]
An array of strings representing the credentials\[cq] federated identity
providers (for example \f[CR]\[dq]https://www.facebook.com\[dq]\f[R] or
\f[CR]\[dq]https://accounts.google.com\[dq]\f[R]).
.SS \f[CR]password\f[R] boolean value
\f[CR]password\f[R] is a single boolean value.
If set to \f[CR]true\f[R], it indicates that the requested credential is
a password credential.
.SS Return value
A \f[CR]Promise\f[R] that resolves with a \f[CR]Credential\f[R] instance
matching the provided parameters:
.IP \[bu] 2
If the provided credential type was a \f[CR]federated\f[R] object, the
returned instance will be a \f[CR]FederatedCredential\f[R].
.IP \[bu] 2
If the provided credential type was a \f[CR]password\f[R] boolean value
of \f[CR]true\f[R], the returned instance will be a
\f[CR]PasswordCredential\f[R].
.PP
If a single credential cannot be unambiguously obtained, the Promise
will resolve to \f[CR]null\f[R].
.SS Examples
.IP
.EX
navigator.credentials
  .get({
    federated: {
      protocols: [\[dq]openidconnect\[dq]],
      providers: [\[dq]https://www.facebook.com\[dq], \[dq]https://accounts.google.com\[dq]],
    },
  })
  .then((fedCred) \f[B]=>\f[R] {
    console.log(fedCred.provider);
  });
.EE
.SH FEDERATED CREDENTIAL MANAGEMENT API
The Federated Credential Management (FedCM) API provides a standard
mechanism to delegate authentication or authorization of an individual
(user or entity) to trusted external parties called identity providers
(IdPs) in a privacy\-preserving way, without relying on third\-party
cookies and redirects.
.PP
An individual can then use an existing IdP account (that they are
already signed into on the browser) to sign into a website (a relying
party or RP).
The RP handles this by calling \f[CR]get()\f[R] with an
\f[CR]identity\f[R] option.
.RS
.PP
\f[B]Note:\f[R] Usage of \f[CR]get()\f[R] with the \f[CR]identity\f[R]
parameter may be blocked by an \f[CR]identity\-credentials\-get\f[R]
Permissions Policy set on your server.
.RE
.SS \f[CR]identity\f[R] object structure
\f[CR]identity\f[R] can contain the following properties:
.TP
\f[B]context\f[R] \f[I](optional)\f[R]
An enumerated value specifying the context in which the user is
authenticating with FedCM.
The browser uses this value to vary the text in its FedCM UI to better
suit the context.
Possible values are:
.RS
.IP \[bu] 2
\f[CR]continue\f[R]: Suitable for situations where the user is choosing
an identity to continue to the next page in the flow, which requires a
sign\-in.
Browsers will provide a text string similar to \[lq]Continue to
<page\-origin> with <IdP>\[rq].
.IP \[bu] 2
\f[CR]signin\f[R]: Suitable for general situations where the user is
signing in with an IdP account they\[cq]ve already used on this origin.
Browsers will provide a text string similar to \[lq]Sign in to
<page\-origin> with <IdP>\[rq].
This is the default value.
.IP \[bu] 2
\f[CR]signup\f[R]: An option for situations where the user is signing in
to the origin with a new IdP account they\[cq]ve not used here before.
Browsers will provide a text string similar to \[lq]Sign up to
<page\-origin> with <IdP>\[rq].
.IP \[bu] 2
\f[CR]use\f[R]: Suitable for situations where a different action, such
as validating a payment, is being performed.
Browsers will provide a text string similar to \[lq]Use <page\-origin>
with <IdP>\[rq].
.RE
.TP
\f[B]providers\f[R]
An array containing a single object specifying details of an IdP to be
used to sign in.
This object can contain the following properties:
.RS
.TP
\f[B]configURL\f[R]
A string specifying the URL of the IdP\[cq]s config file.
See Provide a config file for more information.
.TP
\f[B]clientId\f[R]
A string specifying the RP\[cq]s client identifier.
This information is issued by the IdP to the RP in a separate process
that is specific to the IdP.
.TP
\f[B]loginHint\f[R] \f[I](optional)\f[R]
A string providing a hint about the account option(s) the browser should
provide for the user to sign in with.
This is useful in cases where the user has already signed in and the
site asks them to reauthenticate.
Otherwise, the reauthentication process can be confusing when a user has
multiple accounts and can\[cq]t remember which one they used to sign in
previously.
The value for the \f[CR]loginHint\f[R] property can be taken from the
user\[cq]s previous sign\-in, and is matched against the
\f[CR]login_hints\f[R] values provided by the IdP in the array of user
information returned from the IdP\[cq]s accounts list endpoint.
.TP
\f[B]nonce\f[R] \f[I](optional)\f[R]
A random string that can be included to ensure the response is issued
specifically for this request and prevent replay attacks.
.RS
.PP
\f[B]Note:\f[R] Currently FedCM only allows the API to be invoked with a
single IdP, i.e.\ the \f[CR]identity.providers\f[R] array has to have a
length of 1.
Multiple IdPs must be supported via different \f[CR]get()\f[R] calls.
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with an \f[CR]IdentityCredential\f[R]
instance matching the provided parameters if the user identity is
successfully validated by the IdP.
.PP
This object contains a token that includes user identity information
that has been signed with the IdP\[cq]s digital certificate.
.PP
The RP sends the token to its server to validate the certificate, and on
success can use the (now trusted) identity information in the token to
sign them into their service (starting a new session), sign them up to
their service if they are a new user, etc.
.PP
If the \f[CR]get()\f[R] method\[cq]s promise rejects, the RP can direct
the user to the IdP login page to sign in or create an account.
.RS
.PP
\f[B]Note:\f[R] The exact nature of the token is opaque to the FedCM
API, and to the browser.
The IdP decides on the syntax and usage of it, and the RP needs to
follow the instructions provided by the IdP (see \c
.UR https://developers.google.com/identity/gsi/web/guides/verify-google-id-token
Verify the Google ID token on your server side
.UE \c
, for example) to make sure they are using it correctly.
.RE
.SS Exceptions
.TP
\f[B]IdentityCredentialError\f[R] \f[B]DOMException\f[R]
The request to the ID assertion endpoint is unable to validate the
authentication, and rejects with an error response containing
information about why.
See the Error API example below for more information on how it can be
used.
.TP
\f[B]NetworkError\f[R] \f[B]DOMException\f[R]
The IdP did not respond within 60 seconds, the provided credentials were
not valid/found, or the browser\[cq]s login status for the IdP is set to
\f[CR]\[dq]logged\-out\[dq]\f[R] (see Update login status using the
Login Status API for more information about FedCM login status).
In the latter case, there may be some delay in the rejection to avoid
leaking the IdP login status to the RP.
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Use of this feature was blocked by an
\f[CR]identity\-credentials\-get\f[R] Permissions Policy.
.SS Examples
.SS Basic example
Relying parties can call \f[CR]get()\f[R] with the \f[CR]identity\f[R]
option to make a request for users to sign in to the relying party via
an identity provider (IdP), using identity federation.
A typical request would look like this:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] signIn() {
  \f[B]const\f[R] identityCredential = \f[B]await\f[R] navigator.credentials.get({
    identity: {
      providers: [
        {
          configURL: \[dq]https://accounts.idp.example/config.json\[dq],
          clientId: \[dq]********\[dq],
          nonce: \[dq]******\[dq],
        },
      ],
    },
  });
}
.EE
.PP
Check out Federated Credential Management (FedCM) API for more details
on how this works.
This call will start off the sign\-in flow described in FedCM sign\-in
flow.
.SS Example including context and login hint
A similar call including the \f[CR]context\f[R] and \f[CR]loginHint\f[R]
extensions would look like so:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] signIn() {
  \f[B]const\f[R] identityCredential = \f[B]await\f[R] navigator.credentials.get({
    identity: {
      context: \[dq]signup\[dq],
      providers: [
        {
          configURL: \[dq]https://accounts.idp.example/config.json\[dq],
          clientId: \[dq]********\[dq],
          nonce: \[dq]******\[dq],
          loginHint: \[dq]user1\[at]example.com\[dq],
        },
      ],
    },
  });
}
.EE
.RS
.PP
\f[B]Note:\f[R] After a user has signed in with an IdP, the IdP can call
the static \f[CR]IdentityProvider.getUserInfo()\f[R] method to retrieve
their details.
\f[CR]getUserInfo()\f[R] must be called from within an IdP\-origin
\f[CR]<iframe>\f[R] to ensure that RP scripts cannot access the data.
This information can then be used to display a personalized welcome
message and sign\-in button.
This approach is already common on sites that use identity federation
for sign\-in.
However, \f[CR]getUserInfo()\f[R] offers a way to achieve this without
relying on third\-party cookies.
.RE
.SS Example including Error API information
If the IdP is unable to validate the authentication for a request to the
ID assertion endpoint it will respond with an error.
.PP
The error may be handled in code as shown:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] signIn() {
  \f[B]try\f[R] {
    \f[B]const\f[R] identityCredential = \f[B]await\f[R] navigator.credentials.get({
      identity: {
        providers: [
          {
            configURL: \[dq]https://accounts.idp.example/config.json\[dq],
            clientId: \[dq]********\[dq],
            nonce: \[dq]******\[dq],
          },
        ],
      },
    });
  } \f[B]catch\f[R] (e) {
    \f[I]// Handle the error in some way, for example provide information\f[R]
    \f[I]// to help the user succeed in a future sign\-in attempt\f[R]
    \f[B]const\f[R] code = e.code;
    \f[B]const\f[R] url = e.url;
  }
}
.EE
.SH WEBOTP API
The WebOTP API lets a web client request an OTP from an SMS sent by the
web app\[cq]s server.
This capability is intended to streamline usage of OTPs in web apps, for
example when using phone numbers as additional factors in sign\-in
flows.
The OTP is retrieved from the SMS and can be set as a verification input
value automatically after the user gives consent, avoiding the need for
the user to manually go into their SMS app and copy and paste it.
.SS \f[CR]otp\f[R] object structure
\f[CR]otp\f[R] will contain the following properties:
.TP
\f[B]transport\f[R]
An array of strings representing transport hints for how the OTP should
ideally be transmitted.
This will always contain a single hint \[em] \f[CR]\[dq]sms\[dq]\f[R].
Unknown values will be ignored.
.SS Return value
A \f[CR]Promise\f[R] that resolves with an \f[CR]OTPCredential\f[R]
object instance.
.SS Exceptions
.TP
\f[B]AbortError\f[R] \f[B]DOMException\f[R]
The \f[CR]get()\f[R] operation is associated with an
\f[CR]AbortSignal\f[R] (i.e., set in the \f[CR]signal\f[R] property)
that has already been aborted.
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
The calling origin is an opaque origin.
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Either the usage is blocked by a \f[CR]otp\-credentials\f[R] Permissions
Policy or the calling domain is not a valid domain.
.SS Examples
The below code triggers the browser\[cq]s permission flow when an SMS
message arrives.
If permission is granted, then the promise resolves with an
\f[CR]OTPCredential\f[R] object.
The contained \f[CR]code\f[R] value is then set as the value of an
\f[CR]<input>\f[R] form element, which is then submitted.
.IP
.EX
navigator.credentials
  .get({
    otp: { transport: [\[dq]sms\[dq]] },
    signal: ac.signal,
  })
  .then((otp) \f[B]=>\f[R] {
    input.value = otp.code;
    \f[B]if\f[R] (form) form.submit();
  })
  .catch((err) \f[B]=>\f[R] {
    console.error(err);
  });
.EE
.RS
.PP
\f[B]Note:\f[R] For a full explanation of the code, see the WebOTP API
landing page.
You can also \c
.UR https://web-otp.glitch.me/
see this code as part of a full working demo
.UE \c
\&.
.RE
.SH WEB AUTHENTICATION API
The Web Authentication API enables strong authentication with public key
cryptography, enabling passwordless authentication and/or secure
multi\-authentication (MFA) without SMS texts.
Check out the linked API landing page for more usage information.
.RS
.PP
\f[B]Note:\f[R] Usage of \f[CR]get()\f[R] with the \f[CR]publicKey\f[R]
parameter may be blocked by a \f[CR]publickey\-credentials\-get\f[R]
Permissions Policy set on your server.
.RE
.SS \f[CR]publicKey\f[R] object structure
\f[CR]publicKey\f[R] can contain the following properties:
.TP
\f[B]allowCredentials\f[R] \f[I](optional)\f[R]
An array of objects defining a restricted list of the acceptable
credentials for retrieval.
Each object will contain the following properties:
.RS
.TP
\f[B]id\f[R]
An \f[CR]ArrayBuffer\f[R], \f[CR]TypedArray\f[R], or \f[CR]DataView\f[R]
representing the ID of the public key credential to retrieve.
This value is mirrored by the \f[CR]rawId\f[R] property of the
\f[CR]PublicKeyCredential\f[R] object returned by a successful
\f[CR]get()\f[R] call.
.TP
\f[B]transports\f[R]
An array of strings providing hints as to the methods the client could
use to communicate with the relevant authenticator of the public key
credential to retrieve.
Possible transports are: \f[CR]\[dq]ble\[dq]\f[R],
\f[CR]\[dq]hybrid\[dq]\f[R], \f[CR]\[dq]internal\[dq]\f[R],
\f[CR]\[dq]nfc\[dq]\f[R], and \f[CR]\[dq]usb\[dq]\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] This value is mirrored by the return value of the
\f[CR]PublicKeyCredential.response.getTransports()\f[R] method of the
\f[CR]PublicKeyCredential\f[R] object returned by the
\f[CR]create()\f[R] call that originally created the credential.
At that point, it should be stored by the app for later use.
.RE
.RE
.TP
\f[B]type\f[R]
A string defining the type of the public key credential to retrieve.
This can currently take a single value,
\f[CR]\[dq]public\-key\[dq]\f[R], but more values may be added in the
future.
This value is mirrored by the \f[CR]type\f[R] property of the
\f[CR]PublicKeyCredential\f[R] object returned by a successful
\f[CR]get()\f[R] call.
.PP
If \f[CR]allowCredentials\f[R] is omitted, it will default to an empty
array, meaning that any credential is potentially acceptable for
retrieval without the relying party first providing an ID.
.RE
.TP
\f[B]attestation\f[R] \f[I](optional)\f[R]
A string specifying the relying party\[cq]s preference for how the
attestation statement (i.e., provision of verifiable evidence of the
authenticity of the authenticator and its data) is conveyed during
authentication.
The value can be one of the following:
.RS
.TP
\f[B]\[dq]none\[dq]\f[R]
Specifies that the relying party is not interested in authenticator
attestation.
This might be to avoid additional user consent for round trips to the
relying party server to relay identifying information, or round trips to
an attestation certificate authority (CA), with the aim of making the
authentication process smoother.
If \f[CR]\[dq]none\[dq]\f[R] is chosen as the \f[CR]attestation\f[R]
value, and the authenticator signals that it uses a CA to generate its
attestation statement, the client app will replace it with a
\[lq]None\[rq] attestation statement, indicating that no attestation
statement is available.
.TP
\f[B]\[dq]direct\[dq]\f[R]
Specifies that the relying party wants to receive the attestation
statement as generated by the authenticator.
.TP
\f[B]\[dq]enterprise\[dq]\f[R]
Specifies that the relying party wants to receive an attestation
statement that may include uniquely identifying information.
This is intended for controlled deployments within an enterprise where
the organization wishes to tie registrations to specific authenticators.
.TP
\f[B]\[dq]indirect\[dq]\f[R]
Specifies that the relying party wants to receive a verifiable
attestation statement, but it will allow the client to decide how to
receive it.
For example, the client could choose to replace the authenticator\[cq]s
assertion statement with one generated by an anonymization CA to protect
user privacy.
.PP
If \f[CR]attestation\f[R] is omitted, it will default to
\f[CR]\[dq]none\[dq]\f[R].
.RE
.TP
\f[B]attestationFormats\f[R] \f[I](optional)\f[R]
An array of strings specifying the relying party\[cq]s preference for
the attestation statement format used by the authenticator.
Values should be ordered from highest to lowest preference, and should
be considered hints \[em] the authenticator may choose to issue an
attestation statement in a different format.
For a list of valid formats, see \c
.UR https://www.iana.org/assignments/webauthn/webauthn.xhtml#webauthn-attestation-statement-format-ids
WebAuthn Attestation Statement Format Identifiers
.UE \c
\&.
.RS
.PP
If omitted, \f[CR]attestationFormats\f[R] defaults to an empty array.
.RE
.TP
\f[B]challenge\f[R]
An \f[CR]ArrayBuffer\f[R], \f[CR]TypedArray\f[R], or \f[CR]DataView\f[R]
originating from the relying party\[cq]s server and used as a \c
.UR https://en.wikipedia.org/wiki/Challenge%E2%80%93response_authentication
cryptographic challenge
.UE \c
\&.
This value will be signed by the authenticator and the signature will be
sent back as part of the
\f[CR]AuthenticatorAssertionResponse.signature\f[R] (available in the
\f[CR]response\f[R] property of the \f[CR]PublicKeyCredential\f[R]
object returned by a successful \f[CR]get()\f[R] call).
.TP
\f[B]extensions\f[R] \f[I](optional)\f[R]
An object containing properties representing the input values for any
requested extensions.
These extensions are used to specific additional processing by the
client or authenticator during the authentication process.
Examples include dealing with legacy FIDO API credentials, and
evaluating outputs from a pseudo\-random function (PRF) associated with
a credential.
.RS
.PP
Extensions are optional and different browsers may recognize different
extensions.
Processing extensions is always optional for the client: if a browser
does not recognize a given extension, it will just ignore it.
For information on using extensions, and which ones are supported by
which browsers, see Web Authentication extensions.
.RE
.TP
\f[B]rpId\f[R] \f[I](optional)\f[R]
A string that specifies the relying party\[cq]s identifier (for example
\f[CR]\[dq]login.example.org\[dq]\f[R]).
For security purposes:
.RS
.IP \[bu] 2
The calling web app verifies that \f[CR]rpId\f[R] matches the relying
party\[cq]s origin.
.IP \[bu] 2
The authenticator verifies that \f[CR]rpId\f[R] matches the
\f[CR]rpId\f[R] of the credential used for the authentication ceremony.
.PP
If \f[CR]rpId\f[R] is omitted, it will default to the current
origin\[cq]s domain.
.RE
.TP
\f[B]timeout\f[R] \f[I](optional)\f[R]
A numerical hint, in milliseconds, indicating the time the relying party
is willing to wait for the retrieval operation to complete.
This hint may be overridden by the browser.
.TP
\f[B]userVerification\f[R] \f[I](optional)\f[R]
A string specifying the relying party\[cq]s requirements for user
verification of the authentication process.
This verification is initiated by the authenticator, which will request
the user to provide an available factor (for example a PIN or a
biometric input of some kind).
.RS
.PP
The value can be one of the following:
.TP
\f[B]\[dq]required\[dq]\f[R]
The relying party requires user verification, and the operation will
fail if it does not occur.
.TP
\f[B]\[dq]preferred\[dq]\f[R]
The relying party prefers user verification if possible, but the
operation will not fail if it does not occur.
.TP
\f[B]\[dq]discouraged\[dq]\f[R]
The relying party does not want user verification, in the interests of
making user interaction as smooth as possible.
.PP
If \f[CR]userVerification\f[R] is omitted, it will default to
\f[CR]\[dq]preferred\[dq]\f[R].
.RE
.TP
\f[B]hints\f[R] \f[I](optional)\f[R]
An array of strings providing hints as to what authentication UI the
user\-agent should provide for the user.
.RS
.PP
The values can be any of the following:
.TP
\f[B]\[dq]security\-key\[dq]\f[R]
Authentication requires a separate dedicated physical device to provide
the key.
.TP
\f[B]\[dq]client\-device\[dq]\f[R]
The user authenticates using their own device, such as a phone.
.TP
\f[B]\[dq]hybrid\[dq]\f[R]
Authentication relies on a combination of authorization/authentication
methods, potentially relying on both user and server\-based mechanisms.
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with an
\f[CR]PublicKeyCredential\f[R] instance matching the provided
parameters.
If a single credential cannot be unambiguously obtained, the Promise
will resolve to \f[CR]null\f[R].
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Usage was blocked by a \f[CR]publickey\-credentials\-get\f[R]
Permissions Policy.
.SS Examples
The following snippet shows a typical \f[CR]get()\f[R] call with the
WebAuthn \f[CR]publicKey\f[R] option:
.IP
.EX
\f[B]const\f[R] publicKey = {
  challenge: \f[B]new\f[R] Uint8Array([139, 66, 181, 87, 7, 203, ...]),
  rpId: \[dq]acme.com\[dq],
  allowCredentials: [{
    type: \[dq]public\-key\[dq],
    id: \f[B]new\f[R] Uint8Array([64, 66, 25, 78, 168, 226, 174, ...])
  }],
  userVerification: \[dq]required\[dq],
}

navigator.credentials.get({ publicKey })
.EE
.PP
A successful \f[CR]get()\f[R] call returns a promise that resolves with
a \f[CR]PublicKeyCredential\f[R] object instance, representing a public
key credential previously created via a WebAuthn \f[CR]create()\f[R]
that has now been used to authenticate a user.
Its \f[CR]PublicKeyCredential.response\f[R] property contains an
\f[CR]AuthenticatorAssertionResponse\f[R] object providing access to
several useful pieces of information including the authenticator data,
signature, and user handle.
.IP
.EX
navigator.credentials.get({ publicKey }).then((publicKeyCredential) \f[B]=>\f[R] {
  \f[B]const\f[R] response = publicKeyCredential.response;

  \f[I]// Access authenticator data ArrayBuffer\f[R]
  \f[B]const\f[R] authenticatorData = response.authenticatorData;

  \f[I]// Access client JSON\f[R]
  \f[B]const\f[R] clientJSON = response.clientDataJSON;

  \f[I]// Access signature ArrayBuffer\f[R]
  \f[B]const\f[R] signature = response.signature;

  \f[I]// Access userHandle ArrayBuffer\f[R]
  \f[B]const\f[R] userHandle = response.userHandle;
});
.EE
.PP
Some of this data will need to be stored on the server \[em] for example
the \f[CR]signature\f[R] to provide proof that authenticator possesses
the genuine private key used to create the credential, and the
\f[CR]userHandle\f[R] to link the user with the credential, sign in
attempt, and other data.
.RS
.PP
\f[B]Note:\f[R] See Authenticating a user for more information about how
the overall flow works.
.RE
