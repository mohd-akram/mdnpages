.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "OVR_multiview2" "JS" "January 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OVR_multiview2 \- OVR_multiview2 extension
.SH SYNOPSIS
The \f[CR]OVR_multiview2\f[R] extension is part of the WebGL API and
adds support for rendering into multiple views simultaneously.
This especially useful for virtual reality (VR) and WebXR.
.PP
For more information, see also:
.IP \[bu] 2
\c
.UR https://blog.mozvr.com/multiview-on-webxr/
Multiview on WebXR
.UE \c
.IP \[bu] 2
\c
.UR https://doc.babylonjs.com/divingDeeper/cameras/multiViewsPart1
Multiview in babylon.js
.UE \c
.IP \[bu] 2
\c
.UR https://community.arm.com/arm-community-blogs/b/graphics-gaming-and-vr-blog/posts/optimizing-virtual-reality-understanding-multiview
Optimizing Virtual Reality: Understanding Multiview
.UE \c
.IP \[bu] 2
\c
.UR https://developer.oculus.com/documentation/oculus-browser/latest/concepts/browser-multiview/
Multiview WebGL Rendering for Oculus Browser 6.0+
.UE \c
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] Support depends on the system\[cq]s graphics driver
(Windows+ANGLE and Android are supported; Windows+GL, Mac, Linux are not
supported).
.PP
This extension is only available to WebGL 2 contexts as it needs GLSL
3.00 and texture arrays.
.PP
Currently, there is no way to use multiview to render to a multisampled
backbuffer, so you should create contexts with
\f[CR]antialias: false\f[R].
However, the Oculus browser (6+) also supports multisampling using the
\c
.UR https://developer.oculus.com/documentation/oculus-browser/latest/concepts/browser-multiview/#using-multiview-in-webgl-20
\f[CR]OCULUS_multiview\f[R]
.UE \c
\ extension.
See also \c
.UR https://github.com/KhronosGroup/WebGL/issues/2912
this WebGL issue
.UE \c
\&.
.RE
.SH CONSTANTS
This extension exposes 4 constants that can be used in
\f[CR]getParameter()\f[R] or
\f[CR]getFramebufferAttachmentParameter()\f[R].
.TP
\f[B]FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR\f[R]
Number of views of the framebuffer object attachment.
.TP
\f[B]FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR\f[R]
Base view index of the framebuffer object attachment.
.TP
\f[B]MAX_VIEWS_OVR\f[R]
The maximum number of views.
Most VR headsets have two views, but there are prototypes of headset
with ultra\-wide FOV using 4 views which is currently the maximum number
of views supported by multiview.
.TP
\f[B]FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR\f[R]
If baseViewIndex is not the same for all framebuffer attachment points
where the value of \f[CR]FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\f[R] is not
\f[CR]NONE\f[R], the framebuffer is considered incomplete.
Calling \f[CR]checkFramebufferStatus\f[R] for a framebuffer in this
state returns \f[CR]FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR\f[R].
.SH INSTANCE METHODS
.TP
\f[B]framebufferTextureMultiviewOVR()\f[R]
Simultaneously renders to multiple elements of a 2D texture array.
.SH EXAMPLES
This example is taken from the \c
.UR https://www.khronos.org/registry/webgl/extensions/OVR_multiview2/
specification
.UE \c
\&.
.IP
.EX
\f[B]const\f[R] gl = document
  .createElement(\[dq]canvas\[dq])
  .getContext(\[dq]webgl2\[dq], { antialias: \f[B]false\f[R] });
\f[B]const\f[R] ext = gl.getExtension(\[dq]OVR_multiview2\[dq]);
\f[B]const\f[R] fb = gl.createFramebuffer();
gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);

\f[B]const\f[R] colorTex = gl.createTexture();
gl.bindTexture(gl.TEXTURE_2D_ARRAY, colorTex);
gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.RGBA8, 512, 512, 2);
ext.framebufferTextureMultiviewOVR(
  gl.DRAW_FRAMEBUFFER,
  gl.COLOR_ATTACHMENT0,
  colorTex,
  0,
  0,
  2,
);

\f[B]const\f[R] depthStencilTex = gl.createTexture();
gl.bindTexture(gl.TEXTURE_2D_ARRAY, depthStencilTex);
gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.DEPTH32F_STENCIL8, 512, 512, 2);

ext.framebufferTextureMultiviewOVR(
  gl.DRAW_FRAMEBUFFER,
  gl.DEPTH_STENCIL_ATTACHMENT,
  depthStencilTex,
  0,
  0,
  2,
);
gl.drawElements(\f[I]/* \&... */\f[R]); \f[I]// draw will be broadcasted to the layers of colorTex and depthStencilTex.\f[R]
.EE
.PP
Shader code
.IP
.EX
version 300 es
extension GL_OVR_multiview2 : require
precision mediump float;
layout (num_views = 2) in;
in vec4 inPos;
uniform mat4 u_viewMatrices[2];
void main() {
  gl_Position = u_viewMatrices[gl_ViewID_OVR] * inPos;
}
.EE
.PP
Also, see this \c
.UR https://threejs.org/examples/?q=mult#webgl_multiple_views
three.js
.UE \c
\ demo for a live multiview example.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getParameter()\f[R]
.IP \[bu] 2
WebXR
