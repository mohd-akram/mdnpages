.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Element.click_event" "JS" "August 15, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.click_event \- Element: click event
.SH SYNOPSIS
An element receives a \f[B]\f[CB]click\f[B]\f[R] event when any of the
following occurs:
.IP \[bu] 2
A pointing\-device button (such as a mouse\[cq]s primary button) is both
pressed and released while the pointer is located inside the element.
.IP \[bu] 2
A touch gesture is performed on the element.
.IP \[bu] 2
Any user interaction that is equivalent to a click occurs, such as
pressing the Space key or Enter key while the element is focused.
.RS
.PP
\f[B]Note:\f[R] In practice, browsers don\[cq]t fire the
\f[CR]click\f[R] event for custom controls such as a \f[CR]<div>\f[R]
with \f[CR]tabindex=\[dq]0\[dq]\f[R].
To check the reason behind this behavior, see this \c
.UR https://crbug.com/40776466
Chromium issue
.UE \c
\&.
.RE
.PP
If the button is pressed on one element and the pointer is moved outside
the element before the button is released, the event is fired on the
most specific ancestor element that contained both elements.
.PP
\f[CR]click\f[R] fires after both the \f[CR]mousedown\f[R] and
\f[CR]mouseup\f[R] events have fired, in that order.
.PP
The event is a device\-independent event \[em] meaning it can be
activated by touch, keyboard, mouse, and any other mechanism provided by
assistive technology.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]click\[dq], (event) \f[B]=>\f[R] {});

onclick = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]PointerEvent\f[R].
Inherits from \f[CR]MouseEvent\f[R].
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the specification the event type
for this event was a \f[CR]MouseEvent\f[R], and this is still the type
passed in Firefox and Safari.
.RE
.SH EVENT PROPERTIES
\f[I]This interface inherits properties from \f[CI]MouseEvent\f[I] and
\f[CI]Event\f[I].\f[R]
.TP
\f[B]PointerEvent.altitudeAngle\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Represents the angle between a transducer (a pointer or stylus) axis and
the X\-Y plane of a device screen.
.TP
\f[B]PointerEvent.azimuthAngle\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Represents the angle between the Y\-Z plane and the plane containing
both the transducer (a pointer or stylus) axis and the Y axis.
.TP
\f[B]PointerEvent.pointerId\f[R] \f[I](read\-only)\f[R]
A unique identifier for the pointer causing the event.
.TP
\f[B]PointerEvent.width\f[R] \f[I](read\-only)\f[R]
The width (magnitude on the X axis), in CSS pixels, of the contact
geometry of the pointer.
.TP
\f[B]PointerEvent.height\f[R] \f[I](read\-only)\f[R]
The height (magnitude on the Y axis), in CSS pixels, of the contact
geometry of the pointer.
.TP
\f[B]PointerEvent.pressure\f[R] \f[I](read\-only)\f[R]
The normalized pressure of the pointer input in the range \f[CR]0\f[R]
to \f[CR]1\f[R], where \f[CR]0\f[R] and \f[CR]1\f[R] represent the
minimum and maximum pressure the hardware is capable of detecting,
respectively.
.TP
\f[B]PointerEvent.tangentialPressure\f[R] \f[I](read\-only)\f[R]
The normalized tangential pressure of the pointer input (also known as
barrel pressure or \c
.UR https://en.wikipedia.org/wiki/Cylinder_stress
cylinder stress
.UE \c
) in the range \f[CR]\-1\f[R] to \f[CR]1\f[R], where \f[CR]0\f[R] is the
neutral position of the control.
.TP
\f[B]PointerEvent.tiltX\f[R] \f[I](read\-only)\f[R]
The plane angle (in degrees, in the range of \f[CR]\-90\f[R] to
\f[CR]90\f[R]) between the Y\[en]Z plane and the plane containing both
the pointer (e.g.\ pen stylus) axis and the Y axis.
.TP
\f[B]PointerEvent.tiltY\f[R] \f[I](read\-only)\f[R]
The plane angle (in degrees, in the range of \f[CR]\-90\f[R] to
\f[CR]90\f[R]) between the X\[en]Z plane and the plane containing both
the pointer (e.g.\ pen stylus) axis and the X axis.
.TP
\f[B]PointerEvent.twist\f[R] \f[I](read\-only)\f[R]
The clockwise rotation of the pointer (e.g.\ pen stylus) around its
major axis in degrees, with a value in the range \f[CR]0\f[R] to
\f[CR]359\f[R].
.TP
\f[B]PointerEvent.pointerType\f[R] \f[I](read\-only)\f[R]
Indicates the device type that caused the event (mouse, pen, touch,
etc.).
.TP
\f[B]PointerEvent.isPrimary\f[R] \f[I](read\-only)\f[R]
Indicates if the pointer represents the primary pointer of this pointer
type.
.SH USAGE NOTES
The \f[CR]PointerEvent\f[R] object passed into the event handler for
\f[CR]click\f[R] has its \f[CR]detail\f[R] property set to the number of
times the \f[CR]target\f[R] was clicked.
In other words, \f[CR]detail\f[R] will be 2 for a double\-click, 3 for
triple\-click, and so forth.
This counter resets after a short interval without any clicks occurring;
the specifics of how long that interval is may vary from browser to
browser and across platforms.
The interval is also likely to be affected by user preferences; for
example, accessibility options may extend this interval to make it
easier to perform multiple clicks with adaptive interfaces.
.SH EXAMPLES
This example displays the number of consecutive clicks on a
\f[CR]<button>\f[R].
.SS HTML
.IP
.EX
<\f[B]button\f[R]>Click</\f[B]button\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] button = document.querySelector(\[dq]button\[dq]);

button.addEventListener(\[dq]click\[dq], (event) \f[B]=>\f[R] {
  button.textContent = \[ga]Click count: ${event.detail}\[ga];
});
.EE
.SS Result
Try making rapid, repeated clicks on the button to increase the click
count.
If you take a break between clicks, the count will reset.
.SH SEE ALSO
.IP \[bu] 2
Introduction to events
.IP \[bu] 2
\f[CR]auxclick\f[R]
.IP \[bu] 2
\f[CR]contextmenu\f[R]
.IP \[bu] 2
\f[CR]dblclick\f[R]
.IP \[bu] 2
\f[CR]mousedown\f[R]
.IP \[bu] 2
\f[CR]mouseup\f[R]
.IP \[bu] 2
\f[CR]pointerdown\f[R]
.IP \[bu] 2
\f[CR]pointerup\f[R]
