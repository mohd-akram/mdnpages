.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Navigator.requestMediaKeySystemAccess" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Navigator.requestMediaKeySystemAccess \- Navigator:
requestMediaKeySystemAccess() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]requestMediaKeySystemAccess()\f[B]\f[R] method of the
\f[CR]Navigator\f[R] interface returns a \f[CR]Promise\f[R] which
delivers a \f[CR]MediaKeySystemAccess\f[R] object that can be used to
access a particular media key system, which can in turn be used to
create keys for decrypting a media stream.
.PP
This method is part of the Encrypted Media Extensions API, which brings
support for encrypted media and DRM\-protected video to the web.
.PP
This method may have user\-visible effects such as asking for permission
to access one or more system resources.
Consider that when deciding when to call
\f[CR]requestMediaKeySystemAccess()\f[R]; you don\[cq]t want those
requests to happen at inconvenient times.
As a general rule, this function should be called only when it\[cq]s
about time to create and use a \f[CR]MediaKeys\f[R] object by calling
the returned \f[CR]MediaKeySystemAccess\f[R] object\[cq]s
\f[CR]createMediaKeys()\f[R] method.
.SH SYNTAX
.IP
.EX
requestMediaKeySystemAccess(keySystem, supportedConfigurations)
.EE
.SS Parameters
.TP
\f[B]keySystem\f[R]
A string identifying the key system.
For example \f[CR]com.example.some\-system\f[R] or
\f[CR]org.w3.clearkey\f[R].
.TP
\f[B]supportedConfigurations\f[R]
A non\-empty \f[CR]Array\f[R] of objects conforming to the object
returned by \f[CR]MediaKeySystemAccess.getConfiguration\f[R].
The first element with a satisfiable configuration will be used.
.RS
.PP
Each object may have the following properties:
.RS
.PP
\f[B]Note:\f[R] Either \f[CR]videoCapabilities\f[R] or
\f[CR]audioCapabilities\f[R] may be empty, but not both!
.RE
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
An optional label for the configuration, which defaults to
\f[CR]\[dq]\[dq]\f[R].
This label is preserved for configurations fetched using
\f[CR]MediaKeySystemAccess.getConfiguration\f[R]
.TP
\f[B]initDataTypes\f[R]
An array of strings that indicate the data type names for the supported
initialization data formats (default to an empty array).
These names are names like \f[CR]\[dq]cenc\[dq]\f[R],
\f[CR]\[dq]keyids\[dq]\f[R] and \f[CR]\[dq]webm\[dq]\f[R] that are
defined in the \c
.UR https://www.w3.org/TR/eme-initdata-registry/
Encrypted Media Extensions Initialization Data Format Registry
.UE \c
\&.
.TP
\f[B]audioCapabilities\f[R]
An array of supported audio capabilities.
If the array is empty the content type does not support audio
capabilities.
.RS
.PP
Each object in the array has the following properties:
.TP
\f[B]contentType\f[R]
A string indicating the media MIME\-type of the media resource, such as
\f[CR]\[dq]audio/mp4;codecs=\[rs]\[dq]mp4a.40.2\[rs]\[dq]\f[R].
Note that the empty string is invalid, and that if the MIME\-type
definition includes parameters, such as \f[CR]codecs\f[R], these must
also be included.
.TP
\f[B]encryptionScheme\f[R]
The encryption scheme associated with the content type, such as
\f[CR]cenc\f[R], \f[CR]cbcs\f[R], \f[CR]cbcs\-1\-9\f[R].
This value should be set by an application (it defaults to
\f[CR]null\f[R], indicating that any encryption scheme may be used).
.TP
\f[B]robustness\f[R]
The robustness level associated with the content type.
The empty string indicates that any ability to decrypt and decode the
content type is acceptable.
.RE
.TP
\f[B]videoCapabilities\f[R]
An array of supported video capabilities.
The objects in the array have the same form as those in
\f[CR]audioCapabilities\f[R].
.TP
\f[B]distinctiveIdentifier\f[R]
A string indicating whether the implementation may use \[lq]distinctive
identifiers\[rq] (or distinctive permanent identifiers) for any
operations associated with any object created from this configuration.
The allowed values are:
.RS
.TP
\f[B]required\f[R]
The returned object must support this feature.
.TP
\f[B]optional\f[R]
The returned object may support this feature.
This is the default
.TP
\f[B]not\-allowed\f[R]
The returned object must not support or use this feature.
.RE
.TP
\f[B]persistentState\f[R]
A string indicating whether the returned object must be able to persist
session data or any other type of state.
The values are the same as for \f[CR]distinctiveIdentifier\f[R] and have
the same meaning: \f[CR]required\f[R], \f[CR]optional\f[R] (default),
\f[CR]not\-allowed\f[R].
Only \[lq]temporary\[rq] sessions may be created when persistent state
is not allowed.
.TP
\f[B]sessionTypes\f[R]
An array of strings indicating the session types that must be supported.
Permitted values include:
.RS
.TP
\f[B]temporary\f[R]
A session for which the license, key(s) and record of or data related to
the session are not persisted.
The application does not need to manage such storage.
Implementations must support this option, and it is the default.
.TP
\f[B]persistent\-license\f[R]
A session for which the license (and potentially other data related to
the session) will be persisted.
A record of the license and associated keys persists even if the license
is destroyed, providing an attestation that the license and key(s) it
contains are no longer usable by the client.
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] that fulfils with a \f[CR]MediaKeySystemAccess\f[R]
object representing the media key system configuration described by
\f[CR]keySystem\f[R] and \f[CR]supportedConfigurations\f[R].
.SS Exceptions
In case of an error, the returned \f[CR]Promise\f[R] is rejected with a
\f[CR]DOMException\f[R] whose name indicates what kind of error
occurred.
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Either the specified \f[CR]keySystem\f[R] isn\[cq]t supported by the
platform or the browser, or none of the configurations specified by
\f[CR]supportedConfigurations\f[R] can be satisfied (if, for example,
none of the \f[CR]codecs\f[R] specified in \f[CR]contentType\f[R] are
available).
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Use of this feature was blocked by
\f[CR]Permissions\-Policy: encrypted\-media\f[R].
.TP
\f[B]TypeError\f[R]
Either \f[CR]keySystem\f[R] is an empty string or the
\f[CR]supportedConfigurations\f[R] array is empty.
.SH EXAMPLES
The example below shows how you might use
\f[CR]requestMediaKeySystemAccess()\f[R], specifying a key system and
configuration.
.IP
.EX
\f[B]const\f[R] clearKeyOptions = [
  {
    initDataTypes: [\[dq]keyids\[dq], \[dq]webm\[dq]],
    audioCapabilities: [
      { contentType: \[aq]audio/webm; codecs=\[dq]opus\[dq]\[aq] },
      { contentType: \[aq]audio/webm; codecs=\[dq]vorbis\[dq]\[aq] },
    ],
    videoCapabilities: [
      { contentType: \[aq]video/webm; codecs=\[dq]vp9\[dq]\[aq] },
      { contentType: \[aq]video/webm; codecs=\[dq]vp8\[dq]\[aq] },
    ],
  },
];

navigator
  .requestMediaKeySystemAccess(\[dq]org.w3.clearkey\[dq], clearKeyOptions)
  .then((keySystemAccess) \f[B]=>\f[R] {
    \f[I]/* use the access to get create keys */\f[R]
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
Encrypted Media Extensions API
.IP \[bu] 2
Media Capture and Streams API
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
\f[CR]MediaCapabilities.decodingInfo()\f[R]
