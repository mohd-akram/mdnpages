.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Navigator.requestMediaKeySystemAccess" "JS" "February 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Navigator.requestMediaKeySystemAccess \- Navigator:
requestMediaKeySystemAccess() method
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]Navigator.requestMediaKeySystemAccess()\f[B]\f[R] method
returns a \f[CR]Promise\f[R] which delivers a
\f[CR]MediaKeySystemAccess\f[R] object that can be used to access a
particular media key system, which can in turn be used to create keys
for decrypting a media stream.
This method is part of the Encrypted Media Extensions API, which brings
support for encrypted media and DRM\-protected video to the web.
.PP
This method may have user\-visible effects such as asking for permission
to access one or more system resources.
Consider that when deciding when to call
\f[CR]requestMediaKeySystemAccess()\f[R]; you don\[cq]t want those
requests to happen at inconvenient times.
As a general rule, this function should be called only when it\[cq]s
about time to create and use a \f[CR]MediaKeys\f[R] object by calling
the returned \f[CR]MediaKeySystemAccess\f[R] object\[cq]s
\f[CR]createMediaKeys()\f[R] method.
.SH SYNTAX
.IP
.EX
requestMediaKeySystemAccess(keySystem, supportedConfigurations)
.EE
.SS Parameters
.TP
\f[B]keySystem\f[R]
A string identifying the key system.
For example \f[CR]com.example.somesystem\f[R] or
\f[CR]org.w3.clearkey\f[R].
.TP
\f[B]supportedConfigurations\f[R]
A non\-empty \f[CR]Array\f[R] of objects conforming to the object
returned by \f[CR]MediaKeySystemAccess.getConfiguration\f[R].
The first element with a satisfiable configuration will be used.
.SS Return value
A \f[CR]Promise\f[R] that, when resolved, delivers a
\f[CR]MediaKeySystemAccess\f[R] object to your fulfillment handler
function.
The fulfillment handler receives as input just one parameter:
.TP
\f[B]mediaKeySystemAccess\f[R]
A \f[CR]MediaKeySystemAccess\f[R] object representing the media key
system configuration described by \f[CR]keySystem\f[R] and
\f[CR]supportedConfigurations\f[R]
.SS Exceptions
In case of an error, the returned \f[CR]Promise\f[R] is rejected with a
\f[CR]DOMException\f[R] whose name indicates what kind of error
occurred.
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Either the specified \f[CR]keySystem\f[R] isn\[cq]t supported by the
platform or the browser, or none of the configurations specified by
\f[CR]supportedConfigurations\f[R] can be satisfied (if, for example,
none of the \f[CR]codecs\f[R] specified in \f[CR]contentType\f[R] are
available).
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Use of this feature was blocked by a Permissions Policy.
.TP
\[ga]TypeError\[ga]\[ga]
Either \f[CR]keySystem\f[R] is an empty string or the
\f[CR]supportedConfigurations\f[R] array is empty.
.SS Firefox compatibility notes
Firefox 55 outputs a warning to the console if a candidate
\f[CR]MediaKeySystemConfiguration\f[R] included in
\f[CR]supportedConfigurations\f[R] includes an
\f[CR]audioCapabilities\f[R] or \f[CR]videoCapabilities\f[R] object
whose value of \f[CR]contentType\f[R] doesn\[cq]t specify a
\f[CR]\[dq]codecs\[dq]\f[R] substring defining which codecs within the
media wrapper format should be allowed.
.PP
For example:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] clearKeyOptions = [
  {
    initDataTypes: [\[dq]keyids\[dq], \[dq]webm\[dq]],
    audioCapabilities: [{ contentType: \[dq]audio/webm\[dq] }],
    videoCapabilities: [{ contentType: \[dq]video/webm\[dq] }],
  },
];

navigator
  .requestMediaKeySystemAccess(\[dq]org.w3.clearkey\[dq], clearKeyOptions)
  .then((keySystemAccess) \f[B]=>\f[R] {
    \f[I]/* use the access to get create keys */\f[R]
  });
.EE
.PP
The code above works in Firefox up to version 55, but version 55 onwards
will output a warning to console, because \f[CR]\[dq]codecs\[dq]\f[R] is
not included in the \f[CR]contentType\f[R] strings.
This could be corrected as follows:
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] clearKeyOptions = [
  {
    initDataTypes: [\[dq]keyids\[dq], \[dq]webm\[dq]],
    audioCapabilities: [
      { contentType: \[aq]audio/webm; codecs=\[dq]opus\[dq]\[aq] },
      { contentType: \[aq]audio/webm; codecs=\[dq]vorbis\[dq]\[aq] },
    ],
    videoCapabilities: [
      { contentType: \[aq]video/webm; codecs=\[dq]vp9\[dq]\[aq] },
      { contentType: \[aq]video/webm; codecs=\[dq]vp8\[dq]\[aq] },
    ],
  },
];

navigator
  .requestMediaKeySystemAccess(\[dq]org.w3.clearkey\[dq], clearKeyOptions)
  .then((keySystemAccess) \f[B]=>\f[R] {
    \f[I]/* use the access to get create keys */\f[R]
  });
.EE
.PP
In this revised example, the audio and video capabilities include
possible codecs which should be permitted, and therefore are valid
requests.
.SH SEE ALSO
.IP \[bu] 2
Encrypted Media Extensions API
.IP \[bu] 2
Media Capture and Streams API
.IP \[bu] 2
WebRTC API
