'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.WHEEL_EVENT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.wheel_event \- Element: wheel event
.SH SYNOPSIS
The \f[B]\f[CB]wheel\f[B]\f[R] event fires when the user rotates a wheel
button on a pointing device (typically a mouse).
It is also fired for related devices that simulate wheel actions, such
as trackpads and mouse balls.
.PP
This event replaces the non\-standard deprecated \f[CR]mousewheel\f[R]
event.
.PP
Don\(cqt confuse the \f[CR]wheel\f[R] event with the \f[CR]scroll\f[R]
event:
.IP \(bu 2
A \f[CR]wheel\f[R] event doesn\(cqt necessarily dispatch a
\f[CR]scroll\f[R] event.
For example, the element may be unscrollable at all.
Zooming actions using the wheel or trackpad also fire \f[CR]wheel\f[R]
events.
.IP \(bu 2
A \f[CR]scroll\f[R] event isn\(cqt necessarily triggered by a
\f[CR]wheel\f[R] event.
Elements can also be scrolled by using the keyboard, dragging a
scrollbar, or using JavaScript.
.IP \(bu 2
Even when the \f[CR]wheel\f[R] event does trigger scrolling, the
\f[CR]delta*\f[R] values in the \f[CR]wheel\f[R] event don\(cqt
necessarily reflect the content\(cqs scrolling direction.
.PP
Therefore, do not rely on the \f[CR]wheel\f[R] event\(cqs
\f[CR]delta*\f[R] properties to get the scrolling direction.
Instead, detect value changes of \f[CR]scrollLeft\f[R] and
\f[CR]scrollTop\f[R] of the target in the \f[CR]scroll\f[R] event.
.PP
The \f[CR]wheel\f[R] event is cancelable.
In some browsers, only the first \f[CR]wheel\f[R] event in a sequence is
cancelable, and later events are non\-cancelable.
If the event is canceled, no scrolling or zooming is performed.
This may cause performance issues as the browser has to wait for every
wheel event to be processed before actually scrolling the content.
You can avoid this by setting \f[CR]passive: true\f[R] when calling
\f[CR]addEventListener()\f[R], which may cause the browser to generate
non\-cancelable \f[CR]wheel\f[R] events.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqwheel\(dq, (event) => { })

onwheel = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]WheelEvent\f[R].
Inherits from \f[CR]MouseEvent\f[R], \f[CR]UIEvent\f[R] and
\f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface inherits properties from its ancestors,
\f[CI]MouseEvent\f[I], \f[CI]UIEvent\f[I], and \f[CI]Event\f[I].\f[R]
.TP
\f[B]WheelEvent.deltaX\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]double\f[R] representing the horizontal scroll amount.
.TP
\f[B]WheelEvent.deltaY\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]double\f[R] representing the vertical scroll amount.
.TP
\f[B]WheelEvent.deltaZ\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]double\f[R] representing the scroll amount for the
z\-axis.
.TP
\f[B]WheelEvent.deltaMode\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]unsigned long\f[R] representing the unit of the
\f[CR]delta*\f[R] values\(cq scroll amount.
Permitted values are:
.RS
.PP
.TS
tab(@);
lw(10.3n) lw(2.2n) lw(57.5n).
T{
Constant
T}@T{
Value
T}@T{
Description
T}
_
T{
\f[CR]WheelEvent.DOM_DELTA_PIXEL\f[R]
T}@T{
\f[CR]0x00\f[R]
T}@T{
The \f[CR]delta*\f[R] values are specified in pixels.
T}
T{
\f[CR]WheelEvent.DOM_DELTA_LINE\f[R]
T}@T{
\f[CR]0x01\f[R]
T}@T{
The \f[CR]delta*\f[R] values are specified in lines.
Each mouse click scrolls a line of content, where the method used to
calculate line height is browser dependent.
T}
T{
\f[CR]WheelEvent.DOM_DELTA_PAGE\f[R]
T}@T{
\f[CR]0x02\f[R]
T}@T{
The \f[CR]delta*\f[R] values are specified in pages.
Each mouse click scrolls a page of content.
T}
.TE
.RE
.TP
\f[B]WheelEvent.wheelDelta\f[R] \f[I](read\-only)\f[R] \f[I](deprecated)\f[R]
Returns an integer (32\-bit) representing the distance in pixels.
.TP
\f[B]WheelEvent.wheelDeltaX\f[R] \f[I](read\-only)\f[R] \f[I](deprecated)\f[R]
Returns an integer representing the horizontal scroll amount.
.TP
\f[B]WheelEvent.wheelDeltaY\f[R] \f[I](read\-only)\f[R] \f[I](deprecated)\f[R]
Returns an integer representing the vertical scroll amount.
.SH EXAMPLES
.SS Scaling an element via the wheel
This example shows how to scale an element using the mouse (or other
pointing device) wheel.
.IP
.EX
<\f[B]div\f[R]>Scale me with your mouse wheel.</\f[B]div\f[R]>
.EE
.IP
.EX
body {
  \f[B]min\-height\f[R]: 100vh;
  \f[B]margin\f[R]: 0;
  \f[B]display\f[R]: flex;
  \f[B]align\-items\f[R]: center;
  \f[B]justify\-content\f[R]: center;
}

div {
  \f[B]width\f[R]: 105px;
  \f[B]height\f[R]: 105px;
  \f[B]background\f[R]: #cdf;
  \f[B]padding\f[R]: 5px;
}
.EE
.IP
.EX
\f[B]function\f[R] zoom(event) {
  event.preventDefault();

  scale += event.deltaY * \-0.01;

  \f[I]// Restrict scale\f[R]
  scale = Math.min(Math.max(0.125, scale), 4);

  \f[I]// Apply scale transform\f[R]
  el.style.transform = \(gascale(${scale})\(ga;
}

\f[B]let\f[R] scale = 1;
\f[B]const\f[R] el = document.querySelector(\(dqdiv\(dq);
el.onwheel = zoom;
.EE
.SS addEventListener equivalent
The event handler can also be set up using the
\f[CR]addEventListener()\f[R] method:
.IP
.EX
el.addEventListener(\(dqwheel\(dq, zoom, { passive: \f[B]false\f[R] });
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]WheelEvent\f[R]
