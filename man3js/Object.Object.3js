.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "OBJECT.OBJECT" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.Object \- Object() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Object()\f[B]\f[R] constructor turns the input into an
object.
Its behavior depends on the input\(cqs type.
.SH SYNTAX
.IP
.EX
new Object()
new Object(value)

Object()
Object(value)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Object()\f[R] can be called with or without
\f[CR]new\f[R], but sometimes with different effects.
See Return value.
.RE
.SS Parameters
.TP
\f[B]value\f[R] \f[I](optional)\f[R]
Any value.
.SS Return value
When the \f[CR]Object()\f[R] constructor itself is called or
constructed, its return value is an object:
.IP \(bu 2
If the value is \f[CR]null\f[R] or \f[CR]undefined\f[R], it creates and
returns an empty object.
.IP \(bu 2
If the value is an object already, it returns the value.
.IP \(bu 2
Otherwise, it returns an object of a type that corresponds to the given
value.
For example, passing a \f[CR]BigInt\f[R] primitive returns a
\f[CR]BigInt\f[R] wrapper object.
.PP
When \f[CR]Object()\f[R] is constructed but \f[CR]new.target\f[R] is not
the \f[CR]Object\f[R] constructor itself, the behavior is slightly
different \(em it initializes a new object with
\f[CR]new.target.prototype\f[R] as its prototype.
Any argument value is ignored.
This may happen, for example, when \f[CR]Object()\f[R] is implicitly
called via \f[CR]super()\f[R] in the constructor of a class that extends
\f[CR]Object\f[R].
In this case, even if you pass a number to \f[CR]super()\f[R], the
\f[CR]this\f[R] value inside the constructor does not become a
\f[CR]Number\f[R] instance.
.SH EXAMPLES
.SS Creating a new Object
.IP
.EX
\f[B]const\f[R] o = \f[B]new\f[R] Object();
o.foo = 42;

console.log(o);
\f[I]// { foo: 42 }\f[R]
.EE
.SS Using Object given undefined and null types
The following examples store an empty \f[CR]Object\f[R] object in
\f[CR]o\f[R]:
.IP
.EX
\f[B]const\f[R] o = \f[B]new\f[R] Object();
.EE
.IP
.EX
\f[B]const\f[R] o = \f[B]new\f[R] Object(\f[B]undefined\f[R]);
.EE
.IP
.EX
\f[B]const\f[R] o = \f[B]new\f[R] Object(\f[B]null\f[R]);
.EE
.SS Obtaining wrapper objects for BigInt and Symbol
The \f[CR]BigInt()\f[R] and \f[CR]Symbol()\f[R] constructors throw an
error when called with \f[CR]new\f[R], to prevent the common mistake of
creating a wrapper object instead of the primitive value.
The only way to create a wrapper object for these types is to call
\f[CR]Object()\f[R] with them:
.IP
.EX
\f[B]const\f[R] numberObj = \f[B]new\f[R] Number(1);
console.log(\f[B]typeof\f[R] numberObj); \f[I]// \(dqobject\(dq\f[R]

\f[B]const\f[R] bigintObj = Object(1n);
console.log(\f[B]typeof\f[R] bigintObj); \f[I]// \(dqobject\(dq\f[R]

\f[B]const\f[R] symbolObj = Object(Symbol(\(dqfoo\(dq));
console.log(\f[B]typeof\f[R] symbolObj); \f[I]// \(dqobject\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
Object initializer
