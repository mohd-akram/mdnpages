.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "XRReferenceSpace" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRReferenceSpace \- XRReferenceSpace
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The WebXR Device API\[cq]s \f[B]\f[CB]XRReferenceSpace\f[B]\f[R]
interface describes the coordinate system for a specific tracked entity
or object within the virtual world using a specified tracking behavior.
The tracking behavior is defined by the selected reference space type.
It expands upon the base class, \f[CR]XRSpace\f[R], by adding support
for several different tracking behaviors as well as to request a new
reference space which describes the offset transform between the tracked
object and another location in the world.
.PP
All reference spaces\[em]with the sole exception being bounded reference
spaces\[em]are described using the \f[CR]XRReferenceSpace\f[R] type.
Bounded spaces are implemented as \f[CR]XRBoundedReferenceSpace\f[R]
objects.
These are special spaces which let you establish a perimeter within
which it\[cq]s \[lq]safe\[rq] for the viewer to move.
For XR systems that allow the user to physically move around, such as
those that track movement with a real\-world camera, this boundary
establishes the edges of the area the user is able to move around in,
whether due to physical obstacles or due to limitations of the XR
hardware.
See the article Using bounded reference spaces to protect the viewer for
more on using boundaries to keep the user from colliding with obstacles
both physical and virtual.
.SH INSTANCE PROPERTIES
\f[I]\f[CI]XRReferenceSpace\f[I] inherits the properties of
\f[CI]EventTarget\f[I] but defines no additional properties.\f[R]
.SH INSTANCE METHODS
\f[I]\f[CI]XRReferenceSpace\f[I] also inherits methods from
\f[CI]EventTarget\f[I] in addition to the following methods.\f[R]
.TP
\f[B]getOffsetReferenceSpace()\f[R]
Creates and returns a new reference space object as the same type as the
one on which you call the method (so, either \f[CR]XRReferenceSpace\f[R]
or \f[CR]XRBoundedReferenceSpace\f[R]).
The new reference space can be used to transform a coordinate from the
reference space of the object on which the method is called into a
different coordinate space.
This is useful for positioning objects while rendering, and to perform
the needed transforms when changing the viewer\[cq]s position and/or
orientation in 3D space.
.SH EVENTS
.TP
\f[B]reset\f[R]
The \f[CR]reset\f[R] event is sent to an \f[CR]XRReferenceSpace\f[R]
object when the browser detects a discontinuity between the tracked
object\[cq]s origin and the user\[cq]s environment or location.
This can happen, for example, after the user recalibrates their XR
device, or if the device automatically adjusts its origin after losing
and regaining tracking.
.SH REFERENCE SPACE TYPES
The types of reference space are listed in the table below, with brief
information about their use cases and which interface is used to
implement them.
.TP
\f[B]bounded\-floor\f[R]
An \f[CR]XRBoundedReferenceSpace\f[R] similar to the \f[CR]local\f[R]
type, except the user is not expected to move outside a predetermined
boundary, given by the \f[CR]boundsGeometry\f[R] in the returned object.
.TP
\f[B]local\f[R]
An \f[CR]XRReferenceSpace\f[R] tracking space whose native origin is
located near the viewer\[cq]s position at the time the session was
created.
The exact position depends on the underlying platform and
implementation.
The user isn\[cq]t expected to move much if at all beyond their starting
position, and tracking is optimized for this use case.
For devices with six degrees of freedom (6DoF) tracking, the
\f[CR]local\f[R] reference space tries to keep the origin stable
relative to the environment.
.TP
\f[B]local\-floor\f[R]
An \f[CR]XRReferenceSpace\f[R] similar to the \f[CR]local\f[R] type,
except the starting position is placed in a safe location for the viewer
to stand, where the value of the y axis is 0 at floor level.
If that floor level isn\[cq]t known, the user agent will estimate the
floor level.
If the estimated floor level is non\-zero, the browser is expected to
round it such a way as to avoid fingerprinting (likely to the nearest
centimeter).
.TP
\f[B]unbounded\f[R]
An \f[CR]XRReferenceSpace\f[R] tracking space which allows the user
total freedom of movement, possibly over extremely long distances from
their origin point.
The viewer isn\[cq]t tracked at all; tracking is optimized for stability
around the user\[cq]s current position, so the native origin may drift
as needed to accommodate that need.
.TP
\f[B]viewer\f[R]
An \f[CR]XRReferenceSpace\f[R] tracking space whose native origin tracks
the viewer\[cq]s position and orientation.
This is used for environments in which the user can physically move
around, and is supported by all instances of \f[CR]XRSession\f[R], both
immersive and inline, though it\[cq]s most useful for inline sessions.
It\[cq]s particularly useful when determining the distance between the
viewer and an input, or when working with offset spaces.
Otherwise, typically, one of the other reference space types will be
used more often.
.SH USAGE NOTES
.SS Creating an XRReferenceSpace
There are two situations in which you need to obtain an
\f[CR]XRReferenceSpace\f[R].
The first is when you set up your scene and need to obtain a reference
space to represent the user\[cq]s viewpoint on the world for the
duration of the \f[CR]XRSession\f[R].
To do that, call the \f[CR]XRSession\f[R] method
\f[CR]requestReferenceSpace()\f[R], specifying the reference space type
you wish to obtain.
.IP
.EX
xrSession.requestReferenceSpace(\[dq]local\[dq]).then((refSpace) \f[B]=>\f[R] {
  xrReferenceSpace = refSpace;
  \f[I]// \&...\f[R]
});
.EE
.PP
The other situation in which you may need to acquire a new reference
space is if you need to move the origin to a new position; this is
commonly done, for example, when your project allows the user to move
through the environment using input devices such as the keyboard, mouse,
touchpad, or game controls that are not connected through the XR device.
Since the origin will typically be the user\[cq]s location in the space,
you need to change the origin to reflect their movement and any
orientation changes they make.
.PP
To move or rotate the user\[cq]s view of the world, you need to change
the \f[CR]XRReferenceSpace\f[R] used to represent that viewpoint.
However, \f[CR]XRReferenceSpace\f[R] is immutable, so you need to
instead create a new reference space representing the changed viewpoint.
This is easily done using the \f[CR]getOffsetReferenceSpace()\f[R]
method.
.IP
.EX
\f[B]let\f[R] offsetTransform = \f[B]new\f[R] XRRigidTransform(
  { x: 2, y: 0, z: 1 },
  { x: 0, y: 0, z: 0, w: 1 },
);
xrReferenceSpace = xrReferenceSpace.getOffsetReferenceSpace(offsetTransform);
.EE
.PP
This replaces the \f[CR]XRReferenceSpace\f[R] with a new one whose
origin and orientation are adjusted to place the new origin at (2, 0, 1)
relative to the current origin and rotated given a unit quaternion that
orients the space to put the viewer facing straight up relative to the
previous world orientation.
.SS Geometry
The native origin of any \f[CR]XRReferenceSpace\f[R] is always
configured so that +X is considered to be to the right, +Y is upward,
and +Z is \[lq]backward\[rq] or toward the user.
.SH SEE ALSO
.IP \[bu] 2
Fundamentals of WebXR
.IP \[bu] 2
Geometry and reference spaces in WebXR
.IP \[bu] 2
Viewpoints and viewers: Simulating cameras in WebXR
.IP \[bu] 2
Matrix math for the web
.IP \[bu] 2
Movement, orientation, and motion
.IP \[bu] 2
Using bounded reference spaces to protect the user
