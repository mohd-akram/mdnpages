.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "CryptoKey.type" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CryptoKey.type \- CryptoKey: type property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The read\-only \f[B]\f[CB]type\f[B]\f[R] property of the
\f[CR]CryptoKey\f[R] interface indicates which kind of key is
represented by the object.
It can have the following values:
.IP \[bu] 2
\f[CR]\[dq]secret\[dq]\f[R]: This key is a secret key for use with a
symmetric algorithm.
.IP \[bu] 2
\f[CR]\[dq]private\[dq]\f[R]: This key is the private half of an
asymmetric algorithm\[cq]s \f[CR]CryptoKeyPair\f[R].
.IP \[bu] 2
\f[CR]\[dq]public\[dq]\f[R]: This key is the public half of an
asymmetric algorithm\[cq]s \f[CR]CryptoKeyPair\f[R].
.SH VALUE
One of the following strings: \f[CR]\[dq]secret\[dq]\f[R],
\f[CR]\[dq]private\[dq]\f[R], or \f[CR]\[dq]public\[dq]\f[R].
.SH EXAMPLES
This function verifies a message using \f[CR]SubtleCrypto.verify()\f[R]
and a public key given in the parameter.
If the key is not a public key, it always returns
\f[CR]\[dq]invalid\[dq]\f[R], as such verification is fundamentally
insecure.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] verifyMessage(publicKey) {
  \f[B]const\f[R] signatureValue = document.querySelector(
    \[dq].rsassa\-pkcs1 .signature\-value\[dq],
  );
  signatureValue.classList.remove(\[dq]valid\[dq], \[dq]invalid\[dq]);

  \f[B]let\f[R] result = \f[B]false\f[R]; \f[I]// By default, it is invalid\f[R]

  \f[B]if\f[R] (publicKey.type === \[dq]public\[dq]) {
    \f[B]const\f[R] encoded = getMessageEncoding();
    result = \f[B]await\f[R] window.crypto.subtle.verify(
      \[dq]RSASSA\-PKCS1\-v1_5\[dq],
      publicKey,
      signature,
      encoded,
    );
  }

  signatureValue.classList.add(result ? \[dq]valid\[dq] : \[dq]invalid\[dq]);
}
.EE
