.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "WebGLRenderingContext.bufferData" "JS" "March 14, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.bufferData \- WebGLRenderingContext: bufferData()
method
.SH SYNOPSIS
The \f[B]\f[CB]WebGLRenderingContext.bufferData()\f[B]\f[R] method of
the WebGL API initializes and creates the buffer object\[cq]s data
store.
.SH SYNTAX
.IP
.EX
bufferData(target, size, usage)
bufferData(target, srcData, usage)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A \f[CR]GLenum\f[R] specifying the binding point (target).
Possible values:
.RS
.TP
\f[B]gl.ARRAY_BUFFER\f[R]
Buffer containing vertex attributes, such as vertex coordinates, texture
coordinate data, or vertex color data.
.TP
\f[B]gl.ELEMENT_ARRAY_BUFFER\f[R]
Buffer used for element indices.
.PP
When using a WebGL 2 context, the following values are available
additionally:
.TP
\f[B]gl.COPY_READ_BUFFER\f[R]
Buffer for copying from one buffer object to another.
.TP
\f[B]gl.COPY_WRITE_BUFFER\f[R]
Buffer for copying from one buffer object to another.
.TP
\f[B]gl.TRANSFORM_FEEDBACK_BUFFER\f[R]
Buffer for transform feedback operations.
.TP
\f[B]gl.UNIFORM_BUFFER\f[R]
Buffer used for storing uniform blocks.
.TP
\f[B]gl.PIXEL_PACK_BUFFER\f[R]
Buffer used for pixel transfer operations.
.TP
\f[B]gl.PIXEL_UNPACK_BUFFER\f[R]
Buffer used for pixel transfer operations.
.RE
.TP
\f[B]size\f[R]
A \f[CR]GLsizeiptr\f[R] setting the size in bytes of the buffer
object\[cq]s data store.
.TP
\f[B]srcData\f[R] \f[I](optional)\f[R]
An \f[CR]ArrayBuffer\f[R], \f[CR]SharedArrayBuffer\f[R], a
\f[CR]TypedArray\f[R] or a \f[CR]DataView\f[R] that will be copied into
the data store.
If \f[CR]null\f[R], a data store is still created, but the content is
uninitialized and undefined.
.TP
\f[B]usage\f[R]
A \f[CR]GLenum\f[R] specifying the intended usage pattern of the data
store for optimization purposes.
Possible values:
.RS
.TP
\f[B]gl.STATIC_DRAW\f[R]
The contents are intended to be specified once by the application, and
used many times as the source for WebGL drawing and image specification
commands.
.TP
\f[B]gl.DYNAMIC_DRAW\f[R]
The contents are intended to be respecified repeatedly by the
application, and used many times as the source for WebGL drawing and
image specification commands.
.TP
\f[B]gl.STREAM_DRAW\f[R]
The contents are intended to be specified once by the application, and
used at most a few times as the source for WebGL drawing and image
specification commands.
.PP
When using a WebGL 2 context, the following values are available
additionally:
.TP
\f[B]gl.STATIC_READ\f[R]
The contents are intended to be specified once by reading data from
WebGL, and queried many times by the application.
.TP
\f[B]gl.DYNAMIC_READ\f[R]
The contents are intended to be respecified repeatedly by reading data
from WebGL, and queried many times by the application.
.TP
\f[B]gl.STREAM_READ\f[R]
The contents are intended to be specified once by reading data from
WebGL, and queried at most a few times by the application
.TP
\f[B]gl.STATIC_COPY\f[R]
The contents are intended to be specified once by reading data from
WebGL, and used many times as the source for WebGL drawing and image
specification commands.
.TP
\f[B]gl.DYNAMIC_COPY\f[R]
The contents are intended to be respecified repeatedly by reading data
from WebGL, and used many times as the source for WebGL drawing and
image specification commands.
.TP
\f[B]gl.STREAM_COPY\f[R]
The contents are intended to be specified once by reading data from
WebGL, and used at most a few times as the source for WebGL drawing and
image specification commands.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.IP \[bu] 2
A \f[CR]gl.OUT_OF_MEMORY\f[R] error is thrown if the context is unable
to create a data store with the given \f[CR]size\f[R].
.IP \[bu] 2
A \f[CR]gl.INVALID_VALUE\f[R] error is thrown if \f[CR]size\f[R] is
negative.
.IP \[bu] 2
A \f[CR]gl.INVALID_ENUM\f[R] error is thrown if \f[CR]target\f[R] or
\f[CR]usage\f[R] are not one of the allowed enums.
.SH EXAMPLES
.SS Using bufferData
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] gl = canvas.getContext(\[dq]webgl\[dq]);
\f[B]const\f[R] buffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
gl.bufferData(gl.ARRAY_BUFFER, 1024, gl.STATIC_DRAW);
.EE
.SS Getting buffer information
To check the current buffer usage and buffer size, use the
\f[CR]WebGLRenderingContext.getBufferParameter()\f[R] method.
.IP
.EX
gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);
gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE);
.EE
.SS Getting size of a typed array
To calculate size parameter for a typed array.
.IP
.EX
\f[B]const\f[R] dataArray = \f[B]new\f[R] Float32Array([1, 2, 3, 4]);
\f[B]const\f[R] sizeInBytes = dataArray.length * dataArray.BYTES_PER_ELEMENT;
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.bufferData()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.createBuffer()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.bufferSubData()\f[R]
.IP \[bu] 2
Other buffers: \f[CR]WebGLFramebuffer\f[R], \f[CR]WebGLRenderbuffer\f[R]
