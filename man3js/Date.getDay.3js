.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Date.getDay" "JS" "August 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.getDay \- Date.prototype.getDay()
.SH SYNOPSIS
The \f[B]\f[CB]getDay()\f[B]\f[R] method of \f[CR]Date\f[R] instances
returns the day of the week for this date according to local time, where
0 represents Sunday.
For the day of the month, see \f[CR]Date.prototype.getDate()\f[R].
.SH SYNTAX
.IP
.EX
getDay()
.EE
.SS Parameters
None.
.SS Return value
An integer, between 0 and 6, representing the day of the week for the
given date according to local time: 0 for Sunday, 1 for Monday, 2 for
Tuesday, and so on.
Returns \f[CR]NaN\f[R] if the date is invalid.
.SH DESCRIPTION
The return value of \f[CR]getDay()\f[R] is zero\-based, which is useful
for indexing into arrays of days, for example:
.IP
.EX
\f[B]const\f[R] valentines = \f[B]new\f[R] Date(\[dq]1995\-02\-14\[dq]);
\f[B]const\f[R] day = valentines.getDay();
\f[B]const\f[R] dayNames = [\[dq]Sunday\[dq], \[dq]Monday\[dq], \[dq]Tuesday\[dq] \f[I]/* , \&... */\f[R]];

console.log(dayNames[day]); \f[I]// \[dq]Monday\[dq]\f[R]
.EE
.PP
However, for the purpose of internationalization, you should prefer
using \f[CR]Intl.DateTimeFormat\f[R] with the \f[CR]options\f[R]
parameter instead.
.IP
.EX
\f[B]const\f[R] options = { weekday: \[dq]long\[dq] };
console.log(\f[B]new\f[R] Intl.DateTimeFormat(\[dq]en\-US\[dq], options).format(valentines));
\f[I]// \[dq]Monday\[dq]\f[R]
console.log(\f[B]new\f[R] Intl.DateTimeFormat(\[dq]de\-DE\[dq], options).format(valentines));
\f[I]// \[dq]Montag\[dq]\f[R]
.EE
.SH EXAMPLES
.SS Using getDay()
The \f[CR]weekday\f[R] variable has value \f[CR]1\f[R], based on the
value of the \f[CR]Date\f[R] object \f[CR]xmas95\f[R], because December
25, 1995 is a Monday.
.IP
.EX
\f[B]const\f[R] xmas95 = \f[B]new\f[R] Date(\[dq]1995\-12\-25T23:15:30\[dq]);
\f[B]const\f[R] weekday = xmas95.getDay();

console.log(weekday); \f[I]// 1\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Date.prototype.getUTCDate()\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.getUTCDay()\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.setDate()\f[R]
