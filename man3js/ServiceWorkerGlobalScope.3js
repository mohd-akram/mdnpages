.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ServiceWorkerGlobalScope" "JS" "February 8, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerGlobalScope \- ServiceWorkerGlobalScope
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
The \f[B]\f[CB]ServiceWorkerGlobalScope\f[B]\f[R] interface of the
Service Worker API represents the global execution context of a service
worker.
.PP
Developers should keep in mind that the ServiceWorker state is not
persisted across the termination/restart cycle, so each event handler
should assume it\[cq]s being invoked with a bare, default global state.
.PP
Once successfully registered, a service worker can and will be
terminated when idle to conserve memory and processor power.
An active service worker is automatically restarted to respond to
events, such as \f[CR]fetch\f[R] or \f[CR]message\f[R].
.PP
Additionally, synchronous requests are not allowed from within a service
worker \[em] only asynchronous requests, like those initiated via the
\f[CR]fetch()\f[R] method, can be used.
.PP
This interface inherits from the \f[CR]WorkerGlobalScope\f[R] interface,
and its parent \f[CR]EventTarget\f[R].
.SH INSTANCE PROPERTIES
\f[I]This interface inherits properties from the
\f[CI]WorkerGlobalScope\f[I] interface, and its parent
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]ServiceWorkerGlobalScope.clients\f[R] \f[I](read\-only)\f[R]
Contains the \f[CR]Clients\f[R] object associated with the service
worker.
.TP
\f[B]ServiceWorkerGlobalScope.cookieStore\f[R] \f[I](read\-only)\f[R]
Returns a reference to the \f[CR]CookieStore\f[R] object associated with
the service worker.
.TP
\f[B]ServiceWorkerGlobalScope.registration\f[R] \f[I](read\-only)\f[R]
Contains the \f[CR]ServiceWorkerRegistration\f[R] object that represents
the service worker\[cq]s registration.
.TP
\f[B]ServiceWorkerGlobalScope.serviceWorker\f[R] \f[I](read\-only)\f[R]
Contains the \f[CR]ServiceWorker\f[R] object that represents the service
worker.
.SH INSTANCE METHODS
\f[I]This interface inherits methods from the
\f[CI]WorkerGlobalScope\f[I] interface, and its parent
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]ServiceWorkerGlobalScope.skipWaiting()\f[R]
Allows the current service worker registration to progress from waiting
to active state while service worker clients are using it.
.SH EVENTS
Listen to this event using \f[CR]addEventListener()\f[R] or by assigning
an event listener to the \f[CR]oneventname\f[R] property of this
interface.
.TP
\f[B]activate\f[R]
Occurs when a \f[CR]ServiceWorkerRegistration\f[R] acquires a new
\f[CR]ServiceWorkerRegistration.active\f[R] worker.
.TP
\f[B]backgroundfetchabort\f[R] \f[I](experimental)\f[R]
Fired when a background fetch operation has been canceled by the user or
the app.
.TP
\f[B]backgroundfetchclick\f[R] \f[I](experimental)\f[R]
Fired when the user has clicked on the UI for a background fetch
operation.
.TP
\f[B]backgroundfetchfail\f[R] \f[I](experimental)\f[R]
Fired when at least one of the requests in a background fetch operation
has failed.
.TP
\f[B]backgroundfetchsuccess\f[R] \f[I](experimental)\f[R]
Fired when all of the requests in a background fetch operation have
succeeded.
.TP
\f[B]canmakepayment\f[R] \f[I](experimental)\f[R]
Fired on a payment app\[cq]s service worker to check whether it is ready
to handle a payment.
Specifically, it is fired when the merchant website calls the
\f[CR]PaymentRequest()\f[R] constructor.
.TP
\f[B]contentdelete\f[R] \f[I](experimental)\f[R]
Occurs when an item is removed from the \f[CR]ContentIndex\f[R].
.TP
\f[B]cookiechange\f[R] \f[I](experimental)\f[R]
Fired when a cookie change has occurred that matches the service
worker\[cq]s cookie change subscription list.
.TP
\f[B]fetch\f[R]
Occurs when a \f[CR]fetch()\f[R] is called.
.TP
\f[B]install\f[R]
Occurs when a \f[CR]ServiceWorkerRegistration\f[R] acquires a new
\f[CR]ServiceWorkerRegistration.installing\f[R] worker.
.TP
\f[B]message\f[R]
Occurs when incoming messages are received.
Controlled pages can use the \f[CR]MessagePort.postMessage()\f[R] method
to send messages to service workers.
.TP
\f[B]messageerror\f[R]
Occurs when incoming messages can\[cq]t be deserialized.
.TP
\f[B]notificationclick\f[R]
Occurs when a user clicks on a displayed notification.
.TP
\f[B]notificationclose\f[R]
Occurs when a user closes a displayed notification.
.TP
\f[B]paymentrequest\f[R] \f[I](experimental)\f[R]
Fired on a payment app when a payment flow has been initiated on the
merchant website via the \f[CR]PaymentRequest.show()\f[R] method.
.TP
\f[B]sync\f[R]
Triggered when a call to \f[CR]SyncManager.register\f[R] is made from a
service worker client page.
The attempt to sync is made either immediately if the network is
available or as soon as the network becomes available.
.TP
\f[B]periodicsync\f[R] \f[I](experimental)\f[R]
Occurs at periodic intervals, which were specified when registering a
\f[CR]PeriodicSyncManager\f[R].
.TP
\f[B]push\f[R]
Occurs when a server push notification is received.
.TP
\f[B]pushsubscriptionchange\f[R]
Occurs when a push subscription has been invalidated, or is about to be
invalidated (e.g.\ when a push service sets an expiration time).
.SH EXAMPLES
This code snippet is from the \c
.UR https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/prefetch/service-worker.js
service worker prefetch sample
.UE \c
\ (see \c
.UR https://googlechrome.github.io/samples/service-worker/prefetch/
prefetch example live
.UE \c
\&.)
The \f[CR]onfetch\f[R] event handler listens for the \f[CR]fetch\f[R]
event.
When fired, the code returns a promise that resolves to the first
matching request in the \f[CR]Cache\f[R] object.
If no match is found, the code fetches a response from the network.
.PP
The code also handles exceptions thrown from the \f[CR]fetch()\f[R]
operation.
Note that an HTTP error response (e.g., 404) will not trigger an
exception.
It will return a normal response object that has the appropriate error
code set.
.IP
.EX
self.addEventListener(\[dq]fetch\[dq], (event) \f[B]=>\f[R] {
  console.log(\[dq]Handling fetch event for\[dq], event.request.url);

  event.respondWith(
    caches.match(event.request).then((response) \f[B]=>\f[R] {
      \f[B]if\f[R] (response) {
        console.log(\[dq]Found response in cache:\[dq], response);

        \f[B]return\f[R] response;
      }
      console.log(\[dq]No response found in cache. About to fetch from network\&...\[dq]);

      \f[B]return\f[R] fetch(event.request).then(
        (response) \f[B]=>\f[R] {
          console.log(\[dq]Response from network is:\[dq], response);

          \f[B]return\f[R] response;
        },
        (error) \f[B]=>\f[R] {
          console.error(\[dq]Fetching failed:\[dq], error);

          \f[B]throw\f[R] error;
        },
      );
    }),
  );
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
