.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBSOCKET.MESSAGE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebSocket.message_event \- WebSocket: message event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[CR]message\f[R] event is fired when data is received through a
\f[CR]WebSocket\f[R].
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqmessage\(dq, (event) => { })

onmessage = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]In addition to the properties listed below, properties from the
parent interface, \f[CI]Event\f[I], are available.\f[R]
.TP
\f[B]data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
The type of this property depends on the type of the WebSocket message
and the value of \f[CR]WebSocket.binaryType\f[R].
.RS
.IP \(bu 2
If the message type is \(lqtext\(rq, then this field is a string.
.IP \(bu 2
If the message type is \(lqbinary\(rq type, then the type of this
property can be inferred from the \f[CR]binaryType\f[R] of this socket:
.RS 2
.IP \(bu 2
\f[CR]ArrayBuffer\f[R] if \f[CR]binaryType\f[R] is
\f[CR]\(dqarraybuffer\(dq\f[R],
.IP \(bu 2
\f[CR]Blob\f[R] if \f[CR]binaryType\f[R] is \f[CR]\(dqblob\(dq\f[R].
This does not have an associated media type (\f[CR]Blob.type\f[R] is
\f[CR]\(dq\(dq\f[R]).
.RE
.RE
.TP
\f[B]origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.PP
Other properties from the \f[CR]MessageEvent\f[R] interface are present,
but do not pertain to the WebSocket API and are left at their default
values:
.IP \(bu 2
\f[CR]lastEventId\f[R] \f[I](read\-only)\f[R]
.IP \(bu 2
\f[CR]source\f[R] \f[I](read\-only)\f[R]
.IP \(bu 2
\f[CR]ports\f[R] \f[I](read\-only)\f[R]
.SH EXAMPLES
.IP
.EX
\f[I]// Create WebSocket connection.\f[R]
\f[B]const\f[R] socket = \f[B]new\f[R] WebSocket(\(dqws://localhost:8080\(dq);

\f[I]// Listen for messages\f[R]
socket.addEventListener(\(dqmessage\(dq, (event) \f[B]=>\f[R] {
  console.log(\(dqMessage from server \(dq, event.data);
});
.EE
.SH SEE ALSO
.IP \(bu 2
WebSocket: close event
.IP \(bu 2
WebSocket: error event
.IP \(bu 2
WebSocket: open event
.IP \(bu 2
Writing WebSocket client applications
