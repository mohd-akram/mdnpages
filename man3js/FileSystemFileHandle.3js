.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "FileSystemFileHandle" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemFileHandle \- FileSystemFileHandle
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]FileSystemFileHandle\f[B]\f[R] interface of the File
System API represents a handle to a file system entry.
The interface is accessed through the
\f[CR]window.showOpenFilePicker()\f[R] method.
.PP
Note that read and write operations depend on file\-access permissions
that do not persist after a page refresh if no other tabs for that
origin remain open.
The \f[CR]queryPermission\f[R] method of the \f[CR]FileSystemHandle\f[R]
interface can be used to verify permission state before accessing a
file.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent,
\f[CI]FileSystemHandle\f[I].\f[R]
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]FileSystemHandle\f[I].\f[R]
.TP
\f[B]getFile()\f[R]
Returns a \f[CR]Promise\f[R] which resolves to a \f[CR]File\f[R] object
representing the state on disk of the entry represented by the handle.
.TP
\f[B]createSyncAccessHandle()\f[R]
Returns a \f[CR]Promise\f[R] which resolves to a
\f[CR]FileSystemSyncAccessHandle\f[R] object that can be used to
synchronously read from and write to a file.
The synchronous nature of this method brings performance advantages, but
it is only usable inside dedicated Web Workers.
.TP
\f[B]createWritable()\f[R]
Returns a \f[CR]Promise\f[R] which resolves to a newly created
\f[CR]FileSystemWritableFileStream\f[R] object that can be used to write
to a file.
.SH EXAMPLES
.SS Reading a File
The following asynchronous function presents a file picker and once a
file is chosen, uses the \f[CR]getFile()\f[R] method to retrieve the
contents.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] getTheFile() {
  \f[B]const\f[R] pickerOpts = {
    types: [
      {
        description: \[dq]Images\[dq],
        accept: {
          \[dq]image/*\[dq]: [\[dq].png\[dq], \[dq].gif\[dq], \[dq].jpeg\[dq], \[dq].jpg\[dq]],
        },
      },
    ],
    excludeAcceptAllOption: \f[B]true\f[R],
    multiple: \f[B]false\f[R],
  };

  \f[I]// open file picker\f[R]
  \f[B]const\f[R] [fileHandle] = \f[B]await\f[R] window.showOpenFilePicker(pickerOpts);
  \f[I]// get file contents\f[R]
  \f[B]const\f[R] fileData = \f[B]await\f[R] fileHandle.getFile();
  \f[B]return\f[R] fileData;
}
.EE
.SS Writing a File
The following asynchronous function writes the given contents to the
file handle, and thus to disk.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] writeFile(fileHandle, contents) {
  \f[I]// Create a FileSystemWritableFileStream to write to.\f[R]
  \f[B]const\f[R] writable = \f[B]await\f[R] fileHandle.createWritable();

  \f[I]// Write the contents of the file to the stream.\f[R]
  \f[B]await\f[R] writable.write(contents);

  \f[I]// Close the file and write the contents to disk.\f[R]
  \f[B]await\f[R] writable.close();
}
.EE
.SS Synchronously reading and writing a file
The following asynchronous event handler function is contained inside a
Web Worker.
On receiving a message from the main thread it:
.IP \[bu] 2
Creates a synchronous file access handle.
.IP \[bu] 2
Gets the size of the file and creates an \f[CR]ArrayBuffer\f[R] to
contain it.
.IP \[bu] 2
Reads the file contents into the buffer.
.IP \[bu] 2
Encodes the message and writes it to the end of the file.
.IP \[bu] 2
Persists the changes to disk and closes the access handle.
.IP
.EX
onmessage = \f[B]async\f[R] (e) \f[B]=>\f[R] {
  \f[I]// Retrieve message sent to work from main script\f[R]
  \f[B]const\f[R] message = e.data;

  \f[I]// Get handle to draft file\f[R]
  \f[B]const\f[R] root = \f[B]await\f[R] navigator.storage.getDirectory();
  \f[B]const\f[R] draftHandle = \f[B]await\f[R] root.getFileHandle(\[dq]draft.txt\[dq], { create: \f[B]true\f[R] });
  \f[I]// Get sync access handle\f[R]
  \f[B]const\f[R] accessHandle = \f[B]await\f[R] draftHandle.createSyncAccessHandle();

  \f[I]// Get size of the file.\f[R]
  \f[B]const\f[R] fileSize = accessHandle.getSize();
  \f[I]// Read file content to a buffer.\f[R]
  \f[B]const\f[R] buffer = \f[B]new\f[R] DataView(\f[B]new\f[R] ArrayBuffer(fileSize));
  \f[B]const\f[R] readBuffer = accessHandle.read(buffer, { at: 0 });

  \f[I]// Write the message to the end of the file.\f[R]
  \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
  \f[B]const\f[R] encodedMessage = encoder.encode(message);
  \f[B]const\f[R] writeBuffer = accessHandle.write(encodedMessage, { at: readBuffer });

  \f[I]// Persist changes to disk.\f[R]
  accessHandle.flush();

  \f[I]// Always close FileSystemSyncAccessHandle if done.\f[R]
  accessHandle.close();
};
.EE
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the spec, \f[CR]close()\f[R],
\f[CR]flush()\f[R], \f[CR]getSize()\f[R], and \f[CR]truncate()\f[R] were
wrongly specified as asynchronous methods, and older versions of some
browsers implement them in this way.
However, all current browsers that support these methods implement them
as synchronous methods.
.RE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
