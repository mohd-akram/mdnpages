.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Set.forEach" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.forEach \- Set.prototype.forEach()
.SH SYNOPSIS
The \f[B]\f[CB]forEach()\f[B]\f[R] method of \f[CR]Set\f[R] instances
executes a provided function once for each value in this set, in
insertion order.
.SH SYNTAX
.IP
.EX
forEach(callbackFn)
forEach(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callback\f[R]
A function to execute for each entry in the set.
The function is called with the following arguments:
.RS
.TP
\f[B]value\f[R]
Value of each iteration.
.TP
\f[B]key\f[R]
Key of each iteration.
This is always the same as \f[CR]value\f[R].
.TP
\f[B]set\f[R]
The set being iterated.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SH DESCRIPTION
The \f[CR]forEach()\f[R] method executes the provided
\f[CR]callback\f[R] once for each value which actually exists in the
\f[CR]Set\f[R] object.
It is not invoked for values which have been deleted.
However, it is executed for values which are present but have the value
\f[CR]undefined\f[R].
.PP
\f[CR]callback\f[R] is invoked with \f[B]three arguments\f[R]:
.IP \[bu] 2
the \f[B]element value\f[R]
.IP \[bu] 2
the \f[B]element key\f[R]
.IP \[bu] 2
the \f[B]\f[CB]Set\f[B] object being traversed\f[R]
.PP
There are no keys in \f[CR]Set\f[R] objects, however, so the first two
arguments are both \f[B]values\f[R] contained in the \f[CR]Set\f[R].
This is to make it consistent with other \f[CR]forEach()\f[R] methods
for \f[CR]Map\f[R] and \f[CR]Array\f[R].
.PP
If a \f[CR]thisArg\f[R] parameter is provided to \f[CR]forEach()\f[R],
it will be passed to \f[CR]callback\f[R] when invoked, for use as its
\f[CR]this\f[R] value.
Otherwise, the value \f[CR]undefined\f[R] will be passed for use as its
\f[CR]this\f[R] value.
The \f[CR]this\f[R] value ultimately observable by \f[CR]callback\f[R]
is determined according to the usual rules for determining the
\f[CR]this\f[R] seen by a function.
.PP
Each value is visited once, except in the case when it was deleted and
re\-added before \f[CR]forEach()\f[R] has finished.
\f[CR]callback\f[R] is not invoked for values deleted before being
visited.
New values added before \f[CR]forEach()\f[R] has finished will be
visited.
.PP
\f[CR]forEach()\f[R] executes the \f[CR]callback\f[R] function once for
each element in the \f[CR]Set\f[R] object; it does not return a value.
.SH EXAMPLES
.SS Logging the contents of a Set object
The following code logs a line for each element in a \f[CR]Set\f[R]
object:
.IP
.EX
\f[B]function\f[R] logSetElements(value1, value2, \f[B]set\f[R]) {
  console.log(\[ga]s[${value1}] = ${value2}\[ga]);
}

\f[B]new\f[R] Set([\[dq]foo\[dq], \[dq]bar\[dq], \f[B]undefined\f[R]]).forEach(logSetElements);

\f[I]// Logs:\f[R]
\f[I]// \[dq]s[foo] = foo\[dq]\f[R]
\f[I]// \[dq]s[bar] = bar\[dq]\f[R]
\f[I]// \[dq]s[undefined] = undefined\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Array.prototype.forEach()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.forEach()\f[R]
