.\" Automatically generated by Pandoc 3.4
.\"
.TH "Array.toReversed" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.toReversed \- Array.prototype.toReversed()
.SH SYNOPSIS
The \f[B]\f[CB]toReversed()\f[B]\f[R] method of \f[CR]Array\f[R]
instances is the copying counterpart of the \f[CR]reverse()\f[R] method.
It returns a new array with the elements in reversed order.
.SH SYNTAX
.IP
.EX
toReversed()
.EE
.SS Parameters
None.
.SS Return value
A new array containing the elements in reversed order.
.SH DESCRIPTION
The \f[CR]toReversed()\f[R] method transposes the elements of the
calling array object in reverse order and returns a new array.
.PP
When used on sparse arrays, the \f[CR]toReversed()\f[R] method iterates
empty slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]toReversed()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Reversing the elements in an array
The following example creates an array \f[CR]items\f[R], containing
three elements, then creates a new array that\[cq]s the reverse of
\f[CR]items\f[R].
The \f[CR]items\f[R] array remains unchanged.
.IP
.EX
\f[B]const\f[R] items = [1, 2, 3];
console.log(items); \f[I]// [1, 2, 3]\f[R]

\f[B]const\f[R] reversedItems = items.toReversed();
console.log(reversedItems); \f[I]// [3, 2, 1]\f[R]
console.log(items); \f[I]// [1, 2, 3]\f[R]
.EE
.SS Using toReversed() on sparse arrays
The return value of \f[CR]toReversed()\f[R] is never sparse.
Empty slots become \f[CR]undefined\f[R] in the returned array.
.IP
.EX
console.log([1, , 3].toReversed()); \f[I]// [3, undefined, 1]\f[R]
console.log([1, , 3, 4].toReversed()); \f[I]// [4, 3, undefined, 1]\f[R]
.EE
.SS Calling toReversed() on non\-array objects
The \f[CR]toReversed()\f[R] method reads the \f[CR]length\f[R] property
of \f[CR]this\f[R].
It then visits each property having an integer key between
\f[CR]length \- 1\f[R] and \f[CR]0\f[R] in descending order, adding the
value of the current property to the end of the array to be returned.
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  2: 4,
};
console.log(Array.prototype.toReversed.call(arrayLike));
\f[I]// [4, undefined, undefined]\f[R]
\f[I]// The \[aq]0\[aq] and \[aq]1\[aq] indices are not present so they become undefined\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#change-array-by-copy
Polyfill of \f[CR]Array.prototype.toReversed\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array.prototype.reverse()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.toSorted()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.toSpliced()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.with()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.toReversed()\f[R]
