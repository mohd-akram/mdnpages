.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Uint8Array" "JS" "November 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Uint8Array \- Uint8Array
.SH SYNOPSIS
The \f[B]\f[CB]Uint8Array\f[B]\f[R] typed array represents an array of
8\-bit unsigned integers.
The contents are initialized to \f[CR]0\f[R] unless initialization data
is explicitly provided.
Once established, you can reference elements in the array using the
object\[cq]s methods, or using standard array index syntax (that is,
using bracket notation).
.PP
\f[CR]Uint8Array\f[R] is a subclass of the hidden \f[CR]TypedArray\f[R]
class.
.SH DESCRIPTION
\f[CR]Uint8Array\f[R] is currently the only \f[CR]TypedArray\f[R]
subclass that has additional methods compared to other typed arrays.
Because of its nature as a generic byte array, it is the most suitable
for working with arbitrary binary data.
It supports two sets of methods for the creation, serialization, and
modification of \f[CR]Uint8Array\f[R] data to/from hex strings and
base64 strings.
.IP \[bu] 2
\f[CR]Uint8Array.fromBase64()\f[R],
\f[CR]Uint8Array.prototype.toBase64()\f[R], and
\f[CR]Uint8Array.prototype.setFromBase64()\f[R] for working with base64
strings, where 3 bytes are encoded by 4 characters that are either
0\[en]9, A\[en]Z, a\[en]z, \[lq]+\[rq], and \[lq]/\[rq] (or \[lq]\-\[rq]
and \[lq]_\[rq], if using URL\-safe base64).
.IP \[bu] 2
\f[CR]Uint8Array.fromHex()\f[R],
\f[CR]Uint8Array.prototype.toHex()\f[R], and
\f[CR]Uint8Array.prototype.setFromHex()\f[R] for working with hex
strings, where every byte is encoded by two characters, each one being
either 0\[en]9 or A\[en]F (case\-insensitive).
.SH CONSTRUCTOR
.TP
\f[B]Uint8Array()\f[R]
Creates a new \f[CR]Uint8Array\f[R] object.
.SH STATIC PROPERTIES
\f[I]Also inherits static properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.TP
\f[B]Uint8Array.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]1\f[R] in the case of \f[CR]Uint8Array\f[R].
.SH STATIC METHODS
\f[I]Inherits static methods from its parent \f[CI]TypedArray\f[I]\f[R].
.TP
\f[B]Uint8Array.fromBase64()\f[R]
Creates a new \f[CR]Uint8Array\f[R] object from a base64\-encoded
string.
.TP
\f[B]Uint8Array.fromHex()\f[R]
Creates a new \f[CR]Uint8Array\f[R] object from a hex\-encoded string.
.SH INSTANCE PROPERTIES
\f[I]Also inherits instance properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.PP
These properties are defined on \f[CR]Uint8Array.prototype\f[R] and
shared by all \f[CR]Uint8Array\f[R] instances.
.TP
\f[B]Uint8Array.prototype.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]1\f[R] in the case of a \f[CR]Uint8Array\f[R].
.TP
\f[B]Uint8Array.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Uint8Array\f[R] instances, the initial value is the
\f[CR]Uint8Array\f[R] constructor.
.SH INSTANCE METHODS
\f[I]Inherits instance methods from its parent
\f[CI]TypedArray\f[I]\f[R].
.TP
\f[B]Uint8Array.prototype.setFromBase64()\f[R]
Populates this \f[CR]Uint8Array\f[R] object with bytes from a
base64\-encoded string, returning an object indicating how many bytes
were read and written.
.TP
\f[B]Uint8Array.prototype.setFromHex()\f[R]
Populates this \f[CR]Uint8Array\f[R] object with bytes from a
hex\-encoded string, returning an object indicating how many bytes were
read and written.
.TP
\f[B]Uint8Array.prototype.toBase64()\f[R]
Returns a base64\-encoded string based on the data in this
\f[CR]Uint8Array\f[R] object.
.TP
\f[B]Uint8Array.prototype.toHex()\f[R]
Returns a hex\-encoded string based on the data in this
\f[CR]Uint8Array\f[R] object.
.SH EXAMPLES
.SS Different ways to create a Uint8Array
.IP
.EX
\f[I]// From a length\f[R]
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array(2);
uint8[0] = 42;
console.log(uint8[0]); \f[I]// 42\f[R]
console.log(uint8.length); \f[I]// 2\f[R]
console.log(uint8.BYTES_PER_ELEMENT); \f[I]// 1\f[R]

\f[I]// From an array\f[R]
\f[B]const\f[R] x = \f[B]new\f[R] Uint8Array([21, 31]);
console.log(x[1]); \f[I]// 31\f[R]

\f[I]// From another TypedArray\f[R]
\f[B]const\f[R] y = \f[B]new\f[R] Uint8Array(x);
console.log(y[0]); \f[I]// 21\f[R]

\f[I]// From an ArrayBuffer\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8);
\f[B]const\f[R] z = \f[B]new\f[R] Uint8Array(buffer, 1, 4);
console.log(z.byteOffset); \f[I]// 1\f[R]

\f[I]// From an iterable\f[R]
\f[B]const\f[R] iterable = (\f[B]function\f[R]* () {
  \f[B]yield\f[R]* [1, 2, 3];
})();
\f[B]const\f[R] uint8FromIterable = \f[B]new\f[R] Uint8Array(iterable);
console.log(uint8FromIterable);
\f[I]// Uint8Array [1, 2, 3]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]Uint8Array\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]DataView\f[R]
