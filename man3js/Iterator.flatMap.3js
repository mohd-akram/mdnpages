.\" Automatically generated by Pandoc 3.4
.\"
.TH "Iterator.flatMap" "JS" "November 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Iterator.flatMap \- Iterator.prototype.flatMap()
.SH SYNOPSIS
The \f[B]\f[CB]flatMap()\f[B]\f[R] method of \f[CR]Iterator\f[R]
instances returns a new iterator helper object that takes each element
in the original iterator, runs it through a mapping function, and yields
elements returned by the mapping function (which are contained in
another iterator or iterable).
.SH SYNTAX
.IP
.EX
flatMap(callbackFn)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element produced by the iterator.
It should return an iterator or iterable that yields elements to be
yielded by \f[CR]flatMap()\f[R].
Note that unlike \f[CR]Array.prototype.flatMap()\f[R], you cannot return
single non\-iterator/iterable values.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.RE
.SS Return value
A new iterator helper object.
The first time the iterator helper\[cq]s \f[CR]next()\f[R] method is
called, it calls \f[CR]callbackFn\f[R] on the first element produced by
the underlying iterator, and the return value, which should be an
iterator or iterable, is yielded one\-by\-one by the iterator helper
(like \f[CR]yield*\f[R]).
The next element is fetched from the underlying iterator when the
previous one returned by \f[CR]callbackFn\f[R] is completed.
When the underlying iterator is completed, the iterator helper is also
completed (the \f[CR]next()\f[R] method produces
\f[CR]{ value: undefined, done: true }\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]callbackFn\f[R] returns a non\-iterator/iterable value
or a string primitive.
.SH DESCRIPTION
\f[CR]flatMap\f[R] accepts two kinds of return values from
\f[CR]callbackFn\f[R]: an iterator or iterable.
They are handled in the same way as \f[CR]Iterator.from()\f[R]: if the
return value is iterable, the \f[CR][Symbol.iterator]()\f[R] method is
called and the return value is used; otherwise, the return value is
treated as an iterator and its \f[CR]next()\f[R] method is called.
.IP
.EX
[1, 2, 3]
  .values()
  .flatMap((x) \f[B]=>\f[R] {
    \f[B]let\f[R] itDone = \f[B]false\f[R];
    \f[B]const\f[R] it = {
      next() {
        \f[B]if\f[R] (itDone) {
          \f[B]return\f[R] { value: \f[B]undefined\f[R], done: \f[B]true\f[R] };
        }
        itDone = \f[B]true\f[R];
        \f[B]return\f[R] { value: x, done: \f[B]false\f[R] };
      },
    };
    \f[B]switch\f[R] (x) {
      \f[B]case\f[R] 1:
        \f[I]// An iterable that\[aq]s not an iterator\f[R]
        \f[B]return\f[R] { [Symbol.iterator]: () \f[B]=>\f[R] it };
      \f[B]case\f[R] 2:
        \f[I]// An iterator that\[aq]s not an iterable\f[R]
        \f[B]return\f[R] it;
      \f[B]case\f[R] 3:
        \f[I]// An iterable iterator is treated as an iterable\f[R]
        \f[B]return\f[R] {
          ...it,
          [Symbol.iterator]() {
            console.log(\[dq]Symbol.iterator called\[dq]);
            \f[B]return\f[R] it;
          },
        };
    }
  })
  .toArray();
\f[I]// Logs \[dq]Symbol.iterator called\[dq]\f[R]
\f[I]// Returns [1, 2, 3]\f[R]
.EE
.SH EXAMPLES
.SS Merging maps
The following example merges two \f[CR]Map\f[R] objects into one:
.IP
.EX
\f[B]const\f[R] map1 = \f[B]new\f[R] Map([
  [\[dq]a\[dq], 1],
  [\[dq]b\[dq], 2],
  [\[dq]c\[dq], 3],
]);
\f[B]const\f[R] map2 = \f[B]new\f[R] Map([
  [\[dq]d\[dq], 4],
  [\[dq]e\[dq], 5],
  [\[dq]f\[dq], 6],
]);

\f[B]const\f[R] merged = \f[B]new\f[R] Map([map1, map2].values().flatMap((x) \f[B]=>\f[R] x));
console.log(merged.get(\[dq]a\[dq])); \f[I]// 1\f[R]
console.log(merged.get(\[dq]e\[dq])); \f[I]// 5\f[R]
.EE
.PP
This avoids creating any temporary copies of the map\[cq]s content.
Note that the array \f[CR][map1, map2]\f[R] must first be converted to
an iterator (using \f[CR]Array.prototype.values()\f[R]), because
\f[CR]Array.prototype.flatMap()\f[R] only flattens arrays, not
iterables.
.IP
.EX
\f[B]new\f[R] Map([map1, map2].flatMap((x) \f[B]=>\f[R] x)); \f[I]// Map(1) {undefined => undefined}\f[R]
.EE
.SS Returning strings
Strings are iterable, but \f[CR]flatMap()\f[R] specifically rejects
string primitives returned from \f[CR]callbackFn\f[R], this is because
the behavior of iterating by code points is often not what you want.
.PP
\f[B]Bad\f[R]
.IP
.EX
[1, 2, 3]
  .values()
  .flatMap((x) \f[B]=>\f[R] String(x))
  .toArray(); \f[I]// TypeError: Iterator.prototype.flatMap called on non\-object\f[R]
.EE
.PP
You may want to wrap it in an array instead so the entire string is
yielded as one:
.IP
.EX
[1, 2, 3]
  .values()
  .flatMap((x) \f[B]=>\f[R] [String(x)])
  .toArray(); \f[I]// [\[aq]1\[aq], \[aq]2\[aq], \[aq]3\[aq]]\f[R]
.EE
.PP
Or, if the behavior of iterating by code points is intended, you can use
\f[CR]Iterator.from()\f[R] to convert it to a proper iterator:
.IP
.EX
[1, 2, 3]
  .values()
  .flatMap((x) \f[B]=>\f[R] Iterator.from(String(x * 10)))
  .toArray();
\f[I]// [\[aq]1\[aq], \[aq]0\[aq], \[aq]2\[aq], \[aq]0\[aq], \[aq]3\[aq], \[aq]0\[aq]]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#iterator-helpers
Polyfill of \f[CR]Iterator.prototype.flatMap\f[R] in \f[CR]core\-js\f[R]
.UE \c
