.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RTCRtpScriptTransformer.writable" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpScriptTransformer.writable \- RTCRtpScriptTransformer: writable
property
.SH SYNOPSIS
The \f[B]\f[CB]writable\f[B]\f[R] read\-only property of the
\f[CR]RTCRtpScriptTransformer\f[R] interface returns a
\f[CR]WritableStream\f[R] instance that can be used as a sink for
encoded media frames enqueued on the corresponding
\f[CR]RTCRtpScriptTransformer.readable\f[R].
.PP
When the corresponding \f[CR]RTCRtpScriptTransform\f[R] is inserted into
the WebRTC sender and receiver pipelines, encoded media frames
(\f[CR]RTCEncodedVideoFrame\f[R] or \f[CR]RTCEncodedAudioFrame\f[R]) may
be enqueued on the \f[CR]RTCRtpScriptTransformer.readable\f[R].
A WebRTC encoded transform can read the frames from \f[CR]readable\f[R],
modify them as needed, and then send them back into the WebRTC pipeline
by sending them to this \f[CR]writable\f[R].
A common way to perform this operation is to pipe the frames through a
\f[CR]TransformStream\f[R].
.SH VALUE
A \f[CR]WritableStream\f[R].
.SH EXAMPLES
The following example shows how
\f[CR]RTCRtpScriptTransformer.readable\f[R] is piped through a
\f[CR]TransformStream\f[R] to
\f[CR]RTCRtpScriptTransformer.writable\f[R].
.IP
.EX
addEventListener(\[dq]rtctransform\[dq], (event) \f[B]=>\f[R] {
  \f[B]let\f[R] transform;
  \f[I]// Select a transform based on passed options\f[R]
  \f[B]if\f[R] (event.transformer.options.name == \[dq]senderTransform\[dq])
    transform = createSenderTransform(); \f[I]// A TransformStream\f[R]
  \f[B]else\f[R] \f[B]if\f[R] (event.transformer.options.name == \[dq]receiverTransform\[dq])
    transform = createReceiverTransform(); \f[I]// A TransformStream\f[R]
  \f[B]else\f[R] \f[B]return\f[R];

  \f[I]// Pipe frames from the readable to writeable through TransformStream\f[R]
  event.transformer.readable
    .pipeThrough(transform)
    .pipeTo(event.transformer.writable);
});
.EE
.PP
The code implements a handler for the \f[CR]rtctransform\f[R] event,
which is fired at the global worker object on construction of the
corresponding \f[CR]RTCRtpScriptTransform\f[R], and when new frames are
enqueued for processing.
\f[CR]event.transformer\f[R] is the \f[CR]RTCRtpScriptTransformer\f[R]
that has the \f[CR]writable\f[R] and \f[CR]readable\f[R] properties.
.PP
An different \f[CR]TransformStream\f[R] is created to process outgoing
and incoming frames, using \f[CR]createSenderTransform()\f[R] or
\f[CR]createReceiverTransform()\f[R], respectively (implementations not
shown).
The event handler chooses the correct transform stream to use based on
options passed through from the \f[CR]RTCRtpScriptTransform\f[R]
constructor and assigns it to \f[CR]transform\f[R].
.PP
The code calls \f[CR]ReadableStream.pipeThrough()\f[R] on the
\f[CR]readable\f[R] to pipe encoded frames through the selected
\f[CR]TransformStream\f[R], and then \f[CR]ReadableStream.pipeTo()\f[R]
to pipe them to the \f[CR]RTCRtpScriptTransformer.writable\f[R].
