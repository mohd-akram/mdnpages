.\" Automatically generated by Pandoc 3.4
.\"
.TH "HTMLButtonElement.popoverTargetElement" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLButtonElement.popoverTargetElement \- HTMLButtonElement:
popoverTargetElement property
.SH SYNOPSIS
The \f[B]\f[CB]popoverTargetElement\f[B]\f[R] property of the
\f[CR]HTMLButtonElement\f[R] interface gets and sets the popover element
to control via a button.
.PP
It is the JavaScript equivalent of the \f[CR]popovertarget\f[R] HTML
attribute.
.SH VALUE
A reference to a popover element in the DOM.
.SH EXAMPLES
.SS Toggle popover action with an auto popover
This example shows the basic use of the popover API, setting a
\f[CR]<div>\f[R] element as a popover, and then setting it as the
\f[CR]popoverTargetElement\f[R] of a \f[CR]<button>\f[R].
The \f[CR]popover\f[R] attribute is set to \f[CR]\[dq]manual\[dq]\f[R],
so the popover must be closed using a button, and not \[lq]light
dismissed\[rq] by selecting outside the popover area.
.PP
First we define an HTML \f[CR]<button>\f[R] element that we will use to
show and hide the popover, and a \f[CR]<div>\f[R] that will be the
popover.
In this case we don\[cq]t set the \f[CR]popovertargetaction\f[R] HTML
attribute on the \f[CR]<button>\f[R] or the \f[CR]popover\f[R] attribute
on the \f[CR]<div>\f[R], as we will be doing so programmatically.
.IP
.EX
<\f[B]button\f[R] id=\[dq]toggleBtn\[dq]>Toggle popover</\f[B]button\f[R]>
<\f[B]div\f[R] id=\[dq]mypopover\[dq]>This is popover content!</\f[B]div\f[R]>
.EE
.PP
The JavaScript code first gets a handle to the \f[CR]<div>\f[R] and
\f[CR]<button>\f[R] elements.
It then defines a function to check for popover support.
.IP
.EX
\f[B]const\f[R] popover = document.getElementById(\[dq]mypopover\[dq]);
\f[B]const\f[R] toggleBtn = document.getElementById(\[dq]toggleBtn\[dq]);

\f[I]// Check for popover API support.\f[R]
\f[B]function\f[R] supportsPopover() {
  \f[B]return\f[R] HTMLElement.prototype.hasOwnProperty(\[dq]popover\[dq]);
}
.EE
.PP
If the popover API is supported the code sets the \f[CR]<div>\f[R]
element\[cq]s \f[CR]popover\f[R] attribute to \f[CR]\[dq]auto\[dq]\f[R]
and makes it the popover target of the toggle button.
We then set the \f[CR]popoverTargetAction\f[R] of the
\f[CR]<button>\f[R] to \f[CR]\[dq]toggle\[dq]\f[R].
If the popover API is not supported we change the text content of the
\f[CR]<div>\f[R] element to state this, and hide the toggle button.
.IP
.EX
\f[B]if\f[R] (supportsPopover()) {
  \f[I]// Set the <div> element to be an auto popover\f[R]
  popover.popover = \[dq]auto\[dq];

  \f[I]// Set the button popover target to be the popover\f[R]
  toggleBtn.popoverTargetElement = popover;

  \f[I]// Set that the button toggles popover visibility\f[R]
  toggleBtn.popoverTargetAction = \[dq]toggle\[dq];
} \f[B]else\f[R] {
  popover.textContent = \[dq]Popover API not supported.\[dq];
  toggleBtn.hidden = \f[B]true\f[R];
}
.EE
.RS
.PP
\f[B]Note:\f[R] A popover element is hidden by default, but if the API
is not supported your element will display \[lq]as usual\[rq].
.RE
.PP
You can try out the example below.
Show and hide the popover by toggling the button.
The \[lq]auto\[rq] popover can also be dismissed by selecting outside
the bounds of the popover text.
.SH SEE ALSO
.IP \[bu] 2
Popover API
