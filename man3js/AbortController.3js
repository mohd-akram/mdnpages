.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "AbortController" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AbortController \- AbortController
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]AbortController\f[B]\f[R] interface represents a
controller object that allows you to abort one or more Web requests as
and when desired.
.PP
You can create a new \f[CR]AbortController\f[R] object using the
\f[CR]AbortController()\f[R] constructor.
Communicating with an asynchronous operation is done using an
\f[CR]AbortSignal\f[R] object.
.SH CONSTRUCTOR
.TP
\f[B]AbortController()\f[R]
Creates a new \f[CR]AbortController\f[R] object instance.
.SH INSTANCE PROPERTIES
.TP
\f[B]AbortController.signal\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]AbortSignal\f[R] object instance, which can be used to
communicate with, or to abort, an asynchronous operation.
.SH INSTANCE METHODS
.TP
\f[B]AbortController.abort()\f[R]
Aborts an asynchronous operation before it has completed.
This is able to abort fetch requests, consumption of any response
bodies, and streams.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] There are additional examples in the
\f[CR]AbortSignal\f[R] reference.
.RE
.PP
In the following snippet, we aim to download a video using the Fetch
API.
.PP
We first create a controller using the \f[CR]AbortController()\f[R]
constructor, then grab a reference to its associated
\f[CR]AbortSignal\f[R] object using the
\f[CR]AbortController.signal\f[R] property.
.PP
When the fetch request is initiated, we pass in the
\f[CR]AbortSignal\f[R] as an option inside the request\[cq]s options
object (the \f[CR]{signal}\f[R] below).
This associates the signal and controller with the fetch request and
allows us to abort it by calling \f[CR]AbortController.abort()\f[R], as
seen below in the second event listener.
.PP
When \f[CR]abort()\f[R] is called, the \f[CR]fetch()\f[R] promise
rejects with a \f[CR]DOMException\f[R] named \f[CR]AbortError\f[R].
.IP
.EX
\f[B]let\f[R] controller;
\f[B]const\f[R] url = \[dq]video.mp4\[dq];

\f[B]const\f[R] downloadBtn = document.querySelector(\[dq].download\[dq]);
\f[B]const\f[R] abortBtn = document.querySelector(\[dq].abort\[dq]);

downloadBtn.addEventListener(\[dq]click\[dq], fetchVideo);

abortBtn.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]if\f[R] (controller) {
    controller.abort();
    console.log(\[dq]Download aborted\[dq]);
  }
});

\f[B]async\f[R] \f[B]function\f[R] fetchVideo() {
  controller = \f[B]new\f[R] AbortController();
  \f[B]const\f[R] signal = controller.signal;

  \f[B]try\f[R] {
    \f[B]const\f[R] response = \f[B]await\f[R] fetch(url, { signal });
    console.log(\[dq]Download complete\[dq], response);
    \f[I]// process response further\f[R]
  } \f[B]catch\f[R] (err) {
    console.error(\[ga]Download error: ${err.message}\[ga]);
  }
}
.EE
.PP
If the request is aborted after the \f[CR]fetch()\f[R] call has been
fulfilled but before the response body has been read, then attempting to
read the response body will reject with an \f[CR]AbortError\f[R]
exception.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] get() {
  \f[B]const\f[R] controller = \f[B]new\f[R] AbortController();
  \f[B]const\f[R] request = \f[B]new\f[R] Request(\[dq]https://example.org/get\[dq], {
    signal: controller.signal,
  });

  \f[B]const\f[R] response = \f[B]await\f[R] fetch(request);
  controller.abort();
  \f[I]// The next line will throw \[ga]AbortError\[ga]\f[R]
  \f[B]const\f[R] text = \f[B]await\f[R] response.text();
  console.log(text);
}
.EE
.PP
You can find a \c
.UR https://github.com/mdn/dom-examples/tree/main/abort-api
full working example on GitHub
.UE \c
; you can also see it \c
.UR https://mdn.github.io/dom-examples/abort-api/
running live
.UE \c
\&.
.SH SEE ALSO
.IP \[bu] 2
Fetch API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/blog/abortable-fetch/
Abortable Fetch
.UE \c
\ by Jake Archibald
