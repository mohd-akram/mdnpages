.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "XSLTPROCESSOR.REMOVEPARAMETER" "3JS" "August 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XSLTProcessor.removeParameter \- XSLTProcessor: removeParameter() method
.SH SYNOPSIS
The \f[CR]removeParameter()\f[R] method of the \f[CR]XSLTProcessor\f[R]
interface removes the parameter (\f[CR]<xsl:param>\f[R]) and its value
from the stylesheet imported in the processor.
.SH SYNTAX
.IP
.EX
removeParameter(namespaceURI, localName)
.EE
.SS Parameters
.TP
\f[B]namespaceURI\f[R]
The namespace associated with the parameter name.
A \(lqnull\(rq value is treated the same as the empty string
(\f[CR]\(dq\(dq\f[R]).
.TP
\f[B]localName\f[R]
The name of the parameter in the associated namespace.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Using removeParameter()
First, the \f[CR]showItems\f[R] parameter is set to
\f[CR]\(dqyes\(dq\f[R], which allows the list items to be displayed in
the output.
.PP
After that, the \f[CR]showItems\f[R] parameter is removed using
\f[CR]removeParameter()\f[R], and the transformation is performed again,
resulting in no items being displayed.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\(dqresult\(dq></\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] xmlString = \(ga
<items>
  <item>Item 1</item>
  <item>Item 2</item>
</items>
\(ga;

\f[B]const\f[R] xsltString = \(ga
<xsl:stylesheet version=\(dq1.0\(dq xmlns:xsl=\(dqhttp://www.w3.org/1999/XSL/Transform\(dq>
  <xsl:param name=\(dqshowItems\(dq select=\(dq\(aqyes\(aq\(dq/>
  <xsl:template match=\(dq/\(dq>
    <!\-\- If showItems is \(aqyes\(aq, display the list of items \-\->
    <xsl:if test=\(dq$showItems = \(aqyes\(aq\(dq>
      <ul>
        <xsl:for\-each select=\(dqitems/item\(dq>
          <li><xsl:value\-of select=\(dq.\(dq/></li>
        </xsl:for\-each>
      </ul>
    </xsl:if>
    <!\-\- If showItems is \(aqno\(aq, display a message \-\->
    <xsl:if test=\(dq$showItems = \(aqno\(aq\(dq>
      <div>No content to show</div>
    </xsl:if>
  </xsl:template>
</xsl:stylesheet>
\(ga;

\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
\f[B]const\f[R] xmlDoc = parser.parseFromString(xmlString, \(dqapplication/xml\(dq);
\f[B]const\f[R] xsltDoc = parser.parseFromString(xsltString, \(dqapplication/xml\(dq);

\f[B]const\f[R] xsltProcessor = \f[B]new\f[R] XSLTProcessor();
xsltProcessor.importStylesheet(xsltDoc);

\f[I]// Set \(aqshowItems\(aq to \(aqno\(aq and perform the first transformation\f[R]
xsltProcessor.setParameter(\f[B]null\f[R], \(dqshowItems\(dq, \(dqno\(dq);
\f[B]const\f[R] resultContainer = document.getElementById(\(dqresult\(dq);
\f[B]let\f[R] resultFragment = xsltProcessor.transformToFragment(xmlDoc, document);
resultContainer.appendChild(resultFragment);

\f[I]// Add a horizontal rule to separate the results\f[R]
resultContainer.appendChild(document.createElement(\(dqhr\(dq));

\f[I]// Remove the \(aqshowItems\(aq parameter, reverting it to the default value (\(aqyes\(aq)\f[R]
xsltProcessor.removeParameter(\f[B]null\f[R], \(dqshowItems\(dq);
resultFragment = xsltProcessor.transformToFragment(xmlDoc, document);
resultContainer.appendChild(resultFragment);
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
\f[CR]XSLTProcessor.getParameter()\f[R]
.IP \(bu 2
\f[CR]XSLTProcessor.setParameter()\f[R]
.IP \(bu 2
\f[CR]XSLTProcessor.clearParameters()\f[R]
.IP \(bu 2
\f[CR]XSLTProcessor.reset()\f[R]
