.\" Automatically generated by Pandoc 3.4
.\"
.TH "Node.getRootNode" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Node.getRootNode \- Node: getRootNode() method
.SH SYNOPSIS
The \f[B]\f[CB]getRootNode()\f[B]\f[R] method of the \f[CR]Node\f[R]
interface returns the context object\[cq]s root, which optionally
includes the shadow root if it is available.
.SH SYNTAX
.IP
.EX
getRootNode()
getRootNode(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that sets options for getting the root node.
The available options are:
.RS
.IP \[bu] 2
\f[CR]composed\f[R]: A boolean value that indicates whether the shadow
root should be returned (\f[CR]false\f[R], the default), or a root node
beyond shadow root (\f[CR]true\f[R]).
.RE
.SS Return value
An object inheriting from \f[CR]Node\f[R].
This will differ in exact form depending on where you call
\f[CR]getRootNode()\f[R]; for example:
.IP \[bu] 2
Calling it on an element inside a standard web page will return an
\f[CR]HTMLDocument\f[R] object representing the entire page (or
\f[CR]<iframe>\f[R]).
.IP \[bu] 2
Calling it on an element inside a shadow DOM will return the associated
\f[CR]ShadowRoot\f[R].
.IP \[bu] 2
Calling it on an element that is not attached to a document or a shadow
tree will return the root of the DOM tree it belongs to.
.SH EXAMPLES
.SS Example 1
The first simple example returns a reference to the HTML/document node:
.IP
.EX
\f[B]const\f[R] rootNode = node.getRootNode();
.EE
.SS Example 2
This more complex example shows the difference between returning a
normal root, and a root including the shadow root:
.IP
.EX
<\f[B]div\f[R] class=\[dq]parent\[dq]>
  <\f[B]div\f[R] class=\[dq]child\[dq]></\f[B]div\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] class=\[dq]shadowHost\[dq]>shadowHost</\f[B]div\f[R]>
<\f[B]pre\f[R] id=\[dq]output\[dq]>Output: </\f[B]pre\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] parent = document.querySelector(\[dq].parent\[dq]);
\f[B]const\f[R] child = document.querySelector(\[dq].child\[dq]);
\f[B]const\f[R] shadowHost = document.querySelector(\[dq].shadowHost\[dq]);
\f[B]const\f[R] output = document.getElementById(\[dq]output\[dq]);

output.innerText += \[ga]\[rs]nparent\[aq]s root: ${parent.getRootNode().nodeName}\[rs]n\[ga]; \f[I]// #document\f[R]
output.innerText += \[ga]child\[aq]s  root: ${child.getRootNode().nodeName}\[rs]n\[rs]n\[ga]; \f[I]// #document\f[R]

\f[I]// create a ShadowRoot\f[R]
\f[B]const\f[R] shadowRoot = shadowHost.attachShadow({ mode: \[dq]open\[dq] });
shadowRoot.innerHTML =
  \[aq]<style>div{background:#2bb8aa;}</style><div class=\[dq]shadowChild\[dq]>shadowChild</div>\[aq];
\f[B]const\f[R] shadowChild = shadowRoot.querySelector(\[dq].shadowChild\[dq]);

\f[I]// The default value of composed is false\f[R]
output.innerText += \[ga]shadowChild.getRootNode() === shadowRoot : ${
  shadowChild.getRootNode() === shadowRoot
}\[rs]n\[ga]; \f[I]// true\f[R]
output.innerText += \[ga]shadowChild.getRootNode({ composed:false }) === shadowRoot : ${
  shadowChild.getRootNode({ composed: \f[B]false\f[R] }) === shadowRoot
}\[rs]n\[ga]; \f[I]// true\f[R]
output.innerText += \[ga]shadowChild.getRootNode({ composed:true }).nodeName : ${
  shadowChild.getRootNode({ composed: \f[B]true\f[R] }).nodeName
}\[rs]n\[ga]; \f[I]// #document\f[R]
.EE
.SS Example 3
This example returns the root of the unmounted tree.
Note \f[CR]element\f[R] here is the root of the tree (as it has no
parent), so by definition its root is itself:
.IP
.EX
\f[B]const\f[R] element = document.createElement(\[dq]p\[dq]);
\f[B]const\f[R] child = document.createElement(\[dq]span\[dq]);

element.append(child);

\f[B]const\f[R] rootNode = child.getRootNode(); \f[I]// <p><span></span></p>\f[R]

element === rootNode; \f[I]// true\f[R]
element === element.getRootNode(); \f[I]// true\f[R]
.EE
