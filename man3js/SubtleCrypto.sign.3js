.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "SubtleCrypto.sign" "JS" "March 7, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SubtleCrypto.sign \- SubtleCrypto: sign() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]sign()\f[B]\f[R] method of the \f[CR]SubtleCrypto\f[R]
interface generates a digital signature.
.PP
It takes as its arguments a key to sign with, some algorithm\-specific
parameters, and the data to sign.
It returns a \f[CR]Promise\f[R] which will be fulfilled with the
signature.
.PP
You can use the corresponding \f[CR]SubtleCrypto.verify()\f[R] method to
verify the signature.
.SH SYNTAX
.IP
.EX
sign(algorithm, key, data)
.EE
.SS Parameters
.TP
\f[B]algorithm\f[R]
A string or object that specifies the signature algorithm to use and its
parameters:
.RS
.IP \[bu] 2
To use RSASSA\-PKCS1\-v1_5, pass the string
\f[CR]\[dq]RSASSA\-PKCS1\-v1_5\[dq]\f[R] or an object of the form
\f[CR]{ \[dq]name\[dq]: \[dq]RSASSA\-PKCS1\-v1_5\[dq] }\f[R].
.IP \[bu] 2
To use RSA\-PSS, pass an \f[CR]RsaPssParams\f[R] object.
.IP \[bu] 2
To use ECDSA, pass an \f[CR]EcdsaParams\f[R] object.
.IP \[bu] 2
To use HMAC, pass the string \f[CR]\[dq]HMAC\[dq]\f[R] or an object of
the form \f[CR]{ \[dq]name\[dq]: \[dq]HMAC\[dq] }\f[R].
.RE
.TP
\f[B]key\f[R]
A \f[CR]CryptoKey\f[R] object containing the key to be used for signing.
If \f[CR]algorithm\f[R] identifies a public\-key cryptosystem, this is
the private key.
.TP
\f[B]data\f[R]
An \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R] or a
\f[CR]DataView\f[R] object containing the data to be signed.
.SS Return value
A \f[CR]Promise\f[R] that fulfills with an \f[CR]ArrayBuffer\f[R]
containing the signature.
.SS Exceptions
The promise is rejected when the following exception is encountered:
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Raised when the signing key is not a key for the request signing
algorithm or when trying to use an algorithm that is either unknown or
isn\[cq]t suitable for signing.
.SH SUPPORTED ALGORITHMS
The Web Crypto API provides four algorithms that can be used for signing
and signature verification.
.PP
Three of these algorithms \[em] RSASSA\-PKCS1\-v1_5, RSA\-PSS, and ECDSA
\[em] are public\-key cryptosystems that use the private key for signing
and the public key for verification.
These systems all use a digest algorithm to hash the message to a short
fixed size before signing.
Except for ECDSA (for which it is passed in the \f[CR]algorithm\f[R]
object), the choice of digest algorithm is passed into the
\f[CR]generateKey()\f[R] or \f[CR]importKey()\f[R] functions.
.PP
The fourth algorithm \[em] HMAC \[em] uses the same algorithm and key
for signing and for verification: this means that the verification key
must be kept secret, which in turn means that this algorithm is not
suitable for many signature use cases.
It can be a good choice however when the signer and verifier are the
same entity.
.SS RSASSA\-PKCS1\-v1_5
The RSASSA\-PKCS1\-v1_5 algorithm is specified in \c
.UR https://datatracker.ietf.org/doc/html/rfc3447
RFC 3447
.UE \c
\&.
.SS RSA\-PSS
The RSA\-PSS algorithm is specified in \c
.UR https://datatracker.ietf.org/doc/html/rfc3447
RFC 3447
.UE \c
\&.
.PP
It\[cq]s different from RSASSA\-PKCS1\-v1_5 in that it incorporates a
random salt in the signature operation, so the same message signed with
the same key will not result in the same signature each time.
An extra property, defining the salt length, is passed into the
\f[CR]sign()\f[R] and \f[CR]verify()\f[R] functions when they are
invoked.
.SS ECDSA
ECDSA (Elliptic Curve Digital Signature Algorithm) is a variant of the
Digital Signature Algorithm, specified in \c
.UR https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf
FIPS\-186
.UE \c
, that uses Elliptic Curve Cryptography (\c
.UR https://datatracker.ietf.org/doc/html/rfc6090
RFC 6090
.UE \c
).
.PP
Signatures are encoded as the \f[CR]s1\f[R] and \f[CR]s2\f[R] values
specified in RFC 6090 (known respectively as \f[CR]r\f[R] and
\f[CR]s\f[R] in \c
.UR https://datatracker.ietf.org/doc/html/rfc4754#section-3
RFC 4754
.UE \c
), each in big\-endian byte arrays, with their length the bit size of
the curve rounded up to a whole number of bytes.
These values are concatenated together in this order.
.PP
This encoding was also proposed by the \c
.UR https://standards.ieee.org/ieee/1363/2049/
IEEE 1363\-2000
.UE \c
\ standard, and is sometimes referred to as the IEEE P1363 format.
It differs from the \c
.UR https://www.itu.int/rec/T-REC-X.509
X.509
.UE \c
\ signature structure, which is the default format produced by some
tools and libraries such as \c
.UR https://www.openssl.org
OpenSSL
.UE \c
\&.
.SS HMAC
The HMAC algorithm calculates and verifies hash\-based message
authentication codes according to the \c
.UR https://csrc.nist.gov/csrc/media/publications/fips/198/1/final/documents/fips-198-1_final.pdf
FIPS 198\-1 standard
.UE \c
\&.
.PP
The digest algorithm to use is specified in the
\f[CR]HmacKeyGenParams\f[R] object that you pass into
\f[CR]generateKey()\f[R], or the \f[CR]HmacImportParams\f[R] object that
you pass into \f[CR]importKey()\f[R].
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] You can \c
.UR https://mdn.github.io/dom-examples/web-crypto/sign-verify/index.html
try the working examples
.UE \c
\ out on GitHub.
.RE
.SS RSASSA\-PKCS1\-v1_5
This code fetches the contents of a text box, encodes it for signing,
and signs it with a private key.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/rsassa-pkcs1.js
See the complete source code on GitHub.
.UE \c
.IP
.EX
\f[I]/*\f[R]
\f[I]Fetch the contents of the \[dq]message\[dq] textbox, and encode it\f[R]
\f[I]in a form we can use for the sign operation.\f[R]
\f[I]*/\f[R]
\f[B]function\f[R] getMessageEncoding() {
  \f[B]const\f[R] messageBox = document.querySelector(\[dq].rsassa\-pkcs1 #message\[dq]);
  \f[B]let\f[R] message = messageBox.value;
  \f[B]let\f[R] enc = \f[B]new\f[R] TextEncoder();
  \f[B]return\f[R] enc.encode(message);
}

\f[B]let\f[R] encoded = getMessageEncoding();
\f[B]let\f[R] signature = \f[B]await\f[R] window.crypto.subtle.sign(
  \[dq]RSASSA\-PKCS1\-v1_5\[dq],
  privateKey,
  encoded,
);
.EE
.SS RSA\-PSS
This code fetches the contents of a text box, encodes it for signing,
and signs it with a private key.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/rsa-pss.js
See the complete source code on GitHub.
.UE \c
.IP
.EX
\f[I]/*\f[R]
\f[I]Fetch the contents of the \[dq]message\[dq] textbox, and encode it\f[R]
\f[I]in a form we can use for the sign operation.\f[R]
\f[I]*/\f[R]
\f[B]function\f[R] getMessageEncoding() {
  \f[B]const\f[R] messageBox = document.querySelector(\[dq].rsa\-pss #message\[dq]);
  \f[B]let\f[R] message = messageBox.value;
  \f[B]let\f[R] enc = \f[B]new\f[R] TextEncoder();
  \f[B]return\f[R] enc.encode(message);
}

\f[B]let\f[R] encoded = getMessageEncoding();
\f[B]let\f[R] signature = \f[B]await\f[R] window.crypto.subtle.sign(
  {
    name: \[dq]RSA\-PSS\[dq],
    saltLength: 32,
  },
  privateKey,
  encoded,
);
.EE
.SS ECDSA
This code fetches the contents of a text box, encodes it for signing,
and signs it with a private key.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/ecdsa.js
See the complete source code on GitHub.
.UE \c
.IP
.EX
\f[I]/*\f[R]
\f[I]Fetch the contents of the \[dq]message\[dq] textbox, and encode it\f[R]
\f[I]in a form we can use for the sign operation.\f[R]
\f[I]*/\f[R]
\f[B]function\f[R] getMessageEncoding() {
  \f[B]const\f[R] messageBox = document.querySelector(\[dq].ecdsa #message\[dq]);
  \f[B]let\f[R] message = messageBox.value;
  \f[B]let\f[R] enc = \f[B]new\f[R] TextEncoder();
  \f[B]return\f[R] enc.encode(message);
}

\f[B]let\f[R] encoded = getMessageEncoding();
\f[B]let\f[R] signature = \f[B]await\f[R] window.crypto.subtle.sign(
  {
    name: \[dq]ECDSA\[dq],
    hash: { name: \[dq]SHA\-384\[dq] },
  },
  privateKey,
  encoded,
);
.EE
.SS HMAC
This code fetches the contents of a text box, encodes it for signing,
and signs it with a secret key.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/sign-verify/hmac.js
See the complete source code on GitHub.
.UE \c
.IP
.EX
\f[I]/*\f[R]
\f[I]Fetch the contents of the \[dq]message\[dq] textbox, and encode it\f[R]
\f[I]in a form we can use for the sign operation.\f[R]
\f[I]*/\f[R]
\f[B]function\f[R] getMessageEncoding() {
  \f[B]const\f[R] messageBox = document.querySelector(\[dq].hmac #message\[dq]);
  \f[B]let\f[R] message = messageBox.value;
  \f[B]let\f[R] enc = \f[B]new\f[R] TextEncoder();
  \f[B]return\f[R] enc.encode(message);
}

\f[B]let\f[R] encoded = getMessageEncoding();
\f[B]let\f[R] signature = \f[B]await\f[R] window.crypto.subtle.sign(\[dq]HMAC\[dq], key, encoded);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]SubtleCrypto.verify()\f[R].
.IP \[bu] 2
\c
.UR https://datatracker.ietf.org/doc/html/rfc3447
RFC 3447
.UE \c
\ specifies RSASSA\-PKCS1\-v1_5.
.IP \[bu] 2
\c
.UR https://datatracker.ietf.org/doc/html/rfc3447
RFC 3447
.UE \c
\ specifies RSA\-PSS.
.IP \[bu] 2
\c
.UR https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf
FIPS\-186
.UE \c
\ specifies ECDSA.
.IP \[bu] 2
\c
.UR https://csrc.nist.gov/csrc/media/publications/fips/198/1/final/documents/fips-198-1_final.pdf
FIPS 198\-1
.UE \c
\ specifies HMAC.
