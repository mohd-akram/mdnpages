.\" Automatically generated by Pandoc 3.4
.\"
.TH "HighlightRegistry" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HighlightRegistry \- HighlightRegistry
.SH SYNOPSIS
The \f[B]\f[CB]HighlightRegistry\f[B]\f[R] interface of the CSS Custom
Highlight API is used to register \f[CR]Highlight\f[R] objects to be
styled using the API.
It is accessed via \f[CR]CSS.highlights\f[R].
.PP
A \f[CR]HighlightRegistry\f[R] instance is a \f[CR]Map\f[R]\-like
object, in which each key is the name string for a custom highlight, and
the corresponding value is the associated \f[CR]Highlight\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]The \f[CI]HighlightRegistry\f[I] interface doesn\[cq]t inherit any
properties.\f[R]
.TP
\f[B]HighlightRegistry.size\f[R] \f[I](read\-only)\f[R]
Returns the number of \f[CR]Highlight\f[R] objects currently registered.
.SH INSTANCE METHODS
\f[I]The \f[CI]HighlightRegistry\f[I] interface doesn\[cq]t inherit any
methods\f[R].
.TP
\f[B]HighlightRegistry.clear()\f[R]
Remove all \f[CR]Highlight\f[R] objects from the registry.
.TP
\f[B]HighlightRegistry.delete()\f[R]
Remove the named \f[CR]Highlight\f[R] object from the registry.
.TP
\f[B]HighlightRegistry.entries()\f[R]
Returns a new iterator object that contains each \f[CR]Highlight\f[R]
object in the registry, in insertion order.
.TP
\f[B]HighlightRegistry.forEach()\f[R]
Calls the given callback once for each \f[CR]Highlight\f[R] object in
the registry, in insertion order.
.TP
\f[B]HighlightRegistry.get()\f[R]
Gets the named \f[CR]Highlight\f[R] object from the registry.
.TP
\f[B]HighlightRegistry.has()\f[R]
Returns a boolean asserting whether a \f[CR]Highlight\f[R] object is
present the registry or not.
.TP
\f[B]HighlightRegistry.keys()\f[R]
An alias for \f[CR]HighlightRegistry.values()\f[R].
.TP
\f[B]HighlightRegistry.set()\f[R]
Adds the given \f[CR]Highlight\f[R] object to the registry with the
given name, or updates the named \f[CR]Highlight\f[R] object, if it
already exists in the registry.
.TP
\f[B]HighlightRegistry.values()\f[R]
Returns a new iterator object that yields the \f[CR]Highlight\f[R]
objects in the registry, in insertion order.
.SH EXAMPLES
.SS Registering a highlight
The following example demonstrates how to create ranges, instantiate a
new \f[CR]Highlight\f[R] object for them, and register the highlight
using the \f[CR]HighlightRegistry\f[R], to style it on the page:
.SS HTML
.IP
.EX
<\f[B]p\f[R] id=\[dq]foo\[dq]>CSS Custom Highlight API</\f[B]p\f[R]>
.EE
.SS CSS
.IP
.EX
\f[BI]::highlight(\f[R]my\-custom\-highlight\f[BI])\f[R] {
  \f[B]background\-color\f[R]: peachpuff;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] text = document.getElementById(\[dq]foo\[dq]).firstChild;

\f[B]if\f[R] (!CSS.highlights) {
  text.textContent =
    \[dq]The CSS Custom Highlight API is not supported in this browser!\[dq];
}

\f[I]// Create a couple of ranges.\f[R]
\f[B]const\f[R] range1 = \f[B]new\f[R] Range();
range1.setStart(text, 0);
range1.setEnd(text, 3);

\f[B]const\f[R] range2 = \f[B]new\f[R] Range();
range2.setStart(text, 21);
range2.setEnd(text, 24);

\f[I]// Create a custom highlight for these ranges.\f[R]
\f[B]const\f[R] highlight = \f[B]new\f[R] Highlight(range1, range2);

\f[I]// Register the ranges in the HighlightRegistry.\f[R]
CSS.highlights.set(\[dq]my\-custom\-highlight\[dq], highlight);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The CSS Custom Highlight API
.IP \[bu] 2
\c
.UR https://css-tricks.com/css-custom-highlight-api-early-look/
CSS Custom Highlight API: The Future of Highlighting Text Ranges on the
Web
.UE \c
