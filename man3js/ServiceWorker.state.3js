.\" Automatically generated by Pandoc 3.4
.\"
.TH "ServiceWorker.state" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorker.state \- ServiceWorker: state property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]state\f[B]\f[R] read\-only property of the
\f[CR]ServiceWorker\f[R] interface returns a string representing the
current state of the service worker.
It can be one of the following values: \f[CR]parsed\f[R],
\f[CR]installing\f[R], \f[CR]installed\f[R], \f[CR]activating\f[R],
\f[CR]activated\f[R], or \f[CR]redundant\f[R].
.SH VALUE
A \f[CR]String\f[R] that can take one of the following values:
.TP
\f[B]\[dq]parsed\[dq]\f[R]
The initial state of a service worker after it is downloaded and
confirmed to be runnable.
A service worker is never updated to this state, so this will never be
the value of the \f[CR]statechange\f[R] event.
.TP
\f[B]\[dq]installing\[dq]\f[R]
The service worker in this state is considered an installing worker.
During this state, \f[CR]ExtendableEvent.waitUntil()\f[R] can be called
inside the \f[CR]install\f[R] event handler to extend the life of the
installing worker until the passed promise resolves successfully.
This is primarily used to ensure that the service worker is not active
until all of the core caches are populated.
.TP
\f[B]\[dq]installed\[dq]\f[R]
The service worker in this state is considered a waiting worker.
.TP
\f[B]\[dq]activating\[dq]\f[R]
The service worker in this state is considered an active worker.
During this state, \f[CR]ExtendableEvent.waitUntil()\f[R] can be called
inside the \f[CR]onactivate\f[R] event handler to extend the life of the
active worker until the passed promise resolves successfully.
No functional events are dispatched until the state becomes activated.
.TP
\f[B]\[dq]activated\[dq]\f[R]
The service worker in this state is considered an active worker ready to
handle functional events.
.TP
\f[B]\[dq]redundant\[dq]\f[R]
A new service worker is replacing the current service worker, or the
current service worker is being discarded due to an install failure.
.SH EXAMPLES
This code snippet is from the \c
.UR https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/registration-events/index.html
service worker registration\-events sample
.UE \c
\ (\c
.UR https://googlechrome.github.io/samples/service-worker/registration-events/
live demo
.UE \c
).
The code listens for any change in the \f[CR]ServiceWorker.state\f[R]
and returns its value.
.IP
.EX
\f[B]let\f[R] serviceWorker;
\f[B]if\f[R] (registration.installing) {
  serviceWorker = registration.installing;
  document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]installing\[dq];
} \f[B]else\f[R] \f[B]if\f[R] (registration.waiting) {
  serviceWorker = registration.waiting;
  document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]waiting\[dq];
} \f[B]else\f[R] \f[B]if\f[R] (registration.active) {
  serviceWorker = registration.active;
  document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]active\[dq];
}

\f[B]if\f[R] (serviceWorker) {
  logState(serviceWorker.state);
  serviceWorker.addEventListener(\[dq]statechange\[dq], (e) \f[B]=>\f[R] {
    logState(e.target.state);
  });
}
.EE
