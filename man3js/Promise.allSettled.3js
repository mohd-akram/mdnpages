.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PROMISE.ALLSETTLED" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Promise.allSettled \- Promise.allSettled()
.SH SYNOPSIS
The \f[B]\f[CB]Promise.allSettled()\f[B]\f[R] static method takes an
iterable of promises as input and returns a single \f[CR]Promise\f[R].
This returned promise fulfills when all of the input\(cqs promises
settle (including when an empty iterable is passed), with an array of
objects that describe the outcome of each promise.
.IP
.EX
\f[B]const\f[R] promise1 = Promise.resolve(3);
\f[B]const\f[R] promise2 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R]
  setTimeout(reject, 100, \(dqfoo\(dq),
);
\f[B]const\f[R] promises = [promise1, promise2];

Promise.allSettled(promises).then((results) \f[B]=>\f[R]
  results.forEach((result) \f[B]=>\f[R] console.log(result.status)),
);

\f[I]// Expected output:\f[R]
\f[I]// \(dqfulfilled\(dq\f[R]
\f[I]// \(dqrejected\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
Promise.allSettled(iterable)
.EE
.SS Parameters
.TP
\f[B]iterable\f[R]
An iterable (such as an \f[CR]Array\f[R]) of promises.
.SS Return value
A \f[CR]Promise\f[R] that is:
.IP \(bu 2
\f[B]Already fulfilled\f[R], if the \f[CR]iterable\f[R] passed is empty.
.IP \(bu 2
\f[B]Asynchronously fulfilled\f[R], when all promises in the given
\f[CR]iterable\f[R] have settled (either fulfilled or rejected).
The fulfillment value is an array of objects, each describing the
outcome of one promise in the \f[CR]iterable\f[R], in the order of the
promises passed, regardless of completion order.
Each outcome object has the following properties:
.RS 2
.TP
\f[B]status\f[R]
A string, either \f[CR]\(dqfulfilled\(dq\f[R] or
\f[CR]\(dqrejected\(dq\f[R], indicating the eventual state of the
promise.
.TP
\f[B]value\f[R]
Only present if \f[CR]status\f[R] is \f[CR]\(dqfulfilled\(dq\f[R].
The value that the promise was fulfilled with.
.TP
\f[B]reason\f[R]
Only present if \f[CR]status\f[R] is \f[CR]\(dqrejected\(dq\f[R].
The reason that the promise was rejected with.
.PP
If the \f[CR]iterable\f[R] passed is non\-empty but contains no pending
promises, the returned promise is still asynchronously (instead of
synchronously) fulfilled.
.RE
.SH DESCRIPTION
The \f[CR]Promise.allSettled()\f[R] method is one of the promise
concurrency methods.
\f[CR]Promise.allSettled()\f[R] is typically used when you have multiple
asynchronous tasks that are not dependent on one another to complete
successfully, or you\(cqd always like to know the result of each
promise.
.PP
In comparison, the Promise returned by \f[CR]Promise.all()\f[R] may be
more appropriate if the tasks are dependent on each other, or if
you\(cqd like to immediately reject upon any of them rejecting.
.SH EXAMPLES
.SS Using Promise.allSettled()
.IP
.EX
Promise.allSettled([
  Promise.resolve(33),
  \f[B]new\f[R] Promise((resolve) \f[B]=>\f[R] setTimeout(() \f[B]=>\f[R] resolve(66), 0)),
  99,
  Promise.reject(\f[B]new\f[R] Error(\(dqan error\(dq)),
]).then((values) \f[B]=>\f[R] console.log(values));

\f[I]// [\f[R]
\f[I]//   { status: \(aqfulfilled\(aq, value: 33 },\f[R]
\f[I]//   { status: \(aqfulfilled\(aq, value: 66 },\f[R]
\f[I]//   { status: \(aqfulfilled\(aq, value: 99 },\f[R]
\f[I]//   { status: \(aqrejected\(aq, reason: Error: an error }\f[R]
\f[I]// ]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-promise
Polyfill of \f[CR]Promise.allSettled\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/promise.allsettled
es\-shims polyfill of \f[CR]Promise.allSettled\f[R]
.UE \c
.IP \(bu 2
Using promises guide
.IP \(bu 2
Graceful asynchronous programming with promises
.IP \(bu 2
\f[CR]Promise\f[R]
.IP \(bu 2
\f[CR]Promise.all()\f[R]
.IP \(bu 2
\f[CR]Promise.any()\f[R]
.IP \(bu 2
\f[CR]Promise.race()\f[R]
