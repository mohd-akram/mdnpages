.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REGEXP.TOSTRING" "3JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.toString \- RegExp.prototype.toString()
.SH SYNOPSIS
The \f[B]\f[CB]toString()\f[B]\f[R] method of \f[CR]RegExp\f[R]
instances returns a string representing this regular expression.
.IP
.EX
console.log(\f[B]new\f[R] RegExp(\(dqa+b+c\(dq));
\f[I]// Expected output: /a+b+c/\f[R]

console.log(\f[B]new\f[R] RegExp(\(dqa+b+c\(dq).toString());
\f[I]// Expected output: \(dq/a+b+c/\(dq\f[R]

console.log(\f[B]new\f[R] RegExp(\(dqbar\(dq, \(dqg\(dq).toString());
\f[I]// Expected output: \(dq/bar/g\(dq\f[R]

console.log(\f[B]new\f[R] RegExp(\(dq\(rsn\(dq, \(dqg\(dq).toString());
\f[I]// Expected output (if your browser supports escaping): \(dq/\(rsn/g\(dq\f[R]

console.log(\f[B]new\f[R] RegExp(\(dq\(rs\(rsn\(dq, \(dqg\(dq).toString());
\f[I]// Expected output: \(dq/\(rsn/g\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
toString()
.EE
.SS Parameters
None.
.SS Return value
A string representing the given object.
.SH DESCRIPTION
The \f[CR]RegExp\f[R] object overrides the \f[CR]toString()\f[R] method
of the \f[CR]Object\f[R] object; it does not inherit
\f[CR]Object.prototype.toString()\f[R].
For \f[CR]RegExp\f[R] objects, the \f[CR]toString()\f[R] method returns
a string representation of the regular expression.
.PP
In practice, it reads the regex\(cqs \f[CR]source\f[R] and
\f[CR]flags\f[R] properties and returns a string in the form
\f[CR]/source/flags\f[R].
The \f[CR]toString()\f[R] return value is guaranteed to be a parsable
regex literal, although it may not be the exact same text as what was
originally specified for the regex (for example, the flags may be
reordered).
.SH EXAMPLES
.SS Using toString()
The following example displays the string value of a \f[CR]RegExp\f[R]
object:
.IP
.EX
\f[B]const\f[R] myExp = \f[B]new\f[R] RegExp(\(dqa+b+c\(dq);
console.log(myExp.toString()); \f[I]// \(aq/a+b+c/\(aq\f[R]

\f[B]const\f[R] foo = \f[B]new\f[R] RegExp(\(dqbar\(dq, \(dqg\(dq);
console.log(foo.toString()); \f[I]// \(aq/bar/g\(aq\f[R]
.EE
.SS Empty regular expressions and escaping
Since \f[CR]toString()\f[R] accesses the \f[CR]source\f[R] property, an
empty regular expression returns the string \f[CR]\(dq/(?:)/\(dq\f[R],
and line terminators such as \f[CR]\(rsn\f[R] are escaped.
This makes the returned value always a valid regex literal.
.IP
.EX
\f[B]new\f[R] RegExp().toString(); \f[I]// \(dq/(?:)/\(dq\f[R]

\f[B]new\f[R] RegExp(\(dq\(rsn\(dq).toString() === \(dq/\(rs\(rsn/\(dq; \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Object.prototype.toString()\f[R]
