.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "VideoFrame.VideoFrame" "JS" "May 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
VideoFrame.VideoFrame \- VideoFrame: VideoFrame() constructor
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]VideoFrame()\f[B]\f[R] constructor creates a new
\f[CR]VideoFrame\f[R] object representing a frame of a video.
.SH SYNTAX
.IP
.EX
new VideoFrame(image)
new VideoFrame(image, options)
new VideoFrame(data, options)
.EE
.SS Parameters
The first type of constructor (see above) creates a new
\f[CR]VideoFrame\f[R] from an image.
Its parameters are:
.TP
\f[B]image\f[R]
An image containing the image data for the new \f[CR]VideoFrame\f[R].
It can be one of the following objects: an \f[CR]SVGImageElement\f[R],
an \f[CR]HTMLVideoElement\f[R], an \f[CR]HTMLCanvasElement\f[R], an
\f[CR]ImageBitmap\f[R], an \f[CR]OffscreenCanvas\f[R], or another
\f[CR]VideoFrame\f[R].
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing the following:
.RS
.TP
\f[B]duration\f[R] \f[I](optional)\f[R]
An integer representing the duration of the frame in microseconds.
.TP
\f[B]timestamp\f[R]
An integer representing the timestamp of the frame in microseconds.
.TP
\f[B]alpha\f[R] \f[I](optional)\f[R]
A string, describing how the user agent should behave when dealing with
alpha channels.
The default value is \[lq]keep\[rq].
.RS
.IP \[bu] 2
\f[CR]\[dq]keep\[dq]\f[R]: Indicates that the user agent should preserve
alpha channel data.
.IP \[bu] 2
\f[CR]\[dq]discard\[dq]\f[R]: Indicates that the user agent should
ignore or remove alpha channel data.
.RE
.TP
\f[B]visibleRect\f[R] \f[I](optional)\f[R]
An object representing the visible rectangle of the
\f[CR]VideoFrame\f[R], containing the following:
.RS
.TP
\f[B]x\f[R]
The x\-coordinate.
.TP
\f[B]y\f[R]
The y\-coordinate.
.TP
\f[B]width\f[R]
The width of the frame.
.TP
\f[B]height\f[R]
The height of the frame.
.RE
.TP
\f[B]displayWidth\f[R] \f[I](optional)\f[R]
The width of the \f[CR]VideoFrame\f[R] when displayed after applying
aspect\-ratio adjustments.
.TP
\f[B]displayHeight\f[R] \f[I](optional)\f[R]
The height of the \f[CR]VideoFrame\f[R] when displayed after applying
aspect\-ratio adjustments.
.RE
.PP
The second type of constructor (see above) creates a new
\f[CR]VideoFrame\f[R] from an \f[CR]ArrayBuffer\f[R].
Its parameters are:
.TP
\f[B]data\f[R]
An \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R], or a
\f[CR]DataView\f[R] containing the data for the new
\f[CR]VideoFrame\f[R].
.TP
\f[B]options\f[R]
An object containing the following:
.RS
.TP
\f[B]format\f[R]
A string representing the video pixel format.
One of the following strings, which are fully described on the page for
the \f[CR]format\f[R] property:
.RS
.IP \[bu] 2
\f[CR]\[dq]I420\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]I420A\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]I422\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]I444\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]NV12\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]RGBA\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]RGBX\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]BGRA\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]BGRX\[dq]\f[R]
.RE
.TP
\f[B]codedWidth\f[R]
Width of the \f[CR]VideoFrame\f[R] in pixels, potentially including
non\-visible padding, and prior to considering potential ratio
adjustments.
.TP
\f[B]codedHeight\f[R]
Height of the \f[CR]VideoFrame\f[R] in pixels, potentially including
non\-visible padding, and prior to considering potential ratio
adjustments.
.TP
\f[B]timestamp\f[R]
An integer representing the timestamp of the frame in microseconds.
.TP
\f[B]duration\f[R] \f[I](optional)\f[R]
An integer representing the duration of the frame in microseconds.
.TP
\f[B]layout\f[R] \f[I](optional)\f[R]
A list containing the following values for each plane in the
\f[CR]VideoFrame\f[R]:
.RS
.TP
\f[B]offset\f[R]
An integer representing the offset in bytes where the given plane
begins.
.TP
\f[B]stride\f[R]
An integer representing the number of bytes, including padding, used by
each row of the plane.
Planes may not overlap.
If no \f[CR]layout\f[R] is specified, the planes will be tightly packed.
.RE
.TP
\f[B]visibleRect\f[R] \f[I](optional)\f[R]
An object representing the visible rectangle of the
\f[CR]VideoFrame\f[R], containing the following:
.RS
.TP
\f[B]x\f[R]
The x\-coordinate.
.TP
\f[B]y\f[R]
The y\-coordinate.
.TP
\f[B]width\f[R]
The width of the frame.
.TP
\f[B]height\f[R]
The height of the frame.
.RE
.TP
\f[B]displayWidth\f[R] \f[I](optional)\f[R]
The width of the \f[CR]VideoFrame\f[R] when displayed after applying
aspect ratio adjustments.
.TP
\f[B]displayHeight\f[R] \f[I](optional)\f[R]
The height of the \f[CR]VideoFrame\f[R] when displayed after applying
aspect ratio adjustments.
.TP
\f[B]colorSpace\f[R]
An object representing the color space of the \f[CR]VideoFrame\f[R],
containing the following:
.RS
.TP
\f[B]primaries\f[R]
A string representing the video color primaries, described on the page
for the \f[CR]VideoColorSpace.primaries\f[R] property.
.TP
\f[B]transfer\f[R]
A string representing the video color transfer function, described on
the page for the \f[CR]VideoColorSpace.transfer\f[R] property.
.TP
\f[B]matrix\f[R]
A string representing the video color matrix, described on the page for
the \f[CR]VideoColorSpace.matrix\f[R] property.
.TP
\f[B]fullRange\f[R]
A Boolean.
If \f[CR]true\f[R], indicates that full\-range color values are used.
.RE
.TP
\f[B]transfer\f[R]
An array of \f[CR]ArrayBuffer\f[R]s that \f[CR]VideoFrame\f[R] will
detach and take ownership of.
If the array contains the \f[CR]ArrayBuffer\f[R] backing
\f[CR]data\f[R], \f[CR]VideoFrame\f[R] will use that buffer directly
instead of copying from it.
.RE
.SH EXAMPLES
The following examples are from the article \c
.UR https://developer.chrome.com/docs/web-platform/best-practices/webcodecs
Video processing with WebCodecs
.UE \c
\&.
In this first example, a \f[CR]VideoFrame\f[R] is created from a canvas.
.IP
.EX
\f[B]const\f[R] cnv = document.createElement(\[dq]canvas\[dq]);
\f[I]// draw something on the canvas\f[R]
\f[I]// ...\f[R]
\f[B]let\f[R] frame_from_canvas = \f[B]new\f[R] VideoFrame(cnv, { timestamp: 0 });
.EE
.PP
In the following example a \f[CR]VideoFrame\f[R] is created from a
\f[CR]TypedArray\f[R].
.IP
.EX
\f[B]const\f[R] pixelSize = 4;
\f[B]let\f[R] init = {
  timestamp: 0,
  codedWidth: 320,
  codedHeight: 200,
  format: \[dq]RGBA\[dq],
};
\f[B]let\f[R] data = \f[B]new\f[R] Uint8Array(init.codedWidth * init.codedHeight * pixelSize);
\f[B]for\f[R] (\f[B]let\f[R] x = 0; x < init.codedWidth; x++) {
  \f[B]for\f[R] (\f[B]let\f[R] y = 0; y < init.codedHeight; y++) {
    \f[B]let\f[R] offset = (y * init.codedWidth + x) * pixelSize;
    data[offset] = 0x7f; \f[I]// Red\f[R]
    data[offset + 1] = 0xff; \f[I]// Green\f[R]
    data[offset + 2] = 0xd4; \f[I]// Blue\f[R]
    data[offset + 3] = 0x0ff; \f[I]// Alpha\f[R]
  }
}
init.transfer = [data.buffer];
\f[B]let\f[R] frame = \f[B]new\f[R] VideoFrame(data, init);
.EE
