.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAY.FILL" "3JS" "March 26, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.fill \- Array.prototype.fill()
.SH SYNOPSIS
The \f[B]\f[CB]fill()\f[B]\f[R] method of \f[CR]Array\f[R] instances
changes all elements within a range of indices in an array to a static
value.
It returns the modified array.
.IP
.EX
\f[B]const\f[R] array1 = [1, 2, 3, 4];

\f[I]// Fill with 0 from position 2 until position 4\f[R]
console.log(array1.fill(0, 2, 4));
\f[I]// Expected output: Array [1, 2, 0, 0]\f[R]

\f[I]// Fill with 5 from position 1\f[R]
console.log(array1.fill(5, 1));
\f[I]// Expected output: Array [1, 5, 5, 5]\f[R]

console.log(array1.fill(6));
\f[I]// Expected output: Array [6, 6, 6, 6]\f[R]
.EE
.SH SYNTAX
.IP
.EX
fill(value)
fill(value, start)
fill(value, start, end)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
Value to fill the array with.
Note all elements in the array will be this exact value: if
\f[CR]value\f[R] is an object, each slot in the array will reference
that object.
.TP
\f[B]start\f[R] \f[I](optional)\f[R]
Zero\-based index at which to start filling, converted to an integer.
.RS
.IP \(bu 2
Negative index counts back from the end of the array \(em if
\f[CR]\-array.length <= start < 0\f[R], \f[CR]start + array.length\f[R]
is used.
.IP \(bu 2
If \f[CR]start < \-array.length\f[R] or \f[CR]start\f[R] is omitted,
\f[CR]0\f[R] is used.
.IP \(bu 2
If \f[CR]start >= array.length\f[R], no index is filled.
.RE
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
Zero\-based index at which to end filling, converted to an integer.
\f[CR]fill()\f[R] fills up to but not including \f[CR]end\f[R].
.RS
.IP \(bu 2
Negative index counts back from the end of the array \(em if
\f[CR]\-array.length <= end < 0\f[R], \f[CR]end + array.length\f[R] is
used.
.IP \(bu 2
If \f[CR]end < \-array.length\f[R], \f[CR]0\f[R] is used.
.IP \(bu 2
If \f[CR]end >= array.length\f[R] or \f[CR]end\f[R] is omitted or
\f[CR]undefined\f[R], \f[CR]array.length\f[R] is used, causing all
indices until the end to be filled.
.IP \(bu 2
If \f[CR]end\f[R] implies a position before or at the position that
\f[CR]start\f[R] implies, nothing is filled.
.RE
.SS Return value
The modified array, filled with \f[CR]value\f[R].
.SH DESCRIPTION
The \f[CR]fill()\f[R] method is a mutating method.
It does not alter the length of \f[CR]this\f[R], but it will change the
content of \f[CR]this\f[R].
.PP
The \f[CR]fill()\f[R] method fills empty slots in sparse arrays with
\f[CR]value\f[R] as well.
.PP
The \f[CR]fill()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property.
Although strings are also array\-like, this method is not suitable to be
applied on them, as strings are immutable.
.RS
.PP
\f[B]Note:\f[R] Using \f[CR]Array.prototype.fill()\f[R] on an empty
array (\f[CR]length = 0\f[R]) would not modify it as the array has
nothing to be modified.
To use \f[CR]Array.prototype.fill()\f[R] when declaring an array, make
sure the array has non\-zero \f[CR]length\f[R].
See example.
.RE
.SH EXAMPLES
.SS Using fill()
.IP
.EX
console.log([1, 2, 3].fill(4)); \f[I]// [4, 4, 4]\f[R]
console.log([1, 2, 3].fill(4, 1)); \f[I]// [1, 4, 4]\f[R]
console.log([1, 2, 3].fill(4, 1, 2)); \f[I]// [1, 4, 3]\f[R]
console.log([1, 2, 3].fill(4, 1, 1)); \f[I]// [1, 2, 3]\f[R]
console.log([1, 2, 3].fill(4, 3, 3)); \f[I]// [1, 2, 3]\f[R]
console.log([1, 2, 3].fill(4, \-3, \-2)); \f[I]// [4, 2, 3]\f[R]
console.log([1, 2, 3].fill(4, \f[B]NaN\f[R], \f[B]NaN\f[R])); \f[I]// [1, 2, 3]\f[R]
console.log([1, 2, 3].fill(4, 3, 5)); \f[I]// [1, 2, 3]\f[R]
console.log(Array(3).fill(4)); \f[I]// [4, 4, 4]\f[R]

\f[I]// A single object, referenced by each slot of the array:\f[R]
\f[B]const\f[R] arr = Array(3).fill({}); \f[I]// [{}, {}, {}]\f[R]
arr[0].hi = \(dqhi\(dq; \f[I]// [{ hi: \(dqhi\(dq }, { hi: \(dqhi\(dq }, { hi: \(dqhi\(dq }]\f[R]
.EE
.SS Using fill() to create a matrix of all 1
This example shows how to create a matrix of all 1, like the
\f[CR]ones()\f[R] function of Octave or MATLAB.
.IP
.EX
\f[B]const\f[R] arr = \f[B]new\f[R] Array(3);
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < arr.length; i++) {
  arr[i] = \f[B]new\f[R] Array(4).fill(1); \f[I]// Creating an array of size 4 and filled of 1\f[R]
}
arr[0][0] = 10;
console.log(arr[0][0]); \f[I]// 10\f[R]
console.log(arr[1][0]); \f[I]// 1\f[R]
console.log(arr[2][0]); \f[I]// 1\f[R]
.EE
.SS Using fill() to populate an empty array
This example shows how to populate an array, setting all elements to a
specific value.
The \f[CR]end\f[R] parameter does not have to be specified.
.IP
.EX
\f[B]const\f[R] tempGirls = Array(5).fill(\(dqgirl\(dq, 0);
.EE
.PP
Note that the array was initially a sparse array with no assigned
indices.
\f[CR]fill()\f[R] is still able to fill this array.
.SS Calling fill() on non\-array objects
The \f[CR]fill()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and sets the value of each integer\-keyed property from
\f[CR]start\f[R] to \f[CR]end\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = { length: 2 };
console.log(Array.prototype.fill.call(arrayLike, 1));
\f[I]// { \(aq0\(aq: 1, \(aq1\(aq: 1, length: 2 }\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.fill\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.fill()\f[R]
