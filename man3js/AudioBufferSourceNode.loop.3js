.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "AUDIOBUFFERSOURCENODE.LOOP" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioBufferSourceNode.loop \- AudioBufferSourceNode: loop property
.SH SYNOPSIS
The \f[CR]loop\f[R] property of the \f[CR]AudioBufferSourceNode\f[R]
interface is a Boolean indicating if the audio asset must be replayed
when the end of the \f[CR]AudioBuffer\f[R] is reached.
.PP
The \f[CR]loop\f[R] property\(cqs default value is \f[CR]false\f[R].
.SH VALUE
A Boolean which is \f[CR]true\f[R] if looping is enabled; otherwise, the
value is \f[CR]false\f[R].
.PP
When looping is enabled, the sound begins playing at the time specified
as the start point when \f[CR]start()\f[R] is called.
When the time specified by the \f[CR]loopEnd\f[R] property is reached,
playback continues at the time specified by \f[CR]loopStart\f[R]
.SH EXAMPLES
.SS Setting \f[CR]loop\f[R]
In this example, when the user presses \(lqPlay\(rq, we load an audio
track, decode it, and put it into an \f[CR]AudioBufferSourceNode\f[R].
.PP
The example then sets the \f[CR]loop\f[R] property to \f[CR]true\f[R],
so the track loops, and plays the track.
.PP
The user can set the \f[CR]loopStart\f[R] and \f[CR]loopEnd\f[R]
properties using range controls.
.RS
.PP
\f[B]Note:\f[R] You can \c
.UR https://mdn.github.io/webaudio-examples/audio-buffer-source-node/loop/
run the full example live
.UE \c
\ (or \c
.UR https://github.com/mdn/webaudio-examples/tree/main/audio-buffer-source-node/loop
view the source
.UE \c
\&.)
.RE
.IP
.EX
\f[B]let\f[R] audioCtx;
\f[B]let\f[R] buffer;
\f[B]let\f[R] source;

\f[B]const\f[R] play = document.getElementById(\(dqplay\(dq);
\f[B]const\f[R] stop = document.getElementById(\(dqstop\(dq);

\f[B]const\f[R] loopstartControl = document.getElementById(\(dqloopstart\-control\(dq);
\f[B]const\f[R] loopstartValue = document.getElementById(\(dqloopstart\-value\(dq);

\f[B]const\f[R] loopendControl = document.getElementById(\(dqloopend\-control\(dq);
\f[B]const\f[R] loopendValue = document.getElementById(\(dqloopend\-value\(dq);

\f[B]async\f[R] \f[B]function\f[R] loadAudio() {
  \f[B]try\f[R] {
    \f[I]// Load an audio file\f[R]
    \f[B]const\f[R] response = \f[B]await\f[R] fetch(\(dqrnb\-lofi\-melody\-loop.wav\(dq);
    \f[I]// Decode it\f[R]
    buffer = \f[B]await\f[R] audioCtx.decodeAudioData(\f[B]await\f[R] response.arrayBuffer());
    \f[B]const\f[R] max = Math.floor(buffer.duration);
    loopstartControl.setAttribute(\(dqmax\(dq, max);
    loopendControl.setAttribute(\(dqmax\(dq, max);
  } \f[B]catch\f[R] (err) {
    console.error(\(gaUnable to fetch the audio file. Error: ${err.message}\(ga);
  }
}

play.addEventListener(\(dqclick\(dq, \f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]if\f[R] (!audioCtx) {
    audioCtx = \f[B]new\f[R] AudioContext();
    \f[B]await\f[R] loadAudio();
  }
  source = audioCtx.createBufferSource();
  source.buffer = buffer;
  source.connect(audioCtx.destination);
  source.loop = \f[B]true\f[R];
  source.loopStart = loopstartControl.value;
  source.loopEnd = loopendControl.value;
  source.start();
  play.disabled = \f[B]true\f[R];
  stop.disabled = \f[B]false\f[R];
  loopstartControl.disabled = \f[B]false\f[R];
  loopendControl.disabled = \f[B]false\f[R];
});

stop.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  source.stop();
  play.disabled = \f[B]false\f[R];
  stop.disabled = \f[B]true\f[R];
  loopstartControl.disabled = \f[B]true\f[R];
  loopendControl.disabled = \f[B]true\f[R];
});

loopstartControl.addEventListener(\(dqinput\(dq, () \f[B]=>\f[R] {
  source.loopStart = loopstartControl.value;
  loopstartValue.textContent = loopstartControl.value;
});

loopendControl.addEventListener(\(dqinput\(dq, () \f[B]=>\f[R] {
  source.loopEnd = loopendControl.value;
  loopendValue.textContent = loopendControl.value;
});
.EE
.SH SEE ALSO
.IP \(bu 2
Web Audio API
.IP \(bu 2
Using the Web Audio API
.IP \(bu 2
\f[CR]AudioBufferSourceNode\f[R]
