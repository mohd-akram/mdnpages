.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "fetch" "JS" "June 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
fetch \- fetch() global function
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The global \f[B]\f[CB]fetch()\f[B]\f[R] method starts the process of
fetching a resource from the network, returning a promise that is
fulfilled once the response is available.
.PP
The promise resolves to the \f[CR]Response\f[R] object representing the
response to your request.
.PP
A \f[CR]fetch()\f[R] promise only rejects when the request fails, for
example, because of a badly\-formed request URL or a network error.
A \f[CR]fetch()\f[R] promise \f[I]does not\f[R] reject if the server
responds with HTTP status codes that indicate errors (\f[CR]404\f[R],
\f[CR]504\f[R], etc.).
Instead, a \f[CR]then()\f[R] handler must check the
\f[CR]Response.ok\f[R] and/or \f[CR]Response.status\f[R] properties.
.PP
The \f[CR]fetch()\f[R] method is controlled by the
\f[CR]connect\-src\f[R] directive of Content Security Policy rather than
the directive of the resources it\[cq]s retrieving.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]fetch()\f[R] method\[cq]s parameters are
identical to those of the \f[CR]Request()\f[R] constructor.
.RE
.SH SYNTAX
.IP
.EX
fetch(resource)
fetch(resource, options)
.EE
.SS Parameters
.TP
\f[B]resource\f[R]
This defines the resource that you wish to fetch.
This can either be:
.RS
.IP \[bu] 2
A string or any other object with a stringifier \[em] including a
\f[CR]URL\f[R] object \[em] that provides the URL of the resource you
want to fetch.
.IP \[bu] 2
A \f[CR]Request\f[R] object.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing any custom settings you want to apply to the
request.
The possible options are:
.RS
.TP
\f[B]attributionReporting\f[R] \f[I](experimental)\f[R]
Indicates that you want the request\[cq]s response to be able to
register a JavaScript\-based attribution source or attribution trigger.
\f[CR]attributionReporting\f[R] is an object containing the following
properties:
.RS
.TP
\f[B]eventSourceEligible\f[R]
A boolean.
If set to \f[CR]true\f[R], the request\[cq]s response is eligible to
register an attribution source.
If set to \f[CR]false\f[R], it isn\[cq]t.
.TP
\f[B]triggerEligible\f[R]
A boolean.
If set to \f[CR]true\f[R], the request\[cq]s response is eligible to
register an attribution trigger.
If set to \f[CR]false\f[R], it isn\[cq]t.
.RS
.PP
\f[B]Note:\f[R] See the Attribution Reporting API for more details.
.RE
.RE
.TP
\f[B]body\f[R]
Any body that you want to add to your request: this can be a
\f[CR]Blob\f[R], an \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R], a
\f[CR]DataView\f[R], a \f[CR]FormData\f[R], a
\f[CR]URLSearchParams\f[R], string object or literal, or a
\f[CR]ReadableStream\f[R] object.
This latest possibility is still experimental; check the compatibility
information to verify you can use it.
Note that a request using the \f[CR]GET\f[R] or \f[CR]HEAD\f[R] method
cannot have a body.
.TP
\f[B]browsingTopics\f[R] \f[I](experimental)\f[R]
A boolean specifying that the selected topics for the current user
should be sent in a \f[CR]Sec\-Browsing\-Topics\f[R] header with the
associated request.
See Using the Topics API for more details.
.TP
\f[B]cache\f[R]
A string indicating how the request will interact with the browser\[cq]s
HTTP cache.
The possible values, \f[CR]default\f[R], \f[CR]no\-store\f[R],
\f[CR]reload\f[R], \f[CR]no\-cache\f[R], \f[CR]force\-cache\f[R], and
\f[CR]only\-if\-cached\f[R], are documented in the article for the
\f[CR]cache\f[R] property of the \f[CR]Request\f[R] object.
.TP
\f[B]credentials\f[R]
Controls what browsers do with credentials (cookies, HTTP authentication
entries, and TLS client certificates).
Must be one of the following strings:
.RS
.IP \[bu] 2
\f[CR]omit\f[R]: Tells browsers to exclude credentials from the request,
and ignore any credentials sent back in the response (e.g., any
\f[CR]Set\-Cookie\f[R] header).
.IP \[bu] 2
\f[CR]same\-origin\f[R]: Tells browsers to include credentials with
requests to same\-origin URLs, and use any credentials sent back in
responses from same\-origin URLs.
\f[B]This is the default value.\f[R]
.IP \[bu] 2
\f[CR]include\f[R]: Tells browsers to include credentials in both same\-
and cross\-origin requests, and always use any credentials sent back in
responses.
.RS 2
.RS
.PP
\f[B]Note:\f[R] Credentials may be included in simple and
\[lq]final\[rq] cross\-origin requests, but should not be included in
CORS preflight requests.
.RE
.RE
.RE
.TP
\f[B]headers\f[R]
Any headers you want to add to your request, contained within a
\f[CR]Headers\f[R] object or an object literal with \f[CR]String\f[R]
values.
Note that some names are forbidden.
.RS
.RS
.PP
\f[B]Note:\f[R] The \f[CR]Authorization\f[R] HTTP header may be added to
a request, but will be removed if the request is redirected
cross\-origin.
.RE
.RE
.TP
\f[B]integrity\f[R]
Contains the subresource integrity value of the request (e.g.,
\f[CR]sha256\-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=\f[R]).
.TP
\f[B]keepalive\f[R]
The \f[CR]keepalive\f[R] option can be used to allow the request to
outlive the page.
Fetch with the \f[CR]keepalive\f[R] flag is a replacement for the
\f[CR]Navigator.sendBeacon()\f[R] API.
.TP
\f[B]method\f[R]
The request method, e.g., \f[CR]\[dq]GET\[dq]\f[R],
\f[CR]\[dq]POST\[dq]\f[R].
The default is \f[CR]\[dq]GET\[dq]\f[R].
Note that the \f[CR]Origin\f[R] header is not set on Fetch requests with
a method of \f[CR]HEAD\f[R] or \f[CR]GET\f[R].
Any string which is a case\-insensitive match for one of the methods in
\c
.UR https://www.rfc-editor.org/rfc/rfc9110#name-overview
RFC 9110
.UE \c
\ will be uppercased automatically.
If you want to use a custom method (like \f[CR]PATCH\f[R]), you should
uppercase it yourself.
.TP
\f[B]mode\f[R]
The mode you want to use for the request, e.g., \f[CR]cors\f[R],
\f[CR]no\-cors\f[R], or \f[CR]same\-origin\f[R].
.TP
\f[B]priority\f[R]
Specifies the priority of the fetch request relative to other requests
of the same type.
Must be one of the following strings:
.RS
.TP
\f[B]high\f[R]
A high priority fetch request relative to other requests of the same
type.
.TP
\f[B]low\f[R]
A low priority fetch request relative to other requests of the same
type.
.TP
\f[B]auto\f[R]
Automatically determine the priority of the fetch request relative to
other requests of the same type (default).
.RE
.TP
\f[B]redirect\f[R]
How to handle a \f[CR]redirect\f[R] response:
.RS
.TP
\f[B]follow\f[R]
Automatically follow redirects.
Unless otherwise stated the redirect mode is set to \f[CR]follow\f[R].
.TP
\f[B]error\f[R]
Abort with an error if a redirect occurs.
.TP
\f[B]manual\f[R]
Caller intends to process the response in another context.
See \c
.UR https://fetch.spec.whatwg.org/#concept-request-redirect-mode
WHATWG fetch standard
.UE \c
\ for more information.
.RE
.TP
\f[B]referrer\f[R]
A string specifying the referrer of the request.
This can be a same\-origin URL, \f[CR]about:client\f[R], or an empty
string.
.TP
\f[B]referrerPolicy\f[R]
Specifies the \c
.UR https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
referrer policy
.UE \c
\ to use for the request.
May be one of \f[CR]no\-referrer\f[R],
\f[CR]no\-referrer\-when\-downgrade\f[R], \f[CR]same\-origin\f[R],
\f[CR]origin\f[R], \f[CR]strict\-origin\f[R],
\f[CR]origin\-when\-cross\-origin\f[R],
\f[CR]strict\-origin\-when\-cross\-origin\f[R], or
\f[CR]unsafe\-url\f[R].
.TP
\f[B]signal\f[R]
An \f[CR]AbortSignal\f[R] object instance; allows you to communicate
with a fetch request and abort it if desired via an
\f[CR]AbortController\f[R].
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves to a \f[CR]Response\f[R] object.
.SS Exceptions
.TP
\f[B]AbortError\f[R] \f[B]DOMException\f[R]
The request was aborted due to a call to the \f[CR]AbortController\f[R]
\f[CR]abort()\f[R] method.
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if use of the Topics API is specifically disallowed by a
\f[CR]browsing\-topics\f[R] Permissions Policy, and a \f[CR]fetch()\f[R]
request was made with \f[CR]browsingTopics: true\f[R].
.TP
\f[B]TypeError\f[R]
Can occur for the following reasons:
Reason
Failing examples
Blocked by a permissions policy
Use of the Attribution Reporting API is blocked by a
attribution\-reporting \f[CR]Permissions\-Policy\f[R], and a fetch()
request was made with attributionReporting specified.
Invalid header name.
.IP
.EX
// space in \[dq]C ontent\-Type\[dq]
const headers = {
  \[aq]C ontent\-Type\[aq]: \[aq]text/xml\[aq],
  \[aq]Breaking\-Bad\[aq]: \[aq]<3\[aq],
};
fetch(\[aq]https://example.com/\[aq], { headers });
        
.EE
Invalid header value.
The header object must contain exactly two elements.
.IP
.EX
const headers = [
  [\[aq]Content\-Type\[aq], \[aq]text/html\[aq], \[aq]extra\[aq]],
  [\[aq]Accept\[aq]],
];
fetch(\[aq]https://example.com/\[aq], { headers });
        
.EE
Invalid URL or scheme, or using a scheme that fetch does not support, or
using a scheme that is not supported for a particular request mode.
.IP
.EX
fetch(\[aq]blob://example.com/\[aq], { mode: \[aq]cors\[aq] });
        
.EE
URL includes credentials.
.IP
.EX
fetch(\[aq]https://user:password\[at]example.com/\[aq]);
        
.EE
Invalid referrer URL.
.IP
.EX
fetch(\[aq]https://example.com/\[aq], { referrer: \[aq]./abc\[rs]u0000df\[aq] });
        
.EE
Invalid modes (navigate and websocket).
.IP
.EX
fetch(\[aq]https://example.com/\[aq], { mode: \[aq]navigate\[aq] });
        
.EE
If the request cache mode is \[lq]only\-if\-cached\[rq] and the request
mode is other than \[lq]same\-origin\[rq].
.IP
.EX
fetch(\[aq]https://example.com/\[aq], {
  cache: \[aq]only\-if\-cached\[aq],
  mode: \[aq]no\-cors\[aq],
});
        
.EE
If the request method is an invalid name token or one of the forbidden
headers (`CONNECT', `TRACE' or `TRACK').
.IP
.EX
fetch(\[aq]https://example.com/\[aq], { method: \[aq]CONNECT\[aq] });
        
.EE
If the request mode is \[lq]no\-cors\[rq] and the request method is not
a CORS\-safe\-listed method (`GET', `HEAD', or `POST').
.IP
.EX
fetch(\[aq]https://example.com/\[aq], {
  method: \[aq]CONNECT\[aq],
  mode: \[aq]no\-cors\[aq],
});
        
.EE
If the request method is `GET' or `HEAD' and the body is non\-null or
not undefined.
.IP
.EX
fetch(\[aq]https://example.com/\[aq], {
  method: \[aq]GET\[aq],
  body: new FormData(),
});
        
.EE
If fetch throws a network error.
.SH EXAMPLES
In our \c
.UR https://github.com/mdn/dom-examples/tree/main/fetch/fetch-request
Fetch Request example
.UE \c
\ (see \c
.UR https://mdn.github.io/dom-examples/fetch/fetch-request/
Fetch Request live
.UE \c
) we create a new \f[CR]Request\f[R] object using the relevant
constructor, then fetch it using a \f[CR]fetch()\f[R] call.
Since we are fetching an image, we run \f[CR]Response.blob()\f[R] on the
response to give it the proper MIME type so it will be handled properly,
then create an Object URL of it and display it in an \f[CR]<img>\f[R]
element.
.IP
.EX
\f[B]const\f[R] myImage = document.querySelector(\[dq]img\[dq]);

\f[B]const\f[R] myRequest = \f[B]new\f[R] Request(\[dq]flowers.jpg\[dq]);

fetch(myRequest)
  .then((response) \f[B]=>\f[R] {
    \f[B]if\f[R] (!response.ok) {
      \f[B]throw\f[R] \f[B]new\f[R] Error(\[ga]HTTP error! Status: ${response.status}\[ga]);
    }

    \f[B]return\f[R] response.blob();
  })
  .then((response) \f[B]=>\f[R] {
    myImage.src = URL.createObjectURL(response);
  });
.EE
.PP
In our \c
.UR https://github.com/mdn/dom-examples/tree/main/fetch/fetch-request-with-init
Fetch Request with init example
.UE \c
\ (see \c
.UR https://mdn.github.io/dom-examples/fetch/fetch-request-with-init
Fetch Request init live
.UE \c
) we do the same thing except that we pass in an \f[I]options\f[R]
object when we invoke \f[CR]fetch()\f[R].
In this case, we can set a \f[CR]Cache\-Control\f[R] value to indicate
what kind of cached responses we\[cq]re okay with:
.IP
.EX
\f[B]const\f[R] myImage = document.querySelector(\[dq]img\[dq]);
\f[B]const\f[R] reqHeaders = \f[B]new\f[R] Headers();

\f[I]// A cached response is okay unless it\[aq]s more than a week old\f[R]
reqHeaders.set(\[dq]Cache\-Control\[dq], \[dq]max\-age=604800\[dq]);

\f[B]const\f[R] options = {
  headers: reqHeaders,
};

\f[I]// Pass init as an \[dq]options\[dq] object with our headers.\f[R]
\f[B]const\f[R] req = \f[B]new\f[R] Request(\[dq]flowers.jpg\[dq], options);

fetch(req).then((response) \f[B]=>\f[R] {
  \f[I]// ...\f[R]
});
.EE
.PP
You could also pass the \f[CR]init\f[R] object in with the
\f[CR]Request\f[R] constructor to get the same effect:
.IP
.EX
\f[B]const\f[R] req = \f[B]new\f[R] Request(\[dq]flowers.jpg\[dq], options);
.EE
.PP
You can also use an object literal as \f[CR]headers\f[R] in
\f[CR]init\f[R]:
.IP
.EX
\f[B]const\f[R] options = {
  headers: {
    \[dq]Cache\-Control\[dq]: \[dq]max\-age=60480\[dq],
  },
};

\f[B]const\f[R] req = \f[B]new\f[R] Request(\[dq]flowers.jpg\[dq], options);
.EE
.SH SEE ALSO
.IP \[bu] 2
Fetch API
.IP \[bu] 2
ServiceWorker API
.IP \[bu] 2
HTTP access control (CORS)
.IP \[bu] 2
HTTP
