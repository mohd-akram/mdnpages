.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "AudioContext.resume" "JS" "November 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioContext.resume \- AudioContext: resume() method
.SH SYNOPSIS
The \f[B]\f[CB]resume()\f[B]\f[R] method of the \f[CR]AudioContext\f[R]
interface resumes the progression of time in an audio context that has
previously been suspended.
.PP
This method will cause an \f[CR]INVALID_STATE_ERR\f[R] exception to be
thrown if called on an \f[CR]OfflineAudioContext\f[R].
.SH SYNTAX
.IP
.EX
resume()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that resolves when the context has resumed.
The promise is rejected if the context has already been closed.
.SH EXAMPLES
The following snippet is taken from our \c
.UR https://github.com/mdn/webaudio-examples/tree/main/audiocontext-states
AudioContext states demo
.UE \c
\ (\c
.UR https://mdn.github.io/webaudio-examples/audiocontext-states/
see it running live
.UE \c
\&.)
When the suspend/resume button is clicked, the
\f[CR]AudioContext.state\f[R] is queried \[em] if it is
\f[CR]running\f[R], \f[CR]suspend()\f[R] is called; if it is
\f[CR]suspended\f[R], \f[CR]resume()\f[R] is called.
In each case, the text label of the button is updated as appropriate
once the promise resolves.
.IP
.EX
susresBtn.onclick = () \f[B]=>\f[R] {
  \f[B]if\f[R] (audioCtx.state === \[dq]running\[dq]) {
    audioCtx.suspend().then(() \f[B]=>\f[R] {
      susresBtn.textContent = \[dq]Resume context\[dq];
    });
  } \f[B]else\f[R] \f[B]if\f[R] (audioCtx.state === \[dq]suspended\[dq]) {
    audioCtx.resume().then(() \f[B]=>\f[R] {
      susresBtn.textContent = \[dq]Suspend context\[dq];
    });
  }
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
.IP \[bu] 2
Web Audio API
