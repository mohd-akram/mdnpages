.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MATH.EXPM1" "3JS" "April 17, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Math.expm1 \- Math.expm1()
.SH SYNOPSIS
The \f[B]\f[CB]Math.expm1()\f[B]\f[R] static method returns e raised to
the power of a number, subtracted by 1.
That is
.PP
\ 𝙼𝚊𝚝𝚑.𝚎𝚡𝚙𝚖𝟷(𝚡)=ex−1 = \(hax \- 1 
.IP
.EX
console.log(Math.expm1(0));
\f[I]// Expected output: 0\f[R]

console.log(Math.expm1(1));
\f[I]// Expected output: 1.718281828459045\f[R]

console.log(Math.expm1(\-1));
\f[I]// Expected output: \-0.6321205588285577\f[R]

console.log(Math.expm1(2));
\f[I]// Expected output: 6.38905609893065\f[R]
.EE
.SH SYNTAX
.IP
.EX
Math.expm1(x)
.EE
.SS Parameters
.TP
\f[B]x\f[R]
A number.
.SS Return value
A number representing e\(hax \- 1, where e is the base of the natural
logarithm.
.SH DESCRIPTION
For very small values of \f[I]x\f[R], adding 1 can reduce or eliminate
precision.
The double floats used in JS give you about 15 digits of precision.
1 + 1e\-15 = 1.000000000000001, but 1 + 1e\-16 = 1.000000000000000 and
therefore exactly 1.0 in that arithmetic, because digits past 15 are
rounded off.
.PP
When you calculate ex\(hax, where x is a number very close to 0, you
should get an answer very close to 1 + x because: limx→0ex−1x=1_{x }  =
1.
If you calculate \f[CR]Math.exp(1.1111111111e\-15) \- 1\f[R], you should
get an answer close to \f[CR]1.1111111111e\-15\f[R].
Instead, due to the highest significant figure in the result of
\f[CR]Math.exp\f[R] being the units digit \f[CR]1\f[R], the final value
ends up being \f[CR]1.1102230246251565e\-15\f[R], with only 3 correct
digits.
If you calculate \f[CR]Math.expm1(1.1111111111e\-15)\f[R] instead, you
will get a much more accurate answer,
\f[CR]1.1111111111000007e\-15\f[R], with 11 correct digits of precision.
.PP
Because \f[CR]expm1()\f[R] is a static method of \f[CR]Math\f[R], you
always use it as \f[CR]Math.expm1()\f[R], rather than as a method of a
\f[CR]Math\f[R] object you created (\f[CR]Math\f[R] is not a
constructor).
.SH EXAMPLES
.SS Using Math.expm1()
.IP
.EX
Math.expm1(\-\f[B]Infinity\f[R]); \f[I]// \-1\f[R]
Math.expm1(\-1); \f[I]// \-0.6321205588285577\f[R]
Math.expm1(\-0); \f[I]// \-0\f[R]
Math.expm1(0); \f[I]// 0\f[R]
Math.expm1(1); \f[I]// 1.718281828459045\f[R]
Math.expm1(\f[B]Infinity\f[R]); \f[I]// Infinity\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-math
Polyfill of \f[CR]Math.expm1\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]Math.E\f[R]
.IP \(bu 2
\f[CR]Math.exp()\f[R]
.IP \(bu 2
\f[CR]Math.log()\f[R]
.IP \(bu 2
\f[CR]Math.log10()\f[R]
.IP \(bu 2
\f[CR]Math.log1p()\f[R]
.IP \(bu 2
\f[CR]Math.log2()\f[R]
.IP \(bu 2
\f[CR]Math.pow()\f[R]
