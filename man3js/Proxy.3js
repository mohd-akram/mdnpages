'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PROXY" "3JS" "May 15, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Proxy \- Proxy
.SH SYNOPSIS
The \f[B]\f[CB]Proxy\f[B]\f[R] object enables you to create a proxy for
another object, which can intercept and redefine fundamental operations
for that object.
.SH DESCRIPTION
The \f[CR]Proxy\f[R] object allows you to create an object that can be
used in place of the original object, but which may redefine fundamental
\f[CR]Object\f[R] operations like getting, setting, and defining
properties.
Proxy objects are commonly used to log property accesses, validate,
format, or sanitize inputs, and so on.
.PP
You create a \f[CR]Proxy\f[R] with two parameters:
.IP \(bu 2
\f[CR]target\f[R]: the original object which you want to proxy
.IP \(bu 2
\f[CR]handler\f[R]: an object that defines which operations will be
intercepted and how to redefine intercepted operations.
.PP
For example, this code creates a proxy for the \f[CR]target\f[R] object.
.IP
.EX
\f[B]const\f[R] target = {
  message1: \(dqhello\(dq,
  message2: \(dqeveryone\(dq,
};

\f[B]const\f[R] handler1 = {};

\f[B]const\f[R] proxy1 = \f[B]new\f[R] Proxy(target, handler1);
.EE
.PP
Because the handler is empty, this proxy behaves just like the original
target:
.IP
.EX
console.log(proxy1.message1); \f[I]// hello\f[R]
console.log(proxy1.message2); \f[I]// everyone\f[R]
.EE
.PP
To customize the proxy, we define functions on the handler object:
.IP
.EX
\f[B]const\f[R] target = {
  message1: \(dqhello\(dq,
  message2: \(dqeveryone\(dq,
};

\f[B]const\f[R] handler2 = {
  \f[B]get\f[R](target, prop, receiver) {
    \f[B]return\f[R] \(dqworld\(dq;
  },
};

\f[B]const\f[R] proxy2 = \f[B]new\f[R] Proxy(target, handler2);
.EE
.PP
Here we\(cqve provided an implementation of the \f[CR]get()\f[R]
handler, which intercepts attempts to access properties in the target.
.PP
Handler functions are sometimes called \f[I]traps\f[R], presumably
because they trap calls to the target object.
The trap in \f[CR]handler2\f[R] above redefines all property accessors:
.IP
.EX
console.log(proxy2.message1); \f[I]// world\f[R]
console.log(proxy2.message2); \f[I]// world\f[R]
.EE
.PP
Proxies are often used with the \f[CR]Reflect\f[R] object, which
provides some methods with the same names as the \f[CR]Proxy\f[R] traps.
The \f[CR]Reflect\f[R] methods provide the reflective semantics for
invoking the corresponding object internal methods.
For example, we can call \f[CR]Reflect.get\f[R] if we don\(cqt wish to
redefine the object\(cqs behavior:
.IP
.EX
\f[B]const\f[R] target = {
  message1: \(dqhello\(dq,
  message2: \(dqeveryone\(dq,
};

\f[B]const\f[R] handler3 = {
  \f[B]get\f[R](target, prop, receiver) {
    \f[B]if\f[R] (prop === \(dqmessage2\(dq) {
      \f[B]return\f[R] \(dqworld\(dq;
    }
    \f[B]return\f[R] Reflect.get(...\f[B]arguments\f[R]);
  },
};

\f[B]const\f[R] proxy3 = \f[B]new\f[R] Proxy(target, handler3);

console.log(proxy3.message1); \f[I]// hello\f[R]
console.log(proxy3.message2); \f[I]// world\f[R]
.EE
.PP
The \f[CR]Reflect\f[R] method still interacts with the object through
object internal methods \(em it doesn\(cqt \(lqde\-proxify\(rq the proxy
if it\(cqs invoked on a proxy.
If you use \f[CR]Reflect\f[R] methods within a proxy trap, and the
\f[CR]Reflect\f[R] method call gets intercepted by the trap again, there
may be infinite recursion.
.SS Terminology
The following terms are used when talking about the functionality of
proxies.
.TP
handler
The object passed as the second argument to the \f[CR]Proxy\f[R]
constructor.
It contains the traps which define the behavior of the proxy.
.TP
trap
The function that defines the behavior for the corresponding object
internal method.
(This is analogous to the concept of \f[I]traps\f[R] in operating
systems.)
.TP
target
Object which the proxy virtualizes.
It is often used as storage backend for the proxy.
Invariants (semantics that remain unchanged) regarding object
non\-extensibility or non\-configurable properties are verified against
the target.
.TP
invariants
Semantics that remain unchanged when implementing custom operations.
If your trap implementation violates the invariants of a handler, a
\f[CR]TypeError\f[R] will be thrown.
.SS Object internal methods
Objects are collections of properties.
However, the language doesn\(cqt provide any machinery to
\f[I]directly\f[R] manipulate data stored in the object \(em rather, the
object defines some internal methods specifying how it can be interacted
with.
For example, when you read \f[CR]obj.x\f[R], you may expect the
following to happen:
.IP \(bu 2
The \f[CR]x\f[R] property is searched up the prototype chain until it is
found.
.IP \(bu 2
If \f[CR]x\f[R] is a data property, the property descriptor\(cqs
\f[CR]value\f[R] attribute is returned.
.IP \(bu 2
If \f[CR]x\f[R] is an accessor property, the getter is invoked, and the
return value of the getter is returned.
.PP
There isn\(cqt anything special about this process in the language \(em
it\(cqs just because ordinary objects, by default, have a
\f[CR][[Get]]\f[R] internal method that is defined with this behavior.
The \f[CR]obj.x\f[R] property access syntax simply invokes the
\f[CR][[Get]]\f[R] method on the object, and the object uses its own
internal method implementation to determine what to return.
.PP
As another example, arrays differ from normal objects, because they have
a magic \f[CR]length\f[R] property that, when modified, automatically
allocates empty slots or removes elements from the array.
Similarly, adding array elements automatically changes the
\f[CR]length\f[R] property.
This is because arrays have a \f[CR][[DefineOwnProperty]]\f[R] internal
method that knows to update \f[CR]length\f[R] when an integer index is
written to, or update the array contents when \f[CR]length\f[R] is
written to.
Such objects whose internal methods have different implementations from
ordinary objects are called \f[I]exotic objects\f[R].
\f[CR]Proxy\f[R] enable developers to define their own exotic objects
with full capacity.
.PP
All objects have the following internal methods:
.PP
.TS
tab(@);
lw(15.6n) lw(54.4n).
T{
Internal method
T}@T{
Corresponding trap
T}
_
T{
\f[CR][[GetPrototypeOf]]\f[R]
T}@T{
\f[CR]getPrototypeOf()\f[R]
T}
T{
\f[CR][[SetPrototypeOf]]\f[R]
T}@T{
\f[CR]setPrototypeOf()\f[R]
T}
T{
\f[CR][[IsExtensible]]\f[R]
T}@T{
\f[CR]isExtensible()\f[R]
T}
T{
\f[CR][[PreventExtensions]]\f[R]
T}@T{
\f[CR]preventExtensions()\f[R]
T}
T{
\f[CR][[GetOwnProperty]]\f[R]
T}@T{
\f[CR]getOwnPropertyDescriptor()\f[R]
T}
T{
\f[CR][[DefineOwnProperty]]\f[R]
T}@T{
\f[CR]defineProperty()\f[R]
T}
T{
\f[CR][[HasProperty]]\f[R]
T}@T{
\f[CR]has()\f[R]
T}
T{
\f[CR][[Get]]\f[R]
T}@T{
\f[CR]get()\f[R]
T}
T{
\f[CR][[Set]]\f[R]
T}@T{
\f[CR]set()\f[R]
T}
T{
\f[CR][[Delete]]\f[R]
T}@T{
\f[CR]deleteProperty()\f[R]
T}
T{
\f[CR][[OwnPropertyKeys]]\f[R]
T}@T{
\f[CR]ownKeys()\f[R]
T}
.TE
.PP
Function objects also have the following internal methods:
.PP
.TS
tab(@);
l l.
T{
Internal method
T}@T{
Corresponding trap
T}
_
T{
\f[CR][[Call]]\f[R]
T}@T{
\f[CR]apply()\f[R]
T}
T{
\f[CR][[Construct]]\f[R]
T}@T{
\f[CR]construct()\f[R]
T}
.TE
.PP
It\(cqs important to realize that all interactions with an object
eventually boils down to the invocation of one of these internal
methods, and that they are all customizable through proxies.
This means almost no behavior (except certain critical invariants) is
guaranteed in the language \(em everything is defined by the object
itself.
When you run \f[CR]delete obj.x\f[R], there\(cqs no guarantee that
\f[CR]\(dqx\(dq in obj\f[R] returns \f[CR]false\f[R] afterwards \(em it
depends on the object\(cqs implementations of \f[CR][[Delete]]\f[R] and
\f[CR][[HasProperty]]\f[R].
A \f[CR]delete obj.x\f[R] may log things to the console, modify some
global state, or even define a new property instead of deleting the
existing one, although these semantics should be avoided in your own
code.
.PP
All internal methods are called by the language itself, and are not
directly accessible in JavaScript code.
The \f[CR]Reflect\f[R] namespace offers methods that do little more than
call the internal methods, besides some input normalization/validation.
In each trap\(cqs page, we list several typical situations when the trap
is invoked, but these internal methods are called in \f[I]a lot\f[R] of
places.
For example, array methods read and write to array through these
internal methods, so methods like \f[CR]push()\f[R] would also invoke
\f[CR]get()\f[R] and \f[CR]set()\f[R] traps.
.PP
Most of the internal methods are straightforward in what they do.
The only two that may be confusable are \f[CR][[Set]]\f[R] and
\f[CR][[DefineOwnProperty]]\f[R].
For normal objects, the former invokes setters; the latter doesn\(cqt.
(And \f[CR][[Set]]\f[R] calls \f[CR][[DefineOwnProperty]]\f[R]
internally if there\(cqs no existing property or the property is a data
property.)
While you may know that the \f[CR]obj.x = 1\f[R] syntax uses
\f[CR][[Set]]\f[R], and \f[CR]Object.defineProperty()\f[R] uses
\f[CR][[DefineOwnProperty]]\f[R], it\(cqs not immediately apparent what
semantics other built\-in methods and syntaxes use.
For example, class fields use the \f[CR][[DefineOwnProperty]]\f[R]
semantic, which is why setters defined in the superclass are not invoked
when a field is declared on the derived class.
.SH CONSTRUCTOR
.TP
\f[B]Proxy()\f[R]
Creates a new \f[CR]Proxy\f[R] object.
.RS
.PP
\f[B]Note:\f[R] There\(cqs no \f[CR]Proxy.prototype\f[R] property, so
\f[CR]Proxy\f[R] instances do not have any special properties or
methods.
.RE
.SH STATIC METHODS
.TP
\f[B]Proxy.revocable()\f[R]
Creates a revocable \f[CR]Proxy\f[R] object.
.SH EXAMPLES
.SS Basic example
In this example, the number \f[CR]37\f[R] gets returned as the default
value when the property name is not in the object.
It is using the \f[CR]get()\f[R] handler.
.IP
.EX
\f[B]const\f[R] handler = {
  \f[B]get\f[R](obj, prop) {
    \f[B]return\f[R] prop \f[B]in\f[R] obj ? obj[prop] : 37;
  },
};

\f[B]const\f[R] p = \f[B]new\f[R] Proxy({}, handler);
p.a = 1;
p.b = \f[B]undefined\f[R];

console.log(p.a, p.b); \f[I]// 1, undefined\f[R]

console.log(\(dqc\(dq \f[B]in\f[R] p, p.c); \f[I]// false, 37\f[R]
.EE
.SS No\-op forwarding proxy
In this example, we are using a native JavaScript object to which our
proxy will forward all operations that are applied to it.
.IP
.EX
\f[B]const\f[R] target = {};
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(target, {});

p.a = 37; \f[I]// Operation forwarded to the target\f[R]

console.log(target.a); \f[I]// 37 (The operation has been properly forwarded!)\f[R]
.EE
.PP
Note that while this \(lqno\-op\(rq works for plain JavaScript objects,
it does not work for native objects, such as DOM elements,
\f[CR]Map\f[R] objects, or anything that has internal slots.
See no private property forwarding for more information.
.SS No private property forwarding
A proxy is still another object with a different identity \(em it\(cqs a
\f[I]proxy\f[R] that operates between the wrapped object and the
outside.
As such, the proxy does not have direct access to the original
object\(cqs private properties.
.IP
.EX
\f[B]class\f[R] Secret {
  #secret;
  constructor(secret) {
    \f[B]this\f[R].#secret = secret;
  }
  \f[B]get\f[R] secret() {
    \f[B]return\f[R] \f[B]this\f[R].#secret.replace(/\(rsd+/, \(dq[REDACTED]\(dq);
  }
}

\f[B]const\f[R] aSecret = \f[B]new\f[R] Secret(\(dq123456\(dq);
console.log(aSecret.secret); \f[I]// [REDACTED]\f[R]
\f[I]// Looks like a no\-op forwarding...\f[R]
\f[B]const\f[R] proxy = \f[B]new\f[R] Proxy(aSecret, {});
console.log(proxy.secret); \f[I]// TypeError: Cannot read private member #secret from an object whose class did not declare it\f[R]
.EE
.PP
This is because when the proxy\(cqs \f[CR]get\f[R] trap is invoked, the
\f[CR]this\f[R] value is the \f[CR]proxy\f[R] instead of the original
\f[CR]secret\f[R], so \f[CR]#secret\f[R] is not accessible.
To fix this, use the original \f[CR]secret\f[R] as \f[CR]this\f[R]:
.IP
.EX
\f[B]const\f[R] proxy = \f[B]new\f[R] Proxy(aSecret, {
  \f[B]get\f[R](target, prop, receiver) {
    \f[I]// By default, it looks like Reflect.get(target, prop, receiver)\f[R]
    \f[I]// which has a different value of \(gathis\(ga\f[R]
    \f[B]return\f[R] target[prop];
  },
});
console.log(proxy.secret);
.EE
.PP
For methods, this means you have to redirect the method\(cqs
\f[CR]this\f[R] value to the original object as well:
.IP
.EX
\f[B]class\f[R] Secret {
  #x = 1;
  x() {
    \f[B]return\f[R] \f[B]this\f[R].#x;
  }
}

\f[B]const\f[R] aSecret = \f[B]new\f[R] Secret();
\f[B]const\f[R] proxy = \f[B]new\f[R] Proxy(aSecret, {
  \f[B]get\f[R](target, prop, receiver) {
    \f[B]const\f[R] value = target[prop];
    \f[B]if\f[R] (value \f[B]instanceof\f[R] Function) {
      \f[B]return\f[R] \f[B]function\f[R] (...args) {
        \f[B]return\f[R] value.apply(\f[B]this\f[R] === receiver ? target : \f[B]this\f[R], args);
      };
    }
    \f[B]return\f[R] value;
  },
});
console.log(proxy.x());
.EE
.PP
Some native JavaScript objects have properties called \f[I]\c
.UR https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-object-internal-methods-and-internal-slots
internal slots
.UE \c
\f[R], which are not accessible from JavaScript code.
For example, \f[CR]Map\f[R] objects have an internal slot called
\f[CR][[MapData]]\f[R], which stores the key\-value pairs of the map.
As such, you cannot trivially create a forwarding proxy for a map:
.IP
.EX
\f[B]const\f[R] proxy = \f[B]new\f[R] Proxy(\f[B]new\f[R] Map(), {});
console.log(proxy.size); \f[I]// TypeError: get size method called on incompatible Proxy\f[R]
.EE
.PP
You have to use the \(lq\f[CR]this\f[R]\-recovering\(rq proxy
illustrated above to work around this.
.SS Validation
With a \f[CR]Proxy\f[R], you can easily validate the passed value for an
object.
This example uses the \f[CR]set()\f[R] handler.
.IP
.EX
\f[B]const\f[R] validator = {
  \f[B]set\f[R](obj, prop, value) {
    \f[B]if\f[R] (prop === \(dqage\(dq) {
      \f[B]if\f[R] (!Number.isInteger(value)) {
        \f[B]throw\f[R] \f[B]new\f[R] TypeError(\(dqThe age is not an integer\(dq);
      }
      \f[B]if\f[R] (value > 200) {
        \f[B]throw\f[R] \f[B]new\f[R] RangeError(\(dqThe age seems invalid\(dq);
      }
    }

    \f[I]// The default behavior to store the value\f[R]
    obj[prop] = value;

    \f[I]// Indicate success\f[R]
    \f[B]return\f[R] \f[B]true\f[R];
  },
};

\f[B]const\f[R] person = \f[B]new\f[R] Proxy({}, validator);

person.age = 100;
console.log(person.age); \f[I]// 100\f[R]
person.age = \(dqyoung\(dq; \f[I]// Throws an exception\f[R]
person.age = 300; \f[I]// Throws an exception\f[R]
.EE
.SS Manipulating DOM nodes
In this example we use \f[CR]Proxy\f[R] to toggle an attribute of two
different elements: so when we set the attribute on one element, the
attribute is unset on the other one.
.PP
We create a \f[CR]view\f[R] object which is a proxy for an object with a
\f[CR]selected\f[R] property.
The proxy handler defines the \f[CR]set()\f[R] handler.
.PP
When we assign an HTML element to \f[CR]view.selected\f[R], the
element\(cqs \f[CR]\(aqaria\-selected\(aq\f[R] attribute is set to
\f[CR]true\f[R].
If we then assign a different element to \f[CR]view.selected\f[R], this
element\(cqs \f[CR]\(aqaria\-selected\(aq\f[R] attribute is set to
\f[CR]true\f[R] and the previous element\(cqs
\f[CR]\(aqaria\-selected\(aq\f[R] attribute is automatically set to
\f[CR]false\f[R].
.IP
.EX
\f[B]const\f[R] view = \f[B]new\f[R] Proxy(
  {
    selected: \f[B]null\f[R],
  },
  {
    \f[B]set\f[R](obj, prop, newVal) {
      \f[B]const\f[R] oldVal = obj[prop];

      \f[B]if\f[R] (prop === \(dqselected\(dq) {
        \f[B]if\f[R] (oldVal) {
          oldVal.setAttribute(\(dqaria\-selected\(dq, \(dqfalse\(dq);
        }
        \f[B]if\f[R] (newVal) {
          newVal.setAttribute(\(dqaria\-selected\(dq, \(dqtrue\(dq);
        }
      }

      \f[I]// The default behavior to store the value\f[R]
      obj[prop] = newVal;

      \f[I]// Indicate success\f[R]
      \f[B]return\f[R] \f[B]true\f[R];
    },
  },
);

\f[B]const\f[R] item1 = document.getElementById(\(dqitem\-1\(dq);
\f[B]const\f[R] item2 = document.getElementById(\(dqitem\-2\(dq);

\f[I]// select item1:\f[R]
view.selected = item1;

console.log(\(gaitem1: ${item1.getAttribute(\(dqaria\-selected\(dq)}\(ga);
\f[I]// item1: true\f[R]

\f[I]// selecting item2 de\-selects item1:\f[R]
view.selected = item2;

console.log(\(gaitem1: ${item1.getAttribute(\(dqaria\-selected\(dq)}\(ga);
\f[I]// item1: false\f[R]

console.log(\(gaitem2: ${item2.getAttribute(\(dqaria\-selected\(dq)}\(ga);
\f[I]// item2: true\f[R]
.EE
.SS Value correction and an extra property
The \f[CR]products\f[R] proxy object evaluates the passed value and
converts it to an array if needed.
The object also supports an extra property called
\f[CR]latestBrowser\f[R] both as a getter and a setter.
.IP
.EX
\f[B]const\f[R] products = \f[B]new\f[R] Proxy(
  {
    browsers: [\(dqFirefox\(dq, \(dqChrome\(dq],
  },
  {
    \f[B]get\f[R](obj, prop) {
      \f[I]// An extra property\f[R]
      \f[B]if\f[R] (prop === \(dqlatestBrowser\(dq) {
        \f[B]return\f[R] obj.browsers[obj.browsers.length \- 1];
      }

      \f[I]// The default behavior to return the value\f[R]
      \f[B]return\f[R] obj[prop];
    },
    \f[B]set\f[R](obj, prop, value) {
      \f[I]// An extra property\f[R]
      \f[B]if\f[R] (prop === \(dqlatestBrowser\(dq) {
        obj.browsers.push(value);
        \f[B]return\f[R] \f[B]true\f[R];
      }

      \f[I]// Convert the value if it is not an array\f[R]
      \f[B]if\f[R] (\f[B]typeof\f[R] value === \(dqstring\(dq) {
        value = [value];
      }

      \f[I]// The default behavior to store the value\f[R]
      obj[prop] = value;

      \f[I]// Indicate success\f[R]
      \f[B]return\f[R] \f[B]true\f[R];
    },
  },
);

console.log(products.browsers);
\f[I]//  [\(aqFirefox\(aq, \(aqChrome\(aq]\f[R]

products.browsers = \(dqSafari\(dq;
\f[I]//  pass a string (by mistake)\f[R]

console.log(products.browsers);
\f[I]//  [\(aqSafari\(aq] <\- no problem, the value is an array\f[R]

products.latestBrowser = \(dqEdge\(dq;

console.log(products.browsers);
\f[I]//  [\(aqSafari\(aq, \(aqEdge\(aq]\f[R]

console.log(products.latestBrowser);
\f[I]//  \(aqEdge\(aq\f[R]
.EE
.SS A complete traps list example
Now in order to create a complete sample \f[CR]traps\f[R] list, for
didactic purposes, we will try to proxify a \f[I]non\-native\f[R] object
that is particularly suited to this type of operation: the
\f[CR]docCookies\f[R] global object created by \c
.UR https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework
a simple cookie framework
.UE \c
\&.
.IP
.EX
\f[I]/*\f[R]
\f[I]  const docCookies = ... get the \(dqdocCookies\(dq object here:\f[R]
\f[I]  https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework\f[R]
\f[I]*/\f[R]

\f[B]const\f[R] docCookies = \f[B]new\f[R] Proxy(docCookies, {
  \f[B]get\f[R](target, key) {
    \f[B]return\f[R] target[key] ?? target.getItem(key) ?? \f[B]undefined\f[R];
  },
  \f[B]set\f[R](target, key, value) {
    \f[B]if\f[R] (key \f[B]in\f[R] target) {
      \f[B]return\f[R] \f[B]false\f[R];
    }
    \f[B]return\f[R] target.setItem(key, value);
  },
  deleteProperty(target, key) {
    \f[B]if\f[R] (!(key \f[B]in\f[R] target)) {
      \f[B]return\f[R] \f[B]false\f[R];
    }
    \f[B]return\f[R] target.removeItem(key);
  },
  ownKeys(target) {
    \f[B]return\f[R] target.keys();
  },
  has(target, key) {
    \f[B]return\f[R] key \f[B]in\f[R] target || target.hasItem(key);
  },
  defineProperty(target, key, descriptor) {
    \f[B]if\f[R] (descriptor && \(dqvalue\(dq \f[B]in\f[R] descriptor) {
      target.setItem(key, descriptor.value);
    }
    \f[B]return\f[R] target;
  },
  getOwnPropertyDescriptor(target, key) {
    \f[B]const\f[R] value = target.getItem(key);
    \f[B]return\f[R] value
      ? {
          value,
          writable: \f[B]true\f[R],
          enumerable: \f[B]true\f[R],
          configurable: \f[B]false\f[R],
        }
      : \f[B]undefined\f[R];
  },
});

\f[I]/* Cookies test */\f[R]

console.log((docCookies.myCookie1 = \(dqFirst value\(dq));
console.log(docCookies.getItem(\(dqmyCookie1\(dq));

docCookies.setItem(\(dqmyCookie1\(dq, \(dqChanged value\(dq);
console.log(docCookies.myCookie1);
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://youtu.be/sClk6aB_CPk
Proxies are awesome
.UE \c
\ presentation by Brendan Eich at JSConf (2014)
