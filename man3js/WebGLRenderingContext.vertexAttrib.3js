.\" Automatically generated by Pandoc 3.4
.\"
.TH "WebGLRenderingContext.vertexAttrib" "JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.vertexAttrib \- WebGLRenderingContext:
vertexAttrib[1234]fv method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGLRenderingContext.vertexAttrib[1234]f[v]()\f[B]\f[R]
methods of the WebGL API specify constant values for generic vertex
attributes.
.SH SYNTAX
.IP
.EX
vertexAttrib1f(index, v0)
vertexAttrib2f(index, v0, v1)
vertexAttrib3f(index, v0, v1, v2)
vertexAttrib4f(index, v0, v1, v2, v3)

vertexAttrib1fv(index, value)
vertexAttrib2fv(index, value)
vertexAttrib3fv(index, value)
vertexAttrib4fv(index, value)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
A \f[CR]GLuint\f[R] specifying the position of the vertex attribute to
be modified.
.TP
\f[B]v0\f[R], \f[B]v1\f[R], \f[B]v2\f[R], \f[B]v3\f[R]
A floating point \f[CR]Number\f[R] for the vertex attribute value.
.TP
\f[B]value\f[R]
A \f[CR]Float32Array\f[R] for floating point vector vertex attribute
values.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH DESCRIPTION
While vertex attributes are usually used to specify values which are
different for each vertex (using \f[CR]vertexAttribPointer\f[R]), it can
be useful to specify a constant value.
For example, if you have a shader which has a \f[CR]color\f[R] vertex
attribute, but you want to draw everything in a single color, you can
use \f[CR]vertexAttrib\f[R] to achieve that without creating a buffer
filled with only one value or having to create a separate shader which
uses a uniform for the color.
.PP
This value will be used if a bound array buffer has not been enabled
with \f[CR]enableVertexAttribArray\f[R].
.PP
Attributes may be matrices, in which case columns of the matrix must be
loaded into successive vertex attribute slots.
.PP
The values set with \f[CR]vertexAttrib\f[R] are context\-global; that
is, they aren\[cq]t part of the shader state (like generic vertex
attribute indexes to shader variable bindings) and aren\[cq]t part of
the vertex array object state (like enabled vertex attribute arrays).
The only way to change the values is by calling this function again.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] a_foobar = gl.getAttribLocation(shaderProgram, \[dq]foobar\[dq]);
\f[I]//either set each component individually:\f[R]
gl.vertexAttrib3f(a_foobar, 10.0, 5.0, 2.0);
\f[I]//or provide a Float32Array:\f[R]
\f[B]const\f[R] floatArray = \f[B]new\f[R] Float32Array([10.0, 5.0, 2.0]);
gl.vertexAttrib3fv(a_foobar, floatArray);
.EE
.IP
.EX
\f[I]// we want to load the following 3x3 matrix into attribute named \[dq]matrix3x3\[dq]\f[R]
\f[I]// 0 1 2\f[R]
\f[I]// 3 4 5\f[R]
\f[I]// 6 7 8\f[R]
\f[B]const\f[R] matrix3x3Location = gl.getAttribLocation(shaderProgram, \[dq]matrix3x3\[dq]);
gl.vertexAttrib3f(matrix3x3Location, 0, 3, 6);
gl.vertexAttrib3f(matrix3x3Location + 1, 1, 4, 7);
gl.vertexAttrib3f(matrix3x3Location + 2, 2, 5, 8);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getVertexAttrib()\f[R]
