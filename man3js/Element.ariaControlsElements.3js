.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.ARIACONTROLSELEMENTS" "3JS" "May 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.ariaControlsElements \- Element: ariaControlsElements property
.SH SYNOPSIS
The \f[B]\f[CB]ariaControlsElements\f[B]\f[R] property of the
\f[CR]Element\f[R] interface is an array containing the elements that
are controlled by the element it is applied to.
For example, this might be set on a combobox to indicate the element
that it pops up, or on a \f[CR]scrollbar\f[R] to indicate the ID of the
element it controls.
.PP
The \f[CR]aria\-controls\f[R] topic contains additional information
about how the attribute and property should be used.
.SH VALUE
An array of subclasses of \f[CR]HTMLElement\f[R], representing the
elements that are controlled by this element.
.PP
When read, the returned array is static and read\-only.
When written, the assigned array is copied: subsequent changes to the
array do not affect the value of the property.
.SH DESCRIPTION
The property is a flexible alternative to using the
\f[CR]aria\-controls\f[R] attribute to set the controlled elements.
Unlike \f[CR]aria\-controls\f[R], the elements assigned to this property
do not have to have an \f[CR]id\f[R] attribute.
.PP
The property reflects the \f[CR]aria\-controls\f[R] attribute when it is
defined, but only for listed reference \f[CR]id\f[R] values that match
valid in\-scope elements.
If the property is set, then the corresponding attribute is cleared.
For more information about reflected element references and scope see
Reflected element references in the \f[I]Reflected attributes\f[R]
guide.
.SH EXAMPLES
.SS Get the controlled elements
This example shows how \f[CR]ariaControlsElements\f[R] can be used to
get the controlled elements that were set using
\f[CR]aria\-controls\f[R].
.SS HTML
The HTML defines first defines a \f[CR]<button>\f[R] element and two
\f[CR]<div>\f[R] elements, \f[CR]panel1\f[R] and \f[CR]panel2\f[R], that
it controls.
The references to the controlled panels are listed in the button\(cqs
\f[CR]aria\-controls\f[R] attribute.
.IP
.EX
<\f[B]button\f[R] id=\(dqtoggleButton\(dq aria\-controls=\(dqpanel1 panel2\(dq aria\-expanded=\(dqfalse\(dq>
  Show Details
</\f[B]button\f[R]>

<\f[B]div\f[R] class=\(dqpanel\(dq id=\(dqpanel1\(dq aria\-hidden=\(dqtrue\(dq>
  <\f[B]p\f[R]>Panel1 opened/closed by button.</\f[B]p\f[R]>
</\f[B]div\f[R]>

<\f[B]div\f[R] class=\(dqpanel\(dq id=\(dqpanel2\(dq aria\-hidden=\(dqtrue\(dq>
  <\f[B]p\f[R]>Panel2 opened/closed by button.</\f[B]p\f[R]>
</\f[B]div\f[R]>
.EE
.IP
.EX
\&.panel {
  \f[B]display\f[R]: none; \f[I]/* Initially hidden */\f[R]
  \f[B]border\f[R]: 1px solid #ccc;
  \f[B]padding\f[R]: 5px;
  \f[B]margin\-top\f[R]: 5px;
}
.EE
.SS JavaScript
The code first sets up the panels to be toggled open or hidden based on
the \f[CR]aria\-expanded\f[R] attribute of the button.
.IP
.EX
\f[B]const\f[R] toggleButton = document.querySelector(\(dq#toggleButton\(dq);
\f[B]const\f[R] panel1 = document.querySelector(\(dq#panel1\(dq);
\f[B]const\f[R] panel2 = document.querySelector(\(dq#panel2\(dq);

toggleButton.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[B]const\f[R] isExpanded = toggleButton.getAttribute(\(dqaria\-expanded\(dq) === \(dqtrue\(dq;

  toggleButton.setAttribute(\(dqaria\-expanded\(dq, !isExpanded);
  panel1.style.display = isExpanded ? \(dqnone\(dq : \(dqblock\(dq;
  panel1.setAttribute(\(dqaria\-hidden\(dq, isExpanded); \f[I]//true when hidden, false when shown.\f[R]

  panel2.style.display = isExpanded ? \(dqnone\(dq : \(dqblock\(dq;
  panel2.setAttribute(\(dqaria\-hidden\(dq, isExpanded); \f[I]//true when hidden, false when shown.\f[R]
});
.EE
.PP
Next the example gets the value of the \f[CR]aria\-controls\f[R]
attribute with \f[CR]Element.getAttribute()\f[R] (a string listing the
\f[CR]id\f[R] values of the referenced elements).
It then checks whether the \f[CR]ariaControlsElements\f[R] property is
supported, and if so, logs its value.
Finally it returns and logs the inner text for each of the controlled
elements.
.IP
.EX
log(\(gaaria\-controls: ${toggleButton.getAttribute(\(dqaria\-controls\(dq)}\(ga);
\f[I]// Feature test for ariaControlsElements\f[R]
\f[B]if\f[R] (\(dqariaControlsElements\(dq \f[B]in\f[R] Element.prototype) {
  \f[I]// Get ariaControlsElements\f[R]
  \f[B]const\f[R] controlledElements = toggleButton.ariaControlsElements;
  log(\(gaariaControlsElements: ${controlledElements}\(ga);

  \f[I]// List innerText for each of the ariaControlsElements\f[R]
  controlledElements.forEach((controlled) \f[B]=>\f[R] {
    log(\(ga Controlled element text: ${controlled.textContent.trim()}\(ga);
  });
} \f[B]else\f[R] {
  log(\(dqelement.ariaControlsElements: not supported by browser\(dq);
}
.EE
.SS Result
Click the button below to show and hide the panels.
The log shows the original element references, the associated/returned
elements, and the inner text of each element.
.SH SEE ALSO
.IP \(bu 2
\f[CR]aria\-controls\f[R] attribute
.IP \(bu 2
\f[CR]ElementInternals.ariaControlsElements\f[R]
.IP \(bu 2
Reflected element references in the \f[I]Attribute reflection\f[R] guide
