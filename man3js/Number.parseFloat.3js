.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "NUMBER.PARSEFLOAT" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.parseFloat \- Number.parseFloat()
.SH SYNOPSIS
The \f[B]\f[CB]Number.parseFloat()\f[B]\f[R] static method parses an
argument and returns a floating point number.
If a number cannot be parsed from the argument, it returns
\f[CR]NaN\f[R].
.IP
.EX
\f[B]function\f[R] circumference(r) {
  \f[B]if\f[R] (Number.isNaN(Number.parseFloat(r))) {
    \f[B]return\f[R] 0;
  }
  \f[B]return\f[R] parseFloat(r) * 2.0 * Math.PI;
}

console.log(circumference(\(dq4.567abcdefgh\(dq));
\f[I]// Expected output: 28.695307297889173\f[R]

console.log(circumference(\(dqabcdefgh\(dq));
\f[I]// Expected output: 0\f[R]
.EE
.SH SYNTAX
.IP
.EX
Number.parseFloat(string)
.EE
.SS Parameters
.TP
\f[B]string\f[R]
The value to parse, coerced to a string.
Leading whitespace in this argument is ignored.
.SS Return value
A floating point number parsed from the given \f[CR]string\f[R].
.PP
Or \f[CR]NaN\f[R] when the first non\-whitespace character cannot be
converted to a number.
.SH EXAMPLES
.SS Number.parseFloat vs.\ parseFloat
This method has the same functionality as the global
\f[CR]parseFloat()\f[R] function:
.IP
.EX
Number.parseFloat === parseFloat; \f[I]// true\f[R]
.EE
.PP
Its purpose is modularization of globals.
.PP
See \f[CR]parseFloat()\f[R] for more detail and examples.
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-number
Polyfill of \f[CR]Number.parseFloat\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/number.parsefloat
es\-shims polyfill of \f[CR]Number.parseFloat\f[R]
.UE \c
.IP \(bu 2
\f[CR]Number\f[R]
.IP \(bu 2
\f[CR]parseFloat()\f[R]
