.\" Automatically generated by Pandoc 3.4
.\"
.TH "Object.fromEntries" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.fromEntries \- Object.fromEntries()
.SH SYNOPSIS
The \f[B]\f[CB]Object.fromEntries()\f[B]\f[R] static method transforms a
list of key\-value pairs into an object.
.SH SYNTAX
.IP
.EX
Object.fromEntries(iterable)
.EE
.SS Parameters
.TP
\f[B]iterable\f[R]
An iterable, such as an \f[CR]Array\f[R] or \f[CR]Map\f[R], containing a
list of objects.
Each object should have two properties:
.RS
.TP
\f[B]0\f[R]
A string or symbol representing the property key.
.TP
\f[B]1\f[R]
The property value.
.PP
Typically, this object is implemented as a two\-element array, with the
first element being the property key and the second element being the
property value.
.RE
.SS Return value
A new object whose properties are given by the entries of the iterable.
.SH DESCRIPTION
The \f[CR]Object.fromEntries()\f[R] method takes a list of key\-value
pairs and returns a new object whose properties are given by those
entries.
The \f[CR]iterable\f[R] argument is expected to be an object that
implements an \f[CR][Symbol.iterator]()\f[R] method.
The method returns an iterator object that produces two\-element
array\-like objects.
The first element is a value that will be used as a property key, and
the second element is the value to associate with that property key.
.PP
\f[CR]Object.fromEntries()\f[R] performs the reverse of
\f[CR]Object.entries()\f[R], except that \f[CR]Object.entries()\f[R]
only returns string\-keyed properties, while
\f[CR]Object.fromEntries()\f[R] can also create symbol\-keyed
properties.
.RS
.PP
\f[B]Note:\f[R] Unlike \f[CR]Array.from()\f[R],
\f[CR]Object.fromEntries()\f[R] does not use the value of
\f[CR]this\f[R], so calling it on another constructor does not create
objects of that type.
.RE
.SH EXAMPLES
.SS Converting a Map to an Object
With \f[CR]Object.fromEntries\f[R], you can convert from \f[CR]Map\f[R]
to \f[CR]Object\f[R]:
.IP
.EX
\f[B]const\f[R] map = \f[B]new\f[R] Map([
  [\[dq]foo\[dq], \[dq]bar\[dq]],
  [\[dq]baz\[dq], 42],
]);
\f[B]const\f[R] obj = Object.fromEntries(map);
console.log(obj); \f[I]// { foo: \[dq]bar\[dq], baz: 42 }\f[R]
.EE
.SS Converting an Array to an Object
With \f[CR]Object.fromEntries\f[R], you can convert from
\f[CR]Array\f[R] to \f[CR]Object\f[R]:
.IP
.EX
\f[B]const\f[R] arr = [
  [\[dq]0\[dq], \[dq]a\[dq]],
  [\[dq]1\[dq], \[dq]b\[dq]],
  [\[dq]2\[dq], \[dq]c\[dq]],
];
\f[B]const\f[R] obj = Object.fromEntries(arr);
console.log(obj); \f[I]// { 0: \[dq]a\[dq], 1: \[dq]b\[dq], 2: \[dq]c\[dq] }\f[R]
.EE
.SS Object transformations
With \f[CR]Object.fromEntries\f[R], its reverse method
\f[CR]Object.entries()\f[R], and array manipulation methods, you are
able to transform objects like this:
.IP
.EX
\f[B]const\f[R] object1 = { a: 1, b: 2, c: 3 };

\f[B]const\f[R] object2 = Object.fromEntries(
  Object.entries(object1).map(([key, val]) \f[B]=>\f[R] [key, val * 2]),
);

console.log(object2);
\f[I]// { a: 2, b: 4, c: 6 }\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-object
Polyfill of \f[CR]Object.fromEntries\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Object.entries()\f[R]
.IP \[bu] 2
\f[CR]Object.keys()\f[R]
.IP \[bu] 2
\f[CR]Object.values()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.propertyIsEnumerable()\f[R]
.IP \[bu] 2
\f[CR]Object.create()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.entries()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.keys()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.values()\f[R]
