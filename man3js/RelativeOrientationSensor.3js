.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "RelativeOrientationSensor" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RelativeOrientationSensor \- RelativeOrientationSensor
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]RelativeOrientationSensor\f[B]\f[R] interface of the
Sensor APIs describes the device\[cq]s physical orientation without
regard to the Earth\[cq]s reference coordinate system.
.PP
To use this sensor, the user must grant permission to the
\f[CR]\[aq]accelerometer\[aq]\f[R], and \f[CR]\[aq]gyroscope\[aq]\f[R]
device sensors through the Permissions API.
In addition, this feature may be blocked by a Permissions Policy set on
your server.
.SH CONSTRUCTOR
.TP
\f[B]RelativeOrientationSensor()\f[R]
Creates a new \f[CR]RelativeOrientationSensor\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]No specific properties; inherits properties from its ancestors
\f[CI]OrientationSensor\f[I] and \f[CI]Sensor\f[I].\f[R]
.SH INSTANCE METHODS
\f[I]No specific methods; inherits methods from its ancestors
\f[CI]OrientationSensor\f[I] and \f[CI]Sensor\f[I].\f[R]
.SH EVENTS
\f[I]No specific events; inherits events from its ancestor,
\f[CI]Sensor\f[I].\f[R]
.SH EXAMPLES
.SS Basic Example
The following example, which is loosely based on \c
.UR https://intel.github.io/generic-sensor-demos/orientation-phone/
Intel\[cq]s Orientation Phone demo
.UE \c
, instantiates an \f[CR]RelativeOrientationSensor\f[R] with a frequency
of 60 times a second.
.RS
.PP
\f[B]Note:\f[R] The Intel demo this is based on uses the
\f[CR]AbsoluteOrientationSensor\f[R].
On each reading it uses \f[CR]OrientationSensor.quaternion\f[R] to
rotate a visual model of a phone.
.RE
.IP
.EX
\f[B]const\f[R] options = { frequency: 60, referenceFrame: \[dq]device\[dq] };
\f[B]const\f[R] sensor = \f[B]new\f[R] RelativeOrientationSensor(options);

sensor.addEventListener(\[dq]reading\[dq], () \f[B]=>\f[R] {
  \f[I]// model is a Three.js object instantiated elsewhere.\f[R]
  model.quaternion.fromArray(sensor.quaternion).inverse();
});
sensor.addEventListener(\[dq]error\[dq], (error) \f[B]=>\f[R] {
  \f[B]if\f[R] (event.error.name === \[dq]NotReadableError\[dq]) {
    console.log(\[dq]Sensor is not available.\[dq]);
  }
});
sensor.start();
.EE
.SS Permissions Example
Using orientation sensors requires requesting permissions for multiple
device sensors.
Because the \f[CR]Permissions\f[R] interface uses promises, a good way
to request permissions is to use \f[CR]Promise.all\f[R].
.IP
.EX
\f[B]const\f[R] sensor = \f[B]new\f[R] RelativeOrientationSensor();
Promise.all([
  navigator.permissions.query({ name: \[dq]accelerometer\[dq] }),
  navigator.permissions.query({ name: \[dq]gyroscope\[dq] }),
]).then((results) \f[B]=>\f[R] {
  \f[B]if\f[R] (results.every((result) \f[B]=>\f[R] result.state === \[dq]granted\[dq])) {
    sensor.start();
    \f[I]// ...\f[R]
  } \f[B]else\f[R] {
    console.log(\[dq]No permissions to use RelativeOrientationSensor.\[dq]);
  }
});
.EE
