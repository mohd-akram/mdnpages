.\" Automatically generated by Pandoc 3.4
.\"
.TH "VideoEncoder.encode" "JS" "October 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
VideoEncoder.encode \- VideoEncoder: encode() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]encode()\f[B]\f[R] method of the \f[CR]VideoEncoder\f[R]
interface asynchronously encodes a \f[CR]VideoFrame\f[R].
Encoded data (\f[CR]EncodedVideoChunk\f[R]) or an error will eventually
be returned via the callbacks provided to the \f[CR]VideoEncoder\f[R]
constructor.
.SH SYNTAX
.IP
.EX
encode(frame)
encode(frame, options)
.EE
.SS Parameters
.TP
\f[B]frame\f[R]
A \f[CR]VideoFrame\f[R] object.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing the following members:
.RS
.TP
\f[B]keyFrame\f[R] \f[I](optional)\f[R]
A \f[CR]boolean\f[R], defaulting to \f[CR]false\f[R] giving the user
agent flexibility to decide if this frame should be encoded as a key
frame.
If \f[CR]true\f[R] this indicates that the given frame must be encoded
as a key frame.
.TP
\f[B]vp9\f[R] \f[I](optional)\f[R]
Encode options for the VP9 codec.
.RS
.TP
\f[B]quantizer\f[R]
Frame quantizer value 0 to 63.
Only effective if \f[CR]VideoEncoder\f[R] was configured with
\f[CR]quantizer\f[R] bitrate mode.
.RE
.TP
\f[B]av1\f[R] \f[I](optional)\f[R]
Encode options for the AV1 codec.
.RS
.TP
\f[B]quantizer\f[R]
Frame quantizer value 0 to 63.
Only effective if \f[CR]VideoEncoder\f[R] was configured with
\f[CR]quantizer\f[R] bitrate mode.
.RE
.TP
\f[B]avc\f[R] \f[I](optional)\f[R]
Encode options for the AVC (H.264) codec.
.RS
.TP
\f[B]quantizer\f[R]
Frame quantizer value 0 to 51.
Only effective if \f[CR]VideoEncoder\f[R] was configured with
\f[CR]quantizer\f[R] bitrate mode.
.RE
.TP
\f[B]hevc\f[R] \f[I](optional)\f[R]
Encode options for the HEVC (H.265) codec.
.RS
.TP
\f[B]quantizer\f[R]
Frame quantizer value 0 to 51.
Only effective if \f[CR]VideoEncoder\f[R] was configured with
\f[CR]quantizer\f[R] bitrate mode.
.RE
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]state\f[R] is not \f[CR]\[dq]configured\[dq]\f[R].
.TP
\f[B]DataError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]chunk\f[R] cannot be decoded due to relying on other
frames for decoding.
.SH EXAMPLES
In the following example \f[CR]encode\f[R] is passed a
\f[CR]VideoFrame\f[R], and the options parameter indicating that this
frame should be considered a keyframe.
.IP
.EX
encoder.encode(frame, { keyFrame: \f[B]true\f[R] });
.EE
.PP
Setting per\-frame QP value for encoding individual frames.
.IP
.EX
\f[B]const\f[R] encoder = \f[B]new\f[R] VideoEncoder(init);
\f[B]const\f[R] encoderConfig = {
  codec: \[dq]vp09.00.10.08\[dq],
  width: 800,
  height: 600,
  bitrateMode: \[dq]quantizer\[dq],
  framerate: 30,
  latencyMode: \[dq]realtime\[dq],
};
encoder.configure(encoderConfig);

\f[B]const\f[R] encodeOptions = { keyFrame: \f[B]false\f[R] };
\f[B]const\f[R] qp = calculateQp(codec, frame);

\f[B]if\f[R] (codec.includes(\[dq]vp09\[dq])) {
  encodeOptions.vp9 = { quantizer: qp };
} \f[B]else\f[R] \f[B]if\f[R] (codec.includes(\[dq]av01\[dq])) {
  encodeOptions.av1 = { quantizer: qp };
} \f[B]else\f[R] \f[B]if\f[R] (codec.includes(\[dq]avc\[dq])) {
  encodeOptions.avc = { quantizer: qp };
} \f[B]else\f[R] \f[B]if\f[R] (codec.includes(\[dq]hvc1\[dq] || codec.includes(\[dq]hev1\[dq]))) {
  encodeOptions.hevc = { quantizer: qp };
}

encoder.encode(frame, encodeOptions);
.EE
