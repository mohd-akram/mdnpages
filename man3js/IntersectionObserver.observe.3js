.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "IntersectionObserver.observe" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IntersectionObserver.observe \- IntersectionObserver: observe() method
.SH SYNOPSIS
The \f[CR]IntersectionObserver\f[R] method
\f[B]\f[CB]observe()\f[B]\f[R] adds an element to the set of target
elements being watched by the \f[CR]IntersectionObserver\f[R].
One observer has one set of thresholds and one root, but can watch
multiple target elements for visibility changes in keeping with those.
.PP
To stop observing the element, call
\f[CR]IntersectionObserver.unobserve()\f[R].
.PP
When the visibility of the specified element crosses over one of the
observer\[cq]s visibility thresholds (as listed in
\f[CR]IntersectionObserver.thresholds\f[R]), the observer\[cq]s callback
is executed with an array of \f[CR]IntersectionObserverEntry\f[R]
objects representing the intersection changes which occurred.
Note that this design allows multiple elements\[cq] intersection changes
to be processed by a single call to the callback.
.RS
.PP
\f[B]Note:\f[R] the observer callback will always fire the first render
cycle after \f[CR]observe()\f[R] is called, even if the observed element
has not yet moved with respect to the viewport.
This means that, for example, an element that is outside the viewport
when \f[CR]observe()\f[R] is called on it will result in the callback
being immediately called with at least one entry with
\f[CR]intersecting\f[R] set to \f[CR]false\f[R].
An element inside the viewport will result in the callback being
immediately called with at least one entry with \f[CR]intersecting\f[R]
set to \f[CR]true\f[R].
.RE
.SH SYNTAX
.IP
.EX
observe(targetElement)
.EE
.SS Parameters
.TP
\f[B]targetElement\f[R]
An \f[CR]element\f[R] whose visibility within the root is to be
monitored.
This element must be a descendant of the root element (or contained
within the current document, if the root is the document\[cq]s
viewport).
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.IP
.EX
\f[I]// Register IntersectionObserver\f[R]
\f[B]const\f[R] io = \f[B]new\f[R] IntersectionObserver((entries) \f[B]=>\f[R] {
  entries.forEach((entry) \f[B]=>\f[R] {
    \f[B]if\f[R] (entry.intersectionRatio > 0) {
      \f[I]// Add \[aq]active\[aq] class if observation target is inside viewport\f[R]
      entry.target.classList.add(\[dq]active\[dq]);
    } \f[B]else\f[R] {
      \f[I]// Remove \[aq]active\[aq] class otherwise\f[R]
      entry.target.classList.remove(\[dq]active\[dq]);
    }
  });
});

\f[I]// Declares what to observe, and observes its properties.\f[R]
\f[B]const\f[R] boxElList = document.querySelectorAll(\[dq].box\[dq]);
boxElList.forEach((el) \f[B]=>\f[R] {
  io.observe(el);
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]IntersectionObserver.unobserve()\f[R]
