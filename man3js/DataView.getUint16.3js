.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "DataView.getUint16" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataView.getUint16 \- DataView.prototype.getUint16()
.SH SYNOPSIS
The \f[B]\f[CB]getUint16()\f[B]\f[R] method of \f[CR]DataView\f[R]
instances reads 2 bytes starting at the specified byte offset of this
\f[CR]DataView\f[R] and interprets them as a 16\-bit unsigned integer.
There is no alignment constraint; multi\-byte values may be fetched from
any offset within bounds.
.IP
.EX
\f[I]// Create an ArrayBuffer with a size in bytes\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(16);

\f[B]const\f[R] view = \f[B]new\f[R] DataView(buffer);
view.setUint16(1, 65535); \f[I]// Max unsigned 16\-bit integer\f[R]

console.log(view.getUint16(1));
\f[I]// Expected output: 65535\f[R]
.EE
.SH SYNTAX
.IP
.EX
getUint16(byteOffset)
getUint16(byteOffset, littleEndian)
.EE
.SS Parameters
.TP
\f[B]byteOffset\f[R]
The offset, in bytes, from the start of the view to read the data from.
.TP
\f[B]littleEndian\f[R] \f[I](optional)\f[R]
Indicates whether the data is stored in little\- or big\-endian format.
If \f[CR]false\f[R] or \f[CR]undefined\f[R], a big\-endian value is
read.
.SS Return value
An integer from 0 to 65535, inclusive.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if the \f[CR]byteOffset\f[R] is set such that it would read
beyond the end of the view.
.SH EXAMPLES
.SS Using getUint16()
.IP
.EX
\f[B]const\f[R] { buffer } = \f[B]new\f[R] Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
\f[B]const\f[R] dataview = \f[B]new\f[R] DataView(buffer);
console.log(dataview.getUint16(1)); \f[I]// 258\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]DataView\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]Uint16Array\f[R]
