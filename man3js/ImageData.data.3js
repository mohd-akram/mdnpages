.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ImageData.data" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ImageData.data \- ImageData: data property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The readonly \f[B]\f[CB]ImageData.data\f[B]\f[R] property returns a
\f[CR]Uint8ClampedArray\f[R] that contains the \f[CR]ImageData\f[R]
object\[cq]s pixel data.
Data is stored as a one\-dimensional array in the RGBA order, with
integer values between \f[CR]0\f[R] and \f[CR]255\f[R] (inclusive).
.SH VALUE
A \f[CR]Uint8ClampedArray\f[R].
.SH EXAMPLES
.SS Getting an ImageData object\[cq]s pixel data
This example creates an \f[CR]ImageData\f[R] object that is 100 pixels
wide and 100 pixels tall, making 10,000 pixels in all.
The \f[CR]data\f[R] array stores four values for each pixel, making 4 x
10,000, or 40,000 values in all.
.IP
.EX
\f[B]let\f[R] imageData = \f[B]new\f[R] ImageData(100, 100);
console.log(imageData.data); \f[I]// Uint8ClampedArray[40000]\f[R]
console.log(imageData.data.length); \f[I]// 40000\f[R]
.EE
.SS Filling a blank ImageData object
This example creates and fills a new \f[CR]ImageData\f[R] object with
colorful pixels.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
Since each pixel consists of four values within the \f[CR]data\f[R]
array, the \f[CR]for\f[R] loop iterates by multiples of four.
The values associated with each pixel are R (red), G (green), B (blue),
and A (alpha), in that order.
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
\f[B]const\f[R] imageData = ctx.createImageData(100, 100);

\f[I]// Fill the array with RGBA values\f[R]
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < imageData.data.length; i += 4) {
  \f[I]// Percentage in the x direction, times 255\f[R]
  \f[B]let\f[R] x = ((i % 400) / 400) * 255;
  \f[I]// Percentage in the y direction, times 255\f[R]
  \f[B]let\f[R] y = (Math.ceil(i / 400) / 100) * 255;

  \f[I]// Modify pixel data\f[R]
  imageData.data[i + 0] = x; \f[I]// R value\f[R]
  imageData.data[i + 1] = y; \f[I]// G value\f[R]
  imageData.data[i + 2] = 255 \- x; \f[I]// B value\f[R]
  imageData.data[i + 3] = 255; \f[I]// A value\f[R]
}

\f[I]// Draw image data to the canvas\f[R]
ctx.putImageData(imageData, 20, 20);
.EE
.SS Result
.SS More examples
For more examples using \f[CR]ImageData.data\f[R], see Pixel
manipulation with canvas,
\f[CR]CanvasRenderingContext2D.createImageData()\f[R], and
\f[CR]CanvasRenderingContext2D.putImageData()\f[R].
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ImageData.height\f[R]
.IP \[bu] 2
\f[CR]ImageData.width\f[R]
.IP \[bu] 2
\f[CR]ImageData\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.createImageData()\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.putImageData()\f[R]
.IP \[bu] 2
Pixel manipulation with canvas
