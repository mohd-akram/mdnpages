.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "DOMPointReadOnly.matrixTransform" "JS" "February 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMPointReadOnly.matrixTransform \- DOMPointReadOnly: matrixTransform()
method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]matrixTransform()\f[B]\f[R] method of the
\f[CR]DOMPointReadOnly\f[R] interface applies a matrix transform
specified as an object to the DOMPointReadOnly object, creating and
returning a new \f[CR]DOMPointReadOnly\f[R] object.
Neither the matrix nor the point are altered.
.PP
If the matrix passed as a parameter is 2D (the \f[CR]is2D\f[R] is
\f[CR]true\f[R]) then this is a 2D transformation and the point\[cq]s
\f[CR]z\f[R] coordinate will be \f[CR]0\f[R] and point\[cq]s
\f[CR]w\f[R] perspective will be \f[CR]1\f[R].
Otherwise this is a 3D transformation.
.PP
You can also create a new \f[CR]DOMPoint\f[R] with a point and matrix
with the \f[CR]DOMMatrixReadOnly.transformPoint()\f[R] method.
.SH SYNTAX
.IP
.EX
matrixTransform()
matrixTransform(matrix)
.EE
.SS Parameters
.TP
\f[B]matrix\f[R]
A \f[CR]DOMMatrix\f[R] or \f[CR]DOMMatrixReadOnly\f[R] object.
.SS Return value
A new \f[CR]DOMPoint\f[R] object.
.SH EXAMPLES
.SS 2D transform
In this example, we apply a 2D matrix transform to a
\f[CR]DOMPointReadOnly\f[R], creating a new \f[CR]DOMPoint\f[R]:
.IP
.EX
\f[B]const\f[R] originalPoint = \f[B]new\f[R] DOMPointReadOnly(10, 20); \f[I]// DOMPointReadOnly {x: 10, y: 20, z: 0, w: 1}\f[R]
\f[B]const\f[R] matrix = \f[B]new\f[R] DOMMatrix([1, 0, 0, 1, 15, 30]);

\f[B]const\f[R] transformedPoint = originalPoint.matrixTransform(matrix); \f[I]// DOMPoint {x: 25, y: 50, z: 0, w: 1}\f[R]

console.log(transformedPoint.toJSON()); \f[I]// output: {x: 25, y: 50, z: 0, w: 1}\f[R]
.EE
.SS 3D transform
In this example, we apply a 3D matrix transform to a
\f[CR]DOMPointReadOnly\f[R]:
.IP
.EX
\f[B]const\f[R] point = \f[B]new\f[R] DOMPointReadOnly(5, 10); \f[I]// DOMPointReadOnly {x: 5, y: 10, z: 0, w: 1}\f[R]
\f[B]const\f[R] matrix3D = \f[B]new\f[R] DOMMatrix().translate(0, 0, 10);
\f[B]const\f[R] transformedPoint = point.matrixTransform(matrix3D); \f[I]// DOMPoint {x: 5, y: 10, z: 10, w: 1}\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]DOMPoint\f[R]
.IP \[bu] 2
\f[CR]DOMMatrix\f[R]
.IP \[bu] 2
\f[CR]DOMMatrixReadOnly.transformPoint()\f[R]
.IP \[bu] 2
CSS \f[CR]matrix()\f[R] and \f[CR]matrix3d()\f[R] functions
