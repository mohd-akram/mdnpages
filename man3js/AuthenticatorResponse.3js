.\" Automatically generated by Pandoc 3.4
.\"
.TH "AuthenticatorResponse" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AuthenticatorResponse \- AuthenticatorResponse
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]AuthenticatorResponse\f[B]\f[R] interface of the Web
Authentication API is the base interface for interfaces that provide a
cryptographic root of trust for a key pair.
The child interfaces include information from the browser such as the
challenge origin and either may be returned from
\f[CR]PublicKeyCredential.response\f[R].
.SH INTERFACES BASED ON AUTHENTICATORRESPONSE
Below is a list of interfaces based on the AuthenticatorResponse
interface.
.IP \[bu] 2
\f[CR]AuthenticatorAssertionResponse\f[R]
.IP \[bu] 2
\f[CR]AuthenticatorAttestationResponse\f[R]
.SH INSTANCE PROPERTIES
.TP
\f[B]AuthenticatorResponse.clientDataJSON\f[R]
A JSON string in an \f[CR]ArrayBuffer\f[R], representing the client data
that was passed to \f[CR]CredentialsContainer.create()\f[R] or
\f[CR]CredentialsContainer.get()\f[R].
.SH INSTANCE METHODS
None.
.SH EXAMPLES
.SS Getting an AuthenticatorAssertionResponse
.IP
.EX
\f[B]const\f[R] options = {
  challenge: \f[B]new\f[R] Uint8Array([
    \f[I]/* bytes sent from the server */\f[R]
  ]),
};

navigator.credentials
  .get({ publicKey: options })
  .then((credentialInfoAssertion) \f[B]=>\f[R] {
    \f[B]const\f[R] assertionResponse = credentialInfoAssertion.response;
    \f[I]// send assertion response back to the server\f[R]
    \f[I]// to proceed with the control of the credential\f[R]
  })
  .catch((err) \f[B]=>\f[R] console.error(err));
.EE
.SS Getting an AuthenticatorAttestationResponse
.IP
.EX
\f[B]const\f[R] publicKey = {
  challenge: \f[B]new\f[R] Uint8Array([
    21, 31, 105 \f[I]/* 29 more random bytes generated by the server */\f[R],
  ]),
  rp: {
    name: \[dq]Example CORP\[dq],
    id: \[dq]login.example.com\[dq],
  },
  user: {
    id: \f[B]new\f[R] Uint8Array(16),
    name: \[dq]jdoe\[at]example.com\[dq],
    displayName: \[dq]John Doe\[dq],
  },
  pubKeyCredParams: [
    {
      type: \[dq]public\-key\[dq],
      alg: \-7,
    },
  ],
};

navigator.credentials
  .create({ publicKey })
  .then((newCredentialInfo) \f[B]=>\f[R] {
    \f[B]const\f[R] attestationResponse = newCredentialInfo.response;
  })
  .catch((err) \f[B]=>\f[R] console.error(err));
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]AuthenticatorAttestationResponse\f[R]
.IP \[bu] 2
\f[CR]AuthenticatorAssertionResponse\f[R]
.IP \[bu] 2
\f[CR]PublicKeyCredential.response\f[R]
