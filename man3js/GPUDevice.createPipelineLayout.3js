.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATEPIPELINELAYOUT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createPipelineLayout \- GPUDevice: createPipelineLayout()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createPipelineLayout()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPUPipelineLayout\f[R]
that defines the \f[CR]GPUBindGroupLayout\f[R]s used by a pipeline.
\f[CR]GPUBindGroup\f[R]s used with the pipeline during command encoding
must have compatible \f[CR]GPUBindGroupLayout\f[R]s.
.SH SYNTAX
.IP
.EX
createPipelineLayout(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]bindGroupLayouts\f[R]
An array of \f[CR]GPUBindGroupLayout\f[R] objects (which are in turn
created via calls to \f[CR]GPUDevice.createBindGroupLayout()\f[R]).
Each one corresponds to a \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#attribute-binding
\f[CR]\(atgroup\f[R]
.UE \c
\ attribute in the shader code contained in the
\f[CR]GPUShaderModule\f[R] used in a related pipeline.
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.RE
.SS Return value
A \f[CR]GPUPipelineLayout\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createPipelineLayout()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUPipelineLayout\f[R] object is returned:
.IP \(bu 2
The \f[CR]GPUBindGroupLayout\f[R] objects in \f[CR]bindGroupLayouts\f[R]
are valid.
.IP \(bu 2
The number of \f[CR]GPUBindGroupLayout\f[R] objects in
\f[CR]bindGroupLayouts\f[R] is less than the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]maxBindGroups\f[R] limit.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Multiple bind group layouts, bind group, and pipeline layout
The following snippet:
.IP \(bu 2
Creates a \f[CR]GPUBindGroupLayout\f[R] that describes a binding with a
buffer, a texture, and a sampler.
.IP \(bu 2
Creates a \f[CR]GPUPipelineLayout\f[R] based on the
\f[CR]GPUBindGroupLayout\f[R].
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] bindGroupLayout = device.createBindGroupLayout({
  entries: [
    {
      binding: 0,
      visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,
      buffer: {},
    },
    {
      binding: 1,
      visibility: GPUShaderStage.FRAGMENT,
      texture: {},
    },
    {
      binding: 2,
      visibility: GPUShaderStage.FRAGMENT,
      sampler: {},
    },
  ],
});

\f[B]const\f[R] pipelineLayout = device.createPipelineLayout({
  bindGroupLayouts: [bindGroupLayout],
});

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
