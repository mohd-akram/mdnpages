.\" Automatically generated by Pandoc 3.4
.\"
.TH "WebGL2RenderingContext.copyBufferSubData" "JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGL2RenderingContext.copyBufferSubData \- WebGL2RenderingContext:
copyBufferSubData() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGL2RenderingContext.copyBufferSubData()\f[B]\f[R]
method of the WebGL 2 API copies part of the data of a buffer to another
buffer.
.SH SYNTAX
.IP
.EX
copyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size)
.EE
.SS Parameters
.TP
\f[B]readTarget\f[R], \f[B]writeTarget\f[R]
A \f[CR]GLenum\f[R] specifying the binding point (target) from whose
data store should be read or written.
Possible values:
.RS
.IP \[bu] 2
\f[CR]gl.ARRAY_BUFFER\f[R]: Buffer containing vertex attributes, such as
vertex coordinates, texture coordinate data, or vertex color data.
.IP \[bu] 2
\f[CR]gl.ELEMENT_ARRAY_BUFFER\f[R]: Buffer used for element indices.
.IP \[bu] 2
\f[CR]gl.COPY_READ_BUFFER\f[R]: Buffer for copying from one buffer
object to another (provided specifically for copy operations).
.IP \[bu] 2
\f[CR]gl.COPY_WRITE_BUFFER\f[R]: Buffer for copying from one buffer
object to another (provided specifically for copy operations).
.IP \[bu] 2
\f[CR]gl.TRANSFORM_FEEDBACK_BUFFER\f[R]: Buffer for transform feedback
operations.
.IP \[bu] 2
\f[CR]gl.UNIFORM_BUFFER\f[R]: Buffer used for storing uniform blocks.
.IP \[bu] 2
\f[CR]gl.PIXEL_PACK_BUFFER\f[R]: Buffer used for pixel transfer
operations.
.IP \[bu] 2
\f[CR]gl.PIXEL_UNPACK_BUFFER\f[R]: Buffer used for pixel transfer
operations.
.RE
.TP
\f[B]readOffset\f[R], \f[B]writeOffset\f[R]
A \f[CR]GLintptr\f[R] specifying the byte offset from which to start
reading from or writing to the buffer.
.TP
\f[B]size\f[R]
A \f[CR]GLsizei\f[R] in bytes specifying the size of the data to be
copied from \f[CR]readTarget\f[R] to \f[CR]writeTarget\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] srcBuffer = gl.createBuffer();
\f[B]const\f[R] dstBuffer = gl.createBuffer();

\f[B]const\f[R] data = \f[B]new\f[R] Float32Array(vertices);
\f[B]const\f[R] length = vertices.length * 4;

gl.bindBuffer(gl.ARRAY_BUFFER, srcBuffer);
gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
gl.bindBuffer(gl.COPY_READ_BUFFER, srcBuffer);

gl.bindBuffer(gl.ARRAY_BUFFER, dstBuffer);
gl.bufferData(gl.ARRAY_BUFFER, \f[B]new\f[R] Float32Array(length), gl.STATIC_DRAW);

gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.ARRAY_BUFFER, 0, 0, length);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.bufferData()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.bufferSubData()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getBufferParameter()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.getBufferSubData()\f[R]
