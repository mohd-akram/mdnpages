.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HTMLELEMENT.DRAG_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLElement.drag_event \- HTMLElement: drag event
.SH SYNOPSIS
The \f[CR]drag\f[R] event is fired every few hundred milliseconds as an
element or text selection is being dragged by the user.
.PP
This event is cancelable and may bubble up to the \f[CR]Document\f[R]
and \f[CR]Window\f[R] objects.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqdrag\(dq, (event) => { })

ondrag = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]DragEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]In addition to the properties listed below, properties from the
parent interface, \f[CI]Event\f[I], are available.\f[R]
.TP
\f[B]DragEvent.dataTransfer\f[R] \f[I](read\-only)\f[R]
The data that is transferred during a drag and drop interaction.
.SH EXAMPLES
.SS Drag and drop example
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\(dqdropzone\(dq>
  <\f[B]div\f[R] id=\(dqdraggable\(dq draggable=\(dqtrue\(dq>This div is draggable</\f[B]div\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] class=\(dqdropzone\(dq id=\(dqdrop\-target\(dq></\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
body {
  \f[I]/* Prevent the user selecting text in the example */\f[R]
  \f[B]user\-select\f[R]: none;
}

draggable {
  \f[B]text\-align\f[R]: center;
  \f[B]background\f[R]: white;
}

\&.dropzone {
  \f[B]width\f[R]: 200px;
  \f[B]height\f[R]: 20px;
  \f[B]background\f[R]: blueviolet;
  \f[B]margin\f[R]: 10px;
  \f[B]padding\f[R]: 10px;
}

\&.dropzone.dragover {
  \f[B]background\-color\f[R]: purple;
}

\&.dragging {
  \f[B]opacity\f[R]: 0.5;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]let\f[R] dragged;

\f[I]/* events fired on the draggable target */\f[R]
\f[B]const\f[R] source = document.getElementById(\(dqdraggable\(dq);
source.addEventListener(\(dqdrag\(dq, (event) \f[B]=>\f[R] {
  console.log(\(dqdragging\(dq);
});

source.addEventListener(\(dqdragstart\(dq, (event) \f[B]=>\f[R] {
  \f[I]// store a ref. on the dragged elem\f[R]
  dragged = event.target;
  \f[I]// make it half transparent\f[R]
  event.target.classList.add(\(dqdragging\(dq);
});

source.addEventListener(\(dqdragend\(dq, (event) \f[B]=>\f[R] {
  \f[I]// reset the transparency\f[R]
  event.target.classList.remove(\(dqdragging\(dq);
});

\f[I]/* events fired on the drop targets */\f[R]
\f[B]const\f[R] target = document.getElementById(\(dqdrop\-target\(dq);
target.addEventListener(
  \(dqdragover\(dq,
  (event) \f[B]=>\f[R] {
    \f[I]// prevent default to allow drop\f[R]
    event.preventDefault();
  },
  \f[B]false\f[R],
);

target.addEventListener(\(dqdragenter\(dq, (event) \f[B]=>\f[R] {
  \f[I]// highlight potential drop target when the draggable element enters it\f[R]
  \f[B]if\f[R] (event.target.classList.contains(\(dqdropzone\(dq)) {
    event.target.classList.add(\(dqdragover\(dq);
  }
});

target.addEventListener(\(dqdragleave\(dq, (event) \f[B]=>\f[R] {
  \f[I]// reset background of potential drop target when the draggable element leaves it\f[R]
  \f[B]if\f[R] (event.target.classList.contains(\(dqdropzone\(dq)) {
    event.target.classList.remove(\(dqdragover\(dq);
  }
});

target.addEventListener(\(dqdrop\(dq, (event) \f[B]=>\f[R] {
  \f[I]// prevent default action (open as link for some elements)\f[R]
  event.preventDefault();
  \f[I]// move dragged element to the selected drop target\f[R]
  \f[B]if\f[R] (event.target.classList.contains(\(dqdropzone\(dq)) {
    event.target.classList.remove(\(dqdragover\(dq);
    event.target.appendChild(dragged);
  }
});
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
\f[CR]dragstart\f[R]
.IP \(bu 2
\f[CR]dragend\f[R]
.IP \(bu 2
\f[CR]dragover\f[R]
.IP \(bu 2
\f[CR]dragenter\f[R]
.IP \(bu 2
\f[CR]dragleave\f[R]
.IP \(bu 2
\f[CR]drop\f[R]
