.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MESSAGEPORT.POSTMESSAGE" "3JS" "July 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MessagePort.postMessage \- MessagePort: postMessage() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]postMessage()\f[B]\f[R] method of the
\f[CR]MessagePort\f[R] interface sends a message from the port, and
optionally, transfers ownership of objects to other browsing contexts.
.SH SYNTAX
.IP
.EX
postMessage(message)
postMessage(message, transfer)
postMessage(message, options)
.EE
.SS Parameters
.TP
\f[B]message\f[R]
The message you want to send through the channel.
This can be of any basic data type.
Multiple data items can be sent as an array.
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
An optional array of transferable objects to transfer ownership of.
The ownership of these objects is given to the destination side and they
are no longer usable on the sending side.
These transferable objects should be attached to the message; otherwise
they would be moved but not actually accessible on the receiving end.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An optional object containing the following properties:
.RS
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
Has the same meaning as the \f[CR]transfer\f[R] parameter.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
In the following code block, you can see a new channel being created
using the \f[CR]MessageChannel()\f[R] constructor.
When the IFrame has loaded, we pass \f[CR]MessageChannel.port2\f[R] to
the IFrame using \f[CR]window.postMessage\f[R] along with a message.
The iframe receives the message, and sends a message back on the
\f[CR]MessageChannel\f[R] using \f[CR]postMessage()\f[R].
The \f[CR]handleMessage\f[R] handler then responds to a message being
sent back from the iframe using \f[CR]onmessage\f[R], putting it into a
paragraph \(em \f[CR]MessageChannel.port1\f[R] is listened to, to check
when the message arrives.
.IP
.EX
\f[B]const\f[R] channel = \f[B]new\f[R] MessageChannel();
\f[B]const\f[R] para = document.querySelector(\(dqp\(dq);

\f[B]const\f[R] ifr = document.querySelector(\(dqiframe\(dq);
\f[B]const\f[R] otherWindow = ifr.contentWindow;

ifr.addEventListener(\(dqload\(dq, iframeLoaded, \f[B]false\f[R]);

\f[B]function\f[R] iframeLoaded() {
  otherWindow.postMessage(\(dqTransferring message port\(dq, \(dq*\(dq, [channel.port2]);
}

channel.port1.onmessage = handleMessage;
\f[B]function\f[R] handleMessage(e) {
  para.innerHTML = e.data;
}

\f[I]// in the iframe\&...\f[R]

window.addEventListener(\(dqmessage\(dq, (event) \f[B]=>\f[R] {
  \f[B]const\f[R] messagePort = event.ports?.[0];
  messagePort.postMessage(\(dqHello from the iframe!\(dq);
});
.EE
.PP
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/channel-messaging-basic
channel messaging basic demo
.UE \c
\ on GitHub (\c
.UR https://mdn.github.io/dom-examples/channel-messaging-basic/
run it live too
.UE \c
).
.SH SEE ALSO
.IP \(bu 2
Using channel messaging
