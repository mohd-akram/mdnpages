.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "WEBGL_debug_renderer_info" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WEBGL_debug_renderer_info \- WEBGL_debug_renderer_info extension
.SH SYNOPSIS
The \f[B]\f[CB]WEBGL_debug_renderer_info\f[B]\f[R] extension is part of
the WebGL API and exposes two constants with information about the
graphics driver for debugging purposes.
.PP
Depending on the privacy settings of the browser, this extension might
only be available to privileged contexts.
Generally, the graphics driver information should only be used in edge
cases to optimize your WebGL content or to debug GPU problems.
The \f[CR]WebGLRenderingContext.getParameter()\f[R] method can help you
to detect which features are supported and the
\f[CR]failIfMajorPerformanceCaveat\f[R] context attribute lets you
control if a context should be returned at all, if the performance would
be dramatically slow.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] Depending on the privacy settings of the browser, this
extension might only be available to privileged contexts or not work at
all.
In Firefox, if \f[CR]privacy.resistFingerprinting\f[R] is set to
\f[CR]true\f[R], this extensions is disabled.
.PP
This extension is available to both, WebGL1 and WebGL2 contexts.
.RE
.SH CONSTANTS
.TP
ext.UNMASKED_VENDOR_WEBGL
Vendor string of the graphics driver.
.TP
ext.UNMASKED_RENDERER_WEBGL
Renderer string of the graphics driver.
.SH EXAMPLES
With the help of this extension, privileged contexts are able to
retrieve debugging information about the user\[cq]s graphic driver:
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] gl = canvas.getContext(\[dq]webgl\[dq]);

\f[B]const\f[R] debugInfo = gl.getExtension(\[dq]WEBGL_debug_renderer_info\[dq]);
\f[B]const\f[R] vendor = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);
\f[B]const\f[R] renderer = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);

console.log(vendor);
console.log(renderer);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
