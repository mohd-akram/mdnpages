.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Number.toPrecision" "JS" "August 9, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.toPrecision \- Number.prototype.toPrecision()
.SH SYNOPSIS
The \f[B]\f[CB]toPrecision()\f[B]\f[R] method of \f[CR]Number\f[R]
values returns a string representing this number to the specified
precision.
.SH SYNTAX
.IP
.EX
toPrecision()
toPrecision(precision)
.EE
.SS Parameters
.TP
\f[B]precision\f[R] \f[I](optional)\f[R]
An integer specifying the number of significant digits.
.SS Return value
A string representing a \f[CR]Number\f[R] object in fixed\-point or
exponential notation rounded to \f[CR]precision\f[R] significant digits.
See the discussion of rounding in the description of the
\f[CR]Number.prototype.toFixed()\f[R] method, which also applies to
\f[CR]toPrecision()\f[R].
.PP
If the \f[CR]precision\f[R] argument is omitted, behaves as
\f[CR]Number.prototype.toString()\f[R].
If the \f[CR]precision\f[R] argument is a non\-integer value, it is
rounded to the nearest integer.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]precision\f[R] is not between \f[CR]1\f[R] and
\f[CR]100\f[R] (inclusive).
.SH EXAMPLES
.SS Using \f[CR]toPrecision\f[R]
.IP
.EX
\f[B]let\f[R] num = 5.123456;

console.log(num.toPrecision()); \f[I]// \[aq]5.123456\[aq]\f[R]
console.log(num.toPrecision(5)); \f[I]// \[aq]5.1235\[aq]\f[R]
console.log(num.toPrecision(2)); \f[I]// \[aq]5.1\[aq]\f[R]
console.log(num.toPrecision(1)); \f[I]// \[aq]5\[aq]\f[R]

num = 0.000123;

console.log(num.toPrecision()); \f[I]// \[aq]0.000123\[aq]\f[R]
console.log(num.toPrecision(5)); \f[I]// \[aq]0.00012300\[aq]\f[R]
console.log(num.toPrecision(2)); \f[I]// \[aq]0.00012\[aq]\f[R]
console.log(num.toPrecision(1)); \f[I]// \[aq]0.0001\[aq]\f[R]

\f[I]// note that exponential notation might be returned in some circumstances\f[R]
console.log((1234.5).toPrecision(2)); \f[I]// \[aq]1.2e+3\[aq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Number.prototype.toFixed()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toExponential()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toString()\f[R]
