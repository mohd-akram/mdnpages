.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "NUMBER.TOPRECISION" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.toPrecision \- Number.prototype.toPrecision()
.SH SYNOPSIS
The \f[B]\f[CB]toPrecision()\f[B]\f[R] method of \f[CR]Number\f[R]
values returns a string representing this number to the specified number
of significant digits.
.IP
.EX
\f[B]function\f[R] precise(x) {
  \f[B]return\f[R] x.toPrecision(4);
}

console.log(precise(123.456));
\f[I]// Expected output: \(dq123.5\(dq\f[R]

console.log(precise(0.004));
\f[I]// Expected output: \(dq0.004000\(dq\f[R]

console.log(precise(1.23e5));
\f[I]// Expected output: \(dq1.230e+5\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
toPrecision()
toPrecision(precision)
.EE
.SS Parameters
.TP
\f[B]precision\f[R] \f[I](optional)\f[R]
An integer specifying the number of significant digits.
.SS Return value
A string representing the given number, using the given number of
significant digits.
Scientific notation is used if the exponent is greater than or equal to
\f[CR]precision\f[R] or less than \-6.
Has the same behavior as \f[CR]Number.prototype.toString()\f[R] if the
\f[CR]precision\f[R] argument is omitted.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]precision\f[R] is not between \f[CR]1\f[R] and
\f[CR]100\f[R] (inclusive).
.TP
\f[B]TypeError\f[R]
Thrown if this method is invoked on an object that is not a
\f[CR]Number\f[R].
.SH EXAMPLES
.SS Using \f[CR]toPrecision\f[R]
.IP
.EX
\f[I]// This number has exponent 0, so it will never use exponential notation\f[R]
\f[B]let\f[R] num = 5.123456;

console.log(num.toPrecision()); \f[I]// \(aq5.123456\(aq\f[R]
console.log(num.toPrecision(5)); \f[I]// \(aq5.1235\(aq\f[R]
console.log(num.toPrecision(2)); \f[I]// \(aq5.1\(aq\f[R]
console.log(num.toPrecision(1)); \f[I]// \(aq5\(aq\f[R]

\f[I]// This number has exponent \-4, so it will never use exponential notation\f[R]
num = 0.000123;

console.log(num.toPrecision()); \f[I]// \(aq0.000123\(aq\f[R]
console.log(num.toPrecision(5)); \f[I]// \(aq0.00012300\(aq\f[R]
console.log(num.toPrecision(2)); \f[I]// \(aq0.00012\(aq\f[R]
console.log(num.toPrecision(1)); \f[I]// \(aq0.0001\(aq\f[R]

\f[I]// This number has exponent 3, so it will use exponential notation if precision is less than 4\f[R]
num = 1234.5;
console.log(num.toPrecision(1)); \f[I]// \(aq1e+3\(aq\f[R]
console.log(num.toPrecision(2)); \f[I]// \(aq1.2e+3\(aq\f[R]
console.log(num.toPrecision(6)); \f[I]// \(aq1234.50\(aq\f[R]

\f[I]// This number has exponent \-7, so it will always use exponential notation\f[R]
num = 0.00000012345;
console.log(num.toPrecision(1)); \f[I]// \(aq1e\-7\(aq\f[R]
console.log(num.toPrecision(10)); \f[I]// \(aq1.234500000e\-7\(aq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Number.prototype.toFixed()\f[R]
.IP \(bu 2
\f[CR]Number.prototype.toExponential()\f[R]
.IP \(bu 2
\f[CR]Number.prototype.toString()\f[R]
