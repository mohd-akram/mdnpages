.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Array.join" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.join \- Array.prototype.join()
.SH SYNOPSIS
The \f[B]\f[CB]join()\f[B]\f[R] method of \f[CR]Array\f[R] instances
creates and returns a new string by concatenating all of the elements in
this array, separated by commas or a specified separator string.
If the array has only one item, then that item will be returned without
using the separator.
.IP
.EX
\f[B]const\f[R] elements = [\[dq]Fire\[dq], \[dq]Air\[dq], \[dq]Water\[dq]];

console.log(elements.join());
\f[I]// Expected output: \[dq]Fire,Air,Water\[dq]\f[R]

console.log(elements.join(\[dq]\[dq]));
\f[I]// Expected output: \[dq]FireAirWater\[dq]\f[R]

console.log(elements.join(\[dq]\-\[dq]));
\f[I]// Expected output: \[dq]Fire\-Air\-Water\[dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
join()
join(separator)
.EE
.SS Parameters
.TP
\f[B]separator\f[R] \f[I](optional)\f[R]
A string to separate each pair of adjacent elements of the array.
If omitted, the array elements are separated with a comma (\[lq],\[rq]).
.SS Return value
A string with all array elements joined.
If \f[CR]array.length\f[R] is \f[CR]0\f[R], the empty string is
returned.
.SH DESCRIPTION
The string conversions of all array elements are joined into one string.
If an element is \f[CR]undefined\f[R] or \f[CR]null\f[R], it is
converted to an empty string instead of the string
\f[CR]\[dq]null\[dq]\f[R] or \f[CR]\[dq]undefined\[dq]\f[R].
.PP
The \f[CR]join\f[R] method is accessed internally by
\f[CR]Array.prototype.toString()\f[R] with no arguments.
Overriding \f[CR]join\f[R] of an array instance will override its
\f[CR]toString\f[R] behavior as well.
.PP
\f[CR]Array.prototype.join\f[R] recursively converts each element,
including other arrays, to strings.
Because the string returned by \f[CR]Array.prototype.toString\f[R]
(which is the same as calling \f[CR]join()\f[R]) does not have
delimiters, nested arrays look like they are flattened.
You can only control the separator of the first level, while deeper
levels always use the default comma.
.IP
.EX
\f[B]const\f[R] matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];

console.log(matrix.join()); \f[I]// 1,2,3,4,5,6,7,8,9\f[R]
console.log(matrix.join(\[dq];\[dq])); \f[I]// 1,2,3;4,5,6;7,8,9\f[R]
.EE
.PP
When an array is cyclic (it contains an element that is itself),
browsers avoid infinite recursion by ignoring the cyclic reference.
.IP
.EX
\f[B]const\f[R] arr = [];
arr.push(1, [3, arr, 4], 2);
console.log(arr.join(\[dq];\[dq])); \f[I]// 1;3,,4;2\f[R]
.EE
.PP
When used on sparse arrays, the \f[CR]join()\f[R] method iterates empty
slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]join()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Joining an array four different ways
The following example creates an array, \f[CR]a\f[R], with three
elements, then joins the array four times: using the default separator,
then a comma and a space, then a plus and an empty string.
.IP
.EX
\f[B]const\f[R] a = [\[dq]Wind\[dq], \[dq]Water\[dq], \[dq]Fire\[dq]];
a.join(); \f[I]// \[aq]Wind,Water,Fire\[aq]\f[R]
a.join(\[dq], \[dq]); \f[I]// \[aq]Wind, Water, Fire\[aq]\f[R]
a.join(\[dq] + \[dq]); \f[I]// \[aq]Wind + Water + Fire\[aq]\f[R]
a.join(\[dq]\[dq]); \f[I]// \[aq]WindWaterFire\[aq]\f[R]
.EE
.SS Using join() on sparse arrays
\f[CR]join()\f[R] treats empty slots the same as \f[CR]undefined\f[R]
and produces an extra separator:
.IP
.EX
console.log([1, , 3].join()); \f[I]// \[aq]1,,3\[aq]\f[R]
console.log([1, \f[B]undefined\f[R], 3].join()); \f[I]// \[aq]1,,3\[aq]\f[R]
.EE
.SS Calling join() on non\-array objects
The \f[CR]join()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each property whose key is a
nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
  3: 5, \f[I]// ignored by join() since length is 3\f[R]
};
console.log(Array.prototype.join.call(arrayLike));
\f[I]// 2,3,4\f[R]
console.log(Array.prototype.join.call(arrayLike, \[dq].\[dq]));
\f[I]// 2.3.4\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.join\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.toString()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.join()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.split()\f[R]
