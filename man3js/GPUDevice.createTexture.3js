.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATETEXTURE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createTexture \- GPUDevice: createTexture() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createTexture()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPUTexture\f[R] in which
to store 1D, 2D, or 3D arrays of data, such as images, to use in GPU
rendering operations.
.SH SYNTAX
.IP
.EX
createTexture(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]dimension\f[R] \f[I](optional)\f[R]
An enumerated value indicating the dimension level of the texture.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dq1d\(dq\f[R]: The texture is one\-dimensional.
.IP \(bu 2
\f[CR]\(dq2d\(dq\f[R]: The texture is two\-dimensional or an array of
two\-dimensional layers.
.IP \(bu 2
\f[CR]\(dq3d\(dq\f[R]: The texture is three\-dimensional.
.PP
\f[CR]dimension\f[R] defaults to \f[CR]\(dq2d\(dq\f[R] if the value is
omitted.
.RE
.TP
\f[B]format\f[R]
An enumerated value specifying the format of the texture.
See the \c
.UR https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat
Texture formats
.UE \c
\ section of the specification for all the possible values.
.RS
.RS
.PP
\f[B]Note:\f[R]
.IP \(bu 2
The \f[CR]depth32float\-stencil8\f[R] feature needs to be enabled to
create \f[CR]depth32float\-stencil8\f[R]\-format \f[CR]GPUTexture\f[R]s.
.IP \(bu 2
The \f[CR]texture\-compression\-bc\f[R] feature needs to be enabled to
create two\-dimensional BC compressed \f[CR]GPUTexture\f[R]s:
\f[CR]bc1\-rgba\-unorm\f[R], \f[CR]bc1\-rgba\-unorm\-srgb\f[R],
\f[CR]bc2\-rgba\-unorm\f[R], \f[CR]bc2\-rgba\-unorm\-srgb\f[R],
\f[CR]bc3\-rgba\-unorm\f[R], \f[CR]bc3\-rgba\-unorm\-srgb\f[R],
\f[CR]bc4\-r\-unorm\f[R], \f[CR]bc4\-r\-snorm\f[R],
\f[CR]bc5\-rg\-unorm\f[R], \f[CR]bc5\-rg\-snorm\f[R],
\f[CR]bc6h\-rgb\-ufloat\f[R], \f[CR]bc6h\-rgb\-float\f[R],
\f[CR]bc7\-rgba\-unorm\f[R], and \f[CR]bc7\-rgba\-unorm\-srgb\f[R]
formats.
.IP \(bu 2
The \f[CR]texture\-compression\-astc\f[R] feature needs to be enabled to
create two\-dimensional ASTC compressed \f[CR]GPUTexture\f[R]s:
\f[CR]astc\-4x4\-unorm\f[R], \f[CR]astc\-4x4\-unorm\-srgb\f[R],
\f[CR]astc\-5x4\-unorm\f[R], \f[CR]astc\-5x4\-unorm\-srgb\f[R],
\f[CR]astc\-5x5\-unorm\f[R], \f[CR]astc\-5x5\-unorm\-srgb\f[R],
\f[CR]astc\-6x5\-unorm\f[R], \f[CR]astc\-6x5\-unorm\-srgb\f[R],
\f[CR]astc\-6x6\-unorm\f[R], \f[CR]astc\-6x6\-unorm\-srgb\f[R],
\f[CR]astc\-8x5\-unorm\f[R], \f[CR]astc\-8x5\-unorm\-srgb\f[R],
\f[CR]astc\-8x6\-unorm\f[R], \f[CR]astc\-8x6\-unorm\-srgb\f[R],
\f[CR]astc\-8x8\-unorm\f[R], \f[CR]astc\-8x8\-unorm\-srgb\f[R],
\f[CR]astc\-10x5\-unorm\f[R], \f[CR]astc\-10x5\-unorm\-srgb\f[R],
\f[CR]astc\-10x6\-unorm\f[R], \f[CR]astc\-10x6\-unorm\-srgb\f[R],
\f[CR]astc\-10x8\-unorm\f[R], \f[CR]astc\-10x8\-unorm\-srgb\f[R],
\f[CR]astc\-10x10\-unorm\f[R], \f[CR]astc\-10x10\-unorm\-srgb\f[R],
\f[CR]astc\-12x10\-unorm\f[R], \f[CR]astc\-12x10\-unorm\-srgb\f[R], and
\f[CR]astc\-12x12\-unorm\(ga\(gaastc\-12x12\-unorm\-srgb\f[R] formats.
.IP \(bu 2
The \f[CR]texture\-compression\-etc2\f[R] feature needs to be enabled to
create two\-dimensional ETC2 compressed \f[CR]GPUTexture\f[R]s:
\f[CR]etc2\-rgb8unorm\f[R], \f[CR]etc2\-rgb8unorm\-srgb\f[R],
\f[CR]etc2\-rgb8a1unorm\f[R], \f[CR]etc2\-rgb8a1unorm\-srgb\f[R],
\f[CR]etc2\-rgba8unorm\f[R], \f[CR]etc2\-rgba8unorm\-srgb\f[R],
\f[CR]eac\-r11unorm\f[R], \f[CR]eac\-r11snorm\f[R],
\f[CR]eac\-rg11unorm\f[R], and \f[CR]eac\-rg11snorm\f[R] formats.
.RE
.RE
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]mipLevelCount\f[R] \f[I](optional)\f[R]
A number specifying the number of mip levels the texture will contain.
If omitted, this defaults to 1.
.TP
\f[B]sampleCount\f[R] \f[I](optional)\f[R]
A number specifying the texture\(cqs sample count.
To be valid, the value must be 1 or 4.
If omitted, this defaults to 1.
A value higher than 1 indicates a multi\-sampled texture.
.TP
\f[B]size\f[R]
An object or array specifying the width, height, and depth/array layer
count of the texture.
The width value must always be specified, while the height and
depth/array layer count values are optional and will default to 1 if
omitted.
.RS
.PP
For example, you can pass an array like \f[CR][16, 16, 2]\f[R], or its
equivalent object
\f[CR]{ width: 16, height: 16, depthOrArrayLayers: 2 }\f[R].
.RE
.TP
\f[B]usage\f[R]
The bitwise flags representing the allowed usages for the
\f[CR]GPUTexture\f[R].
The possible values are in the \f[CR]GPUTexture.usage\f[R] value table.
.RS
.PP
Note that multiple possible usages can be specified by separating values
with bitwise OR, for example:
\f[CR]GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT\f[R].
.RS
.PP
\f[B]Note:\f[R]
.IP \(bu 2
The \f[CR]bgra8unorm\-storage\f[R] feature needs to be enabled to
specify \f[CR]STORAGE_BINDING\f[R] usage for a
\f[CR]bgra8unorm\f[R]\-\f[CR]format\f[R] \f[CR]GPUTexture\f[R].
.IP \(bu 2
The \f[CR]rg11b10ufloat\-renderable\f[R] feature needs to be enabled to
specify \f[CR]RENDER_ATTACHMENT\f[R] usage for a
\f[CR]rg11b10ufloat\f[R]\-\f[CR]format\f[R] \f[CR]GPUTexture\f[R], as
well as its blending and multisampling.
.RE
.RE
.TP
\f[B]viewFormats\f[R] \f[I](optional)\f[R]
An array of enumerated values specifying other \c
.UR https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat
texture formats
.UE \c
\ permitted when calling \f[CR]GPUTexture.createView()\f[R] on this
texture, in addition to the texture format specified in its
\f[CR]format\f[R] value.
.RE
.SS Return value
A \f[CR]GPUTexture\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createTexture()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUTexture\f[R] object is returned:
.IP \(bu 2
A valid \f[CR]usage\f[R] is specified.
.IP \(bu 2
The values specified in \f[CR]size\f[R] (width, height, or depth/array
layer count) are greater than 0.
.IP \(bu 2
\f[CR]mipLevelCount\f[R] is greater than 0.
.IP \(bu 2
\f[CR]sampleCount\f[R] is equal to 1 or 4.
.IP \(bu 2
If \f[CR]dimension\f[R] is set to \f[CR]\(dq1d\(dq\f[R]:
.RS 2
.IP \(bu 2
The \f[CR]size\f[R] width value is less than or equal to the
\f[CR]GPUDevice\f[R]\(cqs \f[CR]maxTextureDimension1D\f[R] limit.
.IP \(bu 2
The \f[CR]size\f[R] height and depth/array layer count values are equal
to 1.
.IP \(bu 2
The \f[CR]sampleCount\f[R] is equal to 1.
.IP \(bu 2
The \f[CR]format\f[R] is not equal to a \c
.UR https://gpuweb.github.io/gpuweb/#compressed-format
compressed format
.UE \c
\ or \c
.UR https://gpuweb.github.io/gpuweb/#depth-or-stencil-format
depth\-or\-stencil format
.UE \c
\&.
.RE
.IP \(bu 2
If \f[CR]dimension\f[R] is set to \f[CR]\(dq2d\(dq\f[R]:
.RS 2
.IP \(bu 2
The \f[CR]size\f[R] width and height values are less than or equal to
the \f[CR]GPUDevice\f[R]\(cqs \f[CR]maxTextureDimension2D\f[R] limit.
.IP \(bu 2
The \f[CR]size\f[R] depth/array layer count value is less than or equal
to the \f[CR]GPUDevice\f[R]\(cqs \f[CR]maxTextureArrayLayers\f[R] limit.
.RE
.IP \(bu 2
If \f[CR]dimension\f[R] is set to \f[CR]\(dq3d\(dq\f[R]:
.RS 2
.IP \(bu 2
The \f[CR]size\f[R] width, and height, and depth/array layer count
values are less than or equal to the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]maxTextureDimension3D\f[R] limit.
.IP \(bu 2
The \f[CR]sampleCount\f[R] value is equal to 1.
.IP \(bu 2
The \f[CR]format\f[R] is not equal to a \c
.UR https://gpuweb.github.io/gpuweb/#compressed-format
compressed format
.UE \c
\ or \c
.UR https://gpuweb.github.io/gpuweb/#depth-or-stencil-format
depth\-or\-stencil format
.UE \c
\&.
.RE
.IP \(bu 2
The \f[CR]size\f[R] width value is a multiple of the \c
.UR https://gpuweb.github.io/gpuweb/#texel-block-width
texel block width
.UE \c
\&.
.IP \(bu 2
The \f[CR]size\f[R] height value is a multiple of the \c
.UR https://gpuweb.github.io/gpuweb/#texel-block-height
texel block height
.UE \c
\&.
.IP \(bu 2
If \f[CR]sampleCount\f[R] is greater than 1:
.RS 2
.IP \(bu 2
\f[CR]mipLevelCount\f[R] is equal to 1.
.IP \(bu 2
The \f[CR]size\f[R] depth/array layer count value is equal to 1.
.IP \(bu 2
\f[CR]usage\f[R] includes the
\f[CR]GPUTextureUsage.RENDER_ATTACHMENT\f[R] flag.
.IP \(bu 2
\f[CR]usage\f[R] does not include the
\f[CR]GPUTextureUsage.STORAGE_BINDING\f[R] flag.
.IP \(bu 2
The specified format supports multi\-sampling.
.RE
.IP \(bu 2
The \f[CR]mipLevelCount\f[R] value is less than or equal to the \c
.UR https://gpuweb.github.io/gpuweb/#abstract-opdef-maximum-miplevel-count
maximum miplevel count
.UE \c
\&.
.IP \(bu 2
The formats specified in \f[CR]format\f[R] and \f[CR]viewFormats\f[R]
are \c
.UR https://gpuweb.github.io/gpuweb/#texture-view-format-compatible
compatible
.UE \c
\ with one another.
.IP \(bu 2
If \f[CR]usage\f[R] includes the
\f[CR]GPUTextureUsage.RENDER_ATTACHMENT\f[R] flag:
.RS 2
.IP \(bu 2
\f[CR]format\f[R] is a renderable format (meaning a color renderable
format, or a \c
.UR https://gpuweb.github.io/gpuweb/#depth-or-stencil-format
depth\-or\-stencil format
.UE \c
).
.IP \(bu 2
\f[CR]dimension\f[R] is set to \f[CR]\(dq2d\(dq\f[R].
.RE
.IP \(bu 2
If \f[CR]usage\f[R] includes the
\f[CR]GPUTextureUsage.STORAGE_BINDING\f[R] flag:
.RS 2
.IP \(bu 2
The specified \f[CR]format\f[R] includes the \f[CR]STORAGE_BINDING\f[R]
capability (see the \c
.UR https://gpuweb.github.io/gpuweb/#plain-color-formats
Plain color formats
.UE \c
\ table for reference).
.RE
.SH EXAMPLES
In the WebGPU samples \c
.UR https://webgpu.github.io/webgpu-samples/samples/texturedCube/
Textured Cube sample
.UE \c
, a texture to use on the faces of a cube is created by:
.IP \(bu 2
Loading the image into an \f[CR]HTMLImageElement\f[R] and creating an
image bitmap using \f[CR]createImageBitmap()\f[R].
.IP \(bu 2
Creating a new texture using \f[CR]createTexture()\f[R].
.IP \(bu 2
Copying the image bitmap into the texture using
\f[CR]GPUQueue.copyExternalImageToTexture()\f[R].
.IP
.EX
\f[I]// \&...\f[R]

\f[B]let\f[R] cubeTexture;

{
  \f[B]const\f[R] img = document.createElement(\(dqimg\(dq);
  img.src = \f[B]new\f[R] URL(
    \(dq../../../assets/img/Di\-3d.png\(dq,
    \f[B]import\f[R].meta.url,
  ).toString();
  \f[B]await\f[R] img.decode();
  \f[B]const\f[R] imageBitmap = \f[B]await\f[R] createImageBitmap(img);

  cubeTexture = device.createTexture({
    size: [imageBitmap.width, imageBitmap.height, 1],
    format: \(dqrgba8unorm\(dq,
    usage:
      GPUTextureUsage.TEXTURE_BINDING |
      GPUTextureUsage.COPY_DST |
      GPUTextureUsage.RENDER_ATTACHMENT,
  });
  device.queue.copyExternalImageToTexture(
    { source: imageBitmap },
    { texture: cubeTexture },
    [imageBitmap.width, imageBitmap.height],
  );
}

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
