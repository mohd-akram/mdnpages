.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "DataView.getInt32" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataView.getInt32 \- DataView.prototype.getInt32()
.SH SYNOPSIS
The \f[B]\f[CB]getInt32()\f[B]\f[R] method of \f[CR]DataView\f[R]
instances reads 4 bytes starting at the specified byte offset of this
\f[CR]DataView\f[R] and interprets them as a 32\-bit signed integer.
There is no alignment constraint; multi\-byte values may be fetched from
any offset within bounds.
.SH SYNTAX
.IP
.EX
getInt32(byteOffset)
getInt32(byteOffset, littleEndian)
.EE
.SS Parameters
.TP
\f[B]byteOffset\f[R]
The offset, in bytes, from the start of the view to read the data from.
.TP
\f[B]littleEndian\f[R] \f[I](optional)\f[R]
Indicates whether the data is stored in little\- or big\-endian format.
If \f[CR]false\f[R] or \f[CR]undefined\f[R], a big\-endian value is
read.
.SS Return value
An integer from \-2147483648 to 2147483647, inclusive.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if the \f[CR]byteOffset\f[R] is set such that it would read
beyond the end of the view.
.SH EXAMPLES
.SS Using getInt32()
.IP
.EX
\f[B]const\f[R] { buffer } = \f[B]new\f[R] Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
\f[B]const\f[R] dataview = \f[B]new\f[R] DataView(buffer);
console.log(dataview.getInt32(1)); \f[I]// 16909060\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]DataView\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]Int32Array\f[R]
