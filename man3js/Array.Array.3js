.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAY.ARRAY" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.Array \- Array() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Array()\f[B]\f[R] constructor creates \f[CR]Array\f[R]
objects.
.SH SYNTAX
.IP
.EX
new Array()
new Array(element1)
new Array(element1, element2)
new Array(element1, element2, /* \&..., */ elementN)
new Array(arrayLength)

Array()
Array(element1)
Array(element1, element2)
Array(element1, element2, /* \&..., */ elementN)
Array(arrayLength)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Array()\f[R] can be called with or without
\f[CR]new\f[R].
Both create a new \f[CR]Array\f[R] instance.
.RE
.SS Parameters
.TP
\f[B]element1\f[R], \&..., \f[B]elementN\f[R]
A JavaScript array is initialized with the given elements, except in the
case where a single argument is passed to the \f[CR]Array\f[R]
constructor and that argument is a number (see the
\f[CR]arrayLength\f[R] parameter below).
Note that this special case only applies to JavaScript arrays created
with the \f[CR]Array\f[R] constructor, not array literals created with
the square bracket syntax.
.TP
\f[B]arrayLength\f[R]
If the only argument passed to the \f[CR]Array\f[R] constructor is an
integer between 0 and 2\(ha32 \- 1 (inclusive), this returns a new
JavaScript array with its \f[CR]length\f[R] property set to that number
(\f[B]Note:\f[R] this implies an array of \f[CR]arrayLength\f[R] empty
slots, not slots with actual \f[CR]undefined\f[R] values \(em see sparse
arrays).
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if there\(cqs only one argument (\f[CR]arrayLength\f[R]) that is
a number, but its value is not an integer or not between 0 and 2\(ha32
\- 1 (inclusive).
.SH EXAMPLES
.SS Array literal notation
Arrays can be created using the literal notation:
.IP
.EX
\f[B]const\f[R] fruits = [\(dqApple\(dq, \(dqBanana\(dq];

console.log(fruits.length); \f[I]// 2\f[R]
console.log(fruits[0]); \f[I]// \(dqApple\(dq\f[R]
.EE
.SS Array constructor with a single parameter
Arrays can be created using a constructor with a single number
parameter.
An array is created with its \f[CR]length\f[R] property set to that
number, and the array elements are empty slots.
.IP
.EX
\f[B]const\f[R] arrayEmpty = \f[B]new\f[R] Array(2);

console.log(arrayEmpty.length); \f[I]// 2\f[R]
console.log(arrayEmpty[0]); \f[I]// undefined; actually, it is an empty slot\f[R]
console.log(0 \f[B]in\f[R] arrayEmpty); \f[I]// false\f[R]
console.log(1 \f[B]in\f[R] arrayEmpty); \f[I]// false\f[R]
.EE
.IP
.EX
\f[B]const\f[R] arrayOfOne = \f[B]new\f[R] Array(\(dq2\(dq); \f[I]// Not the number 2 but the string \(dq2\(dq\f[R]

console.log(arrayOfOne.length); \f[I]// 1\f[R]
console.log(arrayOfOne[0]); \f[I]// \(dq2\(dq\f[R]
.EE
.SS Array constructor with multiple parameters
If more than one argument is passed to the constructor, a new
\f[CR]Array\f[R] with the given elements is created.
.IP
.EX
\f[B]const\f[R] fruits = \f[B]new\f[R] Array(\(dqApple\(dq, \(dqBanana\(dq);

console.log(fruits.length); \f[I]// 2\f[R]
console.log(fruits[0]); \f[I]// \(dqApple\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array\f[R]
