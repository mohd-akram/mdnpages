'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Function.name" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Function.name \- Function: name
.SH SYNOPSIS
The \f[B]\f[CB]name\f[B]\f[R] data property of a \f[CR]Function\f[R]
instance indicates the function\[cq]s name as specified when it was
created, or it may be either \f[CR]anonymous\f[R] or
\f[CR]\[aq]\[aq]\f[R] (an empty string) for functions created
anonymously.
.IP
.EX
\f[B]const\f[R] func1 = \f[B]function\f[R] () {};

\f[B]const\f[R] object = {
  func2: \f[B]function\f[R] () {},
};

console.log(func1.name);
\f[I]// Expected output: \[dq]func1\[dq]\f[R]

console.log(object.func2.name);
\f[I]// Expected output: \[dq]func2\[dq]\f[R]
.EE
.SH VALUE
A string.
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
yes
T}
.TE
.RS
.PP
\f[B]Note:\f[R] In non\-standard, pre\-ES2015 implementations the
\f[CR]configurable\f[R] attribute was \f[CR]false\f[R] as well.
.RE
.SH DESCRIPTION
The function\[cq]s \f[CR]name\f[R] property can be used to identify the
function in debugging tools or error messages.
It has no semantic significance to the language itself.
.PP
The \f[CR]name\f[R] property is read\-only and cannot be changed by the
assignment operator:
.IP
.EX
\f[B]function\f[R] someFunction() {}

someFunction.name = \[dq]otherFunction\[dq];
console.log(someFunction.name); \f[I]// someFunction\f[R]
.EE
.PP
To change it, use \f[CR]Object.defineProperty()\f[R].
.PP
The \f[CR]name\f[R] property is typically inferred from how the function
is defined.
In the following sections, we will describe the various ways in which it
can be inferred.
.SS Function declaration
The \f[CR]name\f[R] property returns the name of a function declaration.
.IP
.EX
\f[B]function\f[R] doSomething() {}
doSomething.name; \f[I]// \[dq]doSomething\[dq]\f[R]
.EE
.SS Default\-exported function declaration
An \f[CR]export default\f[R] declaration exports the function as a
declaration instead of an expression.
If the declaration is anonymous, the name is
\f[CR]\[dq]default\[dq]\f[R].
.IP
.EX
\f[I]// \-\- someModule.js \-\-\f[R]
\f[B]export\f[R] \f[B]default\f[R] \f[B]function\f[R] () {}

\f[I]// \-\- main.js \-\-\f[R]
\f[B]import\f[R] someModule \f[B]from\f[R] \[dq]./someModule.js\[dq];

someModule.name; \f[I]// \[dq]default\[dq]\f[R]
.EE
.SS Function constructor
Functions created with the \f[CR]Function()\f[R] constructor have name
\[lq]anonymous\[rq].
.IP
.EX
\f[B]new\f[R] Function().name; \f[I]// \[dq]anonymous\[dq]\f[R]
.EE
.SS Function expression
If the function expression is named, that name is used as the
\f[CR]name\f[R] property.
.IP
.EX
\f[B]const\f[R] someFunction = \f[B]function\f[R] someFunctionName() {};
someFunction.name; \f[I]// \[dq]someFunctionName\[dq]\f[R]
.EE
.PP
Anonymous function expressions created using the keyword
\f[CR]function\f[R] or arrow functions would have \f[CR]\[dq]\[dq]\f[R]
(an empty string) as their name.
.IP
.EX
(\f[B]function\f[R] () {}).name; \f[I]// \[dq]\[dq]\f[R]
(() \f[B]=>\f[R] {}).name; \f[I]// \[dq]\[dq]\f[R]
.EE
.PP
However, such cases are rare \[em] usually, in order to refer to the
expression elsewhere, the function expression is attached to an
identifier when it\[cq]s created (such as in a variable declaration).
In such cases, the name can be inferred, as the following few
subsections demonstrate.
.PP
One practical case where the name cannot be inferred is a function
returned from another function:
.IP
.EX
\f[B]function\f[R] getFoo() {
  \f[B]return\f[R] () \f[B]=>\f[R] {};
}
getFoo().name; \f[I]// \[dq]\[dq]\f[R]
.EE
.SS Variable declaration and method
Variables and methods can infer the name of an anonymous function from
its syntactic position.
.IP
.EX
\f[B]const\f[R] f = \f[B]function\f[R] () {};
\f[B]const\f[R] object = {
  someMethod: \f[B]function\f[R] () {},
};

console.log(f.name); \f[I]// \[dq]f\[dq]\f[R]
console.log(object.someMethod.name); \f[I]// \[dq]someMethod\[dq]\f[R]
.EE
.PP
The same applies to assignment:
.IP
.EX
\f[B]let\f[R] f;
f = () \f[B]=>\f[R] {};
f.name; \f[I]// \[dq]f\[dq]\f[R]
.EE
.SS Initializer and default value
Functions in initializers (default values) of destructuring, default
parameters, class fields, etc., will inherit the name of the bound
identifier as their \f[CR]name\f[R].
.IP
.EX
\f[B]const\f[R] [f = () \f[B]=>\f[R] {}] = [];
f.name; \f[I]// \[dq]f\[dq]\f[R]

\f[B]const\f[R] { someMethod: m = () \f[B]=>\f[R] {} } = {};
m.name; \f[I]// \[dq]m\[dq]\f[R]

\f[B]function\f[R] foo(f = () \f[B]=>\f[R] {}) {
  console.log(f.name);
}
foo(); \f[I]// \[dq]f\[dq]\f[R]

\f[B]class\f[R] Foo {
  \f[B]static\f[R] someMethod = () \f[B]=>\f[R] {};
}
Foo.someMethod.name; \f[I]// someMethod\f[R]
.EE
.SS Shorthand method
.IP
.EX
\f[B]const\f[R] o = {
  foo() {},
};
o.foo.name; \f[I]// \[dq]foo\[dq];\f[R]
.EE
.SS Bound function
\f[CR]Function.prototype.bind()\f[R] produces a function whose name is
\[lq]bound\[rq] plus the function name.
.IP
.EX
\f[B]function\f[R] foo() {}
foo.bind({}).name; \f[I]// \[dq]bound foo\[dq]\f[R]
.EE
.SS Getter and setter
When using \f[CR]get\f[R] and \f[CR]set\f[R] accessor properties,
\[lq]get\[rq] or \[lq]set\[rq] will appear in the function name.
.IP
.EX
\f[B]const\f[R] o = {
  \f[B]get\f[R] foo() {},
  \f[B]set\f[R] foo(x) {},
};

\f[B]const\f[R] descriptor = Object.getOwnPropertyDescriptor(o, \[dq]foo\[dq]);
descriptor.get.name; \f[I]// \[dq]get foo\[dq]\f[R]
descriptor.set.name; \f[I]// \[dq]set foo\[dq];\f[R]
.EE
.SS Class
A class\[cq]s name follows the same algorithm as function declarations
and expressions.
.IP
.EX
\f[B]class\f[R] Foo {}
Foo.name; \f[I]// \[dq]Foo\[dq]\f[R]
.EE
.RS
.PP
\f[B]Warning:\f[R] JavaScript will set the function\[cq]s
\f[CR]name\f[R] property only if a function does not have an own
property called \f[CR]name\f[R].
However, classes\[cq] static members will be set as own properties of
the class constructor function, and thus prevent the built\-in
\f[CR]name\f[R] from being applied.
See an example below.
.RE
.SS Symbol as function name
If a \f[CR]Symbol\f[R] is used a function name and the symbol has a
description, the method\[cq]s name is the description in square
brackets.
.IP
.EX
\f[B]const\f[R] sym1 = Symbol(\[dq]foo\[dq]);
\f[B]const\f[R] sym2 = Symbol();

\f[B]const\f[R] o = {
  [sym1]() {},
  [sym2]() {},
};

o[sym1].name; \f[I]// \[dq][foo]\[dq]\f[R]
o[sym2].name; \f[I]// \[dq][]\[dq]\f[R]
.EE
.SS Private property
Private fields and private methods have the hash (\f[CR]#\f[R]) as part
of their names.
.IP
.EX
\f[B]class\f[R] Foo {
  #field = () \f[B]=>\f[R] {};
  #method() {}
  getNames() {
    console.log(\f[B]this\f[R].#field.name);
    console.log(\f[B]this\f[R].#method.name);
  }
}

\f[B]new\f[R] Foo().getNames();
\f[I]// \[dq]#field\[dq]\f[R]
\f[I]// \[dq]#method\[dq]\f[R]
.EE
.SH EXAMPLES
.SS Telling the constructor name of an object
You can use \f[CR]obj.constructor.name\f[R] to check the \[lq]class\[rq]
of an object.
.IP
.EX
\f[B]function\f[R] Foo() {} \f[I]// Or: class Foo {}\f[R]

\f[B]const\f[R] fooInstance = \f[B]new\f[R] Foo();
console.log(fooInstance.constructor.name); \f[I]// \[dq]Foo\[dq]\f[R]
.EE
.PP
However, because static members will become own properties of the class,
we can\[cq]t obtain the class name for virtually any class with a static
method property \f[CR]name()\f[R]:
.IP
.EX
\f[B]class\f[R] Foo {
  constructor() {}
  \f[B]static\f[R] name() {}
}
.EE
.PP
With a \f[CR]static name()\f[R] method \f[CR]Foo.name\f[R] no longer
holds the actual class name but a reference to the \f[CR]name()\f[R]
function object.
Trying to obtain the class of \f[CR]fooInstance\f[R] via
\f[CR]fooInstance.constructor.name\f[R] won\[cq]t give us the class name
at all, but instead a reference to the static class method.
Example:
.IP
.EX
\f[B]const\f[R] fooInstance = \f[B]new\f[R] Foo();
console.log(fooInstance.constructor.name); \f[I]// Æ’ name() {}\f[R]
.EE
.PP
Due to the existence of static fields, \f[CR]name\f[R] may not be a
function either.
.IP
.EX
\f[B]class\f[R] Foo {
  \f[B]static\f[R] name = 123;
}
console.log(\f[B]new\f[R] Foo().constructor.name); \f[I]// 123\f[R]
.EE
.PP
If a class has a static property called \f[CR]name\f[R], it will also
become \f[I]writable\f[R].
The built\-in definition in the absence of a custom static definition is
\f[I]read\-only\f[R]:
.IP
.EX
Foo.name = \[dq]Hello\[dq];
console.log(Foo.name); \f[I]// \[dq]Hello\[dq] if class Foo has a static \[dq]name\[dq] property, but \[dq]Foo\[dq] if not.\f[R]
.EE
.PP
Therefore you may not rely on the built\-in \f[CR]name\f[R] property to
always hold a class\[cq]s name.
.SS JavaScript compressors and minifiers
.RS
.PP
\f[B]Warning:\f[R] Be careful when using the \f[CR]name\f[R] property
with source\-code transformations, such as those carried out by
JavaScript compressors (minifiers) or obfuscators.
These tools are often used as part of a JavaScript build pipeline to
reduce the size of a program prior to deploying it to production.
Such transformations often change a function\[cq]s name at build time.
.RE
.PP
Source code such as:
.IP
.EX
\f[B]function\f[R] Foo() {}
\f[B]const\f[R] foo = \f[B]new\f[R] Foo();

\f[B]if\f[R] (foo.constructor.name === \[dq]Foo\[dq]) {
  console.log(\[dq]\[aq]foo\[aq] is an instance of \[aq]Foo\[aq]\[dq]);
} \f[B]else\f[R] {
  console.log(\[dq]Oops!\[dq]);
}
.EE
.PP
may be compressed to:
.IP
.EX
\f[B]function\f[R] a() {}
\f[B]const\f[R] b = \f[B]new\f[R] a();
\f[B]if\f[R] (b.constructor.name === \[dq]Foo\[dq]) {
  console.log(\[dq]\[aq]foo\[aq] is an instance of \[aq]Foo\[aq]\[dq]);
} \f[B]else\f[R] {
  console.log(\[dq]Oops!\[dq]);
}
.EE
.PP
In the uncompressed version, the program runs into the truthy branch and
logs \[lq]`foo' is an instance of `Foo'\[rq] \[em] whereas, in the
compressed version it behaves differently, and runs into the else
branch.
If you rely on the \f[CR]name\f[R] property, like in the example above,
make sure your build pipeline doesn\[cq]t change function names, or
don\[cq]t assume a function has a particular name.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-function
Polyfill for \f[CR]Function: name\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Function\f[R]
