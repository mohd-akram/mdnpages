.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Intl.NumberFormat.formatToParts" "JS" "August 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.NumberFormat.formatToParts \-
Intl.NumberFormat.prototype.formatToParts()
.SH SYNOPSIS
The \f[B]\f[CB]formatToParts()\f[B]\f[R] method of
\f[CR]Intl.NumberFormat\f[R] instances allows locale\-aware formatting
of strings produced by this \f[CR]Intl.NumberFormat\f[R] object.
.SH SYNTAX
.IP
.EX
formatToParts()
formatToParts(number)
.EE
.SS Parameters
.TP
\f[B]number\f[R] \f[I](optional)\f[R]
A \f[CR]Number\f[R] or \f[CR]BigInt\f[R] to format.
.SS Return value
An \f[CR]Array\f[R] of objects containing the formatted number in parts.
.SH DESCRIPTION
The \f[CR]formatToParts()\f[R] method is useful for custom formatting of
number strings.
It returns an \f[CR]Array\f[R] of objects containing the
locale\-specific tokens from which it possible to build custom strings
while preserving the locale\-specific parts.
The structure the \f[CR]formatToParts()\f[R] method returns, looks like
this:
.IP
.EX
[
  { type: \[dq]integer\[dq], value: \[dq]3\[dq] },
  { type: \[dq]group\[dq], value: \[dq].\[dq] },
  { type: \[dq]integer\[dq], value: \[dq]500\[dq] },
];
.EE
.PP
Possible types are the following:
.TP
\f[B]compact\f[R]
The exponent in \f[CR]\[dq]long\[dq]\f[R] or \f[CR]\[dq]short\[dq]\f[R]
form, depending on how \f[CR]compactDisplay\f[R] (which defaults to
\f[CR]short\f[R]) is specified when \f[CR]notation\f[R] is set to
\f[CR]compact\f[R].
.TP
\f[B]currency\f[R]
The currency string, such as the symbols \[lq]$\[rq] and \[lq]€\[rq] or
the name \[lq]Dollar\[rq], \[lq]Euro\[rq], depending on how
\f[CR]currencyDisplay\f[R] is specified.
.TP
\f[B]decimal\f[R]
The decimal separator string (\[lq].\[rq]).
.TP
\f[B]exponentInteger\f[R]
The exponent integer value, when \f[CR]notation\f[R] is set to
\f[CR]scientific\f[R] or \f[CR]engineering\f[R].
.TP
\f[B]exponentMinusSign\f[R]
The exponent minus sign string (\[lq]\-\[rq]).
.TP
\f[B]exponentSeparator\f[R]
The exponent separator, when \f[CR]notation\f[R] is set to
\f[CR]scientific\f[R] or \f[CR]engineering\f[R].
.TP
\f[B]fraction\f[R]
The fraction number.
.TP
\f[B]group\f[R]
The group separator string (\[lq],\[rq]).
.TP
\f[B]infinity\f[R]
The \f[CR]Infinity\f[R] string (\[lq]∞\[rq]).
.TP
\f[B]integer\f[R]
The integer number.
.TP
\f[B]literal\f[R]
Any literal strings or whitespace in the formatted number.
.TP
\f[B]minusSign\f[R]
The minus sign string (\[lq]\-\[rq]).
.TP
\f[B]nan\f[R]
The \f[CR]NaN\f[R] string (\[lq]NaN\[rq]).
.TP
\f[B]plusSign\f[R]
The plus sign string (\[lq]+\[rq]).
.TP
\f[B]percentSign\f[R]
The percent sign string (\[lq]%\[rq]).
.TP
\f[B]unit\f[R]
The unit string, such as the \[lq]l\[rq] or \[lq]litres\[rq], depending
on how \f[CR]unitDisplay\f[R] is specified.
.TP
\f[B]unknown\f[R]
The string for \f[CR]unknown\f[R] type results.
.SH EXAMPLES
.SS Comparing format and formatToParts
\f[CR]NumberFormat\f[R] outputs localized, opaque strings that cannot be
manipulated directly:
.IP
.EX
\f[B]const\f[R] number = 3500;

\f[B]const\f[R] formatter = \f[B]new\f[R] Intl.NumberFormat(\[dq]de\-DE\[dq], {
  style: \[dq]currency\[dq],
  currency: \[dq]EUR\[dq],
});

formatter.format(number);
\f[I]// \[dq]3.500,00 €\[dq]\f[R]
.EE
.PP
However, in many User Interfaces there is a desire to customize the
formatting of this string.
The \f[CR]formatToParts\f[R] method enables locale\-aware formatting of
strings produced by \f[CR]NumberFormat\f[R] formatters by providing you
the string in parts:
.IP
.EX
formatter.formatToParts(number);

\f[I]// return value:\f[R]
[
  { type: \[dq]integer\[dq], value: \[dq]3\[dq] },
  { type: \[dq]group\[dq], value: \[dq].\[dq] },
  { type: \[dq]integer\[dq], value: \[dq]500\[dq] },
  { type: \[dq]decimal\[dq], value: \[dq],\[dq] },
  { type: \[dq]fraction\[dq], value: \[dq]00\[dq] },
  { type: \[dq]literal\[dq], value: \[dq] \[dq] },
  { type: \[dq]currency\[dq], value: \[dq]€\[dq] },
];
.EE
.PP
Now the information is available separately and it can be formatted and
concatenated again in a customized way.
For example by using \f[CR]Array.prototype.map()\f[R], arrow functions,
a switch statement, template literals, and
\f[CR]Array.prototype.reduce()\f[R].
.IP
.EX
\f[B]const\f[R] numberString = formatter
  .formatToParts(number)
  .map(({ type, value }) \f[B]=>\f[R] {
    \f[B]switch\f[R] (type) {
      \f[B]case\f[R] \[dq]currency\[dq]:
        \f[B]return\f[R] \[ga]<strong>${value}</strong>\[ga];
      \f[B]default\f[R]:
        \f[B]return\f[R] value;
    }
  })
  .reduce((string, part) \f[B]=>\f[R] string + part);
.EE
.PP
This will make the currency bold, when using the
\f[CR]formatToParts()\f[R] method.
.IP
.EX
console.log(numberString);
\f[I]// \[dq]3.500,00 <strong>€</strong>\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Intl.NumberFormat\f[R]
.IP \[bu] 2
\f[CR]Intl.NumberFormat.prototype.format()\f[R]
.IP \[bu] 2
\f[CR]Intl.DateTimeFormat.prototype.formatToParts()\f[R]
