.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IIRFILTERNODE.IIRFILTERNODE" "3JS" "July 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IIRFilterNode.IIRFilterNode \- IIRFilterNode: IIRFilterNode()
constructor
.SH SYNOPSIS
The \f[B]\f[CB]IIRFilterNode()\f[B]\f[R] constructor of the Web Audio
API creates a new \f[CR]IIRFilterNode\f[R] object which an
\f[CR]AudioNode\f[R] processor which implements a general infinite
impulse response filter.
.SH SYNTAX
.IP
.EX
new IIRFilterNode(context, options)
.EE
.SS Parameters
.TP
\f[B]context\f[R]
A reference to an \f[CR]AudioContext\f[R].
.TP
\f[B]options\f[R]
Options are as follows:
.RS
.TP
\f[B]feedforward\f[R]
A sequence of feedforward coefficients.
.TP
\f[B]feedback\f[R]
A sequence of feedback coefficients.
.TP
\f[B]channelCount\f[R]
Represents an integer used to determine how many channels are used when
up\-mixing and down\-mixing connections to any inputs to the node.
(See \f[CR]AudioNode.channelCount\f[R] for more information.)
Its usage and precise definition depend on the value of
\f[CR]channelCountMode\f[R].
.TP
\f[B]channelCountMode\f[R]
Represents an enumerated value describing the way channels must be
matched between the node\(cqs inputs and outputs.
(See \f[CR]AudioNode.channelCountMode\f[R] for more information
including default values.)
.TP
\f[B]channelInterpretation\f[R]
Represents an enumerated value describing the meaning of the channels.
This interpretation will define how audio up\-mixing and down\-mixing
will happen.
The possible values are \f[CR]\(dqspeakers\(dq\f[R] or
\f[CR]\(dqdiscrete\(dq\f[R].
(See \f[CR]AudioNode.channelCountMode\f[R] for more information
including default values.)
.RE
.PP
Unlike other nodes in the Web Audio API, the options passed into the IIR
filter upon creation are not optional.
The filter needs these values to work and with the vast range of filters
available, there is no default.
.SS Return value
A new \f[CR]IIRFilterNode\f[R] object instance.
.SH EXAMPLES
.IP
.EX
\f[B]let\f[R] feedForward = [0.00020298, 0.0004059599, 0.00020298];
\f[B]let\f[R] feedBackward = [1.0126964558, \-1.9991880801, 0.9873035442];

\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[B]const\f[R] iirFilter = \f[B]new\f[R] IIRFilterNode(audioCtx, {
  feedforward: feedForward,
  feedback: feedBackward,
});
.EE
