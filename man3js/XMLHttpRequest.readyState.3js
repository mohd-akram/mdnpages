'\" t
.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "XMLHttpRequest.readyState" "JS" "April 4, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XMLHttpRequest.readyState \- XMLHttpRequest: readyState property
.SH SYNOPSIS
This feature is available in Web Workers, except for Service Workers.
.PP
The \f[B]XMLHttpRequest.readyState\f[R] property returns the state an
XMLHttpRequest client is in.
An XHR client exists in one of the following states:
.PP
.TS
tab(@);
lw(4.1n) lw(14.7n) lw(51.3n).
T{
Value
T}@T{
State
T}@T{
Description
T}
_
T{
\f[CR]0\f[R]
T}@T{
\f[CR]UNSENT\f[R]
T}@T{
Client has been created.
\f[CR]open()\f[R] not called yet.
T}
T{
\f[CR]1\f[R]
T}@T{
\f[CR]OPENED\f[R]
T}@T{
\f[CR]open()\f[R] has been called.
T}
T{
\f[CR]2\f[R]
T}@T{
\f[CR]HEADERS_RECEIVED\f[R]
T}@T{
\f[CR]send()\f[R] has been called, and headers and status are available.
T}
T{
\f[CR]3\f[R]
T}@T{
\f[CR]LOADING\f[R]
T}@T{
Downloading; \f[CR]responseText\f[R] holds partial data.
T}
T{
\f[CR]4\f[R]
T}@T{
\f[CR]DONE\f[R]
T}@T{
The operation is complete.
T}
.TE
.TP
UNSENT
The XMLHttpRequest client has been created, but the open() method
hasn\[cq]t been called yet.
.TP
OPENED
open() method has been invoked.
During this state, the request headers can be set using the
setRequestHeader() method and the send() method can be called which will
initiate the fetch.
.TP
HEADERS_RECEIVED
send() has been called, all redirects (if any) have been followed and
the response headers have been received.
.TP
LOADING
Response\[cq]s body is being received.
If \f[CR]responseType\f[R] is \[lq]text\[rq] or empty string,
\f[CR]responseText\f[R] will have the partial text response as it loads.
.TP
DONE
The fetch operation is complete.
This could mean that either the data transfer has been completed
successfully or failed.
.SH EXAMPLE
.IP
.EX
\f[B]const\f[R] xhr = \f[B]new\f[R] XMLHttpRequest();
console.log(\[dq]UNSENT\[dq], xhr.readyState); \f[I]// readyState will be 0\f[R]

xhr.open(\[dq]GET\[dq], \[dq]/api\[dq], \f[B]true\f[R]);
console.log(\[dq]OPENED\[dq], xhr.readyState); \f[I]// readyState will be 1\f[R]

xhr.onprogress = () \f[B]=>\f[R] {
  console.log(\[dq]LOADING\[dq], xhr.readyState); \f[I]// readyState will be 3\f[R]
};

xhr.onload = () \f[B]=>\f[R] {
  console.log(\[dq]DONE\[dq], xhr.readyState); \f[I]// readyState will be 4\f[R]
};

xhr.send(\f[B]null\f[R]);
.EE
