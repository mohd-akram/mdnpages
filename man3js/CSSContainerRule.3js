.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CSSContainerRule" "JS" "February 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSSContainerRule \- CSSContainerRule
.SH SYNOPSIS
The \f[B]\f[CB]CSSContainerRule\f[B]\f[R] interface represents a single
CSS \f[CR]\[at]container\f[R] rule.
.PP
An object of this type can be used to get the query conditions for the
\f[CR]\[at]container\f[R], along with the container name if one is
defined.
Note that the container name and query together define the
\[lq]condition text\[rq], which can be obtained using
\f[CR]CSSConditionRule.conditionText\f[R].
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its ancestors \f[CI]CSSConditionRule\f[I],
\f[CI]CSSGroupingRule\f[I], and \f[CI]CSSRule\f[I].\f[R]
.TP
\f[B]CSSContainerRule.containerName\f[R] \f[I](read\-only)\f[R]
Returns a string representing the name of an \f[CR]\[at]container\f[R],
or an empty string.
.TP
\f[B]CSSContainerRule.containerQuery\f[R] \f[I](read\-only)\f[R]
Returns a string representing the set of features or \[lq]container
conditions\[rq] that are evaluated to determine if the styles in the
associated \f[CR]\[at]container\f[R] are applied.
.SH INSTANCE METHODS
\f[I]No specific methods; inherits methods from its ancestors
\f[CI]CSSConditionRule\f[I], \f[CI]CSSGroupingRule\f[I], and
\f[CI]CSSRule\f[I].\f[R]
.SH EXAMPLES
.SS Unnamed container rule
The example below defines an unnamed \f[CR]\[at]container\f[R] rule, and
displays the properties of the associated \f[CR]CSSContainerRule\f[R].
The CSS is the same as in the \f[CR]\[at]container\f[R] example Setting
styles based on a container\[cq]s size.
.PP
The first part of the code simply creates a list for logging the
container rule properties, along with a JavaScript \f[CR]log()\f[R]
method to simplify adding the properties.
.IP
.EX
<\f[B]div\f[R] id=\[dq]log\[dq]>
  <\f[B]h2\f[R]>Log</\f[B]h2\f[R]>
  <\f[B]ul\f[R]></\f[B]ul\f[R]>
  <\f[B]hr\f[R] />
</\f[B]div\f[R]>
.EE
.IP
.EX
\f[I]// Store reference to log list\f[R]
\f[B]const\f[R] logList = document.querySelector(\[dq]#log ul\[dq]);
\f[I]// Function to log data from underlying source\f[R]
\f[B]function\f[R] log(result) {
  \f[B]const\f[R] listItem = document.createElement(\[dq]li\[dq]);
  listItem.textContent = result;
  logList.appendChild(listItem);
}
.EE
.PP
Then we define the HTML for a \f[CR]card\f[R] (\f[CR]<div>\f[R])
contained within a \f[CR]post\f[R].
.IP
.EX
<\f[B]div\f[R] class=\[dq]post\[dq]>
  <\f[B]div\f[R] class=\[dq]card\[dq]>
    <\f[B]h2\f[R]>Card title</\f[B]h2\f[R]>
    <\f[B]p\f[R]>Card content</\f[B]p\f[R]>
  </\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.PP
The CSS for the example is shown below.
As described in the corresponding \f[CR]\[at]container\f[R] example, the
CSS for the container element specifies the type of the container.
The \f[CR]\[at]container\f[R] then applies a new width, font\-size and
background color to the card if the width is less than 650px.
.IP
.EX
<\f[B]style\f[R] id=\[dq]examplestyles\[dq]>
  \f[I]/* A container context based on inline size */\f[R]
  .post {
    \f[B]container\-type\f[R]: inline\-size;
  }

  \f[I]/* Apply styles if the container is narrower than 650px */\f[R]
  \f[B]\[at]container\f[R] (\f[B]width\f[R] < 650px) {
    .card {
      \f[B]width\f[R]: 50%;
      \f[B]background\-color\f[R]: gray;
      \f[B]font\-size\f[R]: 1em;
    }
  }
</\f[B]style\f[R]>
.EE
.PP
The code below gets the \f[CR]HTMLStyleElement\f[R] associated with the
example using its id, and then uses its \f[CR]sheet\f[R] property to get
the \f[CR]StyleSheet\f[R].
From the \f[CR]StyleSheet\f[R] we get the set of \f[CR]cssRules\f[R]
added to the sheet.
Since we added the \f[CR]\[at]container\f[R] as the second rule above,
we can access the associated \f[CR]CSSContainerRule\f[R] using the
second entry, with index \[lq]1\[rq], in the \f[CR]cssRules\f[R].
Last of all, we log the \f[CR]containerName\f[R],
\f[CR]containerQuery\f[R] and \f[CR]conditionText\f[R] (inherited)
properties.
.IP
.EX
\f[B]const\f[R] exampleStylesheet = document.getElementById(\[dq]examplestyles\[dq]).sheet;
\f[B]const\f[R] exampleRules = exampleStylesheet.cssRules;
\f[B]const\f[R] containerRule = exampleRules[1]; \f[I]// a CSSContainerRule representing the container rule.\f[R]
log(\[ga]CSSContainerRule.containerName: \[dq]${containerRule.containerName}\[dq]\[ga]);
log(\[ga]CSSContainerRule.containerQuery: \[dq]${containerRule.containerQuery}\[dq]\[ga]);
log(\[ga]CSSContainerRule.conditionText: \[dq]${containerRule.conditionText}\[dq]\[ga]);
.EE
.RS
.PP
\f[B]Note:\f[R] The styles for this example are defined in an inline
HTML \f[CR]style\f[R] element with an id in order to make it easy for
the code to find the correct sheet.
You might also locate the correct sheets for each example from the
document by indexing against the length
(e.g.\ \f[CR]document.styleSheets[document.styleSheets.length\-1]\f[R]
but that makes working out correct sheet for each example more
complicated).
.RE
.PP
The example output is shown below.
The log section lists the \f[CR]containerName\f[R], which is an empty
string as no name has been defined.
The \f[CR]containerQuery\f[R] and \f[CR]conditionText\f[R] strings are
also logged, and have the same value because there is no name defined.
The card should change background and as the width of the page
transitions through 650px.
.SS Named container rule
The example below defines a named \f[CR]\[at]container\f[R] rule, and
displays the properties of the associated \f[CR]CSSContainerRule\f[R].
The CSS is very similar to that in the \f[CR]\[at]container\f[R] example
Creating named container contexts.
.PP
First we define the HTML for a \f[CR]card\f[R] (\f[CR]<div>\f[R])
contained within a \f[CR]post\f[R] (the example does not show the
logging code, as this is the same as in the previous example).
.IP
.EX
<\f[B]div\f[R] class=\[dq]post\[dq]>
  <\f[B]div\f[R] class=\[dq]card\[dq]>
    <\f[B]h2\f[R]>Card title</\f[B]h2\f[R]>
    <\f[B]p\f[R]>Card content</\f[B]p\f[R]>
  </\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.PP
As described in \f[CR]\[at]container\f[R], the CSS for the container
element specifies the type of the container, and may also specify a name
for the container.
The card has a default font size, which is overridden for the
\f[CR]\[at]container\f[R] named \f[CR]sidebar\f[R] if the minimum width
is greater than 700px.
.IP
.EX
<\f[B]style\f[R] id=\[dq]examplestyles\[dq]>
  .post {
    \f[B]container\-type\f[R]: inline\-size;
    \f[B]container\-name\f[R]: sidebar;
  }

  \f[I]/* Default heading styles for the card title */\f[R]
  .card h2 {
    \f[B]font\-size\f[R]: 1em;
  }

  \f[B]\[at]container\f[R] sidebar (\f[B]min\-width\f[R]: 700px) {
    .card {
      \f[B]font\-size\f[R]: 2em;
    }
  }
</\f[B]style\f[R]>
.EE
.PP
The code for getting the sheet and rules is almost identical to the
previous example.
The only difference is that in this example we have three CSS rules, so
to get the associated \f[CR]CSSContainerRule\f[R] we get the third entry
in the \f[CR]cssRules\f[R].
.IP
.EX
\f[B]const\f[R] exampleStylesheet = document.getElementById(\[dq]examplestyles\[dq]).sheet;
\f[B]const\f[R] exampleRules = exampleStylesheet.cssRules;
\f[B]const\f[R] containerRule = exampleRules[2]; \f[I]// a CSSContainerRule representing the container rule.\f[R]
log(\[ga]CSSContainerRule.containerName: \[dq]${containerRule.containerName}\[dq]\[ga]);
log(\[ga]CSSContainerRule.containerQuery: \[dq]${containerRule.containerQuery}\[dq]\[ga]);
log(\[ga]CSSContainerRule.conditionText: \[dq]${containerRule.conditionText}\[dq]\[ga]);
.EE
.PP
The example output is shown below.
The log section lists the \f[CR]containerName\f[R] and
\f[CR]containerQuery\f[R] strings.
The \f[CR]conditionText\f[R] is also logged, and shows the combination
of these two strings.
The title in the card section should double in size as the width of the
page goes over 700px.
.SH SEE ALSO
.IP \[bu] 2
CSS \f[CR]container\-name\f[R], \f[CR]container\-type\f[R], and
\f[CR]container\f[R] shorthand properties
.IP \[bu] 2
CSS containment module
.IP \[bu] 2
Container queries
.IP \[bu] 2
Using container size and style queries
