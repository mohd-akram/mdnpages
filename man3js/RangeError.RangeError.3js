.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "RangeError.RangeError" "JS" "March 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RangeError.RangeError \- RangeError() constructor
.SH SYNOPSIS
The \f[B]\f[CB]RangeError()\f[B]\f[R] constructor creates
\f[CR]RangeError\f[R] objects.
.SH SYNTAX
.IP
.EX
new RangeError()
new RangeError(message)
new RangeError(message, options)
new RangeError(message, fileName)
new RangeError(message, fileName, lineNumber)

RangeError()
RangeError(message)
RangeError(message, options)
RangeError(message, fileName)
RangeError(message, fileName, lineNumber)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]RangeError()\f[R] can be called with or without
\f[CR]new\f[R].
Both create a new \f[CR]RangeError\f[R] instance.
.RE
.SS Parameters
.TP
\f[B]message\f[R] \f[I](optional)\f[R]
Human\-readable description of the error.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that has the following properties:
.RS
.TP
\f[B]cause\f[R] \f[I](optional)\f[R]
A property indicating the specific cause of the error.
When catching and re\-throwing an error with a more\-specific or useful
error message, this property can be used to pass the original error.
.RE
.TP
\f[B]fileName\f[R] \f[I](optional)\f[R] \f[I](non\-standard)\f[R]
The name of the file containing the code that caused the exception
.TP
\f[B]lineNumber\f[R] \f[I](optional)\f[R] \f[I](non\-standard)\f[R]
The line number of the code that caused the exception
.SH EXAMPLES
.SS Using RangeError (for numeric values)
.IP
.EX
\f[B]function\f[R] check(n) {
  \f[B]if\f[R] (!(n >= \-500 && n <= 500)) {
    \f[B]throw\f[R] \f[B]new\f[R] RangeError(\[dq]The argument must be between \-500 and 500.\[dq]);
  }
}

\f[B]try\f[R] {
  check(2000);
} \f[B]catch\f[R] (error) {
  \f[B]if\f[R] (error \f[B]instanceof\f[R] RangeError) {
    \f[I]// Handle the error\f[R]
  }
}
.EE
.SS Using RangeError (for non\-numeric values)
.IP
.EX
\f[B]function\f[R] check(value) {
  \f[B]if\f[R] (![\[dq]apple\[dq], \[dq]banana\[dq], \[dq]carrot\[dq]].includes(value)) {
    \f[B]throw\f[R] \f[B]new\f[R] RangeError(
      \[aq]The argument must be an \[dq]apple\[dq], \[dq]banana\[dq], or \[dq]carrot\[dq].\[aq],
    );
  }
}

\f[B]try\f[R] {
  check(\[dq]cabbage\[dq]);
} \f[B]catch\f[R] (error) {
  \f[B]if\f[R] (error \f[B]instanceof\f[R] RangeError) {
    \f[I]// Handle the error\f[R]
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Error\f[R]
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toExponential()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toFixed()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toPrecision()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.normalize()\f[R]
