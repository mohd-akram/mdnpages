.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MEDIATRACKCONSTRAINTS.DISPLAYSURFACE" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaTrackConstraints.displaySurface \- MediaTrackConstraints:
displaySurface property
.SH SYNOPSIS
The \f[CR]MediaTrackConstraints\f[R] dictionary\(cqs
\f[B]\f[CB]displaySurface\f[B]\f[R] property is a
\f[CR]ConstrainDOMString\f[R] describing the preferred value for the
\f[CR]displaySurface\f[R] constrainable property.
.PP
This is set by the application to identify to the user agent the type of
display surface (\f[CR]window\f[R], \f[CR]browser\f[R], or
\f[CR]monitor\f[R]) preferred by the application.
It has no effect on what the user can choose to share, but may be used
to present the options in a different order.
.PP
If needed, you can determine whether or not this constraint is supported
by checking the value of
\f[CR]MediaTrackSupportedConstraints.displaySurface\f[R] as returned by
a call to \f[CR]MediaDevices.getSupportedConstraints()\f[R].
However, typically this is unnecessary since browsers will ignore any
constraints they\(cqre unfamiliar with.
.SH VALUE
A \f[CR]ConstrainDOMString\f[R] which specifies the type of display
surface preferred by the application.
This value \f[I]does not\f[R] add or remove display sources in the
browser\(cqs user interface, but may reorder them.
You can\(cqt use this property to limit the user to a subset of the
three display\-surface values \f[CR]window\f[R], \f[CR]browser\f[R], and
\f[CR]monitor\f[R] \(em but, as you will see below, you can see what was
chosen, and reject it.
.PP
See how constraints are defined.
.RS
.PP
\f[B]Note:\f[R] You cannot set
\f[CR]monitorTypeSurfaces: \(dqexclude\(dq\f[R] at the same time as
\f[CR]displaySurface: \(dqmonitor\(dq\f[R] as the two settings are
contradictory.
Trying to do so will result in the associated
\f[CR]getDisplayMedia()\f[R] call failing with a \f[CR]TypeError\f[R].
.RE
.SH USAGE NOTES
You can check the setting selected by the user agent after the display
media has been created by \f[CR]getDisplayMedia()\f[R] by calling
\f[CR]getSettings()\f[R] on the display media\(cqs video
\f[CR]MediaStreamTrack\f[R], then checking the value of the returned
\f[CR]MediaTrackSettings\f[R] object\(cqs \f[CR]displaySurface\f[R]
object.
.PP
For example, if your app prefers not to share a monitor \(em meaning
that there\(cqs possibly a non\-content backdrop being captured \(em it
can use code similar to this:
.IP
.EX
\f[B]let\f[R] mayHaveBackdropFlag = \f[B]false\f[R];
\f[B]let\f[R] displaySurface = displayStream
  .getVideoTracks()[0]
  .getSettings().displaySurface;

\f[B]if\f[R] (displaySurface === \(dqmonitor\(dq) {
  mayHaveBackdropFlag = \f[B]true\f[R];
}
.EE
.PP
Following this code, \f[CR]mayHaveBackdrop\f[R] is \f[CR]true\f[R] if
the display surface contained in the stream is of type
\f[CR]monitor\f[R].
Later code can use this flag to determine whether or not to perform
special processing, such as to remove or replace the backdrop, or to
\(lqcut\(rq the individual display areas out of the received frames of
video.
.SH EXAMPLES
Here are some example constraints objects for
\f[CR]getDisplayMedia()\f[R] that make use of the
\f[CR]displaySurface\f[R] property.
.IP
.EX
dsConstraints = { displaySurface: \(dqwindow\(dq }; \f[I]// \(aqbrowser\(aq and \(aqmonitor\(aq are also possible\f[R]
applyConstraints(dsConstraints);
\f[I]// The user still may choose to share the monitor or the browser,\f[R]
\f[I]// but we indicated that a window is preferred.\f[R]
.EE
.PP
In addition, see the Constraint exerciser example that demonstrates how
constraints are used.
.SH SEE ALSO
.IP \(bu 2
Screen Capture API
.IP \(bu 2
Using the Screen Capture API
.IP \(bu 2
Capabilities, constraints, and settings
.IP \(bu 2
\f[CR]MediaTrackConstraints\f[R]
.IP \(bu 2
\f[CR]MediaDevices.getSupportedConstraints()\f[R]
.IP \(bu 2
\f[CR]MediaTrackSupportedConstraints\f[R]
