.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "CSSRuleList" "JS" "June 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSSRuleList \- CSSRuleList
.SH SYNOPSIS
A \f[CR]CSSRuleList\f[R] represents an ordered collection of read\-only
\f[CR]CSSRule\f[R] objects.
.PP
While the \f[CR]CSSRuleList\f[R] object is read\-only, and cannot be
directly modified, it is considered a \f[CR]live\f[R] object, as the
content can change over time.
.PP
To edit the underlying rules returned by \f[CR]CSSRule\f[R] objects, use
\f[CR]CSSStyleSheet.insertRule()\f[R] and
\f[CR]CSSStyleSheet.deleteRule()\f[R], which are methods of
\f[CR]CSSStyleSheet\f[R].
.PP
This interface was an \c
.UR https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156
attempt to create an unmodifiable list
.UE \c
\ and only continues to be supported to not break code that\[cq]s
already using it.
Modern APIs represent list structures using types based on JavaScript
arrays, thus making many array methods available, and at the same time
imposing additional semantics on their usage (such as making their items
read\-only).
.PP
These historical reasons do not mean that you as a developer should
avoid \f[CR]CSSRuleList\f[R].
You don\[cq]t create \f[CR]CSSRuleList\f[R] objects yourself, but you
get them from APIs such as \f[CR]CSSStyleSheet.cssRules\f[R] and
\f[CR]CSSKeyframesRule.cssRules\f[R], and these APIs are not deprecated.
However, be careful of the semantic differences from a real array.
.SH INSTANCE PROPERTIES
.TP
\f[B]CSSRuleList.length\f[R] \f[I](read\-only)\f[R]
Returns an integer representing the number of \f[CR]CSSRule\f[R] objects
in the collection.
.SH INSTANCE METHODS
.TP
\f[B]CSSRuleList.item()\f[R]
Gets a single \f[CR]CSSRule\f[R].
.SH EXAMPLES
In the following example there is a stylesheet with three rules.
Using \f[CR]CSSStyleSheet.cssRules\f[R] returns a
\f[CR]CSSRuleList\f[R], which is printed to the console.
.PP
The number of rules in the list is printed to the console using
\f[CR]CSSRuleList.length\f[R].
The first \f[CR]CSSRule\f[R] can be returned by using \f[CR]0\f[R] as
the parameter for \f[CR]CSSRuleList.item\f[R], in the example this will
return the rules set for the \f[CR]body\f[R] selector.
.SS CSS
.IP
.EX
body {
  \f[B]font\-family\f[R]:
    system\-ui,
    \-apple\-system,
    sans\-serif;
  \f[B]margin\f[R]: 2em;
}

\&.container {
  \f[B]display\f[R]: grid;
  \f[B]grid\-template\-columns\f[R]: repeat(auto\-fill, 200px);
}

\&.container > * {
  \f[B]background\-color\f[R]: #3740ff;
  \f[B]color\f[R]: #fff;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]let\f[R] myRules = document.styleSheets[0].cssRules;
console.log(myRules);
console.log(myRules.length);
console.log(myRules[0]);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]CSSRule\f[R]
