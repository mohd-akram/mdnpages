.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HTMLELEMENT.DATASET" "3JS" "April 23, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLElement.dataset \- HTMLElement: dataset property
.SH SYNOPSIS
The \f[B]\f[CB]dataset\f[B]\f[R] read\-only property of the
\f[CR]HTMLElement\f[R] interface provides read/write access to custom
data attributes (\f[CR]data\-*\f[R]) on elements.
It exposes a map of strings (\f[CR]DOMStringMap\f[R]) with an entry for
each \f[CR]data\-*\f[R] attribute.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]dataset\f[R] property itself can be read, but
not directly written.
Instead, all writes must be to the individual properties within the
\f[CR]dataset\f[R], which in turn represent the data attributes.
.RE
.PP
An HTML \f[CR]data\-*\f[R] attribute and its corresponding DOM
\f[CR]dataset.property\f[R] modify their shared name according to where
they are read or written:
.TP
In HTML
The attribute name begins with \f[CR]data\-\f[R].
It can contain only letters, numbers, dashes (\f[CR]\-\f[R]), periods
(\f[CR].\f[R]), colons (\f[CR]:\f[R]), and underscores (\f[CR]_\f[R]).
Any ASCII capital letters (\f[CR]A\f[R] to \f[CR]Z\f[R]) are converted
to lowercase.
.TP
In JavaScript
The property name of a custom data attribute is the same as the HTML
attribute without the \f[CR]data\-\f[R] prefix.
Single dashes (\f[CR]\-\f[R]) are removed, and the next ASCII character
after a removed dash is capitalized to form the property\(cqs
camel\-cased name.
.PP
Details and examples of converting between the HTML and JavaScript forms
is described in more detail in the next section.
.PP
In addition to the information below, you\(cqll find a how\-to guide for
using HTML data attributes in our article \f[I]Using data
attributes\f[R].
.SS Name conversion
.TP
\f[B]dash\-style\f[R] to \f[B]camelCase\f[R] conversion
A custom data attribute name is transformed to a key for the
\f[CR]DOMStringMap\f[R] entry by the following:
.RS
.IP "1." 3
Lowercase all ASCII capital letters (\f[CR]A\f[R] to \f[CR]Z\f[R]);
.IP "2." 3
Remove the prefix \f[CR]data\-\f[R] (including the dash);
.IP "3." 3
For any dash (\f[CR]U+002D\f[R]) followed by an ASCII lowercase letter
\f[CR]a\f[R] to \f[CR]z\f[R], remove the dash and uppercase the letter;
.IP "4." 3
Other characters (including other dashes) are left unchanged.
.RE
.TP
\f[B]camelCase\f[R] to \f[B]dash\-style\f[R] conversion
The opposite transformation, which maps a key to an attribute name, uses
the following:
.RS
.IP "1." 3
\f[B]Restriction:\f[R] Before transformation, a dash \f[I]must not\f[R]
be immediately followed by an ASCII lowercase letter \f[CR]a\f[R] to
\f[CR]z\f[R];
.IP "2." 3
Add the \f[CR]data\-\f[R] prefix;
.IP "3." 3
Add a dash before any ASCII uppercase letter \f[CR]A\f[R] to
\f[CR]Z\f[R], then lowercase the letter;
.IP "4." 3
Other characters are left unchanged.
.RE
.PP
For example, a \f[CR]data\-abc\-def\f[R] attribute corresponds to
\f[CR]dataset.abcDef\f[R].
.SS Accessing values
.IP \(bu 2
Attributes can be set and read by the camelCase name/key as an object
property of the dataset: \f[CR]element.dataset.keyname\f[R].
.IP \(bu 2
Attributes can also be set and read using bracket syntax:
\f[CR]element.dataset[\(aqkeyname\(aq]\f[R].
.IP \(bu 2
The \f[CR]in\f[R] operator can check if a given attribute exists:
\f[CR]\(aqkeyname\(aq in element.dataset\f[R].
Note that this will walk the prototype chain of \f[CR]dataset\f[R] and
may be unsafe if you have external code that may pollute the prototype
chain.
Several alternatives exist, such as
\f[CR]Object.hasOwn(element.dataset, \(aqkeyname\(aq)\f[R], or just
checking if \f[CR]element.dataset.keyname !== undefined\f[R].
.SS Setting values
.IP \(bu 2
When the attribute is set, its value is always converted to a string.
For example: \f[CR]element.dataset.example = null\f[R] is converted into
\f[CR]data\-example=\(dqnull\(dq\f[R].
.IP \(bu 2
To remove an attribute, you can use the \f[CR]delete\f[R] operator:
\f[CR]delete element.dataset.keyname\f[R].
.SH VALUE
A \f[CR]DOMStringMap\f[R].
.SH EXAMPLES
.IP
.EX
<\f[B]div\f[R] id=\(dquser\(dq data\-id=\(dq1234567890\(dq data\-user=\(dqcarinaanand\(dq data\-date\-of\-birth>
  Carina Anand
</\f[B]div\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] el = document.querySelector(\(dq#user\(dq);

\f[I]// el.id === \(aquser\(aq\f[R]
\f[I]// el.dataset.id === \(aq1234567890\(aq\f[R]
\f[I]// el.dataset.user === \(aqcarinaanand\(aq\f[R]
\f[I]// el.dataset.dateOfBirth === \(aq\(aq\f[R]

\f[I]// set a data attribute\f[R]
el.dataset.dateOfBirth = \(dq1960\-10\-03\(dq;
\f[I]// Result on JS: el.dataset.dateOfBirth === \(aq1960\-10\-03\(aq\f[R]
\f[I]// Result on HTML: <div id=\(dquser\(dq data\-id=\(dq1234567890\(dq data\-user=\(dqcarinaanand\(dq data\-date\-of\-birth=\(dq1960\-10\-03\(dq>Carina Anand</div>\f[R]

\f[B]delete\f[R] el.dataset.dateOfBirth;
\f[I]// Result on JS: el.dataset.dateOfBirth === undefined\f[R]
\f[I]// Result on HTML: <div id=\(dquser\(dq data\-id=\(dq1234567890\(dq data\-user=\(dqcarinaanand\(dq>Carina Anand</div>\f[R]

\f[B]if\f[R] (el.dataset.someDataAttr === \f[B]undefined\f[R]) {
  el.dataset.someDataAttr = \(dqmydata\(dq;
  \f[I]// Result on JS: \(aqsomeDataAttr\(aq in el.dataset === true\f[R]
  \f[I]// Result on HTML: <div id=\(dquser\(dq data\-id=\(dq1234567890\(dq data\-user=\(dqcarinaanand\(dq data\-some\-data\-attr=\(dqmydata\(dq>Carina Anand</div>\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The HTML \f[CR]data\-*\f[R] class of global attributes
.IP \(bu 2
Using data attributes
.IP \(bu 2
\f[CR]Element.getAttribute()\f[R] and \f[CR]Element.setAttribute()\f[R]
