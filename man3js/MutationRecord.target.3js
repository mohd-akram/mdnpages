.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "MutationRecord.target" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.target \- MutationRecord: target property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]target\f[B]\f[R] is the target (i.e.\ the mutated/changed
node) of a mutation observed with a \f[CR]MutationObserver\f[R].
.SH VALUE
The \f[CR]Node\f[R] that the mutation affected.
.IP \[bu] 2
If the record\[cq]s \f[CR]type\f[R] is \f[CR]attributes\f[R], this is
the \f[CR]Element\f[R] whose attributes changed.
.IP \[bu] 2
If the record\[cq]s \f[CR]type\f[R] is \f[CR]characterData\f[R], this is
the \f[CR]CharacterData\f[R] node.
.IP \[bu] 2
If the record\[cq]s \f[CR]type\f[R] is \f[CR]childList\f[R], this is the
\f[CR]Node\f[R] whose children changed.
.SH EXAMPLES
.SS Logging the target of a mutation
In the following example, there are two divs: a red div
(\f[CR]#red\-div\f[R]) and a blue div (\f[CR]#blue\-div\f[R]), inside a
container div \f[CR]#container\f[R].
A \f[CR]MutationObserver\f[R] is created to observe the container.
The observer is observing changes to the childlist, and also has
\f[CR]subtree: true\f[R] so it will observe changes to the children of
the container\[cq]s children.
.PP
The observer callback logs the \f[CR]target\f[R] of the mutation record.
When we add nodes to the \f[CR]#red\-div\f[R] or the
\f[CR]#blue\-div\f[R], the \f[CR]target\f[R] will be the
\f[CR]#red\-div\f[R] or the \f[CR]#blue\-div\f[R], respectively.
.SS HTML
.IP
.EX
<\f[B]pre\f[R] id=\[dq]log\[dq]>Target of mutation:</\f[B]pre\f[R]>
<\f[B]button\f[R] id=\[dq]add\-nodes\-to\-red\-div\[dq]>Add a node to red div</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]add\-nodes\-to\-blue\-div\[dq]>Add a node to blue div</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]reset\[dq]>Reset</\f[B]button\f[R]>
<\f[B]div\f[R] id=\[dq]container\[dq]>
  <\f[B]div\f[R] id=\[dq]red\-div\[dq]></\f[B]div\f[R]>
  <\f[B]div\f[R] id=\[dq]blue\-div\[dq]></\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] container = document.querySelector(\[dq]#container\[dq]);
\f[B]const\f[R] redDiv = document.querySelector(\[dq]#red\-div\[dq]);
\f[B]const\f[R] blueDiv = document.querySelector(\[dq]#blue\-div\[dq]);
\f[B]const\f[R] addToRed = document.querySelector(\[dq]#add\-nodes\-to\-red\-div\[dq]);
\f[B]const\f[R] addToBlue = document.querySelector(\[dq]#add\-nodes\-to\-blue\-div\[dq]);
\f[B]const\f[R] reset = document.querySelector(\[dq]#reset\[dq]);
\f[B]const\f[R] log = document.querySelector(\[dq]#log\[dq]);

addToRed.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]const\f[R] newPara = document.createElement(\[dq]p\[dq]);
  newPara.textContent = \[ga]Current time: ${Date.now()}\[ga];
  redDiv.appendChild(newPara);
});

addToBlue.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]const\f[R] newPara = document.createElement(\[dq]p\[dq]);
  newPara.textContent = \[ga]Current time: ${Date.now()}\[ga];
  blueDiv.appendChild(newPara);
});

reset.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] self.location.reload());

\f[B]function\f[R] logMutationTarget(records) {
  \f[B]for\f[R] (\f[B]const\f[R] record \f[B]of\f[R] records) {
    log.textContent = \[ga]Target of mutation: ${record.target.id}\[ga];
  }
}

\f[B]const\f[R] observer = \f[B]new\f[R] MutationObserver(logMutationTarget);
observer.observe(container, { childList: \f[B]true\f[R], subtree: \f[B]true\f[R] });
.EE
.SS Result
