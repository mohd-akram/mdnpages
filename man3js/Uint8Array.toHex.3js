.\" Automatically generated by Pandoc 3.4
.\"
.TH "Uint8Array.toHex" "JS" "November 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Uint8Array.toHex \- Uint8Array.prototype.toHex()
.SH SYNOPSIS
The \f[B]\f[CB]toHex()\f[B]\f[R] method of \f[CR]Uint8Array\f[R]
instances returns a hex\-encoded string based on the data in this
\f[CR]Uint8Array\f[R] object.
.PP
This method creates strings from a byte array.
To convert individual numbers into hex, use the
\f[CR]Number.prototype.toString()\f[R] method with \f[CR]radix\f[R] set
to \f[CR]16\f[R] instead.
.SH SYNTAX
.IP
.EX
toHex()
.EE
.SS Parameters
None.
.SS Return value
A hex\-encoded string representing the data in the
\f[CR]Uint8Array\f[R].
.SH EXAMPLES
.SS Encoding binary data
This example encodes data from a \f[CR]Uint8Array\f[R] into a hex
string.
.IP
.EX
\f[B]const\f[R] uint8Array = \f[B]new\f[R] Uint8Array([202, 254, 208, 13]);
console.log(uint8Array.toHex()); \f[I]// \[dq]cafed00d\[dq]\f[R]

\f[B]const\f[R] data = \f[B]new\f[R] Uint8Array([255, 0, 0, 0, 255, 0, 0, 0, 255]);
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < data.length; i += 3) {
  console.log(data.slice(i, i + 3).toHex());
}
\f[I]// \[dq]ff0000\[dq]\f[R]
\f[I]// \[dq]00ff00\[dq]\f[R]
\f[I]// \[dq]00ff00\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#uint8array-to--from-base64-and-hex
Polyfill of \f[CR]Uint8Array.toHex\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Uint8Array\f[R]
.IP \[bu] 2
\f[CR]Uint8Array.fromHex()\f[R]
.IP \[bu] 2
\f[CR]Uint8Array.prototype.setFromHex()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toString()\f[R]
