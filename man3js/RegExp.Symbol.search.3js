.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REGEXP.SYMBOL.SEARCH" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.Symbol.search \- RegExp.prototypeSymbol.search
.SH SYNOPSIS
The \f[B]\f[CB][Symbol.search]()\f[B]\f[R] method of \f[CR]RegExp\f[R]
instances specifies how \f[CR]String.prototype.search\f[R] should
behave.
.IP
.EX
\f[B]class\f[R] RegExp1 \f[B]extends\f[R] RegExp {
  constructor(str) {
    \f[B]super\f[R](str);
    \f[B]this\f[R].pattern = str;
  }
  [Symbol.search](str) {
    \f[B]return\f[R] str.indexOf(\f[B]this\f[R].pattern);
  }
}

console.log(\(dqtable football\(dq.search(\f[B]new\f[R] RegExp1(\(dqfoo\(dq)));
\f[I]// Expected output: 6\f[R]
.EE
.SH SYNTAX
.IP
.EX
regexp[Symbol.search](str)
.EE
.SS Parameters
.TP
\f[B]str\f[R]
A \f[CR]String\f[R] that is a target of the search.
.SS Return value
The index of the first match between the regular expression and the
given string, or \f[CR]\-1\f[R] if no match was found.
.SH DESCRIPTION
This method is called internally in
\f[CR]String.prototype.search()\f[R].
For example, the following two examples return the same result.
.IP
.EX
\(dqabc\(dq.search(/a/);

/a/[Symbol.search](\(dqabc\(dq);
.EE
.PP
This method does not copy the regular expression, unlike
\f[CR][Symbol.split]()\f[R] or \f[CR][Symbol.matchAll]()\f[R].
However, unlike \f[CR][Symbol.match]()\f[R] or
\f[CR][Symbol.replace]()\f[R], it will set \f[CR]lastIndex\f[R] to 0
when execution starts and restore it to the previous value when it
exits, therefore generally avoiding side effects.
This means that the \f[CR]g\f[R] flag has no effect with this method,
and it always returns the first match in the string even when
\f[CR]lastIndex\f[R] is non\-zero.
This also means sticky regexps will always search strictly at the
beginning of the string.
.IP
.EX
\f[B]const\f[R] re = /[abc]/g;
re.lastIndex = 2;
console.log(\(dqabc\(dq.search(re)); \f[I]// 0\f[R]

\f[B]const\f[R] re2 = /[bc]/y;
re2.lastIndex = 1;
console.log(\(dqabc\(dq.search(re2)); \f[I]// \-1\f[R]
console.log(\(dqabc\(dq.match(re2)); \f[I]// [ \(aqb\(aq ]\f[R]
.EE
.PP
\f[CR][Symbol.search]()\f[R] always calls the regex\(cqs
\f[CR]exec()\f[R] method exactly once, and returns the \f[CR]index\f[R]
property of the result, or \f[CR]\-1\f[R] if the result is
\f[CR]null\f[R].
.PP
This method exists for customizing the search behavior in
\f[CR]RegExp\f[R] subclasses.
.SH EXAMPLES
.SS Direct call
This method can be used in almost the same way as
\f[CR]String.prototype.search()\f[R], except for the different value of
\f[CR]this\f[R] and the different arguments order.
.IP
.EX
\f[B]const\f[R] re = /\-/g;
\f[B]const\f[R] str = \(dq2016\-01\-02\(dq;
\f[B]const\f[R] result = re[Symbol.search](str);
console.log(result); \f[I]// 4\f[R]
.EE
.SS Using \f[CR][Symbol.search]()\f[R] in subclasses
Subclasses of \f[CR]RegExp\f[R] can override
\f[CR][Symbol.search]()\f[R] method to modify the behavior.
.IP
.EX
\f[B]class\f[R] MyRegExp \f[B]extends\f[R] RegExp {
  constructor(str) {
    \f[B]super\f[R](str);
    \f[B]this\f[R].pattern = str;
  }
  [Symbol.search](str) {
    \f[B]return\f[R] str.indexOf(\f[B]this\f[R].pattern);
  }
}

\f[B]const\f[R] re = \f[B]new\f[R] MyRegExp(\(dqa+b\(dq);
\f[B]const\f[R] str = \(dqab a+b\(dq;
\f[B]const\f[R] result = str.search(re); \f[I]// String.prototype.search calls re[Symbol.search]().\f[R]
console.log(result); \f[I]// 3\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]RegExp.prototype[Symbol.search]\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]String.prototype.search()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.match]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.matchAll]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.replace]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.split]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.exec()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.test()\f[R]
.IP \(bu 2
\f[CR]Symbol.search\f[R]
