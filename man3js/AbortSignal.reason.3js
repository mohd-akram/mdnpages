.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ABORTSIGNAL.REASON" "3JS" "May 7, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AbortSignal.reason \- AbortSignal: reason property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]reason\f[B]\f[R] read\-only property returns a JavaScript
value that indicates the abort reason.
.PP
The property is \f[CR]undefined\f[R] when the signal has not been
aborted.
It can be set to a specific value when the signal is aborted, using
\f[CR]AbortController.abort()\f[R] or \f[CR]AbortSignal.abort()\f[R].
If not explicitly set in those methods, it defaults to
\(lqAbortError\(rq \f[CR]DOMException\f[R].
.SH VALUE
A JavaScript value that indicates the abort reason, or
\f[CR]undefined\f[R], if not aborted.
.SH EXAMPLES
In the following snippet, we create a new \f[CR]AbortController\f[R]
object, and get its \f[CR]AbortSignal\f[R] (available using the
\f[CR]signal\f[R] property).
Later on, using the \f[CR]aborted\f[R] property, we check whether or not
the signal has been aborted, and log the abort status and reason to the
console.
.IP
.EX
\f[B]const\f[R] controller = \f[B]new\f[R] AbortController();
\f[B]const\f[R] signal = controller.signal;

\f[I]// \&...\f[R]

\f[B]if\f[R] (signal.aborted) {
  \f[B]if\f[R] (signal.reason) {
    console.log(\(gaRequest aborted with reason: ${signal.reason}\(ga);
  } \f[B]else\f[R] {
    console.log(\(dqRequest aborted but no reason was given.\(dq);
  }
} \f[B]else\f[R] {
  console.log(\(dqRequest not aborted\(dq);
}
.EE
.SH SEE ALSO
.IP \(bu 2
Fetch API
