.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SET.ISDISJOINTFROM" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.isDisjointFrom \- Set.prototype.isDisjointFrom()
.SH SYNOPSIS
The \f[B]\f[CB]isDisjointFrom()\f[B]\f[R] method of \f[CR]Set\f[R]
instances takes a set and returns a boolean indicating if this set has
no elements in common with the given set.
.SH SYNTAX
.IP
.EX
isDisjointFrom(other)
.EE
.SS Parameters
.TP
\f[B]other\f[R]
A \f[CR]Set\f[R] object, or set\-like object.
.SS Return value
\f[CR]true\f[R] if this set has no elements in common with the
\f[CR]other\f[R] set, and \f[CR]false\f[R] otherwise.
.SH DESCRIPTION
Two sets are \f[I]disjoint\f[R] if they have no elements in common.
In mathematical notation:
.PP
\ A\ is disjoint from\ B⇔A∩B=∅AB AB =  
.PP
And using Venn diagram:
[IMAGE: A Venn diagram with two circles.
A and B are disjoint because the circles have no region of overlap.]
A Venn diagram with two circles.
A and B are disjoint because the circles have no region of overlap.
.PP
\f[CR]isDisjointFrom()\f[R] accepts set\-like objects as the
\f[CR]other\f[R] parameter.
It requires \f[CR]this\f[R] to be an actual \f[CR]Set\f[R] instance,
because it directly retrieves the underlying data stored in
\f[CR]this\f[R] without invoking any user code.
Then, its behavior depends on the sizes of \f[CR]this\f[R] and
\f[CR]other\f[R]:
.IP \(bu 2
If there are more elements in \f[CR]this\f[R] than
\f[CR]other.size\f[R], then it iterates over \f[CR]other\f[R] by calling
its \f[CR]keys()\f[R] method, and if any element in \f[CR]other\f[R] is
present in \f[CR]this\f[R], it returns \f[CR]false\f[R] (and closes the
\f[CR]keys()\f[R] iterator by calling its \f[CR]return()\f[R] method).
Otherwise, it returns \f[CR]true\f[R].
.IP \(bu 2
Otherwise, it iterates over the elements in \f[CR]this\f[R], and returns
\f[CR]false\f[R] if any element \f[CR]e\f[R] in \f[CR]this\f[R] causes
\f[CR]other.has(e)\f[R] to return a truthy value.
Otherwise, it returns \f[CR]true\f[R].
.PP
Because of this implementation, the efficiency of
\f[CR]isDisjointFrom()\f[R] mostly depends on the size of the smaller
set between \f[CR]this\f[R] and \f[CR]other\f[R] (assuming sets can be
accessed in sublinear time).
.SH EXAMPLES
.SS Using isDisjointFrom()
The set of perfect squares (<20) is disjoint from the set of prime
numbers (<20), because a perfect square is by definition decomposable
into the product of two integers, while 1 is also not considered a prime
number:
.IP
.EX
\f[B]const\f[R] primes = \f[B]new\f[R] Set([2, 3, 5, 7, 11, 13, 17, 19]);
\f[B]const\f[R] squares = \f[B]new\f[R] Set([1, 4, 9, 16]);
console.log(primes.isDisjointFrom(squares)); \f[I]// true\f[R]
.EE
.PP
The set of perfect squares (<20) is not disjoint from the set of
composite numbers (<20), because all non\-1 perfect squares are by
definition composite numbers:
.IP
.EX
\f[B]const\f[R] composites = \f[B]new\f[R] Set([4, 6, 8, 9, 10, 12, 14, 15, 16, 18]);
\f[B]const\f[R] squares = \f[B]new\f[R] Set([1, 4, 9, 16]);
console.log(composites.isDisjointFrom(squares)); \f[I]// false\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#new-set-methods
Polyfill of \f[CR]Set.prototype.isDisjointFrom\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/set.prototype.isdisjointfrom
es\-shims polyfill of \f[CR]Set.prototype.isDisjointFrom\f[R]
.UE \c
.IP \(bu 2
\f[CR]Set.prototype.difference()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.intersection()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.isSubsetOf()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.isSupersetOf()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.symmetricDifference()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.union()\f[R]
