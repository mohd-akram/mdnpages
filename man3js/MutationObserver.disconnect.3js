.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MutationObserver.disconnect" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationObserver.disconnect \- MutationObserver: disconnect() method
.SH SYNOPSIS
The \f[CR]MutationObserver\f[R] method \f[B]\f[CB]disconnect()\f[B]\f[R]
tells the observer to stop watching for mutations.
.PP
The observer can be reused by calling its \f[CR]observe()\f[R] method
again.
.SH SYNTAX
.IP
.EX
disconnect()
.EE
.SS Parameters
None.
.SS Return value
\f[CR]undefined\f[R].
.RS
.PP
\f[B]Note:\f[R] All notifications of mutations that have already been
\f[I]detected\f[R], but \f[I]not yet reported\f[R] to the observer, are
discarded.
To hold on to and handle the detected but unreported mutations, use the
\f[CR]takeRecords()\f[R] method.
.RE
.SH USAGE NOTES
If the element being observed is removed from the DOM, and then
subsequently released by the browser\[cq]s garbage collection mechanism,
the \f[CR]MutationObserver\f[R] will stop observing the removed element.
However, the \f[CR]MutationObserver\f[R] itself can continue to exist to
observe other existing elements.
.SH EXAMPLES
This example creates an observer, then disconnects from it, leaving it
available for possible reuse.
.IP
.EX
\f[B]const\f[R] targetNode = document.querySelector(\[dq]#someElement\[dq]);
\f[B]const\f[R] observerOptions = {
  childList: \f[B]true\f[R],
  attributes: \f[B]true\f[R],
};

\f[B]const\f[R] observer = \f[B]new\f[R] MutationObserver(callback);
observer.observe(targetNode, observerOptions);

\f[I]/* some time later\&... */\f[R]

observer.disconnect();
.EE
