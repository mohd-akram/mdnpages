.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "HighlightRegistry.set" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HighlightRegistry.set \- HighlightRegistry: set() method
.SH SYNOPSIS
The \f[B]\f[CB]set()\f[B]\f[R] method of the
\f[CR]HighlightRegistry\f[R] interface adds or updates a
\f[CR]Highlight\f[R] object in the registry with the specified name.
.PP
\f[CR]HighlightRegistry\f[R] is a \f[CR]Map\f[R]\-like object, so this
is similar to using \f[CR]Map.set()\f[R].
.SH SYNTAX
.IP
.EX
set(name, highlight)
.EE
.SS Parameters
.TP
\f[B]name\f[R]
The name of the \f[CR]Highlight\f[R] object to add or update.
The name must be a \f[CR]String\f[R].
.TP
\f[B]highlight\f[R]
The \f[CR]Highlight\f[R] object to add or update.
This must be a \f[CR]Highlight\f[R] interface instance.
.SS Return value
The \f[CR]HighlightRegistry\f[R] object.
.SH EXAMPLES
.SS Using set()
.IP
.EX
\f[B]const\f[R] fooHighlight = \f[B]new\f[R] Highlight();
CSS.highlights.set(\[dq]foo\[dq], fooHighlight);
.EE
.SS Using set() with chaining
Since the \f[CR]set()\f[R] method returns back the registry, you can
chain the method call like below:
.IP
.EX
\f[B]const\f[R] fooHighlight = \f[B]new\f[R] Highlight();
\f[B]const\f[R] barHighlight = \f[B]new\f[R] Highlight();
\f[B]const\f[R] bazHighlight = \f[B]new\f[R] Highlight();

CSS.highlights
  .set(\[dq]foo\[dq], fooHighlight)
  .set(\[dq]bar\[dq], barHighlight)
  .set(\[dq]baz\[dq], bazHighlight);
.EE
.SH SEE ALSO
.IP \[bu] 2
The CSS Custom Highlight API
.IP \[bu] 2
\c
.UR https://css-tricks.com/css-custom-highlight-api-early-look/
CSS Custom Highlight API: The Future of Highlighting Text Ranges on the
Web
.UE \c
