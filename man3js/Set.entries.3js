.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SET.ENTRIES" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.entries \- Set.prototype.entries()
.SH SYNOPSIS
The \f[B]\f[CB]entries()\f[B]\f[R] method of \f[CR]Set\f[R] instances
returns a new \f[I]set iterator\f[R] object that contains \f[B]an array
of \f[CB][value, value]\f[B]\f[R] for each element in this set, in
insertion order.
For \f[CR]Set\f[R] objects there is no \f[CR]key\f[R] like in
\f[CR]Map\f[R] objects.
However, to keep the API similar to the \f[CR]Map\f[R] object, each
\f[I]entry\f[R] has the same value for its \f[I]key\f[R] and
\f[I]value\f[R] here, so that an array \f[CR][value, value]\f[R] is
returned.
.IP
.EX
\f[B]const\f[R] set1 = \f[B]new\f[R] Set();
set1.add(42);
set1.add(\(dqforty two\(dq);

\f[B]const\f[R] iterator1 = set1.entries();

\f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] iterator1) {
  console.log(entry);
  \f[I]// Expected output: Array [42, 42]\f[R]
  \f[I]// Expected output: Array [\(dqforty two\(dq, \(dqforty two\(dq]\f[R]
}
.EE
.SH SYNTAX
.IP
.EX
entries()
.EE
.SS Parameters
None.
.SS Return value
A new iterable iterator object.
.SH EXAMPLES
.SS Using entries()
.IP
.EX
\f[B]const\f[R] mySet = \f[B]new\f[R] Set();
mySet.add(\(dqfoobar\(dq);
mySet.add(1);
mySet.add(\(dqbaz\(dq);

\f[B]const\f[R] setIter = mySet.entries();

console.log(setIter.next().value); \f[I]// [\(dqfoobar\(dq, \(dqfoobar\(dq]\f[R]
console.log(setIter.next().value); \f[I]// [1, 1]\f[R]
console.log(setIter.next().value); \f[I]// [\(dqbaz\(dq, \(dqbaz\(dq]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Set.prototype.keys()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.values()\f[R]
