.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUQUEUE.COPYEXTERNALIMAGETOTEXTURE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUQueue.copyExternalImageToTexture \- GPUQueue:
copyExternalImageToTexture() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]copyExternalImageToTexture()\f[B]\f[R] method of the
\f[CR]GPUQueue\f[R] interface copies a snapshot taken from a source
image, video, or canvas into a given \f[CR]GPUTexture\f[R].
.PP
Using this function allows the user agent to determine the most
efficient way to copy the data over for each source type.
.SH SYNTAX
.IP
.EX
copyExternalImageToTexture(source, destination, copySize)
.EE
.SS Parameters
.TP
\f[B]source\f[R]
An object representing the source to write to the destination, and its
origin.
This can take the following properties:
.RS
.TP
\f[B]source\f[R]
An object providing the source of the snapshot to copy.
This can be an \f[CR]HTMLCanvasElement\f[R],
\f[CR]HTMLImageElement\f[R], \f[CR]HTMLVideoElement\f[R],
\f[CR]ImageBitmap\f[R], \f[CR]ImageData\f[R],
\f[CR]OffscreenCanvas\f[R], or \f[CR]VideoFrame\f[R] object.
The image source data is captured at the exact moment
\f[CR]copyExternalImageToTexture()\f[R] is invoked.
.TP
\f[B]origin\f[R] \f[I](optional)\f[R]
An object or array specifying the origin of the copy \(em the top\-left
corner of the source sub\-region to copy from.
Together with \f[CR]copySize\f[R], this defines the full extent of the
source sub\-region.
The \f[CR]x\f[R] and \f[CR]y\f[R] values default to 0 if any of all of
\f[CR]origin\f[R] is omitted.
.RS
.PP
For example, you can pass an array like \f[CR][0, 0]\f[R], or its
equivalent object \f[CR]{ x: 0, y: 0 }\f[R].
.RE
.TP
\f[B]flipY\f[R] \f[I](optional)\f[R]
A boolean.
If set to \f[CR]true\f[R], the image capture is flipped vertically.
If omitted, \f[CR]flipY\f[R] defaults to \f[CR]false\f[R].
.RE
.TP
\f[B]destination\f[R]
An object defining the texture subresource and origin to write the
captured image to, plus encoding metadata.
This can take the following properties:
.RS
.TP
\f[B]aspect\f[R] \f[I](optional)\f[R]
An enumerated value defining which aspects of the texture to write the
image to.
Possible values are:
.RS
.TP
\f[B]\(dqall\(dq\f[R]
All available aspects of the texture format will be written to, which
can mean all or any of color, depth, and stencil, depending on what kind
of format you are dealing with.
.TP
\f[B]\(dqdepth\-only\(dq\f[R]
Only the depth aspect of a \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
\ will be written to.
.TP
\f[B]\(dqstencil\-only\(dq\f[R]
Only the stencil aspect of a depth\-or\-stencil format will be written
to.
.PP
If omitted, \f[CR]aspect\f[R] takes a value of \f[CR]\(dqall\(dq\f[R].
.RE
.TP
\f[B]colorSpace\f[R] \f[I](optional)\f[R]
An enumerated value describing the color space and encoding used to
encode data into the destination texture.
Possible values are \f[CR]\(dqsrgb\(dq\f[R] and
\f[CR]\(dqdisplay\-p3\(dq\f[R].
If omitted, \f[CR]colorSpace\f[R] defaults to \f[CR]\(dqsrgb\(dq\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] The encoding may result in values outside of the range
\f[CR][0, 1]\f[R] being written to the target texture, if its format can
represent them.
Otherwise, the results are clamped to the target texture format\(cqs
range.
Conversion may not be necessary if \f[CR]colorSpace\f[R] matches the
source image color space.
.RE
.RE
.TP
\f[B]mipLevel\f[R] \f[I](optional)\f[R]
A number representing the mip\-map level of the texture to write the
image to.
If omitted, \f[CR]mipLevel\f[R] defaults to 0.
.TP
\f[B]origin\f[R] \f[I](optional)\f[R]
An object or array specifying the origin of the copy \(em the minimum
corner of the texture region to write the image data to.
Together with \f[CR]copySize\f[R], this defines the full extent of the
region to copy to.
The \f[CR]x\f[R], \f[CR]y\f[R], and \f[CR]z\f[R] values default to 0 if
any of all of \f[CR]origin\f[R] is omitted.
.RS
.PP
For example, you can pass an array like \f[CR][0, 0, 0]\f[R], or its
equivalent object \f[CR]{ x: 0, y: 0, z: 0 }\f[R].
.RE
.TP
\f[B]premultipliedAlpha\f[R] \f[I](optional)\f[R]
A boolean.
If set to \f[CR]true\f[R], the image data written into the texture will
have its RGB channels premultiplied by the alpha channel.
If omitted, \f[CR]premultipliedAlpha\f[R] defaults to \f[CR]false\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] If this option is set to \f[CR]true\f[R] and the
\f[CR]source\f[R] is also premultiplied, the source RGB values must be
preserved even if they exceed their corresponding alpha values.
.RE
.RE
.TP
\f[B]texture\f[R]
A \f[CR]GPUTexture\f[R] object representing the texture to write the
data to.
.RE
.TP
\f[B]copySize\f[R]
An object or array specifying \f[CR]width\f[R], \f[CR]height\f[R], and
\f[CR]depthOrArrayLayers\f[R] \(em of the region to copy from/to.
.RS
.PP
For example, you can pass an array like \f[CR][16, 1, 1]\f[R], or its
equivalent object
\f[CR]{ width: 16, height: 1, depthOrArrayLayers: 1 }\f[R].
.PP
The \f[CR]width\f[R] value has to be included.
If the \f[CR]height\f[R] or \f[CR]depthOrArrayLayers\f[R] values are
omitted, they default to 1.
.RE
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Exceptions
.TP
\f[B]OperationError\f[R] \f[B]DOMException\f[R]
The method throws an \f[CR]OperationError\f[R] if the following criteria
are not met:
.RS
.IP \(bu 2
\f[CR]source.origin.x\f[R] + the width of the region to copy to is less
than or equal to the width of the source image.
.IP \(bu 2
\f[CR]source.origin.y\f[R] + the height of the region to copy to is less
than or equal to the height of the source image.
.IP \(bu 2
\f[CR]source.origin.z\f[R] + the depthOrArrayLayers of the region to
copy to is less than or equal to 1.
.IP \(bu 2
\f[CR]dataOffset\f[R] is equal to or smaller than the size of
\f[CR]data\f[R].
.IP \(bu 2
The size of \f[CR]data\f[R] (when converted to bytes, in the case of
\f[CR]TypedArray\f[R]s) is a multiple of 4.
.RE
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Thrown if the image source data is cross\-origin.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]writeTexture()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the \f[CR]GPUQueue\f[R]
becomes invalid:
.IP \(bu 2
\f[CR]mipLevel\f[R] is less than the destination
\f[CR]GPUTexture.mipLevelCount\f[R].
.IP \(bu 2
\f[CR]origin.x\f[R] is a multiple of the texel block width of the
destination \f[CR]GPUTexture.format\f[R].
.IP \(bu 2
\f[CR]origin.y\f[R] is a multiple of the texel block height of the
destination \f[CR]GPUTexture.format\f[R].
.IP \(bu 2
If the destination \f[CR]GPUTexture.format\f[R] is a \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
, the image capture size is equal to \f[CR]size\f[R].
.IP \(bu 2
The destination \f[CR]GPUTexture.usage\f[R] includes the
\f[CR]GPUTextureUsage.COPY_DST\f[R] and
\f[CR]GPUTextureUsage.RENDER_ATTACHMENT\f[R] flags.
.IP \(bu 2
The destination \f[CR]GPUTexture.dimension\f[R] is
\f[CR]\(dq2d\(dq\f[R].
.IP \(bu 2
The destination \f[CR]GPUTexture.sampleCount\f[R] is 1.
.IP \(bu 2
The destination \f[CR]GPUTexture.format\f[R] is one of the following
(which support \f[CR]GPUTextureUsage.RENDER_ATTACHMENT\f[R] usage):
.RS 2
.IP \(bu 2
\f[CR]\(dqr8unorm\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqr16float\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqr32float\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqrg8unorm\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqrg16float\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqrg32float\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqrgba8unorm\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqrgba8unorm\-srgb\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqbgra8unorm\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqbgra8unorm\-srgb\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqrgb10a2unorm\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqrgba16float\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqrgba32float\(dq\f[R]
.RE
.IP \(bu 2
\f[CR]destination.origin.x\f[R] + \f[CR]copySize.width\f[R] is less than
or equal to the \f[CR]destination\f[R] \f[CR]GPUTexture\f[R]
\f[CR]width\f[R].
.IP \(bu 2
\f[CR]destination.origin.y\f[R] + \f[CR]copySize.height\f[R] is less
than or equal to the \f[CR]destination\f[R] \f[CR]GPUTexture\f[R]
\f[CR]height\f[R].
.IP \(bu 2
\f[CR]destination.origin.z\f[R] + \f[CR]copySize.depthOrArrayLayers\f[R]
is less than or equal to the \f[CR]destination\f[R]
\f[CR]GPUTexture\f[R] \f[CR]depthOrArrayLayers\f[R].
.IP \(bu 2
The \f[CR]destination\f[R] \f[CR]GPUTexture.width\f[R] is a multiple of
the texel block width of the destination \f[CR]GPUTexture.format\f[R].
.IP \(bu 2
The \f[CR]destination\f[R] \f[CR]GPUTexture.height\f[R] is a multiple of
the texel block height of the destination \f[CR]GPUTexture.format\f[R].
.SH EXAMPLES
In the WebGPU Samples \c
.UR https://webgpu.github.io/webgpu-samples/samples/texturedCube/
Textured Cube example
.UE \c
, the following snippet is used to fetch an image and upload it into a
\f[CR]GPUTexture\f[R]:
.IP
.EX
\f[B]let\f[R] cubeTexture;
{
  \f[B]const\f[R] img = document.createElement(\(dqimg\(dq);
  img.src = \f[B]new\f[R] URL(
    \(dq../../../assets/img/Di\-3d.png\(dq,
    \f[B]import\f[R].meta.url,
  ).toString();
  \f[B]await\f[R] img.decode();
  \f[B]const\f[R] imageBitmap = \f[B]await\f[R] createImageBitmap(img);

  cubeTexture = device.createTexture({
    size: [imageBitmap.width, imageBitmap.height, 1],
    format: \(dqrgba8unorm\(dq,
    usage:
      GPUTextureUsage.TEXTURE_BINDING |
      GPUTextureUsage.COPY_DST |
      GPUTextureUsage.RENDER_ATTACHMENT,
  });

  device.queue.copyExternalImageToTexture(
    { source: imageBitmap },
    { texture: cubeTexture },
    [imageBitmap.width, imageBitmap.height],
  );
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
