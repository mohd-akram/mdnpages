.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RTCREMOTEOUTBOUNDRTPSTREAMSTATS.LOCALID" "3JS" "August 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRemoteOutboundRtpStreamStats.localId \-
RTCRemoteOutboundRtpStreamStats: localId property
.SH SYNOPSIS
The \f[CR]RTCRemoteOutboundRtpStreamStats\f[R] dictionary\(cqs
\f[B]\f[CB]localId\f[B]\f[R] property is a string which can be used to
identify the \f[CR]RTCInboundRtpStreamStats\f[R] object whose
\f[CR]remoteId\f[R] matches this value.
.PP
Together, these two objects provide statistics about the inbound and
outbound sides of the same synchronization source (SSRC).
.SH VALUE
A string which can be compared to the value of an
\f[CR]RTCInboundRtpStreamStats\f[R] object\(cqs \f[CR]remoteId\f[R]
property to see if the two represent statistics for each of the two
sides of the same set of data received by the local peer.
.SH USAGE NOTES
You can think of the local and remote views of the same RTP stream as
pairs, each of which has a reference back to the other one.
Thus, if an \f[CR]RTCStatsReport\f[R] includes an
\f[CR]remote\-outbound\-rtp\f[R] statistics object (of type
\f[CR]RTCRemoteOutboundRtpStreamStats\f[R]), it should also have a
corresponding \f[CR]inbound\-rtp\f[R] object.
Both of these provide information about the same batch of packets being
transmitted from the remote peer to the local device.
.PP
The difference is that \f[CR]remote\-outbound\-rtp\f[R] describes
statistics about data sent by the remote peer from the perspective of
the remote peer, while \f[CR]inbound\-rtp\f[R] offers statistics about
the incoming data from the local peer\(cqs perspective.
.PP
You can examine, try out, and experiment with this example on Glitch.
.SH EXAMPLES
In this example, we have a pair of functions: the first,
\f[CR]networkTestStart()\f[R], captures an initial report, and the
second, \f[CR]networkTestStop()\f[R], captures a second report.
The second function uses the two reports to output some information
about the network conditions.
.SS networkTestStart()
This function calls the \f[CR]RTCPeerConnection\f[R] method
\f[CR]getStats()\f[R] to request an \f[CR]RTCStatsReport\f[R] and store
it in the variable \f[CR]startReport\f[R].
.IP
.EX
\f[B]let\f[R] startReport;

\f[B]async\f[R] \f[B]function\f[R] networkTestStart(pc) {
  \f[B]if\f[R] (pc) {
    startReport = \f[B]await\f[R] pc.getStats();
  }
}
.EE
.PP
Given an \f[CR]RTCPeerConnection\f[R], \f[CR]pc\f[R], this calls its
\f[CR]getStats()\f[R] method to obtain a statistics report object, which
it stores in \f[CR]startReport\f[R] for use once the end\-of\-test data
has been collected by \f[CR]networkTestStop()\f[R].
.SS networkTestStop()
The \f[CR]networkTestStop()\f[R] function obtains a second report,
\f[CR]endReport\f[R], then computes and outputs the results.
.SS Finding paired statistics
Each statistics record of \f[CR]type\f[R]
\f[CR]remote\-outbound\-rtp\f[R] (describing a remote peer\(cqs
statistics about sending data to the local peer) has a corresponding
record of type \f[CR]inbound\-rtp\f[R] which describes the local
peer\(cqs perspective on the same data being moved between the two
peers.
Let\(cqs create a utility function to help us look up the value of a key
in the paired statistics object.
.PP
The \f[CR]findReportEntry()\f[R] function shown below examines an
\f[CR]RTCStatsReport\f[R], returning the
\f[CR]RTCStatsReport\f[R]\-based statistics record which contains the
specified \f[CR]key\f[R] \(em \f[I]and\f[R] for which the key has the
specified \f[CR]value\f[R].
If no match is found or the statistics report has no record
corresponding to the statistics category indicated by \f[CR]key\f[R].
.IP
.EX
\f[B]function\f[R] findReportEntry(report, key, value) {
  \f[B]for\f[R] (\f[B]const\f[R] stats \f[B]of\f[R] report.values()) {
    \f[B]if\f[R] (stats[key] === value) {
      \f[B]return\f[R] stats;
    }
  }
  \f[B]return\f[R] \f[B]null\f[R];
}
.EE
.PP
Since the \f[CR]RTCStatsReport\f[R] is a JavaScript \f[CR]Map\f[R], we
can iterate over the map\(cqs \f[CR]values()\f[R] to examine each of the
\f[CR]RTCStats\f[R]\-based statistics records in the report until we
find one that has the \f[CR]key\f[R] property with the specified
\f[CR]value\f[R].
When a match is found, the statistics object is returned.
.PP
If no match is found, the function returns \f[CR]null\f[R].
.SS The main networkTestStop() function
Now let\(cqs look at the \f[CR]networkTestStop()\f[R] function itself.
It takes as input the \f[CR]RTCPeerConnection\f[R] being tested, calls
\f[CR]getStats()\f[R] to get a new \f[CR]RTCStatsReport\f[R] with
current statistics, then computes the results it\(cqs looking for,
outputting those results as appropriate to the user by appending
appropriate HTML to the contents of the \f[CR]<div>\f[R] element whose
class is \f[CR]stats\-box\f[R].
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] networkTestStop(pc) {
  \f[B]if\f[R] (pc) {
    \f[B]const\f[R] statsBox = document.querySelector(\(dq.stats\-box\(dq);
    \f[B]const\f[R] endReport = \f[B]await\f[R] pc.getStats();

    \f[B]for\f[R] (\f[B]const\f[R] endRemoteOutbound \f[B]of\f[R] endReport.values()) {
      \f[B]if\f[R] (endRemoteOutbound.type === \(dqremote\-outbound\-rtp\(dq) {
        \f[B]const\f[R] startRemoteOutbound = startReport.get(endRemoteOutbound.id);

        \f[B]if\f[R] (startRemoteOutbound) {
          \f[B]const\f[R] startInboundStats = findReportEntry(
            startReport,
            \(dqremoteId\(dq,
            startRemoteOutbound.id,
          );
          \f[B]const\f[R] endInboundStats = findReportEntry(
            endReport,
            \(dqremoteId\(dq,
            endRemoteOutbound.id,
          );
          \f[I]// Elapsed time in seconds\f[R]
          \f[B]const\f[R] elapsedTime =
            (endRemoteOutbound.timestamp \- startRemoteOutbound.timestamp) /
            1000;
          \f[B]const\f[R] packetsSent =
            endRemoteOutbound.packetsSent \- startRemoteOutbound.packetsSent;
          \f[B]const\f[R] bytesSent =
            endRemoteOutbound.bytesSent \- startRemoteOutbound.bytesSent;
          \f[B]const\f[R] framesDecoded =
            endInboundStats.framesDecoded \- startInboundStats.framesDecoded;
          \f[B]const\f[R] frameRate = framesDecoded / elapsedTime;

          \f[B]let\f[R] timeString = \(dq\(dq;
          \f[B]if\f[R] (!isNaN(elapsedTime)) {
            timeString = \(ga representing ${elapsedTime}s\(ga;
          }

          \f[B]let\f[R] frameString = \(dq\(dq;
          \f[B]if\f[R] (!isNaN(framesDecoded)) {
            frameString = \(gaDecoded ${framesDecoded} frames for a frame rate of ${frameRate.toFixed(
              2,
            )} FPS.<br>\(ga;
          }

          \f[B]const\f[R] logEntry =
            \(ga<div class=\(dqstats\-entry\(dq><h2>Report ID: ${endRemoteOutbound.id}</h2>\(ga +
            \(gaRemote peer sent ${packetsSent} packets ${timeString}.<br>\(ga +
            \(ga${frameString}\(ga +
            \(gaData size: ${bytesSent} bytes.</div>\(ga;
          statsBox.innerHTML += logEntry;
        } \f[B]else\f[R] {
          statsBox.innerHTML += \(ga<div class=\(dqstats\-error\(dq>Unable to find initial statistics for ID ${endRemoteOutbound.id}.</div>\(ga;
        }
      }

      statsBox.scrollTo(0, statsBox.scrollHeight);
    }
  }
}
.EE
.PP
Here\(cqs what\(cqs going on in the \f[CR]networkTestStop()\f[R]
function: after calling the \f[CR]RTCPeerConnection\f[R] method
\f[CR]getStats()\f[R] to get the latest statistics report for the
connection and storing it in \f[CR]endReport\f[R].
This is an \f[CR]RTCStatsReport\f[R] object, which maps strings to
objects of the corresponding \f[CR]RTCStatsReport\f[R]\-based type.
.PP
Now we can begin to process the results, starting with the ending
statistics found in \f[CR]endReport\f[R].
In this case, we\(cqre looking for statistics records whose
\f[CR]type\f[R] is \f[CR]remote\-outbound\-rtp\f[R], so we iterate over
the entries in the statistics report until we find an entry of that
type.
This object is, specifically, of type
\f[CR]RTCRemoteOutboundRtpStreamStats\f[R], and it provides statistics
giving details about the state of things \f[I]from the perspective of
the remote peer\f[R].
This statistics record is stored in \f[CR]endRemoteOutbound\f[R].
.PP
Once the ending \f[CR]remote\-outbound\-rtp\f[R] record is found, we use
its \f[CR]id\f[R] property to get its ID.
With that in hand, we can look up the \f[CR]remote\-outbound\-rtp\f[R]
record in the starting statistics record (\f[CR]startReport\f[R]), which
we store into \f[CR]startRemoteOutbound\f[R].
.PP
Now we obtain the \f[CR]inbound\-rtp\f[R] statistics that correspond to
these two \f[CR]remote\-outbound\-rtp\f[R] records by finding the
\f[CR]remoteId\f[R] property within them whose value is the ID of the
\f[CR]remote\-outbound\-rtp\f[R] record.
We use the \f[CR]findReportEntry()\f[R] function described in the
previous section for that, storing the located \f[CR]inbound\-rtp\f[R]
records in \f[CR]startInboundStats\f[R] and \f[CR]endInboundStats\f[R].
.PP
Now we have all the raw statistics needed to calculate the information
we want to display, so we do so:
.IP \(bu 2
We calculate the amount of time\(em\f[CR]elapsedTime\f[R]\(emthat
elapsed between the two reports being sent by subtracting the
\f[CR]timestamp\f[R] \f[CR]startReport\f[R] from that of
\f[CR]endReport\f[R].
We then divide by 1000 to convert the result from milliseconds to
seconds.
.IP \(bu 2
We compute the number of packets sent during this
interval\(em\f[CR]packetsSent\f[R]\(emby subtracting the two reports\(cq
values for the \f[CR]packetsSent\f[R] property.
.IP \(bu 2
Similarly, the number of bytes sent during this
interval\(em\f[CR]bytesSent\f[R]\(emis calculated by subtracting the
starting statistics object\(cqs \f[CR]bytesSent\f[R] property from that
of the ending statistics.
.IP \(bu 2
The number of frames decoded during this
interval\(em\f[CR]framesDecoded\f[R]\(emis determined by subtracting
\f[CR]startRecord\f[R]\(cqs \f[CR]framesDecoded\f[R] from
\f[CR]endRecord.framesDecoded\f[R].
.IP \(bu 2
Finally, the frame rate over the elapsed time span is calculated by
dividing \f[CR]framesDecoded\f[R] by \f[CR]elapsedTime\f[R].
.PP
The remainder of the \f[CR]networkTestStop()\f[R] function constructs
the HTML used to display the output of the collected and computed
results to the user, then append it to the element \f[CR]statsBox\f[R],
which we\(cqre using to show the status updates to the user.
.PP
The output log, given the styles used by the example, looks like this:
[IMAGE: A screenshot of the example showing logged statistics taken from
paired remote\-outbound\-rtp and inbound\-rtp statistics records]
A screenshot of the example showing logged statistics taken from paired
remote\-outbound\-rtp and inbound\-rtp statistics records
.PP
In the screenshot, we see a heading followed by the scrollable
\f[CR]<div>\f[R] we refer to as \f[CR]statsBox\f[R].
The box contains a number of log entries, the last handful of which are
visible.
Each one represents approximately one second of time (since that\(cqs
much time we\(cqre waiting between calling \f[CR]networkTestStart()\f[R]
and \f[CR]networkTestStop()\f[R]).
.SS Try it and fork it
This example is \c
.UR https://websocket-webrtc-chat-with-stats.glitch.me/
available on Glitch for you to try out
.UE \c
, examine, or remix.
.PP
\c
.UR https://glitch.com/edit/?utm_content=project_websocket-webrtc-chat-with-stats&utm_source=remix_this&utm_medium=button&utm_campaign=glitchButton#!/remix/websocket-webrtc-chat-with-stats
Remix It
.UE \c
.PP
\c
.UR https://glitch.com/edit/?utm_content=project_websocket-webrtc-chat-with-stats&utm_source=view_source&utm_medium=button&utm_campaign=glitchButton#!/websocket-webrtc-chat-with-stats
View Source
.UE \c
