.\" Automatically generated by Pandoc 3.4
.\"
.TH "Array.shift" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.shift \- Array.prototype.shift()
.SH SYNOPSIS
The \f[B]\f[CB]shift()\f[B]\f[R] method of \f[CR]Array\f[R] instances
removes the \f[B]first\f[R] element from an array and returns that
removed element.
This method changes the length of the array.
.SH SYNTAX
.IP
.EX
shift()
.EE
.SS Parameters
None.
.SS Return value
The removed element from the array; \f[CR]undefined\f[R] if the array is
empty.
.SH DESCRIPTION
The \f[CR]shift()\f[R] method removes the element at the zeroth index
and shifts the values at consecutive indexes down, then returns the
removed value.
If the \f[CR]length\f[R] property is 0, \f[CR]undefined\f[R] is
returned.
.PP
The \f[CR]pop()\f[R] method has similar behavior to \f[CR]shift()\f[R],
but applied to the last element in an array.
.PP
The \f[CR]shift()\f[R] method is a mutating method.
It changes the length and the content of \f[CR]this\f[R].
In case you want the value of \f[CR]this\f[R] to be the same, but return
a new array with the first element removed, you can use
\f[CR]arr.slice(1)\f[R] instead.
.PP
The \f[CR]shift()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
Although strings are also array\-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH EXAMPLES
.SS Removing an element from an array
The following code displays the \f[CR]myFish\f[R] array before and after
removing its first element.
It also displays the removed element:
.IP
.EX
\f[B]const\f[R] myFish = [\[dq]angel\[dq], \[dq]clown\[dq], \[dq]mandarin\[dq], \[dq]surgeon\[dq]];

console.log(\[dq]myFish before:\[dq], myFish);
\f[I]// myFish before: [\[aq]angel\[aq], \[aq]clown\[aq], \[aq]mandarin\[aq], \[aq]surgeon\[aq]]\f[R]

\f[B]const\f[R] shifted = myFish.shift();

console.log(\[dq]myFish after:\[dq], myFish);
\f[I]// myFish after: [\[aq]clown\[aq], \[aq]mandarin\[aq], \[aq]surgeon\[aq]]\f[R]

console.log(\[dq]Removed this element:\[dq], shifted);
\f[I]// Removed this element: angel\f[R]
.EE
.SS Using shift() method in while loop
The shift() method is often used in condition inside while loop.
In the following example every iteration will remove the next element
from an array, until it is empty:
.IP
.EX
\f[B]const\f[R] names = [\[dq]Andrew\[dq], \[dq]Tyrone\[dq], \[dq]Paul\[dq], \[dq]Maria\[dq], \[dq]Gayatri\[dq]];

\f[B]while\f[R] (\f[B]typeof\f[R] (i = names.shift()) !== \[dq]undefined\[dq]) {
  console.log(i);
}
\f[I]// Andrew, Tyrone, Paul, Maria, Gayatri\f[R]
.EE
.SS Calling shift() on non\-array objects
The \f[CR]shift()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R].
If the normalized length is 0, \f[CR]length\f[R] is set to \f[CR]0\f[R]
again (whereas it may be negative or \f[CR]undefined\f[R] before).
Otherwise, the property at \f[CR]0\f[R] is returned, and the rest of the
properties are shifted left by one.
The \f[CR]length\f[R] property is decremented by one.
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  unrelated: \[dq]foo\[dq],
  2: 4,
};
console.log(Array.prototype.shift.call(arrayLike));
\f[I]// undefined, because it is an empty slot\f[R]
console.log(arrayLike);
\f[I]// { \[aq]1\[aq]: 4, length: 2, unrelated: \[aq]foo\[aq] }\f[R]

\f[B]const\f[R] plainObj = {};
\f[I]// There\[aq]s no length property, so the length is 0\f[R]
Array.prototype.shift.call(plainObj);
console.log(plainObj);
\f[I]// { length: 0 }\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.push()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.pop()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.unshift()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.concat()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.splice()\f[R]
