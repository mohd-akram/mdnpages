.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBOPENDBREQUEST.BLOCKED_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBOpenDBRequest.blocked_event \- IDBOpenDBRequest: blocked event
.SH SYNOPSIS
The \f[CR]blocked\f[R] handler is executed when an open connection to a
database is blocking a \f[CR]versionchange\f[R] transaction on the same
database.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqblocked\(dq, (event) => { })

onblocked = (event) => { }
.EE
.SH EVENT TYPE
An \f[CR]IDBVersionChangeEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent, \f[CI]Event\f[I]
interface.\f[R]
.TP
\f[B]IDBVersionChangeEvent.oldVersion\f[R] \f[I](read\-only)\f[R]
Returns the old version of the database.
.TP
\f[B]IDBVersionChangeEvent.newVersion\f[R] \f[I](read\-only)\f[R]
Returns the new version of the database.
.SH EXAMPLES
Using \f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[I]// Let\(aqs try to open the same database with a higher revision version\f[R]
  \f[B]const\f[R] req2 = indexedDB.open(\(dqtoDoList\(dq, 5);

  \f[I]// In this case the onblocked handler will be executed\f[R]
  req2.addEventListener(\(dqblocked\(dq, () \f[B]=>\f[R] {
    console.log(\(dqRequest was blocked\(dq);
  });
};
.EE
.PP
Using the \f[CR]onblocked\f[R] property:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[I]// Let\(aqs try to open the same database with a higher revision version\f[R]
  \f[B]const\f[R] req2 = indexedDB.open(\(dqtoDoList\(dq, 5);

  \f[I]// In this case the onblocked handler will be executed\f[R]
  req2.onblocked = () \f[B]=>\f[R] {
    console.log(\(dqRequest was blocked\(dq);
  };
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
