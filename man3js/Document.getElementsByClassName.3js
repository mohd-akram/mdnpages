.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DOCUMENT.GETELEMENTSBYCLASSNAME" "3JS" "June 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.getElementsByClassName \- Document: getElementsByClassName()
method
.SH SYNOPSIS
The \f[B]\f[CB]getElementsByClassName\f[B]\f[R] method of
\f[CR]Document\f[R] interface returns an array\-like object of all child
elements which have all of the given class name(s).
.PP
When called on the \f[CR]document\f[R] object, the complete document is
searched, including the root node.
You may also call \f[CR]getElementsByClassName()\f[R] on any element; it
will return only elements which are descendants of the specified root
element with the given class name(s).
.RS
.PP
\f[B]Warning:\f[R] This is a live \f[CR]HTMLCollection\f[R].
Changes in the DOM will reflect in the array as the changes occur.
If an element selected by this array no longer qualifies for the
selector, it will automatically be removed.
Be aware of this for iteration purposes.
.RE
.SH SYNTAX
.IP
.EX
getElementsByClassName(names)
.EE
.SS Parameters
.TP
\f[B]names\f[R]
A string representing the class name(s) to match; multiple class names
are separated by whitespace.
.SS Return value
A live \f[CR]HTMLCollection\f[R] of found elements.
.SH EXAMPLES
Get all elements that have a class of `test':
.IP
.EX
document.getElementsByClassName(\(dqtest\(dq);
.EE
.PP
Get all elements that have both the `red' and `test' classes:
.IP
.EX
document.getElementsByClassName(\(dqred test\(dq);
.EE
.PP
Get all elements that have a class of `test', inside of an element that
has the ID of `main':
.IP
.EX
document.getElementById(\(dqmain\(dq).getElementsByClassName(\(dqtest\(dq);
.EE
.PP
Get the first element with a class of `test', or \f[CR]undefined\f[R] if
there is no matching element:
.IP
.EX
document.getElementsByClassName(\(dqtest\(dq)[0];
.EE
.PP
We can also use methods of Array.prototype on any
\f[CR]HTMLCollection\f[R] by passing the \f[CR]HTMLCollection\f[R] as
the method\(cqs \f[I]this\f[R] value.
Here we\(cqll find all div elements that have a class of `test':
.IP
.EX
\f[B]const\f[R] testElements = document.getElementsByClassName(\(dqtest\(dq);
\f[B]const\f[R] testDivs = Array.prototype.filter.call(
  testElements,
  (testElement) \f[B]=>\f[R] testElement.nodeName === \(dqDIV\(dq,
);
.EE
.SS Get the first element whose class is `test'
This is the most commonly used method of operation.
.IP
.EX
<\f[B]div\f[R] id=\(dqparent\-id\(dq>
  <\f[B]p\f[R]>hello world 1</\f[B]p\f[R]>
  <\f[B]p\f[R] class=\(dqtest\(dq>hello world 2</\f[B]p\f[R]>
  <\f[B]p\f[R]>hello world 3</\f[B]p\f[R]>
  <\f[B]p\f[R]>hello world 4</\f[B]p\f[R]>
</\f[B]div\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] parentDOM = document.getElementById(\(dqparent\-id\(dq);

\f[B]const\f[R] test = parentDOM.getElementsByClassName(\(dqtest\(dq); \f[I]// a list of matching elements, *not* the element itself\f[R]
console.log(test); \f[I]// HTMLCollection[1]\f[R]

\f[B]const\f[R] testTarget = parentDOM.getElementsByClassName(\(dqtest\(dq)[0]; \f[I]// the first element, as we wanted\f[R]
console.log(testTarget); \f[I]// <p class=\(dqtest\(dq>hello world 2</p>\f[R]
.EE
.SS Multiple Classes Example
\f[CR]document.getElementsByClassName\f[R] works very similarly to
\f[CR]document.querySelector\f[R] and
\f[CR]document.querySelectorAll\f[R].
Only elements with ALL of the classNames specified are selected.
.SS HTML
.IP
.EX
<\f[B]span\f[R] class=\(dqorange fruit\(dq>Orange Fruit</\f[B]span\f[R]>
<\f[B]span\f[R] class=\(dqorange juice\(dq>Orange Juice</\f[B]span\f[R]>
<\f[B]span\f[R] class=\(dqapple juice\(dq>Apple Juice</\f[B]span\f[R]>
<\f[B]span\f[R] class=\(dqfoo bar\(dq>Something Random</\f[B]span\f[R]>
<\f[B]textarea\f[R] id=\(dqresultArea\(dq></\f[B]textarea\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[I]// getElementsByClassName only selects elements that have both given classes\f[R]
\f[B]const\f[R] allOrangeJuiceByClass = document.getElementsByClassName(\(dqorange juice\(dq);
\f[B]let\f[R] result = \(dqdocument.getElementsByClassName(\(aqorange juice\(aq)\(dq;
\f[B]for\f[R] (\f[B]const\f[R] el \f[B]of\f[R] allOrangeJuiceByClass) {
  result += \(ga\(rsn  ${el.textContent}\(ga;
}

\f[I]// querySelector only selects full complete matches\f[R]
\f[B]const\f[R] allOrangeJuiceQuery = document.querySelectorAll(\(dq.orange.juice\(dq);
result += \(dq\(rsn\(rsndocument.querySelectorAll(\(aq.orange.juice\(aq)\(dq;
\f[B]for\f[R] (\f[B]const\f[R] el \f[B]of\f[R] allOrangeJuiceQuery) {
  result += \(ga\(rsn  ${el.textContent}\(ga;
}

document.getElementById(\(dqresultArea\(dq).value = result;
.EE
.SS Result
