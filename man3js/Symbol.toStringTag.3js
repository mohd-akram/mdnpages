'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Symbol.toStringTag" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.toStringTag \- Symbol.toStringTag
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.toStringTag\f[B]\f[R] static data property
represents the well\-known symbol \f[CR]Symbol.toStringTag\f[R].
\f[CR]Object.prototype.toString()\f[R] looks up this symbol on the
\f[CR]this\f[R] value for the property containing a string that
represents the type of the object.
.IP
.EX
\f[B]class\f[R] ValidatorClass {
  \f[B]get\f[R] [Symbol.toStringTag]() {
    \f[B]return\f[R] \[dq]Validator\[dq];
  }
}

console.log(Object.prototype.toString.call(\f[B]new\f[R] ValidatorClass()));
\f[I]// Expected output: \[dq][object Validator]\[dq]\f[R]
.EE
.SH VALUE
The well\-known symbol \f[CR]Symbol.toStringTag\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH EXAMPLES
.SS Default tags
Some values do not have \f[CR]Symbol.toStringTag\f[R], but have special
\f[CR]toString()\f[R] representations.
For a complete list, see \f[CR]Object.prototype.toString()\f[R].
.IP
.EX
Object.prototype.toString.call(\[dq]foo\[dq]); \f[I]// \[dq][object String]\[dq]\f[R]
Object.prototype.toString.call([1, 2]); \f[I]// \[dq][object Array]\[dq]\f[R]
Object.prototype.toString.call(3); \f[I]// \[dq][object Number]\[dq]\f[R]
Object.prototype.toString.call(\f[B]true\f[R]); \f[I]// \[dq][object Boolean]\[dq]\f[R]
Object.prototype.toString.call(\f[B]undefined\f[R]); \f[I]// \[dq][object Undefined]\[dq]\f[R]
Object.prototype.toString.call(\f[B]null\f[R]); \f[I]// \[dq][object Null]\[dq]\f[R]
\f[I]// ... and more\f[R]
.EE
.SS Built\-in toStringTag symbols
Most built\-in objects provide their own \f[CR][Symbol.toStringTag]\f[R]
property.
Almost all built\-in objects\[cq] \f[CR][Symbol.toStringTag]\f[R]
property is not writable, not enumerable, and configurable; the
exception is \f[CR]Iterator\f[R], which is writable for compatibility
reasons.
.PP
For constructor objects like \f[CR]Promise\f[R], the property is
installed on \f[CR]Constructor.prototype\f[R], so that all instances of
the constructor inherit \f[CR][Symbol.toStringTag]\f[R] and can be
stringified.
For non\-constructor objects like \f[CR]Math\f[R] and \f[CR]JSON\f[R],
the property is installed as a static property, so that the namespace
object itself can be stringified.
Sometimes, the constructor also provides its own \f[CR]toString\f[R]
method (for example, \f[CR]Intl.Locale\f[R]), in which case the
\f[CR][Symbol.toStringTag]\f[R] property is only used when you
explicitly call \f[CR]Object.prototype.toString\f[R] on it.
.IP
.EX
Object.prototype.toString.call(\f[B]new\f[R] Map()); \f[I]// \[dq][object Map]\[dq]\f[R]
Object.prototype.toString.call(\f[B]function\f[R]* () {}); \f[I]// \[dq][object GeneratorFunction]\[dq]\f[R]
Object.prototype.toString.call(Promise.resolve()); \f[I]// \[dq][object Promise]\[dq]\f[R]
\f[I]// ... and more\f[R]
.EE
.SS Custom tag with toStringTag
When creating your own class, JavaScript defaults to the
\[lq]Object\[rq] tag:
.IP
.EX
\f[B]class\f[R] ValidatorClass {}

Object.prototype.toString.call(\f[B]new\f[R] ValidatorClass()); \f[I]// \[dq][object Object]\[dq]\f[R]
.EE
.PP
Now, with the help of \f[CR]toStringTag\f[R], you are able to set your
own custom tag:
.IP
.EX
\f[B]class\f[R] ValidatorClass {
  \f[B]get\f[R] [Symbol.toStringTag]() {
    \f[B]return\f[R] \[dq]Validator\[dq];
  }
}

Object.prototype.toString.call(\f[B]new\f[R] ValidatorClass()); \f[I]// \[dq][object Validator]\[dq]\f[R]
.EE
.SS toStringTag available on all DOM prototype objects
Due to a \c
.UR https://github.com/whatwg/webidl/pull/357
WebIDL spec change
.UE \c
\ in mid\-2020, browsers are adding a \f[CR]Symbol.toStringTag\f[R]
property to all DOM prototype objects.
For example, to access the \f[CR]Symbol.toStringTag\f[R] property on
\f[CR]HTMLButtonElement\f[R]:
.IP
.EX
\f[B]const\f[R] test = document.createElement(\[dq]button\[dq]);
test.toString(); \f[I]// \[dq][object HTMLButtonElement]\[dq]\f[R]
test[Symbol.toStringTag]; \f[I]// \[dq]HTMLButtonElement\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-symbol
Polyfill of \f[CR]Symbol.toStringTag\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Object.prototype.toString()\f[R]
