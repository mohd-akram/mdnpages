'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "IDBIndex.multiEntry" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBIndex.multiEntry \- IDBIndex: multiEntry property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]multiEntry\f[B]\f[R] read\-only property of the
\f[CR]IDBIndex\f[R] interface returns a boolean value that affects how
the index behaves when the result of evaluating the index\[cq]s key path
yields an array.
.PP
This is decided when the index is created, using the
\f[CR]IDBObjectStore.createIndex\f[R] method.
This method takes an optional \f[CR]options\f[R] parameter whose
\f[CR]multiEntry\f[R] property is set to
\f[CR]true\f[R]/\f[CR]false\f[R].
.SH VALUE
A boolean value:
.PP
.TS
tab(@);
lw(4.9n) lw(65.1n).
T{
Value
T}@T{
Effect
T}
_
T{
true
T}@T{
There is one record in the index for each item in an array of keys.
T}
T{
false
T}@T{
There is one record for each key that is an array.
T}
.TE
.SH EXAMPLES
In the following example we open a transaction and an object store, then
get the index \f[CR]lName\f[R] from a simple contacts database.
We then open a basic cursor on the index using
\f[CR]IDBIndex.openCursor\f[R] \[em] this works the same as opening a
cursor directly on an \f[CR]ObjectStore\f[R] using
\f[CR]IDBObjectStore.openCursor\f[R] except that the returned records
are sorted based on the index, not the primary key.
.PP
The multi\-entry status of the index is logged to the console: it should
be returned as \f[CR]false\f[R].
.PP
Finally, we iterate through each record, and insert the data into an
HTML table.
For a complete working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/indexeddb-examples/idbindex
IndexedDB\-examples demo repo
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/indexeddb-examples/idbindex/
View the example live
.UE \c
).
.IP
.EX
\f[B]function\f[R] displayDataByIndex() {
  tableEntry.textContent = \[dq]\[dq];
  \f[B]const\f[R] transaction = db.transaction([\[dq]contactsList\[dq]], \[dq]readonly\[dq]);
  \f[B]const\f[R] objectStore = transaction.objectStore(\[dq]contactsList\[dq]);

  \f[B]const\f[R] myIndex = objectStore.index(\[dq]lName\[dq]);
  console.log(myIndex.multiEntry);

  myIndex.openCursor().onsuccess = (event) \f[B]=>\f[R] {
    \f[B]const\f[R] cursor = event.target.result;
    \f[B]if\f[R] (cursor) {
      \f[B]const\f[R] tableRow = document.createElement(\[dq]tr\[dq]);
      \f[B]for\f[R] (\f[B]const\f[R] cell \f[B]of\f[R] [
        cursor.value.id,
        cursor.value.lName,
        cursor.value.fName,
        cursor.value.jTitle,
        cursor.value.company,
        cursor.value.eMail,
        cursor.value.phone,
        cursor.value.age,
      ]) {
        \f[B]const\f[R] tableCell = document.createElement(\[dq]td\[dq]);
        tableCell.textContent = cell;
        tableRow.appendChild(tableCell);
      }
      tableEntry.appendChild(tableRow);

      cursor.continue();
    } \f[B]else\f[R] {
      console.log(\[dq]Entries all displayed.\[dq]);
    }
  };
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
