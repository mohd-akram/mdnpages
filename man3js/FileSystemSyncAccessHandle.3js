.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "FileSystemSyncAccessHandle" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemSyncAccessHandle \- FileSystemSyncAccessHandle
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is only available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]FileSystemSyncAccessHandle\f[B]\f[R] interface of the
File System API represents a synchronous handle to a file system entry.
.PP
This class is only accessible inside dedicated Web Workers (so that its
methods do not block execution on the main thread) for files within the
origin private file system, which is not visible to end\-users.
.PP
As a result, its methods are not subject to the same security checks as
methods running on files within the user\-visible file system, and so
are much more performant.
This makes them suitable for significant, large\-scale file updates such
as \c
.UR https://www.sqlite.org/wasm
SQLite
.UE \c
\ database modifications.
.PP
The interface is accessed through the
\f[CR]FileSystemFileHandle.createSyncAccessHandle()\f[R] method.
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the spec, \f[CR]close()\f[R],
\f[CR]flush()\f[R], \f[CR]getSize()\f[R], and \f[CR]truncate()\f[R] were
wrongly specified as asynchronous methods, and older versions of some
browsers implement them in this way.
However, all current browsers that support these methods implement them
as synchronous methods.
.RE
.SH INSTANCE PROPERTIES
None.
.SH INSTANCE METHODS
.TP
\f[B]close()\f[R]
Closes an open synchronous file handle, disabling any further operations
on it and releasing the exclusive lock previously put on the file
associated with the file handle.
.TP
\f[B]flush()\f[R]
Persists any changes made to the file associated with the handle via the
\f[CR]write()\f[R] method to disk.
.TP
\f[B]getSize()\f[R]
Returns the size of the file associated with the handle in bytes.
.TP
\f[B]read()\f[R]
Reads the content of the file associated with the handle into a
specified buffer, optionally at a given offset.
.TP
\f[B]truncate()\f[R]
Resizes the file associated with the handle to a specified number of
bytes.
.TP
\f[B]write()\f[R]
Writes the content of a specified buffer to the file associated with the
handle, optionally at a given offset.
.SH EXAMPLES
The following asynchronous event handler function is contained inside a
Web Worker.
On receiving a message from the main thread it:
.IP \[bu] 2
Creates a synchronous file access handle.
.IP \[bu] 2
Gets the size of the file and creates an \f[CR]ArrayBuffer\f[R] to
contain it.
.IP \[bu] 2
Reads the file contents into the buffer.
.IP \[bu] 2
Encodes the message and writes it to the end of the file.
.IP \[bu] 2
Persists the changes to disk and closes the access handle.
.IP
.EX
onmessage = \f[B]async\f[R] (e) \f[B]=>\f[R] {
  \f[I]// Retrieve message sent to work from main script\f[R]
  \f[B]const\f[R] message = e.data;

  \f[I]// Get handle to draft file\f[R]
  \f[B]const\f[R] root = \f[B]await\f[R] navigator.storage.getDirectory();
  \f[B]const\f[R] draftHandle = \f[B]await\f[R] root.getFileHandle(\[dq]draft.txt\[dq], { create: \f[B]true\f[R] });
  \f[I]// Get sync access handle\f[R]
  \f[B]const\f[R] accessHandle = \f[B]await\f[R] draftHandle.createSyncAccessHandle();

  \f[I]// Get size of the file.\f[R]
  \f[B]const\f[R] fileSize = accessHandle.getSize();
  \f[I]// Read file content to a buffer.\f[R]
  \f[B]const\f[R] buffer = \f[B]new\f[R] DataView(\f[B]new\f[R] ArrayBuffer(fileSize));
  \f[B]const\f[R] readBuffer = accessHandle.read(buffer, { at: 0 });

  \f[I]// Write the message to the end of the file.\f[R]
  \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
  \f[B]const\f[R] encodedMessage = encoder.encode(message);
  \f[B]const\f[R] writeBuffer = accessHandle.write(encodedMessage, { at: readBuffer });

  \f[I]// Persist changes to disk.\f[R]
  accessHandle.flush();

  \f[I]// Always close FileSystemSyncAccessHandle if done.\f[R]
  accessHandle.close();
};
.EE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
