.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Date.UTC" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.UTC \- Date.UTC()
.SH SYNOPSIS
The \f[B]\f[CB]Date.UTC()\f[B]\f[R] static method accepts parameters
representing the date and time components similar to the \f[CR]Date\f[R]
constructor, but treats them as UTC.
It returns the number of milliseconds since January 1, 1970, 00:00:00
UTC.
.IP
.EX
\f[B]const\f[R] utcDate1 = \f[B]new\f[R] Date(Date.UTC(96, 1, 2, 3, 4, 5));
\f[B]const\f[R] utcDate2 = \f[B]new\f[R] Date(Date.UTC(0, 0, 0, 0, 0, 0));

console.log(utcDate1.toUTCString());
\f[I]// Expected output: \[dq]Fri, 02 Feb 1996 03:04:05 GMT\[dq]\f[R]

console.log(utcDate2.toUTCString());
\f[I]// Expected output: \[dq]Sun, 31 Dec 1899 00:00:00 GMT\[dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
Date.UTC(year)
Date.UTC(year, monthIndex)
Date.UTC(year, monthIndex, day)
Date.UTC(year, monthIndex, day, hours)
Date.UTC(year, monthIndex, day, hours, minutes)
Date.UTC(year, monthIndex, day, hours, minutes, seconds)
Date.UTC(year, monthIndex, day, hours, minutes, seconds, milliseconds)
.EE
.SS Parameters
.TP
\f[B]year\f[R]
Integer value representing the year.
Values from \f[CR]0\f[R] to \f[CR]99\f[R] map to the years
\f[CR]1900\f[R] to \f[CR]1999\f[R].
All other values are the actual year.
See the example.
.TP
\f[B]monthIndex\f[R] \f[I](optional)\f[R]
Integer value representing the month, beginning with \f[CR]0\f[R] for
January to \f[CR]11\f[R] for December.
Defaults to \f[CR]0\f[R].
.TP
\f[B]day\f[R] \f[I](optional)\f[R]
Integer value representing the day of the month.
Defaults to \f[CR]1\f[R].
.TP
\f[B]hours\f[R] \f[I](optional)\f[R]
Integer value between \f[CR]0\f[R] and \f[CR]23\f[R] representing the
hour of the day.
Defaults to \f[CR]0\f[R].
.TP
\f[B]minutes\f[R] \f[I](optional)\f[R]
Integer value representing the minute segment of a time.
Defaults to \f[CR]0\f[R].
.TP
\f[B]seconds\f[R] \f[I](optional)\f[R]
Integer value representing the second segment of a time.
Defaults to \f[CR]0\f[R].
.TP
\f[B]milliseconds\f[R] \f[I](optional)\f[R]
Integer value representing the millisecond segment of a time.
Defaults to \f[CR]0\f[R].
.SS Return value
A number representing the timestamp of the given date.
Returns \f[CR]NaN\f[R] if the date is invalid.
.SH DESCRIPTION
Years between \f[CR]0\f[R] and \f[CR]99\f[R] are converted to a year in
the 20th century \f[CR](1900 + year)\f[R].
For example, \f[CR]95\f[R] is converted to the year \f[CR]1995\f[R].
.PP
The \f[CR]UTC()\f[R] method differs from the \f[CR]Date()\f[R]
constructor in three ways:
.IP "1." 3
\f[CR]Date.UTC()\f[R] uses universal time instead of the local time.
.IP "2." 3
\f[CR]Date.UTC()\f[R] returns a time value as a number instead of
creating a \f[CR]Date\f[R] object.
.IP "3." 3
When passed a single number, \f[CR]Date.UTC()\f[R] interprets it as a
year instead of a timestamp.
.PP
If a parameter is outside of the expected range, the \f[CR]UTC()\f[R]
method updates the other parameters to accommodate the value.
For example, if \f[CR]15\f[R] is used for \f[CR]monthIndex\f[R], the
year will be incremented by 1 \f[CR](year + 1)\f[R] and \f[CR]3\f[R]
will be used for the month.
.PP
Because \f[CR]UTC()\f[R] is a static method of \f[CR]Date\f[R], you
always use it as \f[CR]Date.UTC()\f[R], rather than as a method of a
\f[CR]Date\f[R] object you created.
.SH EXAMPLES
.SS Using Date.UTC()
The following statement creates a \f[CR]Date\f[R] object with the
arguments treated as UTC instead of local:
.IP
.EX
\f[B]const\f[R] utcDate = \f[B]new\f[R] Date(Date.UTC(2018, 11, 1, 0, 0, 0));
.EE
.SS Behavior of Date.UTC() with one argument
\f[CR]Date.UTC()\f[R] when passed one argument used to have inconsistent
behavior, because implementations only kept the behavior consistent with
the \f[CR]Date()\f[R] constructor, which does not interpret a single
argument as the year number.
Implementations are now required to treat omitted \f[CR]monthIndex\f[R]
as \f[CR]0\f[R], instead of coercing it to \f[CR]NaN\f[R].
.IP
.EX
Date.UTC(2017); \f[I]// 1483228800000\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Date.parse()\f[R]
.IP \[bu] 2
\f[CR]Date\f[R]
