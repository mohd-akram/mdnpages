.\" Automatically generated by Pandoc 3.4
.\"
.TH "SubtleCrypto.deriveKey" "JS" "November 11, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SubtleCrypto.deriveKey \- SubtleCrypto: deriveKey() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]deriveKey()\f[B]\f[R] method of the
\f[CR]SubtleCrypto\f[R] interface can be used to derive a secret key
from a master key.
.PP
It takes as arguments some initial key material, the derivation
algorithm to use, and the desired properties for the key to derive.
It returns a \f[CR]Promise\f[R] which will be fulfilled with a
\f[CR]CryptoKey\f[R] object representing the new key.
.PP
It\[cq]s worth noting that the supported key derivation algorithms have
quite different characteristics and are appropriate in quite different
situations.
See Supported algorithms for some more detail on this.
.SH SYNTAX
.IP
.EX
deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, keyUsages)
.EE
.SS Parameters
.TP
\f[B]algorithm\f[R]
An object defining the derivation algorithm to use.
.RS
.IP \[bu] 2
To use ECDH, pass an \f[CR]EcdhKeyDeriveParams\f[R] object, specifying
the string \f[CR]ECDH\f[R] as the \f[CR]name\f[R] property.
.IP \[bu] 2
To use HKDF, pass an \f[CR]HkdfParams\f[R] object.
.IP \[bu] 2
To use PBKDF2, pass a \f[CR]Pbkdf2Params\f[R] object.
.IP \[bu] 2
To use X25519, pass an \f[CR]EcdhKeyDeriveParams\f[R] object, specifying
the string \f[CR]X25519\f[R] as the \f[CR]name\f[R] property.
.RE
.TP
\f[B]baseKey\f[R]
A \f[CR]CryptoKey\f[R] representing the input to the derivation
algorithm.
If \f[CR]algorithm\f[R] is ECDH or X25519, then this will be the ECDH or
X25519 private key.
Otherwise it will be the initial key material for the derivation
function: for example, for PBKDF2 it might be a password, imported as a
\f[CR]CryptoKey\f[R] using \f[CR]SubtleCrypto.importKey()\f[R].
.TP
\f[B]derivedKeyAlgorithm\f[R]
An object defining the algorithm the derived key will be used for:
.RS
.IP \[bu] 2
For HMAC pass an \f[CR]HmacKeyGenParams\f[R] object.
.IP \[bu] 2
For AES\-CTR, AES\-CBC, AES\-GCM, or AES\-KW, pass an
\f[CR]AesKeyGenParams\f[R] object.
.IP \[bu] 2
For HKDF, pass an \f[CR]HkdfParams\f[R] object.
.IP \[bu] 2
For PBKDF2, pass a \f[CR]Pbkdf2Params\f[R] object.
.RE
.TP
\f[B]extractable\f[R]
A boolean value indicating whether it will be possible to export the key
using \f[CR]SubtleCrypto.exportKey()\f[R] or
\f[CR]SubtleCrypto.wrapKey()\f[R].
.TP
\f[B]keyUsages\f[R]
An \f[CR]Array\f[R] indicating what can be done with the derived key.
Note that the key usages must be allowed by the algorithm set in
\f[CR]derivedKeyAlgorithm\f[R].
Possible values of the array are:
.RS
.IP \[bu] 2
\f[CR]encrypt\f[R]: The key may be used to encrypt messages.
.IP \[bu] 2
\f[CR]decrypt\f[R]: The key may be used to decrypt messages.
.IP \[bu] 2
\f[CR]sign\f[R]: The key may be used to sign messages.
.IP \[bu] 2
\f[CR]verify\f[R]: The key may be used to verify signatures.
.IP \[bu] 2
\f[CR]deriveKey\f[R]: The key may be used in deriving a new key.
.IP \[bu] 2
\f[CR]deriveBits\f[R]: The key may be used in deriving bits.
.IP \[bu] 2
\f[CR]wrapKey\f[R]: The key may be used to wrap a key.
.IP \[bu] 2
\f[CR]unwrapKey\f[R]: The key may be used to unwrap a key.
.RE
.SS Return value
A \f[CR]Promise\f[R] that fulfills with a \f[CR]CryptoKey\f[R].
.SS Exceptions
The promise is rejected when one of the following exceptions are
encountered:
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Raised when the master key is not a key for the requested derivation
algorithm or if the \f[CR]keyUsages\f[R] value of that key doesn\[cq]t
contain \f[CR]deriveKey\f[R].
.TP
\f[B]NotSupported\f[R] \f[B]DOMException\f[R]
Raised when trying to use an algorithm that is either unknown or
isn\[cq]t suitable for derivation, or if the algorithm requested for the
derived key doesn\[cq]t define a key length.
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Raised when \f[CR]keyUsages\f[R] is empty but the unwrapped key is of
type \f[CR]secret\f[R] or \f[CR]private\f[R].
.SH SUPPORTED ALGORITHMS
The algorithms supported by \f[CR]deriveKey()\f[R] have quite different
characteristics and are appropriate in different situations.
.SS Key derivation algorithms
.SS HKDF
HKDF is a \f[I]key derivation function\f[R].
It\[cq]s designed to derive key material from some high\-entropy input,
such as the output of an ECDH key agreement operation.
.PP
It\[cq]s \f[I]not\f[R] designed to derive keys from relatively
low\-entropy inputs such as passwords.
For that, use PBKDF2.
.PP
HKDF is specified in \c
.UR https://datatracker.ietf.org/doc/html/rfc5869
RFC 5869
.UE \c
\&.
.SS PBKDF2
PBKDF2 is also a \f[I]key derivation function\f[R].
It\[cq]s designed to derive key material from some relatively
low\-entropy input, such as a password.
It derives key material by applying a function such as HMAC to the input
password along with some salt, and repeating this process many times.
The more times the process is repeated, the more computationally
expensive key derivation is: this makes it harder for an attacker to use
brute\-force to discover the key using a dictionary attack.
.PP
PBKDF2 is specified in \c
.UR https://datatracker.ietf.org/doc/html/rfc2898
RFC 2898
.UE \c
\&.
.SS Key agreement algorithms
.SS ECDH
ECDH (Elliptic Curve Diffie\-Hellman) is a \f[I]key\-agreement
algorithm\f[R].
It enables two people who each have an ECDH public/private key pair to
generate a shared secret: that is, a secret that they \[em] and no one
else \[em] share.
They can then use this shared secret as a symmetric key to secure their
communication, or can use the secret as an input to derive such a key
(for example, using the HKDF algorithm).
.PP
ECDH is specified in \c
.UR https://datatracker.ietf.org/doc/html/rfc6090
RFC 6090
.UE \c
\&.
.SS X25519
X25519 is a key agreement algorithm like ECDH, but built on the \c
.UR https://en.wikipedia.org/wiki/Curve25519
Curve25519
.UE \c
\ elliptic curve, which is part of the Edwards\-Curve Digital Signature
Algorithm (EdDSA) family of algorithms defined in RFC 8032.
.PP
The Curve25519 algorithms are widely used in cryptography, and are
considered to be some of the most efficient/fast available.
By comparison with the NIST (National Institute of Standards and
Technology) curve key exchange algorithms used with ECDH, Curve25519 is
simpler to implement, and its non\-governmental origin means that the
decisions behind its design choices are transparent and open.
.PP
X25519 is specified in RFC 7748.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] You can \c
.UR https://mdn.github.io/dom-examples/web-crypto/derive-key/index.html
try the working examples
.UE \c
\ on GitHub.
.RE
.SS ECDH: derive shared secret key
In this example Alice and Bob each generate an ECDH key pair, then
exchange public keys.
They then use \f[CR]deriveKey()\f[R] to derive a shared AES key, that
they could use to encrypt messages.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/derive-key/ecdh.js
See the complete code on GitHub.
.UE \c
.IP
.EX
\f[I]/*\f[R]
\f[I]Derive an AES key, given:\f[R]
\f[I]\- our ECDH private key\f[R]
\f[I]\- their ECDH public key\f[R]
\f[I]*/\f[R]
\f[B]function\f[R] deriveSecretKey(privateKey, publicKey) {
  \f[B]return\f[R] window.crypto.subtle.deriveKey(
    {
      name: \[dq]ECDH\[dq],
      public: publicKey,
    },
    privateKey,
    {
      name: \[dq]AES\-GCM\[dq],
      length: 256,
    },
    \f[B]false\f[R],
    [\[dq]encrypt\[dq], \[dq]decrypt\[dq]],
  );
}

\f[B]async\f[R] \f[B]function\f[R] agreeSharedSecretKey() {
  \f[I]// Generate 2 ECDH key pairs: one for Alice and one for Bob\f[R]
  \f[I]// In more normal usage, they would generate their key pairs\f[R]
  \f[I]// separately and exchange public keys securely\f[R]
  \f[B]let\f[R] aliceKeyPair = \f[B]await\f[R] window.crypto.subtle.generateKey(
    {
      name: \[dq]ECDH\[dq],
      namedCurve: \[dq]P\-384\[dq],
    },
    \f[B]false\f[R],
    [\[dq]deriveKey\[dq]],
  );

  \f[B]let\f[R] bobKeyPair = \f[B]await\f[R] window.crypto.subtle.generateKey(
    {
      name: \[dq]ECDH\[dq],
      namedCurve: \[dq]P\-384\[dq],
    },
    \f[B]false\f[R],
    [\[dq]deriveKey\[dq]],
  );

  \f[I]// Alice then generates a secret key using her private key and Bob\[aq]s public key.\f[R]
  \f[B]let\f[R] aliceSecretKey = \f[B]await\f[R] deriveSecretKey(
    aliceKeyPair.privateKey,
    bobKeyPair.publicKey,
  );

  \f[I]// Bob generates the same secret key using his private key and Alice\[aq]s public key.\f[R]
  \f[B]let\f[R] bobSecretKey = \f[B]await\f[R] deriveSecretKey(
    bobKeyPair.privateKey,
    aliceKeyPair.publicKey,
  );

  \f[I]// Alice can then use her copy of the secret key to encrypt a message to Bob.\f[R]
  \f[B]let\f[R] encryptButton = document.querySelector(\[dq].ecdh .encrypt\-button\[dq]);
  encryptButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
    encrypt(aliceSecretKey);
  });

  \f[I]// Bob can use his copy to decrypt the message.\f[R]
  \f[B]let\f[R] decryptButton = document.querySelector(\[dq].ecdh .decrypt\-button\[dq]);
  decryptButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
    decrypt(bobSecretKey);
  });
}
.EE
.SS X25519: derive shared secret key
In this example Alice and Bob each generate an X25519 key pair, then
exchange public keys.
They then each use \f[CR]deriveKey()\f[R] to derive a shared AES key
from their own private key and each other\[cq]s public key.
They can use this shared key to encrypt and decrypt messages they
exchange.
.SS HTML
First we define an HTML \f[CR]<input>\f[R] that you will use to enter
the plaintext message that \[lq]Alice\[rq] will send, and a button that
you can click to start the encryption process.
.IP
.EX
<\f[B]label\f[R] for=\[dq]message\[dq]>Plaintext message from Alice (Enter):</\f[B]label\f[R]>
<\f[B]input\f[R]
  type=\[dq]text\[dq]
  id=\[dq]message\[dq]
  name=\[dq]message\[dq]
  size=\[dq]50\[dq]
  value=\[dq]The lion roars near dawn\[dq] />
<\f[B]input\f[R] id=\[dq]encrypt\-button\[dq] type=\[dq]button\[dq] value=\[dq]Encrypt\[dq] />
.EE
.PP
This is followed by another two elements for displaying the ciphertext
after Alice has encrypted the plaintext with her copy of the secret key,
and for displaying the text after Bob has decrypted it with his copy of
the secret key.
.IP
.EX
<\f[B]div\f[R] id=\[dq]results\[dq]>
  <\f[B]label\f[R] for=\[dq]encrypted\[dq]>Encrypted (Alice)</\f[B]label\f[R]>
  <\f[B]input\f[R]
    type=\[dq]text\[dq]
    id=\[dq]encrypted\[dq]
    name=\[dq]encrypted\[dq]
    size=\[dq]30\[dq]
    value=\[dq]\[dq]
    readonly />

  <\f[B]label\f[R] for=\[dq]results\[dq]>Decrypted (Bob)</\f[B]label\f[R]>
  <\f[B]input\f[R]
    type=\[dq]text\[dq]
    id=\[dq]decrypted\[dq]
    name=\[dq]decrypted\[dq]
    size=\[dq]50\[dq]
    value=\[dq]\[dq]
    readonly />
</\f[B]div\f[R]>
.EE
.SS JavaScript
The code below shows how we use \f[CR]deriveKey()\f[R].
We pass in the remote party\[cq]s X25519 public key, the local
party\[cq]s X25519 private key, and specify that the derived key should
be an AES\-GCM key.
We also set the derived key to be non\-extractable, and suitable for
encryption and decryption.
.PP
We use this function further down in the code to create shared keys for
Bob and Alice.
.IP
.EX
\f[I]/*\f[R]
\f[I]Derive an AES\-GCM key, given:\f[R]
\f[I]\- our X25519 private key\f[R]
\f[I]\- their X25519 public key\f[R]
\f[I]*/\f[R]
\f[B]function\f[R] deriveSecretKey(privateKey, publicKey) {
  \f[B]return\f[R] window.crypto.subtle.deriveKey(
    {
      name: \[dq]X25519\[dq],
      public: publicKey,
    },
    privateKey,
    {
      name: \[dq]AES\-GCM\[dq],
      length: 256,
    },
    \f[B]false\f[R],
    [\[dq]encrypt\[dq], \[dq]decrypt\[dq]],
  );
}
.EE
.PP
Next we define the functions that Alice will use to UTF\-8 encode and
then encrypt her plaintext message, and that Bob will use to decrypt and
then decode the message.
They both take as arguments the shared AES key, an initialization
vector, and the text to be encrypted or decrypted.
.PP
The same initialization vector must be used for encryption and
decryption, but it does not need to be secret, so usually it is sent
alongside the encrypted message.
In this case, though, since we\[cq]re not actually sending a message, we
just make it directly available.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] encryptMessage(key, initializationVector, message) {
  \f[B]try\f[R] {
    \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
    encodedMessage = encoder.encode(message);
    \f[I]// iv will be needed for decryption\f[R]
    \f[B]return\f[R] \f[B]await\f[R] window.crypto.subtle.encrypt(
      { name: \[dq]AES\-GCM\[dq], iv: initializationVector },
      key,
      encodedMessage,
    );
  } \f[B]catch\f[R] (e) {
    console.log(e);
    \f[B]return\f[R] \[ga]Encoding error\[ga];
  }
}

\f[B]async\f[R] \f[B]function\f[R] decryptMessage(key, initializationVector, ciphertext) {
  \f[B]try\f[R] {
    \f[B]const\f[R] decryptedText = \f[B]await\f[R] window.crypto.subtle.decrypt(
      \f[I]// The iv value must be the same as that used for encryption\f[R]
      { name: \[dq]AES\-GCM\[dq], iv: initializationVector },
      key,
      ciphertext,
    );

    \f[B]const\f[R] utf8Decoder = \f[B]new\f[R] TextDecoder();
    \f[B]return\f[R] utf8Decoder.decode(decryptedText);
  } \f[B]catch\f[R] (e) {
    console.log(e);
    \f[B]return\f[R] \[dq]Decryption error\[dq];
  }
}
.EE
.PP
The \f[CR]agreeSharedSecretKey()\f[R] function below is called on
loading to generate pairs and shared keys for Alice and Bob.
It also adds a click handler for the \[lq]Encrypt\[rq] button that will
trigger encryption and then decryption of the text defined in the first
\f[CR]<input>\f[R].
Note that all the code is inside a \f[CR]try...catch\f[R] handler, to
ensure that we can log the case where key generation fails because the
X25519 algorithm is not supported.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] agreeSharedSecretKey() {
  \f[B]try\f[R] {
    \f[I]// Generate 2 X25519 key pairs: one for Alice and one for Bob\f[R]
    \f[I]// In more normal usage, they would generate their key pairs\f[R]
    \f[I]// separately and exchange public keys securely\f[R]
    \f[B]const\f[R] aliceKeyPair = \f[B]await\f[R] window.crypto.subtle.generateKey(
      {
        name: \[dq]X25519\[dq],
      },
      \f[B]false\f[R],
      [\[dq]deriveKey\[dq]],
    );

    log(
      \[ga]Created Alice\[aq]s key pair: (algorithm: ${JSON.stringify(
        aliceKeyPair.privateKey.algorithm,
      )}, usages: ${aliceKeyPair.privateKey.usages})\[ga],
    );

    \f[B]const\f[R] bobKeyPair = \f[B]await\f[R] window.crypto.subtle.generateKey(
      {
        name: \[dq]X25519\[dq],
      },
      \f[B]false\f[R],
      [\[dq]deriveKey\[dq]],
    );

    log(
      \[ga]Created Bob\[aq]s key pair: (algorithm: ${JSON.stringify(
        bobKeyPair.privateKey.algorithm,
      )}, usages: ${bobKeyPair.privateKey.usages})\[ga],
    );

    \f[I]// Alice then generates a secret key using her private key and Bob\[aq]s public key.\f[R]
    \f[B]const\f[R] aliceSecretKey = \f[B]await\f[R] deriveSecretKey(
      aliceKeyPair.privateKey,
      bobKeyPair.publicKey,
    );

    log(
      \[ga]aliceSecretKey: ${aliceSecretKey.type} (algorithm: ${JSON.stringify(
        aliceSecretKey.algorithm,
      )}, usages: ${aliceSecretKey.usages}), \[ga],
    );

    \f[I]// Bob generates the same secret key using his private key and Alice\[aq]s public key.\f[R]
    \f[B]const\f[R] bobSecretKey = \f[B]await\f[R] deriveSecretKey(
      bobKeyPair.privateKey,
      aliceKeyPair.publicKey,
    );

    log(
      \[ga]bobSecretKey: ${bobSecretKey.type} (algorithm: ${JSON.stringify(
        bobSecretKey.algorithm,
      )}, usages: ${bobSecretKey.usages}), \[rs]n\[ga],
    );

    \f[I]// Get access for the encrypt button and the three inputs\f[R]
    \f[B]const\f[R] encryptButton = document.querySelector(\[dq]#encrypt\-button\[dq]);
    \f[B]const\f[R] messageInput = document.querySelector(\[dq]#message\[dq]);
    \f[B]const\f[R] encryptedInput = document.querySelector(\[dq]#encrypted\[dq]);
    \f[B]const\f[R] decryptedInput = document.querySelector(\[dq]#decrypted\[dq]);

    encryptButton.addEventListener(\[dq]click\[dq], \f[B]async\f[R] () \f[B]=>\f[R] {
      log(\[ga]Plaintext: ${messageInput.value}\[ga]);

      \f[I]// Define the initialization vector used when encrypting and decrypting.\f[R]
      \f[I]// This must be regenerated for every message!\f[R]
      \f[B]const\f[R] initializationVector = window.crypto.getRandomValues(
        \f[B]new\f[R] Uint8Array(8),
      );

      \f[I]// Alice can use her copy of the shared key to encrypt the message.\f[R]
      \f[B]const\f[R] encryptedMessage = \f[B]await\f[R] encryptMessage(
        aliceSecretKey,
        initializationVector,
        messageInput.value,
      );

      \f[I]// We then display part of the encrypted buffer and log the encrypted message\f[R]
      \f[B]let\f[R] buffer = \f[B]new\f[R] Uint8Array(encryptedMessage, 0, 5);
      encryptedInput.value = \[ga]${buffer}...[${encryptedMessage.byteLength} bytes total]\[ga];

      log(
        \[ga]encryptedMessage: ${buffer}...[${encryptedMessage.byteLength} bytes total]\[ga],
      );

      \f[I]// Bob uses his shared secret key to decrypt the message.\f[R]
      \f[B]const\f[R] decryptedCiphertext = \f[B]await\f[R] decryptMessage(
        bobSecretKey,
        initializationVector,
        encryptedMessage,
      );

      decryptedInput.value = decryptedCiphertext;
      log(\[ga]decryptedCiphertext: ${decryptedCiphertext}\[rs]n\[ga]);
    });
  } \f[B]catch\f[R] (e) {
    log(e);
  }
}

\f[I]// Finally we call the method to set the example running.\f[R]
agreeSharedSecretKey();
.EE
.SS Result
Press the Encrypt button to encrypt the text in the top
\f[CR]<input>\f[R] element, displaying the encrypted ciphertext and
decrypted ciphertext in the following two elements.
The log area at the bottom provides information about the keys that are
generated by the code.
.SS PBKDF2: derive AES key from password
In this example we ask the user for a password, then use it to derive an
AES key using PBKDF2, then use the AES key to encrypt a message.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/derive-key/pbkdf2.js
See the complete code on GitHub.
.UE \c
.IP
.EX
\f[I]/*\f[R]
\f[I]Get some key material to use as input to the deriveKey method.\f[R]
\f[I]The key material is a password supplied by the user.\f[R]
\f[I]*/\f[R]
\f[B]function\f[R] getKeyMaterial() {
  \f[B]const\f[R] password = window.prompt(\[dq]Enter your password\[dq]);
  \f[B]const\f[R] enc = \f[B]new\f[R] TextEncoder();
  \f[B]return\f[R] window.crypto.subtle.importKey(
    \[dq]raw\[dq],
    enc.encode(password),
    \[dq]PBKDF2\[dq],
    \f[B]false\f[R],
    [\[dq]deriveBits\[dq], \[dq]deriveKey\[dq]],
  );
}

\f[B]async\f[R] \f[B]function\f[R] encrypt(plaintext, salt, iv) {
  \f[B]const\f[R] keyMaterial = \f[B]await\f[R] getKeyMaterial();
  \f[B]const\f[R] key = \f[B]await\f[R] window.crypto.subtle.deriveKey(
    {
      name: \[dq]PBKDF2\[dq],
      salt,
      iterations: 100000,
      hash: \[dq]SHA\-256\[dq],
    },
    keyMaterial,
    { name: \[dq]AES\-GCM\[dq], length: 256 },
    \f[B]true\f[R],
    [\[dq]encrypt\[dq], \[dq]decrypt\[dq]],
  );

  \f[B]return\f[R] window.crypto.subtle.encrypt({ name: \[dq]AES\-GCM\[dq], iv }, key, plaintext);
}
.EE
.SS HKDF: derive AES key from shared secret
In this example, we encrypt a message \f[CR]plainText\f[R] given a
shared secret \f[CR]secret\f[R], which might itself have been derived
using an algorithm such as ECDH.
Instead of using the shared secret directly, we use it as key material
for the HKDF function, to derive an AES\-GCM encryption key, which we
then use to encrypt the message.
\c
.UR https://github.com/mdn/dom-examples/blob/main/web-crypto/derive-key/hkdf.js
See the complete code on GitHub.
.UE \c
.IP
.EX
\f[I]/*\f[R]
\f[I]  Given some key material and some random salt,\f[R]
\f[I]  derive an AES\-GCM key using HKDF.\f[R]
\f[I]  */\f[R]
\f[B]function\f[R] getKey(keyMaterial, salt) {
  \f[B]return\f[R] window.crypto.subtle.deriveKey(
    {
      name: \[dq]HKDF\[dq],
      salt: salt,
      info: \f[B]new\f[R] TextEncoder().encode(\[dq]Encryption example\[dq]),
      hash: \[dq]SHA\-256\[dq],
    },
    keyMaterial,
    { name: \[dq]AES\-GCM\[dq], length: 256 },
    \f[B]true\f[R],
    [\[dq]encrypt\[dq], \[dq]decrypt\[dq]],
  );
}

\f[B]async\f[R] \f[B]function\f[R] encrypt(secret, plainText) {
  \f[B]const\f[R] message = {
    salt: window.crypto.getRandomValues(\f[B]new\f[R] Uint8Array(16)),
    iv: window.crypto.getRandomValues(\f[B]new\f[R] Uint8Array(12)),
  };

  \f[B]const\f[R] key = \f[B]await\f[R] getKey(secret, message.salt);

  message.ciphertext = \f[B]await\f[R] window.crypto.subtle.encrypt(
    {
      name: \[dq]AES\-GCM\[dq],
      iv: message.iv,
    },
    key,
    plainText,
  );

  \f[B]return\f[R] message;
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://datatracker.ietf.org/doc/html/rfc5869
HKDF specification
.UE \c
\&.
.IP \[bu] 2
\c
.UR https://csrc.nist.gov/pubs/sp/800/132/final
NIST guidelines for password\-based key derivation
.UE \c
\&.
.IP \[bu] 2
\c
.UR https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
Password storage cheat sheet
.UE \c
\&.
.IP \[bu] 2
\c
.UR https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pbkdf2-sha256/3993#3993
Advice on choosing an iteration count for PBKDF2
.UE \c
\&.
