.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "CanvasRenderingContext2D.save" "JS" "October 18, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.save \- CanvasRenderingContext2D: save() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.save()\f[B]\f[R] method of the
Canvas 2D API saves the entire state of the canvas by pushing the
current state onto a stack.
.SS The drawing state
The drawing state that gets saved onto a stack consists of:
.IP \[bu] 2
The current transformation matrix.
.IP \[bu] 2
The current clipping region.
.IP \[bu] 2
The current dash list.
.IP \[bu] 2
The current values of the following attributes:
.RS 2
.IP \[bu] 2
\f[CR]direction\f[R]
.IP \[bu] 2
\f[CR]fillStyle\f[R]
.IP \[bu] 2
\f[CR]filter\f[R]
.IP \[bu] 2
\f[CR]font\f[R]
.IP \[bu] 2
\f[CR]fontKerning\f[R]
.IP \[bu] 2
\f[CR]fontStretch\f[R]
.IP \[bu] 2
\f[CR]fontVariantCaps\f[R]
.IP \[bu] 2
\f[CR]globalAlpha\f[R]
.IP \[bu] 2
\f[CR]globalCompositeOperation\f[R]
.IP \[bu] 2
\f[CR]imageSmoothingEnabled\f[R]
.IP \[bu] 2
\f[CR]imageSmoothingQuality\f[R]
.IP \[bu] 2
\f[CR]letterSpacing\f[R]
.IP \[bu] 2
\f[CR]lineCap\f[R]
.IP \[bu] 2
\f[CR]lineDashOffset\f[R]
.IP \[bu] 2
\f[CR]lineJoin\f[R]
.IP \[bu] 2
\f[CR]lineWidth\f[R]
.IP \[bu] 2
\f[CR]miterLimit\f[R]
.IP \[bu] 2
\f[CR]shadowBlur\f[R]
.IP \[bu] 2
\f[CR]shadowColor\f[R]
.IP \[bu] 2
\f[CR]shadowOffsetX\f[R]
.IP \[bu] 2
\f[CR]shadowOffsetY\f[R]
.IP \[bu] 2
\f[CR]strokeStyle\f[R]
.IP \[bu] 2
\f[CR]textAlign\f[R]
.IP \[bu] 2
\f[CR]textBaseline\f[R]
.IP \[bu] 2
\f[CR]textRendering\f[R]
.IP \[bu] 2
\f[CR]wordSpacing\f[R]
.RE
.SH SYNTAX
.IP
.EX
save()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Saving the drawing state
This example uses the \f[CR]save()\f[R] method to save the current state
and \f[CR]restore()\f[R] to restore it later, so that you are able to
draw a rect with the current state later.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

\f[I]// Save the current state\f[R]
ctx.save();

ctx.fillStyle = \[dq]green\[dq];
ctx.fillRect(10, 10, 100, 100);

\f[I]// Restore to the state saved by the most recent call to save()\f[R]
ctx.restore();

ctx.fillRect(150, 40, 100, 100);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.restore()\f[R]
