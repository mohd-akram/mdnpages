.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "BroadcastChannel.message_event" "JS" "June 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BroadcastChannel.message_event \- BroadcastChannel: message event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]message\f[B]\f[R] event of the
\f[CR]BroadcastChannel\f[R] interface fires when a message arrives on
that channel.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]message\[dq], (event) => { })
onmessage = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]In addition to the properties listed below, properties from the
parent interface, \f[CI]Event\f[I], are available.\f[R]
.TP
\f[B]data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]source\f[R] \f[I](read\-only)\f[R]
A \f[I]message event source\f[R], which is either a WindowProxy, a
\f[CR]MessagePort\f[R], or a \f[CR]ServiceWorker\f[R] object
representing the message emitter.
.TP
\f[B]ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
In this example there\[cq]s a \[lq]sender\[rq] \f[CR]<iframe>\f[R] that
broadcasts the contents of a \f[CR]<textarea>\f[R] when the user clicks
a button.
There are two \[lq]receiver\[rq] iframes that listen to the broadcast
message and write the result into a \f[CR]<div>\f[R] element.
.SS Sender
.IP
.EX
\f[B]const\f[R] channel = \f[B]new\f[R] BroadcastChannel(\[dq]example\-channel\[dq]);
\f[B]const\f[R] messageControl = document.querySelector(\[dq]#message\[dq]);
\f[B]const\f[R] broadcastMessageButton = document.querySelector(\[dq]#broadcast\-message\[dq]);

broadcastMessageButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  channel.postMessage(messageControl.value);
});
.EE
.SS Receiver 1
.IP
.EX
\f[B]const\f[R] channel = \f[B]new\f[R] BroadcastChannel(\[dq]example\-channel\[dq]);
channel.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  received.textContent = event.data;
});
.EE
.SS Receiver 2
.IP
.EX
\f[B]const\f[R] channel = \f[B]new\f[R] BroadcastChannel(\[dq]example\-channel\[dq]);
channel.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  received.textContent = event.data;
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]messageerror\f[R].
