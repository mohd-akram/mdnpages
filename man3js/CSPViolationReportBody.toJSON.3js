.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CSPVIOLATIONREPORTBODY.TOJSON" "3JS" "September 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSPViolationReportBody.toJSON \- CSPViolationReportBody: toJSON() method
.SH SYNOPSIS
The \f[B]\f[CB]toJSON()\f[B]\f[R] method of the
\f[CR]CSPViolationReportBody\f[R] interface is a \f[I]serializer\f[R],
which returns a JSON representation of the
\f[CR]CSPViolationReportBody\f[R] object.
.PP
The existence of a \f[CR]toJSON()\f[R] method allows
\f[CR]CSPViolationReportBody\f[R] objects to be converted to a string
using the \f[CR]JSON.stringify()\f[R] method.
.PP
This is used by the reporting API when creating a serialized version of
a violation report to send to a reporting endpoint.
.SH SYNTAX
.IP
.EX
toJSON()
.EE
.SS Parameters
None.
.SS Return value
A JSON object that is the serialization of the
\f[CR]CSPViolationReportBody\f[R] object.
.SH EXAMPLES
In this example we create a new \f[CR]ReportingObserver\f[R] to observe
CSP violation reports, then return a JSON representation of the first
entry.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver(
  (reports, observer) \f[B]=>\f[R] {
    \f[B]const\f[R] firstReport = reports[0];
    \f[I]// Log JSON object\f[R]
    console.log(firstReport.toJSON());
    \f[I]// Log JSON object as a string\f[R]
    console.log(JSON.stringify(firstReport));
  },
  {
    types: [\(dqcsp\-violation\(dq],
    buffered: \f[B]true\f[R],
  },
);

observer.observe();
.EE
.PP
We call \f[CR]toJSON()\f[R] on the \f[CR]firstReport\f[R], which is a
\f[CR]Report\f[R] instance, which in turn results in the
\f[CR]toJSON()\f[R] defined in this interface being called to serialize
the \f[CR]body\f[R] of the report.
.PP
For the purpose of demonstration we also call
\f[CR]JSON.stringify()\f[R] on \f[CR]firstReport\f[R] to create a string
containing the JSON data.
When sending or storing report information it is more common to do this
than use \f[CR]toJSON()\f[R] directly.
