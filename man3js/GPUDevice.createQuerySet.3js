.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATEQUERYSET" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createQuerySet \- GPUDevice: createQuerySet() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createQuerySet()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPUQuerySet\f[R] that can
be used to record the results of queries on passes, such as occlusion or
timestamp queries.
.SH SYNTAX
.IP
.EX
createQuerySet(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]count\f[R]
A number specifying the number of queries to be managed by the resulting
\f[CR]GPUQuerySet\f[R].
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]type\f[R]
An enumerated value specifying the type of queries to be managed by the
resulting \f[CR]GPUQuerySet\f[R].
Possible values are:
.RS
.TP
\f[B]\(dqocclusion\(dq\f[R]
Occlusion queries are available on render passes to query the number of
fragment samples that pass all the per\-fragment tests for a set of
drawing commands (including scissor, sample mask, alpha to coverage,
stencil, and depth tests).
To run an occlusion query, an appropriate \f[CR]GPUQuerySet\f[R] must be
provided as the value of the \f[CR]occlusionQuerySet\f[R] descriptor
property when invoking \f[CR]GPUCommandEncoder.beginRenderPass()\f[R] to
run a render pass.
.TP
\f[B]\(dqtimestamp\(dq\f[R]
Timestamp queries allow applications to write timestamps to a
\f[CR]GPUQuerySet\f[R].
To run a timestamp query, appropriate \f[CR]GPUQuerySet\f[R]s must be
provided inside the value of the \f[CR]timestampWrites\f[R] descriptor
property when invoking \f[CR]GPUCommandEncoder.beginRenderPass()\f[R] to
run a render pass, or \f[CR]GPUCommandEncoder.beginComputePass()\f[R] to
run a compute pass.
Alternatively, you can run a single timestamp query at any time by
invoking \f[CR]GPUCommandEncoder.writeTimeStamp()\f[R] with an
appropriate \f[CR]GPUQuerySet\f[R] as a parameter.
.RS
.RS
.PP
\f[B]Note:\f[R] The \f[CR]timestamp\-query\f[R] feature needs to be
enabled to use timestamp queries.
.RE
.RE
.RE
.RE
.SS Return value
A \f[CR]GPUQuerySet\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createQuerySet()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUQuerySet\f[R] object is returned:
.IP \(bu 2
\f[CR]count\f[R] is less than or equal to 4096.
.SH EXAMPLES
The following snippet creates a \f[CR]GPUQuerySet\f[R] that holds 32
occlusion query results:
.IP
.EX
\f[B]const\f[R] querySet = device.createQuerySet({
  type: \(dqocclusion\(dq,
  count: 32,
});
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
