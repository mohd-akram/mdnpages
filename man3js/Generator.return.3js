.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Generator.return" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Generator.return \- Generator.prototype.return()
.SH SYNOPSIS
The \f[B]\f[CB]return()\f[B]\f[R] method of \f[CR]Generator\f[R]
instances acts as if a \f[CR]return\f[R] statement is inserted in the
generator\[cq]s body at the current suspended position, which finishes
the generator and allows the generator to perform any cleanup tasks when
combined with a \f[CR]try...finally\f[R] block.
.SH SYNTAX
.IP
.EX
generatorInstance.return()
generatorInstance.return(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R] \f[I](optional)\f[R]
The value to return.
.SS Return value
An \f[CR]Object\f[R] with two properties:
.TP
\f[B]done\f[R]
A boolean value:
.RS
.IP \[bu] 2
\f[CR]true\f[R] if the generator function\[cq]s control flow has reached
the end.
.IP \[bu] 2
\f[CR]false\f[R] if the generator function\[cq]s control flow hasn\[cq]t
reached the end and can produce more values.
This can only happen if the \f[CR]return\f[R] is captured in a
\f[CR]try...finally\f[R] and there are more \f[CR]yield\f[R] expressions
in the \f[CR]finally\f[R] block.
.RE
.TP
\f[B]value\f[R]
The value that is given as an argument, or, if the \f[CR]yield\f[R]
expression is wrapped in a \f[CR]try...finally\f[R], the value
yielded/returned from the \f[CR]finally\f[R] block.
.SH DESCRIPTION
The \f[CR]return()\f[R] method, when called, can be seen as if a
\f[CR]return value;\f[R] statement is inserted in the generator\[cq]s
body at the current suspended position, where \f[CR]value\f[R] is the
value passed to the \f[CR]return()\f[R] method.
Therefore, in a typical flow, calling \f[CR]return(value)\f[R] will
return \f[CR]{ done: true, value: value }\f[R].
However, if the \f[CR]yield\f[R] expression is wrapped in a
\f[CR]try...finally\f[R] block, the control flow doesn\[cq]t exit the
function body, but proceeds to the \f[CR]finally\f[R] block instead.
In this case, the value returned may be different, and \f[CR]done\f[R]
may even be \f[CR]false\f[R], if there are more \f[CR]yield\f[R]
expressions within the \f[CR]finally\f[R] block.
.SH EXAMPLES
.SS Using return()
The following example shows a simple generator and the \f[CR]return\f[R]
method.
.IP
.EX
\f[B]function\f[R]* gen() {
  \f[B]yield\f[R] 1;
  \f[B]yield\f[R] 2;
  \f[B]yield\f[R] 3;
}

\f[B]const\f[R] g = gen();

g.next(); \f[I]// { value: 1, done: false }\f[R]
g.return(\[dq]foo\[dq]); \f[I]// { value: \[dq]foo\[dq], done: true }\f[R]
g.next(); \f[I]// { value: undefined, done: true }\f[R]
.EE
.PP
If \f[CR]return(value)\f[R] is called on a generator that is already in
\[lq]completed\[rq] state, the generator will remain in
\[lq]completed\[rq] state.
.PP
If no argument is provided, the \f[CR]value\f[R] property of the
returned object will be \f[CR]undefined\f[R].
If an argument is provided, it will become the value of the
\f[CR]value\f[R] property of the returned object, unless the
\f[CR]yield\f[R] expression is wrapped in a \f[CR]try...finally\f[R].
.IP
.EX
\f[B]function\f[R]* gen() {
  \f[B]yield\f[R] 1;
  \f[B]yield\f[R] 2;
  \f[B]yield\f[R] 3;
}

\f[B]const\f[R] g = gen();
g.next(); \f[I]// { value: 1, done: false }\f[R]
g.next(); \f[I]// { value: 2, done: false }\f[R]
g.next(); \f[I]// { value: 3, done: false }\f[R]
g.next(); \f[I]// { value: undefined, done: true }\f[R]
g.return(); \f[I]// { value: undefined, done: true }\f[R]
g.return(1); \f[I]// { value: 1, done: true }\f[R]
.EE
.SS Using return() with try\&...finally
The fact that the \f[CR]return\f[R] method has been called can only be
made known to the generator itself if the \f[CR]yield\f[R] expression is
wrapped in a \f[CR]try...finally\f[R] block.
.PP
When the \f[CR]return\f[R] method is called on a generator that is
suspended within a \f[CR]try\f[R] block, execution in the generator
proceeds to the \f[CR]finally\f[R] block \[em] since the
\f[CR]finally\f[R] block of \f[CR]try...finally\f[R] statements always
executes.
.IP
.EX
\f[B]function\f[R]* gen() {
  \f[B]yield\f[R] 1;
  \f[B]try\f[R] {
    \f[B]yield\f[R] 2;
    \f[B]yield\f[R] 3;
  } \f[B]finally\f[R] {
    \f[B]yield\f[R] \[dq]cleanup\[dq];
  }
}

\f[B]const\f[R] g1 = gen();
g1.next(); \f[I]// { value: 1, done: false }\f[R]

\f[I]// Execution is suspended before the try...finally.\f[R]
g1.return(\[dq]early return\[dq]); \f[I]// { value: \[aq]early return\[aq], done: true }\f[R]

\f[B]const\f[R] g2 = gen();
g2.next(); \f[I]// { value: 1, done: false }\f[R]
g2.next(); \f[I]// { value: 2, done: false }\f[R]

\f[I]// Execution is suspended within the try...finally.\f[R]
g2.return(\[dq]early return\[dq]); \f[I]// { value: \[aq]cleanup\[aq], done: false }\f[R]

\f[I]// The completion value is preserved\f[R]
g2.next(); \f[I]// { value: \[aq]early return\[aq], done: true }\f[R]

\f[I]// Generator is in the completed state\f[R]
g2.return(\[dq]not so early return\[dq]); \f[I]// { value: \[aq]not so early return\[aq], done: true }\f[R]
.EE
.PP
The return value of the finally block can also become the
\f[CR]value\f[R] of the result returned from the \f[CR]return\f[R] call.
.IP
.EX
\f[B]function\f[R]* gen() {
  \f[B]try\f[R] {
    \f[B]yield\f[R] 1;
  } \f[B]finally\f[R] {
    \f[B]return\f[R] \[dq]cleanup\[dq];
  }
}

\f[B]const\f[R] g1 = gen();
g1.next(); \f[I]// { value: 1, done: false }\f[R]
g1.return(\[dq]early return\[dq]); \f[I]// { value: \[aq]cleanup\[aq], done: true }\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]function*\f[R]
