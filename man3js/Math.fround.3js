.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MATH.FROUND" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Math.fround \- Math.fround()
.SH SYNOPSIS
The \f[B]\f[CB]Math.fround()\f[B]\f[R] static method returns the nearest
\c
.UR https://en.wikipedia.org/wiki/Single-precision_floating-point_format
32\-bit single precision
.UE \c
\ float representation of a number.
.IP
.EX
console.log(Math.fround(5.5));
\f[I]// Expected output: 5.5\f[R]

console.log(Math.fround(5.05));
\f[I]// Expected output: 5.050000190734863\f[R]

console.log(Math.fround(5));
\f[I]// Expected output: 5\f[R]

console.log(Math.fround(\-5.05));
\f[I]// Expected output: \-5.050000190734863\f[R]
.EE
.SH SYNTAX
.IP
.EX
Math.fround(doubleFloat)
.EE
.SS Parameters
.TP
\f[B]doubleFloat\f[R]
A number.
.SS Return value
The nearest \c
.UR https://en.wikipedia.org/wiki/Single-precision_floating-point_format
32\-bit single precision
.UE \c
\ float representation of \f[CR]doubleFloat\f[R].
.SH DESCRIPTION
JavaScript uses 64\-bit double floating\-point numbers internally, which
offer a very high precision.
However, sometimes you may be working with 32\-bit floating\-point
numbers, for example if you are reading values from a
\f[CR]Float32Array\f[R].
This can create confusion: checking a 64\-bit float and a 32\-bit float
for equality may fail even though the numbers are seemingly identical.
.PP
To solve this, \f[CR]Math.fround()\f[R] can be used to cast the 64\-bit
float to a 32\-bit float.
Internally, JavaScript continues to treat the number as a 64\-bit float,
it just performs a \(lqround to even\(rq on the 23rd bit of the
mantissa, and sets all following mantissa bits to \f[CR]0\f[R].
If the number is outside the range of a 32\-bit float,
\f[CR]Infinity\f[R] or \f[CR]\-Infinity\f[R] is returned.
.PP
Because \f[CR]fround()\f[R] is a static method of \f[CR]Math\f[R], you
always use it as \f[CR]Math.fround()\f[R], rather than as a method of a
\f[CR]Math\f[R] object you created (\f[CR]Math\f[R] is not a
constructor).
.SH EXAMPLES
.SS Using Math.fround()
The number 1.5 can be precisely represented in the binary numeral
system, and is identical in 32\-bit and 64\-bit:
.IP
.EX
Math.fround(1.5); \f[I]// 1.5\f[R]
Math.fround(1.5) === 1.5; \f[I]// true\f[R]
.EE
.PP
However, the number 1.337 cannot be precisely represented in the binary
numeral system, so it differs in 32\-bit and 64\-bit:
.IP
.EX
Math.fround(1.337); \f[I]// 1.3370000123977661\f[R]
Math.fround(1.337) === 1.337; \f[I]// false\f[R]
.EE
.PP
21502\(ha150 is too big for a 32\-bit float, so \f[CR]Infinity\f[R] is
returned:
.IP
.EX
2 ** 150; \f[I]// 1.42724769270596e+45\f[R]
Math.fround(2 ** 150); \f[I]// Infinity\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-math
Polyfill of \f[CR]Math.fround\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/math.fround
es\-shims polyfill of \f[CR]Math.fround\f[R]
.UE \c
.IP \(bu 2
\f[CR]Math.round()\f[R]
