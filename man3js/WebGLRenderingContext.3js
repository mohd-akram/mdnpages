.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "WebGLRenderingContext" "JS" "August 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext \- WebGLRenderingContext
.SH SYNOPSIS
The \f[B]\f[CB]WebGLRenderingContext\f[B]\f[R] interface provides an
interface to the OpenGL ES 2.0 graphics rendering context for the
drawing surface of an HTML \f[CR]<canvas>\f[R] element.
.PP
To get an access to a WebGL context for 2D and/or 3D graphics rendering,
call \f[CR]getContext()\f[R] on a \f[CR]<canvas>\f[R] element, supplying
\[lq]webgl\[rq] as the argument:
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]myCanvas\[dq]);
\f[B]const\f[R] gl = canvas.getContext(\[dq]webgl\[dq]);
.EE
.PP
Once you have the WebGL rendering context for a canvas, you can render
within it.
The WebGL tutorial has more information, examples, and resources on how
to get started with WebGL.
.PP
If you require a WebGL 2.0 context, see
\f[CR]WebGL2RenderingContext\f[R]; this supplies access to an
implementation of OpenGL ES 3.0 graphics.
.SH CONSTANTS
See the WebGL constants page.
.SH THE WEBGL CONTEXT
The following properties and methods provide general information and
functionality to deal with the WebGL context:
.TP
\f[B]WebGLRenderingContext.canvas\f[R]
A read\-only back\-reference to the \f[CR]HTMLCanvasElement\f[R].
Might be \f[CR]null\f[R] if it is not associated with a
\f[CR]<canvas>\f[R] element.
.TP
\f[B]WebGLRenderingContext.drawingBufferWidth\f[R]
The read\-only width of the current drawing buffer.
Should match the width of the canvas element associated with this
context.
.TP
\f[B]WebGLRenderingContext.drawingBufferHeight\f[R]
The read\-only height of the current drawing buffer.
Should match the height of the canvas element associated with this
context.
.TP
\f[B]WebGLRenderingContext.getContextAttributes()\f[R]
Returns a \f[CR]WebGLContextAttributes\f[R] object that contains the
actual context parameters.
Might return \f[CR]null\f[R], if the context is lost.
.TP
\f[B]WebGLRenderingContext.isContextLost()\f[R]
Returns \f[CR]true\f[R] if the context is lost, otherwise returns
\f[CR]false\f[R].
.TP
\f[B]WebGLRenderingContext.makeXRCompatible()\f[R]
Ensures the context is compatible with the user\[cq]s XR hardware,
re\-creating the context if necessary with a new configuration to do so.
This can be used to start an application using standard 2D presentation,
then transition to using a VR or AR mode later.
.SH VIEWING AND CLIPPING
.TP
\f[B]WebGLRenderingContext.scissor()\f[R]
Defines the scissor box.
.TP
\f[B]WebGLRenderingContext.viewport()\f[R]
Sets the viewport.
.SH STATE INFORMATION
.TP
\f[B]WebGLRenderingContext.activeTexture()\f[R]
Selects the active texture unit.
.TP
\f[B]WebGLRenderingContext.blendColor()\f[R]
Sets the source and destination blending factors.
.TP
\f[B]WebGLRenderingContext.blendEquation()\f[R]
Sets both the RGB blend equation and alpha blend equation to a single
equation.
.TP
\f[B]WebGLRenderingContext.blendEquationSeparate()\f[R]
Sets the RGB blend equation and alpha blend equation separately.
.TP
\f[B]WebGLRenderingContext.blendFunc()\f[R]
Defines which function is used for blending pixel arithmetic.
.TP
\f[B]WebGLRenderingContext.blendFuncSeparate()\f[R]
Defines which function is used for blending pixel arithmetic for RGB and
alpha components separately.
.TP
\f[B]WebGLRenderingContext.clearColor()\f[R]
Specifies the color values used when clearing color buffers.
.TP
\f[B]WebGLRenderingContext.clearDepth()\f[R]
Specifies the depth value used when clearing the depth buffer.
.TP
\f[B]WebGLRenderingContext.clearStencil()\f[R]
Specifies the stencil value used when clearing the stencil buffer.
.TP
\f[B]WebGLRenderingContext.colorMask()\f[R]
Sets which color components to enable or to disable when drawing or
rendering to a \f[CR]WebGLFramebuffer\f[R].
.TP
\f[B]WebGLRenderingContext.cullFace()\f[R]
Specifies whether or not front\- and/or back\-facing polygons can be
culled.
.TP
\f[B]WebGLRenderingContext.depthFunc()\f[R]
Specifies a function that compares incoming pixel depth to the current
depth buffer value.
.TP
\f[B]WebGLRenderingContext.depthMask()\f[R]
Sets whether writing into the depth buffer is enabled or disabled.
.TP
\f[B]WebGLRenderingContext.depthRange()\f[R]
Specifies the depth range mapping from normalized device coordinates to
window or viewport coordinates.
.TP
\f[B]WebGLRenderingContext.disable()\f[R]
Disables specific WebGL capabilities for this context.
.TP
\f[B]WebGLRenderingContext.enable()\f[R]
Enables specific WebGL capabilities for this context.
.TP
\f[B]WebGLRenderingContext.frontFace()\f[R]
Specifies whether polygons are front\- or back\-facing by setting a
winding orientation.
.TP
\f[B]WebGLRenderingContext.getParameter()\f[R]
Returns a value for the passed parameter name.
.TP
\f[B]WebGLRenderingContext.getError()\f[R]
Returns error information.
.TP
\f[B]WebGLRenderingContext.hint()\f[R]
Specifies hints for certain behaviors.
The interpretation of these hints depend on the implementation.
.TP
\f[B]WebGLRenderingContext.isEnabled()\f[R]
Tests whether a specific WebGL capability is enabled or not for this
context.
.TP
\f[B]WebGLRenderingContext.lineWidth()\f[R]
Sets the line width of rasterized lines.
.TP
\f[B]WebGLRenderingContext.pixelStorei()\f[R]
Specifies the pixel storage modes
.TP
\f[B]WebGLRenderingContext.polygonOffset()\f[R]
Specifies the scale factors and units to calculate depth values.
.TP
\f[B]WebGLRenderingContext.sampleCoverage()\f[R]
Specifies multi\-sample coverage parameters for anti\-aliasing effects.
.TP
\f[B]WebGLRenderingContext.stencilFunc()\f[R]
Sets the both front and back function and reference value for stencil
testing.
.TP
\f[B]WebGLRenderingContext.stencilFuncSeparate()\f[R]
Sets the front and/or back function and reference value for stencil
testing.
.TP
\f[B]WebGLRenderingContext.stencilMask()\f[R]
Controls enabling and disabling of both the front and back writing of
individual bits in the stencil planes.
.TP
\f[B]WebGLRenderingContext.stencilMaskSeparate()\f[R]
Controls enabling and disabling of front and/or back writing of
individual bits in the stencil planes.
.TP
\f[B]WebGLRenderingContext.stencilOp()\f[R]
Sets both the front and back\-facing stencil test actions.
.TP
\f[B]WebGLRenderingContext.stencilOpSeparate()\f[R]
Sets the front and/or back\-facing stencil test actions.
.SH BUFFERS
.TP
\f[B]WebGLRenderingContext.bindBuffer()\f[R]
Binds a \f[CR]WebGLBuffer\f[R] object to a given target.
.TP
\f[B]WebGLRenderingContext.bufferData()\f[R]
Updates buffer data.
.TP
\f[B]WebGLRenderingContext.bufferSubData()\f[R]
Updates buffer data starting at a passed offset.
.TP
\f[B]WebGLRenderingContext.createBuffer()\f[R]
Creates a \f[CR]WebGLBuffer\f[R] object.
.TP
\f[B]WebGLRenderingContext.deleteBuffer()\f[R]
Deletes a \f[CR]WebGLBuffer\f[R] object.
.TP
\f[B]WebGLRenderingContext.getBufferParameter()\f[R]
Returns information about the buffer.
.TP
\f[B]WebGLRenderingContext.isBuffer()\f[R]
Returns a Boolean indicating if the passed buffer is valid.
.SH FRAMEBUFFERS
.TP
\f[B]WebGLRenderingContext.bindFramebuffer()\f[R]
Binds a \f[CR]WebGLFrameBuffer\f[R] object to a given target.
.TP
\f[B]WebGLRenderingContext.checkFramebufferStatus()\f[R]
Returns the status of the framebuffer.
.TP
\f[B]WebGLRenderingContext.createFramebuffer()\f[R]
Creates a \f[CR]WebGLFrameBuffer\f[R] object.
.TP
\f[B]WebGLRenderingContext.deleteFramebuffer()\f[R]
Deletes a \f[CR]WebGLFrameBuffer\f[R] object.
.TP
\f[B]WebGLRenderingContext.framebufferRenderbuffer()\f[R]
Attaches a \f[CR]WebGLRenderingBuffer\f[R] object to a
\f[CR]WebGLFrameBuffer\f[R] object.
.TP
\f[B]WebGLRenderingContext.framebufferTexture2D()\f[R]
Attaches a textures image to a \f[CR]WebGLFrameBuffer\f[R] object.
.TP
\f[B]WebGLRenderingContext.getFramebufferAttachmentParameter()\f[R]
Returns information about the framebuffer.
.TP
\f[B]WebGLRenderingContext.isFramebuffer()\f[R]
Returns a Boolean indicating if the passed \f[CR]WebGLFrameBuffer\f[R]
object is valid.
.TP
\f[B]WebGLRenderingContext.readPixels()\f[R]
Reads a block of pixels from the \f[CR]WebGLFrameBuffer\f[R].
.SH RENDERBUFFERS
.TP
\f[B]WebGLRenderingContext.bindRenderbuffer()\f[R]
Binds a \f[CR]WebGLRenderBuffer\f[R] object to a given target.
.TP
\f[B]WebGLRenderingContext.createRenderbuffer()\f[R]
Creates a \f[CR]WebGLRenderBuffer\f[R] object.
.TP
\f[B]WebGLRenderingContext.deleteRenderbuffer()\f[R]
Deletes a \f[CR]WebGLRenderBuffer\f[R] object.
.TP
\f[B]WebGLRenderingContext.getRenderbufferParameter()\f[R]
Returns information about the renderbuffer.
.TP
\f[B]WebGLRenderingContext.isRenderbuffer()\f[R]
Returns a Boolean indicating if the passed
\f[CR]WebGLRenderingBuffer\f[R] is valid.
.TP
\f[B]WebGLRenderingContext.renderbufferStorage()\f[R]
Creates a renderbuffer data store.
.SH TEXTURES
.TP
\f[B]WebGLRenderingContext.bindTexture()\f[R]
Binds a \f[CR]WebGLTexture\f[R] object to a given target.
.TP
\f[B]WebGLRenderingContext.compressedTexImage2D()\f[R]
Specifies a 2D texture image in a compressed format.
.TP
\f[B]WebGLRenderingContext.compressedTexSubImage2D()\f[R]
Specifies a 2D texture sub\-image in a compressed format.
.TP
\f[B]WebGLRenderingContext.copyTexImage2D()\f[R]
Copies a 2D texture image.
.TP
\f[B]WebGLRenderingContext.copyTexSubImage2D()\f[R]
Copies a 2D texture sub\-image.
.TP
\f[B]WebGLRenderingContext.createTexture()\f[R]
Creates a \f[CR]WebGLTexture\f[R] object.
.TP
\f[B]WebGLRenderingContext.deleteTexture()\f[R]
Deletes a \f[CR]WebGLTexture\f[R] object.
.TP
\f[B]WebGLRenderingContext.generateMipmap()\f[R]
Generates a set of mipmaps for a \f[CR]WebGLTexture\f[R] object.
.TP
\f[B]WebGLRenderingContext.getTexParameter()\f[R]
Returns information about the texture.
.TP
\f[B]WebGLRenderingContext.isTexture()\f[R]
Returns a Boolean indicating if the passed \f[CR]WebGLTexture\f[R] is
valid.
.TP
\f[B]WebGLRenderingContext.texImage2D()\f[R]
Specifies a 2D texture image.
.TP
\f[B]WebGLRenderingContext.texSubImage2D()\f[R]
Updates a sub\-rectangle of the current \f[CR]WebGLTexture\f[R].
.TP
\f[B]WebGLRenderingContext.texParameterf()\f[R]
Sets texture parameters.
.TP
\f[B]WebGLRenderingContext.texParameteri()\f[R]
Sets texture parameters.
.SH PROGRAMS AND SHADERS
.TP
\f[B]WebGLRenderingContext.attachShader()\f[R]
Attaches a \f[CR]WebGLShader\f[R] to a \f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGLRenderingContext.bindAttribLocation()\f[R]
Binds a generic vertex index to a named attribute variable.
.TP
\f[B]WebGLRenderingContext.compileShader()\f[R]
Compiles a \f[CR]WebGLShader\f[R].
.TP
\f[B]WebGLRenderingContext.createProgram()\f[R]
Creates a \f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGLRenderingContext.createShader()\f[R]
Creates a \f[CR]WebGLShader\f[R].
.TP
\f[B]WebGLRenderingContext.deleteProgram()\f[R]
Deletes a \f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGLRenderingContext.deleteShader()\f[R]
Deletes a \f[CR]WebGLShader\f[R].
.TP
\f[B]WebGLRenderingContext.detachShader()\f[R]
Detaches a \f[CR]WebGLShader\f[R].
.TP
\f[B]WebGLRenderingContext.getAttachedShaders()\f[R]
Returns a list of \f[CR]WebGLShader\f[R] objects attached to a
\f[CR]WebGLProgram\f[R].
.TP
\f[B]WebGLRenderingContext.getProgramParameter()\f[R]
Returns information about the program.
.TP
\f[B]WebGLRenderingContext.getProgramInfoLog()\f[R]
Returns the information log for a \f[CR]WebGLProgram\f[R] object.
.TP
\f[B]WebGLRenderingContext.getShaderParameter()\f[R]
Returns information about the shader.
.TP
\f[B]WebGLRenderingContext.getShaderPrecisionFormat()\f[R]
Returns a \f[CR]WebGLShaderPrecisionFormat\f[R] object describing the
precision for the numeric format of the shader.
.TP
\f[B]WebGLRenderingContext.getShaderInfoLog()\f[R]
Returns the information log for a \f[CR]WebGLShader\f[R] object.
.TP
\f[B]WebGLRenderingContext.getShaderSource()\f[R]
Returns the source code of a \f[CR]WebGLShader\f[R] as a string.
.TP
\f[B]WebGLRenderingContext.isProgram()\f[R]
Returns a Boolean indicating if the passed \f[CR]WebGLProgram\f[R] is
valid.
.TP
\f[B]WebGLRenderingContext.isShader()\f[R]
Returns a Boolean indicating if the passed \f[CR]WebGLShader\f[R] is
valid.
.TP
\f[B]WebGLRenderingContext.linkProgram()\f[R]
Links the passed \f[CR]WebGLProgram\f[R] object.
.TP
\f[B]WebGLRenderingContext.shaderSource()\f[R]
Sets the source code in a \f[CR]WebGLShader\f[R].
.TP
\f[B]WebGLRenderingContext.useProgram()\f[R]
Uses the specified \f[CR]WebGLProgram\f[R] as part the current rendering
state.
.TP
\f[B]WebGLRenderingContext.validateProgram()\f[R]
Validates a \f[CR]WebGLProgram\f[R].
.SH UNIFORMS AND ATTRIBUTES
.TP
\f[B]WebGLRenderingContext.disableVertexAttribArray()\f[R]
Disables a vertex attribute array at a given position.
.TP
\f[B]WebGLRenderingContext.enableVertexAttribArray()\f[R]
Enables a vertex attribute array at a given position.
.TP
\f[B]WebGLRenderingContext.getActiveAttrib()\f[R]
Returns information about an active attribute variable.
.TP
\f[B]WebGLRenderingContext.getActiveUniform()\f[R]
Returns information about an active uniform variable.
.TP
\f[B]WebGLRenderingContext.getAttribLocation()\f[R]
Returns the location of an attribute variable.
.TP
\f[B]WebGLRenderingContext.getUniform()\f[R]
Returns the value of a uniform variable at a given location.
.TP
\f[B]WebGLRenderingContext.getUniformLocation()\f[R]
Returns the location of a uniform variable.
.TP
\f[B]WebGLRenderingContext.getVertexAttrib()\f[R]
Returns information about a vertex attribute at a given position.
.TP
\f[B]WebGLRenderingContext.getVertexAttribOffset()\f[R]
Returns the address of a given vertex attribute.
.TP
\f[B]WebGLRenderingContext.uniform[1234][fi][v]()\f[R]
Specifies a value for a uniform variable.
.TP
\f[B]WebGLRenderingContext.uniformMatrix[234]fv()\f[R]
Specifies a matrix value for a uniform variable.
.TP
\f[B]WebGLRenderingContext.vertexAttrib[1234]f[v]()\f[R]
Specifies a value for a generic vertex attribute.
.TP
\f[B]WebGLRenderingContext.vertexAttribPointer()\f[R]
Specifies the data formats and locations of vertex attributes in a
vertex attributes array.
.SH DRAWING BUFFERS
.TP
\f[B]WebGLRenderingContext.clear()\f[R]
Clears specified buffers to preset values.
.TP
\f[B]WebGLRenderingContext.drawArrays()\f[R]
Renders primitives from array data.
.TP
\f[B]WebGLRenderingContext.drawElements()\f[R]
Renders primitives from element array data.
.TP
\f[B]WebGLRenderingContext.finish()\f[R]
Blocks execution until all previously called commands are finished.
.TP
\f[B]WebGLRenderingContext.flush()\f[R]
Empties different buffer commands, causing all commands to be executed
as quickly as possible.
.SH COLOR SPACES
.TP
\f[B]WebGLRenderingContext.drawingBufferColorSpace\f[R]
Specifies the color space of the WebGL drawing buffer.
.TP
\f[B]WebGLRenderingContext.unpackColorSpace\f[R] \f[I](experimental)\f[R]
Specifies the color space to convert to when importing textures.
.SH WORKING WITH EXTENSIONS
These methods manage WebGL extensions:
.TP
\f[B]WebGLRenderingContext.getSupportedExtensions()\f[R]
Returns an \f[CR]Array\f[R] of strings containing all the supported
WebGL extensions.
.TP
\f[B]WebGLRenderingContext.getExtension()\f[R]
Returns an extension object.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]HTMLCanvasElement\f[R]
