.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUSHADERMODULE.GETCOMPILATIONINFO" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUShaderModule.getCompilationInfo \- GPUShaderModule:
getCompilationInfo() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]getCompilationInfo()\f[B]\f[R] method of the
\f[CR]GPUShaderModule\f[R] interface returns a \f[CR]Promise\f[R] that
fulfills with a \f[CR]GPUCompilationInfo\f[R] object containing messages
generated during the \f[CR]GPUShaderModule\f[R]\(cqs compilation.
.SH SYNTAX
.IP
.EX
getCompilationInfo()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that fulfills with a \f[CR]GPUCompilationInfo\f[R]
object.
.PP
\f[CR]GPUCompilationInfo\f[R] contains a \f[CR]messages\f[R] property,
which is an array of \f[CR]GPUCompilationMessage\f[R] objects, each one
containing the details of an individual compilation message.
.SH EXAMPLES
In the example below, we have deliberately left a parenthesis out of a
function declaration in our shader code:
.IP
.EX
\f[B]const\f[R] shaders = \(ga
struct VertexOut {
  \(atbuiltin(position) position : vec4f,
  \(atlocation(0) color : vec4f
}

\(atvertex
fn vertex_main(\(atlocation(0) position: vec4f,
               \(atlocation(1) color: vec4f \-> VertexOut
{
  var output : VertexOut;
  output.position = position;
  output.color = color;
  return output;
}

\(atfragment
fn fragment_main(fragData: VertexOut) \-> \(atlocation(0) vec4f
{
  return fragData.color;
}
\(ga;
.EE
.PP
When we compile the shader module, we use
\f[CR]getCompilationInfo()\f[R] to grab some information about the
resulting error:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[I]// \&...\f[R]

  \f[B]const\f[R] shaderModule = device.createShaderModule({
    code: shaders,
  });

  \f[B]const\f[R] shaderInfo = \f[B]await\f[R] shaderModule.getCompilationInfo();
  \f[B]const\f[R] firstMessage = shaderInfo.messages[0];

  console.log(firstMessage.lineNum); \f[I]// 9\f[R]
  console.log(firstMessage.message); \f[I]// \(dqexpected \(aq)\(aq for function declaration\(dq\f[R]
  console.log(firstMessage.type); \f[I]// \(dqerror\(dq\f[R]

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
