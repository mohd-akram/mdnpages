.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.ATTACHSHADOW" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.attachShadow \- Element: attachShadow() method
.SH SYNOPSIS
The \f[B]\f[CB]Element.attachShadow()\f[B]\f[R] method attaches a shadow
DOM tree to the specified element and returns a reference to its
\f[CR]ShadowRoot\f[R].
.SH ELEMENTS YOU CAN ATTACH A SHADOW TO
Note that you can\(cqt attach a shadow root to every type of element.
There are some that can\(cqt have a shadow DOM for security reasons (for
example \f[CR]<a>\f[R]).
.PP
The following is a list of elements you \f[I]can\f[R] attach a shadow
root to:
.IP \(bu 2
Any autonomous custom element with a \c
.UR https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
valid name
.UE \c
.IP \(bu 2
\f[CR]<article>\f[R]
.IP \(bu 2
\f[CR]<aside>\f[R]
.IP \(bu 2
\f[CR]<blockquote>\f[R]
.IP \(bu 2
\f[CR]<body>\f[R]
.IP \(bu 2
\f[CR]<div>\f[R]
.IP \(bu 2
\f[CR]<footer>\f[R]
.IP \(bu 2
\f[CR]h1\f[R]
.IP \(bu 2
\f[CR]h2\f[R]
.IP \(bu 2
\f[CR]h3\f[R]
.IP \(bu 2
\f[CR]h4\f[R]
.IP \(bu 2
\f[CR]h5\f[R]
.IP \(bu 2
\f[CR]h6\f[R]
.IP \(bu 2
\f[CR]<header>\f[R]
.IP \(bu 2
\f[CR]<main>\f[R]
.IP \(bu 2
\f[CR]<nav>\f[R]
.IP \(bu 2
\f[CR]<p>\f[R]
.IP \(bu 2
\f[CR]<section>\f[R]
.IP \(bu 2
\f[CR]<span>\f[R]
.SH CALLING THIS METHOD ON AN ELEMENT THAT IS ALREADY A SHADOW HOST
The method may be called on an element that already has a declarative
shadow root, provided the specified mode \f[CR]mode\f[R] matches the
existing mode.
In this case the \f[CR]ShadowRoot\f[R] that was already present will be
cleared and returned.
This allows for cases where, for example, server\-side rendering has
already declaratively created a shadow root, and then client\-side code
attempts to attach the root again.
.PP
Otherwise calling \f[CR]attachShadow()\f[R] on an element that already
has a shadow root will throw an exception.
.SH SYNTAX
.IP
.EX
attachShadow(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R]
An object which contains the following fields:
.RS
.TP
\f[B]mode\f[R]
A string specifying the \f[I]encapsulation mode\f[R] for the shadow DOM
tree.
This can be one of:
.RS
.TP
\f[B]open\f[R]
Elements of the shadow root are accessible from JavaScript outside the
root, for example using \f[CR]Element.shadowRoot\f[R]:
.RS
.IP
.EX
element.attachShadow({ mode: \(dqopen\(dq });
element.shadowRoot; \f[I]// Returns a ShadowRoot obj\f[R]
.EE
.RE
.TP
\f[B]closed\f[R]
Denies access to the node(s) of a closed shadow root from JavaScript
outside it:
.RS
.IP
.EX
element.attachShadow({ mode: \(dqclosed\(dq });
element.shadowRoot; \f[I]// Returns null\f[R]
.EE
.RE
.RE
.TP
\f[B]clonable\f[R] \f[I](optional)\f[R]
A boolean that specifies whether the shadow root is clonable: when set
to \f[CR]true\f[R], the shadow host cloned with
\f[CR]Node.cloneNode()\f[R] or \f[CR]Document.importNode()\f[R] will
include shadow root in the copy.
Its default value is \f[CR]false\f[R].
.TP
\f[B]delegatesFocus\f[R] \f[I](optional)\f[R]
A boolean that, when set to \f[CR]true\f[R], specifies behavior that
mitigates custom element issues around focusability.
When a non\-focusable part of the shadow DOM is clicked, the first
focusable part is given focus, and the shadow host is given any
available \f[CR]:focus\f[R] styling.
Its default value is \f[CR]false\f[R].
.TP
\f[B]serializable\f[R] \f[I](optional)\f[R]
A boolean that, when set to \f[CR]true\f[R], indicates that the shadow
root is serializable.
If set, the shadow root may be serialized by calling the
\f[CR]Element.getHTML()\f[R] or \f[CR]ShadowRoot.getHTML()\f[R] methods
with the \f[CR]options.serializableShadowRoots\f[R] parameter set
\f[CR]true\f[R].
Its default value is \f[CR]false\f[R].
.TP
\f[B]slotAssignment\f[R] \f[I](optional)\f[R]
A string specifying the \f[I]slot assignment mode\f[R] for the shadow
DOM tree.
This can be one of:
.RS
.TP
\f[B]named\f[R]
Elements are automatically assigned to \f[CR]<slot>\f[R] elements within
this shadow root.
Any descendants of the host with a \f[CR]slot\f[R] attribute which
matches the \f[CR]name\f[R] attribute of a \f[CR]<slot>\f[R] within this
shadow root will be assigned to that slot.
Any top\-level children of the host with no \f[CR]slot\f[R] attribute
will be assigned to a \f[CR]<slot>\f[R] with no \f[CR]name\f[R]
attribute (the \(lqdefault slot\(rq) if one is present.
.TP
\f[B]manual\f[R]
Elements are not automatically assigned to \f[CR]<slot>\f[R] elements.
Instead, they must be manually assigned with
\f[CR]HTMLSlotElement.assign()\f[R].
Its default value is \f[CR]named\f[R].
.RE
.RE
.SS Return value
Returns a \f[CR]ShadowRoot\f[R] object.
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
This error may be thrown when you try to attach a shadow root to an
element:
.RS
.IP \(bu 2
outside the HTML namespace or that can\(cqt have a shadow attached to
it.
.IP \(bu 2
where the element definition static property \f[CR]disabledFeatures\f[R]
has been given a value of \f[CR]\(dqshadow\(dq\f[R].
.IP \(bu 2
that already has a shadow root that was not created declaratively.
.IP \(bu 2
that has a declarative shadow root but the specified \f[CR]mode\f[R]
does not match the existing mode.
.RE
.SH EXAMPLES
.SS Word count custom element
The following example is taken from our \c
.UR https://github.com/mdn/web-components-examples/tree/main/word-count-web-component
word\-count\-web\-component
.UE \c
\ demo (\c
.UR https://mdn.github.io/web-components-examples/word-count-web-component/
see it live also
.UE \c
).
You can see that we use \f[CR]attachShadow()\f[R] in the middle of the
code to create a shadow root, which we then attach our custom
element\(cqs contents to.
.IP
.EX
\f[I]// Create a class for the element\f[R]
\f[B]class\f[R] WordCount \f[B]extends\f[R] HTMLParagraphElement {
  constructor() {
    \f[I]// Always call super first in constructor\f[R]
    \f[B]super\f[R]();

    \f[I]// count words in element\(aqs parent element\f[R]
    \f[B]const\f[R] wcParent = \f[B]this\f[R].parentNode;

    \f[B]function\f[R] countWords(node) {
      \f[B]const\f[R] text = node.innerText || node.textContent;
      \f[B]return\f[R] text
        .trim()
        .split(/\(rss+/g)
        .filter((a) \f[B]=>\f[R] a.trim().length > 0).length;
    }

    \f[B]const\f[R] count = \(gaWords: ${countWords(wcParent)}\(ga;

    \f[I]// Create a shadow root\f[R]
    \f[B]const\f[R] shadow = \f[B]this\f[R].attachShadow({ mode: \(dqopen\(dq });

    \f[I]// Create text node and add word count to it\f[R]
    \f[B]const\f[R] text = document.createElement(\(dqspan\(dq);
    text.textContent = count;

    \f[I]// Append it to the shadow root\f[R]
    shadow.appendChild(text);

    \f[I]// Update count when element content changes\f[R]
    \f[B]this\f[R].parentNode.addEventListener(\(dqinput\(dq, () \f[B]=>\f[R] {
      text.textContent = \(gaWords: ${countWords(wcParent)}\(ga;
    });
  }
}

\f[I]// Define the new element\f[R]
customElements.define(\(dqword\-count\(dq, WordCount, { extends: \(dqp\(dq });
.EE
.SS Disabling shadow DOM
If the element has a static property named \f[CR]disabledFeatures\f[R],
which is an array containing the string \f[CR]\(dqshadow\(dq\f[R], then
the \f[CR]attachShadow()\f[R] call will throw an exception.
.PP
For example:
.IP
.EX
\f[B]class\f[R] MyCustomElement \f[B]extends\f[R] HTMLElement {
  \f[I]// Disable shadow DOM for this element.\f[R]
  \f[B]static\f[R] disabledFeatures = [\(dqshadow\(dq];

  constructor() {
    \f[B]super\f[R]();
  }

  connectedCallback() {
    \f[I]// Create a shadow root.\f[R]
    \f[I]// This will throw an exception.\f[R]
    \f[B]const\f[R] shadow = \f[B]this\f[R].attachShadow({ mode: \(dqopen\(dq });
  }
}

\f[I]// Define the new element\f[R]
customElements.define(\(dqmy\-custom\-element\(dq, MyCustomElement);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]ShadowRoot.mode\f[R]
.IP \(bu 2
\f[CR]ShadowRoot.delegatesFocus\f[R]
.IP \(bu 2
\f[CR]ShadowRoot.slotAssignment\f[R]
.IP \(bu 2
Declaratively attach a shadow root with the \f[CR]shadowrootmode\f[R]
attribute of the \f[CR]<template>\f[R] element
.IP \(bu 2
\c
.UR https://web.dev/articles/declarative-shadow-dom
Declarative shadow DOM
.UE \c
\ on web.dev (2023)
