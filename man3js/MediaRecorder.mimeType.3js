.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "MediaRecorder.mimeType" "JS" "February 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaRecorder.mimeType \- MediaRecorder: mimeType property
.SH SYNOPSIS
The \f[B]\f[CB]mimeType\f[B]\f[R] read\-only property of the
\f[CR]MediaRecorder\f[R] interface returns the MIME media type that was
specified when creating the \f[CR]MediaRecorder\f[R] object, or, if none
was specified, which was chosen by the browser.
This is the file format of the file that would result from writing all
of the recorded data to disk.
.PP
Keep in mind that not all codecs are supported by a given container; if
you write media using a codec that is not supported by a given media
container, the resulting file may not work reliably if at all when you
try to play it back.
See our media type and format guide for information about container and
codec support across browsers.
.RS
.PP
\f[B]Note:\f[R] The term \[lq]MIME type\[rq] is officially considered to
be historical; these strings are now officially known as \f[B]media
types\f[R].
MDN Web Docs content uses the terms interchangeably.
.RE
.SH VALUE
The MIME media type which describes the format of the recorded media, as
a string.
This string \f[I]may\f[R] include the \f[CR]codecs\f[R] parameter,
giving details about the codecs and the codec configurations used by the
media recorder.
.PP
The media type strings are standardized by the Internet Assigned Numbers
Authority (IANA).
For their official list of defined media type strings, see the article
\c
.UR https://www.iana.org/assignments/media-types/media-types.xhtml
Media Types
.UE \c
\ on the IANA site.
See also media types to learn more about media types and how they\[cq]re
used in web content and by web browsers.
.SH EXAMPLES
.IP
.EX
\f[B]if\f[R] (navigator.mediaDevices) {
  console.log(\[dq]getUserMedia supported.\[dq]);

  \f[B]const\f[R] constraints = { audio: \f[B]true\f[R], video: \f[B]true\f[R] };
  \f[B]const\f[R] chunks = [];

  navigator.mediaDevices
    .getUserMedia(constraints)
    .then((stream) \f[B]=>\f[R] {
      \f[B]const\f[R] options = {
        audioBitsPerSecond: 128000,
        videoBitsPerSecond: 2500000,
        mimeType: \[dq]video/mp4\[dq],
      };
      \f[B]const\f[R] mediaRecorder = \f[B]new\f[R] MediaRecorder(stream, options);
      m = mediaRecorder;

      m.mimeType; \f[I]// would return \[aq]video/mp4\[aq]\f[R]
      \f[I]// \&...\f[R]
    })
    .catch((error) \f[B]=>\f[R] {
      console.error(error.message);
    });
}
.EE
.PP
Changing the \f[CR]mimeType\f[R] in \f[CR]options\f[R] to
\f[CR]\[aq]video/mp4; codecs=\[dq]avc1.424028, mp4a.40.2\[dq]\[aq]\f[R]
causes \f[CR]MediaRecorder\f[R] to try to use AVC Constrained Baseline
Profile Level 4 for video and AAC\-LC (Low Complexity) for audio, which
is good for mobile and other possible resource\-constrained situations.
.PP
Assuming this configuration is acceptable to the user agent, the value
returned later by \f[CR]m.mimeType\f[R] would then be
\f[CR]video/mp4; codecs=\[dq]avc1.424028, mp4a.40.2\[dq]\f[R].
.SH SEE ALSO
.IP \[bu] 2
Using the MediaStream Recording API
.IP \[bu] 2
Codecs in common media types
.IP \[bu] 2
\c
.UR https://mdn.github.io/dom-examples/media/web-dictaphone/
Web Dictaphone
.UE \c
: MediaRecorder + getUserMedia + Web Audio API visualization demo, by \c
.UR https://github.com/chrisdavidmills
Chris Mills
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone
source on GitHub
.UE \c
\&.)
.IP \[bu] 2
\c
.UR https://simpl.info/mediarecorder/
simpl.info MediaStream Recording demo
.UE \c
, by \c
.UR https://github.com/samdutton
Sam Dutton
.UE \c
\&.
.IP \[bu] 2
\f[CR]MediaDevices.getUserMedia()\f[R]
