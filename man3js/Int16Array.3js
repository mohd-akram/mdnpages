.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "INT16ARRAY" "3JS" "June 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Int16Array \- Int16Array
.SH SYNOPSIS
The \f[B]\f[CB]Int16Array\f[B]\f[R] typed array represents an array of
16\-bit signed integers in the platform byte order.
If control over byte order is needed, use \f[CR]DataView\f[R] instead.
The contents are initialized to \f[CR]0\f[R] unless initialization data
is explicitly provided.
Once established, you can reference elements in the array using the
object\(cqs methods, or using standard array index syntax (that is,
using bracket notation).
.PP
\f[CR]Int16Array\f[R] is a subclass of the hidden \f[CR]TypedArray\f[R]
class.
.SH CONSTRUCTOR
.TP
\f[B]Int16Array()\f[R]
Creates a new \f[CR]Int16Array\f[R] object.
.SH STATIC PROPERTIES
\f[I]Also inherits static properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.TP
\f[B]Int16Array.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]2\f[R] in the case of \f[CR]Int16Array\f[R].
.SH STATIC METHODS
\f[I]Inherits static methods from its parent \f[CI]TypedArray\f[I]\f[R].
.SH INSTANCE PROPERTIES
\f[I]Also inherits instance properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.PP
These properties are defined on \f[CR]Int16Array.prototype\f[R] and
shared by all \f[CR]Int16Array\f[R] instances.
.TP
\f[B]Int16Array.prototype.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]2\f[R] in the case of a \f[CR]Int16Array\f[R].
.TP
\f[B]Int16Array.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Int16Array\f[R] instances, the initial value is the
\f[CR]Int16Array\f[R] constructor.
.SH INSTANCE METHODS
\f[I]Inherits instance methods from its parent
\f[CI]TypedArray\f[I]\f[R].
.SH EXAMPLES
.SS Different ways to create an Int16Array
.IP
.EX
\f[I]// From a length\f[R]
\f[B]const\f[R] int16 = \f[B]new\f[R] Int16Array(2);
int16[0] = 42;
console.log(int16[0]); \f[I]// 42\f[R]
console.log(int16.length); \f[I]// 2\f[R]
console.log(int16.BYTES_PER_ELEMENT); \f[I]// 2\f[R]

\f[I]// From an array\f[R]
\f[B]const\f[R] x = \f[B]new\f[R] Int16Array([21, 31]);
console.log(x[1]); \f[I]// 31\f[R]

\f[I]// From another TypedArray\f[R]
\f[B]const\f[R] y = \f[B]new\f[R] Int16Array(x);
console.log(y[0]); \f[I]// 21\f[R]

\f[I]// From an ArrayBuffer\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(16);
\f[B]const\f[R] z = \f[B]new\f[R] Int16Array(buffer, 2, 4);
console.log(z.byteOffset); \f[I]// 2\f[R]

\f[I]// From an iterable\f[R]
\f[B]const\f[R] iterable = (\f[B]function\f[R]* () {
  \f[B]yield\f[R]* [1, 2, 3];
})();
\f[B]const\f[R] int16FromIterable = \f[B]new\f[R] Int16Array(iterable);
console.log(int16FromIterable);
\f[I]// Int16Array [1, 2, 3]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]Int16Array\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
JavaScript typed arrays guide
.IP \(bu 2
\f[CR]TypedArray\f[R]
.IP \(bu 2
\f[CR]ArrayBuffer\f[R]
.IP \(bu 2
\f[CR]DataView\f[R]
