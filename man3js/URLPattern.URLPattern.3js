.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "URLPATTERN.URLPATTERN" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
URLPattern.URLPattern \- URLPattern: URLPattern() constructor
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]URLPattern()\f[B]\f[R] constructor returns a new
\f[CR]URLPattern\f[R] object representing the url pattern defined by the
parameters.
.SH SYNTAX
.IP
.EX
new URLPattern(input)
new URLPattern(input, baseURL)
new URLPattern(input, options)
new URLPattern(input, baseURL, options)
.EE
.SS Parameters
.TP
\f[B]input\f[R]
The input pattern that will be used for matching.
This can either be a string, or an object providing patterns for each
URL part individually.
The object members can be any of:
.RS
.IP \(bu 2
\f[CR]protocol\f[R]
.IP \(bu 2
\f[CR]username\f[R]
.IP \(bu 2
\f[CR]password\f[R]
.IP \(bu 2
\f[CR]hostname\f[R]
.IP \(bu 2
\f[CR]port\f[R]
.IP \(bu 2
\f[CR]pathname\f[R]
.IP \(bu 2
\f[CR]search\f[R]
.IP \(bu 2
\f[CR]hash\f[R]
.IP \(bu 2
\f[CR]baseURL\f[R]
.RS
.PP
\f[B]Note:\f[R] Omitted parts of the object will be treated as wildcards
(\f[CR]*\f[R]).
.RE
.RE
.TP
\f[B]baseURL\f[R] \f[I](optional)\f[R]
A string representing the base URL to use in cases where
\f[CR]input\f[R] is a relative pattern.
If not specified, it defaults to \f[CR]undefined\f[R].
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object providing options for matching the given pattern.
The possible object members are as follows:
.RS
.TP
\f[B]ignoreCase\f[R] \f[I](optional)\f[R]
Enables case\-insensitive matching if set to \f[CR]true\f[R].
If omitted or set to \f[CR]false\f[R], matching will be case\-sensitive.
.RE
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Indicates one of the following:
.RS
.IP \(bu 2
The given \f[CR]input\f[R] or \f[CR]baseURL\f[R] is not valid or
syntactically correct.
.IP \(bu 2
The given \f[CR]input\f[R] is relative, but no \f[CR]baseURL\f[R] is
provided to form a complete absolute URL.
.IP \(bu 2
A \f[CR]baseURL\f[R] is provided, and input is an absolute pattern or a
structured object.
.RE
.SH EXAMPLES
.SS Matching a pathname
.IP
.EX
\f[B]let\f[R] pattern1 = \f[B]new\f[R] URLPattern(\(dqhttps://example.com/books/:id\(dq);

\f[I]// same as\f[R]
\f[B]let\f[R] pattern2 = \f[B]new\f[R] URLPattern(\(dq/books/:id\(dq, \(dqhttps://example.com\(dq);

\f[I]// or\f[R]
\f[B]let\f[R] pattern3 = \f[B]new\f[R] URLPattern({
  protocol: \(dqhttps\(dq,
  hostname: \(dqexample.com\(dq,
  pathname: \(dq/books/:id\(dq,
});

\f[I]// or\f[R]
\f[B]let\f[R] pattern4 = \f[B]new\f[R] URLPattern({
  pathname: \(dq/books/:id\(dq,
  baseURL: \(dqhttps://example.com\(dq,
});
.EE
.SS Match the protocol and hostname
.IP
.EX
\f[B]let\f[R] pattern = \f[B]new\f[R] URLPattern({
  protocol: \(dqhttp{s}?\(dq,
  hostname: \(dq:subdomain.example.com\(dq,
});
.EE
.SS Match all possible structured parts
.IP
.EX
\f[B]let\f[R] pattern = \f[B]new\f[R] URLPattern({
  protocol: \(dqhttp{s}?\(dq,
  username: \(dq:username\(dq,
  password: \(dq:password\(dq,
  hostname: \(dq:subdomain.example.com\(dq,
  port: \(dq:port(80|443)\(dq,
  pathname: \(dq/:path\(dq,
  search: \(dq*\(dq,
  hash: \(dq*\(dq,
});
.EE
.SS Case\-insensitive matching
.IP
.EX
\f[I]// Case\-sensitive matching by default\f[R]
\f[B]const\f[R] pattern = \f[B]new\f[R] URLPattern(\(dqhttps://example.com/2022/feb/*\(dq);
console.log(pattern.test(\(dqhttps://example.com/2022/feb/xc44rsz\(dq)); \f[I]// true\f[R]
console.log(pattern.test(\(dqhttps://example.com/2022/Feb/xc44rsz\(dq)); \f[I]// false\f[R]
.EE
.PP
Setting the \f[CR]ignoreCase\f[R] option to \f[CR]true\f[R] in the
constructor switches all matching operations to case\-insensitive for
the given pattern:
.IP
.EX
\f[I]// Case\-insensitive matching\f[R]
\f[B]const\f[R] pattern = \f[B]new\f[R] URLPattern(\(dqhttps://example.com/2022/feb/*\(dq, {
  ignoreCase: \f[B]true\f[R],
});
console.log(pattern.test(\(dqhttps://example.com/2022/feb/xc44rsz\(dq)); \f[I]// true\f[R]
console.log(pattern.test(\(dqhttps://example.com/2022/Feb/xc44rsz\(dq)); \f[I]// true\f[R]
.EE
.SH USAGE NOTES
The \f[CR]URLPattern\f[R] constructor\(cqs input pattern can take two
forms \(em a pattern object, or a pattern string and optional baseURL.
.IP
.EX
\f[B]new\f[R] URLPattern(obj);
\f[B]new\f[R] URLPattern(pattern);
\f[B]new\f[R] URLPattern(pattern, baseURL);
.EE
.PP
The first type of constructor takes an object that describes the URLs
that should be matched by specifying patterns for each individual URL
part.
Its members can be any of \f[CR]protocol\f[R], \f[CR]username\f[R],
\f[CR]password\f[R], \f[CR]hostname\f[R], \f[CR]port\f[R],
\f[CR]pathname\f[R], \f[CR]search\f[R], \f[CR]hash\f[R], or
\f[CR]baseURL\f[R].
If the \f[CR]baseURL\f[R] property is provided it will be parsed as a
URL and used to populate any other properties that are missing.
If the \f[CR]baseURL\f[R] property is missing, then any other missing
properties default to the pattern \f[CR]*\f[R] wildcard, accepting any
input.
.PP
The second type of constructor takes a URL string that contains patterns
embedded in it.
The URL string may be relative if a \f[CR]baseURL\f[R] is provided as
the second argument.
Note that it may be necessary to escape some characters in the URL
string if it is ambiguous whether the character is separating different
URL components or is part of a pattern.
For example, you must write \f[CR]about\(rs\(rs:blank\f[R] to indicate
that the \f[CR]:\f[R] is the protocol suffix and not the start of a
\f[CR]:blank\f[R] named group pattern.
.SH SEE ALSO
.IP \(bu 2
A polyfill of \f[CR]URLPattern\f[R] is available \c
.UR https://github.com/kenchris/urlpattern-polyfill
on GitHub
.UE \c
