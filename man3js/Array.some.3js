.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Array.some" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.some \- Array.prototype.some()
.SH SYNOPSIS
The \f[B]\f[CB]some()\f[B]\f[R] method of \f[CR]Array\f[R] instances
tests whether at least one element in the array passes the test
implemented by the provided function.
It returns true if, in the array, it finds an element for which the
provided function returns true; otherwise it returns false.
It doesn\[cq]t modify the array.
.SH SYNTAX
.IP
.EX
some(callbackFn)
some(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a truthy value to indicate the element passes the test,
and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[CR]some()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
\f[CR]false\f[R] unless \f[CR]callbackFn\f[R] returns a truthy value for
an array element, in which case \f[CR]true\f[R] is immediately returned.
.SH DESCRIPTION
The \f[CR]some()\f[R] method is an iterative method.
It calls a provided \f[CR]callbackFn\f[R] function once for each element
in an array, until the \f[CR]callbackFn\f[R] returns a truthy value.
If such an element is found, \f[CR]some()\f[R] immediately returns
\f[CR]true\f[R] and stops iterating through the array.
Otherwise, if \f[CR]callbackFn\f[R] returns a falsy value for all
elements, \f[CR]some()\f[R] returns \f[CR]false\f[R].
Read the iterative methods section for more information about how these
methods work in general.
.PP
\f[CR]some()\f[R] acts like the \[lq]there exists\[rq] quantifier in
mathematics.
In particular, for an empty array, it returns \f[CR]false\f[R] for any
condition.
.PP
\f[CR]callbackFn\f[R] is invoked only for array indexes which have
assigned values.
It is not invoked for empty slots in sparse arrays.
.PP
\f[CR]some()\f[R] does not mutate the array on which it is called, but
the function provided as \f[CR]callbackFn\f[R] can.
Note, however, that the length of the array is saved \f[I]before\f[R]
the first invocation of \f[CR]callbackFn\f[R].
Therefore:
.IP \[bu] 2
\f[CR]callbackFn\f[R] will not visit any elements added beyond the
array\[cq]s initial length when the call to \f[CR]some()\f[R] began.
.IP \[bu] 2
Changes to already\-visited indexes do not cause \f[CR]callbackFn\f[R]
to be invoked on them again.
.IP \[bu] 2
If an existing, yet\-unvisited element of the array is changed by
\f[CR]callbackFn\f[R], its value passed to the \f[CR]callbackFn\f[R]
will be the value at the time that element gets visited.
Deleted elements are not visited.
.RS
.PP
\f[B]Warning:\f[R] Concurrent modifications of the kind described above
frequently lead to hard\-to\-understand code and are generally to be
avoided (except in special cases).
.RE
.PP
The \f[CR]some()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Testing value of array elements
The following example tests whether any element in the array is bigger
than 10.
.IP
.EX
\f[B]function\f[R] isBiggerThan10(element, index, array) {
  \f[B]return\f[R] element > 10;
}

[2, 5, 8, 1, 4].some(isBiggerThan10); \f[I]// false\f[R]
[12, 5, 8, 1, 4].some(isBiggerThan10); \f[I]// true\f[R]
.EE
.SS Testing array elements using arrow functions
Arrow functions provide a shorter syntax for the same test.
.IP
.EX
[2, 5, 8, 1, 4].some((x) \f[B]=>\f[R] x > 10); \f[I]// false\f[R]
[12, 5, 8, 1, 4].some((x) \f[B]=>\f[R] x > 10); \f[I]// true\f[R]
.EE
.SS Checking whether a value exists in an array
To mimic the function of the \f[CR]includes()\f[R] method, this custom
function returns \f[CR]true\f[R] if the element exists in the array:
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]apple\[dq], \[dq]banana\[dq], \[dq]mango\[dq], \[dq]guava\[dq]];

\f[B]function\f[R] checkAvailability(arr, val) {
  \f[B]return\f[R] arr.some((arrVal) \f[B]=>\f[R] val === arrVal);
}

checkAvailability(fruits, \[dq]kela\[dq]); \f[I]// false\f[R]
checkAvailability(fruits, \[dq]banana\[dq]); \f[I]// true\f[R]
.EE
.SS Converting any value to Boolean
.IP
.EX
\f[B]const\f[R] TRUTHY_VALUES = [\f[B]true\f[R], \[dq]true\[dq], 1];

\f[B]function\f[R] getBoolean(value) {
  \f[B]if\f[R] (\f[B]typeof\f[R] value === \[dq]string\[dq]) {
    value = value.toLowerCase().trim();
  }

  \f[B]return\f[R] TRUTHY_VALUES.some((t) \f[B]=>\f[R] t === value);
}

getBoolean(\f[B]false\f[R]); \f[I]// false\f[R]
getBoolean(\[dq]false\[dq]); \f[I]// false\f[R]
getBoolean(1); \f[I]// true\f[R]
getBoolean(\[dq]true\[dq]); \f[I]// true\f[R]
.EE
.SS Using the third argument of callbackFn
The \f[CR]array\f[R] argument is useful if you want to access another
element in the array, especially when you don\[cq]t have an existing
variable that refers to the array.
The following example first uses \f[CR]filter()\f[R] to extract the
positive values and then uses \f[CR]some()\f[R] to check whether the
array is strictly increasing.
.IP
.EX
\f[B]const\f[R] numbers = [3, \-1, 1, 4, 1, 5];
\f[B]const\f[R] isIncreasing = !numbers
  .filter((num) \f[B]=>\f[R] num > 0)
  .some((num, idx, arr) \f[B]=>\f[R] {
    \f[I]// Without the arr argument, there\[aq]s no way to easily access the\f[R]
    \f[I]// intermediate array without saving it to a variable.\f[R]
    \f[B]if\f[R] (idx === 0) \f[B]return\f[R] \f[B]false\f[R];
    \f[B]return\f[R] num <= arr[idx \- 1];
  });
console.log(isIncreasing); \f[I]// false\f[R]
.EE
.SS Using some() on sparse arrays
\f[CR]some()\f[R] will not run its predicate on empty slots.
.IP
.EX
console.log([1, , 3].some((x) \f[B]=>\f[R] x === \f[B]undefined\f[R])); \f[I]// false\f[R]
console.log([1, , 1].some((x) \f[B]=>\f[R] x !== 1)); \f[I]// false\f[R]
console.log([1, \f[B]undefined\f[R], 1].some((x) \f[B]=>\f[R] x !== 1)); \f[I]// true\f[R]
.EE
.SS Calling some() on non\-array objects
The \f[CR]some()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each property whose key is a
nonnegative integer less than \f[CR]length\f[R] until they all have been
accessed or \f[CR]callbackFn\f[R] returns \f[CR]true\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  2: \[dq]c\[dq],
  3: 3, \f[I]// ignored by some() since length is 3\f[R]
};
console.log(Array.prototype.some.call(arrayLike, (x) \f[B]=>\f[R] \f[B]typeof\f[R] x === \[dq]number\[dq]));
\f[I]// false\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.some\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.every()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.forEach()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.includes()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.some()\f[R]
