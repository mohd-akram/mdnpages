.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HISTORY.PUSHSTATE" "3JS" "March 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
History.pushState \- History: pushState() method
.SH SYNOPSIS
The \f[B]\f[CB]pushState()\f[B]\f[R] method of the \f[CR]History\f[R]
interface adds an entry to the browser\(cqs session history stack.
.SH SYNTAX
.IP
.EX
pushState(state, unused)
pushState(state, unused, url)
.EE
.SS Parameters
.TP
\f[B]state\f[R]
The \f[CR]state\f[R] object is a JavaScript object which is associated
with the new history entry created by \f[CR]pushState()\f[R].
Whenever the user navigates to the new \f[CR]state\f[R], a
\f[CR]popstate\f[R] event is fired, and the \f[CR]state\f[R] property of
the event contains a copy of the history entry\(cqs \f[CR]state\f[R]
object.
.RS
.PP
The \f[CR]state\f[R] object can be anything that can be serialized.
.RS
.PP
\f[B]Note:\f[R] Some browsers save \f[CR]state\f[R] objects to the
user\(cqs disk so they can be restored after the user restarts the
browser, and impose a size limit on the serialized representation of a
\f[CR]state\f[R] object, and will throw an exception if you pass a
\f[CR]state\f[R] object whose serialized representation is larger than
that size limit.
So in cases where you want to ensure you have more space than what some
browsers might impose, you\(cqre encouraged to use
\f[CR]sessionStorage\f[R] and/or \f[CR]localStorage\f[R].
.RE
.RE
.TP
\f[B]unused\f[R]
This parameter exists for historical reasons, and cannot be omitted;
passing an empty string is safe against future changes to the method.
.TP
\f[B]url\f[R] \f[I](optional)\f[R]
The new history entry\(cqs URL.
Note that the browser won\(cqt attempt to load this URL after a call to
\f[CR]pushState()\f[R], but it may attempt to load the URL later, for
instance, after the user restarts the browser.
The new URL does not need to be absolute; if it\(cqs relative, it\(cqs
resolved relative to the current URL.
The new URL must be of the same origin as the current URL; otherwise,
\f[CR]pushState()\f[R] will throw an exception.
If this parameter isn\(cqt specified, it\(cqs set to the document\(cqs
current URL.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Thrown if the associated document is not fully active, or if the
provided \f[CR]url\f[R] parameter is not a valid URL, or if the method
is called too frequently.
.TP
\f[B]DataCloneError\f[R] \f[B]DOMException\f[R]
Thrown if the provided \f[CR]state\f[R] parameter is not serializable.
.SH DESCRIPTION
In a sense, calling \f[CR]pushState()\f[R] is similar to setting
\f[CR]window.location = \(dq#foo\(dq\f[R], in that both will also create
and activate another history entry associated with the current document.
But \f[CR]pushState()\f[R] has a few advantages:
.IP \(bu 2
The new URL can be any URL in the same origin as the current URL.
In contrast, setting \f[CR]window.location\f[R] keeps you at the same
document only if you modify only the hash.
.IP \(bu 2
Changing the page\(cqs URL is optional.
In contrast, setting \f[CR]window.location = \(dq#foo\(dq;\f[R] only
creates a new history entry if the current hash isn\(cqt
\f[CR]#foo\f[R].
.IP \(bu 2
You can associate arbitrary data with your new history entry.
With the hash\-based approach, you need to encode all of the relevant
data into a short string.
.PP
Note that \f[CR]pushState()\f[R] never causes a \f[CR]hashchange\f[R]
event to be fired, even if the new URL differs from the old URL only in
its hash.
.SH EXAMPLES
This creates a new browser history entry setting the \f[I]state\f[R] and
\f[I]url\f[R].
.SS JavaScript
.IP
.EX
\f[B]const\f[R] state = { page_id: 1, user_id: 5 };
\f[B]const\f[R] url = \(dqhello\-world.html\(dq;

history.pushState(state, \(dq\(dq, url);
.EE
.SS Change a query parameter
.IP
.EX
\f[B]const\f[R] url = \f[B]new\f[R] URL(location);
url.searchParams.set(\(dqfoo\(dq, \(dqbar\(dq);
history.pushState({}, \(dq\(dq, url);
.EE
.SH SEE ALSO
.IP \(bu 2
Working with the History API
.IP \(bu 2
Window: popstate event
