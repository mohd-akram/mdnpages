.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MediaSession.setActionHandler" "JS" "December 16, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaSession.setActionHandler \- MediaSession: setActionHandler() method
.SH SYNOPSIS
The \f[B]\f[CB]setActionHandler()\f[B]\f[R] method of the
\f[CR]MediaSession\f[R] interface sets a handler for a media session
action.
These actions let a web app receive notifications when the user engages
a device\[cq]s built\-in physical or onscreen media controls, such as
play, stop, or seek buttons.
.SH SYNTAX
.IP
.EX
setActionHandler(type, callback)
.EE
.SS Parameters
.TP
\f[B]type\f[R]
A string representing an action type to listen for.
It will be one of the following:
.RS
.TP
\f[B]hangup\f[R]
End a call.
.TP
\f[B]nextslide\f[R]
Moves to the next slide, when presenting a slide deck.
.TP
\f[B]nexttrack\f[R]
Advances playback to the next track.
.TP
\f[B]pause\f[R]
Pauses playback of the media.
.TP
\f[B]play\f[R]
Begins (or resumes) playback of the media.
.TP
\f[B]previousslide\f[R]
Moves to the previous slide, when presenting a slide deck.
.TP
\f[B]previoustrack\f[R]
Moves back to the previous track.
.TP
\f[B]seekbackward\f[R]
Seeks backward through the media from the current position.
The \f[CR]seekOffset\f[R] property passed to the callback specifies the
amount of time to seek backward.
.TP
\f[B]seekforward\f[R]
Seeks forward from the current position through the media.
The \f[CR]seekOffset\f[R] property passed to the callback specifies the
amount of time to seek forward.
.TP
\f[B]seekto\f[R]
Moves the playback position to the specified time within the media.
The time to which to seek is specified in the \f[CR]seekTime\f[R]
property passed to the callback.
If you intend to perform multiple \f[CR]seekto\f[R] operations in rapid
succession, you can also specify the \f[CR]fastSeek\f[R] property passed
to the callback with a value of \f[CR]true\f[R].
This lets the browser know it can take steps to optimize repeated
operations, and is likely to result in improved performance.
.TP
\f[B]skipad\f[R]
Skips past the currently playing advertisement or commercial.
This action may or may not be available, depending on the platform and
user agent, or may be disabled due to subscription level or other
circumstances.
.TP
\f[B]stop\f[R]
Halts playback entirely.
.TP
\f[B]togglecamera\f[R]
Turn the user\[cq]s active camera on or off.
.TP
\f[B]togglemicrophone\f[R]
Mute or unmute the user\[cq]s microphone.
.RE
.TP
\f[B]callback\f[R]
A function to call when the specified action type is invoked.
The callback should not return a value.
The callback receives a dictionary containing the following properties:
.RS
.TP
\f[B]action\f[R]
A string representing the action type.
This property allows a single callback to handle multiple action types.
.TP
\f[B]fastSeek\f[R] \f[I](optional)\f[R]
A \f[CR]seekto\f[R] action may \f[I]optionally\f[R] include this
property, which is a Boolean value indicating whether or not to perform
a \[lq]fast\[rq] seek.
A \[lq]fast\[rq] seek is a seek being performed in a rapid sequence,
such as when fast\-forwarding or reversing through the media, rapidly
skipping through it.
This property can be used to indicate that you should use the shortest
possible method to seek the media.
\f[CR]fastSeek\f[R] is not included on the final action in the seek
sequence in this situation.
.TP
\f[B]seekOffset\f[R] \f[I](optional)\f[R]
If the \f[CR]action\f[R] is either \f[CR]seekforward\f[R] or
\f[CR]seekbackward\f[R] and this property is present, it is a floating
point value which indicates the number of seconds to move the play
position forward or backward.
If this property isn\[cq]t present, those actions should choose a
reasonable default distance to skip forward or backward (such as 7 or 10
seconds).
.TP
\f[B]seekTime\f[R] \f[I](optional)\f[R]
If the \f[CR]action\f[R] is \f[CR]seekto\f[R], this property must be
present and must be a floating\-point value indicating the absolute time
within the media to move the playback position to, where 0 indicates the
beginning of the media.
This property is not present for other action types.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SH DESCRIPTION
To remove a previously\-established action handler, call
\f[CR]setActionHandler()\f[R] again, specifying \f[CR]null\f[R] as the
\f[CR]callback\f[R].
.PP
The action handler receives as input a single parameter: an object which
provides both the action type (so the same function can handle multiple
action types), as well as data needed in order to perform the action.
.SH EXAMPLES
.SS Setting up action handlers for a music player
This example creates a new media session and assigns action handlers
(which don\[cq]t do anything) to it.
.IP
.EX
\f[B]if\f[R] (\[dq]mediaSession\[dq] \f[B]in\f[R] navigator) {
  navigator.mediaSession.metadata = \f[B]new\f[R] MediaMetadata({
    title: \[dq]Unforgettable\[dq],
    artist: \[dq]Nat King Cole\[dq],
    album: \[dq]The Ultimate Collection (Remastered)\[dq],
    artwork: [
      {
        src: \[dq]https://dummyimage.com/96x96\[dq],
        sizes: \[dq]96x96\[dq],
        type: \[dq]image/png\[dq],
      },
      {
        src: \[dq]https://dummyimage.com/128x128\[dq],
        sizes: \[dq]128x128\[dq],
        type: \[dq]image/png\[dq],
      },
      {
        src: \[dq]https://dummyimage.com/192x192\[dq],
        sizes: \[dq]192x192\[dq],
        type: \[dq]image/png\[dq],
      },
      {
        src: \[dq]https://dummyimage.com/256x256\[dq],
        sizes: \[dq]256x256\[dq],
        type: \[dq]image/png\[dq],
      },
      {
        src: \[dq]https://dummyimage.com/384x384\[dq],
        sizes: \[dq]384x384\[dq],
        type: \[dq]image/png\[dq],
      },
      {
        src: \[dq]https://dummyimage.com/512x512\[dq],
        sizes: \[dq]512x512\[dq],
        type: \[dq]image/png\[dq],
      },
    ],
  });

  navigator.mediaSession.setActionHandler(\[dq]play\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]pause\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]stop\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]seekbackward\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]seekforward\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]seekto\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]previoustrack\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]nexttrack\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]skipad\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]togglecamera\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]togglemicrophone\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
  navigator.mediaSession.setActionHandler(\[dq]hangup\[dq], () \f[B]=>\f[R] {
    \f[I]/* Code excerpted. */\f[R]
  });
}
.EE
.PP
The following example sets up two functions for playing and pausing,
then uses them as callbacks with the relevant action handlers.
.IP
.EX
\f[B]const\f[R] actionHandlers = [
  \f[I]// play\f[R]
  [
    \[dq]play\[dq],
    \f[B]async\f[R] () \f[B]=>\f[R] {
      \f[I]// play our audio\f[R]
      \f[B]await\f[R] audioEl.play();
      \f[I]// set playback state\f[R]
      navigator.mediaSession.playbackState = \[dq]playing\[dq];
      \f[I]// update our status element\f[R]
      updateStatus(allMeta[index], \[dq]Action: play  |  Track is playing\&...\[dq]);
    },
  ],
  [
    \[dq]pause\[dq],
    () \f[B]=>\f[R] {
      \f[I]// pause out audio\f[R]
      audioEl.pause();
      \f[I]// set playback state\f[R]
      navigator.mediaSession.playbackState = \[dq]paused\[dq];
      \f[I]// update our status element\f[R]
      updateStatus(allMeta[index], \[dq]Action: pause  |  Track has been paused\&...\[dq]);
    },
  ],
];

\f[B]for\f[R] (\f[B]const\f[R] [action, handler] \f[B]of\f[R] actionHandlers) {
  \f[B]try\f[R] {
    navigator.mediaSession.setActionHandler(action, handler);
  } \f[B]catch\f[R] (error) {
    console.log(\[ga]The media session action \[dq]${action}\[dq] is not supported yet.\[ga]);
  }
}
.EE
.PP
This example uses appropriate action handlers to allow seeking in either
direction through the playing media.
.IP
.EX
navigator.mediaSession.setActionHandler(\[dq]seekbackward\[dq], (evt) \f[B]=>\f[R] {
  \f[I]// User clicked \[dq]Seek Backward\[dq] media notification icon.\f[R]
  \f[B]let\f[R] skipTime = evt.seekOffset || 10; \f[I]// Time to skip in seconds\f[R]
  audio.currentTime = Math.max(audio.currentTime \- skipTime, 0);
});

navigator.mediaSession.setActionHandler(\[dq]seekforward\[dq], (evt) \f[B]=>\f[R] {
  \f[I]// User clicked \[dq]Seek Forward\[dq] media notification icon.\f[R]
  \f[B]let\f[R] skipTime = evt.seekOffset || 10; \f[I]// Time to skip in seconds\f[R]
  audio.currentTime = Math.min(audio.currentTime + skipTime, audio.duration);
});
.EE
.PP
To remove a media action handler, assign it to null.
.IP
.EX
navigator.mediaSession.setActionHandler(\[dq]nexttrack\[dq], \f[B]null\f[R]);
.EE
.SS Supporting multiple actions in one handler function
You can also, if you prefer, use a single function to handle multiple
action types, by checking the value of the \f[CR]action\f[R] property:
.IP
.EX
\f[B]let\f[R] skipTime = 7;

navigator.mediaSession.setActionHandler(\[dq]seekforward\[dq], handleSeek);
navigator.mediaSession.setActionHandler(\[dq]seekbackward\[dq], handleSeek);

\f[B]function\f[R] handleSeek(details) {
  \f[B]switch\f[R] (details.action) {
    \f[B]case\f[R] \[dq]seekforward\[dq]:
      audio.currentTime = Math.min(
        audio.currentTime + skipTime,
        audio.duration,
      );
      \f[B]break\f[R];
    \f[B]case\f[R] \[dq]seekbackward\[dq]:
      audio.currentTime = Math.max(audio.currentTime \- skipTime, 0);
      \f[B]break\f[R];
  }
}
.EE
.PP
Here, the \f[CR]handleSeek()\f[R] function handles both
\f[CR]seekbackward\f[R] and \f[CR]seekforward\f[R] actions.
.SS Using action handlers to control a slide presentation
The \f[CR]\[dq]previousslide\[dq]\f[R] and
\f[CR]\[dq]nextslide\[dq]\f[R] action handlers can be used to handle
moving forward and backward through a slide presentation, for example
when the user puts their presentation into a Picture\-in\-Picture
window, and presses the browser\-supplied controls for navigating
through slides.
.IP
.EX
\f[B]try\f[R] {
  navigator.mediaSession.setActionHandler(\[dq]previousslide\[dq], () \f[B]=>\f[R] {
    log(\[aq]> User clicked \[dq]Previous Slide\[dq] icon.\[aq]);
    \f[B]if\f[R] (slideNumber > 1) slideNumber\-\-;
    updateSlide();
  });
} \f[B]catch\f[R] (error) {
  log(\[aq]Warning! The \[dq]previousslide\[dq] media session action is not supported.\[aq]);
}

\f[B]try\f[R] {
  navigator.mediaSession.setActionHandler(\[dq]nextslide\[dq], () \f[B]=>\f[R] {
    log(\[aq]> User clicked \[dq]Next Slide\[dq] icon.\[aq]);
    slideNumber++;
    updateSlide();
  });
} \f[B]catch\f[R] (error) {
  log(\[aq]Warning! The \[dq]nextslide\[dq] media session action is not supported.\[aq]);
}
.EE
.PP
See \c
.UR https://googlechrome.github.io/samples/media-session/slides.html
Presenting Slides / Media Session Sample
.UE \c
\ for a working example.
