.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATATRANSFERITEMLIST.ADD" "3JS" "June 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList.add \- DataTransferItemList: add() method
.SH SYNOPSIS
The \f[B]\f[CB]DataTransferItemList.add()\f[B]\f[R] method creates a new
\f[CR]DataTransferItem\f[R] using the specified data and adds it to the
drag data list.
The item may be a \f[CR]File\f[R] or a string of a given type.
If the item is successfully added to the list, the newly\-created
\f[CR]DataTransferItem\f[R] object is returned.
.SH SYNTAX
.IP
.EX
add(data, type)
add(file)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
A string representing the drag item\(cqs data.
.TP
\f[B]type\f[R]
A string of the drag item\(cqs type.
Some example types are \f[CR]text/html\f[R] and \f[CR]text/plain\f[R].
.TP
\f[B]file\f[R]
A \f[CR]File\f[R] object.
No type needs to be given in this case.
.SS Return value
A \f[CR]DataTransferItem\f[R] containing the specified data.
If the drag item couldn\(cqt be created (for example, if the associated
\f[CR]DataTransfer\f[R] object has no data store), \f[CR]null\f[R] is
returned.
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if the string \f[CR]data\f[R] parameter was provided, and the
list already contains an item whose \f[CR]kind\f[R] is
\f[CR]\(dqPlain Unicode string\(dq\f[R] and whose type is equal to the
specified type parameter.
.SH EXAMPLES
This example shows the use of the \f[CR]add()\f[R] method.
.SS HTML
.IP
.EX
<\f[B]div\f[R]>
  <\f[B]p\f[R] id=\(dqsource\(dq draggable=\(dqtrue\(dq>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </\f[B]p\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] id=\(dqtarget\(dq>Drop Zone</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]margin\f[R]: 0em;
  \f[B]padding\f[R]: 2em;
}
source {
  \f[B]color\f[R]: blue;
  \f[B]border\f[R]: 1px solid black;
}
target {
  \f[B]border\f[R]: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] source = document.getElementById(\(dqsource\(dq);
\f[B]const\f[R] target = document.getElementById(\(dqtarget\(dq);

source.addEventListener(\(dqdragstart\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragStart\(dq);
  \f[I]// Add this element\(aqs id to the drag payload so the drop handler will\f[R]
  \f[I]// know which element to add to its tree\f[R]
  \f[B]const\f[R] dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \(dqtext/plain\(dq);
  \f[I]// Add some other items to the drag payload\f[R]
  dataList.add(\(dq<p>Paragraph\&...</p>\(dq, \(dqtext/html\(dq);
  dataList.add(\(dqhttp://www.example.org\(dq, \(dqtext/uri\-list\(dq);
});

source.addEventListener(\(dqdragend\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragEnd\(dq);
  \f[B]const\f[R] dataList = ev.dataTransfer.items;
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < dataList.length; i++) {
    dataList.remove(i);
  }
  \f[I]// Clear any remaining drag data\f[R]
  dataList.clear();
});

target.addEventListener(\(dqdrop\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqDrop\(dq);
  ev.preventDefault();
  \f[I]// Loop through the dropped items and log their data\f[R]
  \f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] event.dataTransfer.items) {
    \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(\(dq\(hatext/plain\(dq)) {
      \f[I]// This item is the target node\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        ev.target.appendChild(document.getElementById(s));
      });
    } \f[B]else\f[R] \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(\(dq\(hatext/html\(dq)) {
      \f[I]// Drag data item is HTML\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        console.log(\(ga\&... Drop: HTML = ${s}\(ga);
      });
    } \f[B]else\f[R] \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(\(dq\(hatext/uri\-list\(dq)) {
      \f[I]// Drag data item is URI\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        console.log(\(ga\&... Drop: URI = ${s}\(ga);
      });
    }
  }
});

target.addEventListener(\(dqdragover\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragOver\(dq);
  ev.preventDefault();
  \f[I]// Set the dropEffect to move\f[R]
  ev.dataTransfer.dropEffect = \(dqmove\(dq;
});
.EE
.SS Result
Result link
