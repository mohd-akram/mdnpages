.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CSPVIOLATIONREPORTBODY.DISPOSITION" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSPViolationReportBody.disposition \- CSPViolationReportBody:
disposition property
.SH SYNOPSIS
The \f[B]\f[CB]disposition\f[B]\f[R] read\-only property of the
\f[CR]CSPViolationReportBody\f[R] interface indicates whether the user
agent is configured to enforce Content Security Policy (CSP) violations
or only report them.
.SH VALUE
Possible values are:
.TP
\f[B]\(dqenforce\(dq\f[R]
The policy is enforced and the resource request is blocked.
.TP
\f[B]\(dqreport\(dq\f[R]
The violation is reported but the resource request is not blocked.
.SH EXAMPLES
.SS CSP inline script violation showing the disposition
This example triggers a CSP violation using an inline script, and
reports the violation using a \f[CR]ReportingObserver\f[R].
The \f[CR]disposition\f[R] is logged.
.SS HTML
The HTML file below uses the \f[CR]<meta>\f[R] element to set the
\f[CR]Content\-Security\-Policy\f[R] \f[CR]default\-src\f[R] to
\f[CR]self\f[R], which allows scripts and other resources to be loaded
from the same domain, but does not allow inline scripts to be executed.
The document also includes an inline script, which should therefore
trigger a CSP violation.
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\(dqen\(dq>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R]
      http\-equiv=\(dqContent\-Security\-Policy\(dq
      content=\(dqdefault\-src \(aqself\(aq; report\-to csp\-endpoint\(dq />
    <\f[B]meta\f[R]
      http\-equiv=\(dqReporting\-Endpoints\(dq
      content=\(dqcsp\-endpoint=\(aqhttps://example.com/csp\-reports\(aq\(dq />
    <\f[B]script\f[R] src=\(dqmain.js\(dq></\f[B]script\f[R]>
    <\f[B]title\f[R]>CSP: Violation due to inline script</\f[B]title\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    <\f[B]h1\f[R]>CSP: Violation due to inline script</\f[B]h1\f[R]>
    <\f[B]script\f[R]>
      \f[B]const\f[R] int = 4;
    </\f[B]script\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SS JavaScript (main.js)
The document above also loads the external script \f[CR]main.js\f[R],
which is shown below.
Because this is loaded from the same domain as the HTML, it is not
blocked by the CSP.
.PP
The script creates a new \f[CR]ReportingObserver\f[R] to observe content
violation reports of type \f[CR]\(dqcsp\-violation\(dq\f[R].
Each time the callback function is invoked, we get the body of the first
entry of the reports array, and use it to log the file, line, and column
of the violation to the console.
.IP
.EX
\f[I]// main.js\f[R]
\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver(
  (reports, observer) \f[B]=>\f[R] {
    \f[B]const\f[R] cspViolationBody = reports[0].body;
    console.log(\(gadisposition: ${cspViolationBody.disposition}\(ga);
    \f[I]// For example: \(dqenforce\(dq\f[R]
  },
  {
    types: [\(dqcsp\-violation\(dq],
    buffered: \f[B]true\f[R],
  },
);

observer.observe();
.EE
.PP
Note that while there might be multiple reports in the returned array,
for brevity we only log the values of the first element.
.SS Results
If serving the above code, the log output would be:
.IP
.EX
disposition: enforce
.EE
.RS
.PP
\f[B]Note:\f[R] If \f[CR]Content\-Security\-Policy\-Reporting\-Only\f[R]
was enabled the disposition would be \f[CR]report\f[R].
Note however, that \f[CR]Content\-Security\-Policy\-Reporting\-Only\f[R]
must be served: it can\(cqt be set in the \f[CR]<meta>\f[R] element as
we have done above.
.RE
.SH SEE ALSO
.IP \(bu 2
\f[CR]SecurityPolicyViolationEvent.disposition\f[R]
