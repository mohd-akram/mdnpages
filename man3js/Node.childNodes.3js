.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "NODE.CHILDNODES" "3JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Node.childNodes \- Node: childNodes property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]childNodes\f[B]\f[R] property of the
\f[CR]Node\f[R] interface returns a live \f[CR]NodeList\f[R] of child
\f[CR]nodes\f[R] of the given element where the first child node is
assigned index \f[CR]0\f[R].
Child nodes include elements, text and comments.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]NodeList\f[R] being live means that its
content is changed each time new children are added or removed.
.PP
Browsers insert text nodes into a document to represent whitespace in
the source markup.
Therefore a node obtained, for example, using
\f[CR]Node.childNodes[0]\f[R] may refer to a whitespace text node rather
than the actual element the author intended to get.
.PP
See Whitespace in the DOM for more information.
.RE
.PP
The items in the collection of nodes are objects, not strings.
To get data from node objects, use their properties.
For example, to get the name of the first childNode, you can use
\f[CR]elementNodeReference.childNodes[0].nodeName\f[R].
.PP
The \f[CR]document\f[R] object itself has two children: the Doctype
declaration and the root element, typically referred to as
\f[CR]documentElement\f[R].
In HTML documents the latter is the \f[CR]<html>\f[R] element.
.PP
It is important to keep in mind that \f[CR]childNodes\f[R] includes
\f[I]all\f[R] child nodes, including non\-element nodes like text and
comment.
To get a collection containing only elements, use
\f[CR]Element.children\f[R] instead.
.SH VALUE
A live \f[CR]NodeList\f[R] containing the children of the node.
.RS
.PP
\f[B]Note:\f[R] Several calls to \f[CR]childNodes\f[R] return the
\f[I]same\f[R] \f[CR]NodeList\f[R].
.RE
.SH EXAMPLES
.SS Simple usage
.IP
.EX
\f[I]// Note that para is an object reference to a <p> element\f[R]

\f[I]// First check that the element has child nodes\f[R]
\f[B]if\f[R] (para.hasChildNodes()) {
  \f[B]let\f[R] children = para.childNodes;

  \f[B]for\f[R] (\f[B]const\f[R] node \f[B]of\f[R] children) {
    \f[I]// Do something with each child as children[i]\f[R]
    \f[I]// \f[R]\f[B]NOTE\f[R]\f[I]: List is live! Adding or removing children will change the list\(aqs \(galength\(ga\f[R]
  }
}
.EE
.SS Remove all children from a node
.IP
.EX
\f[I]// This is one way to remove all children from a node\f[R]
\f[I]// box is an object reference to an element\f[R]
\f[B]while\f[R] (box.firstChild) {
  \f[I]// The list is LIVE so it will re\-index each call\f[R]
  box.removeChild(box.firstChild);
}
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Node.firstChild\f[R]
.IP \(bu 2
\f[CR]Node.lastChild\f[R]
.IP \(bu 2
\f[CR]Node.nextSibling\f[R]
.IP \(bu 2
\f[CR]Node.previousSibling\f[R]
.IP \(bu 2
\f[CR]Element.children\f[R]
