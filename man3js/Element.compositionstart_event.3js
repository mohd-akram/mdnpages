.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Element.compositionstart_event" "JS" "June 10, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.compositionstart_event \- Element: compositionstart event
.SH SYNOPSIS
The \f[B]\f[CB]compositionstart\f[B]\f[R] event is fired when a text
composition system such as an input method editor starts a new
composition session.
.PP
For example, this event could be fired after a user starts entering a
Chinese character using a \c
.UR https://en.wikipedia.org/wiki/Pinyin
Pinyin
.UE \c
\ IME.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]compositionstart\[dq], (event) \f[B]=>\f[R] {});

oncompositionstart = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]CompositionEvent\f[R].
Inherits from \f[CR]UIEvent\f[R] and \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties of its parent,
\f[CI]UIEvent\f[I], and its ancestor \[em] \f[CI]Event\f[I].\f[R]
.TP
\f[B]CompositionEvent.data\f[R] \f[I](read\-only)\f[R]
Returns the characters generated by the input method that raised the
event; its varies depending on the type of event that generated the
\f[CR]CompositionEvent\f[R] object.
.TP
\f[B]CompositionEvent.locale\f[R] \f[I](read\-only)\f[R] \f[I](deprecated)\f[R]
Returns the locale of current input method (for example, the keyboard
layout locale if the composition is associated with IME).
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] inputElement = document.querySelector(\[aq]input[type=\[dq]text\[dq]]\[aq]);

inputElement.addEventListener(\[dq]compositionstart\[dq], (event) \f[B]=>\f[R] {
  console.log(\[ga]generated characters were: ${event.data}\[ga]);
});
.EE
.SS Live example
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\[dq]control\[dq]>
  <\f[B]label\f[R] for=\[dq]example\[dq]>
    Focus the text\-input control, then open your IME and begin typing.
  </\f[B]label\f[R]>
  <\f[B]input\f[R] type=\[dq]text\[dq] id=\[dq]example\[dq] name=\[dq]example\[dq] />
</\f[B]div\f[R]>

<\f[B]div\f[R] class=\[dq]event\-log\[dq]>
  <\f[B]label\f[R] for=\[dq]eventLog\[dq]>Event log:</\f[B]label\f[R]>
  <\f[B]textarea\f[R]
    readonly
    class=\[dq]event\-log\-contents\[dq]
    rows=\[dq]8\[dq]
    cols=\[dq]25\[dq]
    id=\[dq]eventLog\[dq]></\f[B]textarea\f[R]>
  <\f[B]button\f[R] class=\[dq]clear\-log\[dq]>Clear</\f[B]button\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] inputElement = document.querySelector(\[aq]input[type=\[dq]text\[dq]]\[aq]);
\f[B]const\f[R] log = document.querySelector(\[dq].event\-log\-contents\[dq]);
\f[B]const\f[R] clearLog = document.querySelector(\[dq].clear\-log\[dq]);

clearLog.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  log.textContent = \[dq]\[dq];
});

\f[B]function\f[R] handleEvent(event) {
  log.textContent += \[ga]${event.type}: ${event.data}\[rs]n\[ga];
}

inputElement.addEventListener(\[dq]compositionstart\[dq], handleEvent);
inputElement.addEventListener(\[dq]compositionupdate\[dq], handleEvent);
inputElement.addEventListener(\[dq]compositionend\[dq], handleEvent);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]compositionend\f[R], \f[CR]compositionupdate\f[R].
