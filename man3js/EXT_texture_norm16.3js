.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "EXT_texture_norm16" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
EXT_texture_norm16 \- EXT_texture_norm16 extension
.SH SYNOPSIS
The \f[B]\f[CB]EXT_texture_norm16\f[B]\f[R] extension is part of the
WebGL API and provides a set of new 16\-bit signed normalized and
unsigned normalized formats (fixed\-point texture, renderbuffer and
texture buffer).
.PP
When this extension is enabled:
.IP \[bu] 2
The \f[CR]WebGLRenderingContext.texImage2D()\f[R] and
\f[CR]WebGLRenderingContext.texSubImage2D()\f[R] methods accept new
formats provided by this extension.
.IP \[bu] 2
The 16\-bit normalized fixed\-point types \f[CR]ext.R16_EXT\f[R],
\f[CR]ext.RG16_EXT\f[R] and \f[CR]ext.RGBA16_EXT\f[R] become available
as color\-renderable formats and renderbuffers and be created in these
formats.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] This extension is only available to WebGL 2 contexts.
.RE
.SH CONSTANTS
.TP
\f[B]ext.R16_EXT\f[R]
Red 16\-bit unsigned format.
Color\-renderable.
.TP
\f[B]ext.RG16_EXT\f[R]
RG 16\-bit unsigned format.
Color\-renderable.
.TP
\f[B]ext.RGB16_EXT\f[R]
RGB 16\-bit unsigned format.
.TP
\f[B]ext.RGBA16_EXT\f[R]
RGBA 16\-bit unsigned format.
Color\-renderable.
.TP
\f[B]ext.R16_SNORM_EXT\f[R]
Red 16\-bit signed normalized format.
.TP
\f[B]ext.RG16_SNORM_EXT\f[R]
RG 16\-bit signed normalized format.
.TP
\f[B]ext.RGB16_SNORM_EXT\f[R]
RGB 16\-bit signed normalized format.
.TP
\f[B]ext.RGBA16_SNORM_EXT\f[R]
RGBA 16\-bit signed normalized format.
.SH EXAMPLES
.SS Enabling the extension
.IP
.EX
\f[B]let\f[R] ext = gl.getExtension(\[dq]EXT_texture_norm16\[dq]);
.EE
.SS Texture formats
The \f[CR]WebGLRenderingContext.texImage2D()\f[R] method accepts new
formats when \f[CR]EXT_texture_norm16\f[R] is enabled.
Example calls:
.IP
.EX
// imageData = Uint16Array
gl.texImage2D(gl.TEXTURE_2D, 0, ext.R16_EXT, 1, 1, 0, gl.RED, gl.UNSIGNED_SHORT, imageData);
gl.texImage2D(gl.TEXTURE_2D, 0, ext.RG16_EXT, 1, 1, 0, gl.RG, gl.UNSIGNED_SHORT, imageData);
gl.texImage2D(gl.TEXTURE_2D, 0, ext.RGB16_EXT, 1, 1, 0, gl.RGB, gl.UNSIGNED_SHORT, imageData);
gl.texImage2D(gl.TEXTURE_2D, 0, ext.RGBA16_EXT, 1, 1, 0, gl.RGBA, gl.UNSIGNED_SHORT, imageData);

// imageData = Int16Array
gl.texImage2D(gl.TEXTURE_2D, 0, ext.R16_SNORM_EXT, 1, 1, 0, gl.RED, gl.SHORT, imageData);
gl.texImage2D(gl.TEXTURE_2D, 0, ext.RG16_SNORM_EXT, 1, 1, 0, gl.RG, gl.SHORT, imageData);
gl.texImage2D(gl.TEXTURE_2D, 0, ext.RGB16_SNORM_EXT, 1, 1, 0, gl.RGB, gl.SHORT, imageData);
gl.texImage2D(gl.TEXTURE_2D, 0, ext.RGBA16_SNORM_EXT, 1, 1, 0, gl.RGBA, gl.SHORT, imageData);
.EE
.SS Renderbuffer formats
The \f[CR]WebGLRenderingContext.renderbufferStorage()\f[R] method
accepts \f[CR]ext.R16_EXT\f[R], \f[CR]ext.RG16_EXT\f[R] and
\f[CR]ext.RGBA16_EXT\f[R] as internal formats to create renderbuffers in
these formats.
Example calls:
.IP
.EX
gl.renderbufferStorage(gl.RENDERBUFFER, ext.R16_EXT, 1, 1);
gl.renderbufferStorage(gl.RENDERBUFFER, ext.RG16_EXT, 1, 1);
gl.renderbufferStorage(gl.RENDERBUFFER, ext.RGBA16_EXT, 1, 1);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.texImage2D()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.renderbufferStorage()\f[R]
