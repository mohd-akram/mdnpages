.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "IDBObjectStore.openCursor" "JS" "June 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore.openCursor \- IDBObjectStore: openCursor() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]openCursor()\f[B]\f[R] method of the
\f[CR]IDBObjectStore\f[R] interface returns an \f[CR]IDBRequest\f[R]
object, and, in a separate thread, returns a new
\f[CR]IDBCursorWithValue\f[R] object.
Used for iterating through an object store with a cursor.
.PP
To determine if the add operation has completed successfully, listen for
the results\[cq]s \f[CR]success\f[R] event.
.SH SYNTAX
.IP
.EX
openCursor()
openCursor(query)
openCursor(query, direction)
.EE
.SS Parameters
.TP
\f[B]query\f[R] \f[I](optional)\f[R]
A key or \f[CR]IDBKeyRange\f[R] to be queried.
If a single valid key is passed, this will default to a range containing
only that key.
If nothing is passed, this will default to a key range that selects all
the records in this object store.
.TP
\f[B]direction\f[R] \f[I](optional)\f[R]
A string telling the cursor which direction to travel.
The default is \f[CR]next\f[R].
Valid values are:
.RS
.TP
\f[B]next\f[R]
The cursor is opened at the start of the store; then, the cursor returns
all records, even duplicates, in the increasing order of keys.
.TP
\f[B]nextunique\f[R]
The cursor is opened at the start of the store; then, the cursor returns
all records, that are not duplicates, in the increasing order of keys.
.TP
\f[B]prev\f[R]
The cursor is opened at the end of the store; then, the cursor returns
all records, even duplicates, in the decreasing order of keys.
.TP
\f[B]prevunique\f[R]
The cursor is opened at the end of the store; then, the cursor returns
all records, that are not duplicates, in the decreasing order of keys.
.RE
.SS Return value
An \f[CR]IDBRequest\f[R] object on which subsequent events related to
this operation are fired.
.PP
If the operation is successful, the value of the request\[cq]s
\f[CR]result\f[R] property is:
.IP \[bu] 2
an \f[CR]IDBCursorWithValue\f[R] object pointing at the first record
matching the given query
.IP \[bu] 2
\f[CR]null\f[R] if no matching records were found.
.SS Exceptions
This method may raise a \f[CR]DOMException\f[R] of one of the following
types:
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if this \f[CR]IDBObjectStore\f[R] or \f[CR]IDBIndex\f[R] has been
deleted.
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if this \f[CR]IDBObjectStore\f[R]\[cq]s transaction is inactive.
.TP
\f[B]DataError\f[R] \f[B]DOMException\f[R]
Thrown if the specified key or key range is invalid.
.SH EXAMPLES
In this simple fragment we create a transaction, retrieve an object
store, then use a cursor to iterate through all the records in the
object store:
.IP
.EX
\f[B]const\f[R] transaction = db.transaction(\[dq]name\[dq], \[dq]readonly\[dq]);
\f[B]const\f[R] objectStore = transaction.objectStore(\[dq]name\[dq]);
\f[B]const\f[R] request = objectStore.openCursor();
request.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] cursor = event.target.result;
  \f[B]if\f[R] (cursor) {
    \f[I]// cursor.value contains the current record being iterated through\f[R]
    \f[I]// this is where you\[aq]d do something with the result\f[R]
    cursor.continue();
  } \f[B]else\f[R] {
    \f[I]// no more results\f[R]
  }
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
