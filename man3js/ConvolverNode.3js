'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ConvolverNode" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ConvolverNode \- ConvolverNode
.SH SYNOPSIS
The \f[CR]ConvolverNode\f[R] interface is an \f[CR]AudioNode\f[R] that
performs a Linear Convolution on a given \f[CR]AudioBuffer\f[R], often
used to achieve a reverb effect.
A \f[CR]ConvolverNode\f[R] always has exactly one input and one output.
.RS
.PP
\f[B]Note:\f[R] For more information on the theory behind Linear
Convolution, see the \c
.UR https://en.wikipedia.org/wiki/Convolution
Convolution article on Wikipedia
.UE \c
\&.
.RE
.PP
.TS
tab(@);
l l.
T{
Number of inputs
T}@T{
\f[CR]1\f[R]
T}
T{
Number of outputs
T}@T{
\f[CR]1\f[R]
T}
T{
Channel count mode
T}@T{
\f[CR]\[dq]clamped\-max\[dq]\f[R]
T}
T{
Channel count
T}@T{
\f[CR]1\f[R], \f[CR]2\f[R], or \f[CR]4\f[R]
T}
T{
Channel interpretation
T}@T{
\f[CR]\[dq]speakers\[dq]\f[R]
T}
.TE
.SH CONSTRUCTOR
.TP
\f[B]ConvolverNode()\f[R]
Creates a new \f[CR]ConvolverNode\f[R] object instance.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent, \f[CI]AudioNode\f[I]\f[R].
.TP
\f[B]ConvolverNode.buffer\f[R]
A mono, stereo, or 4\-channel \f[I]\f[CI]AudioBuffer\f[I]\f[R]
containing the (possibly multichannel) impulse response used by the
\f[CR]ConvolverNode\f[R] to create the reverb effect.
.TP
\f[B]ConvolverNode.normalize\f[R]
A boolean that controls whether the impulse response from the buffer
will be scaled by an equal\-power normalization when the
\f[CR]buffer\f[R] attribute is set, or not.
.SH INSTANCE METHODS
\f[I]No specific method; inherits methods from its parent,
\f[CI]AudioNode\f[I]\f[R].
.SH CONVOLVERNODE EXAMPLE
The following example shows basic usage of an AudioContext to create a
convolver node.
.RS
.PP
\f[B]Note:\f[R] You will need to find an impulse response to complete
the example below.
See this \c
.UR https://codepen.io/DonKarlssonSan/pen/doVKRE
Codepen
.UE \c
\ for an applied example.
.RE
.IP
.EX
\f[B]let\f[R] audioCtx = \f[B]new\f[R] window.AudioContext();

\f[B]async\f[R] \f[B]function\f[R] createReverb() {
  \f[B]let\f[R] convolver = audioCtx.createConvolver();

  \f[I]// load impulse response from file\f[R]
  \f[B]let\f[R] response = \f[B]await\f[R] fetch(\[dq]path/to/impulse\-response.wav\[dq]);
  \f[B]let\f[R] arraybuffer = \f[B]await\f[R] response.arrayBuffer();
  convolver.buffer = \f[B]await\f[R] audioCtx.decodeAudioData(arraybuffer);

  \f[B]return\f[R] convolver;
}

\f[I]// \&...\f[R]

\f[B]let\f[R] reverb = \f[B]await\f[R] createReverb();

\f[I]// someOtherAudioNode \-> reverb \-> destination\f[R]
someOtherAudioNode.connect(reverb);
reverb.connect(audioCtx.destination);
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
