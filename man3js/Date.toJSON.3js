.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATE.TOJSON" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.toJSON \- Date.prototype.toJSON()
.SH SYNOPSIS
The \f[B]\f[CB]toJSON()\f[B]\f[R] method of \f[CR]Date\f[R] instances
returns a string representing this date in the same ISO format as
\f[CR]toISOString()\f[R].
.IP
.EX
\f[B]const\f[R] event = \f[B]new\f[R] Date(\(dqAugust 19, 1975 23:15:30 UTC\(dq);

\f[B]const\f[R] jsonDate = event.toJSON();

console.log(jsonDate);
\f[I]// Expected output: \(dq1975\-08\-19T23:15:30.000Z\(dq\f[R]

console.log(\f[B]new\f[R] Date(jsonDate).toUTCString());
\f[I]// Expected output: \(dqTue, 19 Aug 1975 23:15:30 GMT\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
toJSON()
.EE
.SS Parameters
None.
.SS Return value
A string representing the given date in the date time string format
according to universal time, or \f[CR]null\f[R] when the date is
invalid.
For valid dates, the return value is the same as that of
\f[CR]toISOString()\f[R].
.SH DESCRIPTION
The \f[CR]toJSON()\f[R] method is automatically called by
\f[CR]JSON.stringify()\f[R] when a \f[CR]Date\f[R] object is
stringified.
This method is generally intended to, by default, usefully serialize
\f[CR]Date\f[R] objects during JSON serialization, which can then be
deserialized using the \f[CR]Date()\f[R] constructor as the reviver of
\f[CR]JSON.parse()\f[R].
.PP
The method first attempts to convert its \f[CR]this\f[R] value to a
primitive by calling its \f[CR][Symbol.toPrimitive]()\f[R] (with
\f[CR]\(dqnumber\(dq\f[R] as hint), \f[CR]valueOf()\f[R], and
\f[CR]toString()\f[R] methods, in that order.
If the result is a non\-finite number, \f[CR]null\f[R] is returned.
(This generally corresponds to an invalid date, whose
\f[CR]valueOf()\f[R] returns \f[CR]NaN\f[R].)
Otherwise, if the converted primitive is not a number or is a finite
number, the return value of \f[CR]this.toISOString()\f[R] is returned.
.PP
Note that the method does not check whether the \f[CR]this\f[R] value is
a valid \f[CR]Date\f[R] object.
However, calling \f[CR]Date.prototype.toJSON()\f[R] on
non\-\f[CR]Date\f[R] objects fails unless the object\(cqs number
primitive representation is \f[CR]NaN\f[R], or the object also has a
\f[CR]toISOString()\f[R] method.
.SH EXAMPLES
.SS Using toJSON()
.IP
.EX
\f[B]const\f[R] jsonDate = \f[B]new\f[R] Date(0).toJSON(); \f[I]// \(aq1970\-01\-01T00:00:00.000Z\(aq\f[R]
\f[B]const\f[R] backToDate = \f[B]new\f[R] Date(jsonDate);

console.log(jsonDate); \f[I]// 1970\-01\-01T00:00:00.000Z\f[R]
.EE
.SS Serialization round\-tripping
When parsing JSON containing date strings, you can use the
\f[CR]Date()\f[R] constructor to revive them into the original date
objects.
.IP
.EX
\f[B]const\f[R] fileData = {
  author: \(dqMaria\(dq,
  title: \(dqDate.prototype.toJSON()\(dq,
  createdAt: \f[B]new\f[R] Date(2019, 3, 15),
  updatedAt: \f[B]new\f[R] Date(2020, 6, 26),
};
\f[B]const\f[R] response = JSON.stringify(fileData);

\f[I]// Imagine transmission through network\f[R]

\f[B]const\f[R] data = JSON.parse(response, (key, value) \f[B]=>\f[R] {
  \f[B]if\f[R] (key === \(dqcreatedAt\(dq || key === \(dqupdatedAt\(dq) {
    \f[B]return\f[R] \f[B]new\f[R] Date(value);
  }
  \f[B]return\f[R] value;
});

console.log(data);
.EE
.RS
.PP
\f[B]Note:\f[R] The reviver of \f[CR]JSON.parse()\f[R] must be specific
to the payload shape you expect, because the serialization is
\f[I]irreversible\f[R]: it\(cqs not possible to distinguish between a
string that represents a Date and a normal string.
.RE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Date.prototype.toLocaleDateString()\f[R]
.IP \(bu 2
\f[CR]Date.prototype.toTimeString()\f[R]
.IP \(bu 2
\f[CR]Date.prototype.toUTCString()\f[R]
