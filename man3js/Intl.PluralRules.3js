.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Intl.PluralRules" "JS" "November 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.PluralRules \- Intl.PluralRules
.SH SYNOPSIS
The \f[B]\f[CB]Intl.PluralRules\f[B]\f[R] object enables
plural\-sensitive formatting and plural\-related language rules.
.SH DESCRIPTION
Languages use different patterns for expressing both plural numbers of
items (cardinal numbers) and for expressing the order of items (ordinal
numbers).
English has two forms for expressing cardinal numbers: one for the
singular \[lq]item\[rq] (1 hour, 1 dog, 1 fish) and the other for zero
or any other number of \[lq]items\[rq] (0 hours, 2 lemmings, 100000.5
fish), while Chinese has only one form, and Arabic has six!
Similarly, English has four forms for expressing ordinal numbers:
\[lq]th\[rq], \[lq]st\[rq], \[lq]nd\[rq], \[lq]rd\[rq], giving the
sequence: 0th, 1st, 2nd, 3rd, 4th, 5th, \&..., 21st, 22nd, 23rd, 24th,
25th, and so on, while both Chinese and Arabic only have one form for
ordinal numbers.
.PP
Given a particular language and set of formatting options, the methods
\f[CR]Intl.PluralRules.prototype.select()\f[R] and
\f[CR]Intl.PluralRules.prototype.selectRange()\f[R] return a
\f[I]tag\f[R] that represents the plural form of a single or a range of
numbers, cardinal or ordinal.
Code can use the returned tags to represent numbers appropriately for
the given language.
The full set of tags that might be returned are: \f[CR]zero\f[R],
\f[CR]one\f[R], \f[CR]two\f[R], \f[CR]few\f[R], \f[CR]many\f[R], and
\f[CR]other\f[R] (the \[lq]general\[rq] plural form, also used if the
language only has one form).
.PP
As English only has two forms for cardinal numbers, the
\f[CR]select()\f[R] method returns only two tags:
\f[CR]\[dq]one\[dq]\f[R] for the singular case, and
\f[CR]\[dq]other\[dq]\f[R] for all other cardinal numbers.
This allows construction of sentences that make sense in English for
each case, such as: \[lq]1 dog is happy; do you want to play with
it?\[rq] and \[lq]10 dogs are happy; do you want to play with
them?\[rq].
.PP
Creating appropriate sentences for each form depends on the language,
and even in English may not be as simple as just adding \[lq]s\[rq] to a
noun to make the plural form.
Using the example above, we see that the form may affect:
.IP \[bu] 2
\f[B]Nouns\f[R]: 1 dog, 2 dogs (but not \[lq]fish\[rq] or
\[lq]sheep\[rq], which have the same singular and plural form).
.IP \[bu] 2
\f[B]Verbs\f[R]: 1 dog \f[I]is\f[R] happy, 2 dogs \f[I]are\f[R] happy.
.IP \[bu] 2
\f[B]Pronouns\f[R] (and other referents): Do you want to play with
\f[I]it\f[R] / \f[I]them\f[R].
.PP
Other languages have more forms, and choosing appropriate sentences can
be even more complex.
.PP
\f[CR]select()\f[R] can return any of four tags for ordinal numbers in
English, representing each of the allowed forms: \f[CR]one\f[R] for
\[lq]st\[rq] numbers (1, 21, 31, \&...), \f[CR]two\f[R] for \[lq]nd\[rq]
numbers (2, 22, 32, \&...), \f[CR]few\f[R] for \[lq]rd\[rq] numbers (3,
33, 43, \&...), and \f[CR]other\f[R] for \[lq]th\[rq] numbers (0, 4\-20,
etc.).
Again, the returned tags allow appropriate formatting of strings
describing an ordinal number.
.PP
For more information about the rules and how they are used, see \c
.UR https://cldr.unicode.org/index/cldr-spec/plural-rules
Plural Rules
.UE \c
\&.
For a list of the rules and how they apply for different languages, see
the \c
.UR https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html
LDML Language Plural Rules
.UE \c
\&.
.SH CONSTRUCTOR
.TP
\f[B]Intl.PluralRules()\f[R]
Creates a new \f[CR]Intl.PluralRules\f[R] object.
.SH STATIC METHODS
.TP
\f[B]Intl.PluralRules.supportedLocalesOf()\f[R]
Returns an array containing those of the provided locales that are
supported without having to fall back to the runtime\[cq]s default
locale.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Intl.PluralRules.prototype\f[R]
and shared by all \f[CR]Intl.PluralRules\f[R] instances.
.TP
\f[B]Intl.PluralRules.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Intl.PluralRules\f[R] instances, the initial value is the
\f[CR]Intl.PluralRules\f[R] constructor.
.TP
\f[B]Intl.PluralRules.prototype[Symbol.toStringTag]\f[R]
The initial value of the \f[CR][Symbol.toStringTag]\f[R] property is the
string \f[CR]\[dq]Intl.PluralRules\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]Intl.PluralRules.prototype.resolvedOptions()\f[R]
Returns a new object with properties reflecting the locale and collation
options computed during initialization of the object.
.TP
\f[B]Intl.PluralRules.prototype.select()\f[R]
Returns a string indicating which plural rule to use for locale\-aware
formatting.
.TP
\f[B]Intl.PluralRules.prototype.selectRange()\f[R]
This method receives two values and returns a string indicating which
plural rule to use for locale\-aware formatting.
.SH EXAMPLES
.SS Using locales
This example shows some of the variations in localized plural rules for
cardinal numbers.
.PP
In order to get the format for the language used in the user interface
of your application, make sure to specify that language (and possibly
some fallback languages) using the constructor \f[CR]locales\f[R]
argument:
.IP
.EX
\f[I]// US English\f[R]
\f[B]const\f[R] enCardinalRules = \f[B]new\f[R] Intl.PluralRules(\[dq]en\-US\[dq]);
console.log(enCardinalRules.select(0)); \f[I]// \[dq]other\[dq]\f[R]
console.log(enCardinalRules.select(1)); \f[I]// \[dq]one\[dq]\f[R]
console.log(enCardinalRules.select(2)); \f[I]// \[dq]other\[dq]\f[R]
console.log(enCardinalRules.select(3)); \f[I]// \[dq]other\[dq]\f[R]

\f[I]// Arabic\f[R]
\f[B]const\f[R] arCardinalRules = \f[B]new\f[R] Intl.PluralRules(\[dq]ar\-EG\[dq]);
console.log(arCardinalRules.select(0)); \f[I]// \[dq]zero\[dq]\f[R]
console.log(arCardinalRules.select(1)); \f[I]// \[dq]one\[dq]\f[R]
console.log(arCardinalRules.select(2)); \f[I]// \[dq]two\[dq]\f[R]
console.log(arCardinalRules.select(6)); \f[I]// \[dq]few\[dq]\f[R]
console.log(arCardinalRules.select(18)); \f[I]// \[dq]many\[dq]\f[R]
.EE
.SS Using options
The plural form of the specified number may also depend on constructor
\f[CR]options\f[R], such as how the number is rounded, and whether it is
cardinal or ordinal.
.PP
This example shows how you can set the type of rules to
\[lq]ordinal\[rq], and how this affects the form for some numbers in US
English.
.IP
.EX
\f[I]// US English \- ordinal\f[R]
\f[B]const\f[R] enOrdinalRules = \f[B]new\f[R] Intl.PluralRules(\[dq]en\-US\[dq], { type: \[dq]ordinal\[dq] });
console.log(enOrdinalRules.select(0)); \f[I]// \[dq]other\[dq] (0th)\f[R]
console.log(enOrdinalRules.select(1)); \f[I]// \[dq]one\[dq]   (1st)\f[R]
console.log(enOrdinalRules.select(2)); \f[I]// \[dq]two\[dq]   (2nd)\f[R]
console.log(enOrdinalRules.select(3)); \f[I]// \[dq]few\[dq]   (3rd)\f[R]
console.log(enOrdinalRules.select(4)); \f[I]// \[dq]other\[dq] (4th)\f[R]
console.log(enOrdinalRules.select(21)); \f[I]// \[dq]one\[dq]  (21st)\f[R]
.EE
.SS Formatting text using the returned tag
The code below extends the previous example, showing how you might use
the returned tag for an ordinal number to format text in English.
.IP
.EX
\f[B]const\f[R] enOrdinalRules = \f[B]new\f[R] Intl.PluralRules(\[dq]en\-US\[dq], { type: \[dq]ordinal\[dq] });

\f[B]const\f[R] suffixes = \f[B]new\f[R] Map([
  [\[dq]one\[dq], \[dq]st\[dq]],
  [\[dq]two\[dq], \[dq]nd\[dq]],
  [\[dq]few\[dq], \[dq]rd\[dq]],
  [\[dq]other\[dq], \[dq]th\[dq]],
]);
\f[B]const\f[R] formatOrdinals = (n) \f[B]=>\f[R] {
  \f[B]const\f[R] rule = enOrdinalRules.select(n);
  \f[B]const\f[R] suffix = suffixes.get(rule);
  \f[B]return\f[R] \[ga]${n}${suffix}\[ga];
};

formatOrdinals(0); \f[I]// \[aq]0th\[aq]\f[R]
formatOrdinals(1); \f[I]// \[aq]1st\[aq]\f[R]
formatOrdinals(2); \f[I]// \[aq]2nd\[aq]\f[R]
formatOrdinals(3); \f[I]// \[aq]3rd\[aq]\f[R]
formatOrdinals(4); \f[I]// \[aq]4th\[aq]\f[R]
formatOrdinals(11); \f[I]// \[aq]11th\[aq]\f[R]
formatOrdinals(21); \f[I]// \[aq]21st\[aq]\f[R]
formatOrdinals(42); \f[I]// \[aq]42nd\[aq]\f[R]
formatOrdinals(103); \f[I]// \[aq]103rd\[aq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://formatjs.github.io/docs/polyfills/intl-pluralrules/
Polyfill of \f[CR]Intl.PluralRules\f[R] in FormatJS
.UE \c
.IP \[bu] 2
\f[CR]Intl\f[R]
