.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Response.clone" "JS" "July 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Response.clone \- Response: clone() method
.SH SYNOPSIS
The \f[B]\f[CB]clone()\f[B]\f[R] method of the \f[CR]Response\f[R]
interface creates a clone of a response object, identical in every way,
but stored in a different variable.
.PP
Like the underlying \f[CR]ReadableStream.tee\f[R] api, the
\f[CR]body\f[R] of a cloned \f[CR]Response\f[R] will signal backpressure
at the rate of the \f[I]faster\f[R] consumer of the two bodies, and
unread data is enqueued internally on the slower consumed
\f[CR]body\f[R] without any limit or backpressure.
Backpressure refers to the mechanism by which the streaming consumer of
data (in this case, the code that reads the body) slows down the
producer of data (such as the TCP server) so as not to load large
amounts of data in memory that is waiting to be used by the application.
If only one cloned branch is consumed, then the entire body will be
buffered in memory.
Therefore, \f[CR]clone()\f[R] is one way to read a response twice in
sequence, but you should not use it to read very large bodies in
parallel at different speeds.
.PP
\f[CR]clone()\f[R] throws a \f[CR]TypeError\f[R] if the response body
has already been used.
In fact, the main reason \f[CR]clone()\f[R] exists is to allow multiple
uses of body objects (when they are one\-use only.)
.SH SYNTAX
.IP
.EX
clone()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Response\f[R] object.
.SH EXAMPLES
In our \c
.UR https://github.com/mdn/dom-examples/blob/main/fetch/fetch-response-clone/index.html
Fetch Response clone example
.UE \c
\ (see \c
.UR https://mdn.github.io/dom-examples/fetch/fetch-response-clone/
Fetch Response clone live
.UE \c
) we create a new \f[CR]Request\f[R] object using the
\f[CR]Request()\f[R] constructor, passing it a JPG path.
We then fetch this request using \f[CR]fetch()\f[R].
When the fetch resolves successfully, we clone it, extract a blob from
both responses using two \f[CR]Response.blob\f[R] calls, create object
URLs out of the blobs using \f[CR]URL.createObjectURL()\f[R], and
display them in two separate \f[CR]<img>\f[R] elements.
.IP
.EX
\f[B]const\f[R] image1 = document.querySelector(\[dq].img1\[dq]);
\f[B]const\f[R] image2 = document.querySelector(\[dq].img2\[dq]);

\f[B]const\f[R] myRequest = \f[B]new\f[R] Request(\[dq]flowers.jpg\[dq]);

fetch(myRequest).then((response) \f[B]=>\f[R] {
  \f[B]const\f[R] response2 = response.clone();

  response.blob().then((myBlob) \f[B]=>\f[R] {
    \f[B]const\f[R] objectURL = URL.createObjectURL(myBlob);
    image1.src = objectURL;
  });

  response2.blob().then((myBlob) \f[B]=>\f[R] {
    \f[B]const\f[R] objectURL = URL.createObjectURL(myBlob);
    image2.src = objectURL;
  });
});
.EE
.SH SEE ALSO
.IP \[bu] 2
ServiceWorker API
.IP \[bu] 2
HTTP access control (CORS)
.IP \[bu] 2
HTTP
