.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPU" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPU \- GPU
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPU\f[B]\f[R] interface of the WebGPU API is the starting
point for using WebGPU.
It can be used to return a \f[CR]GPUAdapter\f[R] from which you can
request devices, configure features and limits, and more.
.PP
The \f[CR]GPU\f[R] object for the current context is accessed via the
\f[CR]Navigator.gpu\f[R] or \f[CR]WorkerNavigator.gpu\f[R] properties.
.SH INSTANCE PROPERTIES
.TP
\f[B]wgslLanguageFeatures\f[R] \f[I](read\-only)\f[R]
A \f[CR]WGSLLanguageFeatures\f[R] object that reports the \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#language-extension
WGSL language extensions
.UE \c
\ supported by the WebGPU implementation.
.SH INSTANCE METHODS
.TP
\f[B]requestAdapter()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a \f[CR]GPUAdapter\f[R]
object instance.
From this you can request a \f[CR]GPUDevice\f[R], which is the primary
interface for using WebGPU functionality.
.TP
\f[B]getPreferredCanvasFormat()\f[R]
Returns the optimal canvas texture format for displaying 8\-bit depth,
standard dynamic range content on the current system.
.SH EXAMPLES
.SS Requesting an adapter and a device
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();
  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[B]const\f[R] device = \f[B]await\f[R] adapter.requestDevice();

  \f[I]// \&...\f[R]
}
.EE
.SS Configuring a GPUCanvasContext with the optimal texture format
.IP
.EX
\f[B]const\f[R] canvas = document.querySelector(\(dq#gpuCanvas\(dq);
\f[B]const\f[R] context = canvas.getContext(\(dqwebgpu\(dq);

context.configure({
  device,
  format: navigator.gpu.getPreferredCanvasFormat(),
  alphaMode: \(dqpremultiplied\(dq,
});
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
