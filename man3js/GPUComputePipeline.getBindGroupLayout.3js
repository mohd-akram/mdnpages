.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMPUTEPIPELINE.GETBINDGROUPLAYOUT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUComputePipeline.getBindGroupLayout \- GPUComputePipeline:
getBindGroupLayout() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]getBindGroupLayout()\f[B]\f[R] method of the
\f[CR]GPUComputePipeline\f[R] interface returns the pipeline\(cqs
\f[CR]GPUBindGroupLayout\f[R] object with the given index (i.e.,
included in the originating \f[CR]GPUDevice.createComputePipeline()\f[R]
or \f[CR]GPUDevice.createComputePipelineAsync()\f[R] call\(cqs pipeline
layout).
.PP
If the \f[CR]GPUComputePipeline\f[R] was created with
\f[CR]layout: \(dqauto\(dq\f[R], this method is the only way to retrieve
the \f[CR]GPUBindGroupLayout\f[R]s generated by the pipeline.
.SH SYNTAX
.IP
.EX
getBindGroupLayout(index)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
A number representing the index of the \f[CR]GPUBindGroupLayout\f[R] to
return.
.SS Return value
A \f[CR]GPUBindGroupLayout\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]getBindGroupLayout()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUBindGroupLayout\f[R] object is returned:
.IP \(bu 2
\f[CR]index\f[R] is less than the number of
\f[CR]GPUBindGroupLayout\f[R] objects used in the pipeline layout.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] You can see complete working examples with
\f[CR]getBindGroupLayout()\f[R] in action in the \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\&.
.RE
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create a compute pipeline using layout: \(dqauto\(dq to automatically generate\f[R]
\f[I]// appropriate bind group layouts\f[R]
\f[B]const\f[R] computePipeline = device.createComputePipeline({
  layout: \(dqauto\(dq,
  compute: {
    module: shaderModule,
    entryPoint: \(dqmain\(dq,
  },
});

\f[I]// Create a bind group with the auto\-generated layout from the compute pipeline\f[R]
\f[B]const\f[R] computeBindGroup = device.createBindGroup({
  layout: computePipeline.getBindGroupLayout(0),
  entries: [
    {
      binding: 0,
      resource: { buffer: storageBuffer },
    },
  ],
});

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
