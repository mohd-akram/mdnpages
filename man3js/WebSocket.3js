.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBSOCKET" "3JS" "September 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebSocket \- WebSocket
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[CR]WebSocket\f[R] object provides the API for creating and
managing a WebSocket connection to a server, as well as for sending and
receiving data on the connection.
.PP
To construct a \f[CR]WebSocket\f[R], use the \f[CR]WebSocket()\f[R]
constructor.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]WebSocket\f[R] API has no way to apply
backpressure, therefore when messages arrive faster than the application
can process them, the application will either fill up the device\(cqs
memory by buffering those messages, become unresponsive due to 100% CPU
usage, or both.
For an alternative that provides backpressure automatically, see
\f[CR]WebSocketStream\f[R].
.RE
.SH CONSTRUCTOR
.TP
\f[B]WebSocket()\f[R]
Returns a newly created \f[CR]WebSocket\f[R] object.
.SH INSTANCE PROPERTIES
.TP
\f[B]WebSocket.binaryType\f[R]
The binary data type used by the connection.
.TP
\f[B]WebSocket.bufferedAmount\f[R] \f[I](read\-only)\f[R]
The number of bytes of queued data.
.TP
\f[B]WebSocket.extensions\f[R] \f[I](read\-only)\f[R]
The extensions selected by the server.
.TP
\f[B]WebSocket.protocol\f[R] \f[I](read\-only)\f[R]
The sub\-protocol selected by the server.
.TP
\f[B]WebSocket.readyState\f[R] \f[I](read\-only)\f[R]
The current state of the connection.
.TP
\f[B]WebSocket.url\f[R] \f[I](read\-only)\f[R]
The absolute URL of the WebSocket.
.SH INSTANCE METHODS
.TP
\f[B]WebSocket.close()\f[R]
Closes the connection.
.TP
\f[B]WebSocket.send()\f[R]
Enqueues data to be transmitted.
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]close\f[R]
Fired when a connection with a \f[CR]WebSocket\f[R] is closed.
Also available via the \f[CR]onclose\f[R] property
.TP
\f[B]error\f[R]
Fired when a connection with a \f[CR]WebSocket\f[R] has been closed
because of an error, such as when some data couldn\(cqt be sent.
Also available via the \f[CR]onerror\f[R] property.
.TP
\f[B]message\f[R]
Fired when data is received through a \f[CR]WebSocket\f[R].
Also available via the \f[CR]onmessage\f[R] property.
.TP
\f[B]open\f[R]
Fired when a connection with a \f[CR]WebSocket\f[R] is opened.
Also available via the \f[CR]onopen\f[R] property.
.SH EXAMPLES
.IP
.EX
\f[I]// Create WebSocket connection.\f[R]
\f[B]const\f[R] socket = \f[B]new\f[R] WebSocket(\(dqws://localhost:8080\(dq);

\f[I]// Connection opened\f[R]
socket.addEventListener(\(dqopen\(dq, (event) \f[B]=>\f[R] {
  socket.send(\(dqHello Server!\(dq);
});

\f[I]// Listen for messages\f[R]
socket.addEventListener(\(dqmessage\(dq, (event) \f[B]=>\f[R] {
  console.log(\(dqMessage from server \(dq, event.data);
});
.EE
.SH SEE ALSO
.IP \(bu 2
Writing WebSocket client applications
