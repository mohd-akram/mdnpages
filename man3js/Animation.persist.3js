.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Animation.persist" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Animation.persist \- Animation: persist() method
.SH SYNOPSIS
The \f[CR]persist()\f[R] method of the Web Animations API\[cq]s
\f[CR]Animation\f[R] interface explicitly persists an animation,
preventing it from being automatically removed when it is replaced by
another animation.
.SH SYNTAX
.IP
.EX
persist()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Using \f[CR]persist()\f[R]
In this example, we have three buttons:
.IP \[bu] 2
\[lq]Add persistent animation\[rq] and \[lq]Add transient animation\[rq]
each add a new transform animation to the red square.
The animations alternate direction: so the first is left to right, the
second is right to left, and so on.
\[lq]Add persistent animation\[rq] calls \f[CR]persist()\f[R] on the
animation it creates.
.IP \[bu] 2
The third button, \[lq]Cancel an animation\[rq], cancels the most
recently added animation.
.PP
The example displays a list of all animations that have not been
canceled, in the order they were added, along with each animation\[cq]s
\f[CR]replaceState\f[R].
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]animation\-target\[dq]></\f[B]div\f[R]>
<\f[B]button\f[R] id=\[dq]start\-persistent\[dq]>Add persistent animation</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]start\-transient\[dq]>Add transient animation</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]cancel\[dq]>Cancel an animation</\f[B]button\f[R]>
<\f[B]ol\f[R] id=\[dq]stack\[dq]></\f[B]ol\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]width\f[R]: 100px;
  \f[B]height\f[R]: 100px;
  \f[B]background\f[R]: red;
  \f[B]transform\f[R]: translate(100px);
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] target = document.getElementById(\[dq]animation\-target\[dq]);
\f[B]const\f[R] persistentButton = document.getElementById(\[dq]start\-persistent\[dq]);
\f[B]const\f[R] transientButton = document.getElementById(\[dq]start\-transient\[dq]);
\f[B]const\f[R] cancelButton = document.getElementById(\[dq]cancel\[dq]);
persistentButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] startAnimation(\f[B]true\f[R]));
transientButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] startAnimation(\f[B]false\f[R]));
cancelButton.addEventListener(\[dq]click\[dq], cancelTop);
\f[B]const\f[R] stack = [];

\f[B]let\f[R] offset = \-100;

\f[B]function\f[R] startAnimation(persist) {
  offset = \-offset;
  \f[B]const\f[R] animation = target.animate(
    { transform: \[ga]translate(${100 + offset}px)\[ga] },
    { duration: 500, fill: \[dq]forwards\[dq] },
  );
  stack.push(animation);
  \f[B]if\f[R] (persist) {
    animation.persist();
  }
  \f[I]// Add the animation to the displayed stack (implementation not shown)\f[R]
  show(animation, offset);
}

\f[B]function\f[R] cancelTop() {
  stack.pop()?.cancel();
}
.EE
.SS Result
Note that adding a new transient animation will replace any previously
added transient animation.
Those animations will be automatically removed, and their
\f[CR]replaceState\f[R] will be \f[CR]\[dq]removed\[dq]\f[R].
However, persistent animations will not be removed.
.PP
Also note that removed animations don\[cq]t affect the display; the
position of the \f[CR]<div>\f[R] is determined by the most recent active
or persisted animation.
.SH SEE ALSO
.IP \[bu] 2
Web Animations API
.IP \[bu] 2
\f[CR]Animation\f[R] for other methods and properties you can use to
control web page animation.
.IP \[bu] 2
\f[CR]Animation.replaceState\f[R]
.IP \[bu] 2
\f[CR]remove\f[R] event
