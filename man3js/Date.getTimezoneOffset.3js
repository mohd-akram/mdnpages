'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Date.getTimezoneOffset" "JS" "February 20, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.getTimezoneOffset \- Date.prototype.getTimezoneOffset()
.SH SYNOPSIS
The \f[B]\f[CB]getTimezoneOffset()\f[B]\f[R] method of \f[CR]Date\f[R]
instances returns the difference, in minutes, between this date as
evaluated in the UTC time zone, and the same date as evaluated in the
local time zone.
.SH SYNTAX
.IP
.EX
getTimezoneOffset()
.EE
.SS Parameters
None.
.SS Return value
A number representing the difference, in minutes, between the date as
evaluated in the UTC time zone and as evaluated in the local time zone.
The actual local time algorithm is implementation\-defined, and the
return value is allowed to be zero in runtimes without appropriate data.
Returns \f[CR]NaN\f[R] if the date is invalid.
.SH DESCRIPTION
\f[CR]date.getTimezoneOffset()\f[R] returns the difference, in minutes,
between \f[CR]date\f[R] as evaluated in the UTC time zone and as
evaluated in the local time zone \[em] that is, the time zone of the
host system in which the browser is being used (if the code is run from
the Web in a browser), or otherwise the host system of whatever
JavaScript runtime (for example, a Node.js environment) the code is
executed in.
.SS Negative values and positive values
The number of minutes returned by \f[CR]getTimezoneOffset()\f[R] is
positive if the local time zone is behind UTC, and negative if the local
time zone is ahead of UTC.
For example, for UTC+10, \f[CR]\-600\f[R] will be returned.
.PP
.TS
tab(@);
l l.
T{
Current time zone
T}@T{
Return value
T}
_
T{
UTC\-8
T}@T{
480
T}
T{
UTC
T}@T{
0
T}
T{
UTC+3
T}@T{
\-180
T}
.TE
.SS Varied results in Daylight Saving Time (DST) regions
In a region that annually shifts in and out of Daylight Saving Time
(DST), as \f[CR]date\f[R] varies, the number of minutes returned by
calling \f[CR]getTimezoneOffset()\f[R] can be non\-uniform.
.RS
.PP
\f[B]Note:\f[R] \f[CR]getTimezoneOffset()\f[R]\[cq]s behavior will never
differ based on the time when the code is run \[em] its behavior is
always consistent when running in the same region.
Only the value of \f[CR]date\f[R] affects the result.
.RE
.RS
.PP
\f[B]Note:\f[R] \c
.UR https://en.wikipedia.org/wiki/Daylight_saving_time_by_country#Past_observance
Many countries have experimented with not changing the time twice a year
.UE \c
\ and this has meant that DST has continued over the winter too.
For example in the UK DST lasted from 2:00AM 18 February 1968 to 3:00AM
31 October 1971, so during the winter the clocks were not set back.
.RE
.PP
In most implementations, the \c
.UR https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database
IANA time zone database
.UE \c
\ (tzdata) is used to precisely determine the offset of the local
timezone at the moment of the \f[CR]date\f[R].
However, if such information is unavailable, an implementation may
return zero.
.SH EXAMPLES
.SS Using getTimezoneOffset()
.IP
.EX
\f[I]// Create a Date instance for the current time\f[R]
\f[B]const\f[R] currentLocalDate = \f[B]new\f[R] Date();
\f[I]// Create a Date instance for 03:24 GMT\-0200 on May 1st in 2016\f[R]
\f[B]const\f[R] laborDay2016at0324GMTminus2 = \f[B]new\f[R] Date(\[dq]2016\-05\-01T03:24:00\-02:00\[dq]);
currentLocalDate.getTimezoneOffset() ===
  laborDay2016at0324GMTminus2.getTimezoneOffset();
\f[I]// true, always, in any timezone that doesn\[aq]t annually shift in and out of DST\f[R]
\f[I]// false, sometimes, in any timezone that annually shifts in and out of DST\f[R]
.EE
.SS getTimezoneOffset() and DST
In regions that use DST, the return value may change based on the time
of the year \f[CR]date\f[R] is in.
Below is the output in a runtime in New York, where the timezone is
UTC\-05:00.
.IP
.EX
\f[B]const\f[R] nyOffsetSummer = \f[B]new\f[R] Date(\[dq]2022\-02\-01\[dq]).getTimezoneOffset(); \f[I]// 300\f[R]
\f[B]const\f[R] nyOffsetWinter = \f[B]new\f[R] Date(\[dq]2022\-08\-01\[dq]).getTimezoneOffset(); \f[I]// 240\f[R]
.EE
.SS getTimezoneOffset() and historical data
Due to historical reasons, the timezone a region is in can be constantly
changing, even disregarding DST.
For example, below is the output in a runtime in Shanghai, where the
timezone is UTC+08:00.
.IP
.EX
\f[B]const\f[R] shModernOffset = \f[B]new\f[R] Date(\[dq]2022\-01\-27\[dq]).getTimezoneOffset(); \f[I]// \-480\f[R]
\f[B]const\f[R] shHistoricalOffset = \f[B]new\f[R] Date(\[dq]1943\-01\-27\[dq]).getTimezoneOffset(); \f[I]// \-540\f[R]
.EE
.PP
This is because during the \c
.UR https://en.wikipedia.org/wiki/Second_Sino-Japanese_War
Sino\-Japanese War
.UE \c
\ when Shanghai was under Japanese control, the timezone was changed to
UTC+09:00 to align with Japan\[cq]s (in effect, it was a
\[lq]year\-round DST\[rq]), and this was recorded in the IANA database.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Date\f[R]
