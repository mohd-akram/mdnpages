.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "WorkerGlobalScope" "JS" "April 4, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WorkerGlobalScope \- WorkerGlobalScope
.SH SYNOPSIS
The \f[B]\f[CB]WorkerGlobalScope\f[B]\f[R] interface of the Web Workers
API is an interface representing the scope of any worker.
Workers have no browsing context; this scope contains the information
usually conveyed by \f[CR]Window\f[R] objects \[em] in this case event
handlers, the console or the associated \f[CR]WorkerNavigator\f[R]
object.
Each \f[CR]WorkerGlobalScope\f[R] has its own event loop.
.PP
This interface is usually specialized by each worker type:
\f[CR]DedicatedWorkerGlobalScope\f[R] for dedicated workers,
\f[CR]SharedWorkerGlobalScope\f[R] for shared workers, and
\f[CR]ServiceWorkerGlobalScope\f[R] for ServiceWorker.
The \f[CR]self\f[R] property returns the specialized scope for each
context.
.SH INSTANCE PROPERTIES
\f[I]This interface inherits properties from the \f[CI]EventTarget\f[I]
interface.\f[R]
.TP
\f[B]WorkerGlobalScope.caches\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]CacheStorage\f[R] object associated with the current
context.
This object enables functionality such as storing assets for offline
use, and generating custom responses to requests.
.TP
\f[B]console\f[R] \f[I](read\-only)\f[R] \f[I](non\-standard)\f[R]
Returns the \f[CR]console\f[R] associated with the worker.
.TP
\f[B]WorkerGlobalScope.crossOriginIsolated\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that indicates whether the website is in a
cross\-origin isolation state.
.TP
\f[B]WorkerGlobalScope.crypto\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Crypto\f[R] object associated to the global object.
.TP
\f[B]WorkerGlobalScope.fonts\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]FontFaceSet\f[R] associated with the worker.
.TP
\f[B]WorkerGlobalScope.indexedDB\f[R] \f[I](read\-only)\f[R]
Provides a mechanism for workers to asynchronously access capabilities
of indexed databases; returns an \f[CR]IDBFactory\f[R] object.
.TP
\f[B]WorkerGlobalScope.isSecureContext\f[R] \f[I](read\-only)\f[R]
Returns a boolean indicating whether the current context is secure
(\f[CR]true\f[R]) or not (\f[CR]false\f[R]).
.TP
\f[B]WorkerGlobalScope.location\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]WorkerLocation\f[R] associated with the worker.
It is a specific location object, mostly a subset of the
\f[CR]Location\f[R] for browsing scopes, but adapted to workers.r.
.TP
\f[B]WorkerGlobalScope.navigator\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]WorkerNavigator\f[R] associated with the worker.
It is a specific navigator object, mostly a subset of the
\f[CR]Navigator\f[R] for browsing scopes, but adapted to workers.
.TP
\f[B]WorkerGlobalScope.origin\f[R] \f[I](read\-only)\f[R]
Returns the global object\[cq]s origin, serialized as a string.
.TP
\f[B]WorkerGlobalScope.performance\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Performance\f[R] associated with the worker.
It is a regular performance object, except that only a subset of its
property and methods are available to workers.
.TP
\f[B]WorkerGlobalScope.scheduler\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Scheduler\f[R] object associated with the current
context.
This is the entry point for using the Prioritized Task Scheduling API.
.TP
\f[B]WorkerGlobalScope.self\f[R] \f[I](read\-only)\f[R]
Returns a reference to the \f[CR]WorkerGlobalScope\f[R] itself.
Most of the time it is a specific scope like
\f[CR]DedicatedWorkerGlobalScope\f[R],
\f[CR]SharedWorkerGlobalScope\f[R] or
\f[CR]ServiceWorkerGlobalScope\f[R].
.SH INSTANCE METHODS
\f[I]This interface inherits methods from the \f[CI]EventTarget\f[I]
interface.\f[R]
.TP
\f[B]WorkerGlobalScope.atob()\f[R]
Decodes a string of data which has been encoded using base\-64 encoding.
.TP
\f[B]WorkerGlobalScope.btoa()\f[R]
Creates a base\-64 encoded ASCII string from a string of binary data.
.TP
\f[B]WorkerGlobalScope.clearInterval()\f[R]
Cancels the repeated execution set using \f[CR]setInterval()\f[R].
.TP
\f[B]WorkerGlobalScope.clearTimeout()\f[R]
Cancels the delayed execution set using \f[CR]setTimeout()\f[R].
.TP
\f[B]WorkerGlobalScope.createImageBitmap()\f[R]
Accepts a variety of different image sources, and returns a
\f[CR]Promise\f[R] which resolves to an \f[CR]ImageBitmap\f[R].
Optionally the source is cropped to the rectangle of pixels originating
at \f[I](sx, sy)\f[R] with width sw, and height sh.
.TP
\f[B]WorkerGlobalScope.dump()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Allows you to write a message to stdout \[em] i.e.\ in your terminal.
This is the same as Firefox\[cq]s \f[CR]window.dump\f[R], but for
workers.
.TP
\f[B]WorkerGlobalScope.fetch()\f[R]
Starts the process of fetching a resource from the network.
.TP
\f[B]WorkerGlobalScope.importScripts()\f[R]
Imports one or more scripts into the worker\[cq]s scope.
You can specify as many as you\[cq]d like, separated by commas.
For example:
\f[CR]importScripts(\[aq]foo.js\[aq], \[aq]bar.js\[aq]);\f[R].
.TP
\f[B]WorkerGlobalScope.queueMicrotask()\f[R]
Queues a microtask to be executed at a safe time prior to control
returning to the browser\[cq]s event loop.
.TP
\f[B]WorkerGlobalScope.setInterval()\f[R]
Schedules a function to execute every time a given number of
milliseconds elapses.
.TP
\f[B]WorkerGlobalScope.setTimeout()\f[R]
Schedules a function to execute in a given amount of time.
.TP
\f[B]WorkerGlobalScope.structuredClone()\f[R]
Creates a deep clone of a given value using the structured clone
algorithm.
.TP
\f[B]WorkerGlobalScope.reportError()\f[R]
Reports an error in a script, emulating an unhandled exception.
.SH EVENTS
.TP
\f[B]error\f[R]
Fired when an error occurred.
.TP
\f[B]languagechange\f[R]
Fired at the global/worker scope object when the user\[cq]s preferred
languages change.
.TP
\f[B]offline\f[R]
Fired when the browser has lost access to the network and the value of
\f[CR]navigator.onLine\f[R] switched to \f[CR]false\f[R].
.TP
\f[B]online\f[R]
Fired when the browser has gained access to the network and the value of
\f[CR]navigator.onLine\f[R] switched to \f[CR]true\f[R].
.TP
\f[B]rejectionhandled\f[R]
Fired on handled \f[CR]Promise\f[R] rejection events.
.TP
\f[B]securitypolicyviolation\f[R]
Fired when a Content Security Policy is violated.
.TP
\f[B]unhandledrejection\f[R]
Fired on unhandled \f[CR]Promise\f[R] rejection events.
.SH EXAMPLE
You won\[cq]t access \f[CR]WorkerGlobalScope\f[R] directly in your code;
however, its properties and methods are inherited by more specific
global scopes such as \f[CR]DedicatedWorkerGlobalScope\f[R] and
\f[CR]SharedWorkerGlobalScope\f[R].
For example, you could import another script into the worker and print
out the contents of the worker scope\[cq]s \f[CR]navigator\f[R] object
using the following two lines:
.IP
.EX
importScripts(\[dq]foo.js\[dq]);
console.log(navigator);
.EE
.RS
.PP
\f[B]Note:\f[R] Since the global scope of the worker script is
effectively the global scope of the worker you are running
(\f[CR]DedicatedWorkerGlobalScope\f[R] or whatever) and all worker
global scopes inherit methods, properties, etc.
from \f[CR]WorkerGlobalScope\f[R], you can run lines such as those above
without specifying a parent object.
.RE
.SH SEE ALSO
.IP \[bu] 2
Other global object interface: \f[CR]Window\f[R],
\f[CR]DedicatedWorkerGlobalScope\f[R],
\f[CR]SharedWorkerGlobalScope\f[R], \f[CR]ServiceWorkerGlobalScope\f[R]
.IP \[bu] 2
Other Worker\-related interfaces: \f[CR]Worker\f[R],
\f[CR]WorkerLocation\f[R] and \f[CR]WorkerNavigator\f[R]
.IP \[bu] 2
Using web workers
