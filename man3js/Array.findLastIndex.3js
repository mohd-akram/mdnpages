.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Array.findLastIndex" "JS" "November 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.findLastIndex \- Array.prototype.findLastIndex()
.SH SYNOPSIS
The \f[B]\f[CB]findLastIndex()\f[B]\f[R] method of \f[CR]Array\f[R]
instances iterates the array in reverse order and returns the index of
the first element that satisfies the provided testing function.
If no elements satisfy the testing function, \-1 is returned.
.PP
See also the \f[CR]findLast()\f[R] method, which returns the value of
last element that satisfies the testing function (rather than its
index).
.SH SYNTAX
.IP
.EX
findLastIndex(callbackFn)
findLastIndex(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[CR]findLastIndex()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
The index of the last (highest\-index) element in the array that passes
the test.
Otherwise \f[CR]\-1\f[R] if no matching element is found.
.SH DESCRIPTION
The \f[CR]findLastIndex()\f[R] method is an iterative method.
It calls a provided \f[CR]callbackFn\f[R] function once for each element
in an array in descending\-index order, until \f[CR]callbackFn\f[R]
returns a truthy value.
\f[CR]findLastIndex()\f[R] then returns the index of that element and
stops iterating through the array.
If \f[CR]callbackFn\f[R] never returns a truthy value,
\f[CR]findLastIndex()\f[R] returns \f[CR]\-1\f[R].
Read the iterative methods section for more information about how these
methods work in general.
.PP
\f[CR]callbackFn\f[R] is invoked for \f[I]every\f[R] index of the array,
not just those with assigned values.
Empty slots in sparse arrays behave the same as \f[CR]undefined\f[R].
.PP
The \f[CR]findLastIndex()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Find the index of the last prime number in an array
The following example returns the index of the last element in the array
that is a prime number, or \f[CR]\-1\f[R] if there is no prime number.
.IP
.EX
\f[B]function\f[R] isPrime(element) {
  \f[B]if\f[R] (element % 2 === 0 || element < 2) {
    \f[B]return\f[R] \f[B]false\f[R];
  }
  \f[B]for\f[R] (\f[B]let\f[R] factor = 3; factor <= Math.sqrt(element); factor += 2) {
    \f[B]if\f[R] (element % factor === 0) {
      \f[B]return\f[R] \f[B]false\f[R];
    }
  }
  \f[B]return\f[R] \f[B]true\f[R];
}

console.log([4, 6, 8, 12].findLastIndex(isPrime)); \f[I]// \-1, not found\f[R]
console.log([4, 5, 7, 8, 9, 11, 12].findLastIndex(isPrime)); \f[I]// 5\f[R]
.EE
.SS Using the third argument of callbackFn
The \f[CR]array\f[R] argument is useful if you want to access another
element in the array, especially when you don\[cq]t have an existing
variable that refers to the array.
The following example first uses \f[CR]filter()\f[R] to extract the
positive values and then uses \f[CR]findLastIndex()\f[R] to find the
last element that is less than its neighbors.
.IP
.EX
\f[B]const\f[R] numbers = [3, \-1, 1, 4, 1, 5, 9, 2, 6];
\f[B]const\f[R] lastTrough = numbers
  .filter((num) \f[B]=>\f[R] num > 0)
  .findLastIndex((num, idx, arr) \f[B]=>\f[R] {
    \f[I]// Without the arr argument, there\[aq]s no way to easily access the\f[R]
    \f[I]// intermediate array without saving it to a variable.\f[R]
    \f[B]if\f[R] (idx > 0 && num >= arr[idx \- 1]) \f[B]return\f[R] \f[B]false\f[R];
    \f[B]if\f[R] (idx < arr.length \- 1 && num >= arr[idx + 1]) \f[B]return\f[R] \f[B]false\f[R];
    \f[B]return\f[R] \f[B]true\f[R];
  });
console.log(lastTrough); \f[I]// 6\f[R]
.EE
.SS Using findLastIndex() on sparse arrays
You can search for \f[CR]undefined\f[R] in a sparse array and get the
index of an empty slot.
.IP
.EX
console.log([1, , 3].findLastIndex((x) \f[B]=>\f[R] x === \f[B]undefined\f[R])); \f[I]// 1\f[R]
.EE
.SS Calling findLastIndex() on non\-array objects
The \f[CR]findLastIndex()\f[R] method reads the \f[CR]length\f[R]
property of \f[CR]this\f[R] and then accesses each property whose key is
a nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: 2,
  1: 7.3,
  2: 4,
  3: 3, \f[I]// ignored by findLastIndex() since length is 3\f[R]
};
console.log(
  Array.prototype.findLastIndex.call(arrayLike, (x) \f[B]=>\f[R] Number.isInteger(x)),
); \f[I]// 2\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#array-find-from-last
Polyfill of \f[CR]Array.prototype.findLastIndex\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.findLast()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.lastIndexOf()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.findLastIndex()\f[R]
