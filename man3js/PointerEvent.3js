.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "PointerEvent" "JS" "August 30, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PointerEvent \- PointerEvent
.SH SYNOPSIS
The \f[B]\f[CB]PointerEvent\f[B]\f[R] interface represents the state of
a DOM event produced by a pointer such as the geometry of the contact
point, the device type that generated the event, the amount of pressure
that was applied on the contact surface, etc.
.PP
A \f[I]pointer\f[R] is a hardware agnostic representation of input
devices (such as a mouse, pen or contact point on a touch\-enable
surface).
The pointer can target a specific coordinate (or set of coordinates) on
the contact surface such as a screen.
.PP
A pointer\[cq]s \f[I]hit test\f[R] is the process a browser uses to
determine the target element for a pointer event.
Typically, this is determined by considering the pointer\[cq]s location
and also the visual layout of elements in a document on screen media.
.SH CONSTRUCTORS
.TP
\f[B]PointerEvent()\f[R]
Creates a synthetic\[em]and untrusted\[em]\f[CR]PointerEvent\f[R].
.SH INSTANCE PROPERTIES
\f[I]This interface inherits properties from \f[CI]MouseEvent\f[I] and
\f[CI]Event\f[I].\f[R]
.TP
\f[B]PointerEvent.altitudeAngle\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Represents the angle between a transducer (a pointer or stylus) axis and
the X\-Y plane of a device screen.
.TP
\f[B]PointerEvent.azimuthAngle\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Represents the angle between the Y\-Z plane and the plane containing
both the transducer (a pointer or stylus) axis and the Y axis.
.TP
\f[B]PointerEvent.persistentDeviceId\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
A unique identifier for the pointing device generating the
\f[CR]PointerEvent\f[R].
.TP
\f[B]PointerEvent.pointerId\f[R] \f[I](read\-only)\f[R]
A unique identifier for the pointer causing the event.
.TP
\f[B]PointerEvent.width\f[R] \f[I](read\-only)\f[R]
The width (magnitude on the X axis), in CSS pixels, of the contact
geometry of the pointer.
.TP
\f[B]PointerEvent.height\f[R] \f[I](read\-only)\f[R]
The height (magnitude on the Y axis), in CSS pixels, of the contact
geometry of the pointer.
.TP
\f[B]PointerEvent.pressure\f[R] \f[I](read\-only)\f[R]
The normalized pressure of the pointer input in the range \f[CR]0\f[R]
to \f[CR]1\f[R], where \f[CR]0\f[R] and \f[CR]1\f[R] represent the
minimum and maximum pressure the hardware is capable of detecting,
respectively.
.TP
\f[B]PointerEvent.tangentialPressure\f[R] \f[I](read\-only)\f[R]
The normalized tangential pressure of the pointer input (also known as
barrel pressure or \c
.UR https://en.wikipedia.org/wiki/Cylinder_stress
cylinder stress
.UE \c
) in the range \f[CR]\-1\f[R] to \f[CR]1\f[R], where \f[CR]0\f[R] is the
neutral position of the control.
.TP
\f[B]PointerEvent.tiltX\f[R] \f[I](read\-only)\f[R]
The plane angle (in degrees, in the range of \f[CR]\-90\f[R] to
\f[CR]90\f[R]) between the Y\[en]Z plane and the plane containing both
the pointer (e.g.\ pen stylus) axis and the Y axis.
.TP
\f[B]PointerEvent.tiltY\f[R] \f[I](read\-only)\f[R]
The plane angle (in degrees, in the range of \f[CR]\-90\f[R] to
\f[CR]90\f[R]) between the X\[en]Z plane and the plane containing both
the pointer (e.g.\ pen stylus) axis and the X axis.
.TP
\f[B]PointerEvent.twist\f[R] \f[I](read\-only)\f[R]
The clockwise rotation of the pointer (e.g.\ pen stylus) around its
major axis in degrees, with a value in the range \f[CR]0\f[R] to
\f[CR]359\f[R].
.TP
\f[B]PointerEvent.pointerType\f[R] \f[I](read\-only)\f[R]
Indicates the device type that caused the event (mouse, pen, touch,
etc.).
.TP
\f[B]PointerEvent.isPrimary\f[R] \f[I](read\-only)\f[R]
Indicates if the pointer represents the primary pointer of this pointer
type.
.SH INSTANCE METHODS
.TP
\f[B]PointerEvent.getCoalescedEvents()\f[R] \f[I](secure context)\f[R]
Returns a sequence of all \f[CR]PointerEvent\f[R] instances that were
coalesced into the dispatched \f[CR]pointermove\f[R] event.
.TP
\f[B]PointerEvent.getPredictedEvents()\f[R]
Returns a sequence of \f[CR]PointerEvent\f[R] instances that the browser
predicts will follow the dispatched \f[CR]pointermove\f[R] event\[cq]s
coalesced events.
.SH POINTER EVENT TYPES
The \f[CR]PointerEvent\f[R] interface has several event types.
To determine which event fired, look at the event\[cq]s \f[CR]type\f[R]
property.
.RS
.PP
\f[B]Note:\f[R] It\[cq]s important to note that in many cases, both
pointer and mouse events get sent (in order to let
non\-pointer\-specific code still interact with the user).
If you use pointer events, you should call \f[CR]preventDefault()\f[R]
to keep the mouse event from being sent as well.
.RE
.TP
\f[B]pointerover\f[R]
This event is fired when a pointing device is moved into an
element\[cq]s hit test boundaries.
.TP
\f[B]pointerenter\f[R]
This event is fired when a pointing device is moved into the hit test
boundaries of an element or one of its descendants, including as a
result of a \f[CR]pointerdown\f[R] event from a device that does not
support hover (see \f[CR]pointerdown\f[R]).
This event type is similar to \f[CR]pointerover\f[R], but differs in
that it does not bubble.
.TP
\f[B]pointerdown\f[R]
The event is fired when a pointer becomes \f[I]active\f[R].
For mouse, it is fired when the device transitions from no buttons
pressed to at least one button pressed.
For touch, it is fired when physical contact is made with the digitizer.
For pen, it is fired when the stylus makes physical contact with the
digitizer.
.RS
.RS
.PP
\f[B]Note:\f[R] For touchscreen browsers that allow \c
.UR https://w3c.github.io/pointerevents/#dfn-direct-manipulation
direct manipulation
.UE \c
, a \f[CR]pointerdown\f[R] event triggers \c
.UR https://w3c.github.io/pointerevents/#dfn-implicit-pointer-capture
implicit pointer capture
.UE \c
, which causes the target to capture all subsequent pointer events as if
they were occurring over the capturing target.
Accordingly, \f[CR]pointerover\f[R], \f[CR]pointerenter\f[R],
\f[CR]pointerleave\f[R], and \f[CR]pointerout\f[R] \f[B]will not
fire\f[R] as long as this capture is set.
The capture can be released manually by calling
\f[CR]element.releasePointerCapture\f[R] on the target element, or it
will be implicitly released after a \f[CR]pointerup\f[R] or
\f[CR]pointercancel\f[R] event.
.RE
.RE
.TP
\f[B]pointermove\f[R]
This event is fired when a pointer changes coordinates.
.TP
\f[B]pointerrawupdate\f[R] \f[I](experimental)\f[R]
This event is fired when any of a pointer\[cq]s properties change.
.TP
\f[B]pointerup\f[R]
This event is fired when a pointer is no longer \f[I]active\f[R].
.TP
\f[B]pointercancel\f[R]
A browser fires this event if it concludes the pointer will no longer be
able to generate events (for example the related device is deactivated).
.TP
\f[B]pointerout\f[R]
This event is fired for several reasons including: pointing device is
moved out of the hit test boundaries of an element; firing the
\f[CR]pointerup\f[R] event for a device that does not support hover (see
\f[CR]pointerup\f[R]); after firing the \f[CR]pointercancel\f[R] event
(see \f[CR]pointercancel\f[R]); when a pen stylus leaves the hover range
detectable by the digitizer.
.TP
\f[B]pointerleave\f[R]
This event is fired when a pointing device is moved out of the hit test
boundaries of an element.
For pen devices, this event is fired when the stylus leaves the hover
range detectable by the digitizer.
.TP
\f[B]gotpointercapture\f[R]
This event is fired when an element receives pointer capture.
.TP
\f[B]lostpointercapture\f[R]
This event is fired after pointer capture is released for a pointer.
.SH EXAMPLE
Examples of each property, event type, and global event handler are
included in their respective reference pages.
.SH SEE ALSO
.IP \[bu] 2
Touch events
.IP \[bu] 2
\f[CR]GestureEvent\f[R]
.IP \[bu] 2
\f[CR]touch\-action\f[R]
