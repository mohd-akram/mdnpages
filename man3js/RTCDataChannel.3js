.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RTCDataChannel" "JS" "January 29, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCDataChannel \- RTCDataChannel
.SH SYNOPSIS
The \f[B]\f[CB]RTCDataChannel\f[B]\f[R] interface represents a network
channel which can be used for bidirectional peer\-to\-peer transfers of
arbitrary data.
Every data channel is associated with an \f[CR]RTCPeerConnection\f[R],
and each peer connection can have up to a theoretical maximum of 65,534
data channels (the actual limit may vary from browser to browser).
.PP
To create a data channel and ask a remote peer to join you, call the
\f[CR]RTCPeerConnection\f[R]\[cq]s \f[CR]createDataChannel()\f[R]
method.
The peer being invited to exchange data receives a
\f[CR]datachannel\f[R] event (which has type
\f[CR]RTCDataChannelEvent\f[R]) to let it know the data channel has been
added to the connection.
.PP
\f[CR]RTCDataChannel\f[R] is a transferable object.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]binaryType\f[R]
A string specifying the type of object that should be used to represent
binary data received on the \f[CR]RTCDataChannel\f[R].
Values are the same as allowed on the \f[CR]WebSocket.binaryType\f[R]
property: \f[CR]blob\f[R] if \f[CR]Blob\f[R] objects are being used, or
\f[CR]arraybuffer\f[R] if \f[CR]ArrayBuffer\f[R] objects are being used.
The default is \f[CR]arraybuffer\f[R].
.TP
\f[B]bufferedAmount\f[R] \f[I](read\-only)\f[R]
Returns the number of bytes of data currently queued to be sent over the
data channel.
.TP
\f[B]bufferedAmountLowThreshold\f[R]
Specifies the number of bytes of buffered outgoing data that is
considered \[lq]low\[rq].
The default value is 0.
.TP
\f[B]id\f[R] \f[I](read\-only)\f[R]
Returns an ID number (between 0 and 65,534) which uniquely identifies
the \f[CR]RTCDataChannel\f[R].
.TP
\f[B]label\f[R] \f[I](read\-only)\f[R]
Returns a string that contains a name describing the data channel.
These labels are not required to be unique.
.TP
\f[B]maxPacketLifeTime\f[R] \f[I](read\-only)\f[R]
Returns the amount of time, in milliseconds, the browser is allowed to
take to attempt to transmit a message, as set when the data channel was
created, or \f[CR]null\f[R].
.TP
\f[B]maxRetransmits\f[R] \f[I](read\-only)\f[R]
Returns the maximum number of times the browser should try to retransmit
a message before giving up, as set when the data channel was created, or
\f[CR]null\f[R], which indicates that there is no maximum.
.TP
\f[B]negotiated\f[R] \f[I](read\-only)\f[R]
Indicates whether the \f[CR]RTCDataChannel\f[R]\[cq]s connection was
negotiated by the Web app (\f[CR]true\f[R]) or by the WebRTC layer
(\f[CR]false\f[R]).
The default is \f[CR]false\f[R].
.TP
\f[B]ordered\f[R] \f[I](read\-only)\f[R]
Indicates whether or not the data channel guarantees in\-order delivery
of messages; the default is \f[CR]true\f[R], which indicates that the
data channel is indeed ordered.
.TP
\f[B]protocol\f[R] \f[I](read\-only)\f[R]
Returns a string containing the name of the subprotocol in use.
If no protocol was specified when the data channel was created, then
this property\[cq]s value is the empty string (\f[CR]\[dq]\[dq]\f[R]).
.TP
\f[B]readyState\f[R] \f[I](read\-only)\f[R]
Returns a string which indicates the state of the data channel\[cq]s
underlying data connection.
It can have one of the following values: \f[CR]connecting\f[R],
\f[CR]open\f[R], \f[CR]closing\f[R], or \f[CR]closed\f[R].
.SS Obsolete properties
.TP
\f[B]reliable\f[R] \f[I](read\-only)\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Indicates whether or not the data channel is \f[I]reliable\f[R].
.SH INSTANCE METHODS
\f[I]Also inherits methods from \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]close()\f[R]
Closes the \f[CR]RTCDataChannel\f[R].
Either peer is permitted to call this method to initiate closure of the
channel.
.TP
\f[B]send()\f[R]
Sends data across the data channel to the remote peer.
.SH EVENTS
.TP
\f[B]bufferedamountlow\f[R]
Sent when the number of bytes of data in the outgoing data buffer falls
below the value specified by \f[CR]bufferedAmountLowThreshold\f[R].
.TP
\f[B]close\f[R]
Sent when the underlying data transport closes.
.TP
\f[B]closing\f[R]
Sent when the underlying data transport is about to start closing.
.TP
\f[B]error\f[R]
Sent when an error occurs on the data channel.
.TP
\f[B]message\f[R]
Sent when a message has been received from the remote peer.
The message contents can be found in the event\[cq]s \f[CR]data\f[R]
property.
.TP
\f[B]open\f[R]
Sent when the data channel is first opened, or when an existing data
channel\[cq]s underlying connection re\-opens.
.SH DATA FORMAT
The underlying data format is defined by the IEEE specification \c
.UR https://datatracker.ietf.org/doc/rfc8841/
SDP Offer/Answer Procedures for SCTP over DTLS Transport(RFC 8841)
.UE \c
\&.
The current format specifies its protocol as either
\f[CR]\[dq]UDP/DTLS/SCTP\[dq]\f[R] (UDP carrying DTLS carrying SCTP) or
\f[CR]\[dq]TCP/DTLS/SCTP\[dq]\f[R] (TCP carrying DTLS carrying SCTP).
Older browsers may only specify \f[CR]\[dq]DTLS/SCTP\[dq]\f[R].
.SH EXAMPLE
.IP
.EX
\f[B]const\f[R] pc = \f[B]new\f[R] RTCPeerConnection();
\f[B]const\f[R] dc = pc.createDataChannel(\[dq]my channel\[dq]);

dc.onmessage = (event) \f[B]=>\f[R] {
  console.log(\[ga]received: ${event.data}\[ga]);
};

dc.onopen = () \f[B]=>\f[R] {
  console.log(\[dq]datachannel open\[dq]);
};

dc.onclose = () \f[B]=>\f[R] {
  console.log(\[dq]datachannel close\[dq]);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
