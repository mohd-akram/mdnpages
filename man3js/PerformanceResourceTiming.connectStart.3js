.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PERFORMANCERESOURCETIMING.CONNECTSTART" "3JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.connectStart \- PerformanceResourceTiming:
connectStart property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]connectStart\f[B]\f[R] read\-only property returns the
\f[CR]timestamp\f[R] immediately before the user agent starts
establishing the connection to the server to retrieve the resource.
.SH VALUE
The \f[CR]connectStart\f[R] property can have the following values:
.IP \(bu 2
A \f[CR]DOMHighResTimeStamp\f[R] immediately before the browser starts
to establish the connection to the server to retrieve the resource.
.IP \(bu 2
\f[CR]0\f[R] if the resource was instantaneously retrieved from a cache.
.IP \(bu 2
\f[CR]0\f[R] if the resource is a cross\-origin request and no
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header is used.
.SH EXAMPLES
.SS Measuring TCP handshake time
The \f[CR]connectStart\f[R] and \f[CR]connectEnd\f[R] properties can be
used to measure how long it takes for the TCP handshake to happen.
.IP
.EX
\f[B]const\f[R] tcp = entry.connectEnd \- entry.connectStart;
.EE
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\(cqs performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]const\f[R] tcp = entry.connectEnd \- entry.connectStart;
    \f[B]if\f[R] (tcp > 0) {
      console.log(\(ga${entry.name}: TCP handshake duration: ${tcp}ms\(ga);
    }
  });
});

observer.observe({ type: \(dqresource\(dq, buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\(cqs performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] resources = performance.getEntriesByType(\(dqresource\(dq);
resources.forEach((entry) \f[B]=>\f[R] {
  \f[B]const\f[R] tcp = entry.connectEnd \- entry.connectStart;
  \f[B]if\f[R] (tcp > 0) {
    console.log(\(ga${entry.name}: TCP handshake duration: ${tcp}ms\(ga);
  }
});
.EE
.SS Cross\-origin timing information
If the value of the \f[CR]connectStart\f[R] property is \f[CR]0\f[R],
the resource might be a cross\-origin request.
To allow seeing cross\-origin timing information, the
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header needs to be set.
.PP
For example, to allow \f[CR]https://developer.mozilla.org\f[R] to see
timing resources, the cross\-origin resource should send:
.IP
.EX
Timing\-Allow\-Origin: https://developer.mozilla.org
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Timing\-Allow\-Origin\f[R]
