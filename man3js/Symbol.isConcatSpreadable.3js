'\" t
.\" Automatically generated by Pandoc 3.4
.\"
.TH "Symbol.isConcatSpreadable" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.isConcatSpreadable \- Symbol.isConcatSpreadable
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.isConcatSpreadable\f[B]\f[R] static data property
represents the well\-known symbol \f[CR]Symbol.isConcatSpreadable\f[R].
The \f[CR]Array.prototype.concat()\f[R] method looks up this symbol on
each object being concatenated to determine if it should be treated as
an array\-like object and flattened to its array elements.
.SH VALUE
The well\-known symbol \f[CR]Symbol.isConcatSpreadable\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
The \f[CR][Symbol.isConcatSpreadable]\f[R] property can be defined as an
own or inherited property and its value is a boolean.
It can control behavior for arrays and array\-like objects:
.IP \[bu] 2
For array objects, the default behavior is to spread (flatten) elements.
\f[CR]Symbol.isConcatSpreadable\f[R] can avoid flattening in these
cases.
.IP \[bu] 2
For array\-like objects, the default behavior is no spreading or
flattening.
\f[CR]Symbol.isConcatSpreadable\f[R] can force flattening in these
cases.
.SH EXAMPLES
.SS Arrays
By default, \f[CR]Array.prototype.concat()\f[R] spreads (flattens)
arrays into its result:
.IP
.EX
\f[B]const\f[R] alpha = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
\f[B]const\f[R] numeric = [1, 2, 3];

\f[B]const\f[R] alphaNumeric = alpha.concat(numeric);

console.log(alphaNumeric); \f[I]// Result: [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], 1, 2, 3]\f[R]
.EE
.PP
When setting \f[CR]Symbol.isConcatSpreadable\f[R] to \f[CR]false\f[R],
you can disable the default behavior:
.IP
.EX
\f[B]const\f[R] alpha = [\[dq]a\[dq], \[dq]b\[dq], \[dq]c\[dq]];
\f[B]const\f[R] numeric = [1, 2, 3];

numeric[Symbol.isConcatSpreadable] = \f[B]false\f[R];
\f[B]const\f[R] alphaNumeric = alpha.concat(numeric);

console.log(alphaNumeric); \f[I]// Result: [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], [1, 2, 3] ]\f[R]
.EE
.SS Array\-like objects
For array\-like objects, the default is to not spread.
\f[CR]Symbol.isConcatSpreadable\f[R] needs to be set to \f[CR]true\f[R]
in order to get a flattened array:
.IP
.EX
\f[B]const\f[R] x = [1, 2, 3];

\f[B]const\f[R] fakeArray = {
  [Symbol.isConcatSpreadable]: \f[B]true\f[R],
  length: 2,
  0: \[dq]hello\[dq],
  1: \[dq]world\[dq],
};

x.concat(fakeArray); \f[I]// [1, 2, 3, \[dq]hello\[dq], \[dq]world\[dq]]\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] The \f[CR]length\f[R] property is used to control the
number of object properties to be added.
In the above example, \f[CR]length:2\f[R] indicates two properties has
to be added.
.RE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-symbol
Polyfill of \f[CR]Symbol.isConcatSpreadable\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Array.prototype.concat()\f[R]
