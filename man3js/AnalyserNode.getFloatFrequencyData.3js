.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ANALYSERNODE.GETFLOATFREQUENCYDATA" "3JS" "April 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AnalyserNode.getFloatFrequencyData \- AnalyserNode:
getFloatFrequencyData() method
.SH SYNOPSIS
The \f[B]\f[CB]getFloatFrequencyData()\f[B]\f[R] method of the
\f[CR]AnalyserNode\f[R] Interface copies the current frequency data into
a \f[CR]Float32Array\f[R] array passed into it.
.PP
Each item in the array represents the decibel value for a specific
frequency.
The frequencies are spread linearly from 0 to 1/2 of the sample rate.
For example, for a \f[CR]48000\f[R] Hz sample rate, the last item of the
array will represent the decibel value for \f[CR]24000\f[R] Hz.
.PP
If you need higher performance and don\(cqt care about precision, you
can use \f[CR]AnalyserNode.getByteFrequencyData()\f[R] instead, which
works on a \f[CR]Uint8Array\f[R].
.SH SYNTAX
.IP
.EX
getFloatFrequencyData(array)
.EE
.SS Parameters
.TP
\f[B]array\f[R]
The \f[CR]Float32Array\f[R] that the frequency domain data will be
copied to.
For any sample which is silent, the value is \f[CR]\-Infinity\f[R].
If the array has fewer elements than the
\f[CR]AnalyserNode.frequencyBinCount\f[R], excess elements are dropped.
If it has more elements than needed, excess elements are ignored.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();
\f[B]const\f[R] analyser = audioCtx.createAnalyser();
\f[I]// Float32Array should be the same length as the frequencyBinCount\f[R]
\f[B]const\f[R] myDataArray = \f[B]new\f[R] Float32Array(analyser.frequencyBinCount);
\f[I]// fill the Float32Array with data returned from getFloatFrequencyData()\f[R]
analyser.getFloatFrequencyData(myDataArray);
.EE
.SS Drawing a spectrum
The following example shows basic usage of an \f[CR]AudioContext\f[R] to
connect a \f[CR]MediaElementAudioSourceNode\f[R] to an
\f[CR]AnalyserNode\f[R].
While the audio is playing, we collect the frequency data repeatedly
with \f[CR]requestAnimationFrame()\f[R] and draw a \(lqwinamp bar graph
style\(rq to a \f[CR]<canvas>\f[R] element.
.PP
For more complete applied examples/information, check out our \c
.UR https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR https://github.com/mdn/webaudio-examples/blob/main/voice-change-o-matic/scripts/app.js#L108-L193
app.js lines 108\(en193
.UE \c
\ for relevant code).
.IP
.EX
<!doctype html>
<\f[B]body\f[R]>
  <\f[B]script\f[R]>
    \f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

    \f[I]// Create audio source\f[R]
    \f[I]// Here, we use an audio file, but this could also be e.g. microphone input\f[R]
    \f[B]const\f[R] audioEle = \f[B]new\f[R] Audio();
    audioEle.src = \(dqmy\-audio.mp3\(dq; \f[I]// Insert file name here\f[R]
    audioEle.autoplay = \f[B]true\f[R];
    audioEle.preload = \(dqauto\(dq;
    \f[B]const\f[R] audioSourceNode = audioCtx.createMediaElementSource(audioEle);

    \f[I]// Create analyser node\f[R]
    \f[B]const\f[R] analyserNode = audioCtx.createAnalyser();
    analyserNode.fftSize = 256;
    \f[B]const\f[R] bufferLength = analyserNode.frequencyBinCount;
    \f[B]const\f[R] dataArray = \f[B]new\f[R] Float32Array(bufferLength);

    \f[I]// Set up audio node network\f[R]
    audioSourceNode.connect(analyserNode);
    analyserNode.connect(audioCtx.destination);

    \f[I]// Create 2D canvas\f[R]
    \f[B]const\f[R] canvas = document.createElement(\(dqcanvas\(dq);
    canvas.style.position = \(dqabsolute\(dq;
    canvas.style.top = \(dq0\(dq;
    canvas.style.left = \(dq0\(dq;
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    document.body.appendChild(canvas);
    \f[B]const\f[R] canvasCtx = canvas.getContext(\(dq2d\(dq);
    canvasCtx.clearRect(0, 0, canvas.width, canvas.height);

    \f[B]function\f[R] draw() {
      \f[I]// Schedule next redraw\f[R]
      requestAnimationFrame(draw);

      \f[I]// Get spectrum data\f[R]
      analyserNode.getFloatFrequencyData(dataArray);

      \f[I]// Draw black background\f[R]
      canvasCtx.fillStyle = \(dqrgb(0 0 0)\(dq;
      canvasCtx.fillRect(0, 0, canvas.width, canvas.height);

      \f[I]// Draw spectrum\f[R]
      \f[B]const\f[R] barWidth = (canvas.width / bufferLength) * 2.5;
      \f[B]let\f[R] posX = 0;
      \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < bufferLength; i++) {
        \f[B]const\f[R] barHeight = (dataArray[i] + 140) * 2;
        canvasCtx.fillStyle = \(gargb(${Math.floor(barHeight + 100)} 50 50)\(ga;
        canvasCtx.fillRect(
          posX,
          canvas.height \- barHeight / 2,
          barWidth,
          barHeight / 2,
        );
        posX += barWidth + 1;
      }
    }

    draw();
  </\f[B]script\f[R]>
</\f[B]body\f[R]>
.EE
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
