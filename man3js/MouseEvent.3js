.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "MouseEvent" "JS" "March 4, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MouseEvent \- MouseEvent
.SH SYNOPSIS
The \f[B]\f[CB]MouseEvent\f[B]\f[R] interface represents events that
occur due to the user interacting with a pointing device (such as a
mouse).
Common events using this interface include \f[CR]click\f[R],
\f[CR]dblclick\f[R], \f[CR]mouseup\f[R], \f[CR]mousedown\f[R].
.PP
\f[CR]MouseEvent\f[R] derives from \f[CR]UIEvent\f[R], which in turn
derives from \f[CR]Event\f[R].
Though the \f[CR]MouseEvent.initMouseEvent()\f[R] method is kept for
backward compatibility, creating of a \f[CR]MouseEvent\f[R] object
should be done using the \f[CR]MouseEvent()\f[R] constructor.
.PP
Several more specific events are based on \f[CR]MouseEvent\f[R],
including \f[CR]WheelEvent\f[R], \f[CR]DragEvent\f[R], and
\f[CR]PointerEvent\f[R].
.SH CONSTRUCTOR
.TP
\f[B]MouseEvent()\f[R]
Creates a \f[CR]MouseEvent\f[R] object.
.SH STATIC PROPERTIES
.TP
\f[B]MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Minimum force necessary for a normal click.
.TP
\f[B]MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Minimum force necessary for a force click.
.SH INSTANCE PROPERTIES
\f[I]This interface also inherits properties of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]MouseEvent.altKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the alt key was down when the mouse event was
fired.
.TP
\f[B]MouseEvent.button\f[R] \f[I](read\-only)\f[R]
The button number that was pressed (if applicable) when the mouse event
was fired.
.TP
\f[B]MouseEvent.buttons\f[R] \f[I](read\-only)\f[R]
The buttons being pressed (if any) when the mouse event was fired.
.TP
\f[B]MouseEvent.clientX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.clientY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.ctrlKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the control key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.layerX\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the horizontal coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.layerY\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the vertical coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.metaKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the meta key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.movementX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.movementY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.offsetX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.offsetY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.pageX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.pageY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.relatedTarget\f[R] \f[I](read\-only)\f[R]
The secondary target for the event, if there is one.
.TP
\f[B]MouseEvent.screenX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.screenY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.shiftKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the shift key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.mozInputSource\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The type of device that generated the event (one of the
\f[CR]MOZ_SOURCE_*\f[R] constants).
This lets you, for example, determine whether a mouse event was
generated by an actual mouse or by a touch event (which might affect the
degree of accuracy with which you interpret the coordinates associated
with the event).
.TP
\f[B]MouseEvent.webkitForce\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The amount of pressure applied when clicking.
.TP
\f[B]MouseEvent.x\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientX\f[R].
.TP
\f[B]MouseEvent.y\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientY\f[R].
.SH INSTANCE METHODS
\f[I]This interface also inherits methods of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]MouseEvent.getModifierState()\f[R]
Returns the current state of the specified modifier key.
See \f[CR]KeyboardEvent.getModifierState()\f[R] for details.
.TP
\f[B]MouseEvent.initMouseEvent()\f[R] \f[I](deprecated)\f[R]
Initializes the value of a \f[CR]MouseEvent\f[R] created.
If the event has already been dispatched, this method does nothing.
.SH EXAMPLE
This example demonstrates simulating a click (programmatically
generating a click event) on a checkbox using DOM methods.
Event state (canceled or not) is then determined with the return value
of method \f[CR]EventTarget.dispatchEvent()\f[R].
.SS HTML
.IP
.EX
<\f[B]p\f[R]>
  <\f[B]label\f[R]><\f[B]input\f[R] type=\[dq]checkbox\[dq] id=\[dq]checkbox\[dq] /> Checked</\f[B]label\f[R]>
</\f[B]p\f[R]>
<\f[B]p\f[R]>
  <\f[B]button\f[R] id=\[dq]button\[dq]>Click me to send a MouseEvent to the checkbox</\f[B]button\f[R]>
</\f[B]p\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]function\f[R] simulateClick() {
  \f[I]// Get the element to send a click event\f[R]
  \f[B]const\f[R] cb = document.getElementById(\[dq]checkbox\[dq]);

  \f[I]// Create a synthetic click MouseEvent\f[R]
  \f[B]let\f[R] evt = \f[B]new\f[R] MouseEvent(\[dq]click\[dq], {
    bubbles: \f[B]true\f[R],
    cancelable: \f[B]true\f[R],
    view: window,
  });

  \f[I]// Send the event to the checkbox element\f[R]
  cb.dispatchEvent(evt);
}
document.getElementById(\[dq]button\[dq]).addEventListener(\[dq]click\[dq], simulateClick);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Its direct parent, \f[CR]UIEvent\f[R]
.IP \[bu] 2
\f[CR]PointerEvent\f[R]: For advanced pointer events, including
multi\-touch
