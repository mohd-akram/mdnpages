.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HTMLFORMELEMENT" "3JS" "June 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLFormElement \- HTMLFormElement
.SH SYNOPSIS
The \f[B]\f[CB]HTMLFormElement\f[B]\f[R] interface represents a
\f[CR]<form>\f[R] element in the DOM.
It allows access to\(emand, in some cases, modification of\(emaspects of
the form, as well as access to its component elements.
.SH INSTANCE PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]HTMLElement\f[I].\f[R]
.TP
\f[B]HTMLFormElement.acceptCharset\f[R]
A string reflecting the value of the form\(cqs
\f[CR]accept\-charset\f[R] HTML attribute.
.TP
\f[B]HTMLFormElement.action\f[R]
A string reflecting the value of the form\(cqs \f[CR]action\f[R] HTML
attribute, containing the URI of a program that processes the
information submitted by the form.
.TP
\f[B]HTMLFormElement.autocomplete\f[R]
A string reflecting the value of the form\(cqs \f[CR]autocomplete\f[R]
HTML attribute, indicating whether the controls in this form can have
their values automatically populated by the browser.
.TP
\f[B]HTMLFormElement.encoding\f[R] or \f[B]HTMLFormElement.enctype\f[R]
A string reflecting the value of the form\(cqs \f[CR]enctype\f[R] HTML
attribute, indicating the type of content that is used to transmit the
form to the server.
Only specified values can be set.
The two properties are synonyms.
.TP
\f[B]HTMLFormElement.elements\f[R] \f[I](read\-only)\f[R]
A \f[CR]HTMLFormControlsCollection\f[R] holding all form controls
belonging to this form element.
.TP
\f[B]HTMLFormElement.length\f[R] \f[I](read\-only)\f[R]
A \f[CR]long\f[R] reflecting the number of controls in the form.
.TP
\f[B]HTMLFormElement.name\f[R]
A string reflecting the value of the form\(cqs \f[CR]name\f[R] HTML
attribute, containing the name of the form.
.TP
\f[B]HTMLFormElement.noValidate\f[R]
A boolean value reflecting the value of the form\(cqs
\f[CR]novalidate\f[R] HTML attribute, indicating whether the form should
not be validated.
.TP
\f[B]HTMLFormElement.method\f[R]
A string reflecting the value of the form\(cqs \f[CR]method\f[R] HTML
attribute, indicating the HTTP method used to submit the form.
Only specified values can be set.
.TP
\f[B]HTMLFormElement.rel\f[R]
A string reflecting the value of the form\(cqs \f[CR]rel\f[R] HTML
attribute, which represents what kinds of links the form creates as a
space\-separated list of enumerated values.
.TP
\f[B]HTMLFormElement.relList\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMTokenList\f[R] that reflects the \f[CR]rel\f[R] HTML
attribute, as a list of tokens.
.TP
\f[B]HTMLFormElement.target\f[R]
A string reflecting the value of the form\(cqs \f[CR]target\f[R] HTML
attribute, indicating where to display the results received from
submitting the form.
.PP
Named inputs are added to their owner form instance as properties, and
can overwrite native properties if they share the same name (e.g., a
form with an input named \f[CR]action\f[R] will have its
\f[CR]action\f[R] property return that input instead of the form\(cqs
\f[CR]action\f[R] HTML attribute).
.SH INSTANCE METHODS
\f[I]This interface also inherits methods from its parent,
\f[CI]HTMLElement\f[I].\f[R]
.TP
\f[B]checkValidity()\f[R]
Returns \f[CR]true\f[R] if the element\(cqs child controls are subject
to constraint validation and satisfy those constraints; returns
\f[CR]false\f[R] if some controls do not satisfy their constraints.
Fires an event named \f[CR]invalid\f[R] at any control that does not
satisfy its constraints; such controls are considered invalid if the
event is not canceled.
It is up to the programmer to decide how to respond to \f[CR]false\f[R].
.TP
\f[B]reportValidity()\f[R]
Returns \f[CR]true\f[R] if the element\(cqs child controls satisfy their
validation constraints.
When \f[CR]false\f[R] is returned, cancelable \f[CR]invalid\f[R] events
are fired for each invalid child and validation problems are reported to
the user.
.TP
\f[B]requestSubmit()\f[R]
Requests that the form be submitted using the specified submit button
and its corresponding configuration.
.TP
\f[B]reset()\f[R]
Resets the form to its initial state.
.TP
\f[B]submit()\f[R]
Submits the form to the server.
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R], or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]formdata\f[R]
The \f[CR]formdata\f[R] event fires after the entry list representing
the form\(cqs data is constructed.
.TP
\f[B]reset\f[R]
The \f[CR]reset\f[R] event fires when a form is reset.
.TP
\f[B]submit\f[R]
The \f[CR]submit\f[R] event fires when a form is submitted.
.SH USAGE NOTES
.SS Obtaining a form element object
To obtain an \f[CR]HTMLFormElement\f[R] object, you can use a CSS
selector with \f[CR]querySelector()\f[R], or you can get a list of all
of the forms in the document using its \f[CR]forms\f[R] property.
.PP
\f[CR]Document.forms\f[R] returns an array of \f[CR]HTMLFormElement\f[R]
objects listing each of the forms on the page.
You can then use any of the following syntaxes to get an individual
form:
.TP
\f[B]document.forms[index]\f[R]
Returns the form at the specified \f[CR]index\f[R] into the array of
forms.
.TP
\f[B]document.forms[id]\f[R]
Returns the form whose ID is \f[CR]id\f[R].
.TP
\f[B]document.forms[name]\f[R]
Returns the form whose \f[CR]name\f[R] attribute\(cqs value is
\f[CR]name\f[R].
.SS Accessing the form\(cqs elements
You can access the list of the form\(cqs data\-containing elements by
examining the form\(cqs \f[CR]elements\f[R] property.
This returns an \f[CR]HTMLFormControlsCollection\f[R] listing all of the
form\(cqs user data entry elements, both those which are descendants of
the \f[CR]<form>\f[R] and those which are made members of the form using
their \f[CR]form\f[R] attributes.
.PP
You can also get the form\(cqs element by using its \f[CR]name\f[R]
attribute as a key of the \f[CR]form\f[R], but using \f[CR]elements\f[R]
is a better approach\(emit contains \f[I]only\f[R] the form\(cqs
elements, and it cannot be mixed with other attributes of the
\f[CR]form\f[R].
.SS Issues with Naming Elements
Some names will interfere with JavaScript access to the form\(cqs
properties and elements.
.PP
For example:
.IP \(bu 2
\f[CR]<input name=\(dqid\(dq>\f[R] will take precedence over
\f[CR]<form id=\(dq\&...\(dq>\f[R].
This means that \f[CR]form.id\f[R] will not refer to the form\(cqs id,
but to the element whose name is \f[CR]\(dqid\(dq\f[R].
This will be the case with any other form properties, such as
\f[CR]<input name=\(dqaction\(dq>\f[R] or
\f[CR]<input name=\(dqpost\(dq>\f[R].
.IP \(bu 2
\f[CR]<input name=\(dqelements\(dq>\f[R] will render the form\(cqs
\f[CR]elements\f[R] collection inaccessible.
The reference \f[CR]form.elements\f[R] will now refer to the individual
element.
.PP
To avoid such problems with element names:
.IP \(bu 2
\f[I]Always\f[R] use the \f[CR]elements\f[R] collection to avoid
ambiguity between an element name and a form property.
.IP \(bu 2
\f[I]Never\f[R] use \f[CR]\(dqelements\(dq\f[R] as an element name.
.PP
If you are not using JavaScript, this will not cause a problem.
.SS Elements that are considered form controls
The elements included by \f[CR]HTMLFormElement.elements\f[R] and
\f[CR]HTMLFormElement.length\f[R] are the following:
.IP \(bu 2
\f[CR]<button>\f[R]
.IP \(bu 2
\f[CR]<fieldset>\f[R]
.IP \(bu 2
\f[CR]<input>\f[R] (with the exception that any whose \f[CR]type\f[R] is
\f[CR]\(dqimage\(dq\f[R] are omitted for historical reasons)
.IP \(bu 2
\f[CR]<object>\f[R]
.IP \(bu 2
\f[CR]<output>\f[R]
.IP \(bu 2
\f[CR]<select>\f[R]
.IP \(bu 2
\f[CR]<textarea>\f[R]
.PP
No other elements are included in the list returned by
\f[CR]elements\f[R], which makes it an excellent way to get at the most
important elements when processing forms.
.SH EXAMPLES
Creating a new form element, modifying its attributes, then submitting
it:
.IP
.EX
\f[B]const\f[R] f = document.createElement(\(dqform\(dq); \f[I]// Create a form\f[R]
document.body.appendChild(f); \f[I]// Add it to the document body\f[R]
f.action = \(dq/cgi\-bin/some.cgi\(dq; \f[I]// Add action and method attributes\f[R]
f.method = \(dqPOST\(dq;
f.submit(); \f[I]// Call the form\(aqs submit() method\f[R]
.EE
.PP
Extract information from a \f[CR]<form>\f[R] element and set some of its
attributes:
.IP
.EX
<\f[B]form\f[R] name=\(dqformA\(dq action=\(dq/cgi\-bin/test\(dq method=\(dqpost\(dq>
  <\f[B]p\f[R]>Press \(dqInfo\(dq for form details, or \(dqSet\(dq to change those details.</\f[B]p\f[R]>
  <\f[B]p\f[R]>
    <\f[B]button\f[R] type=\(dqbutton\(dq id=\(dqinfo\(dq>Info</\f[B]button\f[R]>
    <\f[B]button\f[R] type=\(dqbutton\(dq id=\(dqset\-info\(dq>Set</\f[B]button\f[R]>
    <\f[B]button\f[R] type=\(dqreset\(dq>Reset</\f[B]button\f[R]>
  </\f[B]p\f[R]>

  <\f[B]textarea\f[R] id=\(dqform\-info\(dq rows=\(dq15\(dq cols=\(dq20\(dq></\f[B]textarea\f[R]>
</\f[B]form\f[R]>
.EE
.IP
.EX
document.getElementById(\(dqinfo\(dq).addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[I]// Get a reference to the form via its name\f[R]
  \f[B]const\f[R] f = document.forms[\(dqformA\(dq];
  \f[I]// The form properties we\(aqre interested in\f[R]
  \f[B]const\f[R] properties = [
    \(dqelements\(dq,
    \(dqlength\(dq,
    \(dqname\(dq,
    \(dqcharset\(dq,
    \(dqaction\(dq,
    \(dqacceptCharset\(dq,
    \(dqaction\(dq,
    \(dqenctype\(dq,
    \(dqmethod\(dq,
    \(dqtarget\(dq,
  ];
  \f[I]// Iterate over the properties, turning them into a string that we can display to the user\f[R]
  \f[B]const\f[R] info = properties
    .map((property) \f[B]=>\f[R] \(ga${property}: ${f[property]}\(ga)
    .join(\(dq\(rsn\(dq);

  \f[I]// Set the form\(aqs <textarea> to display the form\(aqs properties\f[R]
  document.forms[\(dqformA\(dq].elements[\(dqform\-info\(dq].value = info; \f[I]// document.forms[\(dqformA\(dq][\(aqform\-info\(aq].value would also work\f[R]
});

document.getElementById(\(dqset\-info\(dq).addEventListener(\(dqclick\(dq, (e) \f[B]=>\f[R] {
  \f[I]// Get a reference to the form via the event target\f[R]
  \f[I]// e.target is the button, and .form is the form it belongs to\f[R]
  \f[B]const\f[R] f = e.target.form;
  \f[I]// Argument should be a form element reference.\f[R]
  f.action = \(dqa\-different\-url.cgi\(dq;
  f.name = \(dqa\-different\-name\(dq;
});
.EE
.PP
Submit a \f[CR]<form>\f[R] into a new window:
.IP
.EX
<\f[B]form\f[R] action=\(dqtest.php\(dq target=\(dq_blank\(dq>
  <\f[B]p\f[R]>
    <\f[B]label\f[R]>First name: <\f[B]input\f[R] type=\(dqtext\(dq name=\(dqfirst\-name\(dq /></\f[B]label\f[R]>
  </\f[B]p\f[R]>
  <\f[B]p\f[R]>
    <\f[B]label\f[R]>Last name: <\f[B]input\f[R] type=\(dqtext\(dq name=\(dqlast\-name\(dq /></\f[B]label\f[R]>
  </\f[B]p\f[R]>
  <\f[B]p\f[R]>
    <\f[B]label\f[R]><\f[B]input\f[R] type=\(dqpassword\(dq name=\(dqpwd\(dq /></\f[B]label\f[R]>
  </\f[B]p\f[R]>

  <\f[B]fieldset\f[R]>
    <\f[B]legend\f[R]>Pet preference</\f[B]legend\f[R]>

    <\f[B]p\f[R]>
      <\f[B]label\f[R]><\f[B]input\f[R] type=\(dqradio\(dq name=\(dqpet\(dq value=\(dqcat\(dq /> Cat</\f[B]label\f[R]>
    </\f[B]p\f[R]>
    <\f[B]p\f[R]>
      <\f[B]label\f[R]><\f[B]input\f[R] type=\(dqradio\(dq name=\(dqpet\(dq value=\(dqdog\(dq /> Dog</\f[B]label\f[R]>
    </\f[B]p\f[R]>
  </\f[B]fieldset\f[R]>

  <\f[B]fieldset\f[R]>
    <\f[B]legend\f[R]>Owned vehicles</\f[B]legend\f[R]>

    <\f[B]p\f[R]>
      <\f[B]label\f[R]
        ><\f[B]input\f[R] type=\(dqcheckbox\(dq name=\(dqvehicle\(dq value=\(dqBike\(dq />I have a
        bike</\f[B]label\f[R]
      >
    </\f[B]p\f[R]>
    <\f[B]p\f[R]>
      <\f[B]label\f[R]
        ><\f[B]input\f[R] type=\(dqcheckbox\(dq name=\(dqvehicle\(dq value=\(dqCar\(dq />I have a car</\f[B]label\f[R]
      >
    </\f[B]p\f[R]>
  </\f[B]fieldset\f[R]>

  <\f[B]p\f[R]><\f[B]button\f[R]>Submit</\f[B]button\f[R]></\f[B]p\f[R]>
</\f[B]form\f[R]>
.EE
.SH SEE ALSO
.IP \(bu 2
The HTML element implementing this interface: \f[CR]<form>\f[R].
