.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCIceCandidate.candidate" "JS" "March 7, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCIceCandidate.candidate \- RTCIceCandidate: candidate property
.SH SYNOPSIS
The read\-only property \f[B]\f[CB]candidate\f[B]\f[R] on the
\f[CR]RTCIceCandidate\f[R] interface returns a string describing the
candidate in detail.
Most of the other properties of \f[CR]RTCIceCandidate\f[R] are actually
extracted from this string.
.PP
This property can be configured using the \f[CR]candidate\f[R] property
of the object passed into the \f[CR]RTCIceCandidate() constructor\f[R]
or \f[CR]RTCPeerConnection.addIceCandidate()\f[R].
.SH VALUE
A string describing the properties of the candidate, taken directly from
the SDP attribute \f[CR]\[dq]candidate\[dq]\f[R].
The candidate string specifies the network connectivity information for
the candidate.
If the \f[CR]candidate\f[R] is an empty string (\f[CR]\[dq]\[dq]\f[R]),
the end of the candidate list has been reached; this candidate is known
as the \[lq]end\-of\-candidates\[rq] marker.
.PP
The syntax of the candidate string is described in RFC 5245, section
15.1.
For an a\-line (attribute line) that looks like this:
.IP
.EX
a=candidate:4234997325 1 udp 2043278322 192.0.2.172 44323 typ host
.EE
.PP
the corresponding \f[CR]candidate\f[R] string\[cq]s value will be:
\f[CR]\[dq]candidate:4234997325 1 udp 2043278322 192.0.2.172 44323 typ host\[dq]\f[R].
.PP
The user agent always prefers candidates with the highest
\f[CR]priority\f[R], all else being equal.
In the example above, the priority is \f[CR]2043278322\f[R].
The attributes are all separated by a single space character, and are in
a specific order.
The complete list of attributes for this example candidate is:
.IP \[bu] 2
\f[CR]foundation\f[R] = 4234997325
.IP \[bu] 2
\f[CR]component\f[R] = \f[CR]\[dq]rtp\[dq]\f[R] (the number 1 is encoded
to this string; 2 becomes \f[CR]\[dq]rtcp\[dq]\f[R])
.IP \[bu] 2
\f[CR]protocol\f[R] = \f[CR]\[dq]udp\[dq]\f[R]
.IP \[bu] 2
\f[CR]priority\f[R] = 2043278322
.IP \[bu] 2
\f[CR]ip\f[R] = \f[CR]\[dq]192.0.2.172\[dq]\f[R]
.IP \[bu] 2
\f[CR]port\f[R] = 44323
.IP \[bu] 2
\f[CR]type\f[R] = \f[CR]\[dq]host\[dq]\f[R]
.SH EXAMPLES
In this example, we see a function which receives as input an SDP string
containing an ICE candidate received from the remote peer during the
signaling process.
.IP
.EX
\f[B]function\f[R] handleNewIceCandidate(candidateSDP) {
  \f[B]const\f[R] candidateObj = \f[B]new\f[R] RTCIceCandidate(candidateSDP);

  myPeerConnection.addIceCandidate(candidateObj).catch({
    \f[I]/* handle the error thrown by addIceCandidate() */\f[R]
  });
}
.EE
.PP
The \f[CR]handleNewIceCandidate()\f[R] function shown here passes the
received candidate\[cq]s SDP text into \f[CR]RTCIceCandidate()\f[R] to
receive an \f[CR]RTCIceCandidate\f[R] object in return, which represents
the candidate.
.PP
The new candidate is then passed into
\f[CR]RTCPeerConnection.addIceCandidate()\f[R] to add the candidate to
the list of candidates for WebRTC to consider using for the connection
being established.
