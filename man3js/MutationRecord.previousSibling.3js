.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MUTATIONRECORD.PREVIOUSSIBLING" "3JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.previousSibling \- MutationRecord: previousSibling
property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]previousSibling\f[B]\f[R] is the previous sibling of an added
or removed child node of the \f[CR]target\f[R] of a
\f[CR]MutationObserver\f[R].
.SH VALUE
If a node is added to or removed from the \f[CR]target\f[R] of a
\f[CR]MutationObserver\f[R], the value is the \f[CR]Node\f[R] that is
the previous sibling of the added or removed node: that is, the node
immediately before this one in the parent\(cqs \f[CR]childNodes\f[R]
list.
.PP
The value is \f[CR]null\f[R] if there are no added or removed nodes, or
if the node is the first child of its parent.
.SH EXAMPLES
.SS Log the previous sibling of a mutation
This adds a node every time you click the button.
Then the observer logs the \f[CR]textContent\f[R] of the
\f[CR]previousSibling\f[R] of the added node.
.SS HTML
.IP
.EX
<\f[B]button\f[R] id=\(dqadd\-nodes\(dq>Add a node</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqreset\(dq>Reset</\f[B]button\f[R]>

<\f[B]pre\f[R] id=\(dqlog\(dq class=\(dqlog\(dq>Previous sibling of added node:</\f[B]pre\f[R]>
<\f[B]div\f[R] id=\(dqtarget\(dq><\f[B]p\f[R]>Node #0</\f[B]p\f[R]></\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] addNodes = document.querySelector(\(dq#add\-nodes\(dq);
\f[B]const\f[R] reset = document.querySelector(\(dq#reset\(dq);
\f[B]const\f[R] target = document.querySelector(\(dq#target\(dq);
\f[B]let\f[R] nodeNumber = 1;

addNodes.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[B]const\f[R] newPara = document.createElement(\(dqp\(dq);
  newPara.textContent = \(gaNode #${nodeNumber}\(ga;
  nodeNumber++;
  target.appendChild(newPara);
});

reset.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] self.location.reload());

\f[B]function\f[R] logPreviousSibling(records) {
  \f[B]for\f[R] (\f[B]const\f[R] record \f[B]of\f[R] records) {
    \f[B]if\f[R] (record.type === \(dqchildList\(dq) {
      \f[B]for\f[R] (\f[B]const\f[R] newNode \f[B]of\f[R] record.addedNodes) {
        log.textContent = \(gaPrevious sibling of added node: ${newNode.previousSibling?.textContent}\(ga;
      }
    }
  }
}

\f[B]const\f[R] observer = \f[B]new\f[R] MutationObserver(logPreviousSibling);
observer.observe(target, { childList: \f[B]true\f[R] });
.EE
.SS Result
