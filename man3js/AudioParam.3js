.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "AudioParam" "JS" "July 31, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioParam \- AudioParam
.SH SYNOPSIS
The Web Audio API\[cq]s \f[CR]AudioParam\f[R] interface represents an
audio\-related parameter, usually a parameter of an \f[CR]AudioNode\f[R]
(such as \f[CR]GainNode.gain\f[R]).
.PP
An \f[CR]AudioParam\f[R] can be set to a specific value or a change in
value, and can be scheduled to happen at a specific time and following a
specific pattern.
.PP
Each \f[CR]AudioParam\f[R] has a list of events, initially empty, that
define when and how values change.
When this list is not empty, changes using the
\f[CR]AudioParam.value\f[R] attributes are ignored.
This list of events allows us to schedule changes that have to happen at
very precise times, using arbitrary timeline\-based automation curves.
The time used is the one defined in \f[CR]AudioContext.currentTime\f[R].
.SH AUDIOPARAM TYPES
There are two \f[CR]AudioParam\f[R] kinds: \f[I]a\-rate\f[R] and
\f[I]k\-rate\f[R] parameters.
Each \f[CR]AudioNode\f[R] defines which of its parameters are
\f[I]a\-rate\f[R] or \f[I]k\-rate\f[R] in the spec.
.SS a\-rate
An \f[I]a\-rate\f[R] \f[CR]AudioParam\f[R] takes the current audio
parameter value for each sample frame of the audio signal.
.SS k\-rate
A \f[I]k\-rate\f[R] \f[CR]AudioParam\f[R] uses the same initial audio
parameter value for the whole block processed; that is, 128 sample
frames.
In other words, the same value applies to every frame in the audio as
it\[cq]s processed by the node.
.SH INSTANCE PROPERTIES
.TP
\f[B]AudioParam.defaultValue\f[R] \f[I](read\-only)\f[R]
Represents the initial value of the attribute as defined by the specific
\f[CR]AudioNode\f[R] creating the \f[CR]AudioParam\f[R].
.TP
\f[B]AudioParam.maxValue\f[R] \f[I](read\-only)\f[R]
Represents the maximum possible value for the parameter\[cq]s nominal
(effective) range.
.TP
\f[B]AudioParam.minValue\f[R] \f[I](read\-only)\f[R]
Represents the minimum possible value for the parameter\[cq]s nominal
(effective) range.
.TP
\f[B]AudioParam.value\f[R]
Represents the parameter\[cq]s current value as of the current time;
initially set to the value of \f[CR]defaultValue\f[R].
.SH INSTANCE METHODS
.TP
\f[B]AudioParam.setValueAtTime()\f[R]
Schedules an instant change to the value of the \f[CR]AudioParam\f[R] at
a precise time, as measured against \f[CR]AudioContext.currentTime\f[R].
The new value is given by the \f[CR]value\f[R] parameter.
.TP
\f[B]AudioParam.linearRampToValueAtTime()\f[R]
Schedules a gradual linear change in the value of the
\f[CR]AudioParam\f[R].
The change starts at the time specified for the \f[I]previous\f[R]
event, follows a linear ramp to the new value given in the
\f[CR]value\f[R] parameter, and reaches the new value at the time given
in the \f[CR]endTime\f[R] parameter.
.TP
\f[B]AudioParam.exponentialRampToValueAtTime()\f[R]
Schedules a gradual exponential change in the value of the
\f[CR]AudioParam\f[R].
The change starts at the time specified for the \f[I]previous\f[R]
event, follows an exponential ramp to the new value given in the
\f[CR]value\f[R] parameter, and reaches the new value at the time given
in the \f[CR]endTime\f[R] parameter.
.TP
\f[B]AudioParam.setTargetAtTime()\f[R]
Schedules the start of a change to the value of the
\f[CR]AudioParam\f[R].
The change starts at the time specified in \f[CR]startTime\f[R] and
exponentially moves towards the value given by the \f[CR]target\f[R]
parameter.
The exponential decay rate is defined by the \f[CR]timeConstant\f[R]
parameter, which is a time measured in seconds.
.TP
\f[B]AudioParam.setValueCurveAtTime()\f[R]
Schedules the values of the \f[CR]AudioParam\f[R] to follow a set of
values, defined by an array of floating\-point numbers scaled to fit
into the given interval, starting at a given start time and spanning a
given duration of time.
.TP
\f[B]AudioParam.cancelScheduledValues()\f[R]
Cancels all scheduled future changes to the \f[CR]AudioParam\f[R].
.TP
\f[B]AudioParam.cancelAndHoldAtTime()\f[R]
Cancels all scheduled future changes to the \f[CR]AudioParam\f[R] but
holds its value at a given time until further changes are made using
other methods.
.SH EXAMPLES
First, a basic example showing a \f[CR]GainNode\f[R] having its
\f[CR]gain\f[R] value set.
\f[CR]gain\f[R] is an example of an \f[I]a\-rate\f[R]
\f[CR]AudioParam\f[R], as the value can potentially be set differently
for each sample frame of the audio.
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[B]const\f[R] gainNode = audioCtx.createGain();
gainNode.gain.value = 0;
.EE
.PP
Next, an example showing a \f[CR]DynamicsCompressorNode\f[R] having some
param values manipulated.
These are examples of \f[I]k\-rate\f[R] \f[CR]AudioParam\f[R] types, as
the values are set for the entire audio block at once.
.IP
.EX
\f[B]const\f[R] compressor = audioCtx.createDynamicsCompressor();
compressor.threshold.setValueAtTime(\-50, audioCtx.currentTime);
compressor.knee.setValueAtTime(40, audioCtx.currentTime);
compressor.ratio.setValueAtTime(12, audioCtx.currentTime);
compressor.attack.setValueAtTime(0, audioCtx.currentTime);
compressor.release.setValueAtTime(0.25, audioCtx.currentTime);
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
