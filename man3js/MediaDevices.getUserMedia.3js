.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "MediaDevices.getUserMedia" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaDevices.getUserMedia \- MediaDevices: getUserMedia() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]getUserMedia()\f[B]\f[R] method of the
\f[CR]MediaDevices\f[R] interface prompts the user for permission to use
a media input which produces a \f[CR]MediaStream\f[R] with tracks
containing the requested types of media.
.PP
That stream can include, for example, a video track (produced by either
a hardware or virtual video source such as a camera, video recording
device, screen sharing service, and so forth), an audio track
(similarly, produced by a physical or virtual audio source like a
microphone, A/D converter, or the like), and possibly other track types.
.PP
It returns a \f[CR]Promise\f[R] that resolves to a
\f[CR]MediaStream\f[R] object.
If the user denies permission, or matching media is not available, then
the promise is rejected with \f[CR]NotAllowedError\f[R] or
\f[CR]NotFoundError\f[R] \f[CR]DOMException\f[R] respectively.
.RS
.PP
\f[B]Note:\f[R] It\[cq]s possible for the returned promise to
\f[I]neither\f[R] resolve nor reject, as the user is not required to
make a choice at all and may ignore the request.
.RE
.SH SYNTAX
.IP
.EX
getUserMedia(constraints)
.EE
.SS Parameters
.TP
\f[B]constraints\f[R]
An object specifying the types of media to request, along with any
requirements for each type.
.RS
.PP
The \f[CR]constraints\f[R] parameter is an object with two members:
\f[CR]video\f[R] and \f[CR]audio\f[R], describing the media types
requested.
Either or both must be specified.
If the browser cannot find all media tracks with the specified types
that meet the constraints given, then the returned promise is rejected
with \f[CR]NotFoundError\f[R] \f[CR]DOMException\f[R].
.PP
For both \f[CR]video\f[R] and \f[CR]audio\f[R], its value is either a
boolean or an object.
The default value is \f[CR]false\f[R].
.IP \[bu] 2
If \f[CR]true\f[R] is specified for a media type, the resulting stream
is \f[I]required\f[R] to have that type of track in it.
If one cannot be included for any reason, the returned promise will
reject.
.IP \[bu] 2
If \f[CR]false\f[R] is specified for a media type, the resulting stream
\f[I]must not\f[R] have that type of track, or the returned promise will
reject.
Because both \f[CR]video\f[R] and \f[CR]audio\f[R] default to
\f[CR]false\f[R], if the \f[CR]constraints\f[R] object contains neither
property or if it\[cq]s not present at all, the returned promise will
always reject.
.IP \[bu] 2
If an object is specified for a media type, the object is read as a
\f[CR]MediaTrackConstraints\f[R] dictionary.
.RE
.SS Return value
A \f[CR]Promise\f[R] whose fulfillment handler receives a
\f[CR]MediaStream\f[R] object when the requested media has successfully
been obtained.
.SS Exceptions
.TP
\f[B]AbortError\f[R] \f[B]DOMException\f[R]
Although the user and operating system both granted access to the
hardware device, and no hardware issues occurred that would cause a
\f[CR]NotReadableError\f[R] \f[CR]DOMException\f[R], throw if some
problem occurred which prevented the device from being used.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if current document is not fully active.
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if one or more of the requested source devices cannot be used at
this time.
This will happen if the browsing context is insecure (that is, the page
was loaded using HTTP rather than HTTPS).
It also happens if the user has specified that the current browsing
instance is not permitted access to the device, the user has denied
access for the current session, or the user has denied all access to
user media devices globally.
On browsers that support managing media permissions with Permissions
Policy, this error is returned if Permissions Policy is not configured
to allow access to the input source(s).
.RS
.RS
.PP
\f[B]Note:\f[R] Older versions of the specification used
\f[CR]SecurityError\f[R] for this instead; \f[CR]SecurityError\f[R] has
taken on a new meaning.
.RE
.RE
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if no media tracks of the type specified were found that satisfy
the given constraints.
.TP
\f[B]NotReadableError\f[R] \f[B]DOMException\f[R]
Thrown if, although the user granted permission to use the matching
devices, a hardware error occurred at the operating system, browser, or
Web page level which prevented access to the device.
.TP
\f[B]OverconstrainedError\f[R] \f[B]DOMException\f[R]
Thrown if the specified constraints resulted in no candidate devices
which met the criteria requested.
The error is an object of type \f[CR]OverconstrainedError\f[R], and has
a \f[CR]constraint\f[R] property whose string value is the name of a
constraint which was impossible to meet, and a \f[CR]message\f[R]
property containing a human\-readable string explaining the problem.
.RS
.RS
.PP
\f[B]Note:\f[R] Because this error can occur even when the user has not
yet granted permission to use the underlying device, it can potentially
be used as a fingerprinting surface.
.RE
.RE
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Thrown if user media support is disabled on the \f[CR]Document\f[R] on
which \f[CR]getUserMedia()\f[R] was called.
The mechanism by which user media support is enabled and disabled is
left up to the individual user agent.
.TP
\f[B]TypeError\f[R]
Thrown if the list of constraints specified is empty, or has all
constraints set to \f[CR]false\f[R].
This can also happen if you try to call \f[CR]getUserMedia()\f[R] in an
insecure context, since \f[CR]navigator.mediaDevices\f[R] is
\f[CR]undefined\f[R] in an insecure context.
.SH PRIVACY AND SECURITY
As an API that may involve significant privacy concerns,
\f[CR]getUserMedia()\f[R]\[cq]s specification lays out a wide array of
privacy and security requirements that browsers are obligated to meet.
.PP
\f[CR]getUserMedia()\f[R] is a powerful feature that can only be used in
secure contexts; in insecure contexts, \f[CR]navigator.mediaDevices\f[R]
is \f[CR]undefined\f[R], preventing access to \f[CR]getUserMedia()\f[R].
A secure context is, in short, a page loaded using HTTPS or the
\f[CR]file:///\f[R] URL scheme, or a page loaded from
\f[CR]localhost\f[R].
.PP
In addition, user permission is always required to access the user\[cq]s
audio and video inputs.
Only a window\[cq]s top\-level document context for a valid origin can
even request permission to use \f[CR]getUserMedia()\f[R], unless the
top\-level context expressly grants permission for a given
\f[CR]<iframe>\f[R] to do so using Permissions Policy.
Otherwise, the user will never even be asked for permission to use the
input devices.
.PP
For additional details on these requirements and rules, how they are
reflected in the context in which your code is running, and about how
browsers manage user privacy and security issues, read on.
.SS User privacy
As an API that may involve significant privacy concerns,
\f[CR]getUserMedia()\f[R] is held by the specification to very specific
requirements for user notification and permission management.
First, \f[CR]getUserMedia()\f[R] must always get user permission before
opening any media gathering input such as a webcam or microphone.
Browsers may offer a once\-per\-domain permission feature, but they must
ask at least the first time, and the user must specifically grant
ongoing permission if they choose to do so.
.PP
Of equal importance are the rules around notification.
Browsers are required to display an indicator that shows that a camera
or microphone is in use, above and beyond any hardware indicator that
may exist.
They must also show an indicator that permission has been granted to use
a device for input, even if the device is not actively recording at the
moment.
.PP
For example in Firefox, the URL bar displays a pulsing red icon to
indicate that recording is underway.
The icon is gray if the permission is in place but recording is not
currently underway.
The device\[cq]s physical light is used to indicate whether or not
recording is currently active.
If you\[cq]ve muted your camera (so\-called \[lq]facemuting\[rq]), your
camera\[cq]s activity light goes out to indicate that the camera is not
actively recording you, without discarding the permission to resume
using the camera once muting is over.
.SS Security
There are a number of ways security management and controls in a user
agent can cause \f[CR]getUserMedia()\f[R] to return a security\-related
error.
.SS Permissions Policy
The two Permissions Policy directives that apply to
\f[CR]getUserMedia()\f[R] are \f[CR]camera\f[R] and
\f[CR]microphone\f[R].
.PP
For example, this HTTP header will enable use of a camera by the
document and any embedded \f[CR]<iframe>\f[R] elements that are loaded
from the same origin:
.IP
.EX
Permissions\-Policy: camera=(self)
.EE
.PP
This will request access to the microphone for the current origin and
the specific origin \f[CR]https://developer.mozilla.org\f[R]:
.IP
.EX
Permissions\-Policy: microphone=(self \[dq]https://developer.mozilla.org\[dq])
.EE
.PP
If you\[cq]re using \f[CR]getUserMedia()\f[R] within an
\f[CR]<iframe>\f[R], you can request permission just for that frame,
which is clearly more secure than requesting a more general permission.
Here, indicate we need the ability to use both camera and microphone:
.IP
.EX
<\f[B]iframe\f[R] src=\[dq]https://mycode.example.net/etc\[dq] allow=\[dq]camera; microphone\[dq]>
</\f[B]iframe\f[R]>
.EE
.SS Encryption based security
The \f[CR]getUserMedia()\f[R] method is only available in secure
contexts.
A secure context is one the browser is reasonably confident contains a
document which was loaded securely, using HTTPS/TLS, and has limited
exposure to insecure contexts.
If a document isn\[cq]t loaded in a secure context, the
\f[CR]navigator.mediaDevices\f[R] property is \f[CR]undefined\f[R],
making access to \f[CR]getUserMedia()\f[R] impossible.
.PP
Attempting to access \f[CR]getUserMedia()\f[R] in this situation will
result in a \f[CR]TypeError\f[R].
.SS Document source security
Because of the obvious security concern associated with
\f[CR]getUserMedia()\f[R] if used unexpectedly or without security being
carefully managed, it can only be used in secure contexts.
There are a number of insecure ways to load a document that might, in
turn, attempt to call \f[CR]getUserMedia()\f[R].
The following are examples of situations in which
\f[CR]getUserMedia()\f[R] is not permitted to be called:
.IP \[bu] 2
A document loaded into a sandboxed \f[CR]<iframe>\f[R] element cannot
call \f[CR]getUserMedia()\f[R] unless the \f[CR]<iframe>\f[R] has its
\f[CR]sandbox\f[R] attribute set to \f[CR]allow\-same\-origin\f[R].
.IP \[bu] 2
A document loaded using a \f[CR]data://\f[R] or \f[CR]blob://\f[R] URL
which has no origin (such as when one of these URLs is typed by the user
into the address bar) cannot call \f[CR]getUserMedia()\f[R].
These kinds of URLs loaded from JavaScript code inherit the script\[cq]s
permissions.
.IP \[bu] 2
Any other situation in which there is no origin, such as when the
\f[CR]srcdoc\f[R] attribute is used to specify the contents of a frame.
.SH EXAMPLES
.SS Using getUserMedia()
Generally, you will access the \f[CR]MediaDevices\f[R] singleton object
using \f[CR]navigator.mediaDevices\f[R], like this:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] getMedia(constraints) {
  \f[B]let\f[R] stream = \f[B]null\f[R];

  \f[B]try\f[R] {
    stream = \f[B]await\f[R] navigator.mediaDevices.getUserMedia(constraints);
    \f[I]/* use the stream */\f[R]
  } \f[B]catch\f[R] (err) {
    \f[I]/* handle the error */\f[R]
  }
}
.EE
.PP
Similarly, using the raw promises directly, the code looks like this:
.IP
.EX
navigator.mediaDevices
  .getUserMedia(constraints)
  .then((stream) \f[B]=>\f[R] {
    \f[I]/* use the stream */\f[R]
  })
  .catch((err) \f[B]=>\f[R] {
    \f[I]/* handle the error */\f[R]
  });
.EE
.RS
.PP
\f[B]Note:\f[R] If the current document isn\[cq]t loaded securely,
\f[CR]navigator.mediaDevices\f[R] will be \f[CR]undefined\f[R], and you
cannot use \f[CR]getUserMedia()\f[R].
See Security for more information on this and other security issues
related to using \f[CR]getUserMedia()\f[R].
.RE
.PP
Below are some examples of the \f[CR]constraints\f[R] parameter.
.PP
The following requests both audio and video without any specific
requirements:
.IP
.EX
getUserMedia({
  audio: \f[B]true\f[R],
  video: \f[B]true\f[R],
});
.EE
.PP
While information about a user\[cq]s cameras and microphones are
inaccessible for privacy reasons, an application can request the camera
and microphone capabilities it needs and wants, using additional
constraints.
The following expresses a preference for 1280x720 camera resolution:
.IP
.EX
getUserMedia({
  audio: \f[B]true\f[R],
  video: { width: 1280, height: 720 },
});
.EE
.PP
The browser will try to honor this, but may return other resolutions if
an exact match is not available, or the user overrides it.
.PP
To \f[I]require\f[R] a capability, use the keywords \f[CR]min\f[R],
\f[CR]max\f[R], or \f[CR]exact\f[R] (a.k.a.
\f[CR]min === max\f[R]).
The following demands a minimum resolution of 1280x720:
.IP
.EX
getUserMedia({
  audio: \f[B]true\f[R],
  video: {
    width: { min: 1280 },
    height: { min: 720 },
  },
});
.EE
.PP
If no camera exists with this resolution or higher, then the returned
promise will be rejected with \f[CR]OverconstrainedError\f[R], and the
user will not be prompted.
.PP
The reason for the difference in behavior is that the keywords
\f[CR]min\f[R], \f[CR]max\f[R], and \f[CR]exact\f[R] are inherently
mandatory \[em] whereas plain values and a keyword called
\f[CR]ideal\f[R] are not.
Here\[cq]s a full example:
.IP
.EX
getUserMedia({
  audio: \f[B]true\f[R],
  video: {
    width: { min: 1024, ideal: 1280, max: 1920 },
    height: { min: 576, ideal: 720, max: 1080 },
  },
});
.EE
.PP
An \f[CR]ideal\f[R] value, when used, has gravity \[em] which means that
the browser will try to find the setting (and camera, if you have more
than one), with the smallest \c
.UR https://w3c.github.io/mediacapture-main/#dfn-fitness-distance
fitness distance
.UE \c
\ from the ideal values given.
.PP
Plain values are inherently ideal, which means that the first of our
resolution examples above could have been written like this:
.IP
.EX
getUserMedia({
  audio: \f[B]true\f[R],
  video: {
    width: { ideal: 1280 },
    height: { ideal: 720 },
  },
});
.EE
.PP
Not all constraints are numbers.
For example, on mobile devices, the following will prefer the front
camera (if one is available) over the rear one:
.IP
.EX
getUserMedia({
  audio: \f[B]true\f[R],
  video: { facingMode: \[dq]user\[dq] },
});
.EE
.PP
To \f[I]require\f[R] the rear camera, use:
.IP
.EX
getUserMedia({
  audio: \f[B]true\f[R],
  video: {
    facingMode: { exact: \[dq]environment\[dq] },
  },
});
.EE
.PP
Another non\-number constraint is the \f[CR]deviceId\f[R] constraint.
If you have a \f[CR]deviceId\f[R] from
\f[CR]mediaDevices.enumerateDevices()\f[R], you can use it to request a
specific device:
.IP
.EX
getUserMedia({
  video: {
    deviceId: myPreferredCameraDeviceId,
  },
});
.EE
.PP
The above will return the camera you requested, or a different camera if
that specific camera is no longer available.
Again, to \f[I]require\f[R] the specific camera, you would use:
.IP
.EX
getUserMedia({
  video: {
    deviceId: {
      exact: myExactCameraOrBustDeviceId,
    },
  },
});
.EE
.SS Width and height
This example gives a preference for camera resolution, and assigns the
resulting \f[CR]MediaStream\f[R] object to a video element.
.IP
.EX
\f[I]// Prefer camera resolution nearest to 1280x720.\f[R]
\f[B]const\f[R] constraints = {
  audio: \f[B]true\f[R],
  video: { width: 1280, height: 720 },
};

navigator.mediaDevices
  .getUserMedia(constraints)
  .then((mediaStream) \f[B]=>\f[R] {
    \f[B]const\f[R] video = document.querySelector(\[dq]video\[dq]);
    video.srcObject = mediaStream;
    video.onloadedmetadata = () \f[B]=>\f[R] {
      video.play();
    };
  })
  .catch((err) \f[B]=>\f[R] {
    \f[I]// always check for errors at the end.\f[R]
    console.error(\[ga]${err.name}: ${err.message}\[ga]);
  });
.EE
.SS Frame rate
Lower frame\-rates may be desirable in some cases, like WebRTC
transmissions with bandwidth restrictions.
.IP
.EX
\f[B]const\f[R] constraints = {
  video: { frameRate: { ideal: 10, max: 15 } },
};
.EE
.SS Front and back camera
On mobile phones.
.IP
.EX
\f[B]let\f[R] front = \f[B]false\f[R];
document.getElementById(\[dq]flip\-button\[dq]).onclick = () \f[B]=>\f[R] {
  front = !front;
};

\f[B]const\f[R] constraints = {
  video: { facingMode: front ? \[dq]user\[dq] : \[dq]environment\[dq] },
};
.EE
.RS
.PP
\f[B]Note:\f[R] In certain cases, it may be necessary to release the
current camera facing mode before you can switch to a different one.
To ensure the camera switch, it is advisable to free up the media
resources by invoking the \[lq]stop()\[rq] method on the track before
requesting a different facing mode.
.RE
.SH SEE ALSO
.IP \[bu] 2
The older \f[CR]Navigator.getUserMedia()\f[R] legacy API
.IP \[bu] 2
\f[CR]MediaDevices.enumerateDevices()\f[R]: Listing available media
devices
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
Media Capture and Streams API
.IP \[bu] 2
Screen Capture API: Capturing screen contents as a
\f[CR]MediaStream\f[R]
.IP \[bu] 2
\f[CR]MediaDevices.getDisplayMedia()\f[R]: Getting a stream containing
screen contents
.IP \[bu] 2
Taking webcam photos: A tutorial on using \f[CR]getUserMedia()\f[R] to
take still photos rather than video
