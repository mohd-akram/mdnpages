.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUSHADERMODULE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUShaderModule \- GPUShaderModule
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUShaderModule\f[B]\f[R] interface of the WebGPU API
represents an internal shader module object, a container for \c
.UR https://gpuweb.github.io/gpuweb/wgsl/
WGSL
.UE \c
\ shader code that can be submitted to the GPU for execution by a
pipeline.
.PP
A \f[CR]GPUShaderModule\f[R] object instance is created using
\f[CR]GPUDevice.createShaderModule()\f[R].
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH INSTANCE METHODS
.TP
\f[B]getCompilationInfo()\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a
\f[CR]GPUCompilationInfo\f[R] object containing messages generated
during the \f[CR]GPUShaderModule\f[R]\(cqs compilation.
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, our shader module is created using the following code:
.IP
.EX
\f[B]const\f[R] shaders = \(ga
struct VertexOut {
  \(atbuiltin(position) position : vec4f,
  \(atlocation(0) color : vec4f
}

\(atvertex
fn vertex_main(\(atlocation(0) position: vec4f,
               \(atlocation(1) color: vec4f) \-> VertexOut
{
  var output : VertexOut;
  output.position = position;
  output.color = color;
  return output;
}

\(atfragment
fn fragment_main(fragData: VertexOut) \-> \(atlocation(0) vec4f
{
  return fragData.color;
}
\(ga;

\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();

  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[B]const\f[R] device = \f[B]await\f[R] adapter.requestDevice();

  \f[I]// \&...\f[R]
  \f[I]// later on\f[R]

  \f[B]const\f[R] shaderModule = device.createShaderModule({
    code: shaders,
  });

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
