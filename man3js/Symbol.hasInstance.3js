'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Symbol.hasInstance" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.hasInstance \- Symbol.hasInstance
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.hasInstance\f[B]\f[R] static data property
represents the well\-known symbol \f[CR]Symbol.hasInstance\f[R].
The \f[CR]instanceof\f[R] operator looks up this symbol on its
right\-hand operand for the method used to determine if the constructor
object recognizes an object as its instance.
.IP
.EX
\f[B]class\f[R] Array1 {
  \f[B]static\f[R] [Symbol.hasInstance](instance) {
    \f[B]return\f[R] Array.isArray(instance);
  }
}

console.log([] \f[B]instanceof\f[R] Array1);
\f[I]// Expected output: true\f[R]
.EE
.SH VALUE
The well\-known symbol \f[CR]Symbol.hasInstance\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
The \f[CR]instanceof\f[R] operator uses the following algorithm to
calculate the return value of \f[CR]object instanceof constructor\f[R]:
.IP "1." 3
If \f[CR]constructor\f[R] has a \f[CR][Symbol.hasInstance]()\f[R]
method, then call it with \f[CR]object\f[R] as the first argument and
return the result, coerced to a boolean.
Throw a \f[CR]TypeError\f[R] if \f[CR]constructor\f[R] is not an object,
or if \f[CR]constructor[Symbol.hasInstance]\f[R] is not one of
\f[CR]null\f[R], \f[CR]undefined\f[R], or a function.
.IP "2." 3
Otherwise, if \f[CR]constructor\f[R] doesn\[cq]t have a
\f[CR][Symbol.hasInstance]()\f[R] method
(\f[CR]constructor[Symbol.hasInstance]\f[R] is \f[CR]null\f[R] or
\f[CR]undefined\f[R]), then determine the result using the same
algorithm as \f[CR]Function.prototype[Symbol.hasInstance]()\f[R].
Throw a \f[CR]TypeError\f[R] if \f[CR]constructor\f[R] is not a
function.
.PP
Because all functions inherit from \f[CR]Function.prototype\f[R] by
default, most of the time, the
\f[CR]Function.prototype[Symbol.hasInstance]()\f[R] method specifies the
behavior of \f[CR]instanceof\f[R] when the right\-hand side is a
function.
.SH EXAMPLES
.SS Custom instanceof behavior
You could implement your custom \f[CR]instanceof\f[R] behavior like
this, for example:
.IP
.EX
\f[B]class\f[R] MyArray {
  \f[B]static\f[R] [Symbol.hasInstance](instance) {
    \f[B]return\f[R] Array.isArray(instance);
  }
}
console.log([] \f[B]instanceof\f[R] MyArray); \f[I]// true\f[R]
.EE
.IP
.EX
\f[B]function\f[R] MyArray() {}
Object.defineProperty(MyArray, Symbol.hasInstance, {
  value(instance) {
    \f[B]return\f[R] Array.isArray(instance);
  },
});
console.log([] \f[B]instanceof\f[R] MyArray); \f[I]// true\f[R]
.EE
.SS Checking the instance of an object
Just in the same manner at which you can check if an object is an
instance of a class using the \f[CR]instanceof\f[R] keyword, we can also
use \f[CR]Symbol.hasInstance\f[R] for such checks.
.IP
.EX
\f[B]class\f[R] Animal {
  constructor() {}
}

\f[B]const\f[R] cat = \f[B]new\f[R] Animal();

console.log(Animal[Symbol.hasInstance](cat)); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]instanceof\f[R]
.IP \[bu] 2
\f[CR]Function.prototype[Symbol.hasInstance]()\f[R]
