.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "DOMMatrixReadOnly.toFloat32Array" "JS" "February 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMMatrixReadOnly.toFloat32Array \- DOMMatrixReadOnly: toFloat32Array()
method
.SH SYNOPSIS
The \f[B]\f[CB]toFloat32Array()\f[B]\f[R] method of the
\f[CR]DOMMatrixReadOnly\f[R] interface returns a new
\f[CR]Float32Array\f[R] containing all 16 elements (\f[CR]m11\f[R],
\f[CR]m12\f[R], \f[CR]m13\f[R], \f[CR]m14\f[R], \f[CR]m21\f[R],
\f[CR]m22\f[R], \f[CR]m23\f[R], \f[CR]m24\f[R], \f[CR]m31\f[R],
\f[CR]m32\f[R], \f[CR]m33\f[R], \f[CR]m34\f[R], \f[CR]m41\f[R],
\f[CR]m42\f[R], \f[CR]m43\f[R], \f[CR]m44\f[R]) which comprise the
matrix.
The elements are stored into the array as single\-precision
floating\-point numbers in column\-major (colexographical access, or
\[lq]colex\[rq]) order.
(In other words, down the first column from top to bottom, then the
second column, and so forth.)
.PP
For double\-precision floating\-point numbers, see
\f[CR]DOMMatrixReadOnly.toFloat64Array()\f[R].
.SH SYNTAX
.IP
.EX
toFloat32Array()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Float32Array\f[R]; an array of the matrix\[cq]s 16 element
values.
.SH EXAMPLES
.SS Basic usage
.IP
.EX
\f[B]const\f[R] matrix = \f[B]new\f[R] DOMMatrixReadOnly();
\f[B]const\f[R] float32 = matrix.translate(20, 30, 50).toFloat32Array();
console.log(float32); \f[I]// Float64Array(16) [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 20, 30, 0, 1 ] ]\f[R]
console.log(\[ga]m41: ${float32[12]}, m42: ${float32[13]}, m43: ${float32[14]}\[ga]); \f[I]// m41: 20, m42: 30, M44: 40\f[R]
.EE
.SS Single precision
There are multiple ways to access the values of a matrix.
This example rotates a matrix by 30deg, saving the rotated state as a
JSON object using the \f[CR]DOMMatrixReadOnly.toJSON()\f[R] method and
as a single\-precision array using the \f[CR]toFloat32Array()\f[R]
method.
.IP
.EX
\f[B]const\f[R] matrix = \f[B]new\f[R] DOMMatrixReadOnly();
\f[B]const\f[R] json = matrix.rotate(30).toJSON();
\f[B]const\f[R] float32 = matrix.rotate(30).toFloat32Array();

console.log(\[ga]a: ${json[\[dq]a\[dq]]}, b: ${json[\[dq]b\[dq]]}\[ga]); \f[I]// a: 0.8660254037844387, b: 0.49999999999999994\f[R]
console.log(\[ga]a: ${float32[0]}, b: ${float32[1]}\[ga]); \f[I]// a: 0.8660253882408142, b: 0.5\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]DOMMatrixReadOnly.toFloat64Array()\f[R]
.IP \[bu] 2
\f[CR]DOMMatrix.setMatrixValue()\f[R]
