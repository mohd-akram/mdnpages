.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBOPENDBREQUEST.UPGRADENEEDED_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBOpenDBRequest.upgradeneeded_event \- IDBOpenDBRequest: upgradeneeded
event
.SH SYNOPSIS
The \f[CR]upgradeneeded\f[R] event is fired when an attempt was made to
open a database with a version number higher than its current version.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqupgradeneeded\(dq, (event) => { })

onupgradeneeded = (event) => { }
.EE
.SH EVENT TYPE
An \f[CR]IDBVersionChangeEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent, \f[CI]Event\f[I]
interface.\f[R]
.TP
\f[B]IDBVersionChangeEvent.oldVersion\f[R] \f[I](read\-only)\f[R]
Returns the old version of the database.
.TP
\f[B]IDBVersionChangeEvent.newVersion\f[R] \f[I](read\-only)\f[R]
Returns the new version of the database.
.SH EXAMPLES
This example opens a database and handles the \f[CR]upgradeneeded\f[R]
event by making any necessary updates to the object store.
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

dBOpenRequest.addEventListener(\(dqupgradeneeded\(dq, (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;
  console.log(\(gaUpgrading to version ${db.version}\(ga);

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
});
.EE
.PP
This is the same example, but uses the onupgradeneeded event handler
property.
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;
  console.log(\(gaUpgrading to version ${db.version}\(ga);

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
