.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RTCRtpTransceiver.setCodecPreferences" "JS" "February 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpTransceiver.setCodecPreferences \- RTCRtpTransceiver:
setCodecPreferences() method
.SH SYNOPSIS
The \f[B]\f[CB]setCodecPreferences()\f[B]\f[R] method of the
\f[CR]RTCRtpTransceiver\f[R] interface is used to set the codecs that
the transceiver allows for decoding \f[I]received\f[R] data, in order of
decreasing preference.
.PP
The preferences set using this method influence what codecs are
negotiated with the remote peer for encoding the data that it sends,
including those used for retransmission, redundancy, and forward error
correction.
Codecs that are not included in the preferences list will not be part of
the negotiation.
Note that the preferences used by this transceiver for \f[I]sending\f[R]
content depend on the preferences of the remote peer.
.PP
The recommended way to set codec preferences is to first get the array
of codecs that are actually supported for decoding received data, then
reorder them your in decreasing preference order.
This ensures that the array is ordered as required, does not contain any
unsupported codecs, and also that it also contains codecs that are
needed for retransmission, redundancy, and forward error correction.
.PP
The specified set of codecs will be used for all future connections that
include this transceiver until this method is called again.
.PP
When preparing to open an \f[CR]RTCPeerConnection\f[R] the codecs should
be set using \f[CR]setCodecParameters()\f[R] \f[I]before\f[R] calling
either \f[CR]RTCPeerConnection.createOffer()\f[R] or
\f[CR]createAnswer()\f[R], as these initiate the negotiation (and will
use codec parameters from the user agent\[cq]s default configuration by
default).
.PP
The codecs can be changed when you have an ongoing communication, but
you need to first call \f[CR]setCodecParameters()\f[R] and then kick off
a new negotiation.
A WebRTC application will already have code for this in the
\f[CR]negotiationneeded\f[R] event handler.
Note however that at time of writing the event is not automatically
fired when you call \f[CR]setCodecParameters()\f[R], so you will have to
call \f[CR]onnegotiationneeded\f[R] yourself.
.PP
A guide to codecs supported by WebRTC\[em]and each codec\[cq]s positive
and negative characteristics\[em]can be found in Codecs used by WebRTC.
.SH SYNTAX
.IP
.EX
setCodecPreferences(codecs)
.EE
.SS Parameters
.TP
\f[B]codecs\f[R]
An array of objects, each providing the parameters for one of the
transceiver\[cq]s supported media codecs, ordered by preference.
If \f[CR]codecs\f[R] is empty, the codec configurations are all returned
to the user agent\[cq]s defaults.
.RS
.RS
.PP
\f[B]Note:\f[R] Any codecs not included in \f[CR]codecs\f[R] will not be
considered during the process of negotiating a connection.
This lets you prevent the use of codecs you don\[cq]t wish to use.
.RE
.PP
Each codec object in the array has the following properties:
.TP
\f[B]channels\f[R] \f[I](optional)\f[R]
A positive integer indicating the number of channels supported by the
codec.
For example, for audio codecs a value of 1 specifies monaural sound,
while 2 indicates stereo.
.TP
\f[B]clockRate\f[R]
A positive integer specifying the codec\[cq]s clock rate in Hertz (Hz).
The clock rate is the rate at which the codec\[cq]s RTP timestamp
advances.
Most codecs have specific values or ranges of values they permit.
The IANA maintains a \c
.UR https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-1
list of codecs and their parameters
.UE \c
, including their clock rates.
.TP
\f[B]mimeType\f[R]
A string indicating the codec\[cq]s MIME media type and subtype,
specified as a string of the form \f[CR]\[dq]type/subtype\[dq]\f[R].
The MIME type strings used by RTP differ from those used elsewhere.
IANA maintains a \c
.UR https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-2
registry of valid MIME types
.UE \c
\&.
Also see Codecs used by WebRTC for details about potential codecs that
might be referenced here.
.TP
\f[B]sdpFmtpLine\f[R] \f[I](optional)\f[R]
A string giving the format specific parameters field from the
\f[CR]a=fmtp\f[R] line in the SDP which corresponds to the codec, if the
field is present.
If there is no parameters field, this property is left out.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
The \f[CR]codecs\f[R] list includes one or more codecs which are not
supported by the \f[CR]RTCRtpReceiver\f[R] associated with the
transceiver.
.TP
\f[B]InvalidModificationError\f[R] \f[B]DOMException\f[R]
The \f[CR]codecs\f[R] list only contains entries for RTX, RED, FEC or
Comfort Noise, or is an empty set.
The codecs must always contain a codec for the media.
.SH EXAMPLES
.SS Creating the array of preferred codecs
The recommended way to set codec preferences is to first get the array
of codecs that are actually supported for decoding received data, then
reorder the list in decreasing preference order.
.PP
It is important to start with the list of codecs that are supported (and
not a hard coded list of your preferred codecs), because you if you
include any that aren\[cq]t supported by the associated
\f[CR]RTCRtpReceiver\f[R] the browser will throw an
\f[CR]InvalidAccessError\f[R] exception when you call the
\f[CR]setCodecPreferences()\f[R] method.
In addition, the array has to include appropriate codecs for
retransmission, redundancy, and forward error correction, and starting
with the list of supported codecs ensures that these are present.
.PP
You can get the codecs supported for decoding data using the
\f[CR]RTCRtpReceiver.getCapabilities()\f[R] static method as shown:
.IP
.EX
\f[B]const\f[R] availReceiveCodecs = transceiver.receiver.getCapabilities(\[dq]video\[dq]).codecs;
.EE
.PP
To reorder the codecs array to our preferred order, we can use the
sorting function below to sort on MIME type (this comes from \c
.UR https://blog.mozilla.org/webrtc/cross-browser-support-for-choosing-webrtc-codecs/
setCodecPreferences is now in all browsers!
.UE \c
\ on blog.mozilla.org (2024)).
.IP
.EX
\f[B]function\f[R] sortByMimeTypes(codecs, preferredOrder) {
  \f[B]return\f[R] codecs.sort((a, b) \f[B]=>\f[R] {
    \f[B]const\f[R] indexA = preferredOrder.indexOf(a.mimeType);
    \f[B]const\f[R] indexB = preferredOrder.indexOf(b.mimeType);
    \f[B]const\f[R] orderA = indexA >= 0 ? indexA : Number.MAX_VALUE;
    \f[B]const\f[R] orderB = indexB >= 0 ? indexB : Number.MAX_VALUE;
    \f[B]return\f[R] orderA \- orderB;
  });
}
.EE
.PP
The method takes the list of supported codecs, and an array containing
the preferred MIME types, in decreasing order, and returns the array
sorted in place.
The code below shows how this is used, assuming that you have already
set up a peer connection (\f[CR]peerConnection\f[R]):
.IP
.EX
\f[I]// Get supported codecs the sort using preferred codecs\f[R]
\f[B]const\f[R] supportedCodecs = RTCRtpReceiver.getCapabilities(\[dq]video\[dq]).codecs;
\f[B]const\f[R] preferredCodecs = [\[dq]video/H264\[dq], \[dq]video/VP8\[dq], \[dq]video/VP9\[dq]];
\f[B]const\f[R] sortedCodecs = sortByMimeTypes(supportedCodecs, preferredCodecs);

\f[I]// Get transceiver for connection and set the preferences\f[R]
\f[B]const\f[R] [transceiver] = peerConnection.getTransceivers();
transceiver.setCodecPreferences(sortedCodecs); \f[I]// <\-\-\-\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://blog.mozilla.org/webrtc/cross-browser-support-for-choosing-webrtc-codecs/
setCodecPreferences is now in all browsers!
.UE \c
\ on blog.mozilla.org (2024)
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
Codecs used by WebRTC
.IP \[bu] 2
Introduction to the Real\-time Transport Protocol (RTP)
.IP \[bu] 2
Web media technologies
