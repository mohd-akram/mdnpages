.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CSSContainerRule.containerQuery" "JS" "February 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSSContainerRule.containerQuery \- CSSContainerRule: containerQuery
property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]containerQuery\f[B]\f[R] property of the
\f[CR]CSSContainerRule\f[R] interface returns a string representing the
container conditions that are evaluated when the container changes size
in order to determine if the styles in the associated
\f[CR]\[at]container\f[R] are applied.
.PP
For example, the value of \f[CR]containerQuery\f[R] for the
\f[CR]\[at]container\f[R] below is \f[CR](min\-width: 700px)\f[R]:
.IP
.EX
\f[B]\[at]container\f[R] sidebar (\f[B]min\-width\f[R]: 700px) {
  .card {
    \f[B]font\-size\f[R]: 2em;
  }
}
.EE
.SH VALUE
A string containing the container query.
.PP
Note that the value may not be identical to the original string, as
normalizations such as removing whitespace may happen.
.SH EXAMPLES
The example below defines an unnamed \f[CR]\[at]container\f[R] rule, and
displays the properties of the associated \f[CR]CSSContainerRule\f[R].
The CSS is the same as in the \f[CR]\[at]container\f[R] example Setting
styles based on a container\[cq]s size.
.PP
First we define the HTML for a \f[CR]card\f[R] (\f[CR]<div>\f[R])
contained within a \f[CR]post\f[R].
.IP
.EX
<\f[B]div\f[R] class=\[dq]post\[dq]>
  <\f[B]div\f[R] class=\[dq]card\[dq]>
    <\f[B]h2\f[R]>Card title</\f[B]h2\f[R]>
    <\f[B]p\f[R]>Card content</\f[B]p\f[R]>
  </\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.PP
The CSS for the container element specifies the type of the container.
The \f[CR]\[at]container\f[R] then applies a new width, font\-size and
background color to the contained element \[lq]card\[rq] if the width is
less than 650px.
.IP
.EX
<\f[B]style\f[R] id=\[dq]examplestyles\[dq]>
  \f[I]/* A container context based on inline size */\f[R]
  .post {
    \f[B]container\-type\f[R]: inline\-size;
  }

  \f[I]/* Apply styles if the container is narrower than 650px */\f[R]
  \f[B]\[at]container\f[R] (\f[B]width\f[R] < 650px) {
    .card {
      \f[B]width\f[R]: 50%;
      \f[B]background\-color\f[R]: gray;
      \f[B]font\-size\f[R]: 1em;
    }
  }
</\f[B]style\f[R]>
.EE
.PP
The code below gets the \f[CR]HTMLStyleElement\f[R] associated with the
example using its id, and then uses its \f[CR]sheet\f[R] property to get
the \f[CR]StyleSheet\f[R].
From the \f[CR]StyleSheet\f[R] we get the set of \f[CR]cssRules\f[R]
added to the sheet.
Since we added the \f[CR]\[at]container\f[R] as the second rule above,
we can access the associated \f[CR]CSSContainerRule\f[R] using the
second entry (with index \[lq]1\[rq]), in the \f[CR]cssRules\f[R].
Last of all, we log the container name and query properties.
.IP
.EX
\f[B]const\f[R] exampleStylesheet = document.getElementById(\[dq]examplestyles\[dq]).sheet;
\f[B]const\f[R] exampleRules = exampleStylesheet.cssRules;
\f[B]const\f[R] containerRule = exampleRules[1]; \f[I]// a CSSContainerRule representing the container rule.\f[R]
log(\[ga]CSSContainerRule.containerQuery: \[dq]${containerRule.containerQuery}\[dq]\[ga]);
.EE
.PP
The example output is shown below.
The log section lists the query string.
The card should change background and as the width of the page
transitions through 650px.
.SH SEE ALSO
.IP \[bu] 2
CSS containment module
.IP \[bu] 2
Container queries
.IP \[bu] 2
Using container size and style queries
