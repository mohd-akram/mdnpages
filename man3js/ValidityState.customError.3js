.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "VALIDITYSTATE.CUSTOMERROR" "3JS" "May 30, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ValidityState.customError \- ValidityState: customError property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]customError\f[B]\f[R] property of the
\f[CR]ValidityState\f[R] interface returns \f[CR]true\f[R] if an element
doesn\(cqt meet the validation required in the custom validity set by
the element\(cqs \f[CR]setCustomValidity()\f[R] method.
.SH VALUE
A boolean that is \f[CR]true\f[R] if a custom error message has been set
to a non\-empty string.
.SH EXAMPLES
.SS Detecting a custom error
In this example, \f[CR]setCustomValidity()\f[R] sets a custom error
message when a form submission contains user input that\(cqs considered
invalid.
The \(lqValidate input\(rq button calls \f[CR]reportValidity()\f[R],
which displays a validation message under the element if a user enters
values that do not match the form\(cqs constraints.
.PP
If you enter the text \(lqgood\(rq or \(lqfine\(rq and try to validate
the input, the field is marked invalid until the custom error message is
cleared (set to an empty string).
For comparison, there is a \f[CR]minlength\f[R] attribute on the input
element that allows us to demonstrate the \f[CR]tooShort\f[R] validity
state when the user enters less than two characters.
When the value in the form control is invalid, even if there is no
custom error, the input will have a red outline.
.SS HTML
.IP
.EX
<\f[B]pre\f[R] id=\(dqlog\(dq>Validation failures logged here...</\f[B]pre\f[R]>
<\f[B]input\f[R]
  type=\(dqtext\(dq
  id=\(dquserInput\(dq
  placeholder=\(dqHow do you feel?\(dq
  minlength=\(dq2\(dq />
<\f[B]button\f[R] id=\(dqcheckButton\(dq>Validate input</\f[B]button\f[R]>
.EE
.SS CSS
.IP
.EX
input\f[BI]:invalid\f[R] {
  \f[B]border\f[R]: red solid 3px;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] userInput = document.getElementById(\(dquserInput\(dq);
\f[B]const\f[R] checkButton = document.getElementById(\(dqcheckButton\(dq);
\f[B]const\f[R] logElement = document.getElementById(\(dqlog\(dq);

\f[B]function\f[R] log(text) {
  logElement.innerText = text;
}

\f[B]const\f[R] check = (input) \f[B]=>\f[R] {
  \f[I]// Handle cases where input is too vague\f[R]
  \f[B]if\f[R] (input.value === \(dqgood\(dq || input.value === \(dqfine\(dq) {
    input.setCustomValidity(\(ga\(dq${input.value}\(dq is not a feeling.\(ga);
  } \f[B]else\f[R] {
    \f[I]// An empty string resets the custom validity state\f[R]
    input.setCustomValidity(\(dq\(dq);
  }
};

userInput.addEventListener(\(dqinput\(dq, () \f[B]=>\f[R] {
  check(userInput);
});

\f[B]const\f[R] validateInput = () \f[B]=>\f[R] {
  userInput.reportValidity();
  \f[B]if\f[R] (userInput.validity.customError) {
    \f[I]// We can handle custom validity states here\f[R]
    log(\(gaCustom validity error: ${userInput.validationMessage}\(ga);
  } \f[B]else\f[R] {
    log(userInput.validationMessage);
  }
};

checkButton.addEventListener(\(dqclick\(dq, validateInput);
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
ValidityState badInput, valid properties.
.IP \(bu 2
Constraint validation
.IP \(bu 2
Forms: Data form validation
