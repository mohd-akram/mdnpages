.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ValidityState.customError" "JS" "July 15, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ValidityState.customError \- ValidityState: customError property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]customError\f[B]\f[R] property of the
\f[CR]ValidityState\f[R] interface returns \f[CR]true\f[R] if an element
doesn\[cq]t meet the validation required in the custom validity set by
the element\[cq]s \f[CR]setCustomValidity()\f[R] method.
.SH VALUE
A boolean that is \f[CR]true\f[R] if a custom error message has been set
to a non\-empty string.
.SH EXAMPLES
.SS Detecting a custom error
In this example, \f[CR]setCustomValidity()\f[R] sets a custom error
message when a form submission contains user input that\[cq]s considered
invalid.
The \[lq]Validate input\[rq] button calls \f[CR]reportValidity()\f[R],
which displays a validation message under the element if a user enters
values that do not match the form\[cq]s constraints.
.PP
If you enter the text \[lq]good\[rq] or \[lq]fine\[rq] and try to
validate the input, the field is marked invalid until the custom error
message is cleared (set to an empty string).
For comparison, there is a \f[CR]minlength\f[R] attribute on the input
element that allows us to demonstrate the \f[CR]tooShort\f[R] validity
state when the user enters less than two characters.
When the value in the form control is invalid, even if there is no
custom error, the input will have a red outline.
.SS HTML
.IP
.EX
<\f[B]pre\f[R] id=\[dq]log\[dq]>Validation failures logged here...</\f[B]pre\f[R]>
<\f[B]input\f[R]
  type=\[dq]text\[dq]
  id=\[dq]userInput\[dq]
  placeholder=\[dq]How do you feel?\[dq]
  minlength=\[dq]2\[dq] />
<\f[B]button\f[R] id=\[dq]checkButton\[dq]>Validate input</\f[B]button\f[R]>
.EE
.SS CSS
.IP
.EX
input\f[BI]:invalid\f[R] {
  \f[B]border\f[R]: red solid 3px;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] userInput = document.getElementById(\[dq]userInput\[dq]);
\f[B]const\f[R] checkButton = document.getElementById(\[dq]checkButton\[dq]);
\f[B]const\f[R] logElement = document.getElementById(\[dq]log\[dq]);

\f[B]function\f[R] log(text) {
  logElement.innerText = text;
}

\f[B]const\f[R] check = (input) \f[B]=>\f[R] {
  \f[I]// Handle cases where input is too vague\f[R]
  \f[B]if\f[R] (input.value == \[dq]good\[dq] || input.value == \[dq]fine\[dq]) {
    input.setCustomValidity(\[ga]\[dq]${input.value}\[dq] is not a feeling.\[ga]);
  } \f[B]else\f[R] {
    \f[I]// An empty string resets the custom validity state\f[R]
    input.setCustomValidity(\[dq]\[dq]);
  }
};

userInput.addEventListener(\[dq]input\[dq], () \f[B]=>\f[R] {
  check(userInput);
});

\f[B]const\f[R] validateInput = () \f[B]=>\f[R] {
  userInput.reportValidity();
  \f[B]if\f[R] (userInput.validity.customError) {
    \f[I]// We can handle custom validity states here\f[R]
    log(\[dq]Custom validity error: \[dq] + userInput.validationMessage);
  } \f[B]else\f[R] {
    log(userInput.validationMessage);
  }
};

checkButton.addEventListener(\[dq]click\[dq], validateInput);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
ValidityState badInput, valid properties.
.IP \[bu] 2
Constraint validation
.IP \[bu] 2
Forms: Data form validation
