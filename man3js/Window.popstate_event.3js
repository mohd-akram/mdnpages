.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Window.popstate_event" "JS" "October 7, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.popstate_event \- Window: popstate event
.SH SYNOPSIS
The \f[B]\f[CB]popstate\f[B]\f[R] event of the \f[CR]Window\f[R]
interface is fired when the active history entry changes while the user
navigates the session history.
It changes the current history entry to that of the last page the user
visited or, if \f[CR]history.pushState()\f[R] has been used to add a
history entry to the history stack, that history entry is used instead.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]popstate\[dq], (event) \f[B]=>\f[R] {});
onpopstate = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]PopStateEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
.TP
\f[B]PopStateEvent.state\f[R] \f[I](read\-only)\f[R]
Returns a copy of the information that was provided to
\f[CR]pushState()\f[R] or \f[CR]replaceState()\f[R].
.SH EVENT HANDLER ALIASES
In addition to the \f[CR]Window\f[R] interface, the event handler
property \f[CR]onpopstate\f[R] is also available on the following
elements:
.IP \[bu] 2
\f[CR]HTMLBodyElement\f[R]
.IP \[bu] 2
\f[CR]HTMLFrameSetElement\f[R]
.IP \[bu] 2
\f[CR]SVGSVGElement\f[R]
.SH THE HISTORY STACK
If the history entry being activated was created by a call to
\f[CR]history.pushState()\f[R] or was affected by a call to
\f[CR]history.replaceState()\f[R], the \f[CR]popstate\f[R] event\[cq]s
\f[CR]state\f[R] property contains a copy of the history entry\[cq]s
state object.
.PP
These methods and their corresponding events can be used to add data to
the history stack which can be used to reconstruct a dynamically
generated page, or to otherwise alter the state of the content being
presented while remaining on the same \f[CR]Document\f[R].
.PP
Note that just calling \f[CR]history.pushState()\f[R] or
\f[CR]history.replaceState()\f[R] won\[cq]t trigger a
\f[CR]popstate\f[R] event.
The \f[CR]popstate\f[R] event will be triggered by doing a browser
action such as a click on the back or forward button (or calling
\f[CR]history.back()\f[R] or \f[CR]history.forward()\f[R] in
JavaScript).
.PP
Browsers tend to handle the \f[CR]popstate\f[R] event differently on
page load.
Chrome (prior to v34) and Safari always emit a \f[CR]popstate\f[R] event
on page load, but Firefox doesn\[cq]t.
.RS
.PP
\f[B]Note:\f[R] When writing functions that process \f[CR]popstate\f[R]
event it is important to take into account that properties like
\f[CR]window.location\f[R] will already reflect the state change (if it
affected the current URL), but \f[CR]document\f[R] might still not.
If the goal is to catch the moment when the new document state is
already fully in place, a zero\-delay \f[CR]setTimeout()\f[R] method
call should be used to effectively put its inner \f[I]callback\f[R]
function that does the processing at the end of the browser event loop:
\f[CR]window.onpopstate = () => setTimeout(doSomeThing, 0);\f[R]
.RE
.SH WHEN POPSTATE IS SENT
It\[cq]s important to first understand that \[em] to combat unwanted
pop\-ups \[em] browsers may not fire the \f[CR]popstate\f[R] event at
all unless the page has been interacted with.
.PP
This section describes the steps that browsers follow in the cases where
they \f[I]do\f[R] potentially fire the \f[CR]popstate\f[R] event (that
is, in the cases where the page has been interacted with).
.PP
When a navigation occurs \[em] either due to the user triggering the
browser\[cq]s Back button or otherwise \[em] the \f[CR]popstate\f[R]
event is near the end of the process to navigate to the new location.
It happens after the new location has loaded (if needed), displayed,
made visible, and so on \[em] after the \f[CR]pageshow\f[R] event is
sent, but before the persisted user state information is restored and
the \f[CR]hashchange\f[R] event is sent.
.PP
To better understand when the \f[CR]popstate\f[R] event is fired,
consider this simplified sequence of events that occurs when the current
history entry changes due to either the user navigating the site or the
history being traversed programmatically.
Here, the transition is changing the current history entry to one
we\[cq]ll refer to as \f[B]new\-entry\f[R].
The current page\[cq]s session history stack entry will be referred to
as \f[B]current\-entry\f[R].
.IP " 1." 4
If \f[B]new\-entry\f[R] doesn\[cq]t currently contain an existing
\f[CR]Document\f[R], fetch the content and create its
\f[CR]Document\f[R] before continuing.
This will eventually send events such as \f[CR]DOMContentLoaded\f[R] and
\f[CR]load\f[R] to the \f[CR]Window\f[R] containing the document, but
the steps below will continue to execute in the meantime.
.IP " 2." 4
If \f[B]current\-entry\f[R]\[cq]s title wasn\[cq]t set using one of the
History API methods (\f[CR]pushState()\f[R] or
\f[CR]replaceState()\f[R]), set the entry\[cq]s title to the string
returned by its \f[CR]document.title\f[R] attribute.
.IP " 3." 4
If the browser has state information it wishes to store with the
\f[B]current\-entry\f[R] before navigating away from it, it then does
so.
The entry is now said to have \[lq]persisted user state.\[rq] This
information the browser might add to the history session entry may
include, for instance, the document\[cq]s scroll position, the values of
form inputs, and other such data.
.IP " 4." 4
If \f[B]new\-entry\f[R] has a different \f[CR]Document\f[R] object than
\f[B]current\-entry\f[R], the browsing context is updated so that its
\f[CR]document\f[R] property refers to the document referred to by
\f[B]new\-entry\f[R], and the context\[cq]s name is updated to match the
context name of the now\-current document.
.IP " 5." 4
Each form control within \f[B]new\-entry\f[R]\[cq]s \f[CR]Document\f[R]
that has \f[CR]autocomplete\f[R] configured with its autofill field name
set to \f[CR]off\f[R] is reset.
See The HTML autocomplete attribute for more about the autocomplete
field names and how autocomplete works.
.IP " 6." 4
If \f[B]new\-entry\f[R]\[cq]s document is already fully loaded and
ready\[em]that is, its \f[CR]readyState\f[R] is
\f[CR]complete\f[R]\[em]and the document is not already visible,
it\[cq]s made visible and the \f[CR]pageshow\f[R] event is fired at the
document with the \f[CR]PageTransitionEvent\f[R]\[cq]s
\f[CR]persisted\f[R] attribute set to \f[CR]true\f[R].
.IP " 7." 4
The document\[cq]s \f[CR]URL\f[R] is set to that of
\f[B]new\-entry\f[R].
.IP " 8." 4
If the history traversal is being performed with replacement enabled,
the entry immediately prior to the destination entry (taking into
account the \f[CR]delta\f[R] parameter on methods such as
\f[CR]go()\f[R]) is removed from the history stack.
.IP " 9." 4
If the \f[B]new\-entry\f[R] doesn\[cq]t have persisted user state and
its URL\[cq]s fragment is non\-\f[CR]null\f[R], the document is scrolled
to that fragment.
.IP "10." 4
Next, \f[B]current\-entry\f[R] is set to \f[B]new\-entry\f[R].
The destination entry is now considered to be current.
.IP "11." 4
If \f[B]new\-entry\f[R] has serialized state information saved with it,
that information is deserialized into \f[CR]History.state\f[R];
otherwise, \f[CR]state\f[R] is \f[CR]null\f[R].
.IP "12." 4
If the value of \f[CR]state\f[R] changed, the \f[CR]popstate\f[R] event
is sent to the document.
.IP "13." 4
Any persisted user state is restored, if the browser chooses to do so.
.IP "14." 4
If the original and new entries shared the same document, but had
different fragments in their URLs, send the \f[CR]hashchange\f[R] event
to the window.
.PP
As you can see, the \f[CR]popstate\f[R] event is nearly the last thing
done in the process of navigating pages in this way.
.SH EXAMPLES
A page at \f[CR]http://example.com/example.html\f[R] running the
following code will generate logs as indicated:
.IP
.EX
window.addEventListener(\[dq]popstate\[dq], (event) \f[B]=>\f[R] {
  console.log(
    \[ga]location: ${document.location}, state: ${JSON.stringify(event.state)}\[ga],
  );
});
history.pushState({ page: 1 }, \[dq]title 1\[dq], \[dq]?page=1\[dq]);
history.pushState({ page: 2 }, \[dq]title 2\[dq], \[dq]?page=2\[dq]);
history.replaceState({ page: 3 }, \[dq]title 3\[dq], \[dq]?page=3\[dq]);
history.back(); \f[I]// Logs \[dq]location: http://example.com/example.html?page=1, state: {\[dq]page\[dq]:1}\[dq]\f[R]
history.back(); \f[I]// Logs \[dq]location: http://example.com/example.html, state: null\[dq]\f[R]
history.go(2); \f[I]// Logs \[dq]location: http://example.com/example.html?page=3, state: {\[dq]page\[dq]:3}\[dq]\f[R]
.EE
.PP
The same example using the \f[CR]onpopstate\f[R] event handler property:
.IP
.EX
window.onpopstate = (event) \f[B]=>\f[R] {
  console.log(
    \[ga]location: ${document.location}, state: ${JSON.stringify(event.state)}\[ga],
  );
};
history.pushState({ page: 1 }, \[dq]title 1\[dq], \[dq]?page=1\[dq]);
history.pushState({ page: 2 }, \[dq]title 2\[dq], \[dq]?page=2\[dq]);
history.replaceState({ page: 3 }, \[dq]title 3\[dq], \[dq]?page=3\[dq]);
history.back(); \f[I]// Logs \[dq]location: http://example.com/example.html?page=1, state: {\[dq]page\[dq]:1}\[dq]\f[R]
history.back(); \f[I]// Logs \[dq]location: http://example.com/example.html, state: null\[dq]\f[R]
history.go(2); \f[I]// Logs \[dq]location: http://example.com/example.html?page=3, state: {\[dq]page\[dq]:3}\[dq]\f[R]
.EE
.PP
Note that even though the original history entry (for
\f[CR]http://example.com/example.html\f[R]) has no state object
associated with it, a \f[CR]popstate\f[R] event is still fired when we
activate that entry after the second call to \f[CR]history.back()\f[R].
.SH SEE ALSO
.IP \[bu] 2
Manipulating the browser history (the History API)
.IP \[bu] 2
Window: \f[CR]hashchange\f[R] event
