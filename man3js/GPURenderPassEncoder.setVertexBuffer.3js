.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERPASSENCODER.SETVERTEXBUFFER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderPassEncoder.setVertexBuffer \- GPURenderPassEncoder:
setVertexBuffer() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]setVertexBuffer()\f[B]\f[R] method of the
\f[CR]GPURenderPassEncoder\f[R] interface sets or unsets the current
\f[CR]GPUBuffer\f[R] for the given slot that will provide vertex data
for subsequent drawing commands.
.SH SYNTAX
.IP
.EX
setVertexBuffer(slot, buffer, offset, size)
.EE
.SS Parameters
.TP
\f[B]slot\f[R]
A number referencing the vertex buffer slot to set the vertex buffer
for.
.TP
\f[B]buffer\f[R]
A \f[CR]GPUBuffer\f[R] representing the buffer containing the vertex
data to use for subsequent drawing commands, or \f[CR]null\f[R], in
which case any previously\-set buffer in the given slot is unset.
.TP
\f[B]offset\f[R] \f[I](optional)\f[R]
A number representing the offset, in bytes, into \f[CR]buffer\f[R] where
the vertex data begins.
If omitted, \f[CR]offset\f[R] defaults to 0.
.TP
\f[B]size\f[R] \f[I](optional)\f[R]
A number representing the size, in bytes, of the vertex data contained
in \f[CR]buffer\f[R].
If omitted, \f[CR]size\f[R] defaults to the \f[CR]buffer\f[R]\(cqs
\f[CR]GPUBuffer.size\f[R] \- \f[CR]offset\f[R].
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]setVertexBuffer()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the
\f[CR]GPURenderPassEncoder\f[R] becomes invalid:
.IP \(bu 2
\f[CR]buffer\f[R]\(cqs \f[CR]GPUBuffer.usage\f[R] contains the
\f[CR]GPUBufferUsage.VERTEX\f[R] flag.
.IP \(bu 2
\f[CR]slot\f[R] is less than the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]maxVertexBuffers\f[R] limit.
.IP \(bu 2
\f[CR]offset\f[R] + \f[CR]size\f[R] is less than or equal to the
\f[CR]buffer\f[R]\(cqs \f[CR]GPUBuffer.size\f[R].
.IP \(bu 2
\f[CR]offset\f[R] is a multiple of 4.
.SH EXAMPLES
.SS Set vertex buffer
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, several commands are recorded via a \f[CR]GPUCommandEncoder\f[R].
Most of these commands originate from the
\f[CR]GPURenderPassEncoder\f[R] created via
\f[CR]GPUCommandEncoder.beginRenderPass()\f[R].
\f[CR]setVertexBuffer()\f[R] is used as appropriate to set the source of
vertex data.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] renderPipeline = device.createRenderPipeline(pipelineDescriptor);

\f[I]// Create GPUCommandEncoder to issue commands to the GPU\f[R]
\f[I]// Note: render pass descriptor, command encoder, etc. are destroyed after use, fresh one needed for each frame.\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Create GPURenderPassDescriptor to tell WebGPU which texture to draw into, then initiate render pass\f[R]
\f[B]const\f[R] renderPassDescriptor = {
  colorAttachments: [
    {
      clearValue: clearColor,
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
      view: context.getCurrentTexture().createView(),
    },
  ],
};

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// Draw the triangle\f[R]
passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.draw(3);

\f[I]// End the render pass\f[R]
passEncoder.end();

\f[I]// End frame by passing array of command buffers to command queue for execution\f[R]
device.queue.submit([commandEncoder.finish()]);

\f[I]// \&...\f[R]
.EE
.SS Unset vertex buffer
.IP
.EX
\f[I]// Set vertex buffer in slot 0\f[R]
passEncoder.setVertexBuffer(0, vertexBuffer);

\f[I]// Later, unset vertex buffer in slot 0\f[R]
passEncoder.setVertexBuffer(0, \f[B]null\f[R]);
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
