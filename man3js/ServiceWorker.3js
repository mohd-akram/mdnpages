.\" Automatically generated by Pandoc 3.4
.\"
.TH "ServiceWorker" "JS" "November 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorker \- ServiceWorker
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]ServiceWorker\f[B]\f[R] interface of the Service Worker
API provides a reference to a service worker.
Multiple browsing contexts (e.g.\ pages, workers, etc.)
can be associated with the same service worker, each through a unique
\f[CR]ServiceWorker\f[R] object.
.PP
A \f[CR]ServiceWorker\f[R] object is available via a number of
properties:
.IP \[bu] 2
\f[CR]ServiceWorkerRegistration.active\f[R]
.IP \[bu] 2
\f[CR]ServiceWorkerGlobalScope.serviceWorker\f[R]
.IP \[bu] 2
\f[CR]ServiceWorkerContainer.controller\f[R] \[em] when the service
worker is in \f[CR]activating\f[R] or \f[CR]activated\f[R] state
.IP \[bu] 2
\f[CR]ServiceWorkerRegistration.installing\f[R] \[em] when the service
worker is in \f[CR]installing\f[R] state
.IP \[bu] 2
\f[CR]ServiceWorkerRegistration.waiting\f[R] \[em] when the service
worker is in \f[CR]installed\f[R] state
.PP
The \f[CR]ServiceWorker.state\f[R] property and \f[CR]statechanged\f[R]
event can be used to check and observe changes in the lifecycle\-state
of the object\[cq]s associated service worker.
Related lifecycle events, such as \f[CR]install\f[R] and
\f[CR]activate\f[R] are fired at the service worker itself.
.PP
Service workers allow static import of ECMAScript modules, if supported,
using \f[CR]import\f[R].
Dynamic import is disallowed by the specification \[em] calling
\f[CR]import()\f[R] will throw.
.PP
Service workers can only be registered in the Window scope in some or
all browsers, because the \f[CR]ServiceWorker\f[R] object is not exposed
to \f[CR]DedicatedWorkerGlobalScope\f[R] and
\f[CR]SharedWorkerGlobalScope\f[R].
Check the browser compatibility for information.
.SH INSTANCE PROPERTIES
\f[I]The \f[CI]ServiceWorker\f[I] interface inherits properties from its
parent, \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]ServiceWorker.scriptURL\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]ServiceWorker\f[R] serialized script URL defined as
part of \f[CR]ServiceWorkerRegistration\f[R].
The URL must be on the same origin as the document that registers the
\f[CR]ServiceWorker\f[R].
.TP
\f[B]ServiceWorker.state\f[R] \f[I](read\-only)\f[R]
Returns the state of the service worker.
It returns one of the following values: \f[CR]parsed\f[R],
\f[CR]installing\f[R], \f[CR]installed\f[R], \f[CR]activating\f[R],
\f[CR]activated\f[R], or \f[CR]redundant\f[R].
.SH INSTANCE METHODS
\f[I]The \f[CI]ServiceWorker\f[I] interface inherits methods from its
parent, \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]ServiceWorker.postMessage()\f[R]
Sends a message \[em] consisting of any structured\-cloneable JavaScript
object \[em] to the service worker.
The message is transmitted to the service worker using a
\f[CR]message\f[R] event on its global scope.
.SH EVENTS
.TP
\f[B]statechange\f[R]
Fired when \f[CR]ServiceWorker.state\f[R] changes.
.TP
\f[B]error\f[R]
Fired when an error happens inside the \f[CR]ServiceWorker\f[R] object.
.SH EXAMPLES
This code snippet is from the \c
.UR https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/registration-events/index.html
service worker registration\-events sample
.UE \c
\ (\c
.UR https://googlechrome.github.io/samples/service-worker/registration-events/
live demo
.UE \c
).
The code listens for any change in the \f[CR]ServiceWorker.state\f[R]
and returns its value.
.IP
.EX
\f[B]if\f[R] (\[dq]serviceWorker\[dq] \f[B]in\f[R] navigator) {
  navigator.serviceWorker
    .register(\[dq]service\-worker.js\[dq], {
      scope: \[dq]./\[dq],
    })
    .then((registration) \f[B]=>\f[R] {
      \f[B]let\f[R] serviceWorker;
      \f[B]if\f[R] (registration.installing) {
        serviceWorker = registration.installing;
        document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]installing\[dq];
      } \f[B]else\f[R] \f[B]if\f[R] (registration.waiting) {
        serviceWorker = registration.waiting;
        document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]waiting\[dq];
      } \f[B]else\f[R] \f[B]if\f[R] (registration.active) {
        serviceWorker = registration.active;
        document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]active\[dq];
      }
      \f[B]if\f[R] (serviceWorker) {
        \f[I]// logState(serviceWorker.state);\f[R]
        serviceWorker.addEventListener(\[dq]statechange\[dq], (e) \f[B]=>\f[R] {
          \f[I]// logState(e.target.state);\f[R]
        });
      }
    })
    .catch((error) \f[B]=>\f[R] {
      \f[I]// Something went wrong during registration. The service\-worker.js file\f[R]
      \f[I]// might be unavailable or contain a syntax error.\f[R]
    });
} \f[B]else\f[R] {
  \f[I]// The current browser doesn\[aq]t support service workers.\f[R]
  \f[I]// Perhaps it is too old or we are not in a Secure Context.\f[R]
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://web.dev/articles/offline-cookbook
The Offline Cookbook
.UE \c
\ (service workers)
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service worker basic code example
.UE \c
.IP \[bu] 2
Using web workers
