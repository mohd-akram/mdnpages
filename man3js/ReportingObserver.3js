.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REPORTINGOBSERVER" "3JS" "October 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReportingObserver \- ReportingObserver
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[CR]ReportingObserver\f[R] interface of the Reporting API allows
you to collect and access reports.
.SH CONSTRUCTOR
.TP
\f[B]ReportingObserver()\f[R]
Creates a new \f[CR]ReportingObserver\f[R] object instance, which can be
used to collect and access reports.
.SH INSTANCE PROPERTIES
\f[I]This interface has no properties defined on it.\f[R]
.SH INSTANCE METHODS
.TP
\f[B]ReportingObserver.disconnect()\f[R]
Stops a reporting observer that had previously started observing from
collecting reports.
.TP
\f[B]ReportingObserver.observe()\f[R]
Instructs a reporting observer to start collecting reports in its report
queue.
.TP
\f[B]ReportingObserver.takeRecords()\f[R]
Returns the current list of reports contained in the observer\(cqs
report queue, and empties the queue.
.SH EVENTS
\f[I]This interface has no events that fire on it.\f[R]
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/reporting-api/deprecation_report.html
deprecation_report.html
.UE \c
\ example, we create a simple reporting observer to observe usage of
deprecated features on our web page:
.IP
.EX
\f[B]const\f[R] options = {
  types: [\(dqdeprecation\(dq],
  buffered: \f[B]true\f[R],
};

\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver((reports, observer) \f[B]=>\f[R] {
  reportBtn.onclick = () \f[B]=>\f[R] displayReports(reports);
}, options);
.EE
.PP
We then tell it to start observing reports using
\f[CR]ReportingObserver.observe()\f[R]; this tells the observer to start
collecting reports in its report queue, and runs the callback function
specified inside the constructor:
.IP
.EX
observer.observe();
.EE
.PP
Later on in the example we deliberately use the deprecated version of
\f[CR]MediaDevices.getUserMedia()\f[R]:
.IP
.EX
\f[B]if\f[R] (navigator.mozGetUserMedia) {
  navigator.mozGetUserMedia(constraints, success, failure);
} \f[B]else\f[R] {
  navigator.getUserMedia(constraints, success, failure);
}
.EE
.PP
This causes a deprecation report to be generated; because of the event
handler we set up inside the \f[CR]ReportingObserver()\f[R] constructor,
we can now click the button to display the report details.
[IMAGE: image of a jolly bearded man with various stats displayed below
it about a deprecated feature]
image of a jolly bearded man with various stats displayed below it about
a deprecated feature
.RS
.PP
\f[B]Note:\f[R] If you look at the \c
.UR https://github.com/mdn/dom-examples/blob/main/reporting-api/deprecation_report.html
complete source code
.UE \c
, you\(cqll notice that we actually call the deprecated
\f[CR]getUserMedia()\f[R] method twice.
After the first time we call \f[CR]ReportingObserver.takeRecords()\f[R],
which returns the first generated report and empties the queue.
Because of this, when the button is pressed only the second report is
listed.
.RE
.SH SEE ALSO
.IP \(bu 2
Reporting API
