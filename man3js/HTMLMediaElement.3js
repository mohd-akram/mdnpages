.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HTMLMEDIAELEMENT" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLMediaElement \- HTMLMediaElement
.SH SYNOPSIS
The \f[B]\f[CB]HTMLMediaElement\f[B]\f[R] interface adds to
\f[CR]HTMLElement\f[R] the properties and methods needed to support
basic media\-related capabilities that are common to audio and video.
.PP
The \f[CR]HTMLVideoElement\f[R] and \f[CR]HTMLAudioElement\f[R] elements
both inherit this interface.
.SH INSTANCE PROPERTIES
\f[I]This interface also inherits properties from its ancestors
\f[CI]HTMLElement\f[I], \f[CI]Element\f[I], \f[CI]Node\f[I], and
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]HTMLMediaElement.audioTracks\f[R]
An \f[CR]AudioTrackList\f[R] that lists the \f[CR]AudioTrack\f[R]
objects contained in the element.
.TP
\f[B]HTMLMediaElement.autoplay\f[R]
A boolean value that reflects the \f[CR]autoplay\f[R] HTML attribute,
indicating whether playback should automatically begin as soon as enough
media is available to do so without interruption.
.RS
.RS
.PP
\f[B]Note:\f[R] Automatically playing audio when the user doesn\(cqt
expect or desire it is a poor user experience and should be avoided in
most cases, though there are exceptions.
See the Autoplay guide for media and Web Audio APIs for more
information.
Keep in mind that browsers may ignore autoplay requests, so you should
ensure that your code isn\(cqt dependent on autoplay working.
.RE
.RE
.TP
\f[B]HTMLMediaElement.buffered\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]TimeRanges\f[R] object that indicates the ranges of the
media source that the browser has buffered (if any) at the moment the
\f[CR]buffered\f[R] property is accessed.
.TP
\f[B]HTMLMediaElement.controls\f[R]
A boolean that reflects the \f[CR]controls\f[R] HTML attribute,
indicating whether user interface items for controlling the resource
should be displayed.
.TP
\f[B]HTMLMediaElement.controlsList\f[R]
Returns a \f[CR]DOMTokenList\f[R] that helps the user agent select what
controls to show on the media element whenever the user agent shows its
own set of controls.
The \f[CR]DOMTokenList\f[R] takes one or more of three possible values:
\f[CR]nodownload\f[R], \f[CR]nofullscreen\f[R], and
\f[CR]noremoteplayback\f[R].
.TP
\f[B]HTMLMediaElement.crossOrigin\f[R]
A string indicating the CORS setting for this media element.
.TP
\f[B]HTMLMediaElement.currentSrc\f[R] \f[I](read\-only)\f[R]
Returns a string with the absolute URL of the chosen media resource.
.TP
\f[B]HTMLMediaElement.currentTime\f[R]
A double\-precision floating\-point value indicating the current
playback time in seconds; if the media has not started to play and has
not been seeked, this value is the media\(cqs initial playback time.
Setting this value seeks the media to the new time.
The time is specified relative to the media\(cqs timeline.
.TP
\f[B]HTMLMediaElement.defaultMuted\f[R]
A boolean that reflects the \f[CR]muted\f[R] HTML attribute, which
indicates whether the media element\(cqs audio output should be muted by
default.
.TP
\f[B]HTMLMediaElement.defaultPlaybackRate\f[R]
A \f[CR]double\f[R] indicating the default playback rate for the media.
.TP
\f[B]HTMLMediaElement.disableRemotePlayback\f[R]
A boolean that sets or returns the remote playback state, indicating
whether the media element is allowed to have a remote playback UI.
.TP
\f[B]HTMLMediaElement.duration\f[R] \f[I](read\-only)\f[R]
A read\-only double\-precision floating\-point value indicating the
total duration of the media in seconds.
If no media data is available, the returned value is \f[CR]NaN\f[R].
If the media is of indefinite length (such as streamed live media, a
WebRTC call\(cqs media, or similar), the value is \f[CR]+Infinity\f[R].
.TP
\f[B]HTMLMediaElement.ended\f[R] \f[I](read\-only)\f[R]
Returns a boolean that indicates whether the media element has finished
playing.
.TP
\f[B]HTMLMediaElement.error\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]MediaError\f[R] object for the most recent error, or
\f[CR]null\f[R] if there has not been an error.
.TP
\f[B]HTMLMediaElement.loop\f[R]
A boolean that reflects the \f[CR]loop\f[R] HTML attribute, which
indicates whether the media element should start over when it reaches
the end.
.TP
\f[B]HTMLMediaElement.mediaKeys\f[R] \f[I](read\-only)\f[R] \f[I](secure context)\f[R]
Returns a \f[CR]MediaKeys\f[R] object, that is a set of keys that the
element can use for decryption of media data during playback.
If no key is available, it can be \f[CR]null\f[R].
.TP
\f[B]HTMLMediaElement.muted\f[R]
A boolean that determines whether audio is muted.
\f[CR]true\f[R] if the audio is muted and \f[CR]false\f[R] otherwise.
.TP
\f[B]HTMLMediaElement.networkState\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]unsigned short\f[R] (enumeration) indicating the current
state of fetching the media over the network.
.TP
\f[B]HTMLMediaElement.paused\f[R] \f[I](read\-only)\f[R]
Returns a boolean that indicates whether the media element is paused.
.TP
\f[B]HTMLMediaElement.playbackRate\f[R]
A \f[CR]double\f[R] that indicates the rate at which the media is being
played back.
.TP
\f[B]HTMLMediaElement.played\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]TimeRanges\f[R] object that contains the ranges of the
media source that the browser has played, if any.
.TP
\f[B]HTMLMediaElement.preload\f[R]
A string that reflects the \f[CR]preload\f[R] HTML attribute, indicating
what data should be preloaded, if any.
Possible values are: \f[CR]none\f[R], \f[CR]metadata\f[R],
\f[CR]auto\f[R].
.TP
\f[B]HTMLMediaElement.preservesPitch\f[R]
A boolean value that determines if the pitch of the sound will be
preserved.
If set to \f[CR]false\f[R], the pitch will adjust to the speed of the
audio.
.TP
\f[B]HTMLMediaElement.readyState\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]unsigned short\f[R] (enumeration) indicating the
readiness state of the media.
.TP
\f[B]HTMLMediaElement.remote\f[R] \f[I](read\-only)\f[R]
Return a \f[CR]RemotePlayback\f[R] object instance associated with the
media element.
.TP
\f[B]HTMLMediaElement.seekable\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]TimeRanges\f[R] object that contains the time ranges
that the user is able to seek to, if any.
.TP
\f[B]HTMLMediaElement.seeking\f[R] \f[I](read\-only)\f[R]
Returns a boolean that indicates whether the media is in the process of
seeking to a new position.
.TP
\f[B]HTMLMediaElement.sinkId\f[R] \f[I](read\-only)\f[R] \f[I](secure context)\f[R]
Returns a string that is the unique ID of the audio device delivering
output, or an empty string if the user agent default audio device is
being used.
.TP
\f[B]HTMLMediaElement.src\f[R]
A string that reflects the \f[CR]src\f[R] HTML attribute, which contains
the URL of a media resource to use.
.TP
\f[B]HTMLMediaElement.srcObject\f[R]
An object which serves as the source of the media associated with the
\f[CR]HTMLMediaElement\f[R], or \f[CR]null\f[R] if not assigned.
.TP
\f[B]HTMLMediaElement.textTracks\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]TextTrackList\f[R] object containing the list of
\f[CR]TextTrack\f[R] objects contained in the element.
.TP
\f[B]HTMLMediaElement.videoTracks\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]VideoTrackList\f[R] object containing the list of
\f[CR]VideoTrack\f[R] objects contained in the element.
.TP
\f[B]HTMLMediaElement.volume\f[R]
A \f[CR]double\f[R] indicating the audio volume, from 0.0 (silent) to
1.0 (loudest).
.SH OBSOLETE PROPERTIES
These properties are obsolete and should not be used, even if a browser
still supports them.
.TP
\f[B]HTMLMediaElement.controller\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
A \f[CR]MediaController\f[R] object that represents the media controller
assigned to the element, or \f[CR]null\f[R] if none is assigned.
.TP
\f[B]HTMLMediaElement.mediaGroup\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
A string that reflects the \f[CR]mediagroup\f[R] HTML attribute, which
indicates the name of the group of elements it belongs to.
A group of media elements shares a common \f[CR]MediaController\f[R].
.TP
\f[B]HTMLMediaElement.mozAudioCaptured\f[R] \f[I](read\-only)\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Returns a boolean.
Related to audio stream capture.
.TP
\f[B]HTMLMediaElement.mozFragmentEnd\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
A \f[CR]double\f[R] that provides access to the fragment end time if the
media element has a fragment URI for \f[CR]currentSrc\f[R], otherwise it
is equal to the media duration.
.SH INSTANCE METHODS
\f[I]This interface also inherits methods from its ancestors
\f[CI]HTMLElement\f[I], \f[CI]Element\f[I], \f[CI]Node\f[I], and
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]HTMLMediaElement.addTextTrack()\f[R]
Adds a new \f[CR]TextTrack\f[R] object (such as a track for subtitles)
to a media element.
This is a programmatic interface only and does not affect the DOM.
.TP
\f[B]HTMLMediaElement.captureStream()\f[R]
Returns \f[CR]MediaStream\f[R], captures a stream of the media content.
.TP
\f[B]HTMLMediaElement.canPlayType()\f[R]
Given a string specifying a MIME media type (potentially with the
\f[CR]codecs\f[R] parameter included), \f[CR]canPlayType()\f[R] returns
the string \f[CR]probably\f[R] if the media should be playable,
\f[CR]maybe\f[R] if there\(cqs not enough information to determine
whether the media will play or not, or an empty string if the media
cannot be played.
.TP
\f[B]HTMLMediaElement.fastSeek()\f[R]
Quickly seeks to the given time with low precision.
.TP
\f[B]HTMLMediaElement.load()\f[R]
Resets the media to the beginning and selects the best available source
from the sources provided using the \f[CR]src\f[R] attribute or the
\f[CR]<source>\f[R] element.
.TP
\f[B]HTMLMediaElement.pause()\f[R]
Pauses the media playback.
.TP
\f[B]HTMLMediaElement.play()\f[R]
Begins playback of the media.
.TP
\f[B]HTMLMediaElement.seekToNextFrame()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Seeks to the next frame in the media.
This non\-standard, experimental method makes it possible to manually
drive reading and rendering of media at a custom speed, or to move
through the media frame\-by\-frame to perform filtering or other
operations.
.TP
\f[B]HTMLMediaElement.setMediaKeys()\f[R] \f[I](secure context)\f[R]
Returns \f[CR]Promise\f[R].
Sets the \f[CR]MediaKeys\f[R] keys to use when decrypting media during
playback.
.TP
\f[B]HTMLMediaElement.setSinkId()\f[R] \f[I](secure context)\f[R]
Sets the ID of the audio device to use for output and returns a
\f[CR]Promise\f[R].
This only works when the application is authorized to use the specified
device.
.SH OBSOLETE METHODS
\f[I]These methods are obsolete and should not be used, even if a
browser still supports them.\f[R]
.TP
\f[B]HTMLMediaElement.mozCaptureStream()\f[R] \f[I](non\-standard)\f[R]
The Firefox\-prefixed equivalent of
\f[CR]HTMLMediaElement.captureStream()\f[R].
See its browser compatibility for details.
.TP
\f[B]HTMLMediaElement.mozCaptureStreamUntilEnded()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
[enter description]
.TP
\f[B]HTMLMediaElement.mozGetMetadata()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Returns \f[CR]Object\f[R], which contains properties that represent
metadata from the playing media resource as \f[CR]{key: value}\f[R]
pairs.
A separate copy of the data is returned each time the method is called.
This method must be called after the \f[CR]loadedmetadata\f[R] event
fires.
.SH EVENTS
\f[I]Inherits events from its parent, \f[CI]HTMLElement\f[I]\f[R].
.PP
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]abort\f[R]
Fired when the resource was not fully loaded, but not as the result of
an error.
.TP
\f[B]canplay\f[R]
Fired when the user agent can play the media, but estimates that
\f[B]not\f[R] enough data has been loaded to play the media up to its
end without having to stop for further buffering of content.
.TP
\f[B]canplaythrough\f[R]
Fired when the user agent can play the media, and estimates that enough
data has been loaded to play the media up to its end without having to
stop for further buffering of content.
.TP
\f[B]durationchange\f[R]
Fired when the duration property has been updated.
.TP
\f[B]emptied\f[R]
Fired when the media has become empty; for example, when the media has
already been loaded (or partially loaded), and the
\f[CR]HTMLMediaElement.load()\f[R] method is called to reload it.
.TP
\f[B]encrypted\f[R]
Fired when initialization data is found in the media that indicates the
media is encrypted.
.TP
\f[B]ended\f[R]
Fired when playback stops when end of the media (<audio> or <video>) is
reached or because no further data is available.
.TP
\f[B]error\f[R]
Fired when the resource could not be loaded due to an error.
.TP
\f[B]loadeddata\f[R]
Fired when the first frame of the media has finished loading.
.TP
\f[B]loadedmetadata\f[R]
Fired when the metadata has been loaded.
.TP
\f[B]loadstart\f[R]
Fired when the browser has started to load a resource.
.TP
\f[B]pause\f[R]
Fired when a request to pause play is handled and the activity has
entered its paused state, most commonly occurring when the media\(cqs
\f[CR]HTMLMediaElement.pause()\f[R] method is called.
.TP
\f[B]play\f[R]
Fired when the \f[CR]paused\f[R] property is changed from
\f[CR]true\f[R] to \f[CR]false\f[R], as a result of the
\f[CR]HTMLMediaElement.play()\f[R] method, or the \f[CR]autoplay\f[R]
attribute.
.TP
\f[B]playing\f[R]
Fired when playback is ready to start after having been paused or
delayed due to lack of data.
.TP
\f[B]progress\f[R]
Fired periodically as the browser loads a resource.
.TP
\f[B]ratechange\f[R]
Fired when the playback rate has changed.
.TP
\f[B]seeked\f[R]
Fired when a seek operation completes.
.TP
\f[B]seeking\f[R]
Fired when a seek operation begins.
.TP
\f[B]stalled\f[R]
Fired when the user agent is trying to fetch media data, but data is
unexpectedly not forthcoming.
.TP
\f[B]suspend\f[R]
Fired when the media data loading has been suspended.
.TP
\f[B]timeupdate\f[R]
Fired when the time indicated by the \f[CR]currentTime\f[R] property has
been updated.
.TP
\f[B]volumechange\f[R]
Fired when the volume has changed.
.TP
\f[B]waiting\f[R]
Fired when playback has stopped because of a temporary lack of data.
.TP
\f[B]waitingforkey\f[R]
Fired when playback is first blocked while waiting for a key.
.SH SEE ALSO
.SS References
.IP \(bu 2
\f[CR]<video>\f[R] and \f[CR]<audio>\f[R] HTML elements
.IP \(bu 2
\f[CR]HTMLVideoElement\f[R] and \f[CR]HTMLAudioElement\f[R] interfaces,
derived from \f[CR]HTMLMediaElement\f[R]
.SS Guides
.IP \(bu 2
Web media technologies
.IP \(bu 2
Learning area: HTML video and audio
.IP \(bu 2
Media type and format guide
.IP \(bu 2
Handling media support issues in web content
