.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "EXTENDABLECOOKIECHANGEEVENT" "3JS" "June 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ExtendableCookieChangeEvent \- ExtendableCookieChangeEvent
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
The \f[B]\f[CB]ExtendableCookieChangeEvent\f[B]\f[R] interface of the
Cookie Store API is the event type passed to \f[CR]cookiechange\f[R]
event fired at the \f[CR]ServiceWorkerGlobalScope\f[R] when any cookie
changes occur which match the service worker\(cqs cookie change
subscription list.
A cookie change event consists of a cookie and a type (either
\(lqchanged\(rq or \(lqdeleted\(rq).
.PP
Cookie changes that cause the \f[CR]ExtendableCookieChangeEvent\f[R] to
be dispatched are:
.IP \(bu 2
A cookie is newly created and not immediately removed, or if a cookies
is replaced.
In this case \f[CR]type\f[R] is \(lqchanged\(rq.
.IP \(bu 2
A cookie is newly created and immediately removed.
In this case \f[CR]type\f[R] is \(lqdeleted\(rq
.IP \(bu 2
A cookie is removed.
In this case \f[CR]type\f[R] is \(lqdeleted\(rq.
.SH CONSTRUCTOR
.TP
\f[B]ExtendableCookieChangeEvent()\f[R]
Creates a new \f[CR]ExtendableCookieChangeEvent\f[R].
.SH INSTANCE PROPERTIES
\f[I]This interface also inherits properties from
\f[CI]ExtendableEvent\f[I].\f[R]
.TP
\f[B]ExtendableCookieChangeEvent.changed\f[R] \f[I](read\-only)\f[R]
Returns an array containing the changed cookies.
.TP
\f[B]ExtendableCookieChangeEvent.deleted\f[R] \f[I](read\-only)\f[R]
Returns an array containing the deleted cookies.
.SH INSTANCE METHODS
\f[I]This interface also inherits methods from
\f[CI]ExtendableEvent\f[I].\f[R]
.SH EXAMPLES
In the below example, we use
\f[CR]CookieStoreManager.getSubscriptions()\f[R] to get a list of
existing subscriptions.
(In service workers, a subscription is required in order to listen for
events.)
We unsubscribe from existing subscriptions using
\f[CR]CookieStoreManager.unsubscribe()\f[R], then subscribe to the
cookie with a name of `COOKIE_NAME' using
\f[CR]CookieStoreManager.subscribe()\f[R].
If that cookie is changed, the event listener logs the event to the
console.
This will be an \f[CR]ExtendableCookieChangeEvent\f[R] object, with the
\f[CR]changed\f[R] or \f[CR]deleted\f[R] property containing the
modified cookie.
.IP
.EX
self.addEventListener(\(dqactivate\(dq, (event) \f[B]=>\f[R] {
  event.waitUntil(\f[B]async\f[R] () \f[B]=>\f[R] {
    \f[B]const\f[R] subscriptions = \f[B]await\f[R] self.registration.cookies.getSubscriptions();

    \f[B]await\f[R] self.registration.cookies.unsubscribe(subscriptions);

    \f[B]await\f[R] self.registration.cookies.subscribe([
      {
        name: \(dqCOOKIE_NAME\(dq,
      },
    ]);
  });
});

self.addEventListener(\(dqcookiechange\(dq, (event) \f[B]=>\f[R] {
  console.log(event);
});
.EE
