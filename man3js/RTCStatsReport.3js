'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RTCSTATSREPORT" "3JS" "May 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCStatsReport \- RTCStatsReport
.SH SYNOPSIS
The \f[B]\f[CB]RTCStatsReport\f[B]\f[R] interface of the WebRTC API
provides a statistics report for a \f[CR]RTCPeerConnection\f[R],
\f[CR]RTCRtpSender\f[R], or \f[CR]RTCRtpReceiver\f[R].
.PP
An \f[CR]RTCStatsReport\f[R] instance is a read\-only
\f[CR]Map\f[R]\-like object, in which each key is an identifier for an
object for which statistics are being reported, and the corresponding
value is a dictionary object providing the statistics.
.SH INSTANCE PROPERTIES
.TP
\f[B]RTCStatsReport.size\f[R]
Returns the number of items in the \f[CR]RTCStatsReport\f[R] object.
.SH INSTANCE METHODS
.TP
\f[B]RTCStatsReport.entries()\f[R]
Returns a new Iterator object that contains a two\-member array of
\f[CR][id, statistic\-dictionary]\f[R] for each element in the
\f[CR]RTCStatsReport\f[R] object, in insertion order.
.TP
\f[B]RTCStatsReport.forEach()\f[R]
Calls \f[CR]callbackFn\f[R] once for each key\-value pair present in the
\f[CR]RTCStatsReport\f[R] object, in insertion order.
If a \f[CR]thisArg\f[R] parameter is provided to \f[CR]forEach\f[R], it
will be used as the \f[CR]this\f[R] value for each callback.
.TP
\f[B]RTCStatsReport.get()\f[R]
Returns the statistics dictionary associated with the passed
\f[CR]id\f[R], or \f[CR]undefined\f[R] if there is none.
.TP
\f[B]RTCStatsReport.has()\f[R]
Returns a boolean indicating whether the \f[CR]RTCStatsReport\f[R]
contains a statistics dictionary associated with the specified
\f[CR]id\f[R].
.TP
\f[B]RTCStatsReport.keys()\f[R]
Returns a new Iterator object that contains the keys (IDs) for each
element in the \f[CR]RTCStatsReport\f[R] object, in insertion order.
.TP
\f[B]RTCStatsReport.values()\f[R]
Returns a new Iterator object that contains the values (statistics
object) for each element in the \f[CR]RTCStatsReport\f[R] object, in
insertion order.
.TP
\f[B]RTCStatsReport[Symbol.iterator]()\f[R]
Returns a new Iterator object that contains a two\-member array of
\f[CR][id, statistic\-dictionary]\f[R] for each element in the
\f[CR]RTCStatsReport\f[R] object, in insertion order.
.SH DESCRIPTION
A \f[CR]Promise\f[R] that resolves to an \f[CR]RTCStatsReport\f[R] is
returned from the \f[CR]RTCRtpReceiver.getStats()\f[R],
\f[CR]RTCRtpSender.getStats()\f[R] and
\f[CR]RTCPeerConnection.getStats()\f[R] methods.
Calling \f[CR]getStats()\f[R] on an \f[CR]RTCPeerConnection\f[R] lets
you specify whether you wish to obtain outbound statistics, inbound
statistics, or statistics for the whole connection.
The \f[CR]RTCRtpReceiver\f[R] and \f[CR]RTCRtpSender\f[R] versions of
\f[CR]getStats()\f[R] only return inbound and outbound statistics,
respectively.
.PP
The statistics report is a read\-only \f[CR]Map\f[R]\-like object: an
ordered dictionary, where the properties are \f[CR]id\f[R] strings that
uniquely identify the WebRTC object that was inspected to produce a
particular set of statistics, and the value is a dictionary object
containing those statistics.
A \f[CR]RTCStatsReport\f[R] can be iterated and used the same ways as a
read\-only \f[CR]Map\f[R].
.PP
The report may contain many different categories of statistics,
including inbound and outbound statistics for both the current and
remote ends of the peer connection, information about codecs,
certificates and media used, and so on.
Each category of statistic is provided in a different type of statistics
dictionary object, which can be identified from its \f[CR]type\f[R]
property.
.SS Common instance properties
All the dictionary types have the following properties:
.TP
\f[B]id\f[R]
A string that uniquely identifies the object was monitored to produce
the set of statistics.
This value persists across reports for (at least) the lifetime of the
connection.
Note however that for some statistics the ID may vary between browsers
and for subsequent connections, even to the same peer.
.TP
\f[B]timestamp\f[R]
A high resolution timestamp object (\f[CR]DOMHighResTimeStamp\f[R])
object indicating the time at which the sample was taken.
Many reported statistics are cumulative values; the timestamp allows
rates and averages to be calculated between any two reports, at any
desired reporting rate.
.TP
\f[B]type\f[R]
A string with a value that indicates the type of statistics that the
object contains, such as \f[CR]candidate\-pair\f[R],
\f[CR]inbound\-rtp\f[R], \f[CR]certificate\f[R], and so on.
The types of statistics and their corresponding objects are listed
below.
.PP
Users typically iterate a \f[CR]RTCStatsReport\f[R], using a
\f[CR]forEach()\f[R] or \f[CR]for...of\f[R] loop, selecting the
statistics of interest using the \f[CR]type\f[R] property.
Once a particular statistic object has been identified using its
\f[CR]type\f[R], the \f[CR]id\f[R] property can subsequently be used
with \f[CR]get()\f[R] to obtain the same statistic report at a different
time.
.PP
The timestamp can be used to calculate average values for statistics
that accumulate over the lifetime of a connection.
.SS The statistic types
The statistics \f[CR]type\f[R] values and their corresponding
dictionaries are listed below.
.PP
.TS
tab(@);
lw(5.0n) lw(17.1n) lw(47.9n).
T{
type
T}@T{
Dictionary
T}@T{
Description
T}
_
T{
\f[CR]candidate\-pair\f[R]
T}@T{
\f[CR]RTCIceCandidatePairStats\f[R]
T}@T{
Statistics describing the change from one \f[CR]RTCIceTransport\f[R] to
another, such as during an ICE restart.
T}
T{
\f[CR]certificate\f[R]
T}@T{
\f[CR]RTCCertificateStats\f[R]
T}@T{
Statistics about a certificate being used by an
\f[CR]RTCIceTransport\f[R].
T}
T{
\f[CR]codec\f[R]
T}@T{
\f[CR]RTCCodecStats\f[R]
T}@T{
Statistics about a specific codec being used by streams being sent or
received by this connection.
T}
T{
\f[CR]data\-channel\f[R]
T}@T{
\f[CR]RTCDataChannelStats\f[R]
T}@T{
Statistics related to one \f[CR]RTCDataChannel\f[R] on the connection.
T}
T{
\f[CR]inbound\-rtp\f[R]
T}@T{
\f[CR]RTCInboundRtpStreamStats\f[R]
T}@T{
Statistics describing the state of one of the connection\(cqs inbound
data streams.
T}
T{
\f[CR]local\-candidate\f[R]
T}@T{
\f[CR]RTCIceCandidateStats\f[R]
T}@T{
Statistics about a local ICE candidate associated with the
connection\(cqs \f[CR]RTCIceTransport\f[R]s.
T}
T{
\f[CR]media\-source\f[R]
T}@T{
\f[CR]RTCAudioSourceStats\f[R] or \f[CR]RTCVideoSourceStats\f[R]
T}@T{
Statistics about the media produced by the \f[CR]MediaStreamTrack\f[R]
attached to an RTP sender.
The dictionary this key maps to depends on the track\(cqs
\f[CR]kind\f[R].
T}
T{
\f[CR]outbound\-rtp\f[R]
T}@T{
\f[CR]RTCOutboundRtpStreamStats\f[R]
T}@T{
Statistics describing the state of one of the outbound data streams on
this connection.
T}
T{
\f[CR]peer\-connection\f[R]
T}@T{
\f[CR]RTCPeerConnectionStats\f[R]
T}@T{
Statistics describing the state of the \f[CR]RTCPeerConnection\f[R].
T}
T{
\f[CR]remote\-candidate\f[R]
T}@T{
\f[CR]RTCIceCandidateStats\f[R]
T}@T{
Statistics about a remote ICE candidate associated with the
connection\(cqs \f[CR]RTCIceTransport\f[R]s.
T}
T{
\f[CR]remote\-inbound\-rtp\f[R]
T}@T{
\f[CR]RTCRemoteInboundRtpStreamStats\f[R]
T}@T{
Statistics describing the state of the inbound data stream from the
perspective of the remote peer.
T}
T{
\f[CR]remote\-outbound\-rtp\f[R]
T}@T{
\f[CR]RTCRemoteOutboundRtpStreamStats\f[R]
T}@T{
Statistics describing the state of the outbound data stream from the
perspective of the remote peer.
T}
T{
\f[CR]transport\f[R]
T}@T{
\f[CR]RTCTransportStats\f[R]
T}@T{
Statistics about a transport used by the connection.
T}
.TE
.SH EXAMPLES
.SS Iterate report from an RTCPeerConnection using forEach loop
This example logs shows how you might log video\-related statistics for
the local \f[CR]RTCRtpReceiver\f[R] responsible for receiving streamed
media.
.PP
Given a variable \f[CR]myPeerConnection\f[R], which is an instance of
\f[CR]RTCPeerConnection\f[R], the code uses \f[CR]await\f[R] to wait for
the statistics report, and then iterates it using
\f[CR]RTCStatsReport.forEach()\f[R].
It then filters the dictionaries for just those reports that have the
\f[CR]type\f[R] of \f[CR]inbound\-rtp\f[R] and \f[CR]kind\f[R] of
\f[CR]video\f[R].
.IP
.EX
\f[B]const\f[R] stats = \f[B]await\f[R] myPeerConnection.getStats();

stats.forEach((report) \f[B]=>\f[R] {
  \f[B]if\f[R] (report.type === \(dqinbound\-rtp\(dq && report.kind === \(dqvideo\(dq) {
    \f[I]// Log the frame rate\f[R]
    console.log(report.framesPerSecond);
  }
});
.EE
.SS Iterate report from an RTCRtpSender using a for\&...of loop
This example shows how you might iterate the outbound statistics from an
\f[CR]RTCRtpSender\f[R].
.PP
The code follows a similar pattern to the previous example, but iterates
using a \f[CR]for...of\f[R]\-loop on the
\f[CR]RTCStatsReport.values()\f[R], and filters on the \f[CR]type\f[R]
of \f[CR]outbound\-rtp\f[R].
It assumes you already have an \f[CR]RTCRtpSender\f[R] object named
\(lqsender\(rq.
.IP
.EX
\f[B]const\f[R] stats = \f[B]await\f[R] sender.getStats();

\f[B]for\f[R] (\f[B]const\f[R] stat \f[B]of\f[R] stats.values()) {
  \f[B]if\f[R] (stat.type !== \(dqoutbound\-rtp\(dq) \f[B]continue\f[R];
  Object.keys(stat).forEach((statName) \f[B]=>\f[R] {
    console.log(\(ga${statName}: ${report[statName]}\(ga);
  });
}
.EE
.SH SEE ALSO
.IP \(bu 2
WebRTC API
.IP \(bu 2
\f[CR]RTCPeerConnection\f[R]
.IP \(bu 2
\f[CR]RTCPeerConnection.getStats()\f[R],
\f[CR]RTCRtpReceiver.getStats()\f[R], and
\f[CR]RTCRtpSender.getStats()\f[R]
