.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "BLOB" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Blob \- Blob
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]Blob\f[B]\f[R] interface represents a blob, which is a
file\-like object of immutable, raw data; they can be read as text or
binary data, or converted into a \f[CR]ReadableStream\f[R] so its
methods can be used for processing the data.
.PP
Blobs can represent data that isn\(cqt necessarily in a
JavaScript\-native format.
The \f[CR]File\f[R] interface is based on \f[CR]Blob\f[R], inheriting
blob functionality and expanding it to support files on the user\(cqs
system.
.SH USING BLOBS
To construct a \f[CR]Blob\f[R] from other non\-blob objects and data,
use the \f[CR]Blob()\f[R] constructor.
To create a blob that contains a subset of another blob\(cqs data, use
the \f[CR]slice()\f[R] method.
To obtain a \f[CR]Blob\f[R] object for a file on the user\(cqs file
system, see the \f[CR]File\f[R] documentation.
.PP
The APIs accepting \f[CR]Blob\f[R] objects are also listed in the
\f[CR]File\f[R] documentation.
.SH CONSTRUCTOR
.TP
\f[B]Blob()\f[R]
Returns a newly created \f[CR]Blob\f[R] object which contains a
concatenation of all of the data in the array passed into the
constructor.
.SH INSTANCE PROPERTIES
.TP
\f[B]Blob.size\f[R] \f[I](read\-only)\f[R]
The size, in bytes, of the data contained in the \f[CR]Blob\f[R] object.
.TP
\f[B]Blob.type\f[R] \f[I](read\-only)\f[R]
A string indicating the MIME type of the data contained in the
\f[CR]Blob\f[R].
If the type is unknown, this string is empty.
.SH INSTANCE METHODS
.TP
\f[B]Blob.arrayBuffer()\f[R]
Returns a promise that resolves with an \f[CR]ArrayBuffer\f[R]
containing the entire contents of the \f[CR]Blob\f[R] as binary data.
.TP
\f[B]Blob.bytes()\f[R]
Returns a promise that resolves with an \f[CR]Uint8Array\f[R] containing
the contents of the \f[CR]Blob\f[R].
.TP
\f[B]Blob.slice()\f[R]
Returns a new \f[CR]Blob\f[R] object containing the data in the
specified range of bytes of the blob on which it\(cqs called.
.TP
\f[B]Blob.stream()\f[R]
Returns a \f[CR]ReadableStream\f[R] that can be used to read the
contents of the \f[CR]Blob\f[R].
.TP
\f[B]Blob.text()\f[R]
Returns a promise that resolves with a string containing the entire
contents of the \f[CR]Blob\f[R] interpreted as UTF\-8 text.
.SH EXAMPLES
.SS Creating a blob
The \f[CR]Blob()\f[R] constructor can create blobs from other objects.
For example, to construct a blob from a JSON string:
.IP
.EX
\f[B]const\f[R] obj = { hello: \(dqworld\(dq };
\f[B]const\f[R] blob = \f[B]new\f[R] Blob([JSON.stringify(obj, \f[B]null\f[R], 2)], {
  type: \(dqapplication/json\(dq,
});
.EE
.SS Creating a URL representing the contents of a typed array
The following example creates a JavaScript typed array and creates a new
\f[CR]Blob\f[R] containing the typed array\(cqs data.
It then calls \f[CR]URL.createObjectURL()\f[R] to convert the blob into
a URL.
.IP
.EX
<p>
  This example creates a typed array containing the ASCII codes for the space
  character through the letter Z, then converts it to an object URL. A link to
  open that object URL is created. Click the link to see the decoded object URL.
</p>
.EE
.PP
The main piece of this code for example purposes is the
\f[CR]typedArrayToURL()\f[R] function, which creates a \f[CR]Blob\f[R]
from the given typed array and returns an object URL for it.
Having converted the data into an object URL, it can be used in a number
of ways, including as the value of the \f[CR]<img>\f[R] element\(cqs
\f[CR]src\f[R] attribute (assuming the data contains an image, of
course).
.IP
.EX
function showViewLiveResultButton() {
  if (window.self !== window.top) {
    // Ensure that if our document is in a frame, we get the user
    // to first open it in its own tab or window. Otherwise, this
    // example won\(aqt work.
    const p = document.querySelector(\(dqp\(dq);
    p.textContent = \(dq\(dq;
    const button = document.createElement(\(dqbutton\(dq);
    button.textContent = \(dqView live result of the example code above\(dq;
    p.append(button);
    button.addEventListener(\(dqclick\(dq, () => window.open(location.href));
    return true;
  }
  return false;
}

if (!showViewLiveResultButton()) {
  function typedArrayToURL(typedArray, mimeType) {
    return URL.createObjectURL(
      new Blob([typedArray.buffer], { type: mimeType }),
    );
  }
  const bytes = new Uint8Array(59);

  for (let i = 0; i < 59; i++) {
    bytes[i] = 32 + i;
  }

  const url = typedArrayToURL(bytes, \(dqtext/plain\(dq);
  const link = document.createElement(\(dqa\(dq);

  link.href = url;
  link.innerText = \(dqOpen the array URL\(dq;
  document.body.appendChild(link);
}
.EE
.SS Extracting data from a blob
One way to read content from a \f[CR]Blob\f[R] is to use a
\f[CR]FileReader\f[R].
The following code reads the content of a \f[CR]Blob\f[R] as a typed
array:
.IP
.EX
\f[B]const\f[R] reader = \f[B]new\f[R] FileReader();
reader.addEventListener(\(dqloadend\(dq, () \f[B]=>\f[R] {
  \f[I]// reader.result contains the contents of blob as a typed array\f[R]
});
reader.readAsArrayBuffer(blob);
.EE
.PP
Another way to read content from a \f[CR]Blob\f[R] is to use a
\f[CR]Response\f[R].
The following code reads the content of a \f[CR]Blob\f[R] as text:
.IP
.EX
\f[B]const\f[R] text = \f[B]await\f[R] \f[B]new\f[R] Response(blob).text();
.EE
.PP
Or by using \f[CR]Blob.text()\f[R]:
.IP
.EX
\f[B]const\f[R] text = \f[B]await\f[R] blob.text();
.EE
.PP
By using other methods of \f[CR]FileReader\f[R], it is possible to read
the contents of a Blob as a string or a data URL.
.SH SEE ALSO
.IP \(bu 2
\f[CR]FileReader\f[R]
.IP \(bu 2
\f[CR]File\f[R]
.IP \(bu 2
\f[CR]URL.createObjectURL()\f[R]
.IP \(bu 2
Using files from web applications
