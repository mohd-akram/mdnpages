.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Pbkdf2Params" "JS" "February 19, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Pbkdf2Params \- Pbkdf2Params
.SH SYNOPSIS
The \f[B]\f[CB]Pbkdf2Params\f[B]\f[R] dictionary of the Web Crypto API
represents the object that should be passed as the \f[CR]algorithm\f[R]
parameter into \f[CR]SubtleCrypto.deriveKey()\f[R], when using the
PBKDF2 algorithm.
.SH INSTANCE PROPERTIES
.TP
\f[B]name\f[R]
A string.
This should be set to \f[CR]PBKDF2\f[R].
.TP
\f[B]hash\f[R]
A string representing the digest algorithm to use.
This may be one of:
.RS
.IP \[bu] 2
\f[CR]SHA\-1\f[R]
.IP \[bu] 2
\f[CR]SHA\-256\f[R]
.IP \[bu] 2
\f[CR]SHA\-384\f[R]
.IP \[bu] 2
\f[CR]SHA\-512\f[R]
.RS
.PP
\f[B]Warning:\f[R] \f[CR]SHA\-1\f[R] is considered vulnerable in most
cryptographic applications, but is still considered safe in PBKDF2.
However, it\[cq]s advisable to transition away from it everywhere, so
unless you need to use \f[CR]SHA\-1\f[R], don\[cq]t.
Use a different digest algorithm instead.
.RE
.RE
.TP
\f[B]salt\f[R]
An \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R], or a
\f[CR]DataView\f[R].
This should be a random or pseudo\-random value of at least 16 bytes.
Unlike the input key material passed into \f[CR]deriveKey()\f[R],
\f[CR]salt\f[R] does not need to be kept secret.
.TP
\f[B]iterations\f[R]
A \f[CR]Number\f[R] representing the number of times the hash function
will be executed in \f[CR]deriveKey()\f[R].
This determines how computationally expensive (that is, slow) the
\f[CR]deriveKey()\f[R] operation will be.
In this context, slow is good, since it makes it more expensive for an
attacker to run a dictionary attack against the keys.
The general guidance here is to use as many iterations as possible,
subject to keeping an acceptable level of performance for your
application.
.SH EXAMPLES
See the examples for \f[CR]SubtleCrypto.deriveKey()\f[R].
