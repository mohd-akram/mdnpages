.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "TypedArray.set" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.set \- TypedArray.prototype.set()
.SH SYNOPSIS
The \f[B]\f[CB]set()\f[B]\f[R] method of \f[CR]TypedArray\f[R] instances
stores multiple values in the typed array, reading input values from a
specified array.
.IP
.EX
\f[I]// Create an ArrayBuffer with a size in bytes\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8);
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array(buffer);

\f[I]// Copy the values into the array starting at index 3\f[R]
uint8.set([1, 2, 3], 3);

console.log(uint8);
\f[I]// Expected output: Uint8Array [0, 0, 0, 1, 2, 3, 0, 0]\f[R]
.EE
.SH SYNTAX
.IP
.EX
set(array)
set(array, targetOffset)

set(typedarray)
set(typedarray, targetOffset)
.EE
.SS Parameters
.TP
\f[B]array\f[R]
The array from which to copy values.
All values from the source array are copied into the target array,
unless the length of the source array plus the target offset exceeds the
length of the target array, in which case an exception is thrown.
.TP
\f[B]typedarray\f[R]
If the source array is a typed array, the two arrays may share the same
underlying \f[CR]ArrayBuffer\f[R]; the JavaScript engine will
intelligently \f[B]copy\f[R] the source range of the buffer to the
destination range.
.TP
\f[B]targetOffset\f[R] \f[I](optional)\f[R]
The offset into the target array at which to begin writing values from
the source array.
If this value is omitted, 0 is assumed (that is, the source array will
overwrite values in the target array starting at index 0).
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown in one of the following cases:
.RS
.IP \[bu] 2
An element will be stored beyond the end of the typed array, either
because \f[CR]targetOffset\f[R] is too large or because \f[CR]array\f[R]
or \f[CR]typedarray\f[R] is too large.
.IP \[bu] 2
\f[CR]targetOffset\f[R] is negative.
.RE
.SH EXAMPLES
.SS Using set()
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8);
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array(buffer);

uint8.set([1, 2, 3], 3);

console.log(uint8); \f[I]// Uint8Array [ 0, 0, 0, 1, 2, 3, 0, 0 ]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]TypedArray.prototype.set\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
