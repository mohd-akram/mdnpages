.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "StylePropertyMapReadOnly" "JS" "September 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
StylePropertyMapReadOnly \- StylePropertyMapReadOnly
.SH SYNOPSIS
The \f[B]\f[CB]StylePropertyMapReadOnly\f[B]\f[R] interface of the CSS
Typed Object Model API provides a read\-only representation of a CSS
declaration block that is an alternative to
\f[CR]CSSStyleDeclaration\f[R].
Retrieve an instance of this interface using
\f[CR]Element.computedStyleMap()\f[R].
.SH INSTANCE PROPERTIES
.TP
\f[B]StylePropertyMapReadOnly.size\f[R]
Returns an unsigned long integer containing the size of the
\f[CR]StylePropertyMapReadOnly\f[R] object.
.SH INSTANCE METHODS
.TP
\f[B]StylePropertyMapReadOnly.entries()\f[R]
Returns an array of a given object\[cq]s own enumerable property
\f[CR][key, value]\f[R] pairs, in the same order as that provided by a
\f[CR]for...in\f[R] loop (the difference being that a for\-in loop
enumerates properties in the prototype chain as well).
.TP
\f[B]StylePropertyMapReadOnly.forEach()\f[R]
Executes a provided function once for each element of
\f[CR]StylePropertyMapReadOnly\f[R].
.TP
\f[B]StylePropertyMapReadOnly.get()\f[R]
Returns the value of the specified property.
.TP
\f[B]StylePropertyMapReadOnly.getAll()\f[R]
Returns an array of \f[CR]CSSStyleValue\f[R] objects containing the
values for the provided property.
.TP
\f[B]StylePropertyMapReadOnly.has()\f[R]
Indicates whether the specified property is in the
\f[CR]StylePropertyMapReadOnly\f[R] object.
.TP
\f[B]StylePropertyMapReadOnly.keys()\f[R]
Returns a new \f[I]array iterator\f[R] containing the keys for each item
in \f[CR]StylePropertyMapReadOnly\f[R].
.TP
\f[B]StylePropertyMapReadOnly.values()\f[R]
Returns a new \f[I]array iterator\f[R] containing the values for each
index in the \f[CR]StylePropertyMapReadOnly\f[R] object.
.SH EXAMPLES
We have to have an element to observe:
.IP
.EX
<\f[B]p\f[R]>
  This is a paragraph with some text. We can add some CSS, or not. The style map
  will include all the default and inherited CSS property values.
</\f[B]p\f[R]>
<\f[B]dl\f[R] id=\[dq]output\[dq]></\f[B]dl\f[R]>
.EE
.PP
We add a touch of CSS with a custom property to better demonstrate the
output:
.IP
.EX
p {
  \-\-someVariable: 1.6em;
  \-\-someOtherVariable: translateX(33vw);
  \-\-anotherVariable: 42;
  \f[B]line\-height\f[R]: var(\-\-someVariable);
}
.EE
.PP
We add JavaScript to grab our paragraph and return back a definition
list of all the default CSS property values using
\f[CR]Element.computedStyleMap()\f[R].
.IP
.EX
\f[I]// get the element\f[R]
\f[B]const\f[R] myElement = document.querySelector(\[dq]p\[dq]);

\f[I]// get the <dl> we\[aq]ll be populating\f[R]
\f[B]const\f[R] stylesList = document.querySelector(\[dq]#output\[dq]);

\f[I]// Retrieve all computed styles with computedStyleMap()\f[R]
\f[B]const\f[R] stylePropertyMap = myElement.computedStyleMap();

\f[I]// iterate through the map of all the properties and values, adding a <dt> and <dd> for each\f[R]
\f[B]for\f[R] (\f[B]const\f[R] [prop, val] \f[B]of\f[R] stylePropertyMap) {
  \f[I]// properties\f[R]
  \f[B]const\f[R] cssProperty = document.createElement(\[dq]dt\[dq]);
  cssProperty.innerText = prop;
  stylesList.appendChild(cssProperty);

  \f[I]// values\f[R]
  \f[B]const\f[R] cssValue = document.createElement(\[dq]dd\[dq]);
  cssValue.innerText = val;
  stylesList.appendChild(cssValue);
}
.EE
