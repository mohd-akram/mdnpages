.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ByteLengthQueuingStrategy.highWaterMark" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ByteLengthQueuingStrategy.highWaterMark \- ByteLengthQueuingStrategy:
highWaterMark property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The read\-only
\f[B]\f[CB]ByteLengthQueuingStrategy.highWaterMark\f[B]\f[R] property
returns the total number of bytes that can be contained in the internal
queue before backpressure is applied.
.RS
.PP
\f[B]Note:\f[R] Unlike \f[CR]CountQueuingStrategy()\f[R] where the
\f[CR]highWaterMark\f[R] property specifies a simple count of the number
of chunks, with \f[CR]ByteLengthQueuingStrategy()\f[R], the
\f[CR]highWaterMark\f[R] parameter specifies a number of \f[I]bytes\f[R]
\[em] specifically, given a stream of chunks, how many bytes worth of
those chunks (rather than a count of how many of those chunks) can be
contained in the internal queue before backpressure is applied.
.RE
.SH VALUES
An integer.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] queuingStrategy = \f[B]new\f[R] ByteLengthQueuingStrategy({
  highWaterMark: 1 * 1024,
});

\f[B]const\f[R] readableStream = \f[B]new\f[R] ReadableStream(
  {
    start(controller) {
      \f[I]// \&...\f[R]
    },
    pull(controller) {
      \f[I]// \&...\f[R]
    },
    cancel(err) {
      console.log(\[dq]stream error:\[dq], err);
    },
  },
  queuingStrategy,
);

\f[B]const\f[R] size = queuingStrategy.size(chunk);
console.log(\[ga]highWaterMark value: ${queuingStrategy.highWaterMark}$\[ga]);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ByteLengthQueuingStrategy()\f[R] constructor
