.\" Automatically generated by Pandoc 3.4
.\"
.TH "PerformanceObserver.observe" "JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceObserver.observe \- PerformanceObserver: observe() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]observe()\f[B]\f[R] method of the
\f[B]\f[CB]PerformanceObserver\f[B]\f[R] interface is used to specify
the set of performance entry types to observe.
.PP
See \f[CR]PerformanceEntry.entryType\f[R] for a list of entry types and
\f[CR]PerformanceObserver.supportedEntryTypes\f[R] for a list of entry
types the user agent supports.
.PP
When a matching performance entry is recorded, the performance
observer\[cq]s callback function\[em]set when creating the
\f[CR]PerformanceObserver\f[R]\[em]is invoked.
.SH SYNTAX
.IP
.EX
observe(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R]
An object with the following possible members:
.RS
.TP
\f[B]buffered\f[R]
A boolean flag to indicate whether buffered entries should be queued
into the observer\[cq]s buffer.
Must be used only with the \f[CR]type\f[R] option.
.TP
\f[B]durationThreshold\f[R]
A \f[CR]DOMHighResTimeStamp\f[R] defining the threshold for
\f[CR]PerformanceEventTiming\f[R] entries.
Defaults to 104ms and is rounded to the nearest of 8ms.
Lowest possible threshold is 16ms.
May not be used together with the \f[CR]entryTypes\f[R] option.
.TP
\f[B]entryTypes\f[R]
An array of strings, each specifying one performance entry type to
observe.
May not be used together with the \f[CR]type\f[R], \f[CR]buffered\f[R],
or \f[CR]durationThreshold\f[R] options.
.RS
.PP
See \f[CR]PerformanceEntry.entryType\f[R] for a list of valid
performance entry type names.
Unrecognized types are ignored, though the browser may output a warning
message to the console to help developers debug their code.
If no valid types are found, \f[CR]observe()\f[R] has no effect.
.RE
.TP
\f[B]type\f[R]
A single string specifying exactly one performance entry type to
observe.
May not be used together with the \f[CR]entryTypes\f[R] option.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Watching multiple performance entry types
This example creates a \f[CR]PerformanceObserver\f[R] and watches for
\f[CR]\[dq]mark\[dq]\f[R] and \f[CR]\[dq]measure\[dq]\f[R] entry types
as specified by the \f[CR]entryTypes\f[R] option given in the
\f[CR]observe()\f[R] method.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list, obj) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[I]// Process \[dq]mark\[dq] and \[dq]measure\[dq] events\f[R]
  });
});
observer.observe({ entryTypes: [\[dq]mark\[dq], \[dq]measure\[dq]] });
.EE
.SS Watching a single performance entry type
The following example retrieves buffered events and subscribes to newer
events for resource timing events (\f[CR]PerformanceResourceTiming\f[R])
using the \f[CR]buffered\f[R] and \f[CR]type\f[R] configuration options.
Whenever you need to configure the observer to use the
\f[CR]buffered\f[R] or \f[CR]durationThreshold\f[R] option, use
\f[CR]type\f[R] instead of \f[CR]entryType\f[R].
Collecting multiple types of performance entry types will not work
otherwise.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list, obj) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[I]// Process \[dq]resource\[dq] events\f[R]
  });
});
observer.observe({ type: \[dq]resource\[dq], buffered: \f[B]true\f[R] });
.EE
