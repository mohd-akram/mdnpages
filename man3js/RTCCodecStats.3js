.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCCodecStats" "JS" "March 15, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCCodecStats \- RTCCodecStats
.SH SYNOPSIS
The \f[B]\f[CB]RTCCodecStats\f[B]\f[R] dictionary of the WebRTC API
provides statistics about a codec used by RTP streams that are being
sent or received by the associated \f[CR]RTCPeerConnection\f[R] object.
.PP
These statistics can be obtained by iterating the
\f[CR]RTCStatsReport\f[R] object returned by
\f[CR]RTCPeerConnection.getStats()\f[R] until you find an entry with the
\f[CR]type\f[R] of \f[CR]codec\f[R].
.PP
The codec statistics can be correlated with the inbound or outbound
stream statistics (both local and remote) by matching their
\f[CR]codecId\f[R] property to the codec\[cq]s \f[CR]id\f[R].
For example, if \f[CR]RTCInboundRtpStreamStats.codecId\f[R] matches an
\f[CR]RTCCodecStats.id\f[R] in the same report, then we know that the
codec is being used on this peer connection\[cq]s inbound stream.
If no stream \f[CR]codecId\f[R] references a codec statistic, then that
codec statistic object is deleted \[em] if the codec is used again, the
statistics object will be recreated with the same \f[CR]id\f[R].
.PP
Codec objects may be referenced by multiple RTP streams in media
sections using the same transport.
In fact, user agents are expected to consolidate information into a
single \[lq]codec\[rq] entry per payload type per transport (unless
sdpFmtpLine is different when sending or receiving, in which case,
different codecs will be needed for encoding and decoding).
Note that other transports will use their own distinct
\f[CR]RTCCodecStats\f[R] objects.
.SH INSTANCE PROPERTIES
.TP
\f[B]channels\f[R] \f[I](optional)\f[R]
A positive number indicating the number of channels supported by the
codec.
.TP
\f[B]clockRate\f[R] \f[I](optional)\f[R]
A positive number containing the media sampling rate.
.TP
\f[B]mimeType\f[R]
A string containing the media MIME type/subtype, such as video/VP8.
.TP
\f[B]payloadType\f[R]
A positive integer value in the range of 0 to 127 indicating the payload
type used in RTP encoding or decoding.
.TP
\f[B]sdpFmtpLine\f[R] \f[I](optional)\f[R]
A string containing the format\-specific parameters of the
\f[CR]\[dq]a=fmtp\[dq]\f[R] line in the codec\[cq]s SDP (if present).
.TP
\f[B]transportId\f[R]
A string containing the unique identifier of the transport on which this
codec is being used.
This can be used to match to the corresponding
\f[CR]RTCTransportStats\f[R] object.
.SS Common instance properties
The following properties are common to all WebRTC statistics objects
(see \f[CR]RTCStatsReport\f[R] for more information):
.TP
\f[B]id\f[R]
A string that uniquely identifies the object that is being monitored to
produce this set of statistics.
.TP
\f[B]timestamp\f[R]
A \f[CR]DOMHighResTimeStamp\f[R] object indicating the time at which the
sample was taken for this statistics object.
.TP
\f[B]type\f[R]
A string with the value \f[CR]\[dq]codec\[dq]\f[R], indicating the type
of statistics the object contains.
.SH EXAMPLES
Given a variable \f[CR]myPeerConnection\f[R], which is an instance of
\f[CR]RTCPeerConnection\f[R], the code below uses \f[CR]await\f[R] to
wait for the statistics report, and then iterates it using
\f[CR]RTCStatsReport.forEach()\f[R].
It then filters the dictionaries for just those reports that have the
type of \f[CR]codec\f[R] and logs the result.
.IP
.EX
\f[B]const\f[R] stats = \f[B]await\f[R] myPeerConnection.getStats();

stats.forEach((report) \f[B]=>\f[R] {
  \f[B]if\f[R] (report.type === \[dq]codec\[dq]) {
    \f[I]// Log the codec information\f[R]
    console.log(report);
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]RTCStatsReport\f[R]
.IP \[bu] 2
\f[CR]RTCRtpCodecParameters\f[R]
