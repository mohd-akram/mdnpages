.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATATRANSFERITEMLIST" "3JS" "June 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList \- DataTransferItemList
.SH SYNOPSIS
The \f[B]\f[CB]DataTransferItemList\f[B]\f[R] object is a list of
\f[CR]DataTransferItem\f[R] objects representing items being dragged.
During a \f[I]drag operation\f[R], each \f[CR]DragEvent\f[R] has a
\f[CR]dataTransfer\f[R] property and that property is a
\f[CR]DataTransferItemList\f[R].
.PP
The individual items can be accessed using the bracket notation
\f[CR][]\f[R].
.PP
\f[CR]DataTransferItemList\f[R] was primarily designed for the HTML Drag
and Drop API, and is still specified in the HTML drag\-and\-drop
section, but it is now also used by other APIs, such as
\f[CR]ClipboardEvent.clipboardData\f[R] and
\f[CR]InputEvent.dataTransfer\f[R].
Documentation of \f[CR]DataTransferItemList\f[R] will primarily discuss
its usage in drag\-and\-drop operations, and you should refer to the
other APIs\(cq documentation for usage of
\f[CR]DataTransferItemList\f[R] in those contexts.
.PP
This interface has no constructor.
.SH INSTANCE PROPERTIES
.TP
\f[B]DataTransferItemList.length\f[R] \f[I](read\-only)\f[R]
An \f[CR]unsigned long\f[R] that is the number of drag items in the
list.
.SH INSTANCE METHODS
.TP
\f[B]DataTransferItemList.add()\f[R]
Adds an item (either a \f[CR]File\f[R] object or a string) to the drag
item list and returns a \f[CR]DataTransferItem\f[R] object for the new
item.
.TP
\f[B]DataTransferItemList.remove()\f[R]
Removes the drag item from the list at the given index.
.TP
\f[B]DataTransferItemList.clear()\f[R]
Removes all of the drag items from the list.
.SH EXAMPLE
This example shows how to use drag and drop.
.SS HTML
.IP
.EX
<\f[B]div\f[R]>
  <\f[B]p\f[R] id=\(dqsource\(dq draggable=\(dqtrue\(dq>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </\f[B]p\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] id=\(dqtarget\(dq>Drop Zone</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]margin\f[R]: 0em;
  \f[B]padding\f[R]: 2em;
}

source {
  \f[B]color\f[R]: blue;
  \f[B]border\f[R]: 1px solid black;
}

target {
  \f[B]border\f[R]: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] source = document.getElementById(\(dqsource\(dq);
\f[B]const\f[R] target = document.getElementById(\(dqtarget\(dq);

source.addEventListener(\(dqdragstart\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragStart\(dq);

  \f[I]// Add this element\(aqs id to the drag payload so the drop handler will\f[R]
  \f[I]// know which element to add to its tree\f[R]
  \f[B]const\f[R] dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \(dqtext/plain\(dq);

  \f[I]// Add some other items to the drag payload\f[R]
  dataList.add(\(dq<p>Paragraph\&...</p>\(dq, \(dqtext/html\(dq);
  dataList.add(\(dqhttp://www.example.org\(dq, \(dqtext/uri\-list\(dq);
});

source.addEventListener(\(dqdragend\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragEnd\(dq);
  \f[B]const\f[R] dataList = ev.dataTransfer.items;

  \f[I]// Clear any remaining drag data\f[R]
  dataList.clear();
});

target.addEventListener(\(dqdrop\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqDrop\(dq);
  ev.preventDefault();

  \f[I]// Loop through the dropped items and log their data\f[R]
  \f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] ev.dataTransfer.items) {
    \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(/\(hatext\(rs/plain/)) {
      \f[I]// This item is the target node\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        ev.target.appendChild(document.getElementById(s));
      });
    } \f[B]else\f[R] \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(/\(hatext\(rs/html/)) {
      \f[I]// Drag data item is HTML\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        console.log(\(ga\&... Drop: HTML = ${s}\(ga);
      });
    } \f[B]else\f[R] \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(/\(hatext\(rs/uri\-list/)) {
      \f[I]// Drag data item is URI\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        console.log(\(ga\&... Drop: URI = ${s}\(ga);
      });
    }
  }
});

target.addEventListener(\(dqdragover\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragOver\(dq);
  ev.preventDefault();

  \f[I]// Set the dropEffect to move\f[R]
  ev.dataTransfer.dropEffect = \(dqmove\(dq;
});
.EE
.SS Result
