.\" Automatically generated by Pandoc 3.4
.\"
.TH "CanvasRenderingContext2D.fontKerning" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.fontKerning \- CanvasRenderingContext2D:
fontKerning property
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.fontKerning\f[B]\f[R] property
of the Canvas API specifies how font kerning information is used.
.PP
Kerning adjusts how adjacent letters are spaced in a proportional font,
allowing them to edge into each other\[cq]s visual area if there is
space available.
For example, in well\-kerned fonts, the characters \f[CR]AV\f[R],
\f[CR]Ta\f[R] and \f[CR]We\f[R] nest together and make character spacing
more uniform and pleasant to read than the equivalent text without
kerning.
.PP
The property corresponds to the \f[CR]font\-kerning\f[R] CSS property.
.SH VALUE
The property can be used to get or set the value.
.PP
Allowed values are:
.TP
\f[B]auto\f[R]
The browser determines whether font kerning should be used or not.
For example, some browsers will disable kerning on small fonts, since
applying it could harm the readability of text.
.TP
\f[B]normal\f[R]
Font kerning information stored in the font must be applied.
.TP
\f[B]none\f[R]
Font kerning information stored in the font is disabled.
.SH EXAMPLES
In this example we display the text \[lq]AVA Ta We\[rq] using each of
the supported values of the \f[CR]textRendering\f[R] property.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq] width=\[dq]700\[dq] height=\[dq]140\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
ctx.font = \[dq]30px serif\[dq];

\f[I]// Default (auto)\f[R]
ctx.fillText(\[ga]AVA Ta We (default: ${ctx.fontKerning})\[ga], 5, 30);

\f[I]// Font kerning: normal\f[R]
ctx.fontKerning = \[dq]normal\[dq];
ctx.fillText(\[ga]AVA Ta We (${ctx.fontKerning})\[ga], 5, 70);

\f[I]// Font kerning: none\f[R]
ctx.fontKerning = \[dq]none\[dq];
ctx.fillText(\[ga]AVA Ta We (${ctx.fontKerning})\[ga], 5, 110);
.EE
.SS Result
Note that the last string has font kerning disabled, so adjacent
characters are evenly spread.
