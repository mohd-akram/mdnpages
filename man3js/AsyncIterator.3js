.\" Automatically generated by Pandoc 3.4
.\"
.TH "AsyncIterator" "JS" "July 15, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AsyncIterator \- AsyncIterator
.SH SYNOPSIS
An \f[B]\f[CB]AsyncIterator\f[B]\f[R] object is an object that conforms
to the async iterator protocol by providing a \f[CR]next()\f[R] method
that returns a promise fulfilling to an iterator result object.
The \f[CR]AsyncIterator.prototype\f[R] object is a hidden global object
that all built\-in async iterators inherit from.
It provides an \f[CR][Symbol.asyncIterator]()\f[R] method that returns
the async iterator object itself, making the async iterator also async
iterable.
.PP
Note that \f[CR]AsyncIterator\f[R] is \f[I]not\f[R] a global object,
although it will be in the future with the \c
.UR https://github.com/tc39/proposal-async-iterator-helpers
async iterator helpers proposal
.UE \c
\&.
The \f[CR]AsyncIterator.prototype\f[R] object shared by all built\-in
async iterators can be obtained with the following code:
.IP
.EX
\f[B]const\f[R] AsyncIteratorPrototype = Object.getPrototypeOf(
  Object.getPrototypeOf(Object.getPrototypeOf((\f[B]async\f[R] \f[B]function\f[R]* () {})())),
);
.EE
.SH DESCRIPTION
Currently, the only built\-in JavaScript async iterator is the
\f[CR]AsyncGenerator\f[R] object returned by async generator functions.
There are some other built\-in async iterators in web API, such as the
one of a \f[CR]ReadableStream\f[R].
.PP
Each of these async iterators have a distinct prototype object, which
defines the \f[CR]next()\f[R] method used by the particular async
iterator.
All of these prototype objects inherit from
\f[CR]AsyncIterator.prototype\f[R], which provides an
\f[CR][Symbol.asyncIterator]()\f[R] method that returns the async
iterator object itself, making the async iterator also async iterable.
.RS
.PP
\f[B]Note:\f[R] \f[CR]AsyncIterator.prototype\f[R] does not implement
\f[CR][Symbol.iterator]()\f[R], so async iterators are not sync iterable
by default.
.RE
.SH INSTANCE METHODS
.TP
\f[B]AsyncIterator.prototype[Symbol.asyncIterator]()\f[R]
Returns the async iterator object itself.
This allows async iterator objects to also be async iterable.
.SH EXAMPLES
.SS Using an async iterator as an async iterable
All built\-in async iterators are also async iterable, so you can use
them in a \f[CR]for await...of\f[R] loop:
.IP
.EX
\f[B]const\f[R] asyncIterator = (\f[B]async\f[R] \f[B]function\f[R]* () {
  \f[B]yield\f[R] 1;
  \f[B]yield\f[R] 2;
  \f[B]yield\f[R] 3;
})();
(\f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]for\f[R] \f[B]await\f[R] (\f[B]const\f[R] value \f[B]of\f[R] asyncIterator) {
    console.log(value);
  }
})();
\f[I]// Logs: 1, 2, 3\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]async function*\f[R]
.IP \[bu] 2
Iteration protocols
