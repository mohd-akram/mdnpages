.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CANVASRENDERINGCONTEXT2D.GLOBALALPHA" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.globalAlpha \- CanvasRenderingContext2D:
globalAlpha property
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.globalAlpha\f[B]\f[R] property
of the Canvas 2D API specifies the alpha (transparency) value that is
applied to shapes and images before they are drawn onto the canvas.
.RS
.PP
\f[B]Note:\f[R] See also the chapter Applying styles and color in the
Canvas Tutorial.
.RE
.SH VALUE
A number between \f[CR]0.0\f[R] (fully transparent) and \f[CR]1.0\f[R]
(fully opaque), inclusive.
The default value is \f[CR]1.0\f[R].
Values outside that range, including \f[CR]Infinity\f[R] and
\f[CR]NaN\f[R], will not be set, and \f[CR]globalAlpha\f[R] will retain
its previous value.
.SH EXAMPLES
.SS Drawing translucent shapes
This example uses the \f[CR]globalAlpha\f[R] property to draw two
semi\-transparent rectangles.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

ctx.globalAlpha = 0.5;

ctx.fillStyle = \(dqblue\(dq;
ctx.fillRect(10, 10, 100, 100);

ctx.fillStyle = \(dqred\(dq;
ctx.fillRect(50, 50, 100, 100);
.EE
.SS Result
.SS Overlaying transparent shapes
This example illustrates the effect of overlaying multiple transparent
shapes on top of each other.
We begin by drawing a solid background composed of four differently
colored squares.
Next, we set the \f[CR]globalAlpha\f[R] property to \f[CR]0.2\f[R] (20%
opaque); this alpha level will apply to all of our transparent shapes.
After that, we use a \f[CR]for\f[R] loop to draw a series of circles
with increasing radii.
.PP
With each new circle, the opacity of the previous circles underneath is
effectively increased.
If we were to increase the step count (and thus draw more circles), the
background would eventually disappear completely from the center of the
image.
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

\f[I]// Draw background\f[R]
ctx.fillStyle = \(dq#FD0\(dq;
ctx.fillRect(0, 0, 75, 75);
ctx.fillStyle = \(dq#6C0\(dq;
ctx.fillRect(75, 0, 75, 75);
ctx.fillStyle = \(dq#09F\(dq;
ctx.fillRect(0, 75, 75, 75);
ctx.fillStyle = \(dq#F30\(dq;
ctx.fillRect(75, 75, 75, 75);
ctx.fillStyle = \(dq#FFF\(dq;

\f[I]// Set transparency value\f[R]
ctx.globalAlpha = 0.2;

\f[I]// Draw transparent circles\f[R]
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < 7; i++) {
  ctx.beginPath();
  ctx.arc(75, 75, 10 + 10 * i, 0, Math.PI * 2, \f[B]true\f[R]);
  ctx.fill();
}
.EE
.SS Gecko\-specific notes
.IP \(bu 2
Starting with Gecko 5.0, specifying invalid values for
\f[CR]globalAlpha\f[R] no longer throws a \f[CR]SYNTAX_ERR\f[R]
exception; these are now correctly silently ignored.
.SS WebKit/Blink\-specific notes
.IP \(bu 2
In WebKit\- and Blink\-based browsers, a non\-standard and deprecated
method \f[CR]ctx.setAlpha()\f[R] is implemented in addition to this
property.
.SH SEE ALSO
.IP \(bu 2
The interface defining this property:
\f[CR]CanvasRenderingContext2D\f[R]
.IP \(bu 2
\f[CR]CanvasRenderingContext2D.globalCompositeOperation\f[R]
