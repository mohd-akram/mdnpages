.\" Automatically generated by Pandoc 3.4
.\"
.TH "WorkerGlobalScope.reportError" "JS" "September 27, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WorkerGlobalScope.reportError \- WorkerGlobalScope: reportError() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Web Workers.
.PP
The \f[B]\f[CB]reportError()\f[B]\f[R] method of the
\f[CR]WorkerGlobalScope\f[R] interface may be used to report errors to
the console or event handlers of global scopes, emulating an uncaught
JavaScript exception.
.PP
This feature is primarily intended for custom event\-dispatching or
callback\-manipulating libraries.
Libraries can use this feature to catch errors in callback code and
re\-throw them to the top level handler.
This ensures that an exception in one callback will not prevent others
from being handled, while at the same time ensuring that stack trace
information is still readily available for debugging at the top level.
.SH SYNTAX
.IP
.EX
reportError(throwable)
.EE
.SS Parameters
.TP
\f[B]throwable\f[R]
An error object such as a \f[CR]TypeError\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The method is called without an error argument.
.SH EXAMPLES
Feature test for the method using:
.IP
.EX
\f[B]if\f[R] (\f[B]typeof\f[R] self.reportError === \[dq]function\[dq]) {
  \f[I]// function is defined\f[R]
}
.EE
.PP
The following code shows how you might create and report an error, and
how it may be caught using either the \f[CR]onerror\f[R] event handler
property or by adding a listener for the \f[CR]error\f[R] event.
Note that the handler assigned to \f[CR]onerror\f[R] must return
\f[CR]true\f[R] to stop the event propagating further.
.IP
.EX
\f[B]const\f[R] newError = \f[B]new\f[R] Error(\[dq]Some error message\[dq], \[dq]someFile.js\[dq], 11);
self.reportError(newError);

self.onerror = (message, source, lineno, colno, error) \f[B]=>\f[R] {
  console.error(\[ga]message: ${error.message}, lineno: ${lineno}\[ga]);
  \f[B]return\f[R] \f[B]true\f[R];
};

self.addEventListener(\[dq]error\[dq], (error) \f[B]=>\f[R] {
  console.error(error.filename);
});

\f[I]// Output\f[R]
\f[I]// > \[dq]message:Some error message, lineno: 11\[dq]\f[R]
\f[I]// > \[dq]someFile.js\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WorkerGlobalScope\f[R]
.IP \[bu] 2
\f[CR]Window.reportError()\f[R]
.IP \[bu] 2
\f[CR]error\f[R] event
.IP \[bu] 2
\f[CR]error\f[R] event
.IP \[bu] 2
\f[CR]error\f[R] event
