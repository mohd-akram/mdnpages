'\" t
.\" Automatically generated by Pandoc 3.4
.\"
.TH "TreeWalker" "JS" "September 2, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TreeWalker \- TreeWalker
.SH SYNOPSIS
The \f[B]\f[CB]TreeWalker\f[B]\f[R] object represents the nodes of a
document subtree and a position within them.
.PP
A \f[CR]TreeWalker\f[R] can be created using the
\f[CR]Document.createTreeWalker()\f[R] method.
.SH INSTANCE PROPERTIES
\f[I]This interface doesn\[cq]t inherit any property.\f[R]
.TP
\f[B]TreeWalker.root\f[R] \f[I](read\-only)\f[R]
Returns the root \f[CR]Node\f[R] as specified when the
\f[CR]TreeWalker\f[R] was created.
.TP
\f[B]TreeWalker.whatToShow\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]unsigned long\f[R] being a bitmask made of constants
describing the types of \f[CR]Node\f[R] that must be presented.
Non\-matching nodes are skipped, but their children may be included, if
relevant.
The possible values are:
.RS
.PP
.TS
tab(@);
lw(8.2n) lw(8.0n) lw(53.8n).
T{
Constant
T}@T{
Numerical value
T}@T{
Description
T}
_
T{
\f[CR]NodeFilter.SHOW_ALL\f[R]
T}@T{
\f[CR]4294967295\f[R] (that is the max value of
\f[CR]unsigned long\f[R])
T}@T{
Shows all nodes.
T}
T{
\f[CR]NodeFilter.SHOW_ATTRIBUTE\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]2\f[R]
T}@T{
Shows attribute \f[CR]Attr\f[R] nodes.
This is meaningful only when creating a \f[CR]TreeWalker\f[R] with an
\f[CR]Attr\f[R] node as its root.
In this case, it means that the attribute node will appear in the first
position of the iteration or traversal.
Since attributes are never children of other nodes, they do not appear
when traversing over the document tree.
T}
T{
\f[CR]NodeFilter.SHOW_CDATA_SECTION\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]8\f[R]
T}@T{
Shows \f[CR]CDATASection\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_COMMENT\f[R]
T}@T{
\f[CR]128\f[R]
T}@T{
Shows \f[CR]Comment\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_DOCUMENT\f[R]
T}@T{
\f[CR]256\f[R]
T}@T{
Shows \f[CR]Document\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_DOCUMENT_FRAGMENT\f[R]
T}@T{
\f[CR]1024\f[R]
T}@T{
Shows \f[CR]DocumentFragment\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_DOCUMENT_TYPE\f[R]
T}@T{
\f[CR]512\f[R]
T}@T{
Shows \f[CR]DocumentType\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_ELEMENT\f[R]
T}@T{
\f[CR]1\f[R]
T}@T{
Shows \f[CR]Element\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_ENTITY\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]32\f[R]
T}@T{
Legacy, no more usable.
T}
T{
\f[CR]NodeFilter.SHOW_ENTITY_REFERENCE\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]16\f[R]
T}@T{
Legacy, no more usable.
T}
T{
\f[CR]NodeFilter.SHOW_NOTATION\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]2048\f[R]
T}@T{
Legacy, no more usable.
T}
T{
\f[CR]NodeFilter.SHOW_PROCESSING_INSTRUCTION\f[R]
T}@T{
\f[CR]64\f[R]
T}@T{
Shows \f[CR]ProcessingInstruction\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_TEXT\f[R]
T}@T{
\f[CR]4\f[R]
T}@T{
Shows \f[CR]Text\f[R] nodes.
T}
.TE
.RE
.TP
\f[B]TreeWalker.filter\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]NodeFilter\f[R] associated with this
\f[CR]TreeWalker\f[R] used to select the relevant nodes.
.TP
\f[B]TreeWalker.currentNode\f[R]
Is the \f[CR]Node\f[R] on which the \f[CR]TreeWalker\f[R] is currently
pointing at.
.SH INSTANCE METHODS
\f[I]This interface doesn\[cq]t inherit any method.\f[R]
.RS
.PP
\f[B]Note:\f[R] In the context of a \f[CR]TreeWalker\f[R], a node is
\f[I]visible\f[R] if it exists in the logical view determined by the
\f[CR]whatToShow\f[R] and \f[CR]filter\f[R] parameter arguments.
(Whether or not the node is visible on the screen is irrelevant.)
.RE
.TP
\f[B]TreeWalker.parentNode()\f[R]
Moves the current \f[CR]Node\f[R] to the first \f[I]visible\f[R]
ancestor node in the document order, and returns the found node.
It also moves the current node to this one.
If no such node exists, or if it is before that the \f[I]root node\f[R]
defined at the object construction, returns \f[CR]null\f[R] and the
current node is not changed.
.TP
\f[B]TreeWalker.firstChild()\f[R]
Moves the current \f[CR]Node\f[R] to the first \f[I]visible\f[R] child
of the current node, and returns the found child.
It also moves the current node to this child.
If no such child exists, returns \f[CR]null\f[R] and the current node is
not changed.
Note that the node returned by \f[CR]firstChild()\f[R] is dependent on
the value of \f[CR]whatToShow\f[R] set during instantiation of the
\f[CR]TreeWalker\f[R] object.
Assuming the following HTML tree, and if you set the
\f[CR]whatToShow\f[R] to \f[CR]NodeFilter.SHOW_ALL\f[R] a call to
\f[CR]firstChild()\f[R] will return a \f[CR]Text\f[R] node and not an
\f[CR]HTMLDivElement\f[R] object.
.RS
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\[dq]en\[dq]>
  <\f[B]head\f[R]><\f[B]title\f[R]>Demo</\f[B]title\f[R]>
  <\f[B]body\f[R]>
    <\f[B]div\f[R] id=\[dq]container\[dq]></\f[B]div\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.IP
.EX
\f[B]let\f[R] walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ALL);
\f[B]let\f[R] node = walker.firstChild(); \f[I]// nodeName: \[dq]#text\[dq]\f[R]
.EE
.PP
But if we do:
.IP
.EX
\f[B]let\f[R] walker = document.createTreeWalker(
  document.body,
  NodeFilter.SHOW_ELEMENT,
);
\f[B]let\f[R] node = walker.firstChild(); \f[I]// nodeName: \[dq]DIV\[dq]\f[R]
.EE
.PP
The same applies to \f[CR]nextSibling()\f[R],
\f[CR]previousSibling()\f[R], \f[CR]firstChild()\f[R] and
\f[CR]lastChild()\f[R]
.RE
.TP
\f[B]TreeWalker.lastChild()\f[R]
Moves the current \f[CR]Node\f[R] to the last \f[I]visible\f[R] child of
the current node, and returns the found child.
It also moves the current node to this child.
If no such child exists, \f[CR]null\f[R] is returned and the current
node is not changed.
.TP
\f[B]TreeWalker.previousSibling()\f[R]
Moves the current \f[CR]Node\f[R] to its previous sibling, if any, and
returns the found sibling.
If there is no such node, return \f[CR]null\f[R] and the current node is
not changed.
.TP
\f[B]TreeWalker.nextSibling()\f[R]
Moves the current \f[CR]Node\f[R] to its next sibling, if any, and
returns the found sibling.
If there is no such node, \f[CR]null\f[R] is returned and the current
node is not changed.
.TP
\f[B]TreeWalker.previousNode()\f[R]
Moves the current \f[CR]Node\f[R] to the previous \f[I]visible\f[R] node
in the document order, and returns the found node.
It also moves the current node to this one.
If no such node exists, or if it is before that the \f[I]root node\f[R]
defined at the object construction, returns \f[CR]null\f[R] and the
current node is not changed.
.TP
\f[B]TreeWalker.nextNode()\f[R]
Moves the current \f[CR]Node\f[R] to the next \f[I]visible\f[R] node in
the document order, and returns the found node.
It also moves the current node to this one.
If no such node exists, returns \f[CR]null\f[R] and the current node is
not changed.
.SH SEE ALSO
.IP \[bu] 2
The creator method: \f[CR]Document.createTreeWalker()\f[R].
.IP \[bu] 2
Related interface: \f[CR]NodeIterator\f[R].
