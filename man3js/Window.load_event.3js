.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Window.load_event" "JS" "August 4, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.load_event \- Window: load event
.SH SYNOPSIS
The \f[B]\f[CB]load\f[B]\f[R] event is fired when the whole page has
loaded, including all dependent resources such as stylesheets, scripts,
iframes, and images.
This is in contrast to \f[CR]DOMContentLoaded\f[R], which is fired as
soon as the page DOM has been loaded, without waiting for resources to
finish loading.
.PP
This event is not cancelable and does not bubble.
.RS
.PP
\f[B]Note:\f[R] \f[I]All events named \f[CI]load\f[I] will not propagate
to \f[CI]Window\f[I]\f[R], even with \f[CR]bubbles\f[R] initialized to
\f[CR]true\f[R].
To catch \f[CR]load\f[R] events on the \f[CR]window\f[R], that
\f[CR]load\f[R] event must be dispatched directly to the
\f[CR]window\f[R].
.RE
.RS
.PP
\f[B]Note:\f[R] The \f[CR]load\f[R] event that is dispatched when the
main document has loaded \f[I]is\f[R] dispatched on the
\f[CR]window\f[R], but has two mutated properties: \f[CR]target\f[R] is
\f[CR]document\f[R], and \f[CR]path\f[R] is \f[CR]undefined\f[R].
These two properties are mutated due to legacy conformance.
.RE
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]load\[dq], (event) \f[B]=>\f[R] {});

onload = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
Log a message when the page is fully loaded:
.IP
.EX
window.addEventListener(\[dq]load\[dq], (event) \f[B]=>\f[R] {
  console.log(\[dq]page is fully loaded\[dq]);
});
.EE
.PP
The same, but using the \f[CR]onload\f[R] event handler property:
.IP
.EX
window.onload = (event) \f[B]=>\f[R] {
  console.log(\[dq]page is fully loaded\[dq]);
};
.EE
.SS Live example
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\[dq]controls\[dq]>
  <\f[B]button\f[R] id=\[dq]reload\[dq] type=\[dq]button\[dq]>Reload</\f[B]button\f[R]>
</\f[B]div\f[R]>

<\f[B]div\f[R] class=\[dq]event\-log\[dq]>
  <\f[B]label\f[R] for=\[dq]eventLog\[dq]>Event log:</\f[B]label\f[R]>
  <\f[B]textarea\f[R]
    readonly
    class=\[dq]event\-log\-contents\[dq]
    rows=\[dq]8\[dq]
    cols=\[dq]30\[dq]
    id=\[dq]eventLog\[dq]></\f[B]textarea\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] log = document.querySelector(\[dq].event\-log\-contents\[dq]);
\f[B]const\f[R] reload = document.querySelector(\[dq]#reload\[dq]);

reload.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  log.textContent = \[dq]\[dq];
  setTimeout(() \f[B]=>\f[R] {
    window.location.reload(\f[B]true\f[R]);
  }, 200);
});

window.addEventListener(\[dq]load\[dq], (event) \f[B]=>\f[R] {
  log.textContent += \[dq]load\[rs]n\[dq];
});

document.addEventListener(\[dq]readystatechange\[dq], (event) \f[B]=>\f[R] {
  log.textContent += \[ga]readystate: ${document.readyState}\[rs]n\[ga];
});

document.addEventListener(\[dq]DOMContentLoaded\[dq], (event) \f[B]=>\f[R] {
  log.textContent += \[ga]DOMContentLoaded\[rs]n\[ga];
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Document readyState API
.IP \[bu] 2
Related events:
.RS 2
.IP \[bu] 2
\f[CR]DOMContentLoaded\f[R]
.IP \[bu] 2
\f[CR]readystatechange\f[R]
.IP \[bu] 2
\f[CR]beforeunload\f[R]
.IP \[bu] 2
\f[CR]unload\f[R]
.RE
