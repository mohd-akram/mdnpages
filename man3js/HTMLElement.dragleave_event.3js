.\" Automatically generated by Pandoc 3.4
.\"
.TH "HTMLElement.dragleave_event" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLElement.dragleave_event \- HTMLElement: dragleave event
.SH SYNOPSIS
The \f[CR]dragleave\f[R] event is fired when a dragged element or text
selection leaves a valid drop target.
.PP
This event is not cancelable and may bubble up to the
\f[CR]Document\f[R] and \f[CR]Window\f[R] objects.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]dragleave\[dq], (event) \f[B]=>\f[R] {});

ondragleave = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]DragEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]In addition to the properties listed below, properties from the
parent interface, \f[CI]Event\f[I], are available.\f[R]
.TP
\f[B]DragEvent.dataTransfer\f[R] \f[I](read\-only)\f[R]
The data that is transferred during a drag\-and\-drop interaction.
.SH EXAMPLES
.SS Resetting drop zone styles on dragleave
In this example, we have a draggable element inside a container.
Try grabbing the element, dragging it over the other container, and
releasing it.
.PP
We give the other container a purple background while the draggable
element is over to signal that it could be dropped onto the container.
We listen for the \f[CR]dragleave\f[R] event to reset the container
background when dragging the draggable element off the container.
.PP
However, in this partial example, we haven\[cq]t implemented dropping:
for a complete example of drag and drop, see the page for the
\f[CR]drag\f[R] event.
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\[dq]dropzone\[dq]>
  <\f[B]div\f[R] id=\[dq]draggable\[dq] draggable=\[dq]true\[dq]>This div is draggable</\f[B]div\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] class=\[dq]dropzone\[dq] id=\[dq]drop\-target\[dq]></\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
body {
  \f[I]/* Prevent the user from selecting text in the example */\f[R]
  \f[B]user\-select\f[R]: none;
}

draggable {
  \f[B]text\-align\f[R]: center;
  \f[B]background\f[R]: white;
}

\&.dropzone {
  \f[B]width\f[R]: 200px;
  \f[B]height\f[R]: 20px;
  \f[B]background\f[R]: blueviolet;
  \f[B]margin\f[R]: 10px;
  \f[B]padding\f[R]: 10px;
}

\&.dropzone.dragover {
  \f[B]background\-color\f[R]: purple;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] target = document.getElementById(\[dq]drop\-target\[dq]);
target.addEventListener(\[dq]dragenter\[dq], (event) \f[B]=>\f[R] {
  \f[I]// highlight potential drop target when the draggable element enters it\f[R]
  \f[B]if\f[R] (event.target.classList.contains(\[dq]dropzone\[dq])) {
    event.target.classList.add(\[dq]dragover\[dq]);
  }
});

target.addEventListener(\[dq]dragleave\[dq], (event) \f[B]=>\f[R] {
  \f[I]// reset background of potential drop target when the draggable element leaves it\f[R]
  \f[B]if\f[R] (event.target.classList.contains(\[dq]dropzone\[dq])) {
    event.target.classList.remove(\[dq]dragover\[dq]);
  }
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Other drag and drop events:
.RS 2
.IP \[bu] 2
\f[CR]drag\f[R]
.IP \[bu] 2
\f[CR]dragstart\f[R]
.IP \[bu] 2
\f[CR]dragend\f[R]
.IP \[bu] 2
\f[CR]dragover\f[R]
.IP \[bu] 2
\f[CR]dragenter\f[R]
.IP \[bu] 2
\f[CR]drop\f[R]
.RE
