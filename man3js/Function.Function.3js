.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "FUNCTION.FUNCTION" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Function.Function \- Function() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Function()\f[B]\f[R] constructor creates
\f[CR]Function\f[R] objects.
Calling the constructor directly can create functions dynamically, but
suffers from security and similar (but far less significant) performance
issues as \f[CR]eval()\f[R].
However, unlike \f[CR]eval\f[R] (which may have access to the local
scope), the \f[CR]Function\f[R] constructor creates functions which
execute in the global scope only.
.IP
.EX
\f[B]const\f[R] sum = \f[B]new\f[R] Function(\(dqa\(dq, \(dqb\(dq, \(dqreturn a + b\(dq);

console.log(sum(2, 6));
\f[I]// Expected output: 8\f[R]
.EE
.SH SYNTAX
.IP
.EX
new Function(functionBody)
new Function(arg1, functionBody)
new Function(arg1, arg2, functionBody)
new Function(arg1, arg2, /* \&..., */ argN, functionBody)

Function(functionBody)
Function(arg1, functionBody)
Function(arg1, arg2, functionBody)
Function(arg1, arg2, /* \&..., */ argN, functionBody)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Function()\f[R] can be called with or without
\f[CR]new\f[R].
Both create a new \f[CR]Function\f[R] instance.
.RE
.SS Parameters
.TP
\f[B]arg1\f[R], \&..., \f[B]argN\f[R] \f[I](optional)\f[R]
Names to be used by the function as formal argument names.
Each must be a string that corresponds to a valid JavaScript parameter
(any of plain identifier, rest parameter, or destructured parameter,
optionally with a default), or a list of such strings separated with
commas.
.RS
.PP
As the parameters are parsed in the same way as function expressions,
whitespace and comments are accepted.
For example:
\f[CR]\(dqx\(dq, \(dqtheValue = 42\(dq, \(dq[a, b] /* numbers */\(dq\f[R]
\(em or \f[CR]\(dqx, theValue = 42, [a, b] /* numbers */\(dq\f[R].
(\f[CR]\(dqx, theValue = 42\(dq, \(dq[a, b]\(dq\f[R] is also correct,
though very confusing to read.)
.RE
.TP
\f[B]functionBody\f[R]
A string containing the JavaScript statements comprising the function
definition.
.SH DESCRIPTION
\f[CR]Function\f[R] objects created with the \f[CR]Function\f[R]
constructor are parsed when the function is created.
This is less efficient than creating a function with a function
expression or function declaration and calling it within your code,
because such functions are parsed with the rest of the code.
.PP
All arguments passed to the function, except the last, are treated as
the names of the identifiers of the parameters in the function to be
created, in the order in which they are passed.
The function will be dynamically compiled as a function expression, with
the source assembled in the following fashion:
.IP
.EX
\(gafunction anonymous(${args.join(\(dq,\(dq)}
) {
${functionBody}
}\(ga;
.EE
.PP
This is observable by calling the function\(cqs \f[CR]toString()\f[R]
method.
.PP
However, unlike normal function expressions, the name
\f[CR]anonymous\f[R] is not added to the \f[CR]functionBody\f[R]\(cqs
scope, since \f[CR]functionBody\f[R] only has access the global scope.
If \f[CR]functionBody\f[R] is not in strict mode (the body itself needs
to have the \f[CR]\(dquse strict\(dq\f[R] directive since it doesn\(cqt
inherit the strictness from the context), you may use
\f[CR]arguments.callee\f[R] to refer to the function itself.
Alternatively, you can define the recursive part as an inner function:
.IP
.EX
\f[B]const\f[R] recursiveFn = \f[B]new\f[R] Function(
  \(dqcount\(dq,
  \(ga
(function recursiveFn(count) {
  if (count < 0) {
    return;
  }
  console.log(count);
  recursiveFn(count \- 1);
})(count);
\(ga,
);
.EE
.PP
Note that the two dynamic parts of the assembled source \(em the
parameters list \f[CR]args.join(\(dq,\(dq)\f[R] and
\f[CR]functionBody\f[R] \(em will first be parsed separately to ensure
they are each syntactically valid.
This prevents injection\-like attempts.
.IP
.EX
\f[B]new\f[R] Function(\(dq/*\(dq, \(dq*/) {\(dq);
\f[I]// SyntaxError: Unexpected end of arg string\f[R]
\f[I]// Doesn\(aqt become \(dqfunction anonymous(/*) {*/) {}\(dq\f[R]
.EE
.SH EXAMPLES
.SS Specifying arguments with the Function constructor
The following code creates a \f[CR]Function\f[R] object that takes two
arguments.
.IP
.EX
\f[I]// Example can be run directly in your JavaScript console\f[R]

\f[I]// Create a function that takes two arguments, and returns the sum of those arguments\f[R]
\f[B]const\f[R] adder = \f[B]new\f[R] Function(\(dqa\(dq, \(dqb\(dq, \(dqreturn a + b\(dq);

\f[I]// Call the function\f[R]
adder(2, 6);
\f[I]// 8\f[R]
.EE
.PP
The arguments \f[CR]a\f[R] and \f[CR]b\f[R] are formal argument names
that are used in the function body, \f[CR]return a + b\f[R].
.SS Creating a function object from a function declaration or function expression
.IP
.EX
\f[I]// The function constructor can take in multiple statements separated by a semicolon. Function expressions require a return statement with the function\(aqs name\f[R]

\f[I]// Observe that new Function is called. This is so we can call the function we created directly afterwards\f[R]
\f[B]const\f[R] sumOfArray = \f[B]new\f[R] Function(
  \(dqconst sumArray = (arr) => arr.reduce((previousValue, currentValue) => previousValue + currentValue); return sumArray\(dq,
)();

\f[I]// call the function\f[R]
sumOfArray([1, 2, 3, 4]);
\f[I]// 10\f[R]

\f[I]// If you don\(aqt call new Function at the point of creation, you can use the Function.call() method to call it\f[R]
\f[B]const\f[R] findLargestNumber = \f[B]new\f[R] Function(
  \(dqfunction findLargestNumber (arr) { return Math.max(...arr) }; return findLargestNumber\(dq,
);

\f[I]// call the function\f[R]
findLargestNumber.call({}).call({}, [2, 4, 1, 8, 5]);
\f[I]// 8\f[R]

\f[I]// Function declarations do not require a return statement\f[R]
\f[B]const\f[R] sayHello = \f[B]new\f[R] Function(
  \(dqreturn function (name) { return \(gaHello, ${name}\(ga }\(dq,
)();

\f[I]// call the function\f[R]
sayHello(\(dqworld\(dq);
\f[I]// Hello, world\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]function\f[R]
.IP \(bu 2
\f[CR]function\f[R] expression
.IP \(bu 2
Functions
