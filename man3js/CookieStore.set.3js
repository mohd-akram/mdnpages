.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "COOKIESTORE.SET" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CookieStore.set \- CookieStore: set() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Service Workers.
.PP
The \f[B]\f[CB]set()\f[B]\f[R] method of the \f[CR]CookieStore\f[R]
interface sets a cookie with the given \f[CR]name\f[R] and
\f[CR]value\f[R] or \f[CR]options\f[R] object.
.SH SYNTAX
.IP
.EX
set(name, value)
set(options)
.EE
.SS Parameters
This method requires one of the following:
.TP
\f[B]name\f[R] \f[I](optional)\f[R]
A string with the name of the cookie.
.TP
\f[B]value\f[R] \f[I](optional)\f[R]
A string with the value of the cookie.
.PP
Or
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing:
.RS
.TP
\f[B]domain\f[R] \f[I](optional)\f[R]
A string containing the domain of the cookie.
Defaults to \f[CR]null\f[R].
.TP
\f[B]expires\f[R] \f[I](optional)\f[R]
A timestamp, given as Unix time in milliseconds, containing the
expiration date of the cookie.
Defaults to \f[CR]null\f[R].
.TP
\f[B]name\f[R]
A string with the name of a cookie.
.TP
\f[B]partitioned\f[R] \f[I](optional)\f[R]
A boolean value that defaults to \f[CR]false\f[R].
If set to \f[CR]true\f[R], the set cookie will be a partitioned cookie.
See Cookies Having Independent Partitioned State (CHIPS) for more
information.
.TP
\f[B]path\f[R] \f[I](optional)\f[R]
A string containing the path of the cookie.
Defaults to \f[CR]/\f[R].
.TP
\f[B]sameSite\f[R] \f[I](optional)\f[R]
One of the following \f[CR]SameSite\f[R] values:
\f[CR]\(dqstrict\(dq\f[R], \f[CR]\(dqlax\(dq\f[R], or
\f[CR]\(dqnone\(dq\f[R].
.TP
\f[B]value\f[R]
A string with the value of the cookie.
.RE
.RS
.PP
\f[B]Note:\f[R] While the values can be set here and will be used
internally, some browsers will only return \f[CR]name\f[R] and
\f[CR]value\f[R] options from \f[CR]CookieStore.get()\f[R] and
\f[CR]CookieStore.getAll()\f[R].
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with \f[CR]undefined\f[R] when
setting the cookie completes.
.SS Exceptions
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Thrown if the origin can not be serialized to a URL.
.TP
\f[B]TypeError\f[R]
Thrown if setting the cookie with the given \f[CR]name\f[R] and
\f[CR]value\f[R] or \f[CR]options\f[R] fails.
.SH EXAMPLES
.SS Setting a cookie with name and value
This example sets a cookie by passing a \f[CR]name\f[R] and
\f[CR]value\f[R] of \(lqcookie1\(rq and \(lqcookie1\-value\(rq,
respectively.
The other properties of the cookie are set with default values, as
defined in the \f[CR]options\f[R] parameter.
.PP
The code first waits for the cookie to be set: as this operation can
fail, the operation is performed in a \f[CR]try...catch\f[R] block and
any errors are logged to the console.
It then gets and logs the cookie that was just set.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] cookieTest() {
  \f[I]// Set cookie: passing name and value\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set(\(dqcookie1\(dq, \(dqcookie1\-value\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie1: ${error}\(ga);
  }

  \f[I]// Get the cookie and log its values\f[R]
  \f[B]const\f[R] cookie = \f[B]await\f[R] cookieStore.get(\(dqcookie1\(dq);
  console.log(cookie);
}
.EE
.SS Setting a cookie with options
This example sets a cookie by passing an \f[CR]options\f[R] object with
\f[CR]name\f[R], \f[CR]value\f[R], \f[CR]expires\f[R], and
\f[CR]partitioned\f[R].
.PP
The code first waits for the cookie to be set: as this operation can
fail, the operation is performed in a \f[CR]try...catch\f[R] block and
any errors are logged to the console.
It then gets and logs the cookie that was just set.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] cookieTest() {
  \f[B]const\f[R] day = 24 * 60 * 60 * 1000;
  \f[B]const\f[R] cookieName = \(dqcookie2\(dq;
  \f[B]try\f[R] {
    \f[I]// Set cookie: passing options\f[R]
    \f[B]await\f[R] cookieStore.set({
      name: cookieName,
      value: \(ga${cookieName}\-value\(ga,
      expires: Date.now() + day,
      partitioned: \f[B]true\f[R],
    });
  } \f[B]catch\f[R] (error) {
    log(\(gaError setting ${cookieName}: ${error}\(ga);
    console.log(error);
  }

  \f[I]// Log the new cookie\f[R]
  \f[B]const\f[R] cookie = \f[B]await\f[R] cookieStore.get(cookieName);
  console.log(cookie);
}
.EE
