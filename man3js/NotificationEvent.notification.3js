.\" Automatically generated by Pandoc 3.4
.\"
.TH "NotificationEvent.notification" "JS" "April 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
NotificationEvent.notification \- NotificationEvent: notification
property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
The \f[B]\f[CB]notification\f[B]\f[R] read\-only property of the
\f[CR]NotificationEvent\f[R] interface returns the instance of the
\f[CR]Notification\f[R] that was clicked to fire the event.
The \f[CR]Notification\f[R] provides read\-only access to many
properties that were set at the instantiation time of the Notification
such as \f[CR]tag\f[R] and \f[CR]data\f[R] attributes that allow you to
store information for deferred use in the \f[CR]notificationclick\f[R]
event.
.SH VALUE
A \f[CR]Notification\f[R] object.
.SH EXAMPLES
.IP
.EX
self.addEventListener(\[dq]notificationclick\[dq], (event) \f[B]=>\f[R] {
  console.log(\[dq]On notification click\[dq]);

  \f[I]// Data can be attached to the notification so that you\f[R]
  \f[I]// can process it in the notificationclick handler.\f[R]
  console.log(\[ga]Notification Tag: ${event.notification.tag}\[ga]);
  console.log(\[ga]Notification Data: ${event.notification.data}\[ga]);
  event.notification.close();

  \f[I]// This looks to see if the current is already open and\f[R]
  \f[I]// focuses if it is\f[R]
  event.waitUntil(
    clients
      .matchAll({
        type: \[dq]window\[dq],
      })
      .then((clientList) \f[B]=>\f[R] {
        \f[B]for\f[R] (\f[B]const\f[R] client \f[B]of\f[R] clientList) {
          \f[B]if\f[R] (client.url === \[dq]/\[dq] && \[dq]focus\[dq] \f[B]in\f[R] client) \f[B]return\f[R] client.focus();
        }
        \f[B]if\f[R] (clients.openWindow) \f[B]return\f[R] clients.openWindow(\[dq]/\[dq]);
      }),
  );
});
.EE
