.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "FileReader.error_event" "JS" "May 14, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileReader.error_event \- FileReader: error event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]error\f[B]\f[R] event of the \f[CR]FileReader\f[R]
interface is fired when the read failed due to an error (for example,
because the file was not found or not readable).
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]error\[dq], (event) \f[B]=>\f[R] {});

onerror = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]ProgressEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent \f[CI]Event\f[I]\f[R].
.TP
\f[B]ProgressEvent.lengthComputable\f[R] \f[I](read\-only)\f[R]
A boolean flag indicating if the total work to be done, and the amount
of work already done, by the underlying process is calculable.
In other words, it tells if the progress is measurable or not.
.TP
\f[B]ProgressEvent.loaded\f[R] \f[I](read\-only)\f[R]
A 64\-bit unsigned integer value indicating the amount of work already
performed by the underlying process.
The ratio of work done can be calculated by dividing \f[CR]total\f[R] by
the value of this property.
When downloading a resource using HTTP, this only counts the body of the
HTTP message, and doesn\[cq]t include headers and other overhead.
.TP
\f[B]ProgressEvent.total\f[R] \f[I](read\-only)\f[R]
A 64\-bit unsigned integer representing the total amount of work that
the underlying process is in the progress of performing.
When downloading a resource using HTTP, this is the
\f[CR]Content\-Length\f[R] (the size of the body of the message), and
doesn\[cq]t include the headers and other overhead.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] fileInput = document.querySelector(\[aq]input[type=\[dq]file\[dq]]\[aq]);
\f[B]const\f[R] reader = \f[B]new\f[R] FileReader();

\f[B]function\f[R] handleSelected(e) {
  \f[B]const\f[R] selectedFile = fileInput.files[0];
  \f[B]if\f[R] (selectedFile) {
    reader.addEventListener(\[dq]error\[dq], () \f[B]=>\f[R] {
      console.error(\[ga]Error occurred reading file: ${selectedFile.name}\[ga]);
    });

    reader.addEventListener(\[dq]load\[dq], () \f[B]=>\f[R] {
      console.log(\[ga]File: ${selectedFile.name} read successfully\[ga]);
    });

    reader.readAsDataURL(selectedFile);
  }
}

fileInput.addEventListener(\[dq]change\[dq], handleSelected);
.EE
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]loadstart\f[R], \f[CR]loadend\f[R],
\f[CR]progress\f[R], \f[CR]load\f[R], \f[CR]abort\f[R]
