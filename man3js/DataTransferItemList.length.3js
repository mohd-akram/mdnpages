.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATATRANSFERITEMLIST.LENGTH" "3JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList.length \- DataTransferItemList: length property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]length\f[B]\f[R] property of the
\f[CR]DataTransferItemList\f[R] interface returns the number of items
currently in the drag item list.
.SH VALUE
The number of drag data items in the list, or 0 if the list is empty or
disabled.
The drag item list is considered to be disabled if the item list\(cqs
\f[CR]DataTransfer\f[R] object is not associated with a drag data store.
.SH EXAMPLES
This example shows the use of the \f[CR]length\f[R] property.
.SS JavaScript
.IP
.EX
\f[B]function\f[R] dragstart_handler(ev) {
  console.log(\(dqdragStart\(dq);
  \f[I]// Add this element\(aqs id to the drag payload so the drop handler will\f[R]
  \f[I]// know which element to add to its tree\f[R]
  \f[B]const\f[R] dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \(dqtext/plain\(dq);
  \f[I]// Add some other items to the drag payload\f[R]
  dataList.add(\(dq<p>Paragraph\&...</p>\(dq, \(dqtext/html\(dq);
  dataList.add(\(dqhttp://www.example.org\(dq, \(dqtext/uri\-list\(dq);
}

\f[B]function\f[R] drop_handler(ev) {
  console.log(\(dqDrop\(dq);
  ev.preventDefault();
  \f[B]const\f[R] data = ev.dataTransfer.items;
  \f[I]// Loop through the dropped items and log their data\f[R]
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < data.length; i++) {
    \f[B]if\f[R] (data[i].kind === \(dqstring\(dq && data[i].type.match(\(dq\(hatext/plain\(dq)) {
      \f[I]// This item is the target node\f[R]
      data[i].getAsString((s) \f[B]=>\f[R] {
        ev.target.appendChild(document.getElementById(s));
      });
    } \f[B]else\f[R] \f[B]if\f[R] (data[i].kind === \(dqstring\(dq && data[i].type.match(\(dq\(hatext/html\(dq)) {
      \f[I]// Drag data item is HTML\f[R]
      data[i].getAsString((s) \f[B]=>\f[R] {
        console.log(\(ga\&... Drop: HTML = ${s}\(ga);
      });
    } \f[B]else\f[R] \f[B]if\f[R] (
      data[i].kind === \(dqstring\(dq &&
      data[i].type.match(\(dq\(hatext/uri\-list\(dq)
    ) {
      \f[I]// Drag data item is URI\f[R]
      data[i].getAsString((s) \f[B]=>\f[R] {
        console.log(\(ga\&... Drop: URI = ${s}\(ga);
      });
    }
  }
}

\f[B]function\f[R] dragover_handler(ev) {
  console.log(\(dqdragOver\(dq);
  ev.preventDefault();
  \f[I]// Set the dropEffect to move\f[R]
  ev.dataTransfer.dropEffect = \(dqmove\(dq;
}

\f[B]function\f[R] dragend_handler(ev) {
  console.log(\(dqdragEnd\(dq);
  \f[B]const\f[R] dataList = ev.dataTransfer.items;
  \f[I]// Clear any remaining drag data\f[R]
  dataList.clear();
}
.EE
.SS HTML
.IP
.EX
<\f[B]div\f[R]>
  <\f[B]p\f[R]
    id=\(dqsource\(dq
    ondragstart=\(dqdragstart_handler(event);\(dq
    ondragend=\(dqdragend_handler(event);\(dq
    draggable=\(dqtrue\(dq>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </\f[B]p\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R]
  id=\(dqtarget\(dq
  ondrop=\(dqdrop_handler(event);\(dq
  ondragover=\(dqdragover_handler(event);\(dq>
  Drop Zone
</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]margin\f[R]: 0em;
  \f[B]padding\f[R]: 2em;
}

source {
  \f[B]color\f[R]: blue;
  \f[B]border\f[R]: 1px solid black;
}

target {
  \f[B]border\f[R]: 1px solid black;
}
.EE
.SS Result
