.\" Automatically generated by Pandoc 3.4
.\"
.TH "IDBObjectStore.deleteIndex" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore.deleteIndex \- IDBObjectStore: deleteIndex() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]deleteIndex()\f[B]\f[R] method of the
\f[CR]IDBObjectStore\f[R] interface destroys the index with the
specified name in the connected database, used during a version upgrade.
.PP
Note that this method must be called only from a
\f[CR]VersionChange\f[R] transaction mode callback.
Note that this method synchronously modifies the
\f[CR]IDBObjectStore.indexNames\f[R] property.
.SH SYNTAX
.IP
.EX
deleteIndex(indexName)
.EE
.SS Parameters
.TP
\f[B]indexName\f[R]
The name of the existing index to remove.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the method was not called from a \f[CR]versionchange\f[R]
transaction mode callback.
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if the transaction this \f[CR]IDBObjectStore\f[R] belongs to is
not active (e.g.\ has been deleted or removed.)
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if there is no index with the given name (case\-sensitive) in the
database.
.SH EXAMPLES
In the following example you can see the \f[CR]onupgradeneeded\f[R]
handler being used to update the database structure if a database with a
higher version number is loaded.
\f[CR]IDBObjectStore.createIndex\f[R] is used to create new indexes on
the object store, after which we delete the unneeded old indexes with
\f[CR]deleteIndex()\f[R].
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[B]let\f[R] db;

\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

\f[I]// these two event handlers act on the database being opened successfully, or not\f[R]
DBOpenRequest.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Error loading database.\[dq];
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db variable. This is used a lot below\f[R]
  db = event.target.result;

  \f[I]// Run the displayData() function to populate the task list with all the to\-do list data already in the IDB\f[R]
  displayData();
};

\f[I]// This event handles the event whereby a new version of the database needs to be created\f[R]
\f[I]// Either one has not been created before, or a new version number has been submitted via the\f[R]
\f[I]// window.indexedDB.open line above\f[R]
\f[I]//it is only implemented in recent browsers\f[R]
DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Error loading database.\[dq];
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]

  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]notified\[dq], \[dq]notified\[dq], { unique: \f[B]false\f[R] });

  objectStore.deleteIndex(\[dq]seconds\[dq]);
  objectStore.deleteIndex(\[dq]contact\[dq]);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
