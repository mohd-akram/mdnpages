.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "HTMLCollection" "JS" "December 26, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLCollection \- HTMLCollection
.SH SYNOPSIS
The \f[B]\f[CB]HTMLCollection\f[B]\f[R] interface represents a generic
collection (array\-like object similar to \f[CR]arguments\f[R]) of
elements (in document order) and offers methods and properties for
selecting from the list.
.RS
.PP
\f[B]Note:\f[R] This interface is called \f[CR]HTMLCollection\f[R] for
historical reasons (before the modern DOM, collections implementing this
interface could only have HTML elements as their items).
.RE
.PP
An \f[CR]HTMLCollection\f[R] in the HTML DOM is live; it is
automatically updated when the underlying document is changed.
For this reason it is a good idea to make a copy (e.g., using
\f[CR]Array.from\f[R]) to iterate over if adding, moving, or removing
nodes.
.RS
.PP
\f[B]Note:\f[R] This interface was an \c
.UR https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156
attempt to create an unmodifiable list
.UE \c
\ and only continues to be supported to not break code that\[cq]s
already using it.
Modern APIs use types that wrap around ECMAScript array types instead,
so you can treat them like ECMAScript arrays, and at the same time
impose additional semantics on their usage (such as making their items
read\-only).
.RE
.SH INSTANCE PROPERTIES
.TP
\f[B]HTMLCollection.length\f[R] \f[I](read\-only)\f[R]
Returns the number of items in the collection.
.SH INSTANCE METHODS
.TP
\f[B]HTMLCollection.item()\f[R]
Returns the specific element at the given zero\-based \f[CR]index\f[R]
into the list.
Returns \f[CR]null\f[R] if the \f[CR]index\f[R] is out of range.
.RS
.PP
An alternative to accessing \f[CR]collection[i]\f[R] (which instead
returns \f[CR]undefined\f[R] when \f[CR]i\f[R] is out\-of\-bounds).
This is mostly useful for non\-JavaScript DOM implementations.
.RE
.TP
\f[B]HTMLCollection.namedItem()\f[R]
Returns the specific node whose ID or, as a fallback, name matches the
string specified by \f[CR]name\f[R].
Matching by name is only done as a last resort, only in HTML, and only
if the referenced element supports the \f[CR]name\f[R] attribute.
Returns \f[CR]null\f[R] if no node exists by the given name.
.RS
.PP
An alternative to accessing \f[CR]collection[name]\f[R] (which instead
returns \f[CR]undefined\f[R] when \f[CR]name\f[R] does not exist).
This is mostly useful for non\-JavaScript DOM implementations.
.RE
.SH USAGE IN JAVASCRIPT
\f[CR]HTMLCollection\f[R] also exposes its members as properties by name
and index.
HTML IDs may contain \f[CR]:\f[R] and \f[CR].\f[R] as valid characters,
which would necessitate using bracket notation for property access.
Currently, an \f[CR]HTMLCollection\f[R] object does not recognize purely
numeric IDs, which would cause conflict with the array\-style access,
though HTML does permit these.
.PP
For example, assuming there is one \f[CR]<form>\f[R] element in the
document and its \f[CR]id\f[R] is \f[CR]myForm\f[R]:
.IP
.EX
\f[B]let\f[R] elem1, elem2;

\f[I]// document.forms is an HTMLCollection\f[R]

elem1 = document.forms[0];
elem2 = document.forms.item(0);

alert(elem1 === elem2); \f[I]// shows: \[dq]true\[dq]\f[R]

elem1 = document.forms.myForm;
elem2 = document.forms.namedItem(\[dq]myForm\[dq]);

alert(elem1 === elem2); \f[I]// shows: \[dq]true\[dq]\f[R]

elem1 = document.forms[\[dq]named.item.with.periods\[dq]];
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]NodeList\f[R]
.IP \[bu] 2
\f[CR]HTMLFormControlsCollection\f[R], \f[CR]HTMLOptionsCollection\f[R]
