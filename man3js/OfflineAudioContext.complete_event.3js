.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "OfflineAudioContext.complete_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OfflineAudioContext.complete_event \- OfflineAudioContext: complete
event
.SH SYNOPSIS
The \f[CR]complete\f[R] event of the \f[CR]OfflineAudioContext\f[R]
interface is fired when the rendering of an offline audio context is
complete.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]complete\[dq], (event) \f[B]=>\f[R] {});

oncomplete = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
An \f[CR]OfflineAudioCompletionEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent, \f[CI]Event\f[I]\f[R].
.TP
\f[B]OfflineAudioCompletionEvent.renderedBuffer\f[R] \f[I](read\-only)\f[R]
An \f[CR]AudioBuffer\f[R] containing the result of processing an
\f[CR]OfflineAudioContext\f[R].
.SH EXAMPLES
When processing is complete, you might want to use the
\f[CR]complete\f[R] event handler to prompt the user that the audio can
now be played, and enable the play button:
.IP
.EX
\f[B]const\f[R] offlineAudioCtx = \f[B]new\f[R] OfflineAudioContext();

offlineAudioCtx.addEventListener(\[dq]complete\[dq], () \f[B]=>\f[R] {
  console.log(\[dq]Offline audio processing now complete\[dq]);
  showModalDialog(\[dq]Song processed and ready to play\[dq]);
  playBtn.disabled = \f[B]false\f[R];
});
.EE
.PP
You can also set up the event handler using the \f[CR]oncomplete\f[R]
property:
.IP
.EX
\f[B]const\f[R] offlineAudioCtx = \f[B]new\f[R] OfflineAudioContext();

offlineAudioCtx.oncomplete = () \f[B]=>\f[R] {
  console.log(\[dq]Offline audio processing now complete\[dq]);
  showModalDialog(\[dq]Song processed and ready to play\[dq]);
  playBtn.disabled = \f[B]false\f[R];
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Web Audio API
