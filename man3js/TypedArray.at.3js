.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "TypedArray.at" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.at \- TypedArray.prototype.at()
.SH SYNOPSIS
The \f[B]\f[CB]at()\f[B]\f[R] method of \f[CR]TypedArray\f[R] instances
takes an integer value and returns the item at that index, allowing for
positive and negative integers.
Negative integers count back from the last item in the typed array.
This method has the same algorithm as \f[CR]Array.prototype.at()\f[R].
.IP
.EX
\f[B]const\f[R] int8 = \f[B]new\f[R] Int8Array([0, 10, \-10, 20, \-30, 40, \-50]);

\f[B]let\f[R] index = 1;

console.log(\[ga]An index of ${index} returns the item ${int8.at(index)}\[ga]);
\f[I]// Expected output: \[dq]An index of 1 returns the item 10\[dq]\f[R]

index = \-2;

console.log(\[ga]An index of ${index} returns the item ${int8.at(index)}\[ga]);
\f[I]// Expected output: \[dq]An index of \-2 returns the item 40\[dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
at(index)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
Zero\-based index of the typed array element to be returned, converted
to an integer.
Negative index counts back from the end of the typed array \[em] if
\f[CR]index < 0\f[R], \f[CR]index + array.length\f[R] is accessed.
.SS Return value
The element in the typed array matching the given index.
Always returns \f[CR]undefined\f[R] if \f[CR]index < \-array.length\f[R]
or \f[CR]index >= array.length\f[R] without attempting to access the
corresponding property.
.SH DESCRIPTION
See \f[CR]Array.prototype.at()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Return the last value of a typed array
The following example provides a function which returns the last element
found in a specified array.
.IP
.EX
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array([1, 2, 4, 7, 11, 18]);

\f[I]// A function which returns the last item of a given array\f[R]
\f[B]function\f[R] returnLast(arr) {
  \f[B]return\f[R] arr.at(\-1);
}

\f[B]const\f[R] lastItem = returnLast(uint8);
console.log(lastItem); \f[I]// 18\f[R]
.EE
.SS Comparing methods
Here we compare different ways to select the penultimate (last but one)
item of a \f[CR]TypedArray\f[R].
Whilst all below methods are valid, it highlights the succinctness and
readability of the \f[CR]at()\f[R] method.
.IP
.EX
\f[I]// Our typed array with values\f[R]
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array([1, 2, 4, 7, 11, 18]);

\f[I]// Using length property\f[R]
\f[B]const\f[R] lengthWay = uint8[uint8.length \- 2];
console.log(lengthWay); \f[I]// 11\f[R]

\f[I]// Using slice() method. Note an array is returned\f[R]
\f[B]const\f[R] sliceWay = uint8.slice(\-2, \-1);
console.log(sliceWay[0]); \f[I]// 11\f[R]

\f[I]// Using at() method\f[R]
\f[B]const\f[R] atWay = uint8.at(\-2);
console.log(atWay); \f[I]// 11\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#relative-indexing-method
Polyfill of \f[CR]TypedArray.prototype.at\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.findIndex()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.indexOf()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.with()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.at()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.at()\f[R]
