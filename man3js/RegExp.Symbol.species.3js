.\" Automatically generated by Pandoc 3.4
.\"
.TH "RegExp.Symbol.species" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.Symbol.species \- RegExp[Symbol.species]
.SH SYNOPSIS
The \f[B]\f[CB]RegExp[Symbol.species]\f[B]\f[R] static accessor property
returns the constructor used to construct copied regular expressions in
certain \f[CR]RegExp\f[R] methods.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[CR][Symbol.species]\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are \c
.UR https://github.com/tc39/proposal-rm-builtin-subclassing
investigating whether to remove this feature
.UE \c
\&.
Avoid relying on it if possible.
.RE
.SH SYNTAX
.IP
.EX
RegExp[Symbol.species]
.EE
.SS Return value
The value of the constructor (\f[CR]this\f[R]) on which
\f[CR]get [Symbol.species]\f[R] was called.
The return value is used to construct copied \f[CR]RegExp\f[R]
instances.
.SH DESCRIPTION
The \f[CR][Symbol.species]\f[R] accessor property returns the default
constructor for \f[CR]RegExp\f[R] objects.
Subclass constructors may override it to change the constructor
assignment.
The default implementation is basically:
.IP
.EX
\f[I]// Hypothetical underlying implementation for illustration\f[R]
\f[B]class\f[R] RegExp {
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    \f[B]return\f[R] \f[B]this\f[R];
  }
}
.EE
.PP
Because of this polymorphic implementation, \f[CR][Symbol.species]\f[R]
of derived subclasses would also return the constructor itself by
default.
.IP
.EX
\f[B]class\f[R] SubRegExp \f[B]extends\f[R] SubRegExp {}
SubRegExp[Symbol.species] === SubRegExp; \f[I]// true\f[R]
.EE
.PP
Some \f[CR]RegExp\f[R] methods create a copy of the current regex
instance before running \f[CR]exec()\f[R], so that side effects such as
changes to \f[CR]lastIndex\f[R] are not retained.
The \f[CR][Symbol.species]\f[R] property is used to determine the
constructor of the new instance.
The methods that copy the current regex instance are:
.IP \[bu] 2
\f[CR][Symbol.matchAll]()\f[R]
.IP \[bu] 2
\f[CR][Symbol.split]()\f[R]
.SH EXAMPLES
.SS Species in ordinary objects
The \f[CR][Symbol.species]\f[R] property returns the default constructor
function, which is the \f[CR]RegExp\f[R] constructor for
\f[CR]RegExp\f[R] objects:
.IP
.EX
RegExp[Symbol.species]; \f[I]// function RegExp()\f[R]
.EE
.SS Species in derived objects
In an instance of a custom \f[CR]RegExp\f[R] subclass, such as
\f[CR]MyRegExp\f[R], the \f[CR]MyRegExp\f[R] species is the
\f[CR]MyRegExp\f[R] constructor.
However, you might want to overwrite this, in order to return parent
\f[CR]RegExp\f[R] objects in your derived class methods:
.IP
.EX
\f[B]class\f[R] MyRegExp \f[B]extends\f[R] RegExp {
  \f[I]// Overwrite MyRegExp species to the parent RegExp constructor\f[R]
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    \f[B]return\f[R] RegExp;
  }
}
.EE
.PP
Or you can use this to observe the copying process:
.IP
.EX
\f[B]class\f[R] MyRegExp \f[B]extends\f[R] RegExp {
  constructor(...args) {
    console.log(\[dq]Creating a new MyRegExp instance with args:\[dq], args);
    \f[B]super\f[R](...args);
  }
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    console.log(\[dq]Copying MyRegExp\[dq]);
    \f[B]return\f[R] \f[B]this\f[R];
  }
  exec(value) {
    console.log(\[dq]Executing with lastIndex:\[dq], \f[B]this\f[R].lastIndex);
    \f[B]return\f[R] \f[B]super\f[R].exec(value);
  }
}

Array.from(\[dq]aabbccdd\[dq].matchAll(\f[B]new\f[R] MyRegExp(\[dq][ac]\[dq], \[dq]g\[dq])));
\f[I]// Creating a new MyRegExp instance with args: [ \[aq][ac]\[aq], \[aq]g\[aq] ]\f[R]
\f[I]// Copying MyRegExp\f[R]
\f[I]// Creating a new MyRegExp instance with args: [ MyRegExp /[ac]/g, \[aq]g\[aq] ]\f[R]
\f[I]// Executing with lastIndex: 0\f[R]
\f[I]// Executing with lastIndex: 1\f[R]
\f[I]// Executing with lastIndex: 2\f[R]
\f[I]// Executing with lastIndex: 5\f[R]
\f[I]// Executing with lastIndex: 6\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]RegExp\f[R]
.IP \[bu] 2
\f[CR]Symbol.species\f[R]
