'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Number.MIN_SAFE_INTEGER" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.MIN_SAFE_INTEGER \- Number.MIN_SAFE_INTEGER
.SH SYNOPSIS
The \f[B]\f[CB]Number.MIN_SAFE_INTEGER\f[B]\f[R] static data property
represents the minimum safe integer in JavaScript, or \-(2\[ha]53 \- 1).
.PP
To represent integers smaller than this, consider using
\f[CR]BigInt\f[R].
.SH VALUE
\f[CR]\-9007199254740991\f[R] (\-9,007,199,254,740,991, or about \-9
quadrillion).
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
\c
.UR https://en.wikipedia.org/wiki/Double_precision_floating-point_format
Double precision floating point format
.UE \c
\ only has 52 bits to represent the mantissa, so it can only safely
represent integers between \-(2\[ha]53 \[en] 1) and 2\[ha]53 \[en] 1.
Safe in this context refers to the ability to represent integers exactly
and to correctly compare them.
For example,
\f[CR]Number.MIN_SAFE_INTEGER \- 1 === Number.MIN_SAFE_INTEGER \- 2\f[R]
will evaluate to true, which is mathematically incorrect.
See \f[CR]Number.isSafeInteger()\f[R] for more information.
.PP
Because \f[CR]MIN_SAFE_INTEGER\f[R] is a static property of
\f[CR]Number\f[R], you always use it as
\f[CR]Number.MIN_SAFE_INTEGER\f[R], rather than as a property of a
number value.
.SH EXAMPLES
.SS Using MIN_SAFE_INTEGER
.IP
.EX
Number.MIN_SAFE_INTEGER; \f[I]// \-9007199254740991\f[R]
\-(2 ** 53 \- 1); \f[I]// \-9007199254740991\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-number
Polyfill of \f[CR]Number.MIN_SAFE_INTEGER\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Number.MAX_SAFE_INTEGER\f[R]
.IP \[bu] 2
\f[CR]Number.isSafeInteger()\f[R]
.IP \[bu] 2
\f[CR]BigInt\f[R]
