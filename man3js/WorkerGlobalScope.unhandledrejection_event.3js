.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "WorkerGlobalScope.unhandledrejection_event" "JS" "November 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WorkerGlobalScope.unhandledrejection_event \- WorkerGlobalScope:
unhandledrejection event
.SH SYNOPSIS
The \f[B]\f[CB]unhandledrejection\f[B]\f[R] event is sent to the global
scope (typically \f[CR]WorkerGlobalScope\f[R]) of a script when a
\f[CR]Promise\f[R] that has no rejection handler is rejected.
.PP
This is useful for debugging and for providing fallback error handling
for unexpected situations.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
self.addEventListener(\[dq]unhandledrejection\[dq], (event) \f[B]=>\f[R] {});
self.onunhandledrejection = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]PromiseRejectionEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
.TP
\f[B]PromiseRejectionEvent.promise\f[R] \f[I](read\-only)\f[R]
The JavaScript \f[CR]Promise\f[R] that was rejected.
.TP
\f[B]PromiseRejectionEvent.reason\f[R] \f[I](read\-only)\f[R]
A value or \f[CR]Object\f[R] indicating why the promise was rejected, as
passed to \f[CR]Promise.reject()\f[R].
.SH EXAMPLES
.SS Basic error logging
This example logs information about the unhandled promise rejection to
the console.
.IP
.EX
self.addEventListener(\[dq]unhandledrejection\[dq], (event) \f[B]=>\f[R] {
  console.warn(\[ga]UNHANDLED PROMISE REJECTION: ${event.reason}\[ga]);
});
.EE
.PP
You can also use the \f[CR]onunhandledrejection\f[R] event handler
property to set up the event listener:
.IP
.EX
self.onunhandledrejection = (event) \f[B]=>\f[R] {
  console.warn(\[ga]UNHANDLED PROMISE REJECTION: ${event.reason}\[ga]);
};
.EE
.SS Preventing default handling
Many environments (such as Node.js) report unhandled promise rejections
to the console by default.
You can prevent that from happening by adding a handler for
\f[CR]unhandledrejection\f[R] events that\[em]in addition to any other
tasks you wish to perform\[em]calls \f[CR]preventDefault()\f[R] to
cancel the event, preventing it from bubbling up to be handled by the
runtime\[cq]s logging code.
This works because \f[CR]unhandledrejection\f[R] is cancelable.
.IP
.EX
self.addEventListener(\[dq]unhandledrejection\[dq], (event) \f[B]=>\f[R] {
  \f[I]// code for handling the unhandled rejection\f[R]
  \f[I]// \&...\f[R]

  \f[I]// Prevent the default handling (such as outputting the\f[R]
  \f[I]// error to the console)\f[R]

  event.preventDefault();
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Promise rejection events
.IP \[bu] 2
\f[CR]PromiseRejectionEvent\f[R]
.IP \[bu] 2
\f[CR]Promise\f[R]
.IP \[bu] 2
\f[CR]rejectionhandled\f[R] event
