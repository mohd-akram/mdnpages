.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "EventTarget.removeEventListener" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
EventTarget.removeEventListener \- EventTarget: removeEventListener()
method
.SH SYNOPSIS
The \f[B]\f[CB]removeEventListener()\f[B]\f[R] method of the
\f[CR]EventTarget\f[R] interface removes an event listener previously
registered with \f[CR]EventTarget.addEventListener()\f[R] from the
target.
The event listener to be removed is identified using a combination of
the event type, the event listener function itself, and various optional
options that may affect the matching process; see Matching event
listeners for removal.
.PP
Calling \f[CR]removeEventListener()\f[R] with arguments that do not
identify any currently registered event listener on the
\f[CR]EventTarget\f[R] has no effect.
.PP
If an event listener is removed from an \f[CR]EventTarget\f[R] while
another listener of the target is processing an event, it will not be
triggered by the event.
However, it can be reattached.
.RS
.PP
\f[B]Warning:\f[R] If a listener is registered twice, one with the
\f[I]capture\f[R] flag set and one without, you must remove each one
separately.
Removal of a capturing listener does not affect a non\-capturing version
of the same listener, and vice versa.
.RE
.PP
Event listeners can also be removed by passing an \f[CR]AbortSignal\f[R]
to an \f[CR]addEventListener()\f[R] and then later calling
\f[CR]abort()\f[R] on the controller owning the signal.
.SH SYNTAX
.IP
.EX
removeEventListener(type, listener)
removeEventListener(type, listener, options)
removeEventListener(type, listener, useCapture)
.EE
.SS Parameters
.TP
\f[B]type\f[R]
A string which specifies the type of event for which to remove an event
listener.
.TP
\f[B]listener\f[R]
The event listener function of the event handler to remove from the
event target.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An options object that specifies characteristics about the event
listener.
.RS
.PP
The available options are:
.IP \[bu] 2
\f[CR]capture\f[R]: A boolean value that specifies whether the event
listener to be removed is registered as a capturing listener or not.
If this parameter is absent, the default value \f[CR]false\f[R] is
assumed.
.RE
.TP
\f[B]useCapture\f[R] \f[I](optional)\f[R]
A boolean value that specifies whether the event listener to be removed
is registered as a capturing listener or not.
If this parameter is absent, the default value \f[CR]false\f[R] is
assumed.
.SS Return value
None.
.SS Matching event listeners for removal
Given an event listener previously added by calling
\f[CR]addEventListener()\f[R], you may eventually come to a point at
which you need to remove it.
Obviously, you need to specify the same \f[CR]type\f[R] and
\f[CR]listener\f[R] parameters to \f[CR]removeEventListener()\f[R].
But what about the \f[CR]options\f[R] or \f[CR]useCapture\f[R]
parameters?
.PP
While \f[CR]addEventListener()\f[R] will let you add the same listener
more than once for the same type if the options are different, the only
option \f[CR]removeEventListener()\f[R] checks is the
\f[CR]capture\f[R]/\f[CR]useCapture\f[R] flag.
Its value must match for \f[CR]removeEventListener()\f[R] to match, but
the other values don\[cq]t.
.PP
For example, consider this call to \f[CR]addEventListener()\f[R]:
.IP
.EX
element.addEventListener(\[dq]mousedown\[dq], handleMouseDown, \f[B]true\f[R]);
.EE
.PP
Now consider each of these two calls to
\f[CR]removeEventListener()\f[R]:
.IP
.EX
element.removeEventListener(\[dq]mousedown\[dq], handleMouseDown, \f[B]false\f[R]); \f[I]// Fails\f[R]
element.removeEventListener(\[dq]mousedown\[dq], handleMouseDown, \f[B]true\f[R]); \f[I]// Succeeds\f[R]
.EE
.PP
The first call fails because the value of \f[CR]useCapture\f[R]
doesn\[cq]t match.
The second succeeds, since \f[CR]useCapture\f[R] matches up.
.PP
Now consider this:
.IP
.EX
element.addEventListener(\[dq]mousedown\[dq], handleMouseDown, { passive: \f[B]true\f[R] });
.EE
.PP
Here, we specify an \f[CR]options\f[R] object in which
\f[CR]passive\f[R] is set to \f[CR]true\f[R], while the other options
are left to the default value of \f[CR]false\f[R].
.PP
Now look at each of these calls to \f[CR]removeEventListener()\f[R] in
turn.
Any of them in which \f[CR]capture\f[R] or \f[CR]useCapture\f[R] is
\f[CR]true\f[R] fail; all others succeed.
.PP
Only the \f[CR]capture\f[R] setting matters to
\f[CR]removeEventListener()\f[R].
.IP
.EX
element.removeEventListener(\[dq]mousedown\[dq], handleMouseDown, { passive: \f[B]true\f[R] }); \f[I]// Succeeds\f[R]
element.removeEventListener(\[dq]mousedown\[dq], handleMouseDown, { capture: \f[B]false\f[R] }); \f[I]// Succeeds\f[R]
element.removeEventListener(\[dq]mousedown\[dq], handleMouseDown, { capture: \f[B]true\f[R] }); \f[I]// Fails\f[R]
element.removeEventListener(\[dq]mousedown\[dq], handleMouseDown, { passive: \f[B]false\f[R] }); \f[I]// Succeeds\f[R]
element.removeEventListener(\[dq]mousedown\[dq], handleMouseDown, \f[B]false\f[R]); \f[I]// Succeeds\f[R]
element.removeEventListener(\[dq]mousedown\[dq], handleMouseDown, \f[B]true\f[R]); \f[I]// Fails\f[R]
.EE
.PP
It\[cq]s worth noting that some browser releases have been inconsistent
on this, and unless you have specific reasons otherwise, it\[cq]s
probably wise to use the same values used for the call to
\f[CR]addEventListener()\f[R] when calling
\f[CR]removeEventListener()\f[R].
.SH EXAMPLE
This example shows how to add a \f[CR]mouseover\f[R]\-based event
listener that removes a \f[CR]click\f[R]\-based event listener.
.IP
.EX
\f[B]const\f[R] body = document.querySelector(\[dq]body\[dq]);
\f[B]const\f[R] clickTarget = document.getElementById(\[dq]click\-target\[dq]);
\f[B]const\f[R] mouseOverTarget = document.getElementById(\[dq]mouse\-over\-target\[dq]);

\f[B]let\f[R] toggle = \f[B]false\f[R];
\f[B]function\f[R] makeBackgroundYellow() {
  body.style.backgroundColor = toggle ? \[dq]white\[dq] : \[dq]yellow\[dq];

  toggle = !toggle;
}

clickTarget.addEventListener(\[dq]click\[dq], makeBackgroundYellow, \f[B]false\f[R]);

mouseOverTarget.addEventListener(\[dq]mouseover\[dq], () \f[B]=>\f[R] {
  clickTarget.removeEventListener(\[dq]click\[dq], makeBackgroundYellow, \f[B]false\f[R]);
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]EventTarget.addEventListener()\f[R]
