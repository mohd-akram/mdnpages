.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Proxy.Proxy.defineProperty" "JS" "July 11, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Proxy.Proxy.defineProperty \- handler.defineProperty()
.SH SYNOPSIS
The \f[B]\f[CB]handler.defineProperty()\f[B]\f[R] method is a trap for
the \f[CR][[DefineOwnProperty]]\f[R] object internal method, which is
used by operations such as \f[CR]Object.defineProperty()\f[R].
.SH SYNTAX
.IP
.EX
new Proxy(target, {
  defineProperty(target, property, descriptor) {
  }
})
.EE
.SS Parameters
The following parameters are passed to the \f[CR]defineProperty()\f[R]
method.
\f[CR]this\f[R] is bound to the handler.
.TP
\f[B]target\f[R]
The target object.
.TP
\f[B]property\f[R]
A string or \f[CR]Symbol\f[R] representing the property name.
.TP
\f[B]descriptor\f[R]
The descriptor for the property being defined or modified.
.SS Return value
The \f[CR]defineProperty()\f[R] method must return a \f[CR]Boolean\f[R]
indicating whether or not the property has been successfully defined.
Other values are coerced to booleans.
.PP
Many operations, including \f[CR]Object.defineProperty()\f[R] and
\f[CR]Object.defineProperties()\f[R], throw a \f[CR]TypeError\f[R] if
the \f[CR][[DefineOwnProperty]]\f[R] internal method returns
\f[CR]false\f[R].
.SH DESCRIPTION
.SS Interceptions
This trap can intercept these operations:
.IP \[bu] 2
\f[CR]Object.defineProperty()\f[R], \f[CR]Object.defineProperties()\f[R]
.IP \[bu] 2
\f[CR]Reflect.defineProperty()\f[R]
.PP
Or any other operation that invokes the \f[CR][[DefineOwnProperty]]\f[R]
internal method.
.SS Invariants
The proxy\[cq]s \f[CR][[DefineOwnProperty]]\f[R] internal method throws
a \f[CR]TypeError\f[R] if the handler definition violates one of the
following invariants:
.IP \[bu] 2
A property cannot be added, if the target object is not extensible.
That is, if \f[CR]Reflect.isExtensible()\f[R] returns \f[CR]false\f[R]
on \f[CR]target\f[R], and \f[CR]Reflect.getOwnPropertyDescriptor()\f[R]
returns \f[CR]undefined\f[R] for the property on \f[CR]target\f[R], then
the trap must return a falsy value.
.IP \[bu] 2
A property cannot be non\-configurable, unless there exists a
corresponding non\-configurable own property of the target object.
That is, if \f[CR]Reflect.getOwnPropertyDescriptor()\f[R] returns
\f[CR]undefined\f[R] or \f[CR]configurable: true\f[R] for the property
on \f[CR]target\f[R], and \f[CR]descriptor.configurable\f[R] is
\f[CR]false\f[R], then the trap must return a falsy value.
.IP \[bu] 2
A non\-configurable property cannot be non\-writable, unless there
exists a corresponding non\-configurable, non\-writable own property of
the target object.
That is, if \f[CR]Reflect.getOwnPropertyDescriptor()\f[R] returns
\f[CR]configurable: false, writable: true\f[R] for the property on
\f[CR]target\f[R], and \f[CR]descriptor.writable\f[R] is
\f[CR]false\f[R], then the trap must return a falsy value.
.IP \[bu] 2
If a property has a corresponding property on the target object, then
the target object property\[cq]s descriptor must be compatible with
\f[CR]descriptor\f[R].
That is, pretending \f[CR]target\f[R] is an ordinary object, and
\f[CR]Object.defineProperty(target, property, descriptor)\f[R] would
throw an error, then the trap must return a falsy value.
The \f[CR]Object.defineProperty()\f[R] reference contains more
information, but to summarize, when the target property is
non\-configurable, the following must hold:
.RS 2
.IP \[bu] 2
\f[CR]configurable\f[R], \f[CR]enumerable\f[R], \f[CR]get\f[R], and
\f[CR]set\f[R] cannot be changed
.IP \[bu] 2
the property cannot be switched between data and accessor
.IP \[bu] 2
the \f[CR]writable\f[R] attribute can only be changed from
\f[CR]true\f[R] to \f[CR]false\f[R]
.IP \[bu] 2
the \f[CR]value\f[R] attribute can only be changed if
\f[CR]writable\f[R] is \f[CR]true\f[R]
.RE
.SH EXAMPLES
.SS Trapping of defineProperty
The following code traps \f[CR]Object.defineProperty()\f[R].
.IP
.EX
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(
  {},
  {
    defineProperty(target, prop, descriptor) {
      console.log(\[ga]called: ${prop}\[ga]);
      \f[B]return\f[R] \f[B]true\f[R];
    },
  },
);

\f[B]const\f[R] desc = { configurable: \f[B]true\f[R], enumerable: \f[B]true\f[R], value: 10 };
Object.defineProperty(p, \[dq]a\[dq], desc); \f[I]// \[dq]called: a\[dq]\f[R]
.EE
.PP
When calling \f[CR]Object.defineProperty()\f[R] or
\f[CR]Reflect.defineProperty()\f[R], the \f[CR]descriptor\f[R] passed to
\f[CR]defineProperty()\f[R] trap has one restriction\[em]only following
properties are usable (non\-standard properties will be ignored):
.IP \[bu] 2
\f[CR]enumerable\f[R]
.IP \[bu] 2
\f[CR]configurable\f[R]
.IP \[bu] 2
\f[CR]writable\f[R]
.IP \[bu] 2
\f[CR]value\f[R]
.IP \[bu] 2
\f[CR]get\f[R]
.IP \[bu] 2
\f[CR]set\f[R]
.IP
.EX
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(
  {},
  {
    defineProperty(target, prop, descriptor) {
      console.log(descriptor);
      \f[B]return\f[R] Reflect.defineProperty(target, prop, descriptor);
    },
  },
);

Object.defineProperty(p, \[dq]name\[dq], {
  value: \[dq]proxy\[dq],
  type: \[dq]custom\[dq],
}); \f[I]// { value: \[aq]proxy\[aq] }\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Proxy\f[R]
.IP \[bu] 2
\f[CR]Proxy()\f[R] constructor
.IP \[bu] 2
\f[CR]Object.defineProperty()\f[R]
.IP \[bu] 2
\f[CR]Reflect.defineProperty()\f[R]
