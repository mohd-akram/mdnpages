.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "HTMLFormElement.formdata_event" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLFormElement.formdata_event \- HTMLFormElement: formdata event
.SH SYNOPSIS
The \f[B]\f[CB]formdata\f[B]\f[R] event fires after the entry list
representing the form\[cq]s data is constructed.
This happens when the form is submitted, but can also be triggered by
the invocation of a \f[CR]FormData()\f[R] constructor.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]formdata\[dq], (event) \f[B]=>\f[R] {});

onformdata = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]FormDataEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Inherits properties from its parent interface,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]FormDataEvent.formData\f[R]
Contains the \f[CR]FormData\f[R] object representing the data contained
in the form when the event was fired.
.SH EXAMPLES
.IP
.EX
\f[I]// grab reference to form\f[R]

\f[B]const\f[R] formElem = document.querySelector(\[dq]form\[dq]);

\f[I]// submit handler\f[R]

formElem.addEventListener(\[dq]submit\[dq], (e) \f[B]=>\f[R] {
  \f[I]// on form submission, prevent default\f[R]
  e.preventDefault();

  console.log(formElem.querySelector(\[aq]input[name=\[dq]field1\[dq]]\[aq])); \f[I]// FOO\f[R]
  console.log(formElem.querySelector(\[aq]input[name=\[dq]field2\[dq]]\[aq])); \f[I]// BAR\f[R]

  \f[I]// construct a FormData object, which fires the formdata event\f[R]
  \f[B]const\f[R] formData = \f[B]new\f[R] FormData(formElem);
  \f[I]// formdata gets modified by the formdata event\f[R]
  console.log(formData.get(\[dq]field1\[dq])); \f[I]// foo\f[R]
  console.log(formData.get(\[dq]field2\[dq])); \f[I]// bar\f[R]
});

\f[I]// formdata handler to retrieve data\f[R]

formElem.addEventListener(\[dq]formdata\[dq], (e) \f[B]=>\f[R] {
  console.log(\[dq]formdata fired\[dq]);

  \f[I]// modifies the form data\f[R]
  \f[B]const\f[R] formData = e.formData;
  \f[I]// formdata gets modified by the formdata event\f[R]
  formData.set(\[dq]field1\[dq], formData.get(\[dq]field1\[dq]).toLowerCase());
  formData.set(\[dq]field2\[dq], formData.get(\[dq]field2\[dq]).toLowerCase());
});
.EE
.PP
The \f[CR]onformdata\f[R] version would look like this:
.IP
.EX
formElem.onformdata = (e) \f[B]=>\f[R] {
  console.log(\[dq]formdata fired\[dq]);

  \f[I]// modifies the form data\f[R]
  \f[B]const\f[R] formData = e.formData;
  formData.set(\[dq]field1\[dq], formData.get(\[dq]field1\[dq]).toLowerCase());
  formData.set(\[dq]field2\[dq], formData.get(\[dq]field2\[dq]).toLowerCase());
};
.EE
.SH SEE ALSO
.IP \[bu] 2
HTML \f[CR]<form>\f[R] element
.IP \[bu] 2
\f[CR]FormDataEvent\f[R]
