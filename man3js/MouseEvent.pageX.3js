.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MouseEvent.pageX" "JS" "June 10, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MouseEvent.pageX \- MouseEvent: pageX property
.SH SYNOPSIS
The \f[B]\f[CB]pageX\f[B]\f[R] read\-only property of the
\f[CR]MouseEvent\f[R] interface returns the X (horizontal) coordinate
(in pixels) at which the mouse was clicked, relative to the left edge of
the entire document.
This includes any portion of the document not currently visible.
.PP
Being based on the edge of the document as it is, this property takes
into account any horizontal scrolling of the page.
For example, if the page is scrolled such that 200 pixels of the left
side of the document are scrolled out of view, and the mouse is clicked
100 pixels inward from the left edge of the view, the value returned by
\f[CR]pageX\f[R] will be 300.
.PP
Originally, this property was defined as a \f[CR]long\f[R] integer.
The CSSOM View Module redefined it as a \f[CR]double\f[R] float.
See the Browser compatibility section for details.
.PP
See Coordinate systems for additional information about coordinates
specified in this fashion.
.SH VALUE
A \f[CR]double\f[R] floating\-point number of pixels from the left edge
of the \f[I]document\f[R] at which the mouse was clicked, regardless of
any scrolling or viewport positioning that may be in effect.
.PP
This property was originally specified in the Touch Events specification
as a long integer, but was redefined in the CSSOM View Module to be a
double\-precision floating\-point number to allow for subpixel
precision.
Even though numeric types both are represented by \f[CR]Number\f[R] in
JavaScript, they may be handled differently internally in the
browser\[cq]s code, resulting in potential behavior differences.
.PP
See Browser compatibility to learn which browsers have been updated to
use the revised data type.
.SH EXAMPLES
.SS Showing the mouse position relative to page origin
Let\[cq]s take a look at a simple example that shows you the mouse\[cq]s
position relative to the page\[cq]s origin.
Since this example is presented in an \f[CR]<iframe>\f[R], that
top\-left corner is the top\-left corner of the frame, not the browser
window.
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\[dq]box\[dq]>
  <\f[B]p\f[R]>Move the mouse around in this box to watch its coordinates change.</\f[B]p\f[R]>
  <\f[B]p\f[R]><\f[B]code\f[R]>pageX</\f[B]code\f[R]>: <\f[B]span\f[R] id=\[dq]x\[dq]>n/a</\f[B]span\f[R]></\f[B]p\f[R]>
  <\f[B]p\f[R]><\f[B]code\f[R]>pageY</\f[B]code\f[R]>: <\f[B]span\f[R] id=\[dq]y\[dq]>n/a</\f[B]span\f[R]></\f[B]p\f[R]>
</\f[B]div\f[R]>
.EE
.PP
The HTML is simple; the box we\[cq]ll be watching for mouse events on is
given the class \f[CR]\[dq]box\[dq]\f[R].
It has two \f[CR]<span>\f[R] elements, one with the ID
\f[CR]\[dq]x\[dq]\f[R] and one with the ID \f[CR]\[dq]y\[dq]\f[R].
Those will be updated each time an event occurs to contain the latest
mouse coordinates relative to the page.
.SS CSS
The CSS used for this example is shown below.
.IP
.EX
\&.box {
  \f[B]width\f[R]: 400px;
  \f[B]height\f[R]: 250px;
  \f[B]border\f[R]: 2px solid darkblue;
  \f[B]background\-color\f[R]: blue;
  \f[B]color\f[R]: white;
  \f[B]font\f[R]:
    16px \[dq]Zilla\[dq],
    \[dq]Open Sans\[dq],
    \[dq]Helvetica\[dq],
    \[dq]Arial\[dq],
    sans\-serif;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] box = document.querySelector(\[dq].box\[dq]);
\f[B]const\f[R] pageX = document.getElementById(\[dq]x\[dq]);
\f[B]const\f[R] pageY = document.getElementById(\[dq]y\[dq]);

\f[B]function\f[R] updateDisplay(event) {
  pageX.innerText = event.pageX;
  pageY.innerText = event.pageY;
}

box.addEventListener(\[dq]mousemove\[dq], updateDisplay, \f[B]false\f[R]);
box.addEventListener(\[dq]mouseenter\[dq], updateDisplay, \f[B]false\f[R]);
box.addEventListener(\[dq]mouseleave\[dq], updateDisplay, \f[B]false\f[R]);
.EE
.PP
The JavaScript code uses \f[CR]addEventListener()\f[R] to register the
function \f[CR]updateDisplay()\f[R] as the event handler for the
\f[CR]mousemove\f[R], \f[CR]mouseenter\f[R], and \f[CR]mouseleave\f[R]
events.
.PP
\f[CR]updateDisplay()\f[R] replaces the contents of the
\f[CR]<span>\f[R] elements meant to contain the X and Y coordinates with
the values of \f[CR]pageX\f[R] and \f[CR]pageY\f[R].
.SS Result
Try this out here:
.SS More examples
You can also see an example that demonstrates how to access the mouse
position information in every available coordinate system.
.PP
Prior to being added to the CSSOM View specification, \f[CR]pageX\f[R]
and \f[CR]pageY\f[R] were available on the \f[CR]UIEvent\f[R] interface
in a limited subset of browsers for a short time.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]MouseEvent.pageY\f[R]
.IP \[bu] 2
Coordinate systems
