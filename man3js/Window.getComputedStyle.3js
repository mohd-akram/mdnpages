.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WINDOW.GETCOMPUTEDSTYLE" "3JS" "June 19, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.getComputedStyle \- Window: getComputedStyle() method
.SH SYNOPSIS
The \f[B]\f[CB]Window.getComputedStyle()\f[B]\f[R] method returns an
object containing the values of all CSS properties of an element, after
applying active stylesheets and resolving any basic computation those
values may contain.
.PP
Individual CSS property values are accessed through APIs provided by the
returned \f[CR]CSSStyleDeclaration\f[R] object, or by indexing with CSS
property names.
The values returned by \f[CR]getComputedStyle\f[R] are resolved values.
.SH SYNTAX
.IP
.EX
getComputedStyle(element)
getComputedStyle(element, pseudoElt)
.EE
.SS Parameters
.TP
\f[B]element\f[R]
The \f[CR]Element\f[R] for which to get the computed style.
.TP
\f[B]pseudoElt\f[R] \f[I](optional)\f[R]
A string specifying the pseudo\-element to match.
Omitted (or \f[CR]null\f[R]) for real elements.
.SS Return value
A \f[I]live\f[R] \f[CR]CSSStyleDeclaration\f[R] object, which updates
automatically when the element\(cqs styles are changed.
.PP
Note that:
.IP \(bu 2
The returned \f[CR]CSSStyleDeclaration\f[R] object contains active
values for CSS property \f[I]longhand\f[R] names as well as shorthand
names.
For example, the returned object contains entries for
\f[CR]border\-bottom\-width\f[R] in addition to the
\f[CR]border\-width\f[R] and \f[CR]border\f[R] shorthand property names.
.IP \(bu 2
Returned values are sometimes deliberately inaccurate.
To avoid the \(lqCSS History Leak\(rq security issue, browsers may lie
about the computed styles for a visited link, returning values as if the
user never visited the linked URL.
See \c
.UR https://blog.mozilla.org/security/2010/03/31/plugging-the-css-history-leak/
Plugging the CSS history leak
.UE \c
\ and \c
.UR https://hacks.mozilla.org/2010/03/privacy-related-changes-coming-to-css-vistited/
Privacy\-related changes coming to CSS \f[CR]:visited\f[R]
.UE \c
\ for examples of how this is implemented.
.IP \(bu 2
During CSS transitions, \f[CR]getComputedStyle\f[R] returns the original
property value in Firefox, but the final property value in WebKit.
.IP \(bu 2
In Firefox, properties with the value \f[CR]auto\f[R] return the used
value, not the value \f[CR]auto\f[R].
So if you apply \f[CR]top:auto\f[R] and \f[CR]bottom:0\f[R] on an
element with \f[CR]height:30px\f[R] and a containing block of
\f[CR]height:100px\f[R], Firefox\(cqs computed style for \f[CR]top\f[R]
returns \f[CR]70px\f[R], as 100 âˆ’ 30 = 70.
.IP \(bu 2
For compatibility reasons, serialized color values are expressed as
\f[CR]rgb()\f[R] colors if the alpha channel value is exactly
\f[CR]1\f[R], and \f[CR]rgba()\f[R] colors otherwise.
In both cases, legacy syntax is used, with commas as separators (for
example \f[CR]rgb(255, 0, 0)\f[R]).
.PP
The returned object is the same \f[CR]CSSStyleDeclaration\f[R] type as
the object returned from the element\(cqs \f[CR]style\f[R] property.
However, the two objects have different purposes:
.IP \(bu 2
The object from \f[CR]getComputedStyle\f[R] is read\-only, and should be
used to inspect the element\(cqs style \(em including those set by a
\f[CR]<style>\f[R] element or an external stylesheet.
.IP \(bu 2
The \f[CR]element.style\f[R] object should be used to \f[B]set\f[R]
styles on that element, or inspect styles directly added to it from
JavaScript manipulation or the global \f[CR]style\f[R] attribute.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
If the passed object is not an \f[CR]Element\f[R] or the
\f[CR]pseudoElt\f[R] is not a valid pseudo\-element selector or is
\f[CR]::part()\f[R] or \f[CR]::slotted()\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] Valid pseudo\-element selector refers to syntactic
validity, e.g., \f[CR]::unsupported\f[R] is considered valid, even
though the pseudo\-element itself is not supported.
.RE
.RE
.SH EXAMPLES
.SS Retrieving computed styles
In this example we style a \f[CR]<p>\f[R] element, then retrieve those
styles using \f[CR]getComputedStyle()\f[R], and print them into the text
content of the \f[CR]<p>\f[R].
.SS HTML
.IP
.EX
<\f[B]p\f[R]>Hello</\f[B]p\f[R]>
.EE
.SS CSS
.IP
.EX
p {
  \f[B]width\f[R]: 400px;
  \f[B]margin\f[R]: 0 auto;
  \f[B]padding\f[R]: 20px;
  \f[B]font\f[R]: 2rem/2 sans\-serif;
  \f[B]text\-align\f[R]: center;
  \f[B]background\f[R]: purple;
  \f[B]color\f[R]: white;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] para = document.querySelector(\(dqp\(dq);
\f[B]const\f[R] compStyles = window.getComputedStyle(para);
para.textContent =
  \(gaMy computed font\-size is ${compStyles.getPropertyValue(\(dqfont\-size\(dq)},\(rsn\(ga +
  \(gaand my computed line\-height is ${compStyles.getPropertyValue(
    \(dqline\-height\(dq,
  )}.\(ga;
.EE
.SS Result
.SS Use with pseudo\-elements
\f[CR]getComputedStyle\f[R] can pull style info from pseudo\-elements,
such as \f[CR]::after\f[R], \f[CR]::before\f[R], \f[CR]::marker\f[R], or
\f[CR]::line\-marker\f[R].
.IP
.EX
<\f[B]h3\f[R]>Generated content</\f[B]h3\f[R]>
.EE
.IP
.EX
h3\f[BI]::after\f[R] {
  \f[B]content\f[R]: \(dq rocks!\(dq;
}
.EE
.IP
.EX
\f[B]const\f[R] h3 = document.querySelector(\(dqh3\(dq);
\f[B]const\f[R] result = getComputedStyle(h3, \(dq:after\(dq).content;

console.log(\(dqthe generated content is: \(dq, result); \f[I]// returns \(aq rocks!\(aq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]window.getDefaultComputedStyle()\f[R]
.IP \(bu 2
\f[CR]getPropertyValue()\f[R]
.IP \(bu 2
\f[CR]Element.computedStyleMap()\f[R]
.IP \(bu 2
Resolved value
