.\" Automatically generated by Pandoc 3.4
.\"
.TH "TouchEvent" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TouchEvent \- TouchEvent
.SH SYNOPSIS
The \f[B]\f[CB]TouchEvent\f[B]\f[R] interface represents an
\f[CR]UIEvent\f[R] which is sent when the state of contacts with a
touch\-sensitive surface changes.
This surface can be a touch screen or trackpad, for example.
The event can describe one or more points of contact with the screen and
includes support for detecting movement, addition and removal of contact
points, and so forth.
.PP
Touches are represented by the \f[CR]Touch\f[R] object; each touch is
described by a position, size and shape, amount of pressure, and target
element.
Lists of touches are represented by \f[CR]TouchList\f[R] objects.
.SH CONSTRUCTOR
.TP
\f[B]TouchEvent()\f[R]
Creates a \f[CR]TouchEvent\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]This interface inherits properties from its parent,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]TouchEvent.altKey\f[R] \f[I](read\-only)\f[R]
A Boolean value indicating whether or not the alt key was down when the
touch event was fired.
.TP
\f[B]TouchEvent.changedTouches\f[R] \f[I](read\-only)\f[R]
A \f[CR]TouchList\f[R] of all the \f[CR]Touch\f[R] objects representing
individual points of contact whose states changed between the previous
touch event and this one.
.TP
\f[B]TouchEvent.ctrlKey\f[R] \f[I](read\-only)\f[R]
A Boolean value indicating whether or not the control key was down when
the touch event was fired.
.TP
\f[B]TouchEvent.metaKey\f[R] \f[I](read\-only)\f[R]
A Boolean value indicating whether or not the meta key was down when the
touch event was fired.
.TP
\f[B]TouchEvent.shiftKey\f[R] \f[I](read\-only)\f[R]
A Boolean value indicating whether or not the shift key was down when
the touch event was fired.
.TP
\f[B]TouchEvent.targetTouches\f[R] \f[I](read\-only)\f[R]
A \f[CR]TouchList\f[R] of all the \f[CR]Touch\f[R] objects that are both
currently in contact with the touch surface \f[B]and\f[R] were also
started on the same element that is the target of the event.
.TP
\f[B]TouchEvent.touches\f[R] \f[I](read\-only)\f[R]
A \f[CR]TouchList\f[R] of all the \f[CR]Touch\f[R] objects representing
all current points of contact with the surface, regardless of target or
changed status.
.TP
\f[B]TouchEvent.rotation\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Change in rotation (in degrees) since the event\[cq]s beginning.
Positive values indicate clockwise rotation; negative values indicate
counterclockwise rotation.
Initial value: \f[CR]0.0\f[R].
.TP
\f[B]TouchEvent.scale\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Distance between two digits since the event\[cq]s beginning.
Expressed as a floating\-point multiple of the initial distance between
the digits at the beginning of the event.
Values below 1.0 indicate an inward pinch (zoom out).
Values above 1.0 indicate an outward unpinch (zoom in).
Initial value: \f[CR]1.0\f[R].
.SH TOUCH EVENT TYPES
There are several types of event that can be fired to indicate that
touch\-related changes have occurred.
You can determine which of these has happened by looking at the
event\[cq]s \f[CR]TouchEvent.type\f[R] property.
.TP
\f[B]touchstart\f[R]
Sent when the user places a touch point on the touch surface.
The event\[cq]s target will be the \f[CR]element\f[R] in which the touch
occurred.
.TP
\f[B]touchend\f[R]
Sent when the user removes a touch point from the surface; that is, when
they lift a finger or stylus from the surface.
This is also sent if the touch point moves off the edge of the surface;
for example, if the user\[cq]s finger slides off the edge of the screen.
.RS
.PP
The event\[cq]s target is the same \f[CR]element\f[R] that received the
\f[CR]touchstart\f[R] event corresponding to the touch point, even if
the touch point has moved outside that element.
.PP
The touch point (or points) that were removed from the surface can be
found in the \f[CR]TouchList\f[R] specified by the
\f[CR]changedTouches\f[R] attribute.
.RE
.TP
\f[B]touchmove\f[R]
Sent when the user moves a touch point along the surface.
The event\[cq]s target is the same \f[CR]element\f[R] that received the
\f[CR]touchstart\f[R] event corresponding to the touch point, even if
the touch point has moved outside that element.
.RS
.PP
This event is also sent if the values of the radius, rotation angle, or
force attributes of a touch point change.
.RS
.PP
\f[B]Note:\f[R] The rate at which \f[CR]touchmove\f[R] events is sent is
browser\-specific, and may also vary depending on the capability of the
user\[cq]s hardware.
You must not rely on a specific granularity of these events.
.RE
.RE
.TP
\f[B]touchcancel\f[R]
Sent when a touch point has been disrupted in some way.
There are several possible reasons why this might happen (and the exact
reasons will vary from device to device, as well as browser to browser):
.RS
.IP \[bu] 2
An event of some kind occurred that canceled the touch; this might
happen if a modal alert pops up during the interaction.
.IP \[bu] 2
The touch point has left the document window and moved into the
browser\[cq]s UI area, a plug\-in, or other external content.
.IP \[bu] 2
The user has placed more touch points on the screen than can be
supported, in which case the earliest \f[CR]Touch\f[R] in the
\f[CR]TouchList\f[R] gets canceled.
.RE
.SS Using with addEventListener() and preventDefault()
It\[cq]s important to note that in many cases, both touch and mouse
events get sent (in order to let non\-touch\-specific code still
interact with the user).
If you use touch events, you should call \f[CR]preventDefault()\f[R] to
keep the mouse event from being sent as well.
.PP
The exception to this is Chrome, starting with version 56 (desktop,
Chrome for Android, and Android webview), where the default value for
the \f[CR]passive\f[R] option for \f[CR]touchstart\f[R] and
\f[CR]touchmove\f[R] is \f[CR]true\f[R] and calls to
\f[CR]preventDefault()\f[R] will have no effect.
To override this behavior, you need to set the \f[CR]passive\f[R] option
to \f[CR]false\f[R], after which calling \f[CR]preventDefault()\f[R]
will work as specified.
The change to treat listeners as \f[CR]passive\f[R] by default prevents
the listener from blocking page rendering while a user is scrolling.
A demo is available on the \c
.UR https://developer.chrome.com/blog/passive-event-listeners/
Chrome Developer
.UE \c
\ site.
.SH EXAMPLE
See the example on the main Touch events article.
.SH SEE ALSO
.IP \[bu] 2
Touch events
.IP \[bu] 2
\f[CR]GestureEvent\f[R]
