.\" Automatically generated by Pandoc 3.4
.\"
.TH "PerformanceNavigationTiming.type" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceNavigationTiming.type \- PerformanceNavigationTiming: type
property
.SH SYNOPSIS
The \f[B]\f[CB]type\f[B]\f[R] read\-only property returns the type of
navigation.
.PP
You can use this property to categorize your navigation timing data as
each of these types will have different performance characteristics.
Users going back and forth might experience a faster site than users
performing navigation for the first time or submitting forms, etc.
.PP
For example, if your site provides new content frequently, you might
want to refresh that content using Fetch or similar and avoid users
having to hit reload for the entire page all the time.
The \f[CR]\[dq]reload\[dq]\f[R] type can help you find pages that are
reloaded frequently.
.SH VALUE
The \f[CR]type\f[R] property can have the following values:
.TP
\f[B]\[dq]navigate\[dq]\f[R]
Navigation started by clicking a link, entering the URL in the
browser\[cq]s address bar, form submission, or initializing through a
script operation other than \f[CR]reload\f[R] and
\f[CR]back_forward\f[R] as listed below.
.TP
\f[B]\[dq]reload\[dq]\f[R]
Navigation is through the browser\[cq]s reload operation,
\f[CR]location.reload()\f[R] or a Refresh pragma directive like
\f[CR]<meta http\-equiv=\[dq]refresh\[dq] content=\[dq]300\[dq]>\f[R].
.TP
\f[B]\[dq]back_forward\[dq]\f[R]
Navigation is through the browser\[cq]s history traversal operation.
.TP
\f[B]\[dq]prerender\[dq]\f[R]
Navigation is initiated by a prerender hint.
.SH EXAMPLES
.SS Logging reload navigation
The \f[CR]type\f[R] property can be used to check whether the navigation
was of type \f[CR]reload\f[R].
You could collect these \f[CR]reload\f[R] entries in a server\-side
endpoint to determine which pages of your site gets reloaded the most,
or collect all navigation types and determine what percent of users go
back and forward, for example.
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]navigation\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]if\f[R] (entry.type === \[dq]reload\[dq]) {
      console.log(\[ga]${entry.name} was reloaded!\[ga]);
      console.log(entry);
    }
  });
});

observer.observe({ type: \[dq]navigation\[dq], buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]navigation\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] entries = performance.getEntriesByType(\[dq]navigation\[dq]);
entries.forEach((entry) \f[B]=>\f[R] {
  \f[B]if\f[R] (entry.type === \[dq]reload\[dq]) {
    console.log(\[ga]${entry.name} was reloaded!\[ga]);
    console.log(entry);
  }
});
.EE
