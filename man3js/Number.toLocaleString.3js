.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Number.toLocaleString" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.toLocaleString \- Number.prototype.toLocaleString()
.SH SYNOPSIS
The \f[B]\f[CB]toLocaleString()\f[B]\f[R] method of \f[CR]Number\f[R]
values returns a string with a language\-sensitive representation of
this number.
In implementations with \f[CR]Intl.NumberFormat\f[R] API support, this
method delegates to \f[CR]Intl.NumberFormat\f[R].
.PP
Every time \f[CR]toLocaleString\f[R] is called, it has to perform a
search in a big database of localization strings, which is potentially
inefficient.
When the method is called many times with the same arguments, it is
better to create a \f[CR]Intl.NumberFormat\f[R] object and use its
\f[CR]format()\f[R] method, because a \f[CR]NumberFormat\f[R] object
remembers the arguments passed to it and may decide to cache a slice of
the database, so future \f[CR]format\f[R] calls can search for
localization strings within a more constrained context.
.IP
.EX
\f[B]function\f[R] eArabic(x) {
  \f[B]return\f[R] x.toLocaleString(\[dq]ar\-EG\[dq]);
}

console.log(eArabic(123456.789));
\f[I]// Expected output: \[dq]١٢٣٬٤٥٦٫٧٨٩\[dq]\f[R]

console.log(eArabic(\[dq]123456.789\[dq]));
\f[I]// Expected output: \[dq]123456.789\[dq]\f[R]

console.log(eArabic(\f[B]NaN\f[R]));
\f[I]// Expected output: \[dq]ليس رقم\[dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
toLocaleString()
toLocaleString(locales)
toLocaleString(locales, options)
.EE
.SS Parameters
The \f[CR]locales\f[R] and \f[CR]options\f[R] parameters customize the
behavior of the function and let applications specify the language whose
formatting conventions should be used.
.PP
In implementations that support the \f[CR]Intl.NumberFormat\f[R] API,
these parameters correspond exactly to the
\f[CR]Intl.NumberFormat()\f[R] constructor\[cq]s parameters.
Implementations without \f[CR]Intl.NumberFormat\f[R] support are asked
to ignore both parameters, making the locale used and the form of the
string returned entirely implementation\-dependent.
.TP
\f[B]locales\f[R] \f[I](optional)\f[R]
A string with a BCP 47 language tag, or an array of such strings.
Corresponds to the \f[CR]locales\f[R] parameter of the
\f[CR]Intl.NumberFormat()\f[R] constructor.
.RS
.PP
In implementations without \f[CR]Intl.NumberFormat\f[R] support, this
parameter is ignored and the host\[cq]s locale is usually used.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object adjusting the output format.
Corresponds to the \f[CR]options\f[R] parameter of the
\f[CR]Intl.NumberFormat()\f[R] constructor.
.RS
.PP
In implementations without \f[CR]Intl.NumberFormat\f[R] support, this
parameter is ignored.
.RE
.PP
See the \f[CR]Intl.NumberFormat()\f[R] constructor for details on these
parameters and how to use them.
.SS Return value
A string representing the given number according to language\-specific
conventions.
.PP
In implementations with \f[CR]Intl.NumberFormat\f[R], this is equivalent
to \f[CR]new Intl.NumberFormat(locales, options).format(number)\f[R].
.RS
.PP
\f[B]Note:\f[R] Most of the time, the formatting returned by
\f[CR]toLocaleString()\f[R] is consistent.
However, the output may vary between implementations, even within the
same locale \[em] output variations are by design and allowed by the
specification.
It may also not be what you expect.
For example, the string may use non\-breaking spaces or be surrounded by
bidirectional control characters.
You should not compare the results of \f[CR]toLocaleString()\f[R] to
hardcoded constants.
.RE
.SH EXAMPLES
.SS Using toLocaleString()
Basic use of this method without specifying a \f[CR]locale\f[R] returns
a formatted string in the default locale and with default options.
.IP
.EX
\f[B]const\f[R] number = 3500;

console.log(number.toLocaleString()); \f[I]// \[dq]3,500\[dq] if in U.S. English locale\f[R]
.EE
.SS Checking for support for locales and options parameters
The \f[CR]locales\f[R] and \f[CR]options\f[R] parameters may not be
supported in all implementations, because support for the
internationalization API is optional, and some systems may not have the
necessary data.
For implementations without internationalization support,
\f[CR]toLocaleString()\f[R] always uses the system\[cq]s locale, which
may not be what you want.
Because any implementation that supports the \f[CR]locales\f[R] and
\f[CR]options\f[R] parameters must support the \f[CR]Intl\f[R] API, you
can check the existence of the latter for support:
.IP
.EX
\f[B]function\f[R] toLocaleStringSupportsLocales() {
  \f[B]return\f[R] (
    \f[B]typeof\f[R] Intl === \[dq]object\[dq] &&
    !!Intl &&
    \f[B]typeof\f[R] Intl.NumberFormat === \[dq]function\[dq]
  );
}
.EE
.SS Using locales
This example shows some of the variations in localized number formats.
In order to get the format of the language used in the user interface of
your application, make sure to specify that language (and possibly some
fallback languages) using the \f[CR]locales\f[R] argument:
.IP
.EX
\f[B]const\f[R] number = 123456.789;

\f[I]// German uses comma as decimal separator and period for thousands\f[R]
console.log(number.toLocaleString(\[dq]de\-DE\[dq]));
\f[I]// 123.456,789\f[R]

\f[I]// Arabic in most Arabic speaking countries uses Eastern Arabic digits\f[R]
console.log(number.toLocaleString(\[dq]ar\-EG\[dq]));
\f[I]// ١٢٣٤٥٦٫٧٨٩\f[R]

\f[I]// India uses thousands/lakh/crore separators\f[R]
console.log(number.toLocaleString(\[dq]en\-IN\[dq]));
\f[I]// 1,23,456.789\f[R]

\f[I]// the nu extension key requests a numbering system, e.g. Chinese decimal\f[R]
console.log(number.toLocaleString(\[dq]zh\-Hans\-CN\-u\-nu\-hanidec\[dq]));
\f[I]// 一二三,四五六.七八九\f[R]

\f[I]// when requesting a language that may not be supported, such as\f[R]
\f[I]// Balinese, include a fallback language, in this case Indonesian\f[R]
console.log(number.toLocaleString([\[dq]ban\[dq], \[dq]id\[dq]]));
\f[I]// 123.456,789\f[R]
.EE
.SS Using options
The results provided by \f[CR]toLocaleString()\f[R] can be customized
using the \f[CR]options\f[R] parameter:
.IP
.EX
\f[B]const\f[R] number = 123456.789;

\f[I]// request a currency format\f[R]
console.log(
  number.toLocaleString(\[dq]de\-DE\[dq], { style: \[dq]currency\[dq], currency: \[dq]EUR\[dq] }),
);
\f[I]// 123.456,79 €\f[R]

\f[I]// the Japanese yen doesn\[aq]t use a minor unit\f[R]
console.log(
  number.toLocaleString(\[dq]ja\-JP\[dq], { style: \[dq]currency\[dq], currency: \[dq]JPY\[dq] }),
);
\f[I]// ￥123,457\f[R]

\f[I]// limit to three significant digits\f[R]
console.log(number.toLocaleString(\[dq]en\-IN\[dq], { maximumSignificantDigits: 3 }));
\f[I]// 1,23,000\f[R]

\f[I]// Use the host default language with options for number formatting\f[R]
\f[B]const\f[R] num = 30000.65;
console.log(
  num.toLocaleString(\f[B]undefined\f[R], {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }),
);
\f[I]// \[dq]30,000.65\[dq] where English is the default language, or\f[R]
\f[I]// \[dq]30.000,65\[dq] where German is the default language, or\f[R]
\f[I]// \[dq]30 000,65\[dq] where French is the default language\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Intl.NumberFormat\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toString()\f[R]
