.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "PublicKeyCredential.getClientCapabilities_static" "JS" "February 4, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential.getClientCapabilities_static \- PublicKeyCredential:
getClientCapabilities() static method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]getClientCapabilities()\f[B]\f[R] static method of the
\f[CR]PublicKeyCredential\f[R] interface returns a \f[CR]Promise\f[R]
that resolves with an object that can be used to check whether or not
particular WebAuthn client capabilities and extensions are supported.
.PP
A relying party (RP) can use this information to appropriately customize
its sign\-in and sign\-up user interfaces and workflows.
.SH SYNTAX
.IP
.EX
PublicKeyCredential.getClientCapabilities()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that resolves to an object where the property names
are the client capability strings, and the values are boolean values
that indicate whether or not the corresponding capability or extension
is supported.
.PP
The WebAuthn client capability strings are:
.TP
\f[B]\[dq]conditionalCreate\[dq]\f[R]
The client is capable of creating discoverable credentials.
.TP
\f[B]\[dq]conditionalGet\[dq]\f[R]
The client is capable of authenticating using discoverable credentials.
This capability is equivalent to
\f[CR]isConditionalMediationAvailable()\f[R] resolving to
\f[CR]true\f[R].
.TP
\f[B]\[dq]hybridTransport\[dq]\f[R]
The client supports usage of the hybrid transport.
This means that the client can use authenticators that rely on
Bluetooth, NFC, or USB.
.TP
\f[B]\[dq]passkeyPlatformAuthenticator\[dq]\f[R]
The client allows usage of a passkey authenticator that supports
multi\-factor authentication mechanisms such as a PIN or biometric
check.
The authenticator can be part of the same platform (device) as the
client, or connected via a hybrid transport such as Bluetooth or USB.
The credentials are stored on the authenticator.
See \c
.UR https://developers.google.com/identity/passkeys/developer-guides
Passkeys developer guide for relying parties
.UE \c
\&.
.TP
\f[B]userVerifyingPlatformAuthenticator\f[R]
The client has a platform authenticator (part of the same device) that
supports multi\-factor authentication mechanisms, such as a PIN or
biometric check.
The credentials may be stored on either the RP or the authenticator.
.TP
\f[B]relatedOrigins\f[R]
The client supports \c
.UR https://web.dev/articles/webauthn-related-origin-requests
Related Origin Requests
.UE \c
\&.
These clients allow a passkey to be used across multiple sites that have
the same origin.
.TP
\f[B]signalAllAcceptedCredentials\f[R]
The client supports the
\f[CR]PublicKeyCredential.signalAllAcceptedCredentials()\f[R] static
method.
If not supported, RP workflows will need to prompt the user to manually
delete credentials on the authenticator.
.TP
\f[B]signalCurrentUserDetails\f[R]
The client supports the
\f[CR]PublicKeyCredential.signalCurrentUserDetails()\f[R] static method.
If not supported, RP workflows will need to prompt the user to manually
update user details on the authenticator.
.TP
\f[B]signalUnknownCredential\f[R]
The client supports the
\f[CR]PublicKeyCredential.signalUnknownCredential()\f[R] static method.
If not supported, RP workflows will need to prompt the user to manually
delete credentials from the authenticator.
.PP
The web extension strings are formatted by prefixing the extension
identifier with the prefix \f[CR]extension:\f[R].
For example, the key \f[CR]extension:appid\f[R] can be used to check if
the \f[CR]appid\f[R] extension is supported.
.SS Exceptions
The returned \f[CR]Promise\f[R] may be rejected with the following
values:
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
The Web Authentication API is not allowed in the current browsing
context.
For example, it might be blocked by a permission policy.
.SH DESCRIPTION
\f[CR]getClientCapabilities()\f[R] allows you to check if a given
capability or extension is supported, and use the information to offer
an appropriate user experience.
.PP
For example, support for the
\f[CR]userVerifyingPlatformAuthenticator\f[R] capability indicates that
biometrics such as a fingerprint sensor are allowed.
A web application could use this to display a fingerprint icon if the
capability is supported, or a password input if it is not.
If biometric login is required, then it could instead provide
notification that the site cannot authenticate using this browser or
device.
Similarly, \f[CR]conditionalGet\f[R] indicates that the client supports
conditional mediation when signing in a user, which means the browser
can provide auto\-filled discoverable credentials in a login form (for
example an autocompleting text field or a drop\-down list), along with a
sign\-in button.
.PP
If the value of a given capability is present in the returned object,
then \f[CR]true\f[R] indicates that the capability is currently
supported, and \f[CR]false\f[R] indicates that it is not.
However, if a key is not present for a particular capability, no
assumptions can be made about the availability of the associated
feature.
.PP
For an extension the assumptions are the same.
Note though, that even if the extension is supported by the client a
particular authenticator may not support that extension, so RPs must not
assume that this is a guarantee that the authenticator processing steps
for that extension will be performed.
If the key is not present for an extension, an RP can\[cq]t assume that
the client processing steps for that extension will be carried out by
this client, or that the extension will be forwarded to the
authenticator.
.SH EXAMPLES
.SS Check all capabilities
This example shows how to get the capabilities object and iterate its
values.
.SS JavaScript
First we await \f[CR]getClientCapabilities()\f[R] to get an object
containing the capabilities.
We then iterate the object and log the result (logging code not shown):
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] checkClientCapabilities() {
  \f[B]const\f[R] capabilities = \f[B]await\f[R] PublicKeyCredential.getClientCapabilities();

  \f[B]if\f[R] (capabilities) {
    log(\[dq]Client Capabilities:\[dq]);

    \f[B]for\f[R] (\f[B]const\f[R] [key, value] \f[B]of\f[R] Object.entries(capabilities)) {
      log(\[ga] ${key}: ${value}\[ga]);
    }
  }
}
.EE
.PP
Before calling the function we check that it is defined, and log the
result.
.IP
.EX
\f[I]// Call the function to check capabilities.\f[R]
\f[B]if\f[R] (PublicKeyCredential.getClientCapabilities) {
  checkClientCapabilities();
} \f[B]else\f[R] {
  log(
    \[dq]PublicKeyCredential.getClientCapabilities() is not supported on this browser.\[dq],
  );
}
.EE
.SS Result
.SS Test for user verifying platform authenticator
This example checks a single capability,
\f[CR]userVerifyingPlatformAuthenticator\f[R].
A real application might use the result to configure the user interface.
.SS JavaScript
The code is similar to the previous example, except that we check a
particular returned capability, and we use \f[CR]try...catch\f[R] to
catch the case where \f[CR]getClientCapabilities()\f[R] is not
supported.
.IP
.EX
checkisUserVerifyingPlatformAuthenticatorAvailable();

\f[B]async\f[R] \f[B]function\f[R] checkisUserVerifyingPlatformAuthenticatorAvailable() {
  \f[B]try\f[R] {
    \f[B]const\f[R] capabilities = \f[B]await\f[R] PublicKeyCredential.getClientCapabilities();

    \f[B]if\f[R] (capabilities.userVerifyingPlatformAuthenticator) {
      log(\[dq]Biometric login supported\[dq]);
    } \f[B]else\f[R] {
      log(\[dq]Biometric login not supported. Do password.\[dq]);
    }
  } \f[B]catch\f[R] (error) {
    \f[B]if\f[R] (error \f[B]instanceof\f[R] TypeError) {
      log(
        \[dq]PublicKeyCredential.getClientCapabilities() is not supported on this browser.\[dq],
      );
    } \f[B]else\f[R] {
      log(\[ga]Unexpected error: ${error}\[ga]);
    }
  }
}
.EE
.PP
Note that here we log the result of a check.
In a real application we might update the user interface to show
appropriate options for verifying the user.
.SS Result
The log below displays either a string indicating the method is not
supported, or one that indicates whether biometric or password login is
supported.
.SH SEE ALSO
.IP \[bu] 2
Web Authentication API
