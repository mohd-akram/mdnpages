.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Promise.all" "JS" "June 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Promise.all \- Promise.all()
.SH SYNOPSIS
The \f[B]\f[CB]Promise.all()\f[B]\f[R] static method takes an iterable
of promises as input and returns a single \f[CR]Promise\f[R].
This returned promise fulfills when all of the input\[cq]s promises
fulfill (including when an empty iterable is passed), with an array of
the fulfillment values.
It rejects when any of the input\[cq]s promises rejects, with this first
rejection reason.
.SH SYNTAX
.IP
.EX
Promise.all(iterable)
.EE
.SS Parameters
.TP
\f[B]iterable\f[R]
An iterable (such as an \f[CR]Array\f[R]) of promises.
.SS Return value
A \f[CR]Promise\f[R] that is:
.IP \[bu] 2
\f[B]Already fulfilled\f[R], if the \f[CR]iterable\f[R] passed is empty.
.IP \[bu] 2
\f[B]Asynchronously fulfilled\f[R], when all the promises in the given
\f[CR]iterable\f[R] fulfill.
The fulfillment value is an array of fulfillment values, in the order of
the promises passed, regardless of completion order.
If the \f[CR]iterable\f[R] passed is non\-empty but contains no pending
promises, the returned promise is still asynchronously (instead of
synchronously) fulfilled.
.IP \[bu] 2
\f[B]Asynchronously rejected\f[R], when any of the promises in the given
\f[CR]iterable\f[R] rejects.
The rejection reason is the rejection reason of the first promise that
was rejected.
.SH DESCRIPTION
The \f[CR]Promise.all()\f[R] method is one of the promise concurrency
methods.
It can be useful for aggregating the results of multiple promises.
It is typically used when there are multiple related asynchronous tasks
that the overall code relies on to work successfully \[em] all of whom
we want to fulfill before the code execution continues.
.PP
\f[CR]Promise.all()\f[R] will reject immediately upon \f[B]any\f[R] of
the input promises rejecting.
In comparison, the promise returned by \f[CR]Promise.allSettled()\f[R]
will wait for all input promises to complete, regardless of whether or
not one rejects.
Use \f[CR]allSettled()\f[R] if you need the final result of every
promise in the input iterable.
.SH EXAMPLES
.SS Using Promise.all()
\f[CR]Promise.all\f[R] waits for all fulfillments (or the first
rejection).
.IP
.EX
\f[B]const\f[R] p1 = Promise.resolve(3);
\f[B]const\f[R] p2 = 1337;
\f[B]const\f[R] p3 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
  setTimeout(() \f[B]=>\f[R] {
    resolve(\[dq]foo\[dq]);
  }, 100);
});

Promise.all([p1, p2, p3]).then((values) \f[B]=>\f[R] {
  console.log(values); \f[I]// [3, 1337, \[dq]foo\[dq]]\f[R]
});
.EE
.PP
If the \f[CR]iterable\f[R] contains non\-promise values, they will be
ignored, but still counted in the returned promise array value (if the
promise is fulfilled):
.IP
.EX
\f[I]// All values are non\-promises, so the returned promise gets fulfilled\f[R]
\f[B]const\f[R] p = Promise.all([1, 2, 3]);
\f[I]// The only input promise is already fulfilled,\f[R]
\f[I]// so the returned promise gets fulfilled\f[R]
\f[B]const\f[R] p2 = Promise.all([1, 2, 3, Promise.resolve(444)]);
\f[I]// One (and the only) input promise is rejected,\f[R]
\f[I]// so the returned promise gets rejected\f[R]
\f[B]const\f[R] p3 = Promise.all([1, 2, 3, Promise.reject(555)]);

\f[I]// Using setTimeout, we can execute code after the queue is empty\f[R]
setTimeout(() \f[B]=>\f[R] {
  console.log(p);
  console.log(p2);
  console.log(p3);
});

\f[I]// Logs:\f[R]
\f[I]// Promise { <state>: \[dq]fulfilled\[dq], <value>: Array[3] }\f[R]
\f[I]// Promise { <state>: \[dq]fulfilled\[dq], <value>: Array[4] }\f[R]
\f[I]// Promise { <state>: \[dq]rejected\[dq], <reason>: 555 }\f[R]
.EE
.SS Asynchronicity or synchronicity of Promise.all
This following example demonstrates the asynchronicity of
\f[CR]Promise.all\f[R] when a non\-empty \f[CR]iterable\f[R] is passed:
.IP
.EX
\f[I]// Passing an array of promises that are already resolved,\f[R]
\f[I]// to trigger Promise.all as soon as possible\f[R]
\f[B]const\f[R] resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];

\f[B]const\f[R] p = Promise.all(resolvedPromisesArray);
\f[I]// Immediately logging the value of p\f[R]
console.log(p);

\f[I]// Using setTimeout, we can execute code after the queue is empty\f[R]
setTimeout(() \f[B]=>\f[R] {
  console.log(\[dq]the queue is now empty\[dq]);
  console.log(p);
});

\f[I]// Logs, in order:\f[R]
\f[I]// Promise { <state>: \[dq]pending\[dq] }\f[R]
\f[I]// the queue is now empty\f[R]
\f[I]// Promise { <state>: \[dq]fulfilled\[dq], <value>: Array[2] }\f[R]
.EE
.PP
The same thing happens if \f[CR]Promise.all\f[R] rejects:
.IP
.EX
\f[B]const\f[R] mixedPromisesArray = [Promise.resolve(33), Promise.reject(44)];
\f[B]const\f[R] p = Promise.all(mixedPromisesArray);
console.log(p);
setTimeout(() \f[B]=>\f[R] {
  console.log(\[dq]the queue is now empty\[dq]);
  console.log(p);
});

\f[I]// Logs:\f[R]
\f[I]// Promise { <state>: \[dq]pending\[dq] }\f[R]
\f[I]// the queue is now empty\f[R]
\f[I]// Promise { <state>: \[dq]rejected\[dq], <reason>: 44 }\f[R]
.EE
.PP
\f[CR]Promise.all\f[R] resolves synchronously if and only if the
\f[CR]iterable\f[R] passed is empty:
.IP
.EX
\f[B]const\f[R] p = Promise.all([]); \f[I]// Will be immediately resolved\f[R]
\f[B]const\f[R] p2 = Promise.all([1337, \[dq]hi\[dq]]); \f[I]// Non\-promise values are ignored, but the evaluation is done asynchronously\f[R]
console.log(p);
console.log(p2);
setTimeout(() \f[B]=>\f[R] {
  console.log(\[dq]the queue is now empty\[dq]);
  console.log(p2);
});

\f[I]// Logs:\f[R]
\f[I]// Promise { <state>: \[dq]fulfilled\[dq], <value>: Array[0] }\f[R]
\f[I]// Promise { <state>: \[dq]pending\[dq] }\f[R]
\f[I]// the queue is now empty\f[R]
\f[I]// Promise { <state>: \[dq]fulfilled\[dq], <value>: Array[2] }\f[R]
.EE
.SS Using Promise.all() with async functions
Within async functions, it\[cq]s very common to \[lq]over\-await\[rq]
your code.
For example, given the following functions:
.IP
.EX
\f[B]function\f[R] promptForDishChoice() {
  \f[B]return\f[R] \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
    \f[B]const\f[R] dialog = document.createElement(\[dq]dialog\[dq]);
    dialog.innerHTML = \[ga]
<form method=\[dq]dialog\[dq]>
  <p>What would you like to eat?</p>
  <select>
    <option value=\[dq]pizza\[dq]>Pizza</option>
    <option value=\[dq]pasta\[dq]>Pasta</option>
    <option value=\[dq]salad\[dq]>Salad</option>
  </select>
  <menu>
    <li><button value=\[dq]cancel\[dq]>Cancel</button></li>
    <li><button type=\[dq]submit\[dq] value=\[dq]ok\[dq]>OK</button></li>
  </menu>
</form>
    \[ga];
    dialog.addEventListener(\[dq]close\[dq], () \f[B]=>\f[R] {
      \f[B]if\f[R] (dialog.returnValue === \[dq]ok\[dq]) {
        resolve(dialog.querySelector(\[dq]select\[dq]).value);
      } \f[B]else\f[R] {
        reject(\f[B]new\f[R] Error(\[dq]User cancelled dialog\[dq]));
      }
    });
    document.body.appendChild(dialog);
    dialog.showModal();
  });
}

\f[B]async\f[R] \f[B]function\f[R] fetchPrices() {
  \f[B]const\f[R] response = \f[B]await\f[R] fetch(\[dq]/prices\[dq]);
  \f[B]return\f[R] \f[B]await\f[R] response.json();
}
.EE
.PP
You may write a function like this:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] getPrice() {
  \f[B]const\f[R] choice = \f[B]await\f[R] promptForDishChoice();
  \f[B]const\f[R] prices = \f[B]await\f[R] fetchPrices();
  \f[B]return\f[R] prices[choice];
}
.EE
.PP
However, note that the execution of \f[CR]promptForDishChoice\f[R] and
\f[CR]fetchPrices\f[R] don\[cq]t depend on the result of each other.
While the user is choosing their dish, it\[cq]s fine for the prices to
be fetched in the background, but in the code above, the
\f[CR]await\f[R] operator causes the async function to pause until the
choice is made, and then again until the prices are fetched.
We can use \f[CR]Promise.all\f[R] to run them concurrently, so that the
user doesn\[cq]t have to wait for the prices to be fetched before the
result is given:
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] getPrice() {
  \f[B]const\f[R] [choice, prices] = \f[B]await\f[R] Promise.all([
    promptForDishChoice(),
    fetchPrices(),
  ]);
  \f[B]return\f[R] prices[choice];
}
.EE
.PP
\f[CR]Promise.all\f[R] is the best choice of concurrency method here,
because error handling is intuitive \[em] if any of the promises reject,
the result is no longer available, so the whole \f[CR]await\f[R]
expression throws.
.PP
\f[CR]Promise.all\f[R] accepts an iterable of promises, so if you are
using it to run several async functions concurrently, you need to call
the async functions and use the returned promises.
Directly passing the functions to \f[CR]Promise.all\f[R] does not work,
since they are not promises.
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] getPrice() {
  \f[B]const\f[R] [choice, prices] = \f[B]await\f[R] Promise.all([
    promptForDishChoice,
    fetchPrices,
  ]);
  \f[I]// \[ga]choice\[ga] and \[ga]prices\[ga] are still the original async functions;\f[R]
  \f[I]// Promise.all() does nothing to non\-promises\f[R]
}
.EE
.SS Promise.all fail\-fast behavior
\f[CR]Promise.all\f[R] is rejected if any of the elements are rejected.
For example, if you pass in four promises that resolve after a timeout
and one promise that rejects immediately, then \f[CR]Promise.all\f[R]
will reject immediately.
.IP
.EX
\f[B]const\f[R] p1 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
  setTimeout(() \f[B]=>\f[R] resolve(\[dq]one\[dq]), 1000);
});
\f[B]const\f[R] p2 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
  setTimeout(() \f[B]=>\f[R] resolve(\[dq]two\[dq]), 2000);
});
\f[B]const\f[R] p3 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
  setTimeout(() \f[B]=>\f[R] resolve(\[dq]three\[dq]), 3000);
});
\f[B]const\f[R] p4 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
  setTimeout(() \f[B]=>\f[R] resolve(\[dq]four\[dq]), 4000);
});
\f[B]const\f[R] p5 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
  reject(\f[B]new\f[R] Error(\[dq]reject\[dq]));
});

\f[I]// Using .catch:\f[R]
Promise.all([p1, p2, p3, p4, p5])
  .then((values) \f[B]=>\f[R] {
    console.log(values);
  })
  .catch((error) \f[B]=>\f[R] {
    console.error(error.message);
  });

\f[I]// Logs:\f[R]
\f[I]// \[dq]reject\[dq]\f[R]
.EE
.PP
It is possible to change this behavior by handling possible rejections:
.IP
.EX
\f[B]const\f[R] p1 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
  setTimeout(() \f[B]=>\f[R] resolve(\[dq]p1_delayed_resolution\[dq]), 1000);
});

\f[B]const\f[R] p2 = \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
  reject(\f[B]new\f[R] Error(\[dq]p2_immediate_rejection\[dq]));
});

Promise.all([p1.catch((error) \f[B]=>\f[R] error), p2.catch((error) \f[B]=>\f[R] error)]).then(
  (values) \f[B]=>\f[R] {
    console.log(values[0]); \f[I]// \[dq]p1_delayed_resolution\[dq]\f[R]
    console.error(values[1]); \f[I]// \[dq]Error: p2_immediate_rejection\[dq]\f[R]
  },
);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Promise\f[R]
.IP \[bu] 2
\f[CR]Promise.allSettled()\f[R]
.IP \[bu] 2
\f[CR]Promise.any()\f[R]
.IP \[bu] 2
\f[CR]Promise.race()\f[R]
