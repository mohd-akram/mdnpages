.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SVGTRANSFORMLIST" "3JS" "June 19, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SVGTransformList \- SVGTransformList
.SH SYNOPSIS
The \f[B]\f[CB]SVGTransformList\f[B]\f[R] interface defines a list of
\f[CR]SVGTransform\f[R] objects.
.PP
An \f[CR]SVGTransformList\f[R] object can be designated as read only,
which means that attempts to modify the object will result in an
exception being thrown.
.PP
An \f[CR]SVGTransformList\f[R] is indexable and can be accessed like an
array.
.SH INSTANCE PROPERTIES
.TP
\f[B]numberOfItems\f[R]
The number of items in the list.
.TP
\f[B]length\f[R]
The number of items in the list.
.SH INSTANCE METHODS
.TP
\f[B]clear()\f[R]
Clears all existing current items from the list, with the result being
an empty list.
.TP
\f[B]initialize()\f[R]
Clears all existing current items from the list and re\-initializes the
list to hold the single item specified by the parameter.
If the inserted item is already in a list, it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
The return value is the item inserted into the list.
.TP
\f[B]getItem()\f[R]
Returns the specified item from the list.
The returned item is the item itself and not a copy.
Any changes made to the item are immediately reflected in the list.
The first item is number \f[CR]0\f[R].
.TP
\f[B]insertItemBefore()\f[R]
Inserts a new item into the list at the specified position.
The first item is number \f[CR]0\f[R].
If \f[CR]newItem\f[R] is already in a list, it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
If the item is already in this list, note that the index of the item to
insert before is before the removal of the item.
If the \f[CR]index\f[R] is equal to 0, then the new item is inserted at
the front of the list.
If the index is greater than or equal to \f[CR]numberOfItems\f[R], then
the new item is appended to the end of the list.
.TP
\f[B]replaceItem()\f[R]
Replaces an existing item in the list with a new item.
If \f[CR]newItem\f[R] is already in a list, it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
If the item is already in this list, note that the index of the item to
replace is before the removal of the item.
.TP
\f[B]removeItem()\f[R]
Removes an existing item from the list.
.TP
\f[B]appendItem()\f[R]
Inserts a new item at the end of the list.
If \f[CR]newItem\f[R] is already in a list it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
.TP
\f[B]createSVGTransformFromMatrix()\f[R]
Creates an \f[CR]SVGTransform\f[R] object which is initialized to
transform of type \f[CR]SVG_TRANSFORM_MATRIX\f[R] and whose values are
the given matrix.
The values from the parameter matrix are copied, the matrix parameter is
not adopted as \f[CR]SVGTransform::matrix\f[R].
.TP
\f[B]consolidate()\f[R]
Consolidates the list of separate \f[CR]SVGTransform\f[R] objects by
multiplying the equivalent transformation matrices together to result in
a list consisting of a single \f[CR]SVGTransform\f[R] object of type
\f[CR]SVG_TRANSFORM_MATRIX\f[R].
The consolidation operation creates new \f[CR]SVGTransform\f[R] object
as the first and only item in the list.
The returned item is the item itself and not a copy.
Any changes made to the item are immediately reflected in the list.
.SH EXAMPLES
.SS Using multiple SVGTransform objects
In this example we create a function that will apply three different
transformations to the SVG element that has been clicked on.
In order to do this we create a separate \f[CR]SVGTransform\f[R] object
for each transformation \(em such as \f[CR]translate\f[R],
\f[CR]rotate\f[R], and \f[CR]scale\f[R].
We apply multiple transformation by appending the transform object to
the \f[CR]SVGTransformList\f[R] associated with an SVG element.
.IP
.EX
<\f[B]svg\f[R]
  id=\(dqmy\-svg\(dq
  viewBox=\(dq0 0 300 280\(dq
  xmlns=\(dqhttp://www.w3.org/2000/svg\(dq
  version=\(dq1.1\(dq>
  <\f[B]desc\f[R]>
    Example showing how to transform svg elements that using SVGTransform
    objects
  </\f[B]desc\f[R]>
  <\f[B]polygon\f[R]
    fill=\(dqorange\(dq
    stroke=\(dqblack\(dq
    stroke\-width=\(dq5\(dq
    points=\(dq100,225 100,115 130,115 70,15 70,15 10,115 40,115 40,225\(dq />
  <\f[B]rect\f[R]
    x=\(dq200\(dq
    y=\(dq100\(dq
    width=\(dq100\(dq
    height=\(dq100\(dq
    fill=\(dqyellow\(dq
    stroke=\(dqblack\(dq
    stroke\-width=\(dq5\(dq />
  <\f[B]text\f[R] x=\(dq40\(dq y=\(dq250\(dq font\-family=\(dqVerdana\(dq font\-size=\(dq16\(dq fill=\(dqgreen\(dq>
    Click on a shape to transform it
  </\f[B]text\f[R]>
</\f[B]svg\f[R]>
.EE
.IP
.EX
\f[B]function\f[R] transformMe(evt) {
  \f[I]// svg root element to access the createSVGTransform() function\f[R]
  \f[B]const\f[R] svgRoot = evt.target.parentNode;
  \f[I]// SVGTransformList of the element that has been clicked on\f[R]
  \f[B]const\f[R] tfmList = evt.target.transform.baseVal;

  \f[I]// Create a separate transform object for each transform\f[R]
  \f[B]const\f[R] translate = svgRoot.createSVGTransform();
  translate.setTranslate(50, 5);
  \f[B]const\f[R] rotate = svgRoot.createSVGTransform();
  rotate.setRotate(10, 0, 0);
  \f[B]const\f[R] scale = svgRoot.createSVGTransform();
  scale.setScale(0.8, 0.8);

  \f[I]// apply the transformations by appending the SVGTransform objects to the SVGTransformList associated with the element\f[R]
  tfmList.appendItem(translate);
  tfmList.appendItem(rotate);
  tfmList.appendItem(scale);
}

document.querySelector(\(dqpolygon\(dq).addEventListener(\(dqclick\(dq, transformMe);
document.querySelector(\(dqrect\(dq).addEventListener(\(dqclick\(dq, transformMe);
.EE
