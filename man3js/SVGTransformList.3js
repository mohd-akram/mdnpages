'\" t
.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "SVGTransformList" "JS" "March 3, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SVGTransformList \- SVGTransformList
.SH SYNOPSIS
.SH SVG TRANSFORM LIST INTERFACE
The \f[CR]SVGTransformList\f[R] defines a list of
\f[CR]SVGTransform\f[R] objects.
.PP
An \f[CR]SVGTransformList\f[R] object can be designated as read only,
which means that attempts to modify the object will result in an
exception being thrown.
.PP
An \f[CR]SVGTransformList\f[R] is indexable and can be accessed like an
array.
.SS Interface overview
Also implement
None
Methods
void clear()
\f[CR]SVGTransform\f[R] initialize(in \f[CR]SVGTransform\f[R] newItem)
\f[CR]SVGTransform\f[R] getItem(in unsigned long index)
\f[CR]SVGTransform\f[R] insertItemBefore(in \f[CR]SVGTransform\f[R]
newItem, in unsigned long index)
\f[CR]SVGTransform\f[R] replaceItem(in \f[CR]SVGTransform\f[R] newItem,
in unsigned long index)
\f[CR]SVGTransform\f[R] removeItem(in unsigned long index)
\f[CR]SVGTransform\f[R] appendItem(in \f[CR]SVGTransform\f[R] newItem)
\f[CR]SVGTransform\f[R] createSVGTransformFromMatrix(in
\f[CR]DOMMatrix\f[R])
\f[CR]SVGTransform\f[R] consolidate()
Properties
readonly unsigned long numberOfItems
readonly unsigned long length \f[I](non\-standard)\f[R]
Normative document
SVG 1.1 (2nd Edition)
.SH INSTANCE PROPERTIES
.PP
.TS
tab(@);
lw(31.1n) lw(11.2n) lw(27.7n).
T{
Name
T}@T{
Type
T}@T{
Description
T}
_
T{
\f[CR]numberOfItems\f[R]
T}@T{
unsigned long
T}@T{
The number of items in the list.
T}
T{
\f[CR]length\f[R] \f[I](non\-standard)\f[R]
T}@T{
unsigned long
T}@T{
The number of items in the list.
T}
.TE
.SH INSTANCE METHODS
Name & Arguments
Return
Description
clear()
void
Clears all existing current items from the list, with the result being
an empty list.
Exceptions:
a \f[CR]DOMException\f[R] with code NO_MODIFICATION_ALLOWED_ERR is
raised when the list corresponds to a read only attribute or when the
object itself is read only.
initialize(in \f[CR]SVGTransform\f[R] newItem)
\f[CR]SVGTransform\f[R]
Clears all existing current items from the list and re\-initializes the
list to hold the single item specified by the parameter.
If the inserted item is already in a list, it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
The return value is the item inserted into the list.
Exceptions:
a \f[CR]DOMException\f[R] with code NO_MODIFICATION_ALLOWED_ERR is
raised when the list corresponds to a read only attribute or when the
object itself is read only.
getItem(in unsigned long index)
\f[CR]SVGTransform\f[R]
Returns the specified item from the list.
The returned item is the item itself and not a copy.
Any changes made to the item are immediately reflected in the list.
The first item is number 0.
Exceptions:
a \f[CR]DOMException\f[R] with code NO_MODIFICATION_ALLOWED_ERR is
raised when the list corresponds to a read only attribute or when the
object itself is read only.
insertItemBefore(in \f[CR]SVGTransform\f[R] newItem, in unsigned long
index)
\f[CR]SVGTransform\f[R]
Inserts a new item into the list at the specified position.
The first item is number 0.
If newItem is already in a list, it is removed from its previous list
before it is inserted into this list.
The inserted item is the item itself and not a copy.
If the item is already in this list, note that the index of the item to
insert before is before the removal of the item.
If the index is equal to 0, then the new item is inserted at the front
of the list.
If the index is greater than or equal to numberOfItems, then the new
item is appended to the end of the list.
Exceptions:
a \f[CR]DOMException\f[R] with code NO_MODIFICATION_ALLOWED_ERR is
raised when the list corresponds to a read only attribute or when the
object itself is read only.
replaceItem(in \f[CR]SVGTransform\f[R] newItem, in unsigned long index)
\f[CR]SVGTransform\f[R]
Replaces an existing item in the list with a new item.
If newItem is already in a list, it is removed from its previous list
before it is inserted into this list.
The inserted item is the item itself and not a copy.
If the item is already in this list, note that the index of the item to
replace is before the removal of the item.
Exceptions:
a \f[CR]DOMException\f[R] with code NO_MODIFICATION_ALLOWED_ERR is
raised when the list corresponds to a read only attribute or when the
object itself is read only.
a \f[CR]DOMException\f[R] with code INDEX_SIZE_ERR is raised if the
index number is greater than or equal to numberOfItems.
removeItem(in unsigned long index)
\f[CR]SVGTransform\f[R]
Removes an existing item from the list.
Exceptions:
a \f[CR]DOMException\f[R] with code NO_MODIFICATION_ALLOWED_ERR is
raised when the list corresponds to a read only attribute or when the
object itself is read only.
a \f[CR]DOMException\f[R] with code INDEX_SIZE_ERR is raised if the
index number is greater than or equal to numberOfItems.
appendItem(in \f[CR]SVGTransform\f[R] newItem)
\f[CR]SVGTransform\f[R]
Inserts a new item at the end of the list.
If newItem is already in a list, it is removed from its previous list
before it is inserted into this list.
The inserted item is the item itself and not a copy.
Exceptions:
a \f[CR]DOMException\f[R] with code NO_MODIFICATION_ALLOWED_ERR is
raised when the list corresponds to a read only attribute or when the
object itself is read only.
createSVGTransformFromMatrix(in \f[CR]DOMMatrix\f[R])
\f[CR]SVGTransform\f[R]
Creates an SVGTransform object which is initialized to transform of type
SVG_TRANSFORM_MATRIX and whose values are the given matrix.
The values from the parameter matrix are copied, the matrix parameter is
not adopted as SVGTransform::matrix.
consolidate()
\f[CR]SVGTransform\f[R]
Consolidates the list of separate SVGTransform objects by multiplying
the equivalent transformation matrices together to result in a list
consisting of a single SVGTransform object of type SVG_TRANSFORM_MATRIX.
The consolidation operation creates new SVGTransform object as the first
and only item in the list.
The returned item is the item itself and not a copy.
Any changes made to the item are immediately reflected in the list.
Exceptions:
a \f[CR]DOMException\f[R] with code NO_MODIFICATION_ALLOWED_ERR is
raised when the list corresponds to a read only attribute or when the
object itself is read only.
.SH EXAMPLES
.SS Using multiple SVGTransform objects
In this example we create a function that will apply three different
transformations to the SVG element that has been clicked on.
In order to do this we create a separate \f[CR]SVGTransform\f[R] object
for each transformation \[em] such as \f[CR]translate\f[R],
\f[CR]rotate\f[R], and \f[CR]scale\f[R].
We apply multiple transformation by appending the transform object to
the \f[CR]SVGTransformList\f[R] associated with an SVG element.
.IP
.EX
<svg
  id=\[dq]my\-svg\[dq]
  viewBox=\[dq]0 0 300 280\[dq]
  xmlns=\[dq]http://www.w3.org/2000/svg\[dq]
  version=\[dq]1.1\[dq]>
  <desc>
    Example showing how to transform svg elements that using SVGTransform
    objects
  </desc>
  <script type=\[dq]application/ecmascript\[dq]>
    <![CDATA[
      function transformMe(evt) {
        // svg root element to access the createSVGTransform() function
        const svgroot = evt.target.parentNode;
        // SVGTransformList of the element that has been clicked on
        const tfmList = evt.target.transform.baseVal;

        // Create a separate transform object for each transform
        const translate = svgroot.createSVGTransform();
        translate.setTranslate(50,5);
        const rotate = svgroot.createSVGTransform();
        rotate.setRotate(10,0,0);
        const scale = svgroot.createSVGTransform();
        scale.setScale(0.8,0.8);

        // apply the transformations by appending the SVGTransform objects to the SVGTransformList associated with the element
        tfmList.appendItem(translate);
        tfmList.appendItem(rotate);
        tfmList.appendItem(scale);
      }
    ]]>
  </script>

  <polygon
    fill=\[dq]orange\[dq]
    stroke=\[dq]black\[dq]
    stroke\-width=\[dq]5\[dq]
    points=\[dq]100,225 100,115 130,115 70,15 70,15 10,115 40,115 40,225\[dq]
    onclick=\[dq]transformMe(evt)\[dq] />
  <rect
    x=\[dq]200\[dq]
    y=\[dq]100\[dq]
    width=\[dq]100\[dq]
    height=\[dq]100\[dq]
    fill=\[dq]yellow\[dq]
    stroke=\[dq]black\[dq]
    stroke\-width=\[dq]5\[dq]
    onclick=\[dq]transformMe(evt)\[dq] />
  <text x=\[dq]40\[dq] y=\[dq]250\[dq] font\-family=\[dq]Verdana\[dq] font\-size=\[dq]16\[dq] fill=\[dq]green\[dq]>
    Click on a shape to transform it
  </text>
</svg>
.EE
.PP
Live preview:
