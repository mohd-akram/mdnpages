'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "SVGTransformList" "JS" "January 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SVGTransformList \- SVGTransformList
.SH SYNOPSIS
.SH SVG TRANSFORM LIST INTERFACE
The \f[CR]SVGTransformList\f[R] defines a list of
\f[CR]SVGTransform\f[R] objects.
.PP
An \f[CR]SVGTransformList\f[R] object can be designated as read only,
which means that attempts to modify the object will result in an
exception being thrown.
.PP
An \f[CR]SVGTransformList\f[R] is indexable and can be accessed like an
array.
.SS Interface overview
.PP
.TS
tab(@);
lw(35.0n) lw(35.0n).
T{
Also implement
T}@T{
\f[I]None\f[R]
T}
T{
Methods
T}@T{
.IP \[bu] 2
\f[CR]void clear()\f[R]
.IP \[bu] 2
\[ga]SVGTransform\[ga]
\f[CR]initialize(in \[ga]SVGTransform\[ga] \f[R]\f[I]\f[CI]newItem\f[I]\f[R]\f[CR])\f[R]
.IP \[bu] 2
\[ga]SVGTransform\[ga]
\f[CR]getItem(in unsigned long \f[R]\f[I]\f[CI]index\f[I]\f[R]\f[CR])\f[R]
.IP \[bu] 2
\[ga]SVGTransform\[ga]
\f[CR]insertItemBefore(in \[ga]SVGTransform\[ga] \f[R]\f[I]\f[CI]newItem\f[I]\f[R]\f[CR], in unsigned long \f[R]\f[I]\f[CI]index\f[I]\f[R]\f[CR])\f[R]
.IP \[bu] 2
\[ga]SVGTransform\[ga]
\f[CR]replaceItem(in \[ga]SVGTransform\[ga] \f[R]\f[I]\f[CI]newItem\f[I]\f[R]\f[CR], in unsigned long \f[R]\f[I]\f[CI]index\f[I]\f[R]\f[CR])\f[R]
.IP \[bu] 2
\[ga]SVGTransform\[ga]
\f[CR]removeItem(in unsigned long \f[R]\f[I]\f[CI]index\f[I]\f[R]\f[CR])\f[R]
.IP \[bu] 2
\[ga]SVGTransform\[ga]
\f[CR]appendItem(in \[ga]SVGTransform\[ga] \f[R]\f[I]\f[CI]newItem\f[I]\f[R]\f[CR])\f[R]
.IP \[bu] 2
\[ga]SVGTransform\[ga]
\f[CR]createSVGTransformFromMatrix(in \[ga]DOMMatrix\[ga])\f[R]
.IP \[bu] 2
\[ga]SVGTransform\[ga] \f[CR]consolidate()\f[R]
T}
T{
Properties
T}@T{
.IP \[bu] 2
readonly unsigned long \f[CR]numberOfItems\f[R]
.IP \[bu] 2
readonly unsigned long \f[CR]length\f[R]
T}
T{
Normative document
T}@T{
\c
.UR https://www.w3.org/TR/SVG/coords.html#InterfaceSVGTransformList
SVG 1.1 (2nd Edition)
.UE \c
T}
.TE
.SH INSTANCE PROPERTIES
.PP
.TS
tab(@);
lw(40.6n) lw(8.5n) lw(20.9n).
T{
Name
T}@T{
Type
T}@T{
Description
T}
_
T{
\f[CR]numberOfItems\f[R]
T}@T{
unsigned long
T}@T{
The number of items in the list.
T}
T{
\f[CR]length\f[R]
T}@T{
unsigned long
T}@T{
The number of items in the list.
T}
.TE
.SH INSTANCE METHODS
.PP
.TS
tab(@);
lw(23.3n) lw(23.3n) lw(23.3n).
T{
Name & Arguments
T}@T{
Return
T}@T{
Description
T}
_
T{
\f[B]\f[CB]\[ga]clear\[ga]\f[B]\f[R]\f[CR]()\f[R]
T}@T{
\f[CR]void\f[R]
T}@T{
.PP
Clears all existing current items from the list, with the result being
an empty list.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when the list
corresponds to a read only attribute or when the object itself is read
only.
T}
T{
\f[B]\f[CB]\[ga]initialize\[ga]\f[B]\f[R]\f[CR](in \[ga]SVGTransform\[ga] \f[R]\f[I]\f[CI]newItem\f[I]\f[R]\f[CR])\f[R]
T}@T{
\[ga]SVGTransform\[ga]
T}@T{
.PP
Clears all existing current items from the list and re\-initializes the
list to hold the single item specified by the parameter.
If the inserted item is already in a list, it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
The return value is the item inserted into the list.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when the list
corresponds to a read only attribute or when the object itself is read
only.
T}
T{
\f[B]\f[CB]\[ga]getItem\[ga]\f[B]\f[R]\f[CR](in unsigned long \f[R]\f[I]\f[CI]index\f[I]\f[R]\f[CR])\f[R]
T}@T{
\[ga]SVGTransform\[ga]
T}@T{
.PP
Returns the specified item from the list.
The returned item is the item itself and not a copy.
Any changes made to the item are immediately reflected in the list.
The first item is number 0.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when the list
corresponds to a read only attribute or when the object itself is read
only.
T}
T{
\f[B]\f[CB]\[ga]insertItemBefore\[ga]\f[B]\f[R]\f[CR](in \[ga]SVGTransform\[ga] \f[R]\f[I]\f[CI]newItem\f[I]\f[R]\f[CR], in unsigned long \f[R]\f[I]\f[CI]index\f[I]\f[R]\f[CR])\f[R]
T}@T{
\[ga]SVGTransform\[ga]
T}@T{
.PP
Inserts a new item into the list at the specified position.
The first item is number 0.
If \f[CR]newItem\f[R] is already in a list, it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
If the item is already in this list, note that the index of the item to
insert before is before the removal of the item.
If the \f[CR]index\f[R] is equal to 0, then the new item is inserted at
the front of the list.
If the index is greater than or equal to \f[CR]numberOfItems\f[R], then
the new item is appended to the end of the list.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when the list
corresponds to a read only attribute or when the object itself is read
only.
T}
T{
\f[B]\f[CB]\[ga]replaceItem\[ga]\f[B]\f[R]\f[CR](in \[ga]SVGTransform\[ga] \f[R]\f[I]\f[CI]newItem\f[I]\f[R]\f[CR], in unsigned long \f[R]\f[I]\f[CI]index\f[I]\f[R]\f[CR])\f[R]
T}@T{
\[ga]SVGTransform\[ga]
T}@T{
.PP
Replaces an existing item in the list with a new item.
If \f[CR]newItem\f[R] is already in a list, it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
If the item is already in this list, note that the index of the item to
replace is before the removal of the item.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when the list
corresponds to a read only attribute or when the object itself is read
only.
.IP \[bu] 2
a \[ga]DOMException\[ga] with code \f[CR]INDEX_SIZE_ERR\f[R] is raised
if the index number is greater than or equal to
\f[CR]numberOfItems\f[R].
T}
T{
\f[B]\f[CB]\[ga]removeItem\[ga]\f[B]\f[R]\f[CR](in unsigned long \f[R]\f[I]\f[CI]index\f[I]\f[R]\f[CR])\f[R]
T}@T{
\[ga]SVGTransform\[ga]
T}@T{
.PP
Removes an existing item from the list.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when the list
corresponds to a read only attribute or when the object itself is read
only.
.IP \[bu] 2
a \[ga]DOMException\[ga] with code \f[CR]INDEX_SIZE_ERR\f[R] is raised
if the index number is greater than or equal to
\f[CR]numberOfItems\f[R].
T}
T{
\f[B]\f[CB]\[ga]appendItem\[ga]\f[B]\f[R]\f[CR](in \[ga]SVGTransform\[ga] \f[R]\f[I]\f[CI]newItem\f[I]\f[R]\f[CR])\f[R]
T}@T{
\[ga]SVGTransform\[ga]
T}@T{
.PP
Inserts a new item at the end of the list.
If \f[CR]newItem\f[R] is already in a list, it is removed from its
previous list before it is inserted into this list.
The inserted item is the item itself and not a copy.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when the list
corresponds to a read only attribute or when the object itself is read
only.
T}
T{
\f[B]\f[CB]\[ga]createSVGTransformFromMatrix\[ga]\f[B]\f[R]\f[CR](in \[ga]DOMMatrix\[ga])\f[R]
T}@T{
\[ga]SVGTransform\[ga]
T}@T{
Creates an \f[CR]SVGTransform\f[R] object which is initialized to
transform of type \f[CR]SVG_TRANSFORM_MATRIX\f[R] and whose values are
the given matrix.
The values from the parameter matrix are copied, the matrix parameter is
not adopted as \f[CR]SVGTransform::matrix\f[R].
T}
T{
\f[B]\f[CB]\[ga]consolidate\[ga]\f[B]\f[R]\f[CR]()\f[R]
T}@T{
\[ga]SVGTransform\[ga]
T}@T{
.PP
Consolidates the list of separate \f[CR]SVGTransform\f[R] objects by
multiplying the equivalent transformation matrices together to result in
a list consisting of a single \f[CR]SVGTransform\f[R] object of type
\f[CR]SVG_TRANSFORM_MATRIX\f[R].
The consolidation operation creates new \f[CR]SVGTransform\f[R] object
as the first and only item in the list.
The returned item is the item itself and not a copy.
Any changes made to the item are immediately reflected in the list.
.PP
\f[B]Exceptions:\f[R]
.IP \[bu] 2
a \[ga]DOMException\[ga] with code
\f[CR]NO_MODIFICATION_ALLOWED_ERR\f[R] is raised when the list
corresponds to a read only attribute or when the object itself is read
only.
T}
.TE
.SH EXAMPLES
.SS Using multiple SVGTransform objects
In this example we create a function that will apply three different
transformations to the SVG element that has been clicked on.
In order to do this we create a separate \f[CR]SVGTransform\f[R] object
for each transformation \[em] such as \f[CR]translate\f[R],
\f[CR]rotate\f[R], and \f[CR]scale\f[R].
We apply multiple transformation by appending the transform object to
the \f[CR]SVGTransformList\f[R] associated with an SVG element.
.IP
.EX
<svg
  id=\[dq]my\-svg\[dq]
  viewBox=\[dq]0 0 300 280\[dq]
  xmlns=\[dq]http://www.w3.org/2000/svg\[dq]
  version=\[dq]1.1\[dq]>
  <desc>
    Example showing how to transform svg elements that using SVGTransform
    objects
  </desc>
  <script type=\[dq]application/ecmascript\[dq]>
    <![CDATA[
      function transformMe(evt) {
        // svg root element to access the createSVGTransform() function
        const svgRoot = evt.target.parentNode;
        // SVGTransformList of the element that has been clicked on
        const tfmList = evt.target.transform.baseVal;

        // Create a separate transform object for each transform
        const translate = svgRoot.createSVGTransform();
        translate.setTranslate(50,5);
        const rotate = svgRoot.createSVGTransform();
        rotate.setRotate(10,0,0);
        const scale = svgRoot.createSVGTransform();
        scale.setScale(0.8,0.8);

        // apply the transformations by appending the SVGTransform objects to the SVGTransformList associated with the element
        tfmList.appendItem(translate);
        tfmList.appendItem(rotate);
        tfmList.appendItem(scale);
      }
    ]]>
  </script>

  <polygon
    fill=\[dq]orange\[dq]
    stroke=\[dq]black\[dq]
    stroke\-width=\[dq]5\[dq]
    points=\[dq]100,225 100,115 130,115 70,15 70,15 10,115 40,115 40,225\[dq]
    onclick=\[dq]transformMe(evt)\[dq] />
  <rect
    x=\[dq]200\[dq]
    y=\[dq]100\[dq]
    width=\[dq]100\[dq]
    height=\[dq]100\[dq]
    fill=\[dq]yellow\[dq]
    stroke=\[dq]black\[dq]
    stroke\-width=\[dq]5\[dq]
    onclick=\[dq]transformMe(evt)\[dq] />
  <text x=\[dq]40\[dq] y=\[dq]250\[dq] font\-family=\[dq]Verdana\[dq] font\-size=\[dq]16\[dq] fill=\[dq]green\[dq]>
    Click on a shape to transform it
  </text>
</svg>
.EE
.PP
Live preview:
