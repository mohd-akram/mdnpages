.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ReadableStreamDefaultController.close" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStreamDefaultController.close \-
ReadableStreamDefaultController: close() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]close()\f[B]\f[R] method of the
\f[CR]ReadableStreamDefaultController\f[R] interface closes the
associated stream.
.PP
Readers will still be able to read any previously\-enqueued chunks from
the stream, but once those are read, the stream will become closed.
If you want to completely get rid of the stream and discard any enqueued
chunks, you\[cq]d use \f[CR]ReadableStream.cancel()\f[R] or
\f[CR]ReadableStreamDefaultReader.cancel()\f[R].
.SH SYNTAX
.IP
.EX
close()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the source object is not a
\f[CR]ReadableStreamDefaultController\f[R].
.SH EXAMPLES
In the following simple example, a custom \f[CR]ReadableStream\f[R] is
created using a constructor (see our \c
.UR https://mdn.github.io/dom-examples/streams/simple-random-stream/
Simple random stream example
.UE \c
\ for the full code).
The \f[CR]start()\f[R] function generates a random string of text every
second and enqueues it into the stream.
A \f[CR]cancel()\f[R] function is also provided to stop the generation
if \f[CR]ReadableStream.cancel()\f[R] is called for any reason.
.PP
When a button is pressed, the generation is stopped, the stream is
closed using \f[CR]ReadableStreamDefaultController.close()\f[R], and
another function is run, which reads the data back out of the stream.
.IP
.EX
\f[B]let\f[R] interval;
\f[B]const\f[R] stream = \f[B]new\f[R] ReadableStream({
  start(controller) {
    interval = setInterval(() \f[B]=>\f[R] {
      \f[B]let\f[R] string = randomChars();

      \f[I]// Add the string to the stream\f[R]
      controller.enqueue(string);

      \f[I]// show it on the screen\f[R]
      \f[B]let\f[R] listItem = document.createElement(\[dq]li\[dq]);
      listItem.textContent = string;
      list1.appendChild(listItem);
    }, 1000);

    button.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
      clearInterval(interval);
      fetchStream();
      controller.close();
    });
  },
  pull(controller) {
    \f[I]// We don\[aq]t really need a pull in this example\f[R]
  },
  cancel() {
    \f[I]// This is called if the reader cancels,\f[R]
    \f[I]// so we should stop generating strings\f[R]
    clearInterval(interval);
  },
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using readable streams
.IP \[bu] 2
\f[CR]ReadableStreamDefaultController\f[R]
