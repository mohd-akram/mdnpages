.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUQUEUE.WRITETEXTURE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUQueue.writeTexture \- GPUQueue: writeTexture() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]writeTexture()\f[B]\f[R] method of the
\f[CR]GPUQueue\f[R] interface writes a provided data source into a given
\f[CR]GPUTexture\f[R].
.PP
This is a convenience function, which provides an alternative to setting
texture data via buffer mapping and buffer\-to\-texture copies.
It lets the user agent determine the most efficient way to copy the data
over.
.SH SYNTAX
.IP
.EX
writeTexture(destination, data, dataLayout, size)
.EE
.SS Parameters
.TP
\f[B]destination\f[R]
An object defining the texture subresource and origin to write the data
source to, which can take the following properties:
.RS
.TP
\f[B]aspect\f[R] \f[I](optional)\f[R]
An enumerated value defining which aspects of the texture to write the
data to.
Possible values are:
.RS
.TP
\f[B]\(dqall\(dq\f[R]
All available aspects of the texture format will be written to, which
can mean all or any of color, depth, and stencil, depending on what kind
of format you are dealing with.
.TP
\f[B]\(dqdepth\-only\(dq\f[R]
Only the depth aspect of a \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
\ will be written to.
.TP
\f[B]\(dqstencil\-only\(dq\f[R]
Only the stencil aspect of a depth\-or\-stencil format will be written
to.
.PP
If omitted, \f[CR]aspect\f[R] takes a value of \f[CR]\(dqall\(dq\f[R].
.RE
.TP
\f[B]mipLevel\f[R] \f[I](optional)\f[R]
A number representing the mip\-map level of the texture to write the
data to.
If omitted, \f[CR]mipLevel\f[R] defaults to 0.
.TP
\f[B]origin\f[R] \f[I](optional)\f[R]
An object or array specifying the origin of the copy \(em the minimum
corner of the texture region to write the data to.
Together with \f[CR]size\f[R], this defines the full extent of the
region to copy to.
The \f[CR]x\f[R], \f[CR]y\f[R], and \f[CR]z\f[R] values default to 0 if
any of all of \f[CR]origin\f[R] is omitted.
.RS
.PP
For example, you can pass an array like \f[CR][0, 0, 0]\f[R], or its
equivalent object \f[CR]{ x: 0, y: 0, z: 0 }\f[R].
.RE
.TP
\f[B]texture\f[R]
A \f[CR]GPUTexture\f[R] object representing the texture to write the
data to.
.RE
.TP
\f[B]data\f[R]
An object representing the data source to write into the
\f[CR]GPUTexture\f[R].
This can be an \f[CR]ArrayBuffer\f[R], \f[CR]TypedArray\f[R], or
\f[CR]DataView\f[R].
.TP
\f[B]dataLayout\f[R]
An object that defines the layout of the content contained in
\f[CR]data\f[R].
Possible values are:
.RS
.TP
\f[B]offset\f[R] \f[I](optional)\f[R]
The offset, in bytes, from the beginning of \f[CR]data\f[R] to the start
of the image data to be copied.
If omitted, \f[CR]offset\f[R] defaults to 0.
.TP
\f[B]bytesPerRow\f[R] \f[I](optional)\f[R]
A number representing the stride, in bytes, between the start of each
block row (i.e., a row of complete texel blocks) and the subsequent
block row.
This is required if there are multiple block rows (i.e., the copy height
or depth is more than one block).
.TP
\f[B]rowsPerImage\f[R] \f[I](optional)\f[R]
The number of block rows per single image of the texture.
\f[CR]bytesPerRow\f[R] Ã— \f[CR]rowsPerImage\f[R] will give you the
stride, in bytes, between the start of each complete image.
This is required if there are multiple images to copy.
.RE
.TP
\f[B]size\f[R]
An object or array specifying the extent of the copy \(em the far corner
of the texture region to write the data to.
Together with \f[CR]destination.origin\f[R], this defines the full
extent of the region to copy to.
See \f[CR]destination.origin\f[R] for examples of the object/array
structure.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]writeTexture()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the \f[CR]GPUQueue\f[R]
becomes invalid:
.IP \(bu 2
\f[CR]mipLevel\f[R] is less than the destination
\f[CR]GPUTexture.mipLevelCount\f[R].
.IP \(bu 2
\f[CR]origin.x\f[R] is a multiple of the texel block width of the
destination \f[CR]GPUTexture.format\f[R].
.IP \(bu 2
\f[CR]origin.y\f[R] is a multiple of the texel block height of the
destination \f[CR]GPUTexture.format\f[R].
.IP \(bu 2
If the destination \f[CR]GPUTexture.format\f[R] is a \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil format
.UE \c
\ or \f[CR]GPUTexture.sampleCount\f[R] is more than 1, the subresource
size is equal to \f[CR]size\f[R].
.IP \(bu 2
The destination \f[CR]GPUTexture.usage\f[R] includes the
\f[CR]GPUTextureUsage.COPY_DST\f[R] flag.
.IP \(bu 2
The destination \f[CR]GPUTexture.sampleCount\f[R] is 1.
.IP \(bu 2
\f[CR]destination.origin.x\f[R] + the \f[CR]destination\f[R]
\f[CR]GPUTexture.width\f[R] is less than or equal to the width of the
subresource to write to the \f[CR]destination\f[R]
\f[CR]GPUTexture\f[R].
.IP \(bu 2
\f[CR]destination.origin.y\f[R] + the \f[CR]destination\f[R]
\f[CR]GPUTexture.height\f[R] is less than or equal to the height of the
subresource to write to the \f[CR]destination\f[R]
\f[CR]GPUTexture\f[R].
.IP \(bu 2
\f[CR]destination.origin.z\f[R] + the \f[CR]destination\f[R]
\f[CR]GPUTexture.depthOrArrayLayers\f[R] is less than or equal to the
depthOrArrayLayers of the subresource to write to the
\f[CR]destination\f[R] \f[CR]GPUTexture\f[R].
.IP \(bu 2
The \f[CR]destination\f[R] \f[CR]GPUTexture.width\f[R] is a multiple of
the texel block width of the destination \f[CR]GPUTexture.format\f[R].
.IP \(bu 2
The \f[CR]destination\f[R] \f[CR]GPUTexture.height\f[R] is a multiple of
the texel block height of the destination \f[CR]GPUTexture.format\f[R].
.IP \(bu 2
\f[CR]destination.aspect\f[R] refers to a single aspect of the
destination \f[CR]GPUTexture.format\f[R].
.IP \(bu 2
That aspect is a valid image copy destination according to \c
.UR https://gpuweb.github.io/gpuweb/#combined-depth-stencil-format
depth\-or\-stencil formats
.UE \c
\&.
.IP \(bu 2
The \f[CR]destination\f[R] is otherwise compatible with the
\f[CR]GPUTexture.format\f[R].
.SH EXAMPLES
In \c
.UR https://toji.github.io/webgpu-gltf-case-study/
Efficiently rendering glTF models
.UE \c
, a function is defined for creating a solid color texture:
.IP
.EX
\f[B]function\f[R] createSolidColorTexture(r, g, b, a) {
  \f[B]const\f[R] data = \f[B]new\f[R] Uint8Array([r * 255, g * 255, b * 255, a * 255]);
  \f[B]const\f[R] texture = device.createTexture({
    size: { width: 1, height: 1 },
    format: \(dqrgba8unorm\(dq,
    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
  });
  device.queue.writeTexture({ texture }, data, {}, { width: 1, height: 1 });
  \f[B]return\f[R] texture;
}
.EE
.PP
This can be used to define standard textures for use in material
libraries:
.IP
.EX
\f[B]const\f[R] opaqueWhiteTexture = createSolidColorTexture(1, 1, 1, 1);
\f[B]const\f[R] transparentBlackTexture = createSolidColorTexture(0, 0, 0, 0);
\f[B]const\f[R] defaultNormalTexture = createSolidColorTexture(0.5, 0.5, 1, 1);
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
