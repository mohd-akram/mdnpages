'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "NUMBER.MAX_SAFE_INTEGER" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.MAX_SAFE_INTEGER \- Number.MAX_SAFE_INTEGER
.SH SYNOPSIS
The \f[B]\f[CB]Number.MAX_SAFE_INTEGER\f[B]\f[R] static data property
represents the maximum safe integer in JavaScript (2\(ha53 \(en 1).
.PP
For larger integers, consider using \f[CR]BigInt\f[R].
.IP
.EX
\f[B]const\f[R] x = Number.MAX_SAFE_INTEGER + 1;
\f[B]const\f[R] y = Number.MAX_SAFE_INTEGER + 2;

console.log(Number.MAX_SAFE_INTEGER);
\f[I]// Expected output: 9007199254740991\f[R]

console.log(x);
\f[I]// Expected output: 9007199254740992\f[R]

console.log(x === y);
\f[I]// Expected output: true\f[R]
.EE
.SH VALUE
\f[CR]9007199254740991\f[R] (9,007,199,254,740,991, or \(ti9
quadrillion).
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
\c
.UR https://en.wikipedia.org/wiki/Double_precision_floating-point_format
Double precision floating point format
.UE \c
\ only has 52 bits to represent the mantissa, so it can only safely
represent integers between \-(2\(ha53 \(en 1) and 2\(ha53 \(en 1.
\(lqSafe\(rq in this context refers to the ability to represent integers
exactly and to compare them correctly.
For example,
\f[CR]Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2\f[R]
will evaluate to true, which is mathematically incorrect.
See \f[CR]Number.isSafeInteger()\f[R] for more information.
.PP
Because \f[CR]MAX_SAFE_INTEGER\f[R] is a static property of
\f[CR]Number\f[R], you always use it as
\f[CR]Number.MAX_SAFE_INTEGER\f[R], rather than as a property of a
number value.
.SH EXAMPLES
.SS Return value of MAX_SAFE_INTEGER
.IP
.EX
Number.MAX_SAFE_INTEGER; \f[I]// 9007199254740991\f[R]
.EE
.SS Relationship between MAX_SAFE_INTEGER and EPSILON
\f[CR]Number.EPSILON\f[R] is 2\(ha\-52, while
\f[CR]MAX_SAFE_INTEGER\f[R] is 2\(ha53 \(en 1 \(em both of them are
derived from the width of the mantissa, which is 53 bits (with the
highest bit always being 1).
Multiplying them will give a value very close \(em but not equal \(em to
2.
.IP
.EX
Number.MAX_SAFE_INTEGER * Number.EPSILON; \f[I]// 1.9999999999999998\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-number
Polyfill of \f[CR]Number.MAX_SAFE_INTEGER\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/es-constants
es\-shims polyfill of \f[CR]Number.MAX_SAFE_INTEGER\f[R]
.UE \c
.IP \(bu 2
\f[CR]Number.MIN_SAFE_INTEGER\f[R]
.IP \(bu 2
\f[CR]Number.isSafeInteger()\f[R]
.IP \(bu 2
\f[CR]BigInt\f[R]
