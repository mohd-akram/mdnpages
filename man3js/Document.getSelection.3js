.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DOCUMENT.GETSELECTION" "3JS" "July 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.getSelection \- Document: getSelection() method
.SH SYNOPSIS
The \f[B]\f[CB]getSelection()\f[B]\f[R] method of the
\f[CR]Document\f[R] interface returns the \f[CR]Selection\f[R] object
associated with this document, representing the range of text selected
by the user, or the current position of the caret.
.SH SYNTAX
.IP
.EX
getSelection()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Selection\f[R] object, or \f[CR]null\f[R] if the document has no
browsing context (for example, it is the document of an
\f[CR]<iframe>\f[R] that is not attached to a document).
.SH EXAMPLES
.SS Getting a Selection object
.IP
.EX
\f[B]const\f[R] selection = document.getSelection();
\f[B]const\f[R] selRange = selection.getRangeAt(0);
\f[I]// do stuff with the range\f[R]

console.log(selection); \f[I]// Selection object\f[R]
.EE
.SS String representation of the Selection object
Some functions (like \f[CR]Window.alert()\f[R]) call
\f[CR]toString()\f[R] automatically and the returned value is passed to
the function.
As a consequence, this will return the selected text and not the
\f[CR]Selection\f[R] object:
.IP
.EX
alert(selection);
.EE
.PP
However, not all functions call \f[CR]toString()\f[R] automatically.
To use a \f[CR]Selection\f[R] object as a string, call its
\f[CR]toString()\f[R] method directly:
.IP
.EX
\f[B]let\f[R] selectedText = selection.toString();
.EE
.SH RELATED OBJECTS
You can call \f[CR]Window.getSelection()\f[R], which is identical to
\f[CR]window.document.getSelection()\f[R].
.PP
It is worth noting that currently \f[CR]getSelection()\f[R] doesn\(cqt
work on the content of \f[CR]<input>\f[R] elements in Firefox.
\f[CR]HTMLInputElement.setSelectionRange()\f[R]) could be used to work
around this.
.PP
Notice also the difference between \f[I]selection\f[R] and
\f[I]focus\f[R].
\f[CR]Document.activeElement\f[R] returns the focused element.
