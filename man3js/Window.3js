.\" Automatically generated by Pandoc 3.4
.\"
.TH "Window" "JS" "November 29, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window \- Window
.SH SYNOPSIS
The \f[B]\f[CB]Window\f[B]\f[R] interface represents a window containing
a DOM document; the \f[CR]document\f[R] property points to the DOM
document loaded in that window.
.PP
A window for a given document can be obtained using the
\f[CR]document.defaultView\f[R] property.
.PP
A global variable, \f[CR]window\f[R], representing the window in which
the script is running, is exposed to JavaScript code.
.PP
The \f[CR]Window\f[R] interface is home to a variety of functions,
namespaces, objects, and constructors which are not necessarily directly
associated with the concept of a user interface window.
However, the \f[CR]Window\f[R] interface is a suitable place to include
these items that need to be globally available.
Many of these are documented in the JavaScript Reference and the DOM
Reference.
.PP
In a tabbed browser, each tab is represented by its own
\f[CR]Window\f[R] object; the global \f[CR]window\f[R] seen by
JavaScript code running within a given tab always represents the tab in
which the code is running.
That said, even in a tabbed browser, some properties and methods still
apply to the overall window that contains the tab, such as
\f[CR]resizeTo()\f[R] and \f[CR]innerHeight\f[R].
Generally, anything that can\[cq]t reasonably pertain to a tab pertains
to the window instead.
.SH INSTANCE PROPERTIES
\f[I]This interface inherits properties from the \f[CI]EventTarget\f[I]
interface.\f[R]
.PP
Note that properties which are objects (e.g., for overriding the
prototype of built\-in elements) are listed in a separate section below.
.TP
\f[B]Window.caches\f[R] \f[I](read\-only)\f[R] \f[I](secure context)\f[R]
Returns the \f[CR]CacheStorage\f[R] object associated with the current
context.
This object enables functionality such as storing assets for offline
use, and generating custom responses to requests.
.TP
\f[B]Window.clientInformation\f[R] \f[I](read\-only)\f[R]
An alias for \f[CR]Window.navigator\f[R].
.TP
\f[B]Window.closed\f[R] \f[I](read\-only)\f[R]
This property indicates whether the current window is closed or not.
.TP
\f[B]Window.console\f[R] \f[I](read\-only)\f[R]
Returns a reference to the console object which provides access to the
browser\[cq]s debugging console.
.TP
\f[B]Window.cookieStore\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Returns a reference to the \f[CR]CookieStore\f[R] object for the current
document context.
.TP
\f[B]Window.credentialless\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a boolean that indicates whether the current document was loaded
inside a credentialless \f[CR]<iframe>\f[R].
See IFrame credentialless for more details.
.TP
\f[B]Window.crossOriginIsolated\f[R] \f[I](read\-only)\f[R]
Returns a boolean value that indicates whether the website is in a
cross\-origin isolation state.
.TP
\f[B]Window.crypto\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Crypto\f[R] object associated to the global object.
.TP
\f[B]Window.customElements\f[R] \f[I](read\-only)\f[R]
Returns a reference to the \f[CR]CustomElementRegistry\f[R] object,
which can be used to register new custom elements and get information
about previously registered custom elements.
.TP
\f[B]Window.devicePixelRatio\f[R] \f[I](read\-only)\f[R]
Returns the ratio between physical pixels and device independent pixels
in the current display.
.TP
\f[B]Window.document\f[R] \f[I](read\-only)\f[R]
Returns a reference to the document that the window contains.
.TP
\f[B]Window.documentPictureInPicture\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Returns a reference to the document Picture\-in\-Picture window for the
current document context.
.TP
\f[B]Window.fence\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns a \f[CR]Fence\f[R] object instance for the current document
context.
Available only to documents embedded inside a \f[CR]<fencedframe>\f[R].
.TP
\f[B]Window.frameElement\f[R] \f[I](read\-only)\f[R]
Returns the element in which the window is embedded, or null if the
window is not embedded.
.TP
\f[B]Window.frames\f[R] \f[I](read\-only)\f[R]
Returns an array of the subframes in the current window.
.TP
\f[B]Window.fullScreen\f[R] \f[I](non\-standard)\f[R]
This property indicates whether the window is displayed in full screen
or not.
.TP
\f[B]Window.history\f[R] \f[I](read\-only)\f[R]
Returns a reference to the history object.
.TP
\f[B]Window.indexedDB\f[R] \f[I](read\-only)\f[R]
Provides a mechanism for applications to asynchronously access
capabilities of indexed databases; returns an \f[CR]IDBFactory\f[R]
object.
.TP
\f[B]Window.innerHeight\f[R] \f[I](read\-only)\f[R]
Gets the height of the content area of the browser window including, if
rendered, the horizontal scrollbar.
.TP
\f[B]Window.innerWidth\f[R] \f[I](read\-only)\f[R]
Gets the width of the content area of the browser window including, if
rendered, the vertical scrollbar.
.TP
\f[B]Window.isSecureContext\f[R] \f[I](read\-only)\f[R]
Returns a boolean indicating whether the current context is secure
(\f[CR]true\f[R]) or not (\f[CR]false\f[R]).
.TP
\f[B]Window.launchQueue\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
When a progressive web app (PWA) is launched with a
\f[CR]launch_handler\f[R] \f[CR]client_mode\f[R] value of
\f[CR]focus\-existing\f[R], \f[CR]navigate\-new\f[R], or
\f[CR]navigate\-existing\f[R], the \f[CR]launchQueue\f[R] provides
access to the \f[CR]LaunchQueue\f[R] class, which allows custom launch
navigation handling to be implemented for the PWA.
.TP
\f[B]Window.length\f[R] \f[I](read\-only)\f[R]
Returns the number of frames in the window.
See also \f[CR]window.frames\f[R].
.TP
\f[B]Window.localStorage\f[R] \f[I](read\-only)\f[R]
Returns a reference to the local storage object used to store data that
may only be accessed by the origin that created it.
.TP
\f[B]Window.location\f[R]
Gets/sets the location, or current URL, of the window object.
.TP
\f[B]Window.locationbar\f[R] \f[I](read\-only)\f[R]
Returns the locationbar object.
.TP
\f[B]Window.menubar\f[R] \f[I](read\-only)\f[R]
Returns the menubar object.
.TP
\f[B]Window.mozInnerScreenX\f[R] \f[I](read\-only)\f[R] \f[I](non\-standard)\f[R]
Returns the horizontal (X) coordinate of the top\-left corner of the
window\[cq]s viewport, in screen coordinates.
This value is reported in CSS pixels.
See \f[CR]mozScreenPixelsPerCSSPixel\f[R] in
\f[CR]nsIDOMWindowUtils\f[R] for a conversion factor to adapt to screen
pixels if needed.
.TP
\f[B]Window.mozInnerScreenY\f[R] \f[I](read\-only)\f[R] \f[I](non\-standard)\f[R]
Returns the vertical (Y) coordinate of the top\-left corner of the
window\[cq]s viewport, in screen coordinates.
This value is reported in CSS pixels.
See \f[CR]mozScreenPixelsPerCSSPixel\f[R] for a conversion factor to
adapt to screen pixels if needed.
.TP
\f[B]Window.name\f[R]
Gets/sets the name of the window.
.TP
\f[B]Window.navigation\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns the current \f[CR]window\f[R]\[cq]s associated
\f[CR]Navigation\f[R] object.
The entry point for the Navigation API.
.TP
\f[B]Window.navigator\f[R] \f[I](read\-only)\f[R]
Returns a reference to the navigator object.
.TP
\f[B]Window.opener\f[R]
Returns a reference to the window that opened this current window.
.TP
\f[B]Window.origin\f[R] \f[I](read\-only)\f[R]
Returns the global object\[cq]s origin, serialized as a string.
.TP
\f[B]Window.originAgentCluster\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns \f[CR]true\f[R] if this window belongs to an origin\-keyed agent
cluster.
.TP
\f[B]Window.outerHeight\f[R] \f[I](read\-only)\f[R]
Gets the height of the outside of the browser window.
.TP
\f[B]Window.outerWidth\f[R] \f[I](read\-only)\f[R]
Gets the width of the outside of the browser window.
.TP
\f[B]Window.pageXOffset\f[R] \f[I](read\-only)\f[R]
An alias for \f[CR]window.scrollX\f[R].
.TP
\f[B]Window.pageYOffset\f[R] \f[I](read\-only)\f[R]
An alias for \f[CR]window.scrollY\f[R].
.TP
\f[B]Window.parent\f[R] \f[I](read\-only)\f[R]
Returns a reference to the parent of the current window or subframe.
.TP
\f[B]Window.performance\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Performance\f[R] object, which includes the
\f[CR]timing\f[R] and \f[CR]navigation\f[R] attributes, each of which is
an object providing performance\-related data.
See also Using Navigation Timing for additional information and
examples.
.TP
\f[B]Window.personalbar\f[R] \f[I](read\-only)\f[R]
Returns the personalbar object.
.TP
\f[B]Window.scheduler\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Scheduler\f[R] object associated with the current
context.
This is the entry point for using the Prioritized Task Scheduling API.
.TP
\f[B]Window.screen\f[R] \f[I](read\-only)\f[R]
Returns a reference to the screen object associated with the window.
.TP
\f[B]Window.screenX\f[R] and \f[B]Window.screenLeft\f[R] \f[I](read\-only)\f[R]
Both properties return the horizontal distance from the left border of
the user\[cq]s browser viewport to the left side of the screen.
.TP
\f[B]Window.screenY\f[R] and \f[B]Window.screenTop\f[R] \f[I](read\-only)\f[R]
Both properties return the vertical distance from the top border of the
user\[cq]s browser viewport to the top side of the screen.
.TP
\f[B]Window.scrollbars\f[R] \f[I](read\-only)\f[R]
Returns the scrollbars object.
.TP
\f[B]Window.scrollMaxX\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The maximum offset that the window can be scrolled to horizontally, that
is the document width minus the viewport width.
.TP
\f[B]Window.scrollMaxY\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The maximum offset that the window can be scrolled to vertically (i.e.,
the document height minus the viewport height).
.TP
\f[B]Window.scrollX\f[R] \f[I](read\-only)\f[R]
Returns the number of pixels that the document has already been scrolled
horizontally.
.TP
\f[B]Window.scrollY\f[R] \f[I](read\-only)\f[R]
Returns the number of pixels that the document has already been scrolled
vertically.
.TP
\f[B]Window.self\f[R] \f[I](read\-only)\f[R]
Returns an object reference to the window object itself.
.TP
\f[B]Window.sessionStorage\f[R]
Returns a reference to the session storage object used to store data
that may only be accessed by the origin that created it.
.TP
\f[B]Window.sharedStorage\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Returns the \f[CR]WindowSharedStorage\f[R] object for the current
origin.
This is the main entry point for writing data to shared storage using
the Shared Storage API.
.TP
\f[B]Window.speechSynthesis\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]SpeechSynthesis\f[R] object, which is the entry point
into using Web Speech API speech synthesis functionality.
.TP
\f[B]Window.statusbar\f[R] \f[I](read\-only)\f[R]
Returns the statusbar object.
.TP
\f[B]Window.toolbar\f[R] \f[I](read\-only)\f[R]
Returns the toolbar object.
.TP
\f[B]Window.top\f[R] \f[I](read\-only)\f[R]
Returns a reference to the topmost window in the window hierarchy.
This property is read only.
.TP
\f[B]Window.trustedTypes\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]TrustedTypePolicyFactory\f[R] object associated with
the global object, providing the entry point for using the Trusted Types
API.
.TP
\f[B]Window.visualViewport\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]VisualViewport\f[R] object which represents the visual
viewport for a given window.
.TP
\f[B]Window.window\f[R] \f[I](read\-only)\f[R]
Returns a reference to the current window.
.TP
\f[B]window[0]\f[R], \f[B]window[1]\f[R], etc.
Returns a reference to the \f[CR]window\f[R] object in the frames.
See \f[CR]Window.frames\f[R] for more details.
.SS Deprecated properties
.TP
\f[B]Window.event\f[R] \f[I](deprecated)\f[R] \f[I](read\-only)\f[R]
Returns the \f[B]current event\f[R], which is the event currently being
handled by the JavaScript code\[cq]s context, or \f[CR]undefined\f[R] if
no event is currently being handled.
The \f[CR]Event\f[R] object passed directly to event handlers should be
used instead whenever possible.
.TP
\f[B]Window.external\f[R] \f[I](deprecated)\f[R] \f[I](read\-only)\f[R]
Returns an object with functions for adding external search providers to
the browser.
.TP
\f[B]Window.orientation\f[R] \f[I](deprecated)\f[R] \f[I](read\-only)\f[R]
Returns the orientation in degrees (in 90 degree increments) of the
viewport relative to the device\[cq]s natural orientation.
.TP
\f[B]Window.status\f[R] \f[I](deprecated)\f[R]
Gets/sets the text in the statusbar at the bottom of the browser.
.SH INSTANCE METHODS
\f[I]This interface inherits methods from the \f[CI]EventTarget\f[I]
interface.\f[R]
.TP
\f[B]Window.atob()\f[R]
Decodes a string of data which has been encoded using base\-64 encoding.
.TP
\f[B]Window.alert()\f[R]
Displays an alert dialog.
.TP
\f[B]Window.blur()\f[R] \f[I](deprecated)\f[R]
Sets focus away from the window.
.TP
\f[B]Window.btoa()\f[R]
Creates a base\-64 encoded ASCII string from a string of binary data.
.TP
\f[B]Window.cancelAnimationFrame()\f[R]
Enables you to cancel a callback previously scheduled with
\f[CR]Window.requestAnimationFrame\f[R].
.TP
\f[B]Window.cancelIdleCallback()\f[R]
Enables you to cancel a callback previously scheduled with
\f[CR]Window.requestIdleCallback\f[R].
.TP
\f[B]Window.clearInterval()\f[R]
Cancels the repeated execution set using
\f[CR]Window.setInterval()\f[R].
.TP
\f[B]Window.clearTimeout()\f[R]
Cancels the delayed execution set using \f[CR]Window.setTimeout()\f[R].
.TP
\f[B]Window.close()\f[R]
Closes the current window.
.TP
\f[B]Window.confirm()\f[R]
Displays a dialog with a message that the user needs to respond to.
.TP
\f[B]Window.createImageBitmap()\f[R]
Accepts a variety of different image sources, and returns a
\f[CR]Promise\f[R] which resolves to an \f[CR]ImageBitmap\f[R].
Optionally the source is cropped to the rectangle of pixels originating
at \f[I](sx, sy)\f[R] with width sw, and height sh.
.TP
\f[B]Window.dump()\f[R] \f[I](non\-standard)\f[R]
Writes a message to the console.
.TP
\f[B]Window.fetch()\f[R]
Starts the process of fetching a resource from the network.
.TP
\f[B]Window.find()\f[R] \f[I](non\-standard)\f[R]
Searches for a given string in a window.
.TP
\f[B]Window.focus()\f[R]
Sets focus on the current window.
.TP
\f[B]Window.getComputedStyle()\f[R]
Gets computed style for the specified element.
Computed style indicates the computed values of all CSS properties of
the element.
.TP
\f[B]Window.getDefaultComputedStyle()\f[R] \f[I](non\-standard)\f[R]
Gets default computed style for the specified element, ignoring author
stylesheets.
.TP
\f[B]Window.getScreenDetails()\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with a
\f[CR]ScreenDetails\f[R] object instance representing the details of all
the screens available to the user\[cq]s device.
.TP
\f[B]Window.getSelection()\f[R]
Returns the selection object representing the selected item(s).
.TP
\f[B]Window.matchMedia()\f[R]
Returns a \f[CR]MediaQueryList\f[R] object representing the specified
media query string.
.TP
\f[B]Window.moveBy()\f[R]
Moves the current window by a specified amount.
.TP
\f[B]Window.moveTo()\f[R]
Moves the window to the specified coordinates.
.TP
\f[B]Window.open()\f[R]
Opens a new window.
.TP
\f[B]Window.postMessage()\f[R]
Provides a secure means for one window to send a string of data to
another window, which need not be within the same domain as the first.
.TP
\f[B]Window.print()\f[R]
Opens the Print Dialog to print the current document.
.TP
\f[B]Window.prompt()\f[R]
Returns the text entered by the user in a prompt dialog.
.TP
\f[B]Window.queryLocalFonts()\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Returns a \f[CR]Promise\f[R] that fulfills with an array of
\f[CR]FontData\f[R] objects representing the font faces available
locally.
.TP
\f[B]Window.queueMicrotask()\f[R]
Queues a microtask to be executed at a safe time prior to control
returning to the browser\[cq]s event loop.
.TP
\f[B]Window.reportError()\f[R]
Reports an error in a script, emulating an unhandled exception.
.TP
\f[B]Window.requestAnimationFrame()\f[R]
Tells the browser that an animation is in progress, requesting that the
browser schedule a repaint of the window for the next animation frame.
.TP
\f[B]Window.requestIdleCallback()\f[R]
Enables the scheduling of tasks during a browser\[cq]s idle periods.
.TP
\f[B]Window.resizeBy()\f[R]
Resizes the current window by a certain amount.
.TP
\f[B]Window.resizeTo()\f[R]
Dynamically resizes window.
.TP
\f[B]Window.scroll()\f[R]
Scrolls the window to a particular place in the document.
.TP
\f[B]Window.scrollBy()\f[R]
Scrolls the document in the window by the given amount.
.TP
\f[B]Window.scrollByLines()\f[R] \f[I](non\-standard)\f[R]
Scrolls the document by the given number of lines.
.TP
\f[B]Window.scrollByPages()\f[R] \f[I](non\-standard)\f[R]
Scrolls the current document by the specified number of pages.
.TP
\f[B]Window.scrollTo()\f[R]
Scrolls to a particular set of coordinates in the document.
.TP
\f[B]Window.setInterval()\f[R]
Schedules a function to execute every time a given number of
milliseconds elapses.
.TP
\f[B]Window.setTimeout()\f[R]
Schedules a function to execute in a given amount of time.
.TP
\f[B]Window.showDirectoryPicker()\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Displays a directory picker which allows the user to select a directory.
.TP
\f[B]Window.showOpenFilePicker()\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Shows a file picker that allows a user to select a file or multiple
files.
.TP
\f[B]Window.showSaveFilePicker()\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Shows a file picker that allows a user to save a file.
.TP
\f[B]Window.sizeToContent()\f[R] \f[I](non\-standard)\f[R]
Sizes the window according to its content.
.TP
\f[B]Window.stop()\f[R]
This method stops window loading.
.TP
\f[B]Window.structuredClone()\f[R]
Creates a deep clone of a given value using the structured clone
algorithm.
.SS Deprecated methods
.TP
\f[B]Window.back()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Moves back one in the window history.
This method is deprecated; you should instead use
\f[CR]history.back()\f[R].
.TP
\f[B]Window.captureEvents()\f[R] \f[I](deprecated)\f[R]
Registers the window to capture all events of the specified type.
.TP
\f[B]Window.clearImmediate()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Cancels the repeated execution set using \f[CR]setImmediate()\f[R].
.TP
\f[B]Window.forward()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Moves the window one document forward in the history.
This method is deprecated; you should instead use
\f[CR]history.forward()\f[R].
.TP
\f[B]Window.releaseEvents()\f[R] \f[I](deprecated)\f[R]
Releases the window from trapping events of a specific type.
.TP
\f[B]Window.requestFileSystem()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Lets a website or app gain access to a sandboxed file system for its own
use.
.TP
\f[B]Window.setImmediate()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Executes a function after the browser has finished other heavy tasks.
.TP
\f[B]Window.setResizable()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Does nothing (no\-op).
Kept for backward compatibility with Netscape 4.x.
.TP
\f[B]Window.showModalDialog()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Displays a modal dialog.
.TP
\f[B]Window.webkitConvertPointFromNodeToPage()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Transforms a \f[CR]WebKitPoint\f[R] from the node\[cq]s coordinate
system to the page\[cq]s coordinate system.
.TP
\f[B]Window.webkitConvertPointFromPageToNode()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Transforms a \f[CR]WebKitPoint\f[R] from the page\[cq]s coordinate
system to the node\[cq]s coordinate system.
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
In addition to the events listed below, many events can bubble from the
\f[CR]Document\f[R] contained in the window object.
.TP
\f[B]error\f[R]
Fired when a resource failed to load, or can\[cq]t be used.
For example, if a script has an execution error or an image can\[cq]t be
found or is invalid.
.TP
\f[B]languagechange\f[R]
Fired at the global scope object when the user\[cq]s preferred language
changes.
.TP
\f[B]resize\f[R]
Fired when the window has been resized.
.TP
\f[B]storage\f[R]
Fired when a storage area (\f[CR]localStorage\f[R] or
\f[CR]sessionStorage\f[R]) has been modified in the context of another
document.
.SS Clipboard events
.TP
\f[B]copy\f[R]
Fired when the user initiates a copy action through the browser\[cq]s
user interface.
Also available via the \f[CR]oncopy\f[R] property.
.TP
\f[B]cut\f[R]
Fired when the user initiates a cut action through the browser\[cq]s
user interface.
Also available via the \f[CR]oncut\f[R] property.
.TP
\f[B]paste\f[R]
Fired when the user initiates a paste action through the browser\[cq]s
user interface.
Also available via the \f[CR]onpaste\f[R] property.
.SS Connection events
.TP
\f[B]offline\f[R]
Fired when the browser has lost access to the network and the value of
\f[CR]navigator.onLine\f[R] has switched to \f[CR]false\f[R].
.TP
\f[B]online\f[R]
Fired when the browser has gained access to the network and the value of
\f[CR]navigator.onLine\f[R] has switched to \f[CR]true\f[R].
.SS Device orientation events
.TP
\f[B]devicemotion\f[R] \f[I](secure context)\f[R]
Fired at a regular interval, indicating the amount of physical force of
acceleration the device is receiving and the rate of rotation, if
available.
.TP
\f[B]deviceorientation\f[R] \f[I](secure context)\f[R]
Fired when fresh data is available from the magnetometer orientation
sensor about the current orientation of the device as compared to the
Earth coordinate frame.
.TP
\f[B]deviceorientationabsolute\f[R] \f[I](secure context)\f[R]
Fired when fresh data is available from the magnetometer orientation
sensor about the current absolute orientation of the device as compared
to the Earth coordinate frame.
.SS Focus events
.TP
\f[B]blur\f[R]
Fired when an element has lost focus.
.TP
\f[B]focus\f[R]
Fired when an element has gained focus.
.SS Gamepad events
.TP
\f[B]gamepadconnected\f[R]
Fired when the browser detects that a gamepad has been connected or the
first time a button/axis of the gamepad is used.
.TP
\f[B]gamepaddisconnected\f[R]
Fired when the browser detects that a gamepad has been disconnected.
.SS History events
.TP
\f[B]hashchange\f[R]
Fired when the fragment identifier of the URL has changed (the part of
the URL beginning with and following the \f[CR]#\f[R] symbol).
.TP
\f[B]pagehide\f[R]
Sent when the browser hides the current document while in the process of
switching to displaying in its place a different document from the
session\[cq]s history.
This happens, for example, when the user clicks the Back button or when
they click the Forward button to move ahead in session history.
.TP
\f[B]pagereveal\f[R]
Fired when a document is first rendered, either when loading a fresh
document from the network or activating a document (either from
back/forward cache (bfcache) or prerender).
.TP
\f[B]pageshow\f[R]
Sent when the browser makes the document visible due to navigation
tasks, including not only when the page is first loaded, but also
situations such as the user navigating back to the page after having
navigated to another within the same tab.
.TP
\f[B]pageswap\f[R]
Fired when a document is about to be unloaded due to a navigation.
.TP
\f[B]popstate\f[R]
Fired when the active history entry changes.
.SS Load & unload events
.TP
\f[B]beforeunload\f[R]
Fired when the window, the document and its resources are about to be
unloaded.
.TP
\f[B]load\f[R]
Fired when the whole page has loaded, including all dependent resources
such as stylesheets images.
.TP
\f[B]unload\f[R] \f[I](deprecated)\f[R]
Fired when the document or a child resource is being unloaded.
.SS Manifest events
.TP
\f[B]appinstalled\f[R]
Fired when the browser has successfully installed a page as an
application.
.TP
\f[B]beforeinstallprompt\f[R]
Fired when a user is about to be prompted to install a web application.
.SS Messaging events
.TP
\f[B]message\f[R]
Fired when the window receives a message, for example from a call to
\f[CR]Window.postMessage()\f[R] from another browsing context.
.TP
\f[B]messageerror\f[R]
Fired when a \f[CR]Window\f[R] object receives a message that can\[cq]t
be deserialized.
.SS Print events
.TP
\f[B]afterprint\f[R]
Fired after the associated document has started printing or the print
preview has been closed.
.TP
\f[B]beforeprint\f[R]
Fired when the associated document is about to be printed or previewed
for printing.
.SS Promise rejection events
.TP
\f[B]rejectionhandled\f[R]
Sent every time a JavaScript \f[CR]Promise\f[R] is rejected, regardless
of whether or not there is a handler in place to catch the rejection.
.TP
\f[B]unhandledrejection\f[R]
Sent when a JavaScript \f[CR]Promise\f[R] is rejected but there is no
handler in place to catch the rejection.
.SS Scroll events
.TP
\f[B]scrollsnapchange\f[R] \f[I](experimental)\f[R]
Fired on the scroll container at the end of a scrolling operation when a
new scroll snap target has been selected.
.TP
\f[B]scrollsnapchanging\f[R] \f[I](experimental)\f[R]
Fired on the scroll container when the browser determines a new scroll
snap target is pending, i.e.\ it will be selected when the current
scroll gesture ends.
.SS Deprecated events
.TP
\f[B]orientationchange\f[R] \f[I](deprecated)\f[R]
Fired when the orientation of the device has changed.
.TP
\f[B]vrdisplayactivate\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Fired when a display is able to be presented to.
.TP
\f[B]vrdisplayconnect\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Fired when a compatible VR device has been connected to the computer.
.TP
\f[B]vrdisplaydisconnect\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Fired when a compatible VR device has been disconnected from the
computer.
.TP
\f[B]vrdisplaydeactivate\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Fired when a display can no longer be presented to.
.TP
\f[B]vrdisplaypresentchange\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Fired when the presenting state of a VR device changes \[em] i.e.\ goes
from presenting to not presenting, or vice versa.
.SH INTERFACES
See DOM Reference.
