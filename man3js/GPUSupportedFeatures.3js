'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUSUPPORTEDFEATURES" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUSupportedFeatures \- GPUSupportedFeatures
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUSupportedFeatures\f[B]\f[R] interface of the WebGPU
API is a \f[CR]Set\f[R]\-like object that describes additional
functionality supported by a \f[CR]GPUAdapter\f[R].
.PP
The \f[CR]GPUSupportedFeatures\f[R] object for the current adapter is
accessed via the \f[CR]GPUAdapter.features\f[R] property \(em use this
to test what features your current setup supports.
To create a \f[CR]GPUDevice\f[R] with a specific feature enabled, you
need to specify it in the \f[CR]requiredFeatures\f[R] array of the
\f[CR]GPUAdapter.requestDevice()\f[R] descriptor.
.PP
You should note that not all features will be available to WebGPU in all
browsers that support it, even if the features are supported by the
underlying hardware.
This could be due to constraints in the underlying system, browser, or
adapter.
For example:
.IP \(bu 2
The underlying system might not be able to guarantee exposure of a
feature in a way that is compatible with a certain browser.
.IP \(bu 2
The browser vendor might not have found a secure way to implement
support for that feature, or might just not have gotten round to it yet.
.PP
If you are hoping to take advantage of a specific additional feature in
a WebGPU app, thorough testing is advised.
.SH AVAILABLE FEATURES
The following additional features are defined in WebGPU.
Bear in mind that the exact set of features available will vary across
implementations and physical devices, and will change over time.
.PP
.TS
tab(@);
lw(2.6n) lw(67.4n).
T{
Feature name
T}@T{
Description
T}
_
T{
\f[CR]bgra8unorm\-storage\f[R]
T}@T{
When enabled, allows \f[CR]STORAGE_BINDING\f[R] \f[CR]usage\f[R] of
\f[CR]bgra8unorm\f[R]\-\f[CR]format\f[R] \f[CR]GPUTexture\f[R]s.
T}
T{
\f[CR]clip\-distances\f[R]
T}@T{
When enabled, allows the use of \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#built-in-values-clip_distances
\f[CR]clip_distances\f[R]
.UE \c
\ in WGSL.
T}
T{
\f[CR]depth\-clip\-control\f[R]
T}@T{
Allows \c
.UR https://gpuweb.github.io/gpuweb/#depth-clipping
depth\-clipping
.UE \c
\ to be disabled.
If \f[CR]depth\-clip\-control\f[R] is enabled, the
\f[CR]unclippedDepth\f[R] property is available on the
\f[CR]primitive\f[R] object included as part of the
\f[CR]createRenderPipeline()\f[R] or
\f[CR]createRenderPipelineAsync()\f[R] descriptor when creating a
\f[CR]GPURenderPipeline\f[R].
\f[CR]primitive\f[R] describes how a pipeline constructs and rasterizes
primitives from its vertex inputs.
Set \f[CR]unclipped\-depth\f[R] to \f[CR]true\f[R] to disable
depth\-clipping.
T}
T{
\f[CR]depth32float\-stencil8\f[R]
T}@T{
Allows creation of textures with the format
\f[CR]depth32float\-stencil8\f[R].
If \f[CR]depth32float\-stencil8\f[R] is enabled, the
\f[CR]depth32float\-stencil8\f[R] value can be used for the
\f[CR]format\f[R] property of the \f[CR]createTexture()\f[R] descriptor
when creating a \f[CR]GPUTexture\f[R].
T}
T{
\f[CR]dual\-source\-blending\f[R]
T}@T{
When enabled, allows the use of \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#extension-dual_source_blending
\f[CR]dual_source_blending\f[R]
.UE \c
\ in WGSL, which uses both pixel shader outputs
(\f[CR]\(atblend_src(0)\f[R] and \f[CR]\(atblend_src(1)\f[R]) as inputs
to a blending operation with the single color attachment at
\f[CR]\(atlocation(0)\f[R].
Over in WebGPU, \f[CR]dual\-source\-blending\f[R] enables the following
blend factor operations (specified in the \f[CR]dstFactor\f[R] and
\f[CR]srcFactor\f[R] properties of \f[CR]createRenderPipeline()\f[R] and
\f[CR]createRenderPipelineAsync()\f[R] descriptors): \f[CR]src1\f[R],
\f[CR]one\-minus\-src1\f[R], \f[CR]src1\-alpha\f[R], and
\f[CR]one\-minus\-src1\-alpha\f[R].
T}
T{
\f[CR]float32\-blendable\f[R]
T}@T{
When enabled, allows blending of \f[CR]r32float\f[R]\-,
\f[CR]rg32float\f[R]\-, and \f[CR]rgba32float\f[R]\-\f[CR]format\f[R]
\f[CR]GPUTexture\f[R]s.
T}
T{
\f[CR]float32\-filterable\f[R]
T}@T{
When enabled, allows filtering of \f[CR]r32float\f[R]\-,
\f[CR]rg32float\f[R]\-, and \f[CR]rgba32float\f[R]\-\f[CR]format\f[R]
\f[CR]GPUTexture\f[R]s.
T}
T{
\f[CR]indirect\-first\-instance\f[R]
T}@T{
When enabled, allows the use of non\-zero \f[CR]firstInstance\f[R]
values in the \f[CR]indirectBuffer\f[R] property of the
\f[CR]drawIndirect()\f[R] and \f[CR]drawIndexedIndirect()\f[R] methods
available on \f[CR]GPURenderPassEncoder\f[R] and
\f[CR]GPURenderBundleEncoder\f[R] instances.
T}
T{
\f[CR]rg11b10ufloat\-renderable\f[R]
T}@T{
When enabled, allows \f[CR]RENDER_ATTACHMENT\f[R] \f[CR]usage\f[R] of
\f[CR]rg11b10ufloat\f[R]\-\f[CR]format\f[R] \f[CR]GPUTexture\f[R]s, as
well as their blending and multisampling.
T}
T{
\f[CR]shader\-f16\f[R]
T}@T{
When enabled, allows the use of the half\-precision floating\-point type
\c
.UR https://gpuweb.github.io/gpuweb/wgsl/#extension-f16
\f[CR]f16\f[R]
.UE \c
\ in WGSL.
T}
T{
\f[CR]subgroups\f[R]
T}@T{
When enabled, allows the use of \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#extension-subgroups
subgroups
.UE \c
\ in WGSL.
Subgroups enable SIMD\-level parallelism, allowing threads in a
workgroup to communicate and execute collective math operations such as
calculating a sum of numbers, and offering an efficient method for
cross\-thread data sharing.
Note that the \f[CR]subgroupMinSize\f[R] and \f[CR]subgroupMaxSize\f[R]
properties can be useful to check if, for example, you have a hardcoded
algorithm that requires a subgroup of a certain size.
You can use f16 values with subgroups when you request a GPUDevice with
both the \f[CR]shader\-f16\f[R] and \f[CR]subgroups\f[R] features.
T}
T{
\f[CR]texture\-compression\-bc\f[R]
T}@T{
Allows creation of two\-dimensional BC compressed textures.
If \f[CR]texture\-compression\-bc\f[R] is enabled, the following values
can be used for the \f[CR]format\f[R] property of the
\f[CR]createTexture()\f[R] descriptor when creating a
\f[CR]GPUTexture\f[R]: \f[CR]bc1\-rgba\-unorm\f[R],
\f[CR]bc1\-rgba\-unorm\-srgb\f[R], \f[CR]bc2\-rgba\-unorm\f[R],
\f[CR]bc2\-rgba\-unorm\-srgb\f[R], \f[CR]bc3\-rgba\-unorm\f[R],
\f[CR]bc3\-rgba\-unorm\-srgb\f[R], \f[CR]bc4\-r\-unorm\f[R],
\f[CR]bc4\-r\-snorm\f[R], \f[CR]bc5\-rg\-unorm\f[R],
\f[CR]bc5\-rg\-snorm\f[R], \f[CR]bc6h\-rgb\-ufloat\f[R],
\f[CR]bc6h\-rgb\-float\f[R], \f[CR]bc7\-rgba\-unorm\f[R], and
\f[CR]bc7\-rgba\-unorm\-srgb\f[R].
T}
T{
\f[CR]texture\-compression\-bc\-sliced\-3d\f[R]
T}@T{
Allows creation of three\-dimensional BC compressed textures.
If \f[CR]texture\-compression\-bc\-sliced\-3d\f[R] is enabled,
\f[CR]texture\-compression\-bc\f[R] must also be enabled, as it enables
the BC texture formats to be used (see
\f[CR]texture\-compression\-bc\f[R], above) in the first two dimensions.
\f[CR]texture\-compression\-bc\-sliced\-3d\f[R] enables those same
textures to be used in the third dimension.
Adapters that support \f[CR]texture\-compression\-bc\f[R] always support
\f[CR]texture\-compression\-bc\-sliced\-3d\f[R].
\f[B]Note that this feature is not currently supported in any
browser.\f[R]
T}
T{
\f[CR]texture\-compression\-astc\f[R]
T}@T{
Allows creation of two\-dimensional ASTC compressed textures.
If \f[CR]texture\-compression\-astc\f[R] is enabled, the following
values can be used for the \f[CR]format\f[R] property of the
\f[CR]createTexture()\f[R] descriptor when creating a
\f[CR]GPUTexture\f[R]: \f[CR]astc\-4x4\-unorm\f[R],
\f[CR]astc\-4x4\-unorm\-srgb\f[R], \f[CR]astc\-5x4\-unorm\f[R],
\f[CR]astc\-5x4\-unorm\-srgb\f[R], \f[CR]astc\-5x5\-unorm\f[R],
\f[CR]astc\-5x5\-unorm\-srgb\f[R], \f[CR]astc\-6x5\-unorm\f[R],
\f[CR]astc\-6x5\-unorm\-srgb\f[R], \f[CR]astc\-6x6\-unorm\f[R],
\f[CR]astc\-6x6\-unorm\-srgb\f[R], \f[CR]astc\-8x5\-unorm\f[R],
\f[CR]astc\-8x5\-unorm\-srgb\f[R], \f[CR]astc\-8x6\-unorm\f[R],
\f[CR]astc\-8x6\-unorm\-srgb\f[R], \f[CR]astc\-8x8\-unorm\f[R],
\f[CR]astc\-8x8\-unorm\-srgb\f[R], \f[CR]astc\-10x5\-unorm\f[R],
\f[CR]astc\-10x5\-unorm\-srgb\f[R], \f[CR]astc\-10x6\-unorm\f[R],
\f[CR]astc\-10x6\-unorm\-srgb\f[R], \f[CR]astc\-10x8\-unorm\f[R],
\f[CR]astc\-10x8\-unorm\-srgb\f[R], \f[CR]astc\-10x10\-unorm\f[R],
\f[CR]astc\-10x10\-unorm\-srgb\f[R], \f[CR]astc\-12x10\-unorm\f[R],
\f[CR]astc\-12x10\-unorm\-srgb\f[R], and
\f[CR]astc\-12x12\-unorm\(ga\(gaastc\-12x12\-unorm\-srgb\f[R].
T}
T{
\f[CR]texture\-compression\-astc\-sliced\-3d\f[R]
T}@T{
Allows creation of three\-dimensional ASTC compressed textures.
If \f[CR]texture\-compression\-astc\-sliced\-3d\f[R] is enabled,
\f[CR]texture\-compression\-astc\f[R] must also be enabled, as it
enables the ASTC texture formats to be used (see
\f[CR]texture\-compression\-astc\f[R], above) in the first two
dimensions.
\f[CR]texture\-compression\-astc\-sliced\-3d\f[R] enables those same
textures to be used in the third dimension.
Adapters that support \f[CR]texture\-compression\-astc\f[R] do not
always support \f[CR]texture\-compression\-astc\-sliced\-3d\f[R].
\f[B]Note that this feature is not currently supported in any
browser.\f[R]
T}
T{
\f[CR]texture\-compression\-etc2\f[R]
T}@T{
Allows creation of two\-dimensional ETC2 compressed textures.
If \f[CR]texture\-compression\-etc2\f[R] is enabled, the following
values can be used for the \f[CR]format\f[R] property of the
\f[CR]createTexture()\f[R] descriptor when creating a
\f[CR]GPUTexture\f[R]: \f[CR]etc2\-rgb8unorm\f[R],
\f[CR]etc2\-rgb8unorm\-srgb\f[R], \f[CR]etc2\-rgb8a1unorm\f[R],
\f[CR]etc2\-rgb8a1unorm\-srgb\f[R], \f[CR]etc2\-rgba8unorm\f[R],
\f[CR]etc2\-rgba8unorm\-srgb\f[R], \f[CR]eac\-r11unorm\f[R],
\f[CR]eac\-r11snorm\f[R], \f[CR]eac\-rg11unorm\f[R], and
\f[CR]eac\-rg11snorm\f[R].
T}
T{
\f[CR]timestamp\-query\f[R]
T}@T{
Allows timestamp queries to be run, which measure the time taken to run
compute and render passes.
If \f[CR]timestamp\-query\f[R] is enabled, the \f[CR]timestamp\f[R]
value can be set for the \f[CR]type\f[R] property of the
\f[CR]createQuerySet()\f[R] descriptor when creating a
\f[CR]GPUQuerySet\f[R].
In addition, the \f[CR]timestampWrites\f[R] property can be set on the
\f[CR]beginComputePass()\f[R] and \f[CR]beginRenderPass()\f[R]
descriptor when creating a \f[CR]GPUComputePassEncoder\f[R] and
\f[CR]GPURenderPassEncoder\f[R], respectively.
\f[CR]GPUQuerySet\f[R] objects are referenced within the objects
included in the \f[CR]timestampWrites\f[R] property, to specify where
timestamps should be written to.
T}
.TE
.SH INSTANCE PROPERTIES
The following properties are available to all read\-only
\f[CR]Set\f[R]\-like objects (the links below are to the \f[CR]Set\f[R]
global object reference page).
.TP
\f[B]size\f[R]
Returns the number of values in the set.
.SH INSTANCE METHODS
The following methods are available to all read\-only
\f[CR]Set\f[R]\-like objects (the below links are to the \f[CR]Set\f[R]
global object reference page).
.TP
\f[B]has()\f[R]
Returns a boolean asserting whether an element is present with the given
value in the set or not.
.TP
\f[B]values()\f[R]
Returns a new iterator object that yields the \f[B]values\f[R] for each
element in the set in insertion order.
.TP
\f[B]keys()\f[R]
An alias for \f[CR]values()\f[R].
.TP
\f[B]entries()\f[R]
Returns a new iterator object that contains \f[B]an array of
\f[CB][value, value]\f[B]\f[R] for each element in the set, in insertion
order.
.TP
\f[B]forEach()\f[R]
Calls a provided callback function once for each value present in the
set, in insertion order.
.SH EXAMPLES
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();
  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[B]const\f[R] adapterFeatures = adapter.features;

  \f[I]// Return the size of the set\f[R]
  console.log(adapterFeatures.size);

  \f[I]// Check whether a feature is supported by the adapter\f[R]
  console.log(adapterFeatures.has(\(dqtexture\-compression\-astc\(dq));

  \f[I]// Iterate through all the set values using values()\f[R]
  \f[B]const\f[R] valueIterator = adapterFeatures.values();
  \f[B]for\f[R] (\f[B]const\f[R] value \f[B]of\f[R] valueIterator) {
    console.log(value);
  }

  \f[I]// Iterate through all the set values using keys()\f[R]
  \f[B]const\f[R] keyIterator = adapterFeatures.keys();
  \f[B]for\f[R] (\f[B]const\f[R] value \f[B]of\f[R] keyIterator) {
    console.log(value);
  }

  \f[I]// Iterate through all the set values using entries()\f[R]
  \f[B]const\f[R] entryIterator = adapterFeatures.entries();
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] entryIterator) {
    console.log(entry[0]);
  }

  \f[I]// Iterate through all the set values using forEach()\f[R]
  adapterFeatures.forEach((value) \f[B]=>\f[R] {
    console.log(value);
  });

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
.IP \(bu 2
The specification \c
.UR https://gpuweb.github.io/gpuweb/#feature-index
Feature Index
.UE \c
