.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WINDOW.DEVICEPIXELRATIO" "3JS" "April 15, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.devicePixelRatio \- Window: devicePixelRatio property
.SH SYNOPSIS
The \f[B]\f[CB]devicePixelRatio\f[B]\f[R] of \f[CR]Window\f[R] interface
returns the ratio of the resolution in \f[I]physical pixels\f[R] to the
resolution in \f[I]CSS pixels\f[R] for the current display device.
.PP
This value could also be interpreted as the ratio of pixel sizes: the
size of one \f[I]CSS pixel\f[R] to the size of one \f[I]physical
pixel\f[R].
In simpler terms, this tells the browser how many of the screen\(cqs
actual pixels should be used to draw a single CSS pixel.
.PP
Page zooming affects the value of \f[CR]devicePixelRatio\f[R].
When a page is zoomed in (made larger), the size of a CSS pixel
increases, and so the \f[CR]devicePixelRatio\f[R] value increases.
Pinch\-zooming does not affect \f[CR]devicePixelRatio\f[R], because this
magnifies the page without changing the size of a CSS pixel.
.PP
This is useful when dealing with the difference between rendering on a
standard display versus a HiDPI or Retina display, which use more screen
pixels to draw the same objects, resulting in a sharper image.
.PP
You can use \f[CR]window.matchMedia()\f[R] to check if the value of
\f[CR]devicePixelRatio\f[R] changes (which can happen, for example, if
the user drags the window to a display with a different pixel density).
See the example below.
.SH VALUE
A double\-precision floating\-point value indicating the ratio of the
display\(cqs resolution in physical pixels to the resolution in CSS
pixels.
A value of 1 indicates a classic 96 DPI display, while a value of 2 is
expected for HiDPI/Retina displays.
.PP
Other values may be returned in the case of unusually low resolution
displays or, more often, when a screen has a higher pixel density than
double the standard resolution of 96 DPI.
Modern mobile device screens \- which offer high display resolutions at
small physical sizes \- often yield a \f[CR]devicePixelRatio\f[R] value
greater than 2.
.SH EXAMPLES
.SS Correcting resolution in a \f[CR]<canvas>\f[R]
A \f[CR]<canvas>\f[R] can appear too blurry on retina screens.
Use \f[CR]window.devicePixelRatio\f[R] to determine how much extra pixel
density should be added to allow for a sharper image.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

\f[I]// Set display size (css pixels).\f[R]
\f[B]const\f[R] size = 200;
canvas.style.width = \(ga${size}px\(ga;
canvas.style.height = \(ga${size}px\(ga;

\f[I]// Set actual size in memory (scaled to account for extra pixel density).\f[R]
\f[B]const\f[R] scale = window.devicePixelRatio; \f[I]// Change to 1 on retina screens to see blurry canvas.\f[R]
canvas.width = Math.floor(size * scale);
canvas.height = Math.floor(size * scale);

\f[I]// Normalize coordinate system to use CSS pixels.\f[R]
ctx.scale(scale, scale);

ctx.fillStyle = \(dq#bada55\(dq;
ctx.fillRect(10, 10, 300, 300);
ctx.fillStyle = \(dq#ffffff\(dq;
ctx.font = \(dq18px Arial\(dq;
ctx.textAlign = \(dqcenter\(dq;
ctx.textBaseline = \(dqmiddle\(dq;

\f[B]const\f[R] x = size / 2;
\f[B]const\f[R] y = size / 2;

\f[B]const\f[R] textString = \(dqI love MDN\(dq;
ctx.fillText(textString, x, y);
.EE
[IMAGE: Side\-by\-side comparison of the effect of different
devicePixelRatio values on an image shown in a retina display.]
Side\-by\-side comparison of the effect of different devicePixelRatio
values on an image shown in a retina display.
.SS Monitoring screen resolution or zoom level changes
In this example, we\(cqll set up a media query and watch it to see when
the device resolution changes, logging the new resolution.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\(dqcontainer\(dq>
  <\f[B]p\f[R]>
    This example demonstrates the effect of zooming the page in and out (or
    moving it to a screen with a different scaling factor) on the value of the
    <\f[B]code\f[R]>devicePixelRatio</\f[B]code\f[R]> property.
  </\f[B]p\f[R]>
  <\f[B]p\f[R]>Try it and watch what happens!</\f[B]p\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] id=\(dqoutput\(dq></\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
body {
  \f[B]font\f[R]:
    22px arial,
    sans\-serif;
}

container {
  \f[B]border\f[R]: 2px solid #22d;
  \f[B]margin\f[R]: 1rem auto;
  \f[B]padding\f[R]: 1rem;
  \f[B]background\-color\f[R]: #a9f;
}
.EE
.SS JavaScript
The string \f[CR]mqString\f[R] is set to a media query which checks to
see if the current display resolution matches a specific number of
device dots per \f[CR]px\f[R].
.PP
The \f[CR]media\f[R] variable is a \f[CR]MediaQueryList\f[R] object
that\(cqs initialized with the media query string.
When the result of running \f[CR]mqString\f[R] against the document
changes, the \f[CR]media\f[R] object\(cqs \f[CR]change\f[R] event fires,
and the code logs the new resolution.
.PP
Note that every time the resolution changes, the example has to create a
new media query, based on the new resolution, and a new
\f[CR]MediaQueryList\f[R] instance.
.IP
.EX
\f[B]let\f[R] remove = \f[B]null\f[R];
\f[B]const\f[R] output = document.querySelector(\(dq#output\(dq);

\f[B]const\f[R] updatePixelRatio = () \f[B]=>\f[R] {
  \f[B]if\f[R] (remove != \f[B]null\f[R]) {
    remove();
  }
  \f[B]const\f[R] mqString = \(ga(resolution: ${window.devicePixelRatio}dppx)\(ga;
  \f[B]const\f[R] media = matchMedia(mqString);
  media.addEventListener(\(dqchange\(dq, updatePixelRatio);
  remove = () \f[B]=>\f[R] {
    media.removeEventListener(\(dqchange\(dq, updatePixelRatio);
  };

  output.textContent = \(gadevicePixelRatio: ${window.devicePixelRatio}\(ga;
};

updatePixelRatio();
.EE
.SS Result
To test the example, try zooming the page in and out, and note the
difference in the logged value of \f[CR]devicePixelRatio\f[R].
.SH SEE ALSO
.IP \(bu 2
Media queries
.IP \(bu 2
Using media queries
.IP \(bu 2
CSS \f[CR]resolution\f[R] media query
.IP \(bu 2
The \f[CR]image\-resolution\f[R] property
