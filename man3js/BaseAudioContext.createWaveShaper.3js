.\" Automatically generated by Pandoc 3.4
.\"
.TH "BaseAudioContext.createWaveShaper" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BaseAudioContext.createWaveShaper \- BaseAudioContext:
createWaveShaper() method
.SH SYNOPSIS
The \f[CR]createWaveShaper()\f[R] method of the
\f[CR]BaseAudioContext\f[R] interface creates a
\f[CR]WaveShaperNode\f[R], which represents a non\-linear distortion.
It is used to apply distortion effects to your audio.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]WaveShaperNode()\f[R] constructor is the
recommended way to create a \f[CR]WaveShaperNode\f[R]; see Creating an
AudioNode.
.RE
.SH SYNTAX
.IP
.EX
createWaveShaper()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]WaveShaperNode\f[R].
.SH EXAMPLES
The following example shows basic usage of an AudioContext to create a
wave shaper node.
For more complete applied examples/information, check out our \c
.UR https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR https://github.com/mdn/webaudio-examples/blob/main/voice-change-o-matic/scripts/app.js#L108-L193
app.js lines 108\[en]193
.UE \c
\ for relevant code).
.RS
.PP
\f[B]Note:\f[R] Sigmoid functions are commonly used for distortion
curves because of their natural properties.
Their S\-shape, for instance, helps create a smoother sounding result.
We found the below distortion curve code on \c
.UR https://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion
Stack Overflow
.UE \c
\&.
.RE
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();
\f[B]const\f[R] distortion = audioCtx.createWaveShaper();

\f[I]// \&...\f[R]

\f[B]function\f[R] makeDistortionCurve(amount) {
  \f[B]const\f[R] k = \f[B]typeof\f[R] amount === \[dq]number\[dq] ? amount : 50;
  \f[B]const\f[R] n_samples = 44100;
  \f[B]const\f[R] curve = \f[B]new\f[R] Float32Array(n_samples);
  \f[B]const\f[R] deg = Math.PI / 180;

  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < n_samples; i++) {
    \f[B]const\f[R] x = (i * 2) / n_samples \- 1;
    curve[i] = ((3 + k) * x * 20 * deg) / (Math.PI + k * Math.abs(x));
  }
  \f[B]return\f[R] curve;
}

\f[I]// \&...\f[R]

distortion.curve = makeDistortionCurve(400);
distortion.oversample = \[dq]4x\[dq];
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
