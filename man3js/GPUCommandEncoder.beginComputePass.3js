.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMMANDENCODER.BEGINCOMPUTEPASS" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUCommandEncoder.beginComputePass \- GPUCommandEncoder:
beginComputePass() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]beginComputePass()\f[B]\f[R] method of the
\f[CR]GPUCommandEncoder\f[R] interface starts encoding a compute pass,
returning a \f[CR]GPUComputePassEncoder\f[R] that can be used to control
computation.
.SH SYNTAX
.IP
.EX
beginComputePass()
beginComputePass(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R] \f[I](optional)\f[R]
An object containing the following properties:
.RS
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]timestampWrites\f[R] \f[I](optional)\f[R]
An array of objects defining where and when timestamp query values will
be written for this pass.
These objects have the following properties:
.RS
.TP
\f[B]querySet\f[R]
A \f[CR]GPUQuerySet\f[R] of type \f[CR]\(dqtimestamp\(dq\f[R] that the
timestamp query results will be written to.
.TP
\f[B]beginningOfPassWriteIndex\f[R]
A number specifying the query index in \f[CR]querySet\f[R] where the
timestamp at the beginning of the render pass will be written.
This is optional \- if not defined, no timestamp will be written for the
beginning of the pass.
.TP
\f[B]endOfPassWriteIndex\f[R]
A number specifying the query index in \f[CR]querySet\f[R] where the
timestamp at the end of the render pass will be written.
This is optional \- if not defined, no timestamp will be written for the
end of the pass.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]timestamp\-query\f[R] feature needs to be
enabled to use timestamp queries.
Timestamp query values are written in nanoseconds, but how the value is
determined is implementation\-defined.
.RE
.RE
.RE
.SS Return value
A \f[CR]GPUComputePassEncoder\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]beginComputePass()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUComputePassEncoder\f[R] is returned:
.IP \(bu 2
The \f[CR]timestamp\-query\f[R] feature is enabled in the
\f[CR]GPUDevice\f[R].
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
, several commands are recorded via a \f[CR]GPUCommandEncoder\f[R].
Most of these commands originate from the
\f[CR]GPUComputePassEncoder\f[R] created via
\f[CR]beginComputePass()\f[R].
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create GPUCommandEncoder to encode commands to issue to the GPU\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Initiate render pass\f[R]
\f[B]const\f[R] passEncoder = commandEncoder.beginComputePass();

\f[I]// Issue commands\f[R]
passEncoder.setPipeline(computePipeline);
passEncoder.setBindGroup(0, bindGroup);
passEncoder.dispatchWorkgroups(Math.ceil(BUFFER_SIZE / 64));

\f[I]// End the render pass\f[R]
passEncoder.end();

\f[I]// Copy output buffer to staging buffer\f[R]
commandEncoder.copyBufferToBuffer(
  output,
  0, \f[I]// Source offset\f[R]
  stagingBuffer,
  0, \f[I]// Destination offset\f[R]
  BUFFER_SIZE,
);

\f[I]// End frame by passing array of command buffers to command queue for execution\f[R]
device.queue.submit([commandEncoder.finish()]);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
