.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUTEXTUREVIEW" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUTextureView \- GPUTextureView
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUTextureView\f[B]\f[R] interface of the WebGPU API
represents a view into a subset of the texture resources defined by a
particular \f[CR]GPUTexture\f[R].
.PP
A \f[CR]GPUTextureView\f[R] object instance is created using the
\f[CR]GPUTexture.createView()\f[R] method.
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH EXAMPLES
In the WebGPU Samples \c
.UR https://webgpu.github.io/webgpu-samples/samples/cubemap/
Cubemap demo
.UE \c
, you will see multiple examples of how \f[CR]GPUTextureView\f[R]s
(created by \f[CR]GPUTexture.createView()\f[R] calls) are used, both as
a \f[CR]resource\f[R] in a \f[CR]GPUDevice.createBindGroup()\f[R] call,
and as a provided \f[CR]view\f[R] in the
\f[CR]depthStencilAttachment\f[R] object of a
\f[CR]GPUCommandEncoder.beginRenderPass()\f[R] descriptor.
.IP
.EX
\f[B]const\f[R] uniformBindGroup = device.createBindGroup({
  layout: pipeline.getBindGroupLayout(0),
  entries: [
    {
      binding: 0,
      resource: {
        buffer: uniformBuffer,
        offset: 0,
        size: uniformBufferSize,
      },
    },
    {
      binding: 1,
      resource: sampler,
    },
    {
      binding: 2,
      resource: cubemapTexture.createView({
        dimension: \(dqcube\(dq,
      }),
    },
  ],
});

\f[B]const\f[R] renderPassDescriptor: GPURenderPassDescriptor = {
  colorAttachments: [
    {
      view: \f[B]undefined\f[R], \f[I]// Assigned later\f[R]
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
    },
  ],
  depthStencilAttachment: {
    view: depthTexture.createView(),
    depthClearValue: 1.0,
    depthLoadOp: \(dqclear\(dq,
    depthStoreOp: \(dqstore\(dq,
  },
};

\f[I]// \&...\f[R]

\f[B]const\f[R] commandEncoder = device.createCommandEncoder();
\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
