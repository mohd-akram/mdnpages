.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "INTL.DATETIMEFORMAT.DATETIMEFORMAT" "3JS" "April 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.DateTimeFormat.DateTimeFormat \- Intl.DateTimeFormat() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Intl.DateTimeFormat()\f[B]\f[R] constructor creates
\f[CR]Intl.DateTimeFormat\f[R] objects.
.IP
.EX
\f[B]const\f[R] date = \f[B]new\f[R] Date(Date.UTC(2020, 11, 20, 3, 23, 16, 738));
\f[I]// Results below assume UTC timezone \- your results may vary\f[R]

\f[I]// Specify default date formatting for language (locale)\f[R]
console.log(\f[B]new\f[R] Intl.DateTimeFormat(\(dqen\-US\(dq).format(date));
\f[I]// Expected output: \(dq12/20/2020\(dq\f[R]

\f[I]// Specify default date formatting for language with a fallback language (in this case Indonesian)\f[R]
console.log(\f[B]new\f[R] Intl.DateTimeFormat([\(dqban\(dq, \(dqid\(dq]).format(date));
\f[I]// Expected output: \(dq20/12/2020\(dq\f[R]

\f[I]// Specify date and time format using \(dqstyle\(dq options (i.e. full, long, medium, short)\f[R]
console.log(
  \f[B]new\f[R] Intl.DateTimeFormat(\(dqen\-GB\(dq, {
    dateStyle: \(dqfull\(dq,
    timeStyle: \(dqlong\(dq,
    timeZone: \(dqAustralia/Sydney\(dq,
  }).format(date),
);
\f[I]// Expected output: \(dqSunday, 20 December 2020 at 14:23:16 GMT+11\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
new Intl.DateTimeFormat()
new Intl.DateTimeFormat(locales)
new Intl.DateTimeFormat(locales, options)

Intl.DateTimeFormat()
Intl.DateTimeFormat(locales)
Intl.DateTimeFormat(locales, options)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Intl.DateTimeFormat()\f[R] can be called with or
without \f[CR]new\f[R].
Both create a new \f[CR]Intl.DateTimeFormat\f[R] instance.
However, there\(cqs a special behavior when it\(cqs called without
\f[CR]new\f[R] and the \f[CR]this\f[R] value is another
\f[CR]Intl.DateTimeFormat\f[R] instance; see Return value.
.RE
.SS Parameters
.TP
\f[B]locales\f[R] \f[I](optional)\f[R]
A string with a BCP 47 language tag or an \f[CR]Intl.Locale\f[R]
instance, or an array of such locale identifiers.
The runtime\(cqs default locale is used when \f[CR]undefined\f[R] is
passed or when none of the specified locale identifiers is supported.
For the general form and interpretation of the \f[CR]locales\f[R]
argument, see the parameter description on the \f[CR]Intl\f[R] main
page.
.RS
.PP
The following Unicode extension keys are allowed:
.TP
\f[B]nu\f[R]
See \f[CR]numberingSystem\f[R].
.TP
\f[B]ca\f[R]
See \f[CR]calendar\f[R].
.TP
\f[B]hc\f[R]
See \f[CR]hourCycle\f[R].
.PP
These keys can also be set with \f[CR]options\f[R] (as listed below).
When both are set, the \f[CR]options\f[R] property takes precedence.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object.
For ease of reading, the property list is broken into sections based on
their purposes, including locale options, date\-time component options,
and style shortcuts.
.SS Locale options
.TP
\f[B]localeMatcher\f[R]
The locale matching algorithm to use.
Possible values are \f[CR]\(dqlookup\(dq\f[R] and
\f[CR]\(dqbest fit\(dq\f[R]; the default is \f[CR]\(dqbest fit\(dq\f[R].
For information about this option, see Locale identification and
negotiation.
.TP
\f[B]calendar\f[R]
The calendar to use, such as \f[CR]\(dqchinese\(dq\f[R],
\f[CR]\(dqgregory\(dq\f[R], \f[CR]\(dqpersian\(dq\f[R], and so on.
For a list of supported calendar types, see
\f[CR]Intl.supportedValuesOf()\f[R].
This option can also be set through the \f[CR]ca\f[R] Unicode extension
key; if both are provided, this \f[CR]options\f[R] property takes
precedence.
.TP
\f[B]numberingSystem\f[R]
The numbering system to use for number formatting, such as
\f[CR]\(dqarab\(dq\f[R], \f[CR]\(dqhans\(dq\f[R],
\f[CR]\(dqmathsans\(dq\f[R], and so on.
For a list of supported numbering system types, see
\f[CR]Intl.supportedValuesOf()\f[R].
This option can also be set through the \f[CR]nu\f[R] Unicode extension
key; if both are provided, this \f[CR]options\f[R] property takes
precedence.
.TP
\f[B]hour12\f[R]
Whether to use 12\-hour time (as opposed to 24\-hour time).
Possible values are \f[CR]true\f[R] and \f[CR]false\f[R]; the default is
locale dependent.
When \f[CR]true\f[R], this option sets \f[CR]hourCycle\f[R] to either
\f[CR]\(dqh11\(dq\f[R] or \f[CR]\(dqh12\(dq\f[R], depending on the
locale.
When \f[CR]false\f[R], it sets \f[CR]hourCycle\f[R] to
\f[CR]\(dqh23\(dq\f[R].
\f[CR]hour12\f[R] overrides both the \f[CR]hc\f[R] locale extension tag
and the \f[CR]hourCycle\f[R] option, should either or both of those be
present.
.TP
\f[B]hourCycle\f[R]
The hour cycle to use.
Possible values are \f[CR]\(dqh11\(dq\f[R], \f[CR]\(dqh12\(dq\f[R],
\f[CR]\(dqh23\(dq\f[R], and \f[CR]\(dqh24\(dq\f[R].
This option can also be set through the \f[CR]hc\f[R] Unicode extension
key; if both are provided, this \f[CR]options\f[R] property takes
precedence.
.TP
\f[B]timeZone\f[R]
The time zone to use.
Time zone names correspond to the Zone and Link names of the \c
.UR https://www.iana.org/time-zones
IANA Time Zone Database
.UE \c
, such as \f[CR]\(dqUTC\(dq\f[R], \f[CR]\(dqAsia/Shanghai\(dq\f[R],
\f[CR]\(dqAsia/Kolkata\(dq\f[R], and
\f[CR]\(dqAmerica/New_York\(dq\f[R].
Additionally, time zones can be given as UTC offsets in the format
\(lq±hh:mm\(rq, \(lq±hhmm\(rq, or \(lq±hh\(rq, for example as
\f[CR]\(dq+01:00\(dq\f[R], \f[CR]\(dq\-2359\(dq\f[R], or
\f[CR]\(dq+23\(dq\f[R].
The default is the runtime\(cqs default time zone.
.SS Date\-time component options
.TP
\f[B]weekday\f[R]
The representation of the weekday.
Possible values are:
.RS
.TP
\f[B]\(dqlong\(dq\f[R]
E.g., \f[CR]Thursday\f[R]
.TP
\f[B]\(dqshort\(dq\f[R]
E.g., \f[CR]Thu\f[R]
.TP
\f[B]\(dqnarrow\(dq\f[R]
E.g., \f[CR]T\f[R].
Two weekdays may have the same narrow style for some locales (e.g.,
\f[CR]Tuesday\f[R]\(cqs narrow style is also \f[CR]T\f[R]).
.RE
.TP
\f[B]era\f[R]
The representation of the era.
Possible values are:
.RS
.TP
\f[B]\(dqlong\(dq\f[R]
E.g., \f[CR]Anno Domini\f[R]
.TP
\f[B]\(dqshort\(dq\f[R]
E.g., \f[CR]AD\f[R]
.TP
\f[B]\(dqnarrow\(dq\f[R]
E.g., \f[CR]A\f[R]
.RE
.TP
\f[B]year\f[R]
The representation of the year.
Possible values are \f[CR]\(dqnumeric\(dq\f[R] and
\f[CR]\(dq2\-digit\(dq\f[R].
.TP
\f[B]month\f[R]
The representation of the month.
Possible values are:
.RS
.TP
\f[B]\(dqnumeric\(dq\f[R]
E.g., \f[CR]3\f[R]
.TP
\f[B]\(dq2\-digit\(dq\f[R]
E.g., \f[CR]03\f[R]
.TP
\f[B]\(dqlong\(dq\f[R]
E.g., \f[CR]March\f[R]
.TP
\f[B]\(dqshort\(dq\f[R]
E.g., \f[CR]Mar\f[R]
.TP
\f[B]\(dqnarrow\(dq\f[R]
E.g., \f[CR]M\f[R]).
Two months may have the same narrow style for some locales (e.g.,
\f[CR]May\f[R]\(cqs narrow style is also \f[CR]M\f[R]).
.RE
.TP
\f[B]day\f[R]
The representation of the day.
Possible values are \f[CR]\(dqnumeric\(dq\f[R] and
\f[CR]\(dq2\-digit\(dq\f[R].
.TP
\f[B]dayPeriod\f[R]
The formatting style used for day periods like \(lqin the morning\(rq,
\(lqam\(rq, \(lqnoon\(rq, \(lqn\(rq etc.
Possible values are \f[CR]\(dqnarrow\(dq\f[R], \f[CR]\(dqshort\(dq\f[R],
and \f[CR]\(dqlong\(dq\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] This option only has an effect if a 12\-hour clock
(\f[CR]hourCycle: \(dqh12\(dq\f[R] or \f[CR]hourCycle: \(dqh11\(dq\f[R])
is used.
Many locales use the same string irrespective of the width specified.
.RE
.RE
.TP
\f[B]hour\f[R]
The representation of the hour.
Possible values are \f[CR]\(dqnumeric\(dq\f[R] and
\f[CR]\(dq2\-digit\(dq\f[R].
.TP
\f[B]minute\f[R]
The representation of the minute.
Possible values are \f[CR]\(dqnumeric\(dq\f[R] and
\f[CR]\(dq2\-digit\(dq\f[R].
.TP
\f[B]second\f[R]
The representation of the second.
Possible values are \f[CR]\(dqnumeric\(dq\f[R] and
\f[CR]\(dq2\-digit\(dq\f[R].
.TP
\f[B]fractionalSecondDigits\f[R]
The number of digits used to represent fractions of a second (any
additional digits are truncated).
Possible values are from \f[CR]1\f[R] to \f[CR]3\f[R].
.TP
\f[B]timeZoneName\f[R]
The localized representation of the time zone name.
Possible values are:
.RS
.TP
\f[B]\(dqlong\(dq\f[R]
Long localized form (e.g., \f[CR]Pacific Standard Time\f[R],
\f[CR]Nordamerikanische Westküsten\-Normalzeit\f[R])
.TP
\f[B]\(dqshort\(dq\f[R]
Short localized form (e.g.: \f[CR]PST\f[R], \f[CR]GMT\-8\f[R])
.TP
\f[B]\(dqshortOffset\(dq\f[R]
Short localized GMT format (e.g., \f[CR]GMT\-8\f[R])
.TP
\f[B]\(dqlongOffset\(dq\f[R]
Long localized GMT format (e.g., \f[CR]GMT\-08:00\f[R])
.TP
\f[B]\(dqshortGeneric\(dq\f[R]
Short generic non\-location format (e.g.: \f[CR]PT\f[R],
\f[CR]Los Angeles Zeit\f[R]).
.TP
\f[B]\(dqlongGeneric\(dq\f[R]
Long generic non\-location format (e.g.: \f[CR]Pacific Time\f[R],
\f[CR]Nordamerikanische Westküstenzeit\f[R])
.RS
.PP
\f[B]Note:\f[R] Timezone display may fall back to another format if a
required string is unavailable.
For example, the non\-location formats should display the timezone
without a specific country/city location like \(lqPacific Time\(rq, but
may fall back to a timezone like \(lqLos Angeles Time\(rq.
.RE
.RE
.SS Date\-time component default values
If any of the date\-time component options are specified, then
\f[CR]dateStyle\f[R] and \f[CR]timeStyle\f[R] must be
\f[CR]undefined\f[R].
If all date\-time component options and
\f[CR]dateStyle\f[R]/\f[CR]timeStyle\f[R] are \f[CR]undefined\f[R], some
default options for date\-time components are set, which depend on the
object that the formatting method was called with:
.IP \(bu 2
When formatting \f[CR]Temporal.PlainDate\f[R] and \f[CR]Date\f[R],
\f[CR]year\f[R], \f[CR]month\f[R], and \f[CR]day\f[R] default to
\f[CR]\(dqnumeric\(dq\f[R].
.IP \(bu 2
When formatting \f[CR]Temporal.PlainTime\f[R], \f[CR]hour\f[R],
\f[CR]minute\f[R], and \f[CR]second\f[R] default to
\f[CR]\(dqnumeric\(dq\f[R].
.IP \(bu 2
When formatting \f[CR]Temporal.PlainYearMonth\f[R], \f[CR]year\f[R] and
\f[CR]month\f[R] default to \f[CR]\(dqnumeric\(dq\f[R].
.IP \(bu 2
When formatting \f[CR]Temporal.PlainMonthDay\f[R], \f[CR]month\f[R] and
\f[CR]day\f[R] default to \f[CR]\(dqnumeric\(dq\f[R].
.IP \(bu 2
When formatting \f[CR]Temporal.PlainDateTime\f[R] and
\f[CR]Temporal.Instant\f[R], \f[CR]year\f[R], \f[CR]month\f[R],
\f[CR]day\f[R], \f[CR]hour\f[R], \f[CR]minute\f[R], and
\f[CR]second\f[R] default to \f[CR]\(dqnumeric\(dq\f[R].
.SS Format matching
Implementations are required to support displaying at least the
following subsets of date\-time components:
.IP \(bu 2
\f[CR]weekday\f[R], \f[CR]year\f[R], \f[CR]month\f[R], \f[CR]day\f[R],
\f[CR]hour\f[R], \f[CR]minute\f[R], \f[CR]second\f[R]
.IP \(bu 2
\f[CR]weekday\f[R], \f[CR]year\f[R], \f[CR]month\f[R], \f[CR]day\f[R]
.IP \(bu 2
\f[CR]year\f[R], \f[CR]month\f[R], \f[CR]day\f[R]
.IP \(bu 2
\f[CR]year\f[R], \f[CR]month\f[R]
.IP \(bu 2
\f[CR]month\f[R], \f[CR]day\f[R]
.IP \(bu 2
\f[CR]hour\f[R], \f[CR]minute\f[R], \f[CR]second\f[R]
.IP \(bu 2
\f[CR]hour\f[R], \f[CR]minute\f[R]
.PP
The date\-time component styles requested might not directly correspond
to a valid format supported by the locale, so the format matcher allows
you to specify how to match the requested styles to the closest
supported format.
.TP
\f[B]formatMatcher\f[R]
The format matching algorithm to use.
Possible values are \f[CR]\(dqbasic\(dq\f[R] and
\f[CR]\(dqbest fit\(dq\f[R]; the default is \f[CR]\(dqbest fit\(dq\f[R].
The algorithm for \f[CR]\(dqbest fit\(dq\f[R] is
implementation\-defined, and \f[CR]\(dqbasic\(dq\f[R] is \c
.UR https://tc39.es/ecma402/#sec-basicformatmatcher
defined by the spec
.UE \c
\&.
This option is only used when both \f[CR]dateStyle\f[R] and
\f[CR]timeStyle\f[R] are \f[CR]undefined\f[R] (so that each date\-time
component\(cqs format is individually customizable).
.SS Style shortcuts
.TP
\f[B]dateStyle\f[R]
The \c
.UR https://cldr.unicode.org/translation/date-time/date-time-patterns#h.aa5zjyepm6vh
date formatting style
.UE \c
\ to use.
Possible values are \f[CR]\(dqfull\(dq\f[R], \f[CR]\(dqlong\(dq\f[R],
\f[CR]\(dqmedium\(dq\f[R], and \f[CR]\(dqshort\(dq\f[R].
It expands to styles for \f[CR]weekday\f[R], \f[CR]day\f[R],
\f[CR]month\f[R], \f[CR]year\f[R], and \f[CR]era\f[R], with the exact
combination of values depending on the locale.
When formatting objects such as \f[CR]Temporal.PlainDate\f[R],
\f[CR]Temporal.PlainYearMonth\f[R], and
\f[CR]Temporal.PlainMonthDay\f[R], \f[CR]dateStyle\f[R] will resolve to
only those fields relevant to the object.
.TP
\f[B]timeStyle\f[R]
The \c
.UR https://cldr.unicode.org/translation/date-time/date-time-patterns#h.588vo3awdscu
time formatting style
.UE \c
\ to use.
Possible values are \f[CR]\(dqfull\(dq\f[R], \f[CR]\(dqlong\(dq\f[R],
\f[CR]\(dqmedium\(dq\f[R], and \f[CR]\(dqshort\(dq\f[R].
It expands to styles for \f[CR]hour\f[R], \f[CR]minute\f[R],
\f[CR]second\f[R], and \f[CR]timeZoneName\f[R], with the exact
combination of values depending on the locale.
.RS
.PP
\f[B]Note:\f[R] \f[CR]dateStyle\f[R] and \f[CR]timeStyle\f[R] can be
used with each other, but not with other date\-time component options
(e.g., \f[CR]weekday\f[R], \f[CR]hour\f[R], \f[CR]month\f[R], etc.).
.RE
.PP
You can format different object types depending on which of the style
shortcut options you include:
.IP \(bu 2
If the \f[CR]dateStyle\f[R] is specified, then you can format
\f[CR]Temporal.PlainDate\f[R], \f[CR]Temporal.PlainYearMonth\f[R], and
\f[CR]Temporal.PlainMonthDay\f[R] objects.
.IP \(bu 2
If the \f[CR]timeStyle\f[R] is specified, then you can format
\f[CR]Temporal.PlainTime\f[R] objects.
.IP \(bu 2
If either \f[CR]dateStyle\f[R] or \f[CR]timeStyle\f[R] is specified,
then you can format \f[CR]Temporal.PlainDateTime\f[R] and
\f[CR]Date\f[R] objects.
.SS Return value
A new \f[CR]Intl.DateTimeFormat\f[R] object.
.RS
.PP
\f[B]Note:\f[R] The text below describes behavior that is marked by the
specification as \(lqoptional\(rq.
It may not work in all environments.
Check the browser compatibility table.
.RE
.PP
Normally, \f[CR]Intl.DateTimeFormat()\f[R] can be called with or without
\f[CR]new\f[R], and a new \f[CR]Intl.DateTimeFormat\f[R] instance is
returned in both cases.
However, if the \f[CR]this\f[R] value is an object that is
\f[CR]instanceof\f[R] \f[CR]Intl.DateTimeFormat\f[R] (doesn\(cqt
necessarily mean it\(cqs created via \f[CR]new Intl.DateTimeFormat\f[R];
just that it has \f[CR]Intl.DateTimeFormat.prototype\f[R] in its
prototype chain), then the value of \f[CR]this\f[R] is returned instead,
with the newly created \f[CR]Intl.DateTimeFormat\f[R] object hidden in a
\f[CR][Symbol(IntlLegacyConstructedSymbol)]\f[R] property (a unique
symbol that\(cqs reused between instances).
.IP
.EX
\f[B]const\f[R] formatter = Intl.DateTimeFormat.call(
  { __proto__: Intl.DateTimeFormat.prototype },
  \(dqen\-US\(dq,
  { dateStyle: \(dqfull\(dq },
);
console.log(Object.getOwnPropertyDescriptors(formatter));
\f[I]// {\f[R]
\f[I]//   [Symbol(IntlLegacyConstructedSymbol)]: {\f[R]
\f[I]//     value: DateTimeFormat [Intl.DateTimeFormat] {},\f[R]
\f[I]//     writable: false,\f[R]
\f[I]//     enumerable: false,\f[R]
\f[I]//     configurable: false\f[R]
\f[I]//   }\f[R]
\f[I]// }\f[R]
.EE
.PP
Note that there\(cqs only one actual \f[CR]Intl.DateTimeFormat\f[R]
instance here: the one hidden in
\f[CR][Symbol(IntlLegacyConstructedSymbol)]\f[R].
Calling the \f[CR]format()\f[R] and \f[CR]resolvedOptions()\f[R] methods
on \f[CR]formatter\f[R] would correctly use the options stored in that
instance, but calling all other methods (e.g., \f[CR]formatRange()\f[R])
would fail: \(lqTypeError: formatRange method called on incompatible
Object\(rq, because those methods don\(cqt consult the hidden
instance\(cqs options.
.PP
This behavior, called \f[CR]ChainDateTimeFormat\f[R], does not happen
when \f[CR]Intl.DateTimeFormat()\f[R] is called without \f[CR]new\f[R]
but with \f[CR]this\f[R] set to anything else that\(cqs not an
\f[CR]instanceof Intl.DateTimeFormat\f[R].
If you call it directly as \f[CR]Intl.DateTimeFormat()\f[R], the
\f[CR]this\f[R] value is \f[CR]Intl\f[R], and a new
\f[CR]Intl.DateTimeFormat\f[R] instance is created normally.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]locales\f[R] or \f[CR]options\f[R] contain invalid
values.
.SH EXAMPLES
.SS Using DateTimeFormat
In basic use without specifying a locale, \f[CR]DateTimeFormat\f[R] uses
the default locale and default options.
.IP
.EX
\f[B]const\f[R] date = \f[B]new\f[R] Date(Date.UTC(2012, 11, 20, 3, 0, 0));

\f[I]// toLocaleString without arguments depends on the implementation,\f[R]
\f[I]// the default locale, and the default time zone\f[R]
console.log(\f[B]new\f[R] Intl.DateTimeFormat().format(date));
\f[I]// \(dq12/19/2012\(dq if run with en\-US locale (language) and time zone America/Los_Angeles (UTC\-0800)\f[R]
.EE
.SS Using timeStyle and dateStyle
\f[CR]dateStyle\f[R] and \f[CR]timeStyle\f[R] provide a shortcut for
setting multiple date\-time component options at once.
For example, for \f[CR]en\-US\f[R], \f[CR]dateStyle: \(dqshort\(dq\f[R]
is equivalent to setting
\f[CR]year: \(dq2\-digit\(dq, month: \(dqnumeric\(dq, day: \(dqnumeric\(dq\f[R],
and \f[CR]timeStyle: \(dqshort\(dq\f[R] is equivalent to setting
\f[CR]hour: \(dqnumeric\(dq, minute: \(dqnumeric\(dq\f[R].
.IP
.EX
\f[B]const\f[R] shortTime = \f[B]new\f[R] Intl.DateTimeFormat(\(dqen\-US\(dq, {
  timeStyle: \(dqshort\(dq,
});
console.log(shortTime.format(Date.now())); \f[I]// \(dq1:31 PM\(dq\f[R]

\f[B]const\f[R] shortDate = \f[B]new\f[R] Intl.DateTimeFormat(\(dqen\-US\(dq, {
  dateStyle: \(dqshort\(dq,
});
console.log(shortDate.format(Date.now())); \f[I]// \(dq7/7/20\(dq\f[R]

\f[B]const\f[R] mediumTime = \f[B]new\f[R] Intl.DateTimeFormat(\(dqen\-US\(dq, {
  timeStyle: \(dqmedium\(dq,
  dateStyle: \(dqshort\(dq,
});
console.log(mediumTime.format(Date.now())); \f[I]// \(dq7/7/20, 1:31:55 PM\(dq\f[R]
.EE
.PP
However, the exact (locale dependent) component styles they resolve to
are not included in the resolved options.
This ensures the result of \f[CR]resolvedOptions()\f[R] can be passed
directly to the \f[CR]Intl.DateTimeFormat()\f[R] constructor (because an
\f[CR]options\f[R] object with both \f[CR]dateStyle\f[R] or
\f[CR]timeStyle\f[R] and individual date or time component styles is not
valid).
.IP
.EX
console.log(shortDate.resolvedOptions().year); \f[I]// undefined\f[R]
.EE
.SS Using dayPeriod
Use the \f[CR]dayPeriod\f[R] option to output a string for the times of
day (\(lqin the morning\(rq, \(lqat night\(rq, \(lqnoon\(rq, etc.).
Note, that this only works when formatting for a 12 hour clock
(\f[CR]hourCycle: \(aqh12\(aq\f[R] or \f[CR]hourCycle: \(aqh11\(aq\f[R])
and that for many locales the strings are the same irrespective of the
value passed for the \f[CR]dayPeriod\f[R].
.IP
.EX
\f[B]const\f[R] date = Date.UTC(2012, 11, 17, 4, 0, 42);

console.log(
  \f[B]new\f[R] Intl.DateTimeFormat(\(dqen\-GB\(dq, {
    hour: \(dqnumeric\(dq,
    hourCycle: \(dqh12\(dq,
    dayPeriod: \(dqshort\(dq,
    timeZone: \(dqUTC\(dq,
  }).format(date),
);
\f[I]// 4 at night\(dq  (same formatting in en\-GB for all dayPeriod values)\f[R]

console.log(
  \f[B]new\f[R] Intl.DateTimeFormat(\(dqfr\(dq, {
    hour: \(dqnumeric\(dq,
    hourCycle: \(dqh12\(dq,
    dayPeriod: \(dqnarrow\(dq,
    timeZone: \(dqUTC\(dq,
  }).format(date),
);
\f[I]// \(dq4 mat.\(dq  (same output in French for both narrow/short dayPeriod)\f[R]

console.log(
  \f[B]new\f[R] Intl.DateTimeFormat(\(dqfr\(dq, {
    hour: \(dqnumeric\(dq,
    hourCycle: \(dqh12\(dq,
    dayPeriod: \(dqlong\(dq,
    timeZone: \(dqUTC\(dq,
  }).format(date),
);
\f[I]// \(dq4 du matin\(dq\f[R]
.EE
.SS Using timeZoneName
Use the \f[CR]timeZoneName\f[R] option to output a string for the
timezone (\(lqGMT\(rq, \(lqPacific Time\(rq, etc.).
.IP
.EX
\f[B]const\f[R] date = Date.UTC(2021, 11, 17, 3, 0, 42);
\f[B]const\f[R] timezoneNames = [
  \(dqshort\(dq,
  \(dqlong\(dq,
  \(dqshortOffset\(dq,
  \(dqlongOffset\(dq,
  \(dqshortGeneric\(dq,
  \(dqlongGeneric\(dq,
];

\f[B]for\f[R] (\f[B]const\f[R] zoneName \f[B]of\f[R] timezoneNames) {
  \f[I]// Do something with currentValue\f[R]
  \f[B]const\f[R] formatter = \f[B]new\f[R] Intl.DateTimeFormat(\(dqen\-US\(dq, {
    timeZone: \(dqAmerica/Los_Angeles\(dq,
    timeZoneName: zoneName,
  });
  console.log(\(ga${zoneName}: ${formatter.format(date)}\(ga);
}

\f[I]// Logs:\f[R]
\f[I]// short: 12/16/2021, PST\f[R]
\f[I]// long: 12/16/2021, Pacific Standard Time\f[R]
\f[I]// shortOffset: 12/16/2021, GMT\-8\f[R]
\f[I]// longOffset: 12/16/2021, GMT\-08:00\f[R]
\f[I]// shortGeneric: 12/16/2021, PT\f[R]
\f[I]// longGeneric: 12/16/2021, Pacific Time\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Intl.DateTimeFormat\f[R]
.IP \(bu 2
\f[CR]Intl.supportedValuesOf()\f[R]
.IP \(bu 2
\f[CR]Intl\f[R]
