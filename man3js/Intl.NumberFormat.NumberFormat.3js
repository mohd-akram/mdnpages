'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "INTL.NUMBERFORMAT.NUMBERFORMAT" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.NumberFormat.NumberFormat \- Intl.NumberFormat() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Intl.NumberFormat()\f[B]\f[R] constructor creates
\f[CR]Intl.NumberFormat\f[R] objects.
.IP
.EX
\f[B]const\f[R] number = 123456.789;

console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqde\-DE\(dq, { style: \(dqcurrency\(dq, currency: \(dqEUR\(dq }).format(
    number,
  ),
);
\f[I]// Expected output: \(dq123.456,79 €\(dq\f[R]

\f[I]// The Japanese yen doesn\(aqt use a minor unit\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqja\-JP\(dq, { style: \(dqcurrency\(dq, currency: \(dqJPY\(dq }).format(
    number,
  ),
);
\f[I]// Expected output: \(dq￥123,457\(dq\f[R]

\f[I]// Limit to three significant digits\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\-IN\(dq, { maximumSignificantDigits: 3 }).format(
    number,
  ),
);
\f[I]// Expected output: \(dq1,23,000\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
new Intl.NumberFormat()
new Intl.NumberFormat(locales)
new Intl.NumberFormat(locales, options)

Intl.NumberFormat()
Intl.NumberFormat(locales)
Intl.NumberFormat(locales, options)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Intl.NumberFormat()\f[R] can be called with or
without \f[CR]new\f[R].
Both create a new \f[CR]Intl.NumberFormat\f[R] instance.
However, there\(cqs a special behavior when it\(cqs called without
\f[CR]new\f[R] and the \f[CR]this\f[R] value is another
\f[CR]Intl.NumberFormat\f[R] instance; see Return value.
.RE
.SS Parameters
.TP
\f[B]locales\f[R] \f[I](optional)\f[R]
A string with a BCP 47 language tag or an \f[CR]Intl.Locale\f[R]
instance, or an array of such locale identifiers.
The runtime\(cqs default locale is used when \f[CR]undefined\f[R] is
passed or when none of the specified locale identifiers is supported.
For the general form and interpretation of the \f[CR]locales\f[R]
argument, see the parameter description on the \f[CR]Intl\f[R] main
page.
.RS
.PP
The following Unicode extension key is allowed:
.TP
\f[B]nu\f[R]
See \f[CR]numberingSystem\f[R].
.PP
This key can also be set with \f[CR]options\f[R] (as listed below).
When both are set, the \f[CR]options\f[R] property takes precedence.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object.
For ease of reading, the property list is broken into sections based on
their purposes, including locale options, style options, digit options,
and other options.
.SS Locale options
.TP
\f[B]localeMatcher\f[R]
The locale matching algorithm to use.
Possible values are \f[CR]\(dqlookup\(dq\f[R] and
\f[CR]\(dqbest fit\(dq\f[R]; the default is \f[CR]\(dqbest fit\(dq\f[R].
For information about this option, see Locale identification and
negotiation.
.TP
\f[B]numberingSystem\f[R]
The numbering system to use for number formatting, such as
\f[CR]\(dqarab\(dq\f[R], \f[CR]\(dqhans\(dq\f[R],
\f[CR]\(dqmathsans\(dq\f[R], and so on.
For a list of supported numbering system types, see
\f[CR]Intl.supportedValuesOf()\f[R].
This option can also be set through the \f[CR]nu\f[R] Unicode extension
key; if both are provided, this \f[CR]options\f[R] property takes
precedence.
.SS Style options
Depending on the \f[CR]style\f[R] used, some of them may be ignored, and
others may be required:
.TP
\f[B]style\f[R]
The formatting style to use.
.RS
.TP
\f[B]\(dqdecimal\(dq\f[R] (default)
For plain number formatting.
.TP
\f[B]\(dqcurrency\(dq\f[R]
For currency formatting.
.TP
\f[B]\(dqpercent\(dq\f[R]
For percent formatting.
.TP
\f[B]\(dqunit\(dq\f[R]
For unit formatting.
.RE
.TP
\f[B]currency\f[R]
The currency to use in currency formatting.
Possible values are the ISO 4217 currency codes, such as
\f[CR]\(dqUSD\(dq\f[R] for the US dollar, \f[CR]\(dqEUR\(dq\f[R] for the
euro, or \f[CR]\(dqCNY\(dq\f[R] for the Chinese RMB \(em see
\f[CR]Intl.supportedValuesOf()\f[R].
There is no default value; if the \f[CR]style\f[R] is
\f[CR]\(dqcurrency\(dq\f[R], the \f[CR]currency\f[R] property must be
provided.
It is normalized to uppercase.
.TP
\f[B]currencyDisplay\f[R]
How to display the currency in currency formatting.
.RS
.TP
\f[B]\(dqcode\(dq\f[R]
Use the ISO currency code.
.TP
\f[B]\(dqsymbol\(dq\f[R] (default)
Use a localized currency symbol such as €.
.TP
\f[B]\(dqnarrowSymbol\(dq\f[R]
Use a narrow format symbol (\(lq$100\(rq rather than \(lqUS$100\(rq).
.TP
\f[B]\(dqname\(dq\f[R]
Use a localized currency name such as \f[CR]\(dqdollar\(dq\f[R].
.RE
.TP
\f[B]currencySign\f[R]
In many locales, accounting format means to wrap the number with
parentheses instead of appending a minus sign.
Possible values are \f[CR]\(dqstandard\(dq\f[R] and
\f[CR]\(dqaccounting\(dq\f[R]; the default is
\f[CR]\(dqstandard\(dq\f[R].
.TP
\f[B]unit\f[R]
The unit to use in \f[CR]unit\f[R] formatting, Possible values are
listed in \f[CR]Intl.supportedValuesOf()\f[R].
Pairs of simple units can be concatenated with \(lq\-per\-\(rq to make a
compound unit.
There is no default value; if the \f[CR]style\f[R] is
\f[CR]\(dqunit\(dq\f[R], the \f[CR]unit\f[R] property must be provided.
.TP
\f[B]unitDisplay\f[R]
The unit formatting style to use in \f[CR]unit\f[R] formatting.
Possible values are:
.RS
.TP
\f[B]\(dqshort\(dq\f[R] (default)
E.g., \f[CR]16 l\f[R].
.TP
\f[B]\(dqnarrow\(dq\f[R]
E.g., \f[CR]16l\f[R].
.TP
\f[B]\(dqlong\(dq\f[R]
E.g., \f[CR]16 litres\f[R].
.RE
.SS Digit options
The following properties are also supported by
\f[CR]Intl.PluralRules\f[R].
.TP
\f[B]minimumIntegerDigits\f[R]
The minimum number of integer digits to use.
A value with a smaller number of integer digits than this number will be
left\-padded with zeros (to the specified length) when formatted.
Possible values are from \f[CR]1\f[R] to \f[CR]21\f[R]; the default is
\f[CR]1\f[R].
.TP
\f[B]minimumFractionDigits\f[R]
The minimum number of fraction digits to use.
Possible values are from \f[CR]0\f[R] to \f[CR]100\f[R]; the default for
plain number and percent formatting is \f[CR]0\f[R]; the default for
currency formatting is the number of minor unit digits provided by the
\c
.UR https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml
ISO 4217 currency code list
.UE \c
\ (2 if the list doesn\(cqt provide that information).
See SignificantDigits/FractionDigits default values for when this
default gets applied.
.TP
\f[B]maximumFractionDigits\f[R]
The maximum number of fraction digits to use.
Possible values are from \f[CR]0\f[R] to \f[CR]100\f[R]; the default for
plain number formatting is the larger of
\f[CR]minimumFractionDigits\f[R] and \f[CR]3\f[R]; the default for
currency formatting is the larger of \f[CR]minimumFractionDigits\f[R]
and the number of minor unit digits provided by the \c
.UR https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml
ISO 4217 currency code list
.UE \c
\ (2 if the list doesn\(cqt provide that information); the default for
percent formatting is the larger of \f[CR]minimumFractionDigits\f[R] and
0.
See SignificantDigits/FractionDigits default values for when this
default gets applied.
.TP
\f[B]minimumSignificantDigits\f[R]
The minimum number of significant digits to use.
Possible values are from \f[CR]1\f[R] to \f[CR]21\f[R]; the default is
\f[CR]1\f[R].
See SignificantDigits/FractionDigits default values for when this
default gets applied.
.TP
\f[B]maximumSignificantDigits\f[R]
The maximum number of significant digits to use.
Possible values are from \f[CR]1\f[R] to \f[CR]21\f[R]; the default is
\f[CR]21\f[R].
See SignificantDigits/FractionDigits default values for when this
default gets applied.
.TP
\f[B]roundingPriority\f[R]
Specify how rounding conflicts will be resolved if both
\(lqFractionDigits\(rq
(\f[CR]minimumFractionDigits\f[R]/\f[CR]maximumFractionDigits\f[R]) and
\(lqSignificantDigits\(rq
(\f[CR]minimumSignificantDigits\f[R]/\f[CR]maximumSignificantDigits\f[R])
are specified.
Possible values are:
.RS
.TP
\f[B]\(dqauto\(dq\f[R] (default)
The result from the significant digits property is used.
.TP
\f[B]\(dqmorePrecision\(dq\f[R]
The result from the property that results in more precision is used.
.TP
\f[B]\(dqlessPrecision\(dq\f[R]
The result from the property that results in less precision is used.
.PP
The value \f[CR]\(dqauto\(dq\f[R] is normalized to
\f[CR]\(dqmorePrecision\(dq\f[R] if \f[CR]notation\f[R] is
\f[CR]\(dqcompact\(dq\f[R] and none of the four
\(lqFractionDigits\(rq/\(lqSignificantDigits\(rq options are set.
.PP
Note that for values other than \f[CR]auto\f[R] the result with more
precision is calculated from the \f[CR]maximumSignificantDigits\f[R] and
\f[CR]maximumFractionDigits\f[R] (minimum fractional and significant
digit settings are ignored).
.RE
.TP
\f[B]roundingIncrement\f[R]
Indicates the increment at which rounding should take place relative to
the calculated rounding magnitude.
Possible values are \f[CR]1\f[R], \f[CR]2\f[R], \f[CR]5\f[R],
\f[CR]10\f[R], \f[CR]20\f[R], \f[CR]25\f[R], \f[CR]50\f[R],
\f[CR]100\f[R], \f[CR]200\f[R], \f[CR]250\f[R], \f[CR]500\f[R],
\f[CR]1000\f[R], \f[CR]2000\f[R], \f[CR]2500\f[R], and \f[CR]5000\f[R];
the default is \f[CR]1\f[R].
It cannot be mixed with significant\-digits rounding or any setting of
\f[CR]roundingPriority\f[R] other than \f[CR]auto\f[R].
.TP
\f[B]roundingMode\f[R]
How decimals should be rounded.
Possible values are:
.RS
.TP
\f[B]\(dqceil\(dq\f[R]
Round toward +∞.
Positive values round up.
Negative values round \(lqmore positive\(rq.
.TP
\f[B]\(dqfloor\(dq\f[R]
Round toward \-∞.
Positive values round down.
Negative values round \(lqmore negative\(rq.
.TP
\f[B]\(dqexpand\(dq\f[R]
Round away from 0.
The \f[I]magnitude\f[R] of the value is always increased by rounding.
Positive values round up.
Negative values round \(lqmore negative\(rq.
.TP
\f[B]\(dqtrunc\(dq\f[R]
Round toward 0.
This \f[I]magnitude\f[R] of the value is always reduced by rounding.
Positive values round down.
Negative values round \(lqless negative\(rq.
.TP
\f[B]\(dqhalfCeil\(dq\f[R]
Ties toward +∞.
Values above the half\-increment round like \f[CR]\(dqceil\(dq\f[R]
(towards +∞), and below like \f[CR]\(dqfloor\(dq\f[R] (towards \-∞).
On the half\-increment, values round like \f[CR]\(dqceil\(dq\f[R].
.TP
\f[B]\(dqhalfFloor\(dq\f[R]
Ties toward \-∞.
Values above the half\-increment round like \f[CR]\(dqceil\(dq\f[R]
(towards +∞), and below like \f[CR]\(dqfloor\(dq\f[R] (towards \-∞).
On the half\-increment, values round like \f[CR]\(dqfloor\(dq\f[R].
.TP
\f[B]\(dqhalfExpand\(dq\f[R] (default)
Ties away from 0.
Values above the half\-increment round like \f[CR]\(dqexpand\(dq\f[R]
(away from zero), and below like \f[CR]\(dqtrunc\(dq\f[R] (towards 0).
On the half\-increment, values round like \f[CR]\(dqexpand\(dq\f[R].
.TP
\f[B]\(dqhalfTrunc\(dq\f[R]
Ties toward 0.
Values above the half\-increment round like \f[CR]\(dqexpand\(dq\f[R]
(away from zero), and below like \f[CR]\(dqtrunc\(dq\f[R] (towards 0).
On the half\-increment, values round like \f[CR]\(dqtrunc\(dq\f[R].
.TP
\f[B]\(dqhalfEven\(dq\f[R]
Ties towards the nearest even integer.
Values above the half\-increment round like \f[CR]\(dqexpand\(dq\f[R]
(away from zero), and below like \f[CR]\(dqtrunc\(dq\f[R] (towards 0).
On the half\-increment values round towards the nearest even digit.
.PP
These options reflect the \c
.UR https://unicode-org.github.io/icu/userguide/format_parse/numbers/rounding-modes.html
ICU user guide
.UE \c
, where \(lqexpand\(rq and \(lqtrunc\(rq map to ICU \(lqUP\(rq and
\(lqDOWN\(rq, respectively.
The rounding modes example below demonstrates how each mode works.
.RE
.TP
\f[B]trailingZeroDisplay\f[R]
The strategy for displaying trailing zeros on whole numbers.
Possible values are:
.RS
.TP
\f[B]\(dqauto\(dq\f[R] (default)
Keep trailing zeros according to \f[CR]minimumFractionDigits\f[R] and
\f[CR]minimumSignificantDigits\f[R].
.TP
\f[B]\(dqstripIfInteger\(dq\f[R]
Remove the fraction digits \f[I]if\f[R] they are all zero.
This is the same as \f[CR]\(dqauto\(dq\f[R] if any of the fraction
digits is non\-zero.
.RE
.SS SignificantDigits/FractionDigits default values
For the four options above (the \f[CR]FractionDigits\f[R] and
\f[CR]SignificantDigits\f[R] options), we mentioned their defaults;
however, these defaults are \f[I]not unconditionally applied\f[R].
They are only applied when the property is actually going to be used,
which depends on the \f[CR]roundingPriority\f[R] and \f[CR]notation\f[R]
settings.
Specifically:
.IP \(bu 2
If \f[CR]roundingPriority\f[R] is not \f[CR]\(dqauto\(dq\f[R], then all
four options apply.
.IP \(bu 2
If \f[CR]roundingPriority\f[R] is \f[CR]\(dqauto\(dq\f[R] and at least
one \f[CR]SignificantDigits\f[R] option is set, then the
\f[CR]SignificantDigits\f[R] options apply and the
\f[CR]FractionDigits\f[R] options are ignored.
.IP \(bu 2
If \f[CR]roundingPriority\f[R] is \f[CR]\(dqauto\(dq\f[R], and either at
least one \f[CR]FractionDigits\f[R] option is set or \f[CR]notation\f[R]
is not \f[CR]\(dqcompact\(dq\f[R], then the \f[CR]FractionDigits\f[R]
options apply and the \f[CR]SignificantDigits\f[R] options are ignored.
.IP \(bu 2
If \f[CR]roundingPriority\f[R] is \f[CR]\(dqauto\(dq\f[R],
\f[CR]notation\f[R] is \f[CR]\(dqcompact\(dq\f[R], and none of the four
options are set, then they are set to
\f[CR]{ minimumFractionDigits: 0, maximumFractionDigits: 0, minimumSignificantDigits: 1, maximumSignificantDigits: 2 }\f[R],
regardless of the defaults mentioned above, and
\f[CR]roundingPriority\f[R] is set to \f[CR]\(dqmorePrecision\(dq\f[R].
.SS Other options
.TP
\f[B]notation\f[R]
The formatting that should be displayed for the number.
Possible values are:
.RS
.TP
\f[B]\(dqstandard\(dq\f[R] (default)
Plain number formatting.
.TP
\f[B]\(dqscientific\(dq\f[R]
Return the order\-of\-magnitude for formatted number.
.TP
\f[B]\(dqengineering\(dq\f[R]
Return the exponent of ten when divisible by three.
.TP
\f[B]\(dqcompact\(dq\f[R]
String representing exponent; defaults to using the \(lqshort\(rq form.
.RE
.TP
\f[B]compactDisplay\f[R]
Only used when \f[CR]notation\f[R] is \f[CR]\(dqcompact\(dq\f[R].
Possible values are \f[CR]\(dqshort\(dq\f[R] and
\f[CR]\(dqlong\(dq\f[R]; the default is \f[CR]\(dqshort\(dq\f[R].
.TP
\f[B]useGrouping\f[R]
Whether to use grouping separators, such as thousands separators or
thousand/lakh/crore separators.
.RS
.TP
\f[B]\(dqalways\(dq\f[R]
Display grouping separators even if the locale prefers otherwise.
.TP
\f[B]\(dqauto\(dq\f[R]
Display grouping separators based on the locale preference, which may
also be dependent on the currency.
.TP
\f[B]\(dqmin2\(dq\f[R]
Display grouping separators when there are at least 2 digits in a group.
.TP
\f[B]true\f[R]
Same as \f[CR]\(dqalways\(dq\f[R].
.TP
\f[B]false\f[R]
Display no grouping separators.
.PP
The default is \f[CR]\(dqmin2\(dq\f[R] if \f[CR]notation\f[R] is
\f[CR]\(dqcompact\(dq\f[R], and \f[CR]\(dqauto\(dq\f[R] otherwise.
The string values \f[CR]\(dqtrue\(dq\f[R] and \f[CR]\(dqfalse\(dq\f[R]
are accepted, but are always converted to the default value.
.RE
.TP
\f[B]signDisplay\f[R]
When to display the sign for the number.
Possible values are:
.RS
.TP
\f[B]\(dqauto\(dq\f[R] (default)
Sign display for negative numbers only, including negative zero.
.TP
\f[B]\(dqalways\(dq\f[R]
Always display sign.
.TP
\f[B]\(dqexceptZero\(dq\f[R]
Sign display for positive and negative numbers, but not zero.
.TP
\f[B]\(dqnegative\(dq\f[R]
Sign display for negative numbers only, excluding negative zero.
.TP
\f[B]\(dqnever\(dq\f[R]
Never display sign.
.RE
.SS Return value
A new \f[CR]Intl.NumberFormat\f[R] object.
.RS
.PP
\f[B]Note:\f[R] The text below describes behavior that is marked by the
specification as \(lqoptional\(rq.
It may not work in all environments.
Check the browser compatibility table.
.RE
.PP
Normally, \f[CR]Intl.NumberFormat()\f[R] can be called with or without
\f[CR]new\f[R], and a new \f[CR]Intl.NumberFormat\f[R] instance is
returned in both cases.
However, if the \f[CR]this\f[R] value is an object that is
\f[CR]instanceof\f[R] \f[CR]Intl.NumberFormat\f[R] (doesn\(cqt
necessarily mean it\(cqs created via \f[CR]new Intl.NumberFormat\f[R];
just that it has \f[CR]Intl.NumberFormat.prototype\f[R] in its prototype
chain), then the value of \f[CR]this\f[R] is returned instead, with the
newly created \f[CR]Intl.NumberFormat\f[R] object hidden in a
\f[CR][Symbol(IntlLegacyConstructedSymbol)]\f[R] property (a unique
symbol that\(cqs reused between instances).
.IP
.EX
\f[B]const\f[R] formatter = Intl.NumberFormat.call(
  { __proto__: Intl.NumberFormat.prototype },
  \(dqen\-US\(dq,
  { notation: \(dqscientific\(dq },
);
console.log(Object.getOwnPropertyDescriptors(formatter));
\f[I]// {\f[R]
\f[I]//   [Symbol(IntlLegacyConstructedSymbol)]: {\f[R]
\f[I]//     value: NumberFormat [Intl.NumberFormat] {},\f[R]
\f[I]//     writable: false,\f[R]
\f[I]//     enumerable: false,\f[R]
\f[I]//     configurable: false\f[R]
\f[I]//   }\f[R]
\f[I]// }\f[R]
.EE
.PP
Note that there\(cqs only one actual \f[CR]Intl.NumberFormat\f[R]
instance here: the one hidden in
\f[CR][Symbol(IntlLegacyConstructedSymbol)]\f[R].
Calling the \f[CR]format()\f[R] and \f[CR]resolvedOptions()\f[R] methods
on \f[CR]formatter\f[R] would correctly use the options stored in that
instance, but calling all other methods (e.g., \f[CR]formatRange()\f[R])
would fail with \(lqTypeError: formatRange method called on incompatible
Object\(rq, because those methods don\(cqt consult the hidden
instance\(cqs options.
.PP
This behavior, called \f[CR]ChainNumberFormat\f[R], does not happen when
\f[CR]Intl.NumberFormat()\f[R] is called without \f[CR]new\f[R] but with
\f[CR]this\f[R] set to anything else that\(cqs not an
\f[CR]instanceof Intl.NumberFormat\f[R].
If you call it directly as \f[CR]Intl.NumberFormat()\f[R], the
\f[CR]this\f[R] value is \f[CR]Intl\f[R], and a new
\f[CR]Intl.NumberFormat\f[R] instance is created normally.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown in one of the following cases:
.RS
.IP \(bu 2
A property that takes enumerated values (such as \f[CR]style\f[R],
\f[CR]units\f[R], \f[CR]currency\f[R], and so on) is set to an invalid
value.
.IP \(bu 2
Both \f[CR]maximumFractionDigits\f[R] and
\f[CR]minimumFractionDigits\f[R] are set, and they are set to different
values.
Note that depending on various formatting options, these properties can
have default values.
It is therefore possible to get this error even if you only set one of
the properties.
.RE
.TP
\f[B]TypeError\f[R]
Thrown if the \f[CR]options.style\f[R] property is set to \(lqunit\(rq
or \(lqcurrency\(rq, and no value has been set for the corresponding
property \f[CR]options.unit\f[R] or \f[CR]options.currency\f[R].
.SH EXAMPLES
.SS Basic usage
In basic use without specifying a locale, a formatted string in the
default locale and with default options is returned.
.IP
.EX
\f[B]const\f[R] amount = 3500;

console.log(\f[B]new\f[R] Intl.NumberFormat().format(amount));
\f[I]// \(aq3,500\(aq if in US English locale\f[R]
.EE
.SS Decimal and percent formatting
.IP
.EX
\f[B]const\f[R] amount = 3500;

\f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqdecimal\(dq,
}).format(amount); \f[I]// \(aq3,500\(aq\f[R]
\f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqpercent\(dq,
}).format(amount); \f[I]// \(aq350,000%\(aq\f[R]
.EE
.SS Unit formatting
If the \f[CR]style\f[R] is \f[CR]\(aqunit\(aq\f[R], a \f[CR]unit\f[R]
property must be provided.
Optionally, \f[CR]unitDisplay\f[R] controls the unit formatting.
.IP
.EX
\f[B]const\f[R] amount = 3500;

\f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqunit\(dq,
  unit: \(dqliter\(dq,
}).format(amount); \f[I]// \(aq3,500 L\(aq\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqunit\(dq,
  unit: \(dqliter\(dq,
  unitDisplay: \(dqlong\(dq,
}).format(amount); \f[I]// \(aq3,500 liters\(aq\f[R]
.EE
.SS Currency formatting
If the \f[CR]style\f[R] is \f[CR]\(aqcurrency\(aq\f[R], a
\f[CR]currency\f[R] property must be provided.
Optionally, \f[CR]currencyDisplay\f[R] and \f[CR]currencySign\f[R]
control the unit formatting.
.IP
.EX
\f[B]const\f[R] amount = \-3500;
\f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqcurrency\(dq,
  currency: \(dqUSD\(dq,
}).format(amount); \f[I]// \(aq\-$3,500.00\(aq\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqbn\(dq, {
  style: \(dqcurrency\(dq,
  currency: \(dqUSD\(dq,
  currencyDisplay: \(dqname\(dq,
}).format(amount); \f[I]// \(aq\-3,500.00 US dollars\(aq\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqbn\(dq, {
  style: \(dqcurrency\(dq,
  currency: \(dqUSD\(dq,
  currencySign: \(dqaccounting\(dq,
}).format(amount); \f[I]// \(aq($3,500.00)\(aq\f[R]
.EE
.SS Scientific, engineering or compact notations
Scientific and compact notation are represented by the
\f[CR]notation\f[R] option and can be formatted like this:
.IP
.EX
\f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  notation: \(dqscientific\(dq,
}).format(987654321);
\f[I]// 9.877E8\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqpt\-PT\(dq, {
  notation: \(dqscientific\(dq,
}).format(987654321);
\f[I]// 9,877E8\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqen\-GB\(dq, {
  notation: \(dqengineering\(dq,
}).format(987654321);
\f[I]// 987.654E6\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqde\(dq, {
  notation: \(dqengineering\(dq,
}).format(987654321);
\f[I]// 987,654E6\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqzh\-CN\(dq, {
  notation: \(dqcompact\(dq,
}).format(987654321);
\f[I]// 9.9亿\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqfr\(dq, {
  notation: \(dqcompact\(dq,
  compactDisplay: \(dqlong\(dq,
}).format(987654321);
\f[I]// 988 millions\f[R]

\f[B]new\f[R] Intl.NumberFormat(\(dqen\-GB\(dq, {
  notation: \(dqcompact\(dq,
  compactDisplay: \(dqshort\(dq,
}).format(987654321);
\f[I]// 988M\f[R]
.EE
.SS Displaying signs
Display a sign for positive and negative numbers, but not zero:
.IP
.EX
\f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqpercent\(dq,
  signDisplay: \(dqexceptZero\(dq,
}).format(0.55);
\f[I]// \(aq+55%\(aq\f[R]
.EE
.PP
Note that when the currency sign is \(lqaccounting\(rq, parentheses
might be used instead of a minus sign:
.IP
.EX
\f[B]new\f[R] Intl.NumberFormat(\(dqbn\(dq, {
  style: \(dqcurrency\(dq,
  currency: \(dqUSD\(dq,
  currencySign: \(dqaccounting\(dq,
  signDisplay: \(dqalways\(dq,
}).format(\-3500);
\f[I]// \(aq($3,500.00)\(aq\f[R]
.EE
.SS FractionDigits, SignificantDigits and IntegerDigits
You can specify the minimum or maximum number of fractional, integer or
significant digits to display when formatting a number.
.RS
.PP
\f[B]Note:\f[R] If both significant and fractional digit limits are
specified, then the actual formatting depends on the
\f[CR]roundingPriority\f[R].
.RE
.SS Using FractionDigits and IntegerDigits
The integer and fraction digit properties indicate the number of digits
to display before and after the decimal point, respectively.
If the value to display has fewer integer digits than specified, it will
be left\-padded with zeros to the expected number.
If it has fewer fractional digits, it will be right\-padded with zeros.
Both cases are shown below:
.IP
.EX
\f[I]// Formatting adds zeros to display minimum integers and fractions\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    minimumIntegerDigits: 3,
    minimumFractionDigits: 4,
  }).format(4.33),
);
\f[I]// \(dq004.3300\(dq\f[R]
.EE
.PP
If a value has more fractional digits than the specified maximum number,
it will be rounded.
The \f[I]way\f[R] that it is rounded depends on the
\f[CR]roundingMode\f[R] property (more details are provided in the
rounding modes section).
Below the value is rounded from five fractional digits
(\f[CR]4.33145\f[R]) to two (\f[CR]4.33\f[R]):
.IP
.EX
\f[I]// Display value shortened to maximum number of digits\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumFractionDigits: 2,
  }).format(4.33145),
);
\f[I]// \(dq4.33\(dq\f[R]
.EE
.PP
The minimum fractional digits have no effect if the value already has
more than 2 fractional digits:
.IP
.EX
\f[I]// Minimum fractions have no effect if value is higher precision.\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    minimumFractionDigits: 2,
  }).format(4.33145),
);
\f[I]// \(dq4.331\(dq\f[R]
.EE
.RS
.PP
\f[B]Warning:\f[R] Watch out for default values as they may affect
formatting even if not specified in your code.
The default maximum digit value is \f[CR]3\f[R] for plain values,
\f[CR]2\f[R] for currency, and may have different values for other
predefined types.
.RE
.PP
The formatted value above is rounded to 3 digits, even though we
didn\(cqt specify the maximum digits!
This is because a default value of \f[CR]maximumFractionDigits\f[R] is
set when we specify \f[CR]minimumFractionDigits\f[R], and visa versa.
The default values of \f[CR]maximumFractionDigits\f[R] and
\f[CR]minimumFractionDigits\f[R] are \f[CR]3\f[R] and \f[CR]0\f[R],
respectively.
.PP
You can use \f[CR]resolvedOptions()\f[R] to inspect the formatter.
.IP
.EX
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumFractionDigits: 2,
  }).resolvedOptions(),
);
\f[I]// {\f[R]
\f[I]//   \&...\f[R]
\f[I]//   minimumIntegerDigits: 1,\f[R]
\f[I]//   minimumFractionDigits: 0,\f[R]
\f[I]//   maximumFractionDigits: 2,\f[R]
\f[I]//   \&...\f[R]
\f[I]// }\f[R]

console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    minimumFractionDigits: 2,
  }).resolvedOptions(),
);
\f[I]// {\f[R]
\f[I]//   \&...\f[R]
\f[I]//   minimumIntegerDigits: 1,\f[R]
\f[I]//   minimumFractionDigits: 2,\f[R]
\f[I]//   maximumFractionDigits: 3,\f[R]
\f[I]//   \&...\f[R]
\f[I]// }\f[R]
.EE
.SS Using SignificantDigits
The number of \f[I]significant digits\f[R] is the total number of digits
including both integer and fractional parts.
The \f[CR]maximumSignificantDigits\f[R] is used to indicate the total
number of digits from the original value to display.
.PP
The examples below show how this works.
Note in particular the last case: only the first digit is retained and
the others are discarded/set to zero.
.IP
.EX
\f[I]// Display 5 significant digits\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 5,
  }).format(54.33145),
);
\f[I]// \(dq54.331\(dq\f[R]

\f[I]// Max 2 significant digits\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 2,
  }).format(54.33145),
);
\f[I]// \(dq54\(dq\f[R]

\f[I]// Max 1 significant digits\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 1,
  }).format(54.33145),
);
\f[I]// \(dq50\(dq\f[R]
.EE
.PP
The \f[CR]minimumSignificantDigits\f[R] ensures that at least the
specified number of digits are displayed, adding zeros to the end of the
value if needed.
.IP
.EX
\f[I]// Minimum 10 significant digits\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    minimumSignificantDigits: 10,
  }).format(54.33145),
);
\f[I]// \(dq54.33145000\(dq\f[R]
.EE
.RS
.PP
\f[B]Warning:\f[R] Watch out for default values as they may affect
formatting.
If only one \f[CR]SignificantDigits\f[R] property is used, then its
counterpart will automatically be applied with the default value.
The default maximum and minimum significant digit values are 21 and 1,
respectively.
.RE
.SS Specifying significant and fractional digits at the same time
The fraction digits
(\f[CR]minimumFractionDigits\f[R]/\f[CR]maximumFractionDigits\f[R]) and
significant digits
(\f[CR]minimumSignificantDigits\f[R]/\f[CR]maximumSignificantDigits\f[R])
are both ways of controlling how many fractional and leading digits
should be formatted.
If both are used at the same time, it is possible for them to conflict.
.PP
These conflicts are resolved using the \f[CR]roundingPriority\f[R]
property.
By default, this has a value of \f[CR]\(dqauto\(dq\f[R], which means
that if either \f[CR]minimumSignificantDigits\f[R] or
\f[CR]maximumSignificantDigits\f[R] is specified, the fractional and
integer digit properties will be ignored.
.PP
For example, the code below formats the value of \f[CR]4.33145\f[R] with
\f[CR]maximumFractionDigits: 3\f[R], and then
\f[CR]maximumSignificantDigits: 2\f[R], and then both.
The value with both is the one set with
\f[CR]maximumSignificantDigits\f[R].
.IP
.EX
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumFractionDigits: 3,
  }).format(4.33145),
);
\f[I]// \(dq4.331\(dq\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 2,
  }).format(4.33145),
);
\f[I]// \(dq4.3\(dq\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumFractionDigits: 3,
    maximumSignificantDigits: 2,
  }).format(4.33145),
);
\f[I]// \(dq4.3\(dq\f[R]
.EE
.PP
Using \f[CR]resolvedOptions()\f[R] to inspect the formatter, we can see
that the returned object does not include
\f[CR]maximumFractionDigits\f[R] when
\f[CR]maximumSignificantDigits\f[R] or
\f[CR]minimumSignificantDigits\f[R] are specified.
.IP
.EX
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumFractionDigits: 3,
    maximumSignificantDigits: 2,
  }).resolvedOptions(),
);
\f[I]// {\f[R]
\f[I]//   \&...\f[R]
\f[I]//   minimumIntegerDigits: 1,\f[R]
\f[I]//   minimumSignificantDigits: 1,\f[R]
\f[I]//   maximumSignificantDigits: 2,\f[R]
\f[I]//   \&...\f[R]
\f[I]// }\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumFractionDigits: 3,
    minimumSignificantDigits: 2,
  }).resolvedOptions(),
);
\f[I]// {\f[R]
\f[I]//   \&...\f[R]
\f[I]//   minimumIntegerDigits: 1,\f[R]
\f[I]//   minimumSignificantDigits: 2,\f[R]
\f[I]//   maximumSignificantDigits: 21,\f[R]
\f[I]//   \&...\f[R]
\f[I]// }\f[R]
.EE
.PP
In addition to \f[CR]\(dqauto\(dq\f[R], you can resolve conflicts by
specifying \f[CR]roundingPriority\f[R] as
\f[CR]\(dqmorePrecision\(dq\f[R] or \f[CR]\(dqlessPrecision\(dq\f[R].
The formatter calculates the precision using the values of
\f[CR]maximumSignificantDigits\f[R] and
\f[CR]maximumFractionDigits\f[R].
.PP
The code below shows the format being selected for the three different
rounding priorities:
.IP
.EX
\f[B]const\f[R] maxFracNF = \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
  maximumFractionDigits: 3,
});
console.log(\(gamaximumFractionDigits:3 \- ${maxFracNF.format(1.23456)}\(ga);
\f[I]// \(dqmaximumFractionDigits:2 \- 1.235\(dq\f[R]

\f[B]const\f[R] maxSigNS = \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
  maximumSignificantDigits: 3,
});
console.log(\(gamaximumSignificantDigits:3 \- ${maxSigNS.format(1.23456)}\(ga);
\f[I]// \(dqmaximumSignificantDigits:3 \- 1.23\(dq\f[R]

\f[B]const\f[R] bothAuto = \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
  maximumSignificantDigits: 3,
  maximumFractionDigits: 3,
});
console.log(\(gaauto \- ${bothAuto.format(1.23456)}\(ga);
\f[I]// \(dqauto \- 1.23\(dq\f[R]

\f[B]const\f[R] bothLess = \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
  roundingPriority: \(dqlessPrecision\(dq,
  maximumSignificantDigits: 3,
  maximumFractionDigits: 3,
});
console.log(\(galessPrecision \- ${bothLess.format(1.23456)}\(ga);
\f[I]// \(dqlessPrecision \- 1.23\(dq\f[R]

\f[B]const\f[R] bothMore = \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
  roundingPriority: \(dqmorePrecision\(dq,
  maximumSignificantDigits: 3,
  maximumFractionDigits: 3,
});
console.log(\(gamorePrecision \- ${bothMore.format(1.23456)}\(ga);
\f[I]// \(dqmorePrecision \- 1.235\(dq\f[R]
.EE
.PP
Note that the algorithm can behave in an unintuitive way if a minimum
value is specified without a maximum value.
The example below formats the value \f[CR]1\f[R] specifying
\f[CR]minimumFractionDigits: 2\f[R] (formatting to \f[CR]1.00\f[R]) and
\f[CR]minimumSignificantDigits: 2\f[R] (formatting to \f[CR]1.0\f[R]).
Since \f[CR]1.00\f[R] has more digits than \f[CR]1.0\f[R], this should
be the result when prioritizing \f[CR]morePrecision\f[R], but in fact
the opposite is true:
.IP
.EX
\f[B]const\f[R] bothLess = \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
  roundingPriority: \(dqlessPrecision\(dq,
  minimumFractionDigits: 2,
  minimumSignificantDigits: 2,
});
console.log(\(galessPrecision \- ${bothLess.format(1)}\(ga);
\f[I]// \(dqlessPrecision \- 1.00\(dq\f[R]

\f[B]const\f[R] bothMore = \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
  roundingPriority: \(dqmorePrecision\(dq,
  minimumFractionDigits: 2,
  minimumSignificantDigits: 2,
});
console.log(\(gamorePrecision \- ${bothMore.format(1)}\(ga);
\f[I]// \(dqmorePrecision \- 1.0\(dq\f[R]
.EE
.PP
The reason for this is that only the \(lqmaximum precision\(rq values
are used for the calculation, and the default value of
\f[CR]maximumSignificantDigits\f[R] is much higher than
\f[CR]maximumFractionDigits\f[R].
.RS
.PP
\f[B]Note:\f[R] The working group have proposed a modification of the
algorithm where the formatter should evaluate the result of using the
specified fractional and significant digits independently (taking
account of both minimum and maximum values).
It will then select the option that displays more fractional digits if
\f[CR]morePrecision\f[R] is set, and fewer if \f[CR]lessPrecision\f[R]
is set.
This will result in more intuitive behavior for this case.
.RE
.SS Rounding modes
If a value has more fractional digits than allowed by the constructor
options, the formatted value will be \f[I]rounded\f[R] to the specified
number of fractional digits.
The \f[I]way\f[R] in which the value is rounded depends on the
\f[CR]roundingMode\f[R] property.
.PP
Number formatters use \f[CR]halfExpand\f[R] rounding by default, which
rounds values \(lqaway from zero\(rq at the half\-increment (in other
words, the \f[I]magnitude\f[R] of the value is rounded up).
.PP
For a positive number, if the fractional digits to be removed are closer
to the next increment (or on the half way point) then the remaining
fractional digits will be rounded up, otherwise they are rounded down.
This is shown below: 2.23 rounded to two significant digits is truncated
to 2.2 because 2.23 is less than the half increment 2.25, while values
of 2.25 and greater are rounded up to 2.3:
.IP
.EX
\f[I]// Value below half\-increment: round down.\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 2,
  }).format(2.23),
);
\f[I]// \(dq2.2\(dq\f[R]

\f[I]// Value on or above half\-increment: round up.\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 2,
  }).format(2.25),
);
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 2,
  }).format(2.28),
);
\f[I]// \(dq2.3\(dq\f[R]
\f[I]// \(dq2.3\(dq\f[R]
.EE
.PP
A negative number on or below the half\-increment point is also rounded
away from zero (becomes more negative):
.IP
.EX
\f[I]// Value below half\-increment: round down.\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 2,
  }).format(\-2.23),
);
\f[I]// \(dq\-2.2\(dq\f[R]

\f[I]// Value on or above half\-increment: round up.\f[R]
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 2,
  }).format(\-2.25),
);
console.log(
  \f[B]new\f[R] Intl.NumberFormat(\(dqen\(dq, {
    maximumSignificantDigits: 2,
  }).format(\-2.28),
);
\f[I]// \(dq\-2.3\(dq\f[R]
\f[I]// \(dq\-2.3\(dq\f[R]
.EE
.PP
The table below show the effect of different rounding modes for positive
and negative values that are on and around the half\-increment.
.PP
.TS
tab(@);
l l l l l l l.
T{
rounding mode
T}@T{
2.23
T}@T{
2.25
T}@T{
2.28
T}@T{
\-2.23
T}@T{
\-2.25
T}@T{
\-2.28
T}
_
T{
\f[CR]ceil\f[R]
T}@T{
2.3
T}@T{
2.3
T}@T{
2.3
T}@T{
\-2.2
T}@T{
\-2.2
T}@T{
\-2.2
T}
T{
\f[CR]floor\f[R]
T}@T{
2.2
T}@T{
2.2
T}@T{
2.2
T}@T{
\-2.3
T}@T{
\-2.3
T}@T{
\-2.3
T}
T{
\f[CR]expand\f[R]
T}@T{
2.3
T}@T{
2.3
T}@T{
2.3
T}@T{
\-2.3
T}@T{
\-2.3
T}@T{
\-2.3
T}
T{
\f[CR]trunc\f[R]
T}@T{
2.2
T}@T{
2.2
T}@T{
2.2
T}@T{
\-2.2
T}@T{
\-2.2
T}@T{
\-2.2
T}
T{
\f[CR]halfCeil\f[R]
T}@T{
2.2
T}@T{
2.3
T}@T{
2.3
T}@T{
\-2.2
T}@T{
\-2.2
T}@T{
\-2.3
T}
T{
\f[CR]halfFloor\f[R]
T}@T{
2.2
T}@T{
2.2
T}@T{
2.3
T}@T{
\-2.2
T}@T{
\-2.3
T}@T{
\-2.3
T}
T{
\f[CR]halfExpand\f[R]
T}@T{
2.2
T}@T{
2.3
T}@T{
2.3
T}@T{
\-2.2
T}@T{
\-2.3
T}@T{
\-2.3
T}
T{
\f[CR]halfTrunc\f[R]
T}@T{
2.2
T}@T{
2.2
T}@T{
2.3
T}@T{
\-2.2
T}@T{
\-2.2
T}@T{
\-2.3
T}
T{
\f[CR]halfEven\f[R]
T}@T{
2.2
T}@T{
2.2
T}@T{
2.3
T}@T{
\-2.2
T}@T{
\-2.2
T}@T{
\-2.3
T}
.TE
.PP
When using \f[CR]halfEven\f[R], its behavior also depends on the parity
(odd or even) of the last digit of the rounded number.
For example, the behavior of \f[CR]halfEven\f[R] in the table above is
the same as \f[CR]halfTrunc\f[R], because the magnitudes of all numbers
are between a smaller \(lqeven\(rq number (2.2) and a larger \(lqodd\(rq
number (2.3).
If the numbers are between ±2.3 and ±2.4, \f[CR]halfEven\f[R] will
behave like \f[CR]halfExpand\f[R] instead.
This behavior avoids consistently under\- or over\-estimating
half\-increments in a large data sample.
.SS Using roundingIncrement
Sometimes we want to round the remaining fractional digits to some other
increment than the next integer.
For example, currencies for which the smallest coin is 5 cents might
want to round the value to increments of 5, reflecting amounts that can
actually be paid in cash.
.PP
This kind of rounding can be achieved with the
\f[CR]roundingIncrement\f[R] property.
.PP
For example, if \f[CR]maximumFractionDigits\f[R] is 2 and
\f[CR]roundingIncrement\f[R] is 5, then the number is rounded to the
nearest 0.05:
.IP
.EX
\f[B]const\f[R] nf = \f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqcurrency\(dq,
  currency: \(dqUSD\(dq,
  maximumFractionDigits: 2,
  roundingIncrement: 5,
});

console.log(nf.format(11.29)); \f[I]// \(dq$11.30\(dq\f[R]
console.log(nf.format(11.25)); \f[I]// \(dq$11.25\(dq\f[R]
console.log(nf.format(11.22)); \f[I]// \(dq$11.20\(dq\f[R]
.EE
.PP
This particular pattern is referred to as \(lqnickel rounding\(rq, where
nickel is the colloquial name for a USA 5 cent coin.
To round to the nearest 10 cents (\(lqdime rounding\(rq), you could
change \f[CR]roundingIncrement\f[R] to \f[CR]10\f[R].
.IP
.EX
\f[B]const\f[R] nf = \f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqcurrency\(dq,
  currency: \(dqUSD\(dq,
  maximumFractionDigits: 2,
  roundingIncrement: 10,
});

console.log(nf.format(11.29)); \f[I]// \(dq$11.30\(dq\f[R]
console.log(nf.format(11.25)); \f[I]// \(dq$11.30\(dq\f[R]
console.log(nf.format(11.22)); \f[I]// \(dq$11.20\(dq\f[R]
.EE
.PP
You can also use \f[CR]roundingMode\f[R] to change the rounding
algorithm.
The example below shows how \f[CR]halfCeil\f[R] rounding can be used to
round the value \(lqless positive\(rq below the half\-rounding increment
and \(lqmore positive\(rq if above or on the half\-increment.
The incremented digit is \(lq0.05\(rq so the half\-increment is at .025
(below, this is shown at 11.225).
.IP
.EX
\f[B]const\f[R] nf = \f[B]new\f[R] Intl.NumberFormat(\(dqen\-US\(dq, {
  style: \(dqcurrency\(dq,
  currency: \(dqUSD\(dq,
  maximumFractionDigits: 2,
  roundingIncrement: 5,
  roundingMode: \(dqhalfCeil\(dq,
});

console.log(nf.format(11.21)); \f[I]// \(dq$11.20\(dq\f[R]
console.log(nf.format(11.22)); \f[I]// \(dq$11.20\(dq\f[R]
console.log(nf.format(11.224)); \f[I]// \(dq$11.20\(dq\f[R]
console.log(nf.format(11.225)); \f[I]// \(dq$11.25\(dq\f[R]
console.log(nf.format(11.23)); \f[I]// \(dq$11.25\(dq\f[R]
.EE
.PP
If you need to change the number of digits, remember that
\f[CR]minimumFractionDigits\f[R] and \f[CR]maximumFractionDigits\f[R]
must both be set to the same value, or a \f[CR]RangeError\f[R] is
thrown.
.PP
\f[CR]roundingIncrement\f[R] cannot be mixed with significant\-digits
rounding or any setting of \f[CR]roundingPriority\f[R] other than
\f[CR]auto\f[R].
.SH SEE ALSO
.IP \(bu 2
\f[CR]Intl.NumberFormat\f[R]
.IP \(bu 2
\f[CR]Intl.supportedValuesOf()\f[R]
.IP \(bu 2
\f[CR]Intl\f[R]
