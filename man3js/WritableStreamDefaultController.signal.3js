.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "WritableStreamDefaultController.signal" "JS" "May 4, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStreamDefaultController.signal \-
WritableStreamDefaultController: signal property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The read\-only \f[B]\f[CB]signal\f[B]\f[R] property of the
\f[CR]WritableStreamDefaultController\f[R] interface returns the
\f[CR]AbortSignal\f[R] associated with the controller.
.SH VALUE
An \f[CR]AbortSignal\f[R] object.
.SH EXAMPLES
.SS Aborting a long write operation
In this example, we simulate a slow operation using a local sink: We do
nothing when some data is written but to wait for a second.
This gives us enough time to call the \f[CR]writer.abort()\f[R] method
and to immediately reject the promise.
.IP
.EX
\f[B]const\f[R] writingStream = \f[B]new\f[R] WritableStream({
  \f[I]// Define the slow local sink to simulate a long operation\f[R]
  write(chunk, controller) {
    \f[B]return\f[R] \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
      controller.signal.addEventListener(\[dq]abort\[dq], () \f[B]=>\f[R]
        reject(controller.signal.reason),
      );

      \f[I]// Do nothing but wait with the data: it is a local sink\f[R]
      setTimeout(resolve, 1000); \f[I]// Timeout to simulate a slow operation\f[R]
    });
  },
});

\f[I]// Perform the write\f[R]
\f[B]const\f[R] writer = writingStream.getWriter();
writer.write(\[dq]Lorem ipsum test data\[dq]);

\f[I]// Abort the write manually\f[R]
\f[B]await\f[R] writer.abort(\[dq]Manual abort!\[dq]);
.EE
.SS Transferring the \f[CR]AbortSignal\f[R] to the underlying layer
In this example, we use the Fetch API to actually send the message to a
server.
The Fetch API also support \f[CR]AbortSignal\f[R]: It is possible to use
the same object for both the \f[CR]fetch\f[R] method and the
\f[CR]WritableStreamDefaultController\f[R].
.IP
.EX
\f[B]const\f[R] endpoint = \[dq]https://www.example.com/api\[dq]; \f[I]// Fake URL for example purpose\f[R]
\f[B]const\f[R] writingStream = \f[B]new\f[R] WritableStream({
  \f[B]async\f[R] write(chunk, controller) {
    \f[I]// Write to the server using the Fetch API\f[R]
    \f[B]const\f[R] response = \f[B]await\f[R] fetch(endpoint, {
      signal: controller.signal, \f[I]// We use the same object for both fetch and controller\f[R]
      method: \[dq]POST\[dq],
      body: chunk,
    });
    \f[B]await\f[R] response.text();
  },
});

\f[I]// Perform the write\f[R]
\f[B]const\f[R] writer = writingStream.getWriter();
writer.write(\[dq]Lorem ipsum test data\[dq]);

\f[I]// Abort the write manually\f[R]
\f[B]await\f[R] writer.abort(\[dq]Manual abort!\[dq]);
.EE
