.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "OBJECT.KEYS" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.keys \- Object.keys()
.SH SYNOPSIS
The \f[B]\f[CB]Object.keys()\f[B]\f[R] static method returns an array of
a given object\(cqs own enumerable string\-keyed property names.
.IP
.EX
\f[B]const\f[R] object1 = {
  a: \(dqsome string\(dq,
  b: 42,
  c: \f[B]false\f[R],
};

console.log(Object.keys(object1));
\f[I]// Expected output: Array [\(dqa\(dq, \(dqb\(dq, \(dqc\(dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
Object.keys(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
An object.
.SS Return value
An array of strings representing the given object\(cqs own enumerable
string\-keyed property keys.
.SH DESCRIPTION
\f[CR]Object.keys()\f[R] returns an array whose elements are strings
corresponding to the enumerable string\-keyed property names found
directly upon \f[CR]object\f[R].
This is the same as iterating with a \f[CR]for...in\f[R] loop, except
that a \f[CR]for...in\f[R] loop enumerates properties in the prototype
chain as well.
The order of the array returned by \f[CR]Object.keys()\f[R] is the same
as that provided by a \f[CR]for...in\f[R] loop.
.PP
If you need the property values, use \f[CR]Object.values()\f[R] instead.
If you need both the property keys and values, use
\f[CR]Object.entries()\f[R] instead.
.SH EXAMPLES
.SS Using Object.keys()
.IP
.EX
\f[I]// Basic array\f[R]
\f[B]const\f[R] arr = [\(dqa\(dq, \(dqb\(dq, \(dqc\(dq];
console.log(Object.keys(arr)); \f[I]// [\(aq0\(aq, \(aq1\(aq, \(aq2\(aq]\f[R]

\f[I]// Array\-like object\f[R]
\f[B]const\f[R] obj = { 0: \(dqa\(dq, 1: \(dqb\(dq, 2: \(dqc\(dq };
console.log(Object.keys(obj)); \f[I]// [\(aq0\(aq, \(aq1\(aq, \(aq2\(aq]\f[R]

\f[I]// Array\-like object with random key ordering\f[R]
\f[B]const\f[R] anObj = { 100: \(dqa\(dq, 2: \(dqb\(dq, 7: \(dqc\(dq };
console.log(Object.keys(anObj)); \f[I]// [\(aq2\(aq, \(aq7\(aq, \(aq100\(aq]\f[R]

\f[I]// getFoo is a non\-enumerable property\f[R]
\f[B]const\f[R] myObj = Object.create(
  {},
  {
    getFoo: {
      value() {
        \f[B]return\f[R] \f[B]this\f[R].foo;
      },
    },
  },
);
myObj.foo = 1;
console.log(Object.keys(myObj)); \f[I]// [\(aqfoo\(aq]\f[R]
.EE
.PP
If you want \f[I]all\f[R] string\-keyed own properties, including
non\-enumerable ones, see \f[CR]Object.getOwnPropertyNames()\f[R].
.SS Using Object.keys() on primitives
Non\-object arguments are coerced to objects.
\f[CR]undefined\f[R] and \f[CR]null\f[R] cannot be coerced to objects
and throw a \f[CR]TypeError\f[R] upfront.
Only strings may have own enumerable properties, while all other
primitives return an empty array.
.IP
.EX
\f[I]// Strings have indices as enumerable own properties\f[R]
console.log(Object.keys(\(dqfoo\(dq)); \f[I]// [\(aq0\(aq, \(aq1\(aq, \(aq2\(aq]\f[R]

\f[I]// Other primitives except undefined and null have no own properties\f[R]
console.log(Object.keys(100)); \f[I]// []\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] In ES5, passing a non\-object to
\f[CR]Object.keys()\f[R] threw a \f[CR]TypeError\f[R].
.RE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-object
Polyfill of \f[CR]Object.keys\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/object-key
es\-shims polyfill of \f[CR]Object.keys\f[R]
.UE \c
.IP \(bu 2
Enumerability and ownership of properties
.IP \(bu 2
\f[CR]Object.entries()\f[R]
.IP \(bu 2
\f[CR]Object.values()\f[R]
.IP \(bu 2
\f[CR]Object.prototype.propertyIsEnumerable()\f[R]
.IP \(bu 2
\f[CR]Object.create()\f[R]
.IP \(bu 2
\f[CR]Object.getOwnPropertyNames()\f[R]
.IP \(bu 2
\f[CR]Map.prototype.keys()\f[R]
