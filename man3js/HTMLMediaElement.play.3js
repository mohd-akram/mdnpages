.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "HTMLMediaElement.play" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLMediaElement.play \- HTMLMediaElement: play() method
.SH SYNOPSIS
The \f[CR]HTMLMediaElement\f[R] \f[B]\f[CB]play()\f[B]\f[R] method
attempts to begin playback of the media.
It returns a \f[CR]Promise\f[R] which is resolved when playback has been
successfully started.
.PP
Failure to begin playback for any reason, such as permission issues,
result in the promise being rejected.
.SH SYNTAX
.IP
.EX
play()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] which is resolved when playback has been started,
or is rejected if for any reason playback cannot be started.
.RS
.PP
\f[B]Note:\f[R] Browsers released before 2019 may not return a value
from \f[CR]play()\f[R].
.RE
.SS Exceptions
The promise\[cq]s \f[B]rejection handler\f[R] is called with a
\f[CR]DOMException\f[R] object passed in as its sole input parameter (as
opposed to a traditional exception being thrown).
Possible errors include:
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Provided if the user agent (browser) or operating system doesn\[cq]t
allow playback of media in the current context or situation.
The browser may require the user to explicitly start media playback by
clicking a \[lq]play\[rq] button, for example because of a Permissions
Policy.
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Provided if the media source (which may be specified as a
\f[CR]MediaStream\f[R], \f[CR]MediaSource\f[R], \f[CR]Blob\f[R], or
\f[CR]File\f[R], for example) doesn\[cq]t represent a supported media
format.
.PP
Other exceptions may be reported, depending on browser implementation
details, media player implementation, and so forth.
.SH USAGE NOTES
Although the term \[lq]autoplay\[rq] is usually thought of as referring
to pages that immediately begin playing media upon being loaded, web
browsers\[cq] autoplay policies also apply to any script\-initiated
playback of media, including calls to \f[CR]play()\f[R].
.PP
If the user agent is configured not to allow automatic or
script\-initiated playback of media, calling \f[CR]play()\f[R] will
cause the returned promise to be immediately rejected with a
\f[CR]NotAllowedError\f[R].
Websites should be prepared to handle this situation.
For example, a site should not present a user interface that assumes
playback has begun automatically, but should instead update their UI
based on whether the returned promise is fulfilled or rejected.
See the example below for more information.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]play()\f[R] method may cause the user to be
asked to grant permission to play the media, resulting in a possible
delay before the returned promise is resolved.
Be sure your code doesn\[cq]t expect an immediate response.
.RE
.PP
For even more in\-depth information about autoplay and autoplay
blocking, see our article Autoplay guide for media and Web Audio APIs.
.SH EXAMPLES
This example demonstrates how to confirm that playback has begun and how
to gracefully handle blocked automatic playback:
.IP
.EX
\f[B]let\f[R] videoElem = document.getElementById(\[dq]video\[dq]);
\f[B]let\f[R] playButton = document.getElementById(\[dq]playbutton\[dq]);

playButton.addEventListener(\[dq]click\[dq], handlePlayButton, \f[B]false\f[R]);
playVideo();

\f[B]async\f[R] \f[B]function\f[R] playVideo() {
  \f[B]try\f[R] {
    \f[B]await\f[R] videoElem.play();
    playButton.classList.add(\[dq]playing\[dq]);
  } \f[B]catch\f[R] (err) {
    playButton.classList.remove(\[dq]playing\[dq]);
  }
}

\f[B]function\f[R] handlePlayButton() {
  \f[B]if\f[R] (videoElem.paused) {
    playVideo();
  } \f[B]else\f[R] {
    videoElem.pause();
    playButton.classList.remove(\[dq]playing\[dq]);
  }
}
.EE
.PP
In this example, playback of video is toggled off and on by the
\f[CR]async\f[R] \f[CR]playVideo()\f[R] function.
It tries to play the video, and if successful sets the class name of the
\f[CR]playButton\f[R] element to \f[CR]\[dq]playing\[dq]\f[R].
If playback fails to start, the \f[CR]playButton\f[R] element\[cq]s
class is cleared, restoring its default appearance.
This ensures that the play button matches the actual state of playback
by watching for the resolution or rejection of the \f[CR]Promise\f[R]
returned by \f[CR]play()\f[R].
.PP
When this example is executed, it begins by collecting references to the
\f[CR]<video>\f[R] element as well as the \f[CR]<button>\f[R] used to
toggle playback on and off.
It then sets up an event handler for the \f[CR]click\f[R] event on the
play toggle button and attempts to automatically begin playback by
calling \f[CR]playVideo()\f[R].
.PP
You can \c
.UR https://media-play-promise.glitch.me/
try out or remix this example in real time on Glitch
.UE \c
\&.
.SH SEE ALSO
.IP \[bu] 2
Web media technologies
.IP \[bu] 2
Learning: Video and audio content
.IP \[bu] 2
Autoplay guide for media and Web Audio APIs
.IP \[bu] 2
Using the Web Audio API
