'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBGLRENDERINGCONTEXT.PIXELSTOREI" "3JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.pixelStorei \- WebGLRenderingContext:
pixelStorei() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGLRenderingContext.pixelStorei()\f[B]\f[R] method of
the WebGL API specifies the pixel storage modes.
.SH SYNTAX
.IP
.EX
pixelStorei(pname, param)
.EE
.SS Parameters
.TP
\f[B]pname\f[R]
A \f[CR]GLenum\f[R] specifying which parameter to set.
See below for possible values.
.TP
\f[B]param\f[R]
A \f[CR]GLint\f[R] specifying a value to set the \f[CR]pname\f[R]
parameter to.
See below for possible values.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH PIXEL STORAGE PARAMETERS
.PP
.TS
tab(@);
l l l l l l.
T{
Parameter name (for \f[CR]pname\f[R])
T}@T{
Description
T}@T{
Type
T}@T{
Default value
T}@T{
Allowed values (for \f[CR]param\f[R])
T}@T{
Specified in
T}
_
T{
\f[CR]gl.PACK_ALIGNMENT\f[R]
T}@T{
Packing of pixel data into memory
T}@T{
\(gaGLint\(ga
T}@T{
4
T}@T{
1, 2, 4, 8
T}@T{
OpenGL ES 2.0
T}
T{
\f[CR]gl.UNPACK_ALIGNMENT\f[R]
T}@T{
Unpacking of pixel data from memory.
T}@T{
\(gaGLint\(ga
T}@T{
4
T}@T{
1, 2, 4, 8
T}@T{
OpenGL ES 2.0
T}
T{
\f[CR]gl.UNPACK_FLIP_Y_WEBGL\f[R]
T}@T{
Flips the source data along its vertical axis if true.
T}@T{
\(gaGLboolean\(ga
T}@T{
false
T}@T{
true, false
T}@T{
WebGL
T}
T{
\f[CR]gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL\f[R]
T}@T{
Multiplies the alpha channel into the other color channels
T}@T{
\(gaGLboolean\(ga
T}@T{
false
T}@T{
true, false
T}@T{
WebGL
T}
T{
\f[CR]gl.UNPACK_COLORSPACE_CONVERSION_WEBGL\f[R]
T}@T{
Default color space conversion or no color space conversion.
T}@T{
\(gaGLenum\(ga
T}@T{
\f[CR]gl.BROWSER_DEFAULT_WEBGL\f[R]
T}@T{
\f[CR]gl.BROWSER_DEFAULT_WEBGL\f[R], \f[CR]gl.NONE\f[R]
T}@T{
WebGL
T}
.TE
.PP
When using a WebGL 2 context, the following values are available
additionally:
.PP
.TS
tab(@);
l l l l l l.
T{
Constant
T}@T{
Description
T}@T{
Type
T}@T{
Default value
T}@T{
Allowed values (for \f[CR]param\f[R])
T}@T{
Specified in
T}
_
T{
\f[CR]gl.PACK_ROW_LENGTH\f[R]
T}@T{
Number of pixels in a row.
T}@T{
\(gaGLint\(ga
T}@T{
0
T}@T{
0 to \f[CR]Infinity\f[R]
T}@T{
OpenGL ES 3.0
T}
T{
\f[CR]gl.PACK_SKIP_PIXELS\f[R]
T}@T{
Number of pixel locations skipped before the first pixel is written into
memory.
T}@T{
\(gaGLint\(ga
T}@T{
0
T}@T{
0 to \f[CR]Infinity\f[R]
T}@T{
OpenGL ES 3.0
T}
T{
\f[CR]gl.PACK_SKIP_ROWS\f[R]
T}@T{
Number of rows of pixel locations skipped before the first pixel is
written into memory
T}@T{
\(gaGLint\(ga
T}@T{
0
T}@T{
0 to \f[CR]Infinity\f[R]
T}@T{
OpenGL ES 3.0
T}
T{
\f[CR]gl.UNPACK_ROW_LENGTH\f[R]
T}@T{
Number of pixels in a row.
T}@T{
\(gaGLint\(ga
T}@T{
0
T}@T{
0 to \f[CR]Infinity\f[R]
T}@T{
OpenGL ES 3.0
T}
T{
\f[CR]gl.UNPACK_IMAGE_HEIGHT\f[R]
T}@T{
Image height used for reading pixel data from memory
T}@T{
\(gaGLint\(ga
T}@T{
0
T}@T{
0 to \f[CR]Infinity\f[R]
T}@T{
OpenGL ES 3.0
T}
T{
\f[CR]gl.UNPACK_SKIP_PIXELS\f[R]
T}@T{
Number of pixel images skipped before the first pixel is read from
memory
T}@T{
\(gaGLint\(ga
T}@T{
0
T}@T{
0 to \f[CR]Infinity\f[R]
T}@T{
OpenGL ES 3.0
T}
T{
\f[CR]gl.UNPACK_SKIP_ROWS\f[R]
T}@T{
Number of rows of pixel locations skipped before the first pixel is read
from memory
T}@T{
\(gaGLint\(ga
T}@T{
0
T}@T{
0 to \f[CR]Infinity\f[R]
T}@T{
OpenGL ES 3.0
T}
T{
\f[CR]gl.UNPACK_SKIP_IMAGES\f[R]
T}@T{
Number of pixel images skipped before the first pixel is read from
memory
T}@T{
\(gaGLint\(ga
T}@T{
0
T}@T{
0 to \f[CR]Infinity\f[R]
T}@T{
OpenGL ES 3.0
T}
.TE
.SH EXAMPLES
Setting the pixel storage mode affects the
\f[CR]WebGLRenderingContext.readPixels()\f[R] operations, as well as
unpacking of textures with the
\f[CR]WebGLRenderingContext.texImage2D()\f[R] and
\f[CR]WebGLRenderingContext.texSubImage2D()\f[R] methods.
.IP
.EX
\f[B]const\f[R] tex = gl.createTexture();
gl.bindTexture(gl.TEXTURE_2D, tex);
gl.pixelStorei(gl.PACK_ALIGNMENT, 4);
.EE
.PP
To check the values for packing and unpacking of pixel data, you can
query the same pixel storage parameters with
\f[CR]WebGLRenderingContext.getParameter()\f[R].
.IP
.EX
gl.getParameter(gl.PACK_ALIGNMENT);
gl.getParameter(gl.UNPACK_ALIGNMENT);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]WebGLRenderingContext.readPixels()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.texImage2D()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.texSubImage2D()\f[R]
