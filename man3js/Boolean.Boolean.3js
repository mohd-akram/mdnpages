.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Boolean.Boolean" "JS" "May 31, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Boolean.Boolean \- Boolean() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Boolean()\f[B]\f[R] constructor creates
\f[CR]Boolean\f[R] objects.
When called as a function, it returns primitive values of type Boolean.
.SH SYNTAX
.IP
.EX
new Boolean(value)
Boolean(value)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Boolean()\f[R] can be called with or without
\f[CR]new\f[R], but with different effects.
See Return value.
.RE
.SS Parameters
.TP
\f[B]value\f[R]
The initial value of the \f[CR]Boolean\f[R] object.
.SS Return value
When \f[CR]Boolean()\f[R] is called as a function (without
\f[CR]new\f[R]), it returns \f[CR]value\f[R] coerced to a boolean
primitive.
.PP
When \f[CR]Boolean()\f[R] is called as a constructor (with
\f[CR]new\f[R]), it coerces \f[CR]value\f[R] to a boolean primitive and
returns a wrapping \f[CR]Boolean\f[R] object, which is \f[B]not\f[R] a
primitive.
.RS
.PP
\f[B]Warning:\f[R] You should rarely find yourself using
\f[CR]Boolean\f[R] as a constructor.
.RE
.SH DESCRIPTION
The value passed as the first parameter is converted to a boolean value.
If the value is omitted or is \f[CR]0\f[R], \f[CR]\-0\f[R],
\f[CR]0n\f[R], \f[CR]null\f[R], \f[CR]false\f[R], \f[CR]NaN\f[R],
\f[CR]undefined\f[R], or the empty string (\f[CR]\[dq]\[dq]\f[R]), then
the object has an initial value of \f[CR]false\f[R].
All other values, including any object, an empty array (\f[CR][]\f[R]),
or the string \f[CR]\[dq]false\[dq]\f[R], create an object with an
initial value of \f[CR]true\f[R].
.RS
.PP
\f[B]Note:\f[R] When the non\-standard property \f[CR]document.all\f[R]
is used as an argument for this constructor, the result is a
\f[CR]Boolean\f[R] object with the value \f[CR]false\f[R].
This property is legacy and non\-standard and should not be used.
.RE
.SH EXAMPLES
.SS Creating Boolean objects with an initial value of false
.IP
.EX
\f[B]const\f[R] bZero = \f[B]new\f[R] Boolean(0);
\f[B]const\f[R] bNull = \f[B]new\f[R] Boolean(\f[B]null\f[R]);
\f[B]const\f[R] bEmptyString = \f[B]new\f[R] Boolean(\[dq]\[dq]);
\f[B]const\f[R] bfalse = \f[B]new\f[R] Boolean(\f[B]false\f[R]);

\f[B]typeof\f[R] bfalse; \f[I]// \[dq]object\[dq]\f[R]
Boolean(bfalse); \f[I]// true\f[R]
.EE
.PP
Note how converting a \f[CR]Boolean\f[R] object to a primitive with
\f[CR]Boolean()\f[R] always yields \f[CR]true\f[R], even if the object
holds a value of \f[CR]false\f[R].
You are therefore always advised to avoid constructing
\f[CR]Boolean\f[R] wrapper objects.
.PP
If you need to take the primitive value out from the wrapper object,
instead of using the \f[CR]Boolean()\f[R] function, use the object\[cq]s
\f[CR]valueOf()\f[R] method instead.
.IP
.EX
\f[B]const\f[R] bfalse = \f[B]new\f[R] Boolean(\f[B]false\f[R]);

bfalse.valueOf(); \f[I]// false\f[R]
.EE
.SS Creating \f[CR]Boolean\f[R] objects with an initial value of \f[CR]true\f[R]
.IP
.EX
\f[B]const\f[R] btrue = \f[B]new\f[R] Boolean(\f[B]true\f[R]);
\f[B]const\f[R] btrueString = \f[B]new\f[R] Boolean(\[dq]true\[dq]);
\f[B]const\f[R] bfalseString = \f[B]new\f[R] Boolean(\[dq]false\[dq]);
\f[B]const\f[R] bSuLin = \f[B]new\f[R] Boolean(\[dq]Su Lin\[dq]);
\f[B]const\f[R] bArrayProto = \f[B]new\f[R] Boolean([]);
\f[B]const\f[R] bObjProto = \f[B]new\f[R] Boolean({});
.EE
.SH SEE ALSO
.IP \[bu] 2
Boolean
