.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ANGLE_instanced_arrays" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ANGLE_instanced_arrays \- ANGLE_instanced_arrays
.SH SYNOPSIS
The \f[B]\f[CB]ANGLE_instanced_arrays\f[B]\f[R] extension is part of the
WebGL API and allows to draw the same object, or groups of similar
objects multiple times, if they share the same vertex data, primitive
count and type.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] This extension is only available to WebGL1 contexts.
In WebGL2, the functionality of this extension is available on the
WebGL2 context by default and the constants and methods are available
without the \[lq]\f[CR]ANGLE\f[R]\[rq] suffix.
.PP
Despite the name \[lq]ANGLE\[rq], this extension works on any device if
the hardware supports it and not just on Windows when using the ANGLE
library.
\[lq]ANGLE\[rq] just indicates that this extension has been written by
the ANGLE library authors.
.RE
.SH CONSTANTS
This extension exposes one new constant, which can be used in the
\f[CR]gl.getVertexAttrib()\f[R] method:
.TP
\f[B]ext.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE\f[R]
Returns a \f[CR]GLint\f[R] describing the frequency divisor used for
instanced rendering when used in the \f[CR]gl.getVertexAttrib()\f[R] as
the \f[CR]pname\f[R] parameter.
.SH INSTANCE METHODS
This extension exposes three new methods.
.TP
\f[B]ext.drawArraysInstancedANGLE()\f[R]
Behaves identically to \f[CR]gl.drawArrays()\f[R] except that multiple
instances of the range of elements are executed, and the instance
advances for each iteration.
.TP
\f[B]ext.drawElementsInstancedANGLE()\f[R]
Behaves identically to \f[CR]gl.drawElements()\f[R] except that multiple
instances of the set of elements are executed and the instance advances
between each set.
.TP
\f[B]ext.vertexAttribDivisorANGLE()\f[R]
Modifies the rate at which generic vertex attributes advance when
rendering multiple instances of primitives with
\f[CR]ext.drawArraysInstancedANGLE()\f[R] and
\f[CR]ext.drawElementsInstancedANGLE()\f[R].
.SH EXAMPLES
The following example shows how to draw a given geometry multiple times
with a single draw call.
.RS
.PP
\f[B]Warning:\f[R] The following is educational, not production level
code.
It should generally be avoided to construct data / buffers within the
rendering loop or right before use.
.RE
.IP
.EX
\f[I]// enable the extension\f[R]
\f[B]const\f[R] ext = gl.getExtension(\[dq]ANGLE_instanced_arrays\[dq]);

\f[I]// binding the geometry buffer as usual\f[R]
gl.bindBuffer(gl.ARRAY_BUFFER, geometryVertexBuffer);
gl.enableVertexAttribArray(vertexPositionAttributeLocation);
gl.vertexAttribPointer(
  vertexPositionAttributeLocation,
  3,
  gl.FLOAT,
  \f[B]false\f[R],
  0,
  0,
);

\f[I]// build position buffer\f[R]
\f[B]const\f[R] instancePositions = [];
\f[B]for\f[R] (\f[B]const\f[R] instance \f[B]of\f[R] instances) {
  instancePositions.push(
    instance.position.x,
    instance.position.y,
    instance.position.z,
  );
}
\f[B]const\f[R] instancePositionBuffer = createWebGLBufferFromData(instancePositions);

\f[I]// binding the instance position buffer as you would with any attribute\f[R]
gl.bindBuffer(gl.ARRAY_BUFFER, instancePositionBuffer);
gl.enableVertexAttribArray(instancePositionAttributeLocation);
gl.vertexAttribPointer(
  instancePositionAttributeLocation,
  3,
  gl.FLOAT,
  \f[B]false\f[R],
  0,
  0,
);

\f[I]// mark the attribute as instanced and advance it every single(1) instance rather than every vertex\f[R]
ext.vertexAttribDivisorANGLE(instancePositionAttributeLocation, 1);

\f[I]// draw geometry for each instance\f[R]
ext.drawArraysInstancedANGLE(
  gl.TRIANGLES,
  0,
  numGeometryVertices,
  instances.length,
);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.drawArraysInstanced()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.drawElementsInstanced()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.vertexAttribDivisor()\f[R]
