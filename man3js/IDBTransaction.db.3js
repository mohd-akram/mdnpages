.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBTRANSACTION.DB" "3JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.db \- IDBTransaction: db property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]db\f[B]\f[R] read\-only property of the
\f[CR]IDBTransaction\f[R] interface returns the database connection with
which this transaction is associated.
.SH VALUE
An \f[CR]IDBDatabase\f[R] object.
.SH EXAMPLES
In the following code snippet, we open a read/write transaction on our
database and add some data to an object store.
Note also the functions attached to transaction event handlers to report
on the outcome of the transaction opening in the event of success or
failure.
At the end, we return the associated database connection using
\f[CR]db\f[R].
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[B]const\f[R] note = document.getElementById(\(dqnotifications\(dq);

\f[I]// an instance of a db object for us to store the IDB data in\f[R]
\f[B]let\f[R] db;

\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\(dqli\(dq)).textContent =
    \(dqDatabase initialized.\(dq;

  \f[I]// store the result of opening the database in the db variable.\f[R]
  \f[I]// This is used a lot below\f[R]
  db = DBOpenRequest.result;

  \f[I]// Run the addData() function to add the data to the database\f[R]
  addData();
};

\f[B]function\f[R] addData() {
  \f[I]// Create a new object ready for being inserted into the IDB\f[R]
  \f[B]const\f[R] newItem = [
    {
      taskTitle: \(dqWalk dog\(dq,
      hours: 19,
      minutes: 30,
      day: 24,
      month: \(dqDecember\(dq,
      year: 2013,
      notified: \(dqno\(dq,
    },
  ];

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\(dqtoDoList\(dq], \(dqreadwrite\(dq);

  \f[I]// report on the success of opening the transaction\f[R]
  transaction.oncomplete = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\(dqli\(dq)).textContent =
      \(dqTransaction completed: database modification finished.\(dq;
  };

  transaction.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\(dqli\(dq)).textContent =
      \(dqTransaction not opened due to error. Duplicate items not allowed.\(dq;
  };

  \f[I]// create an object store on the transaction\f[R]
  \f[B]const\f[R] objectStore = transaction.objectStore(\(dqtoDoList\(dq);

  \f[I]// add our newItem object to the object store\f[R]
  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem[0]);

  objectStoreRequest.onsuccess = (event) \f[B]=>\f[R] {
    \f[I]// report the success of the request (this does not mean the item\f[R]
    \f[I]// has been stored successfully in the DB \- for that you need transaction.onsuccess)\f[R]
    note.appendChild(document.createElement(\(dqli\(dq)).textContent =
      \(dqRequest successful.\(dq;
  };

  \f[I]// Return the database (IDBDatabase) connection with which this transaction is associated\f[R]
  transaction.db;
}
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
.IP \(bu 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \(bu 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \(bu 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \(bu 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \(bu 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \(bu 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
