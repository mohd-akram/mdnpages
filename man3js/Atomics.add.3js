.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Atomics.add" "JS" "April 6, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Atomics.add \- Atomics.add()
.SH SYNOPSIS
The \f[B]\f[CB]Atomics.add()\f[B]\f[R] static method adds a given value
at a given position in the array and returns the old value at that
position.
This atomic operation guarantees that no other write happens until the
modified value is written back.
.SH SYNTAX
.IP
.EX
Atomics.add(typedArray, index, value)
.EE
.SS Parameters
.TP
\f[B]typedArray\f[R]
An integer typed array.
One of \f[CR]Int8Array\f[R], \f[CR]Uint8Array\f[R],
\f[CR]Int16Array\f[R], \f[CR]Uint16Array\f[R], \f[CR]Int32Array\f[R],
\f[CR]Uint32Array\f[R], \f[CR]BigInt64Array\f[R], or
\f[CR]BigUint64Array\f[R].
.TP
\f[B]index\f[R]
The position in the \f[CR]typedArray\f[R] to add a \f[CR]value\f[R] to.
.TP
\f[B]value\f[R]
The number to add.
.SS Return value
The old value at the given position (\f[CR]typedArray[index]\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]typedArray\f[R] is not one of the allowed integer types.
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]index\f[R] is out of bounds in the
\f[CR]typedArray\f[R].
.SH EXAMPLES
.SS Using add()
.IP
.EX
\f[B]const\f[R] sab = \f[B]new\f[R] SharedArrayBuffer(1024);
\f[B]const\f[R] ta = \f[B]new\f[R] Uint8Array(sab);

Atomics.add(ta, 0, 12); \f[I]// returns 0, the old value\f[R]
Atomics.load(ta, 0); \f[I]// 12\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Atomics\f[R]
.IP \[bu] 2
\f[CR]Atomics.sub()\f[R]
