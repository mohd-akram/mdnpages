'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "KeyboardEvent.getModifierState" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
KeyboardEvent.getModifierState \- KeyboardEvent: getModifierState()
method
.SH SYNOPSIS
The \f[B]\f[CB]KeyboardEvent.getModifierState()\f[B]\f[R] method returns
the current state of the specified modifier key: \f[CR]true\f[R] if the
modifier is active (that is the modifier key is pressed or locked),
otherwise, \f[CR]false\f[R].
.SH SYNTAX
.IP
.EX
getModifierState(key)
.EE
.SS Parameters
.TP
\f[B]key\f[R]
A modifier key value.
The value must be one of the \f[CR]KeyboardEvent.key\f[R] values which
represent modifier keys, or the string \f[CR]\[dq]Accel\[dq]\f[R]
\f[I](deprecated)\f[R].
This is case\-sensitive.
.SS Return value
A boolean.
.SH MODIFIER KEYS ON FIREFOX
When \f[CR]getModifierState()\f[R] returns true on Firefox?
.PP
.TS
tab(@);
l l l l l l.
T{
T}@T{
Windows
T}@T{
Linux (GTK)
T}@T{
Mac
T}@T{
Android 2.3
T}@T{
Android 3.0 or later
T}
_
T{
\f[CR]\[dq]Alt\[dq]\f[R]
T}@T{
Either Alt key or AltGr key pressed
T}@T{
Alt key pressed
T}@T{
⌥ Option key pressed
T}@T{
Alt key or option key pressed
T}@T{
T}
T{
\f[CR]\[dq]AltGraph\[dq]\f[R]
T}@T{
.PP
Both Alt and Ctrl keys are pressed, or AltGr key is pressed
T}@T{
Level 3 Shift key (or Level 5 Shift key) pressed
T}@T{
⌥ Option key pressed
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}
T{
\f[CR]\[dq]CapsLock\[dq]\f[R]
T}@T{
During LED for ⇪ Caps Lock turned on
T}@T{
T}@T{
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
While CapsLock is locked
T}
T{
\f[CR]\[dq]Control\[dq]\f[R]
T}@T{
Either Ctrl key or AltGr key pressed
T}@T{
Ctrl key pressed
T}@T{
control key pressed
T}@T{
menu key pressed.
T}@T{
Ctrl key, control key or menu key pressed.
T}
T{
\f[CR]\[dq]Fn\[dq]\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
Function key is pressed, but we\[aq]re not sure what key makes the
modifier state active.
Fn key on Mac keyboard doesn\[aq]t cause this active.
T}
T{
\f[CR]\[dq]FnLock\[dq]\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}
T{
\f[CR]\[dq]Hyper\[dq]\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}
T{
\f[CR]\[dq]Meta\[dq]\f[R]
T}@T{
⊞ Windows Logo key pressed (from Firefox 118)
T}@T{
Meta key pressed
T}@T{
⌘ Command key pressed
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
⊞ Windows Logo key or command key pressed
T}
T{
\f[CR]\[dq]NumLock\[dq]\f[R]
T}@T{
During LED for Num Lock turned on
T}@T{
T}@T{
A key on numpad pressed
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
While NumLock is locked
T}
T{
\f[CR]\[dq]OS\[dq]\f[R]
T}@T{
⊞ Windows Logo key pressed (before Firefox 118)
T}@T{
Super key or Hyper key pressed (typically, mapped to ⊞ Windows Logo key)
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}
T{
\f[CR]\[dq]ScrollLock\[dq]\f[R]
T}@T{
During LED for Scroll Lock turned on
T}@T{
During LED for Scroll Lock turned on, but typically this isn\[aq]t
supported by platform
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
While ScrollLock is locked
T}
T{
\f[CR]\[dq]Shift\[dq]\f[R]
T}@T{
⇧ Shift key pressed
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
\f[CR]\[dq]Super\[dq]\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}
T{
\f[CR]\[dq]Symbol\[dq]\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}
T{
\f[CR]\[dq]SymbolLock\[dq]\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}@T{
❌ \f[I]Not supported\f[R]
T}
.TE
.IP \[bu] 2
On the other platforms, \[lq]Alt\[rq], \[lq]Control\[rq] and
\[lq]Shift\[rq] may be supported.
.IP \[bu] 2
All modifiers (except \f[CR]\[dq]FnLock\[dq]\f[R],
\f[CR]\[dq]Hyper\[dq]\f[R], \f[CR]\[dq]Super\[dq]\f[R] and
\f[CR]\[dq]Symbol\[dq]\f[R] which are defined after Firefox implements
this) are always supported for untrusted events on Firefox.
This doesn\[cq]t depend on the platform.
.SH \f[CR]\[dq]Accel\[dq]\f[R] VIRTUAL MODIFIER
.RS
.PP
\f[B]Note:\f[R] The \f[CR]\[dq]Accel\[dq]\f[R] virtual modifier has been
effectively \f[B]deprecated\f[R] in current drafts of the DOM3 Events
specification.
.RE
.PP
\f[CR]getModifierState()\f[R] also accepts a deprecated virtual modifier
named \f[CR]\[dq]Accel\[dq]\f[R].
\f[CR]event.getModifierState(\[dq]Accel\[dq])\f[R] returns
\f[CR]true\f[R] when at least one of \f[CR]KeyboardEvent.ctrlKey\f[R] or
\f[CR]KeyboardEvent.metaKey\f[R] is \f[CR]true\f[R].
.PP
In old implementations and outdated specifications, it returned
\f[CR]true\f[R] when a modifier which is the typical modifier key for
the shortcut key is pressed.
For example, on Windows, pressing Ctrl key may make it return
\f[CR]true\f[R].
However, on Mac, pressing ⌘ Command key may make it return
\f[CR]true\f[R].
Note that which modifier key makes it return true depends on platforms,
browsers, and user settings.
For example, Firefox users can customize this with a pref,
\f[CR]\[dq]ui.key.accelKey\[dq]\f[R].
.SH EXAMPLES
.IP
.EX
\f[B]function\f[R] handleKeyboardEvent(event) {
  \f[I]// Ignore if following modifier is active.\f[R]
  \f[B]if\f[R] (
    event.getModifierState(\[dq]Fn\[dq]) ||
    event.getModifierState(\[dq]Hyper\[dq]) ||
    event.getModifierState(\[dq]OS\[dq]) ||
    event.getModifierState(\[dq]Super\[dq]) ||
    event.getModifierState(\[dq]Win\[dq]) \f[I]/* hack for IE */\f[R]
  ) {
    \f[B]return\f[R];
  }

  \f[I]// Also ignore if two or more modifiers except Shift are active.\f[R]
  \f[B]if\f[R] (
    event.getModifierState(\[dq]Control\[dq]) +
      event.getModifierState(\[dq]Alt\[dq]) +
      event.getModifierState(\[dq]Meta\[dq]) >
    1
  ) {
    \f[B]return\f[R];
  }

  \f[I]// Handle shortcut key with standard modifier\f[R]
  \f[B]if\f[R] (event.getModifierState(\[dq]Accel\[dq])) {
    \f[B]switch\f[R] (event.key.toLowerCase()) {
      \f[B]case\f[R] \[dq]c\[dq]:
        \f[B]if\f[R] (event.getModifierState(\[dq]Shift\[dq])) {
          \f[I]// Handle Accel + Shift + C\f[R]
          event.preventDefault(); \f[I]// consume the key event\f[R]
        }
        \f[B]break\f[R];
      \f[B]case\f[R] \[dq]k\[dq]:
        \f[B]if\f[R] (!event.getModifierState(\[dq]Shift\[dq])) {
          \f[I]// Handle Accel + K\f[R]
          event.preventDefault(); \f[I]// consume the key event\f[R]
        }
        \f[B]break\f[R];
    }
    \f[B]return\f[R];
  }

  \f[I]// Do something different for arrow keys if ScrollLock is locked.\f[R]
  \f[B]if\f[R] (
    (event.getModifierState(\[dq]ScrollLock\[dq]) ||
      event.getModifierState(\[dq]Scroll\[dq])) \f[I]/* hack for IE */\f[R] &&
    !event.getModifierState(\[dq]Control\[dq]) &&
    !event.getModifierState(\[dq]Alt\[dq]) &&
    !event.getModifierState(\[dq]Meta\[dq])
  ) {
    \f[B]switch\f[R] (event.key) {
      \f[B]case\f[R] \[dq]ArrowDown\[dq]:
      \f[B]case\f[R] \[dq]Down\[dq]: \f[I]// hack for IE and old Firefox\f[R]
        event.preventDefault(); \f[I]// consume the key event\f[R]
        \f[B]break\f[R];
      \f[B]case\f[R] \[dq]ArrowLeft\[dq]:
      \f[B]case\f[R] \[dq]Left\[dq]: \f[I]// hack for IE and old Firefox\f[R]
        \f[I]// Do something different if ScrollLock is locked.\f[R]
        event.preventDefault(); \f[I]// consume the key event\f[R]
        \f[B]break\f[R];
      \f[B]case\f[R] \[dq]ArrowRight\[dq]:
      \f[B]case\f[R] \[dq]Right\[dq]: \f[I]// hack for IE and old Firefox\f[R]
        \f[I]// Do something different if ScrollLock is locked.\f[R]
        event.preventDefault(); \f[I]// consume the key event\f[R]
        \f[B]break\f[R];
      \f[B]case\f[R] \[dq]ArrowUp\[dq]:
      \f[B]case\f[R] \[dq]Up\[dq]: \f[I]// hack for IE and old Firefox\f[R]
        \f[I]// Do something different if ScrollLock is locked.\f[R]
        event.preventDefault(); \f[I]// consume the key event\f[R]
        \f[B]break\f[R];
    }
  }
}
.EE
.RS
.PP
\f[B]Note:\f[R] Although this example uses
\f[CR].getModifierState()\f[R] with \f[CR]\[dq]Alt\[dq]\f[R],
\f[CR]\[dq]Control\[dq]\f[R], \f[CR]\[dq]Meta\[dq]\f[R] and
\f[CR]\[dq]Shift\[dq]\f[R], using \f[CR]event.altKey\f[R],
\f[CR]event.ctrlKey\f[R], \f[CR]event.metaKey\f[R] and
\f[CR]event.shiftKey\f[R] may be more preferable.
.RE
.SH SEE ALSO
.IP \[bu] 2
The \f[CR]KeyboardEvent\f[R] this method belongs to.
.IP \[bu] 2
\f[CR]MouseEvent.getModifierState\f[R]
