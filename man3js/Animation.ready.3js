.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Animation.ready" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Animation.ready \- Animation: ready property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]Animation.ready\f[B]\f[R] property of the Web
Animations API returns a \f[CR]Promise\f[R] which resolves when the
animation is ready to play.
A new promise is created every time the animation enters the
\f[CR]\[dq]pending\[dq]\f[R] play state as well as when the animation is
canceled, since in both of those scenarios, the animation is ready to be
started again.
.RS
.PP
\f[B]Note:\f[R] Since the same \f[CR]Promise\f[R] is used for both
pending \f[CR]play\f[R] and pending \f[CR]pause\f[R] requests, authors
are advised to check the state of the animation when the promise is
resolved.
.RE
.SH VALUE
A \f[CR]Promise\f[R] which resolves when the animation is ready to be
played.
You\[cq]ll typically use a construct similar to this when using the
ready promise:
.IP
.EX
animation.ready.then(() \f[B]=>\f[R] {
  \f[I]// Do whatever needs to be done when\f[R]
  \f[I]// the animation is ready to run\f[R]
});
.EE
.SH EXAMPLES
In the following example, the state of the animation will be
\f[CR]running\f[R] when the \f[B]current ready Promise\f[R] is resolved
because the animation does not leave the \f[CR]pending\f[R] play state
in between the calls to \f[CR]pause\f[R] and \f[CR]play\f[R] and hence
the \f[B]current ready Promise\f[R] does not change.
.IP
.EX
animation.pause();
animation.ready.then(() \f[B]=>\f[R] {
  \f[I]// Displays \[aq]running\[aq]\f[R]
  alert(animation.playState);
});
animation.play();
.EE
.SH SEE ALSO
.IP \[bu] 2
Web Animations API
.IP \[bu] 2
\f[CR]Animation\f[R]
.IP \[bu] 2
\f[CR]Animation.playState\f[R]
