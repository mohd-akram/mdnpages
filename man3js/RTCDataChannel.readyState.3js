.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RTCDATACHANNEL.READYSTATE" "3JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCDataChannel.readyState \- RTCDataChannel: readyState property
.SH SYNOPSIS
The read\-only \f[CR]RTCDataChannel\f[R] property
\f[B]\f[CB]readyState\f[B]\f[R] returns a string which indicates the
state of the data channel\(cqs underlying data connection.
.SH VALUES
A string indicating the current state of the underlying data transport,
which is one of the following values:
.TP
\f[B]connecting\f[R]
The user agent (browser) is in the process of creating the underlying
data transport; this is the state of a new \f[CR]RTCDataChannel\f[R]
after being created by \f[CR]RTCPeerConnection.createDataChannel()\f[R],
on the peer which started the connection process.
.TP
\f[B]open\f[R]
The underlying data transport has been established and data can be
transferred bidirectionally across it.
This is the default state of a new \f[CR]RTCDataChannel\f[R] created by
the WebRTC layer when the remote peer created the channel and delivered
it to the site or app in a \f[CR]datachannel\f[R] event.
.TP
\f[B]closing\f[R]
The process of closing the underlying data transport has begun.
It is no longer possible to queue new messages to be sent, but
previously queued messages may still be send or received before entering
the \f[CR]closed\f[R] state.
.TP
\f[B]closed\f[R]
The underlying data transport has closed, or the attempt to make the
connection failed.
.SH EXAMPLE
.IP
.EX
\f[B]const\f[R] dataChannel = peerConnection.createDataChannel(\(dqFile Transfer\(dq);
\f[B]const\f[R] sendQueue = [];

\f[B]function\f[R] sendMessage(msg) {
  \f[B]switch\f[R] (dataChannel.readyState) {
    \f[B]case\f[R] \(dqconnecting\(dq:
      console.log(\(gaConnection not open; queueing: ${msg}\(ga);
      sendQueue.push(msg);
      \f[B]break\f[R];
    \f[B]case\f[R] \(dqopen\(dq:
      sendQueue.forEach((msg) \f[B]=>\f[R] dataChannel.send(msg));
      \f[B]break\f[R];
    \f[B]case\f[R] \(dqclosing\(dq:
      console.log(\(gaAttempted to send message while closing: ${msg}\(ga);
      \f[B]break\f[R];
    \f[B]case\f[R] \(dqclosed\(dq:
      console.log(\(dqError! Attempt to send while connection closed.\(dq);
      \f[B]break\f[R];
  }
}
.EE
.SH SEE ALSO
.IP \(bu 2
WebRTC
.IP \(bu 2
Using WebRTC data channels
.IP \(bu 2
\f[CR]RTCDataChannel\f[R]
.IP \(bu 2
\f[CR]RTCPeerConnection.createDataChannel()\f[R]
