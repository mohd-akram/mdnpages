.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERBUNDLEENCODER.LABEL" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderBundleEncoder.label \- GPURenderBundleEncoder: label property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]label\f[B]\f[R] read\-only property of the
\f[CR]GPURenderBundleEncoder\f[R] interface is a string providing a
label that can be used to identify the object, for example in
\f[CR]GPUError\f[R] messages or console warnings.
.PP
This can be set by providing a \f[CR]label\f[R] property in the
descriptor object passed into the originating
\f[CR]GPUDevice.createRenderBundleEncoder()\f[R] call, or you can get
and set it directly on the \f[CR]GPURenderBundleEncoder\f[R] object.
.RS
.PP
\f[B]Note:\f[R] This property is functionally identical to its
equivalent on \f[CR]GPURenderPassEncoder\f[R] \(em \f[CR]label\f[R].
.RE
.SH VALUE
A string.
If no label value has previously been set, getting the label returns an
empty string.
.SH EXAMPLES
Setting and getting a label via \f[CR]GPURenderBundleEncoder.label\f[R]:
.IP
.EX
\f[B]const\f[R] renderBundleEncoder = device.createRenderBundleEncoder({
  colorFormats: [presentationFormat],
});

renderBundleEncoder.label = \(dqmy_render_bundle_encoder\(dq;
console.log(renderBundleEncoder.label); \f[I]// \(dqmy_render_bundle_encoder\(dq\f[R]
.EE
.PP
Setting a label via the originating
\f[CR]GPUDevice.createRenderBundleEncoder()\f[R] call, and then getting
it via \f[CR]GPURenderBundleEncoder.label\f[R]:
.IP
.EX
\f[B]const\f[R] renderBundleEncoder = device.createRenderBundleEncoder({
  colorFormats: [presentationFormat],
  label: \(dqmy_render_bundle_encoder\(dq,
});

console.log(renderBundleEncoder.label); \f[I]// \(dqmy_render_bundle_encoder\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
