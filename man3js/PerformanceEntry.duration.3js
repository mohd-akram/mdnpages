.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "PerformanceEntry.duration" "JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceEntry.duration \- PerformanceEntry: duration property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The read\-only \f[B]\f[CB]duration\f[B]\f[R] property returns a
timestamp that is the duration of the performance entry.
The meaning of this property depends on the value of this entry\[cq]s
\f[CR]entryType\f[R].
.SH VALUE
A \f[CR]DOMHighResTimeStamp\f[R] representing the duration of the
performance entry.
If the duration concept doesn\[cq]t apply for a particular performance
metric, a duration of \f[CR]0\f[R] is returned.
.PP
The meaning of this property depends on the value of this performance
entry\[cq]s \f[CR]entryType\f[R]:
.TP
\f[B]event\f[R]
The time from the event\[cq]s \f[CR]startTime\f[R] to the next rendering
paint (rounded to the nearest 8ms).
.TP
\f[B]first\-input\f[R]
The time from the first input event\[cq]s \f[CR]startTime\f[R] to the
next rendering paint (rounded to the nearest 8ms).
.TP
\f[B]longtask\f[R]
The elapsed time between the start and end of task, with a 1ms
granularity.
.TP
\f[B]measure\f[R]
The duration of the measure.
.TP
\f[B]navigation\f[R]
The difference between the entry\[cq]s \f[CR]loadEventEnd\f[R] and
\f[CR]startTime\f[R] properties.
.TP
\f[B]resource\f[R]
The entry\[cq]s \f[CR]responseEnd\f[R] value minus the entry\[cq]s
\f[CR]startTime\f[R] value.
.PP
For the following entry types, \f[CR]duration\f[R] is not applicable,
and in this case the value is always \f[CR]0\f[R]:
.IP \[bu] 2
\f[CR]element\f[R]
.IP \[bu] 2
\f[CR]largest\-contentful\-paint\f[R]
.IP \[bu] 2
\f[CR]layout\-shift\f[R]
.IP \[bu] 2
\f[CR]mark\f[R]
.IP \[bu] 2
\f[CR]paint\f[R]
.IP \[bu] 2
\f[CR]taskattribution\f[R]
.IP \[bu] 2
\f[CR]visibility\-state\f[R]
.SH EXAMPLES
.SS Using the duration property
The following example logs all observed performance entries with a
\f[CR]duration\f[R] larger than \f[CR]0\f[R].
.IP
.EX
\f[B]function\f[R] perfObserver(list, observer) {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]if\f[R] (entry.duration > 0) {
      console.log(\[ga]${entry.name}\[aq]s duration: ${entry.duration}\[ga]);
    }
  });
}
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver(perfObserver);
observer.observe({ entryTypes: [\[dq]measure\[dq], \[dq]mark\[dq], \[dq]resource\[dq]] });
.EE
