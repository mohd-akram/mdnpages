.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "TypedArray.Symbol.species" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.Symbol.species \- TypedArray[Symbol.species]
.SH SYNOPSIS
The \f[B]\f[CB]TypedArray[Symbol.species]\f[B]\f[R] static accessor
property returns the constructor used to construct return values from
typed array methods.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[CR][Symbol.species]\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are \c
.UR https://github.com/tc39/proposal-rm-builtin-subclassing
investigating whether to remove this feature
.UE \c
\&.
Avoid relying on it if possible.
.RE
.SH SYNTAX
.IP
.EX
TypedArray[Symbol.species]
.EE
.SS Return value
The value of the constructor (\f[CR]this\f[R]) on which
\f[CR]get [Symbol.species]\f[R] was called.
The return value is used to construct return values from typed array
methods that create new typed arrays.
.SH DESCRIPTION
The \f[CR][Symbol.species]\f[R] accessor property returns the default
constructor for typed array objects.
Subclass constructors may override it to change the constructor
assignment.
The default implementation is basically:
.IP
.EX
\f[I]// Hypothetical underlying implementation for illustration\f[R]
\f[B]class\f[R] TypedArray {
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    \f[B]return\f[R] \f[B]this\f[R];
  }
}
.EE
.PP
Because of this polymorphic implementation, \f[CR][Symbol.species]\f[R]
of derived subclasses would also return the constructor itself by
default.
.IP
.EX
\f[B]class\f[R] SubTypedArray \f[B]extends\f[R] Int8Array {}
SubTypedArray[Symbol.species] === SubTypedArray; \f[I]// true\f[R]
.EE
.PP
When calling typed array methods that do not mutate the existing array
but return a new array instance (for example, \f[CR]filter()\f[R] and
\f[CR]map()\f[R]), the array\[cq]s
\f[CR]constructor[Symbol.species]\f[R] will be accessed.
The returned constructor will be used to construct the return value of
the typed array method.
.PP
However, unlike \f[CR]Array[Symbol.species]\f[R], when using
\f[CR][Symbol.species]\f[R] to create new typed arrays, the language
will make sure that the newly created array is a proper typed array and
has the same content type as the original array \[em] for example, you
can\[cq]t create a \f[CR]BigInt64Array\f[R] from a
\f[CR]Float64Array\f[R], or create a non\-BigInt array from a BigInt
array.
Doing so throws a \f[CR]TypeError\f[R].
.IP
.EX
\f[B]class\f[R] BadArray \f[B]extends\f[R] Int8Array {
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    \f[B]return\f[R] Array;
  }
}
\f[B]new\f[R] BadArray(1).map(() \f[B]=>\f[R] 0); \f[I]// TypeError: Method %TypedArray%.prototype.map called on incompatible receiver [object Array]\f[R]

\f[B]class\f[R] BadArray2 \f[B]extends\f[R] Int8Array {
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    \f[B]return\f[R] BigInt64Array;
  }
}
\f[B]new\f[R] BadArray2(1).map(() \f[B]=>\f[R] 0n); \f[I]// TypeError: TypedArray.prototype.map constructed typed array of different content type from |this|\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] Due to a bug in both \c
.UR https://bugzil.la/1640194
SpiderMonkey
.UE \c
\ and V8, the content type match is not checked.
Only Safari will throw a \f[CR]TypeError\f[R] in the second example.
.RE
.SH EXAMPLES
.SS Species in ordinary objects
The \f[CR][Symbol.species]\f[R] property returns the default constructor
function, which is one of the typed array constructors itself for any
given typed array constructor.
.IP
.EX
Int8Array[Symbol.species]; \f[I]// function Int8Array()\f[R]
Uint8Array[Symbol.species]; \f[I]// function Uint8Array()\f[R]
Float32Array[Symbol.species]; \f[I]// function Float32Array()\f[R]
.EE
.SS Species in derived objects
In an instance of a custom \f[CR]TypedArray\f[R] subclass, such as
\f[CR]MyTypedArray\f[R], the \f[CR]MyTypedArray\f[R] species is the
\f[CR]MyTypedArray\f[R] constructor.
However, you might want to overwrite this, in order to return a parent
typed array object in your derived class methods:
.IP
.EX
\f[B]class\f[R] MyTypedArray \f[B]extends\f[R] Uint8Array {
  \f[I]// Overwrite MyTypedArray species to the parent Uint8Array constructor\f[R]
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    \f[B]return\f[R] Uint8Array;
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]Symbol.species\f[R]
