.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "NAVIGATOR.SENDBEACON" "3JS" "March 13, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Navigator.sendBeacon \- Navigator: sendBeacon() method
.SH SYNOPSIS
The \f[B]\f[CB]navigator.sendBeacon()\f[B]\f[R] method asynchronously
sends an HTTP POST request containing a small amount of data to a web
server.
.PP
It\(cqs intended to be used for sending analytics data to a web server,
and avoids some of the problems with legacy techniques for sending
analytics, such as the use of \f[CR]XMLHttpRequest\f[R].
.RS
.PP
\f[B]Note:\f[R] For use cases that need the ability to send requests
with methods other than \f[CR]POST\f[R], or to change any request
properties, or that need access to the server response, instead use the
\f[CR]fetch()\f[R] method with \f[CR]keepalive\f[R] set to true.
.RE
.SH SYNTAX
.IP
.EX
sendBeacon(url)
sendBeacon(url, data)
.EE
.SS Parameters
.TP
\f[B]url\f[R]
The URL that will receive the \f[I]data\f[R].
Can be relative or absolute.
.TP
\f[B]data\f[R] \f[I](optional)\f[R]
An \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R], a
\f[CR]DataView\f[R], a \f[CR]Blob\f[R], a string literal or object, a
\f[CR]FormData\f[R] or a \f[CR]URLSearchParams\f[R] object containing
the data to send.
.SS Return values
The \f[B]\f[CB]sendBeacon()\f[B]\f[R] method returns \f[CR]true\f[R] if
the user agent successfully queued the \f[CR]data\f[R] for transfer.
Otherwise, it returns \f[CR]false\f[R].
.SH DESCRIPTION
This method is intended for analytics and diagnostics code to send data
to a server.
.PP
A problem with sending analytics is that a site often wants to send
analytics when the user has finished with a page: for example, when the
user navigates to another page.
In this situation the browser may be about to unload the page, and in
that case the browser may choose not to send asynchronous
\f[CR]XMLHttpRequest\f[R] requests.
.PP
In the past, web pages have tried to delay page unload long enough to
send data.
To do this they have used workarounds such as:
.IP \(bu 2
Submitting the data with a blocking synchronous
\f[CR]XMLHttpRequest\f[R] call.
.IP \(bu 2
Creating an \f[CR]<img>\f[R] element and setting its \f[CR]src\f[R].
Most user agents will delay the unload to load the image.
.IP \(bu 2
Creating a no\-op loop for several seconds.
.PP
All these methods block unloading the document, which slows down
navigation to the next page.
There\(cqs nothing the next page can do to avoid this, so the new page
seems slow, even though it\(cqs the fault of the previous page.
.PP
With the \f[CR]sendBeacon()\f[R] method, the data is transmitted
asynchronously when the user agent has an opportunity to do so, without
delaying unload or the next navigation.
This means:
.IP \(bu 2
The data is sent reliably
.IP \(bu 2
It\(cqs sent asynchronously
.IP \(bu 2
It doesn\(cqt impact the loading of the next page
.PP
The data is sent as an HTTP POST request.
.SS Sending analytics at the end of a session
Websites often want to send analytics or diagnostics to the server when
the user has finished with the page.
The most reliable way to do this is to send the data on the
\f[CR]visibilitychange\f[R] event:
.IP
.EX
document.addEventListener(\(dqvisibilitychange\(dq, \f[B]function\f[R] logData() {
  \f[B]if\f[R] (document.visibilityState === \(dqhidden\(dq) {
    navigator.sendBeacon(\(dq/log\(dq, analyticsData);
  }
});
.EE
.SS Avoid unload and beforeunload
In the past, many websites have used the \f[CR]unload\f[R] or
\f[CR]beforeunload\f[R] events to send analytics at the end of a
session.
However, this is extremely unreliable.
In many situations, especially on mobile, the browser will not fire the
\f[CR]unload\f[R], \f[CR]beforeunload\f[R], or \f[CR]pagehide\f[R]
events.
For example, these events will not fire in the following situation:
.IP "1." 3
The user loads the page and interacts with it.
.IP "2." 3
When they are finished, they switch to a different app, instead of
closing the tab.
.IP "3." 3
Later, they close the browser app using the phone\(cqs app manager.
.PP
Additionally, the \f[CR]unload\f[R] event is incompatible with the
back/forward cache (\c
.UR https://web.dev/articles/bfcache
bfcache
.UE \c
) implemented in modern browsers.
Some browsers, such as Firefox, handle this incompatibility by excluding
pages from the bfcache if they contain unload handlers, thus hurting
performance.
Others, such as Safari and Chrome on Android, handle it by not firing
the \f[CR]unload\f[R] event when the user navigates to another page in
the same tab.
.PP
Firefox will also exclude pages from the bfcache if they contain
\f[CR]beforeunload\f[R] handlers.
.SS Use pagehide as a fallback
To support browsers which don\(cqt implement
\f[CR]visibilitychange\f[R], use the \f[CR]pagehide\f[R] event.
Like \f[CR]beforeunload\f[R] and \f[CR]unload\f[R], this event is not
reliably fired, especially on mobile.
However, it is compatible with the bfcache.
.SH EXAMPLES
The following example specifies a handler for the
\f[CR]visibilitychange\f[R] event.
The handler calls \f[CR]sendBeacon()\f[R] to send analytics.
.IP
.EX
document.addEventListener(\(dqvisibilitychange\(dq, \f[B]function\f[R] logData() {
  \f[B]if\f[R] (document.visibilityState === \(dqhidden\(dq) {
    navigator.sendBeacon(\(dq/log\(dq, analyticsData);
  }
});
.EE
.SH SEE ALSO
.IP \(bu 2
The \f[CR]visibilitychange\f[R] event.
.IP \(bu 2
Beacon API overview page.
.IP \(bu 2
\c
.UR https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/
Don\(cqt lose user and app state, use Page Visibility
.UE \c
\ explains in detail why you should use \f[CR]visibilitychange\f[R], not
\f[CR]beforeunload\f[R]/\f[CR]unload\f[R].
.IP \(bu 2
\c
.UR https://developer.chrome.com/docs/web-platform/page-lifecycle-api#developer-recommendations-for-each-state
Page Lifecycle API
.UE \c
\ gives best\-practices guidance on handling page lifecycle behavior in
your web applications.
.IP \(bu 2
\c
.UR https://github.com/GoogleChromeLabs/page-lifecycle
PageLifecycle.js
.UE \c
: a JavaScript library that deals with cross\-browser inconsistencies in
page lifecycle behavior.
.IP \(bu 2
\c
.UR https://web.dev/articles/bfcache
Back/forward cache
.UE \c
\ explains what the back/forward cache is, and its implications for
various page lifecycle events.
