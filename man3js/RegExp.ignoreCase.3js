.\" Automatically generated by Pandoc 3.4
.\"
.TH "RegExp.ignoreCase" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.ignoreCase \- RegExp.prototype.ignoreCase
.SH SYNOPSIS
The \f[B]\f[CB]ignoreCase\f[B]\f[R] accessor property of
\f[CR]RegExp\f[R] instances returns whether or not the \f[CR]i\f[R] flag
is used with this regular expression.
.SH DESCRIPTION
\f[CR]RegExp.prototype.ignoreCase\f[R] has the value \f[CR]true\f[R] if
the \f[CR]i\f[R] flag was used; otherwise, \f[CR]false\f[R].
The \f[CR]i\f[R] flag indicates that case should be ignored while
attempting a match in a string.
Case\-insensitive matching is done by mapping both the expected
character set and the matched string to the same casing.
.PP
If the regex is Unicode\-aware, the case mapping happens through
\f[I]simple case folding\f[R] specified in \c
.UR https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt
\f[CR]CaseFolding.txt\f[R]
.UE \c
\&.
The mapping always maps to a single code point, so it does not map, for
example, \f[CR]ß\f[R] (U+00DF LATIN SMALL LETTER SHARP S) to
\f[CR]ss\f[R] (which is \f[I]full case folding\f[R], not \f[I]simple
case folding\f[R]).
It may however map code points outside the Basic Latin block to code
points within it \[em] for example, \f[CR]ſ\f[R] (U+017F LATIN SMALL
LETTER LONG S) case\-folds to \f[CR]s\f[R] (U+0073 LATIN SMALL LETTER S)
and \f[CR]K\f[R] (U+212A KELVIN SIGN) case\-folds to \f[CR]k\f[R]
(U+006B LATIN SMALL LETTER K).
Therefore, \f[CR]ſ\f[R] and \f[CR]K\f[R] can be matched by
\f[CR]/[a\-z]/ui\f[R].
.PP
If the regex is Unicode\-unaware, case mapping uses the \c
.UR https://unicode-org.github.io/icu/userguide/transforms/casemappings.html
Unicode Default Case Conversion
.UE \c
\ \[em] the same algorithm used in
\f[CR]String.prototype.toUpperCase()\f[R].
For example, \f[CR]Ω\f[R] (U+2126 OHM SIGN) and \f[CR]Ω\f[R] (U+03A9
GREEK CAPITAL LETTER OMEGA) are both mapped by Default Case Conversion
to themselves but by simple case folding to \f[CR]ω\f[R] (U+03C9 GREEK
SMALL LETTER OMEGA), so \f[CR]\[dq]ω\[dq]\f[R] is matched by
\f[CR]/[\[rs]u2126]/ui\f[R] and \f[CR]/[\[rs]u03a9]/ui\f[R] but not by
\f[CR]/[\[rs]u2126]/i\f[R] or \f[CR]/[\[rs]u03a9]/i\f[R].
This algorithm prevents code points outside the Basic Latin block to be
mapped to code points within it, so \f[CR]ſ\f[R] and \f[CR]K\f[R]
mentioned previously are not matched by \f[CR]/[a\-z]/i\f[R].
.PP
The set accessor of \f[CR]ignoreCase\f[R] is \f[CR]undefined\f[R].
You cannot change this property directly.
.SH EXAMPLES
.SS Using ignoreCase
.IP
.EX
\f[B]const\f[R] regex = /foo/i;

console.log(regex.ignoreCase); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]RegExp.prototype.lastIndex\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.dotAll\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.global\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.hasIndices\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.multiline\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.source\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.sticky\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.unicode\f[R]
