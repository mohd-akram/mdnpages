.\" Automatically generated by Pandoc 3.4
.\"
.TH "Symbol.toString" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.toString \- Symbol.prototype.toString()
.SH SYNOPSIS
The \f[B]\f[CB]toString()\f[B]\f[R] method of \f[CR]Symbol\f[R] values
returns a string representing this symbol value.
.SH SYNTAX
.IP
.EX
toString()
.EE
.SS Parameters
None.
.SS Return value
A string representing the specified symbol value.
.SH DESCRIPTION
The \f[CR]Symbol\f[R] object overrides the \f[CR]toString\f[R] method of
\f[CR]Object\f[R]; it does not inherit
\f[CR]Object.prototype.toString()\f[R].
For \f[CR]Symbol\f[R] values, the \f[CR]toString\f[R] method returns a
descriptive string in the form \f[CR]\[dq]Symbol(description)\[dq]\f[R],
where \f[CR]description\f[R] is the symbol\[cq]s description.
.PP
The \f[CR]toString()\f[R] method requires its \f[CR]this\f[R] value to
be a \f[CR]Symbol\f[R] primitive or wrapper object.
It throws a \f[CR]TypeError\f[R] for other \f[CR]this\f[R] values
without attempting to coerce them to symbol values.
.PP
Because \f[CR]Symbol\f[R] has a \f[CR][Symbol.toPrimitive]()\f[R]
method, that method always takes priority over \f[CR]toString()\f[R]
when a \f[CR]Symbol\f[R] object is coerced to a string.
However, because \f[CR]Symbol.prototype[Symbol.toPrimitive]()\f[R]
returns a symbol primitive, and symbol primitives throw a
\f[CR]TypeError\f[R] when implicitly converted to a string, the
\f[CR]toString()\f[R] method is never implicitly called by the language.
To stringify a symbol, you must explicitly call its
\f[CR]toString()\f[R] method or use the \f[CR]String()\f[R] function.
.SH EXAMPLES
.SS Using toString()
.IP
.EX
Symbol(\[dq]desc\[dq]).toString(); \f[I]// \[dq]Symbol(desc)\[dq]\f[R]

\f[I]// well\-known symbols\f[R]
Symbol.iterator.toString(); \f[I]// \[dq]Symbol(Symbol.iterator)\[dq]\f[R]

\f[I]// global symbols\f[R]
Symbol.for(\[dq]foo\[dq]).toString(); \f[I]// \[dq]Symbol(foo)\[dq]\f[R]
.EE
.SS Implicitly calling toString()
The only way to make JavaScript implicitly call \f[CR]toString()\f[R]
instead of \f[CR][Symbol.toPrimitive]()\f[R] on a symbol wrapper object
is by deleting the \f[CR][Symbol.toPrimitive]()\f[R] method first.
.RS
.PP
\f[B]Warning:\f[R] You should not do this in practice.
Never mutate built\-in objects unless you know exactly what you\[cq]re
doing.
.RE
.IP
.EX
\f[B]delete\f[R] Symbol.prototype[Symbol.toPrimitive];
console.log(\[ga]${Object(Symbol(\[dq]foo\[dq]))}\[ga]); \f[I]// \[dq]Symbol(foo)\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Object.prototype.toString()\f[R]
