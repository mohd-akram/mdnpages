.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ReadableStreamDefaultReader" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStreamDefaultReader \- ReadableStreamDefaultReader
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]ReadableStreamDefaultReader\f[B]\f[R] interface of the
Streams API represents a default reader that can be used to read stream
data supplied from a network (such as a fetch request).
.PP
A \f[CR]ReadableStreamDefaultReader\f[R] can be used to read from a
\f[CR]ReadableStream\f[R] that has an underlying source of any type
(unlike a \f[CR]ReadableStreamBYOBReader\f[R], which can only be used
with readable streams that have an \f[I]underlying byte source\f[R]).
.PP
Note however that zero\-copy transfer from an underlying source is only
supported for underlying byte sources that autoallocate buffers.
In other words, the stream must have been constructed specifying both
\f[CR]type=\[dq]bytes\[dq]\f[R] and \f[CR]autoAllocateChunkSize\f[R].
For any other underlying source, the stream will always satisfy read
requests with data from internal queues.
.SH CONSTRUCTOR
.TP
\f[B]ReadableStreamDefaultReader()\f[R]
Creates and returns a \f[CR]ReadableStreamDefaultReader\f[R] object
instance.
.SH INSTANCE PROPERTIES
.TP
\f[B]ReadableStreamDefaultReader.closed\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Promise\f[R] that fulfills when the stream closes, or
rejects if the stream throws an error or the reader\[cq]s lock is
released.
This property enables you to write code that responds to an end to the
streaming process.
.SH INSTANCE METHODS
.TP
\f[B]ReadableStreamDefaultReader.cancel()\f[R]
Returns a \f[CR]Promise\f[R] that resolves when the stream is canceled.
Calling this method signals a loss of interest in the stream by a
consumer.
The supplied \f[CR]reason\f[R] argument will be given to the underlying
source, which may or may not use it.
.TP
\f[B]ReadableStreamDefaultReader.read()\f[R]
Returns a promise providing access to the next chunk in the stream\[cq]s
internal queue.
.TP
\f[B]ReadableStreamDefaultReader.releaseLock()\f[R]
Releases the reader\[cq]s lock on the stream.
.SH EXAMPLES
In the following example, an artificial \f[CR]Response\f[R] is created
to stream HTML fragments fetched from another resource to the browser.
.PP
It demonstrates the usage of a \f[CR]ReadableStream\f[R] in combination
with a \f[CR]Uint8Array\f[R].
.IP
.EX
fetch(\[dq]https://www.example.org/\[dq]).then((response) \f[B]=>\f[R] {
  \f[B]const\f[R] reader = response.body.getReader();
  \f[B]const\f[R] stream = \f[B]new\f[R] ReadableStream({
    start(controller) {
      \f[I]// The following function handles each data chunk\f[R]
      \f[B]function\f[R] push() {
        \f[I]// \[dq]done\[dq] is a Boolean and value a \[dq]Uint8Array\[dq]\f[R]
        \f[B]return\f[R] reader.read().then(({ done, value }) \f[B]=>\f[R] {
          \f[I]// Is there no more data to read?\f[R]
          \f[B]if\f[R] (done) {
            \f[I]// Tell the browser that we have finished sending data\f[R]
            controller.close();
            \f[B]return\f[R];
          }

          \f[I]// Get the data and send it to the browser via the controller\f[R]
          controller.enqueue(value);
          push();
        });
      }

      push();
    },
  });

  \f[B]return\f[R] \f[B]new\f[R] Response(stream, { headers: { \[dq]Content\-Type\[dq]: \[dq]text/html\[dq] } });
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Streams API concepts
.IP \[bu] 2
Using readable streams
.IP \[bu] 2
\f[CR]ReadableStream\f[R]
.IP \[bu] 2
\c
.UR https://whatwg-stream-visualizer.glitch.me/
WHATWG Stream Visualizer
.UE \c
, for a basic visualization of readable, writable, and transform
streams.
.IP \[bu] 2
\c
.UR https://github.com/MattiasBuelens/web-streams-polyfill
Web\-streams\-polyfill
.UE \c
\ or \c
.UR https://github.com/stardazed/sd-streams
sd\-streams
.UE \c
\ \- polyfills
