.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Atomics.sub" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Atomics.sub \- Atomics.sub()
.SH SYNOPSIS
The \f[B]\f[CB]Atomics.sub()\f[B]\f[R] static method subtracts a given
value at a given position in the array and returns the old value at that
position.
This atomic operation guarantees that no other write happens until the
modified value is written back.
.IP
.EX
\f[I]// Create a SharedArrayBuffer with a size in bytes\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] SharedArrayBuffer(16);
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array(buffer);
uint8[0] = 7;

\f[I]// 7 \- 2 = 5\f[R]
console.log(Atomics.sub(uint8, 0, 2));
\f[I]// Expected output: 7\f[R]

console.log(Atomics.load(uint8, 0));
\f[I]// Expected output: 5\f[R]
.EE
.SH SYNTAX
.IP
.EX
Atomics.sub(typedArray, index, value)
.EE
.SS Parameters
.TP
\f[B]typedArray\f[R]
An integer typed array.
One of \f[CR]Int8Array\f[R], \f[CR]Uint8Array\f[R],
\f[CR]Int16Array\f[R], \f[CR]Uint16Array\f[R], \f[CR]Int32Array\f[R],
\f[CR]Uint32Array\f[R], \f[CR]BigInt64Array\f[R], or
\f[CR]BigUint64Array\f[R].
.TP
\f[B]index\f[R]
The position in the \f[CR]typedArray\f[R] to subtract a \f[CR]value\f[R]
from.
.TP
\f[B]value\f[R]
The number to subtract.
.SS Return value
The old value at the given position (\f[CR]typedArray[index]\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]typedArray\f[R] is not one of the allowed integer types.
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]index\f[R] is out of bounds in the
\f[CR]typedArray\f[R].
.SH EXAMPLES
.SS Using sub
.IP
.EX
\f[B]const\f[R] sab = \f[B]new\f[R] SharedArrayBuffer(1024);
\f[B]const\f[R] ta = \f[B]new\f[R] Uint8Array(sab);
ta[0] = 48;

Atomics.sub(ta, 0, 12); \f[I]// returns 48, the old value\f[R]
Atomics.load(ta, 0); \f[I]// 36\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Atomics\f[R]
.IP \[bu] 2
\f[CR]Atomics.add()\f[R]
