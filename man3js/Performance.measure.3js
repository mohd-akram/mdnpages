.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Performance.measure" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Performance.measure \- Performance: measure() method
.SH SYNOPSIS
The \f[B]\f[CB]measure()\f[B]\f[R] method creates a named
\f[CR]PerformanceMeasure\f[R] object representing a time measurement
between two marks in the browser\[cq]s performance timeline.
.PP
When measuring between two marks, there is a \f[I]start mark\f[R] and
\f[I]end mark\f[R], respectively.
The named timestamp is referred to as a \f[I]measure\f[R].
.SH SYNTAX
.IP
.EX
measure(measureName)
measure(measureName, startMark)
measure(measureName, startMark, endMark)
measure(measureName, measureOptions)
measure(measureName, measureOptions, endMark)
.EE
.PP
If only \f[CR]measureName\f[R] is specified, the start timestamp is set
to zero, and the end timestamp (which is used to calculate the duration)
is the value that would be returned by \f[CR]Performance.now()\f[R].
.PP
You can use strings to identify \f[CR]PerformanceMark\f[R] objects as
start and end marks.
.PP
To only provide an \f[CR]endMark\f[R], you need to provide an empty
\f[CR]measureOptions\f[R] object:
\f[CR]performance.measure(\[dq]myMeasure\[dq], {}, \[dq]myEndMarker\[dq])\f[R].
.SS Parameters
.TP
\f[B]measureName\f[R]
A string representing the name of the measure.
.TP
\f[B]measureOptions\f[R] \f[I](optional)\f[R]
An object that may contain measure options.
.RS
.TP
\f[B]detail\f[R] \f[I](optional)\f[R]
Arbitrary metadata to be included in the measure.
Defaults to \f[CR]null\f[R].
Must be structured\-cloneable.
.TP
\f[B]start\f[R] \f[I](optional)\f[R]
Timestamp (\f[CR]DOMHighResTimeStamp\f[R]) to be used as the start time,
or string that names a \f[CR]PerformanceMark\f[R] to use for the start
time.
.RS
.PP
If this is a string naming a \f[CR]PerformanceMark\f[R], then it is
defined in the same way as \f[CR]startMark\f[R].
.RE
.TP
\f[B]duration\f[R] \f[I](optional)\f[R]
Duration (in milliseconds) between the start and end mark times.
If omitted, this defaults to \f[CR]performance.now()\f[R]; the time that
has elapsed since the context was created.
If provided, you must also specify either \f[CR]start\f[R] or
\f[CR]end\f[R] but not both.
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
Timestamp (\f[CR]DOMHighResTimeStamp\f[R]) to be used as the end time,
or string that names a \f[CR]PerformanceMark\f[R] to use for the end
time.
.RS
.PP
If this is a string naming a \f[CR]PerformanceMark\f[R], then it is
defined in the same way as \f[CR]endMark\f[R].
.RE
.RE
.TP
\f[B]startMark\f[R] \f[I](optional)\f[R]
A string naming a \f[CR]PerformanceMark\f[R] in the performance
timeline.
The \f[CR]PerformanceEntry.startTime\f[R] property of this mark will be
used for calculating the measure.
.TP
\f[B]endMark\f[R] \f[I](optional)\f[R]
A string naming a \f[CR]PerformanceMark\f[R] in the performance
timeline.
The \f[CR]PerformanceEntry.startTime\f[R] property of this mark will be
used for calculating the measure.
If you want to pass this argument, you must also pass either
\f[CR]startMark\f[R] or an empty \f[CR]measureOptions\f[R] object.
.SS Return value
The \f[CR]PerformanceMeasure\f[R] entry that was created.
.PP
The returned \f[I]measure\f[R] will have the following property values:
.IP \[bu] 2
\f[CR]entryType\f[R] \- set to \[lq]\f[CR]measure\f[R]\[rq].
.IP \[bu] 2
\f[CR]name\f[R] \- set to the \[lq]\f[CR]name\f[R]\[rq] argument.
.IP \[bu] 2
\f[CR]startTime\f[R] \- set to:
.RS 2
.IP \[bu] 2
a \f[CR]timestamp\f[R], if specified in \f[CR]measureOptions.start\f[R].
.IP \[bu] 2
the \f[CR]timestamp\f[R] of a start mark, if specified in
\f[CR]measureOptions.start\f[R] or \f[CR]startMark\f[R]
.IP \[bu] 2
a timestamp calculated from the \f[CR]measureOptions.end\f[R] and
\f[CR]measureOptions.duration\f[R] (if \f[CR]measureOptions.start\f[R]
was not specified)
.IP \[bu] 2
0, if it isn\[cq]t specified and can\[cq]t be determined from other
values.
.RE
.IP \[bu] 2
\f[CR]duration\f[R] \- set to a \f[CR]DOMHighResTimeStamp\f[R] that is
the duration of the measure calculated by subtracting the
\f[CR]startTime\f[R] from the end timestamp.
.RS 2
.PP
The end timestamp is one of:
.IP \[bu] 2
a \f[CR]timestamp\f[R], if specified in \f[CR]measureOptions.end\f[R].
.IP \[bu] 2
the \f[CR]timestamp\f[R] of an end mark, if one is specified in
\f[CR]measureOptions.end\f[R] or \f[CR]endMark\f[R]
.IP \[bu] 2
a timestamp calculated from the \f[CR]measureOptions.start\f[R] and
\f[CR]measureOptions.duration\f[R] (if \f[CR]measureOptions.end\f[R] was
not specified)
.IP \[bu] 2
the value returned by \f[CR]Performance.now()\f[R], if no end mark is
specified or can be determined from other values.
.RE
.IP \[bu] 2
\f[CR]detail\f[R] \- set to the value passed in
\f[CR]measureOptions\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
This can be thrown in any case where the start, end or duration might be
ambiguous:
.RS
.IP \[bu] 2
Both \f[CR]endMark\f[R] and \f[CR]measureOptions\f[R] are specified.
.IP \[bu] 2
\f[CR]measureOptions\f[R] is specified with \f[CR]duration\f[R] but
without specifying either \f[CR]start\f[R] or \f[CR]end\f[R].
.IP \[bu] 2
\f[CR]measureOptions\f[R] is specified with all of \f[CR]start\f[R],
\f[CR]end\f[R], and \f[CR]duration\f[R].
.RE
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
The named mark does not exist.
.RS
.IP \[bu] 2
An end mark is specified using either \f[CR]endMark\f[R] or
\f[CR]measureOptions.end\f[R], but there is no
\f[CR]PerformanceMark\f[R] in the performance buffer with the matching
name.
.IP \[bu] 2
An end mark is specified using either \f[CR]endMark\f[R] or
\f[CR]measureOptions.end\f[R], but it cannot be converted to match that
of a read only attribute in the \f[CR]PerformanceTiming\f[R] interface.
.IP \[bu] 2
A start mark is specified using either \f[CR]startMark\f[R] or
\f[CR]measureOptions.start\f[R], but there is no
\f[CR]PerformanceMark\f[R] in the performance buffer with the matching
name.
.IP \[bu] 2
A start mark is specified using either \f[CR]startMark\f[R] or
\f[CR]measureOptions.start\f[R], but it cannot be converted to match
that of a read only attribute in the \f[CR]PerformanceTiming\f[R]
interface.
.RE
.TP
\f[B]DataCloneError\f[R] \f[B]DOMException\f[R]
The \f[CR]measureOptions.detail\f[R] value is non\-\f[CR]null\f[R] and
cannot be serialized using the HTML \[lq]StructuredSerialize\[rq]
algorithm.
.TP
\f[B]RangeError\f[R]
The \f[CR]measureOptions.detail\f[R] value is non\-\f[CR]null\f[R] and
memory cannot be allocated during serialization using the HTML
\[lq]StructuredSerialize\[rq] algorithm.
.SH EXAMPLES
.SS Measuring duration between named markers
Given two of your own markers \f[CR]\[dq]login\-started\[dq]\f[R] and
\f[CR]\[dq]login\-finished\[dq]\f[R], you can create a measurement
called \f[CR]\[dq]login\-duration\[dq]\f[R] as shown in the following
example.
The returned \f[CR]PerformanceMeasure\f[R] object will then provide a
\f[CR]duration\f[R] property to tell you the elapsed time between the
two markers.
.IP
.EX
\f[B]const\f[R] loginMeasure = performance.measure(
  \[dq]login\-duration\[dq],
  \[dq]login\-started\[dq],
  \[dq]login\-finished\[dq],
);
console.log(loginMeasure.duration);
.EE
.SS Measuring duration with custom start and end times
To do more advanced measurements, you can pass a
\f[CR]measureOptions\f[R] parameter.
For example, you can use the \f[CR]event.timeStamp\f[R] property from a
\f[CR]click\f[R] event as the start time.
.IP
.EX
performance.measure(\[dq]login\-click\[dq], {
  start: myClickEvent.timeStamp,
  end: myMarker.startTime,
});
.EE
.SS Providing additional measurement details
You can use the \f[CR]details\f[R] property to provide additional
information of any type.
Maybe you want to record which HTML element was clicked, for example.
.IP
.EX
performance.measure(\[dq]login\-click\[dq], {
  detail: { htmlElement: myElement.id },
  start: myClickEvent.timeStamp,
  end: myMarker.startTime,
});
.EE
