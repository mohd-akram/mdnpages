.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBTRANSACTION.COMPLETE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.complete_event \- IDBTransaction: complete event
.SH SYNOPSIS
The \f[B]\f[CB]complete\f[B]\f[R] event of the IndexedDB API is fired
when the transaction has successfully committed, which is either after
you explicit call \f[CR]IDBTransaction.commit()\f[R] or when all
requests have been successfully completed, and after handling their
results, no new requests have been placed.
See \f[CR]IDBTransaction\f[R] for more information.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqcomplete\(dq, (event) => { })

oncomplete = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
Using \f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = DBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\(dqtoDoList\(dq], \(dqreadwrite\(dq);

  \f[I]// add a listener for \(gacomplete\(ga\f[R]
  transaction.addEventListener(\(dqcomplete\(dq, (event) \f[B]=>\f[R] {
    console.log(\(dqTransaction was completed\(dq);
  });

  \f[B]const\f[R] objectStore = transaction.objectStore(\(dqtoDoList\(dq);
  \f[B]const\f[R] newItem = {
    taskTitle: \(dqmy task\(dq,
    hours: 10,
    minutes: 10,
    day: 10,
    month: \(dqJanuary\(dq,
    year: 2019,
  };
  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem);

  objectStoreRequest.onsuccess = () \f[B]=>\f[R] {
    \f[I]// Issue a second request in the onsuccess handler,\f[R]
    \f[I]// so we can run this request after the first one completes,\f[R]
    \f[I]// while still reusing the same transaction\f[R]
    \f[B]const\f[R] getAllRequest = objectStore.getAll();

    getAllRequest.onsuccess = () \f[B]=>\f[R] {
      \f[I]// No more requests, so the transaction completes after running this handler\f[R]
      console.log(getAllRequest.result);
    };
  };
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
