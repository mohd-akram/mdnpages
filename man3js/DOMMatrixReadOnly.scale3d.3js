.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DOMMATRIXREADONLY.SCALE3D" "3JS" "March 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMMatrixReadOnly.scale3d \- DOMMatrixReadOnly: scale3d() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]scale3d()\f[B]\f[R] method of the
\f[CR]DOMMatrixReadOnly\f[R] interface creates a new matrix which is the
result of a 3D scale transform being applied to the matrix.
It returns a new \f[CR]DOMMatrix\f[R] created by scaling the source 3d
matrix by the given scale factor centered on the origin point specified
by the origin parameters, with a default origin of \f[CR](0, 0, 0)\f[R].
The original matrix is not modified.
.PP
To mutate the matrix as you 3D\-scale it, see
\f[CR]DOMMatrix.scale3dSelf()\f[R]
.SH SYNTAX
.IP
.EX
scale3d()
scale3d(scale)
scale3d(scale, originX)
scale3d(scale, originX, originY)
scale3d(scale, originX, originY, originZ)
.EE
.SS Parameters
.TP
\f[B]scale\f[R]
A multiplier; the scale value.
If no scale is supplied, this defaults to \f[CR]1\f[R].
.TP
\f[B]originX\f[R] \f[I](optional)\f[R]
An x\-coordinate for the origin of the transformation.
If no origin is supplied, this defaults to \f[CR]0\f[R].
.TP
\f[B]originY\f[R] \f[I](optional)\f[R]
A y\-coordinate for the origin of the transformation.
If no origin is supplied, this defaults to \f[CR]0\f[R].
.TP
\f[B]originZ\f[R] \f[I](optional)\f[R]
A z\-coordinate for the origin of the transformation.
If this value is \f[CR]0\f[R], the default if omitted, the resulting
matrix may not be 3d.
.SS Return value
A \f[CR]DOMMatrix\f[R].
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] matrix = \f[B]new\f[R] DOMMatrix();
console.log(matrix.toString()); \f[I]// no transforms applied\f[R]
\f[I]// matrix(1, 0, 0, 1, 0, 0)\f[R]

console.log(matrix.scale3d(2).toString());
\f[I]/* matrix3d(\f[R]
\f[I]    2, 0, 0, 0, \f[R]
\f[I]    0, 2, 0, 0, \f[R]
\f[I]    0, 0, 2, 0, \f[R]
\f[I]    0, 0, 0, 1) */\f[R]
console.log(matrix.scale3d(0.5, 25, 25, 1.25).toString());
\f[I]/* matrix3d(\f[R]
\f[I]    0.5, 0, 0, 0, \f[R]
\f[I]    0, 0.5, 0, 0, \f[R]
\f[I]    0, 0, 0.5, 0, 1\f[R]
\f[I]    2.5, 12.5, 0.625, 1) */\f[R]
console.log(matrix.toString()); \f[I]// original matrix is unchanged\f[R]
\f[I]// matrix(1, 0, 0, 1, 0, 0)\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]DOMMatrix.scale3dSelf()\f[R]
.IP \(bu 2
\f[CR]DOMMatrixReadOnly.scale()\f[R]
.IP \(bu 2
CSS \f[CR]transform\f[R] property and \f[CR]scale3d()\f[R] and
\f[CR]matrix3d()\f[R] functions
.IP \(bu 2
CSS transforms module
.IP \(bu 2
SVG \f[CR]transform\f[R] attribute
.IP \(bu 2
\f[CR]CanvasRenderingContext2D\f[R] interface\(cqs
\f[CR]CanvasRenderingContext2D.transform()\f[R] method
