.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "IDBObjectStore.get" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore.get \- IDBObjectStore: get() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]get()\f[B]\f[R] method of the \f[CR]IDBObjectStore\f[R]
interface returns an \f[CR]IDBRequest\f[R] object, and, in a separate
thread, returns the object selected by the specified key.
This is for retrieving specific records from an object store.
.PP
If a value is successfully found, then a structured clone of it is
created and set as the \f[CR]result\f[R] of the request object.
.RS
.PP
\f[B]Note:\f[R] This method produces the same result for: a) a record
that doesn\[cq]t exist in the database and b) a record that has an
undefined value.
To tell these situations apart, call the \f[CR]openCursor()\f[R] method
with the same key.
That method provides a cursor if the record exists, and no cursor if it
does not.
.RE
.SH SYNTAX
.IP
.EX
get(key)
.EE
.SS Parameters
.TP
\f[B]key\f[R]
The key or key range that identifies the record to be retrieved.
.SS Return value
An \f[CR]IDBRequest\f[R] object on which subsequent events related to
this operation are fired.
.PP
If the operation is successful, the value of the request\[cq]s
\f[CR]result\f[R] property is the value of the first record matching the
given key or key range.
.SS Exceptions
This method may raise a \f[CR]DOMException\f[R] of one of the following
types:
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if this \f[CR]IDBObjectStore\f[R]\[cq]s transaction is inactive.
.TP
\f[B]DataError\f[R] \f[B]DOMException\f[R]
Thrown if key or key range provided contains an invalid key.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]IDBObjectStore\f[R] has been deleted or removed.
.SH EXAMPLES
In the following code snippet, we open a read/write transaction on our
database and get one specific record from object store using
\f[CR]get()\f[R] \[em] a sample record with the key \[lq]Walk dog\[rq].
Once this data object is retrieved, you could then update it using
normal JavaScript, then put it back into the database using a
\f[CR]IDBObjectStore.put\f[R] operation.
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db variable.\f[R]
  \f[I]// This is used a lot below\f[R]
  db = DBOpenRequest.result;

  \f[I]// Run the getData() function to get the data from the database\f[R]
  getData();
};

\f[B]function\f[R] getData() {
  \f[I]// open a read/write db transaction, ready for retrieving the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  \f[I]// report on the success of the transaction completing, when everything is done\f[R]
  transaction.oncomplete = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Transaction completed.\[dq];
  };

  transaction.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[ga]Transaction not opened due to error: ${transaction.error}\[ga];
  };

  \f[I]// create an object store on the transaction\f[R]
  \f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);

  \f[I]// Make a request to get a record by key from the object store\f[R]
  \f[B]const\f[R] objectStoreRequest = objectStore.get(\[dq]Walk dog\[dq]);

  objectStoreRequest.onsuccess = (event) \f[B]=>\f[R] {
    \f[I]// report the success of our request\f[R]
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Request successful.\[dq];

    \f[B]const\f[R] myRecord = objectStoreRequest.result;
  };
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
