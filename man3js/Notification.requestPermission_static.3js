.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Notification.requestPermission_static" "JS" "January 15, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Notification.requestPermission_static \- Notification:
requestPermission() static method
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]requestPermission()\f[B]\f[R] static method of the
\f[CR]Notification\f[R] interface requests permission from the user for
the current origin to display notifications.
.SH SYNTAX
.IP
.EX
// The latest spec has updated this method to a promise\-based syntax that works like this:
Notification.requestPermission()

// Previously, the syntax was based on a simple callback; this version is now deprecated:
Notification.requestPermission(callback)
.EE
.SS Parameters
.TP
\f[B]callback\f[R] \f[I](optional)\f[R] \f[I](deprecated)\f[R]
An optional callback function that is called with the permission value.
Deprecated in favor of the promise return value.
.SS Return value
A \f[CR]Promise\f[R] that resolves to a string with the permission
picked by the user.
Possible values for this string are:
.TP
\f[B]granted\f[R]
The user has explicitly granted permission for the current origin to
display system notifications.
.TP
\f[B]denied\f[R]
The user has explicitly denied permission for the current origin to
display system notifications.
.TP
\f[B]default\f[R]
The user decision is unknown; in this case the application will act as
if permission was \f[CR]denied\f[R].
.SH EXAMPLES
Assume this basic HTML:
.IP
.EX
<\f[B]button\f[R] onclick=\[dq]notifyMe()\[dq]>Notify me!</\f[B]button\f[R]>
.EE
.PP
It\[cq]s possible to send a notification as follows \[em] here we
present a fairly verbose and complete set of code you could use if you
wanted to first check whether notifications are supported, then check if
permission has been granted for the current origin to send
notifications, then request permission if required, before then sending
a notification.
.IP
.EX
\f[B]function\f[R] notifyMe() {
  \f[B]if\f[R] (!(\[dq]Notification\[dq] \f[B]in\f[R] window)) {
    \f[I]// Check if the browser supports notifications\f[R]
    alert(\[dq]This browser does not support desktop notification\[dq]);
  } \f[B]else\f[R] \f[B]if\f[R] (Notification.permission === \[dq]granted\[dq]) {
    \f[I]// Check whether notification permissions have already been granted;\f[R]
    \f[I]// if so, create a notification\f[R]
    \f[B]const\f[R] notification = \f[B]new\f[R] Notification(\[dq]Hi there!\[dq]);
    \f[I]// \&...\f[R]
  } \f[B]else\f[R] \f[B]if\f[R] (Notification.permission !== \[dq]denied\[dq]) {
    \f[I]// We need to ask the user for permission\f[R]
    Notification.requestPermission().then((permission) \f[B]=>\f[R] {
      \f[I]// If the user accepts, let\[aq]s create a notification\f[R]
      \f[B]if\f[R] (permission === \[dq]granted\[dq]) {
        \f[B]const\f[R] notification = \f[B]new\f[R] Notification(\[dq]Hi there!\[dq]);
        \f[I]// \&...\f[R]
      }
    });
  }

  \f[I]// At last, if the user has denied notifications, and you\f[R]
  \f[I]// want to be respectful there is no need to bother them anymore.\f[R]
}
.EE
.PP
We no longer show a live sample on this page, as Chrome and Firefox no
longer allow notification permissions to be requested from cross\-origin
\f[CR]<iframe>\f[R]s, with other browsers to follow.
To see an example in action, check out our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do list example
.UE \c
\ (also see \c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
the app running live
.UE \c
).
.RS
.PP
\f[B]Note:\f[R] In the above example we spawn notifications in response
to a user gesture (clicking a button).
This is not only best practice \[em] you should not be spamming users
with notifications they didn\[cq]t agree to \[em] but going forward
browsers will explicitly disallow notifications not triggered in
response to a user gesture.
Firefox is already doing this from version 72, for example.
.RE
.SH SEE ALSO
.IP \[bu] 2
Using the Notifications API
