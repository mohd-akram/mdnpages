.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Worker.postMessage" "JS" "December 31, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Worker.postMessage \- Worker: postMessage() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers, except for
Service Workers.
.PP
The \f[B]\f[CB]postMessage()\f[B]\f[R] method of the \f[CR]Worker\f[R]
interface sends a message to the worker.
The first parameter is the data to send to the worker.
The data may be any JavaScript object that can be handled by the
structured clone algorithm.
.PP
The \f[CR]Worker\f[R] \f[CR]postMessage()\f[R] method delegates to the
\f[CR]MessagePort\f[R] \f[CR]postMessage()\f[R] method, which adds a
task on the event loop corresponding to the receiving
\f[CR]MessagePort\f[R].
.PP
The \f[CR]Worker\f[R] can send back information to the thread that
spawned it using the \f[CR]DedicatedWorkerGlobalScope.postMessage\f[R]
method.
.SH SYNTAX
.IP
.EX
postMessage(message)
postMessage(message, transfer)
postMessage(message, options)
.EE
.SS Parameters
.TP
\f[B]message\f[R]
The object to deliver to the worker; this will be in the \f[CR]data\f[R]
field in the event delivered to the \f[CR]message\f[R] event.
This may be any value or JavaScript object handled by the structured
clone algorithm, which includes cyclical references.
.RS
.PP
The \f[CR]message\f[R] parameter is mandatory.
If the data to be passed to the worker is unimportant, \f[CR]null\f[R]
or \f[CR]undefined\f[R] must be passed explicitly.
.RE
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
An optional array of transferable objects to transfer ownership of.
The ownership of these objects is given to the destination side and they
are no longer usable on the sending side.
These transferable objects should be attached to the message; otherwise
they would be moved but not actually accessible on the receiving end.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An optional object containing the following properties:
.RS
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
Has the same meaning as the \f[CR]transfer\f[R] parameter.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
The following code snippet shows the creation of a \f[CR]Worker\f[R]
object using the \f[CR]Worker()\f[R] constructor.
When either of two form inputs (\f[CR]first\f[R] and \f[CR]second\f[R])
have their values changed, \f[CR]change\f[R] events invoke
\f[CR]postMessage()\f[R] to send the value of both inputs to the current
worker.
.IP
.EX
\f[B]const\f[R] myWorker = \f[B]new\f[R] Worker(\[dq]worker.js\[dq]);

[first, second].forEach((input) \f[B]=>\f[R] {
  input.onchange = () \f[B]=>\f[R] {
    myWorker.port.postMessage([first.value, second.value]);
    console.log(\[dq]Message posted to worker\[dq]);
  };
});
.EE
.PP
For a full example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/web-workers/simple-web-worker
simple worker example
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/web-workers/simple-web-worker/
run example
.UE \c
).
.RS
.PP
\f[B]Note:\f[R] \f[CR]postMessage()\f[R] can only send a single object
at once.
As seen above, if you want to pass multiple values you can send an
array.
.RE
.SS Transfer Example
This minimum example has \f[CR]main\f[R] create an
\f[CR]ArrayBuffer\f[R] and transfer it to \f[CR]myWorker\f[R], then has
\f[CR]myWorker\f[R] transfer it back to \f[CR]main\f[R], with the size
logged at each step.
.SS main.js code
.IP
.EX
\f[I]// create worker\f[R]
\f[B]const\f[R] myWorker = \f[B]new\f[R] Worker(\[dq]myWorker.js\[dq]);

\f[I]// listen for myWorker to transfer the buffer back to main\f[R]
myWorker.addEventListener(\[dq]message\[dq], \f[B]function\f[R] handleMessageFromWorker(msg) {
  console.log(\[dq]message from worker received in main:\[dq], msg);

  \f[B]const\f[R] bufTransferredBackFromWorker = msg.data;

  console.log(
    \[dq]buf.byteLength in main AFTER transfer back from worker:\[dq],
    bufTransferredBackFromWorker.byteLength,
  );
});

\f[I]// create the buffer\f[R]
\f[B]const\f[R] myBuf = \f[B]new\f[R] ArrayBuffer(8);

console.log(
  \[dq]buf.byteLength in main BEFORE transfer to worker:\[dq],
  myBuf.byteLength,
);

\f[I]// send myBuf to myWorker and transfer the underlying ArrayBuffer\f[R]
myWorker.postMessage(myBuf, [myBuf]);

console.log(
  \[dq]buf.byteLength in main AFTER transfer to worker:\[dq],
  myBuf.byteLength,
);
.EE
.SS myWorker.js code
.IP
.EX
\f[I]// listen for main to transfer the buffer to myWorker\f[R]
self.onmessage = \f[B]function\f[R] handleMessageFromMain(msg) {
  console.log(\[dq]message from main received in worker:\[dq], msg);

  \f[B]const\f[R] bufTransferredFromMain = msg.data;

  console.log(
    \[dq]buf.byteLength in worker BEFORE transfer back to main:\[dq],
    bufTransferredFromMain.byteLength,
  );

  \f[I]// send buf back to main and transfer the underlying ArrayBuffer\f[R]
  self.postMessage(bufTransferredFromMain, [bufTransferredFromMain]);

  console.log(
    \[dq]buf.byteLength in worker AFTER transfer back to main:\[dq],
    bufTransferredFromMain.byteLength,
  );
};
.EE
.SS Output logged
.IP
.EX
buf.byteLength in main BEFORE transfer to worker:        8                     main.js:19
buf.byteLength in main AFTER transfer to worker:         0                     main.js:27

message from main received in worker:                    MessageEvent { ... }  myWorker.js:3
buf.byteLength in worker BEFORE transfer back to main:   8                     myWorker.js:7
buf.byteLength in worker AFTER transfer back to main:    0                     myWorker.js:15

message from worker received in main:                    MessageEvent { ... }  main.js:6
buf.byteLength in main AFTER transfer back from worker:  8                     main.js:10
.EE
.PP
\f[CR]byteLength\f[R] goes to 0 after the \f[CR]ArrayBuffer\f[R] is
transferred.
For a more sophisticated full working example of \f[CR]ArrayBuffer\f[R]
transfer, see this Firefox demo add\-on: \c
.UR https://github.com/Noitidart/ChromeWorker/tree/aca57d9cadc4e68af16201bdecbfb6f9a6f9ca6b
GitHub :: ChromeWorker \- demo\-transfer\-arraybuffer
.UE \c
.SH SEE ALSO
.IP \[bu] 2
The \f[CR]Worker\f[R] interface it belongs to.
