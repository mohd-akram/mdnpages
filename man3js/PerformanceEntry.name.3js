'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "PerformanceEntry.name" "JS" "February 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceEntry.name \- PerformanceEntry: name property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The read\-only \f[B]\f[CB]name\f[B]\f[R] property of the
\f[CR]PerformanceEntry\f[R] interface is a string representing the name
for a performance entry.
It acts as an identifier, but it does not have to be unique.
The value depends on the subclass.
.SH VALUE
A string.
The value depends on the subclass of the \f[CR]PerformanceEntry\f[R]
object as shown by the table below.
.PP
.TS
tab(@);
lw(35.0n) lw(35.0n).
T{
Subclass
T}@T{
Value
T}
_
T{
\[ga]LargestContentfulPaint\[ga]
T}@T{
Always returns an empty string.
T}
T{
\[ga]LayoutShift\[ga]
T}@T{
Always returns \f[CR]\[dq]layout\-shift\[dq]\f[R].
T}
T{
\[ga]PerformanceElementTiming\[ga]
T}@T{
One of the following strings:
.IP \[bu] 2
\f[CR]\[dq]image\-paint\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]text\-paint\[dq]\f[R]
T}
T{
\[ga]PerformanceEventTiming\[ga]
T}@T{
The associated event\[aq]s type.
T}
T{
\[ga]PerformanceLongTaskTiming\[ga]
T}@T{
One of the following strings:
.IP \[bu] 2
\f[CR]\[dq]cross\-origin\-ancestor\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]cross\-origin\-descendant\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]cross\-origin\-unreachable\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]multiple\-contexts\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]same\-origin\-ancestor\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]same\-origin\-descendant\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]same\-origin\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]self\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]unknown\[dq]\f[R]
T}
T{
\[ga]PerformanceMark\[ga]
T}@T{
The name used when the mark was created by calling
\[ga]performance.mark()\[ga].
T}
T{
\[ga]PerformanceMeasure\[ga]
T}@T{
The name used when the measure was created by calling
\[ga]performance.measure()\[ga].
T}
T{
\[ga]PerformanceNavigationTiming\[ga]
T}@T{
The resolved URL of the requested resource.
Note that this omits any text fragments or other fragment directives.
The value doesn\[aq]t change even if the request is redirected.
T}
T{
\[ga]PerformancePaintTiming\[ga]
T}@T{
One of the following strings:
.IP \[bu] 2
\f[CR]\[dq]first\-paint\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]first\-contentful\-paint\[dq]\f[R]
T}
T{
\[ga]PerformanceResourceTiming\[ga]
T}@T{
The resolved URL of the requested resource.
This value doesn\[aq]t change even if the request is redirected.
T}
T{
\[ga]TaskAttributionTiming\[ga]
T}@T{
Always returns \f[CR]\[dq]unknown\[dq]\f[R].
T}
T{
\[ga]VisibilityStateEntry\[ga]
T}@T{
One of the following strings:
.IP \[bu] 2
\f[CR]\[dq]visible\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]hidden\[dq]\f[R]
T}
.TE
.SH EXAMPLES
.SS Filtering performance entries by name
When the \f[CR]PerformanceEntry\f[R] is a
\f[CR]PerformanceResourceTiming\f[R] object, the \f[CR]name\f[R]
property refers to the resolved URL of the requested resource.
In this case, the \f[CR]name\f[R] property can be useful to filter out
specific resources, for example all SVG images.
.IP
.EX
\f[I]// Log durations of SVG resources\f[R]
performance.getEntriesByType(\[dq]resource\[dq]).forEach((entry) \f[B]=>\f[R] {
  \f[B]if\f[R] (entry.name.endsWith(\[dq].svg\[dq])) {
    console.log(\[ga]${entry.name}\[aq]s duration: ${entry.duration}\[ga]);
  }
});
.EE
.SS Getting performance entries by name
Both \f[CR]Performance\f[R] and \f[CR]PerformanceObserver\f[R] provide
methods that allow you to get performance entries by name directly.
You don\[cq]t necessarily need the \f[CR]name\f[R] property for that,
instead you might use \f[CR]Performance.getEntriesByName()\f[R] or
\f[CR]PerformanceObserverEntryList.getEntriesByName()\f[R].
.IP
.EX
\f[I]// Log all marks named \[dq]debug\-marks\[dq] at this point in time\f[R]
\f[B]const\f[R] debugMarks = performance.getEntriesByName(\[dq]debug\-mark\[dq], \[dq]mark\[dq]);
debugMarks.forEach((entry) \f[B]=>\f[R] {
  console.log(\[ga]${entry.name}\[aq]s startTime: ${entry.startTime}\[ga]);
});

\f[I]// PerformanceObserver version\f[R]
\f[I]// Log all marks named \[dq]debug\-marks\[dq] when they happen\f[R]
\f[B]function\f[R] perfObserver(list, observer) {
  list.getEntriesByName(\[dq]debug\-mark\[dq], \[dq]mark\[dq]).forEach((entry) \f[B]=>\f[R] {
    console.log(\[ga]${entry.name}\[aq]s startTime: ${entry.startTime}\[ga]);
  });
}
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver(perfObserver);
observer.observe({ entryTypes: [\[dq]measure\[dq], \[dq]mark\[dq]] });
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Performance.getEntriesByName()\f[R]
.IP \[bu] 2
\f[CR]PerformanceObserverEntryList.getEntriesByName()\f[R]
