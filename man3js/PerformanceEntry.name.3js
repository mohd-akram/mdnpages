'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PERFORMANCEENTRY.NAME" "3JS" "February 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceEntry.name \- PerformanceEntry: name property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The read\-only \f[B]\f[CB]name\f[B]\f[R] property of the
\f[CR]PerformanceEntry\f[R] interface is a string representing the name
for a performance entry.
It acts as an identifier, but it does not have to be unique.
The value depends on the subclass.
.SH VALUE
A string.
The value depends on the subclass of the \f[CR]PerformanceEntry\f[R]
object as shown by the table below.
.PP
.TS
tab(@);
lw(35.0n) lw(35.0n).
T{
Subclass
T}@T{
Value
T}
_
T{
\(gaLargestContentfulPaint\(ga
T}@T{
Always returns an empty string.
T}
T{
\(gaLayoutShift\(ga
T}@T{
Always returns \f[CR]\(dqlayout\-shift\(dq\f[R].
T}
T{
\(gaPerformanceElementTiming\(ga
T}@T{
One of the following strings:
.IP \(bu 2
\f[CR]\(dqimage\-paint\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqtext\-paint\(dq\f[R]
T}
T{
\(gaPerformanceEventTiming\(ga
T}@T{
The associated event\(aqs type.
T}
T{
\(gaPerformanceLongTaskTiming\(ga
T}@T{
One of the following strings:
.IP \(bu 2
\f[CR]\(dqcross\-origin\-ancestor\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqcross\-origin\-descendant\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqcross\-origin\-unreachable\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqmultiple\-contexts\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsame\-origin\-ancestor\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsame\-origin\-descendant\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsame\-origin\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqself\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqunknown\(dq\f[R]
T}
T{
\(gaPerformanceMark\(ga
T}@T{
The name used when the mark was created by calling
\(gaperformance.mark()\(ga.
T}
T{
\(gaPerformanceMeasure\(ga
T}@T{
The name used when the measure was created by calling
\(gaperformance.measure()\(ga.
T}
T{
\(gaPerformanceNavigationTiming\(ga
T}@T{
The resolved URL of the requested resource.
Note that this omits any text fragments or other fragment directives.
The value doesn\(aqt change even if the request is redirected.
T}
T{
\(gaPerformancePaintTiming\(ga
T}@T{
One of the following strings:
.IP \(bu 2
\f[CR]\(dqfirst\-paint\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqfirst\-contentful\-paint\(dq\f[R]
T}
T{
\(gaPerformanceResourceTiming\(ga
T}@T{
The resolved URL of the requested resource.
This value doesn\(aqt change even if the request is redirected.
T}
T{
\(gaTaskAttributionTiming\(ga
T}@T{
Always returns \f[CR]\(dqunknown\(dq\f[R].
T}
T{
\(gaVisibilityStateEntry\(ga
T}@T{
One of the following strings:
.IP \(bu 2
\f[CR]\(dqvisible\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqhidden\(dq\f[R]
T}
.TE
.SH EXAMPLES
.SS Filtering performance entries by name
When the \f[CR]PerformanceEntry\f[R] is a
\f[CR]PerformanceResourceTiming\f[R] object, the \f[CR]name\f[R]
property refers to the resolved URL of the requested resource.
In this case, the \f[CR]name\f[R] property can be useful to filter out
specific resources, for example all SVG images.
.IP
.EX
\f[I]// Log durations of SVG resources\f[R]
performance.getEntriesByType(\(dqresource\(dq).forEach((entry) \f[B]=>\f[R] {
  \f[B]if\f[R] (entry.name.endsWith(\(dq.svg\(dq)) {
    console.log(\(ga${entry.name}\(aqs duration: ${entry.duration}\(ga);
  }
});
.EE
.SS Getting performance entries by name
Both \f[CR]Performance\f[R] and \f[CR]PerformanceObserver\f[R] provide
methods that allow you to get performance entries by name directly.
You don\(cqt necessarily need the \f[CR]name\f[R] property for that,
instead you might use \f[CR]Performance.getEntriesByName()\f[R] or
\f[CR]PerformanceObserverEntryList.getEntriesByName()\f[R].
.IP
.EX
\f[I]// Log all marks named \(dqdebug\-marks\(dq at this point in time\f[R]
\f[B]const\f[R] debugMarks = performance.getEntriesByName(\(dqdebug\-mark\(dq, \(dqmark\(dq);
debugMarks.forEach((entry) \f[B]=>\f[R] {
  console.log(\(ga${entry.name}\(aqs startTime: ${entry.startTime}\(ga);
});

\f[I]// PerformanceObserver version\f[R]
\f[I]// Log all marks named \(dqdebug\-marks\(dq when they happen\f[R]
\f[B]function\f[R] perfObserver(list, observer) {
  list.getEntriesByName(\(dqdebug\-mark\(dq, \(dqmark\(dq).forEach((entry) \f[B]=>\f[R] {
    console.log(\(ga${entry.name}\(aqs startTime: ${entry.startTime}\(ga);
  });
}
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver(perfObserver);
observer.observe({ entryTypes: [\(dqmeasure\(dq, \(dqmark\(dq] });
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Performance.getEntriesByName()\f[R]
.IP \(bu 2
\f[CR]PerformanceObserverEntryList.getEntriesByName()\f[R]
