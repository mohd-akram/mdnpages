.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Request.signal" "JS" "October 17, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Request.signal \- Request: signal property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The read\-only \f[B]\f[CB]signal\f[B]\f[R] property of the
\f[CR]Request\f[R] interface returns the \f[CR]AbortSignal\f[R]
associated with the request.
.SH VALUE
An \f[CR]AbortSignal\f[R] object.
.SH EXAMPLES
.IP
.EX
\f[I]// Create a new abort controller\f[R]
\f[B]const\f[R] controller = \f[B]new\f[R] AbortController();

\f[I]// Create a request with this controller\[aq]s AbortSignal object\f[R]
\f[B]const\f[R] req = \f[B]new\f[R] Request(\[dq]/\[dq], { signal: controller.signal });

\f[I]// Add an event handler logging a message in case of abort\f[R]
req.signal.addEventListener(\[dq]abort\[dq], () \f[B]=>\f[R] {
  console.log(\[dq]abort\[dq]);
});

\f[I]// In case of abort, log the AbortSignal reason, if any\f[R]
fetch(req).catch(() \f[B]=>\f[R] {
  \f[B]if\f[R] (req.signal.aborted) {
    \f[B]if\f[R] (req.signal.reason) {
      console.log(\[ga]Request aborted with reason: ${req.signal.reason}\[ga]);
    } \f[B]else\f[R] {
      console.log(\[dq]Request aborted but no reason was given.\[dq]);
    }
  } \f[B]else\f[R] {
    console.log(\[dq]Request not aborted, but terminated abnormally.\[dq]);
  }
});

\f[I]// Actually abort the request\f[R]
controller.abort();
.EE
