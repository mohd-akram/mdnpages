.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "FormData.FormData" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FormData.FormData \- FormData: FormData() constructor
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The \f[B]\f[CB]FormData()\f[B]\f[R] constructor creates a new
\f[CR]FormData\f[R] object.
.SH SYNTAX
.IP
.EX
new FormData()
new FormData(form)
new FormData(form, submitter)
.EE
.SS Parameters
.TP
\f[B]form\f[R] \f[I](optional)\f[R]
An HTML \f[CR]<form>\f[R] element \[em] when specified, the
\f[CR]FormData\f[R] object will be populated with the
\f[CR]form\f[R]\[cq]s current keys/values using the name property of
each element for the keys and their submitted value for the values.
It will also encode file input content.
.TP
\f[B]submitter\f[R] \f[I](optional)\f[R]
A submit button that is a member of the \f[CR]form\f[R].
If the \f[CR]submitter\f[R] has a \f[CR]name\f[R] attribute or is an
\f[CR]&lt;input type=\[dq]image\[dq]&gt;\f[R], its data will be included
in the \f[CR]FormData\f[R] object (e.g.\ \f[CR]btnName=btnValue\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the specified \f[CR]submitter\f[R] is not a submit button.
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if the specified \f[CR]submitter\f[R] isn\[cq]t a member of the
\f[CR]form\f[R].
The \f[CR]submitter\f[R] must be either a descendant of the form element
or must have a \f[CR]form\f[R] attribute referring to the form.
.SH EXAMPLES
.SS Creating an empty FormData
The following line creates an empty \f[CR]FormData\f[R] object:
.IP
.EX
\f[B]const\f[R] formData = \f[B]new\f[R] FormData();
.EE
.PP
You could add a key/value pair to this using \f[CR]append()\f[R]:
.IP
.EX
formData.append(\[dq]username\[dq], \[dq]Chris\[dq]);
.EE
.SS Prepopulating from a HTML form element
You can specify the optional \f[CR]form\f[R] and \f[CR]submitter\f[R]
arguments when creating the \f[CR]FormData\f[R] object, to prepopulate
it with values from the specified form.
.RS
.PP
\f[B]Note:\f[R] Only successful form controls are included in a FormData
object, i.e.\ those with a name and not in a disabled state.
.RE
.SS HTML
.IP
.EX
<\f[B]form\f[R] id=\[dq]form\[dq]>
  <\f[B]input\f[R] type=\[dq]text\[dq] name=\[dq]text1\[dq] value=\[dq]foo\[dq] />
  <\f[B]input\f[R] type=\[dq]text\[dq] name=\[dq]text2\[dq] value=\[dq]bar\[dq] />
  <\f[B]input\f[R] type=\[dq]text\[dq] name=\[dq]text2\[dq] value=\[dq]baz\[dq] />
  <\f[B]input\f[R] type=\[dq]checkbox\[dq] name=\[dq]check\[dq] checked disabled />
  <\f[B]button\f[R] name=\[dq]intent\[dq] value=\[dq]save\[dq]>Save</\f[B]button\f[R]>
  <\f[B]button\f[R] name=\[dq]intent\[dq] value=\[dq]saveAsCopy\[dq]>Save As Copy</\f[B]button\f[R]>
</\f[B]form\f[R]>

<\f[B]output\f[R] id=\[dq]output\[dq]></\f[B]output\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] form = document.getElementById(\[dq]form\[dq]);
\f[B]const\f[R] submitter = document.querySelector(\[dq]button[value=save]\[dq]);
\f[B]const\f[R] formData = \f[B]new\f[R] FormData(form, submitter);

\f[B]const\f[R] output = document.getElementById(\[dq]output\[dq]);

\f[B]for\f[R] (\f[B]const\f[R] [key, value] \f[B]of\f[R] formData) {
  output.textContent += \[ga]${key}: ${value}\[rs]n\[ga];
}
.EE
.SS Result
For brevity, the \f[CR]<form>\f[R] element is hidden from view.
.SH SEE ALSO
.IP \[bu] 2
Using FormData objects
.IP \[bu] 2
\f[CR]<Form>\f[R]
