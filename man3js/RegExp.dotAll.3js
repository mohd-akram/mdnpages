.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RegExp.dotAll" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.dotAll \- RegExp.prototype.dotAll
.SH SYNOPSIS
The \f[B]\f[CB]dotAll\f[B]\f[R] accessor property of \f[CR]RegExp\f[R]
instances returns whether or not the \f[CR]s\f[R] flag is used with this
regular expression.
.IP
.EX
\f[B]const\f[R] regex1 = \f[B]new\f[R] RegExp(\[dq]foo\[dq], \[dq]s\[dq]);

console.log(regex1.dotAll);
\f[I]// Expected output: true\f[R]

\f[B]const\f[R] regex2 = \f[B]new\f[R] RegExp(\[dq]bar\[dq]);

console.log(regex2.dotAll);
\f[I]// Expected output: false\f[R]
.EE
.SH DESCRIPTION
\f[CR]RegExp.prototype.dotAll\f[R] has the value \f[CR]true\f[R] if the
\f[CR]s\f[R] flag was used; otherwise, \f[CR]false\f[R].
The \f[CR]s\f[R] flag indicates that the dot special character
(\f[CR].\f[R]) should additionally match the following line terminator
(\[lq]newline\[rq]) characters in a string, which it would not match
otherwise:
.IP \[bu] 2
U+000A LINE FEED (LF) (\f[CR]\[rs]n\f[R])
.IP \[bu] 2
U+000D CARRIAGE RETURN (CR) (\f[CR]\[rs]r\f[R])
.IP \[bu] 2
U+2028 LINE SEPARATOR
.IP \[bu] 2
U+2029 PARAGRAPH SEPARATOR
.PP
This effectively means the dot will match any UTF\-16 code unit.
However, it will \f[I]not\f[R] match characters that are outside of the
Unicode Basic Multilingual Plane (BMP), also known as astral characters,
which are represented as surrogate pairs and necessitate matching with
two \f[CR].\f[R] patterns instead of one.
.IP
.EX
\[dq]ðŸ˜„\[dq].match(/(.)(.)/s);
\f[I]// Array(3) [ \[dq]ðŸ˜„\[dq], \[dq]\[rs]ud83d\[dq], \[dq]\[rs]ude04\[dq] ]\f[R]
.EE
.PP
The \f[CR]u\f[R] (unicode) flag can be used to allow the dot to match
astral characters as a single character.
.IP
.EX
\[dq]ðŸ˜„\[dq].match(/./su);
\f[I]// Array [ \[dq]ðŸ˜„\[dq] ]\f[R]
.EE
.PP
Note that a pattern such as \f[CR].*\f[R] is still capable of
\f[I]consuming\f[R] astral characters as part of a larger context, even
without the \f[CR]u\f[R] flag.
.IP
.EX
\[dq]ðŸ˜„\[dq].match(/.*/s);
\f[I]// Array [ \[dq]ðŸ˜„\[dq] ]\f[R]
.EE
.PP
Using both the \f[CR]s\f[R] and \f[CR]u\f[R] flags in conjunction allows
the dot to match any Unicode character in a more intuitive manner.
.PP
The set accessor of \f[CR]dotAll\f[R] is \f[CR]undefined\f[R].
You cannot change this property directly.
.SH EXAMPLES
.SS Using dotAll
.IP
.EX
\f[B]const\f[R] str1 = \[dq]bar\[rs]nexample foo example\[dq];

\f[B]const\f[R] regex1 = /bar.example/s;

console.log(regex1.dotAll); \f[I]// true\f[R]

console.log(str1.replace(regex1, \[dq]\[dq])); \f[I]// foo example\f[R]

\f[B]const\f[R] str2 = \[dq]bar\[rs]nexample foo example\[dq];

\f[B]const\f[R] regex2 = /bar.example/;

console.log(regex2.dotAll); \f[I]// false\f[R]

console.log(str2.replace(regex2, \[dq]\[dq]));
\f[I]// bar\f[R]
\f[I]// example foo example\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of the \f[CR]dotAll\f[R] flag in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]RegExp.prototype.lastIndex\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.global\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.hasIndices\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.ignoreCase\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.multiline\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.source\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.sticky\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.unicode\f[R]
