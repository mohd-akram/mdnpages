.\" Automatically generated by Pandoc 3.4
.\"
.TH "Document.evaluate" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.evaluate \- Document: evaluate() method
.SH SYNOPSIS
The \f[B]\f[CB]evaluate()\f[B]\f[R] method of the \f[CR]Document\f[R]
interface selects elements based on the XPath expression given in
parameters.
.PP
XPath expressions can be evaluated on both HTML and XML documents.
.SH SYNTAX
.IP
.EX
evaluate(xpathExpression, contextNode, namespaceResolver, resultType, result)
.EE
.SS Parameters
.TP
\f[B]xpathExpression\f[R]
A string representing the \f[I]xpath\f[R] to be evaluated.
.TP
\f[B]contextNode\f[R]
The \f[I]context node\f[R] for the query (see the \c
.UR https://www.w3.org/TR/1999/REC-xpath-19991116/
XPath specification
.UE \c
).
It\[cq]s common to pass \f[CR]document\f[R] as the context node.
.TP
\f[B]namespaceResolver\f[R]
A function that will be passed any namespace prefixes and should return
a string representing the namespace URI associated with that prefix.
It will be used to resolve prefixes within the \f[I]xpath\f[R] itself,
so that they can be matched with the document.
The value \f[CR]null\f[R] is common for HTML documents or when no
namespace prefixes are used.
.TP
\f[B]resultType\f[R]
An integer that corresponds to the type of result \f[CR]XPathResult\f[R]
to return.
The following values are possible:
.RS
.TP
\f[B]ANY_TYPE\f[R] (\f[B]0\f[R])
Whatever type naturally results from the given expression.
.TP
\f[B]NUMBER_TYPE\f[R] (\f[B]1\f[R])
A result set containing a single number.
Useful, for example, in an \f[I]xpath\f[R] expression using the
\f[CR]count()\f[R] function.
.TP
\f[B]STRING_TYPE\f[R] (\f[B]2\f[R])
A result set containing a single string.
.TP
\f[B]BOOLEAN_TYPE\f[R] (\f[B]3\f[R])
A result set containing a single boolean value.
Useful, for example, an \f[I]xpath\f[R] expression using the
\f[CR]not()\f[R] function.
.TP
\f[B]UNORDERED_NODE_ITERATOR_TYPE\f[R] (\f[B]4\f[R])
A result set containing all the nodes matching the expression.
The nodes in the result set are not necessarily in the same order they
appear in the document.
> \f[B]Note:\f[R] > Results of this type contain references to nodes in
the document.
> Modifying a node will invalidate the iterator.
> After modifying a node, attempting to iterate through the results will
result in an error.
.TP
\f[B]ORDERED_NODE_ITERATOR_TYPE\f[R] (\f[B]5\f[R])
A result set containing all the nodes matching the expression.
The nodes in the result set are in the same order they appear in the
document.
> \f[B]Note:\f[R] > Results of this type contain references to nodes in
the document.
> Modifying a node will invalidate the iterator.
> After modifying a node, attempting to iterate through the results will
result in an error.
.TP
\f[B]UNORDERED_NODE_SNAPSHOT_TYPE\f[R] (\f[B]6\f[R])
A result set containing snapshots of all the nodes matching the
expression.
The nodes in the result set are not necessarily in the same order they
appear in the document.
> \f[B]Note:\f[R] > Results of this type are snapshots, which are
essentially lists of matched nodes.
> You can make changes to the document by altering snapshot nodes.
> Modifying the document doesn\[cq]t invalidate the snapshot; > however,
if the document is changed, the snapshot may not correspond to the
current state of the document, > since nodes may have moved, been
changed, added, or removed.
.TP
\f[B]ORDERED_NODE_SNAPSHOT_TYPE\f[R] (\f[B]7\f[R])
A result set containing snapshots of all the nodes matching the
expression.
The nodes in the result set are in the same order they appear in the
document.
> \f[B]Note:\f[R] > Results of this type are snapshots, which are
essentially lists of matched nodes.
> You can make changes to the document by altering snapshot nodes.
> Modifying the document doesn\[cq]t invalidate the snapshot; > however,
if the document is changed, the snapshot may not correspond to the
current state of the document, > since nodes may have moved, been
changed, added, or removed.
.TP
\f[B]ANY_UNORDERED_NODE_TYPE\f[R] (\f[B]8\f[R])
A result set containing any single node that matches the expression.
The node is not necessarily the first node in the document that matches
the expression.
.TP
\f[B]FIRST_ORDERED_NODE_TYPE\f[R] (\f[B]9\f[R])
A result set containing the first node in the document that matches the
expression.
.RE
.TP
\f[B]result\f[R]
An existing \f[CR]XPathResult\f[R] to use for the results.
If set to \f[CR]null\f[R] the method will create and return a new
\f[CR]XPathResult\f[R].
.SS Return value
An \f[CR]XPathResult\f[R] linking to the selected nodes.
If \f[CR]result\f[R] was \f[CR]null\f[R], it is a new object, if not, it
is the same object as the one passed as the \f[CR]result\f[R] parameter.
.SH EXAMPLES
.SS Finding all H2 headings by XPath
.IP
.EX
\f[B]const\f[R] headings = document.evaluate(
  \[dq]/html/body//h2\[dq],
  document,
  \f[B]null\f[R],
  XPathResult.ANY_TYPE,
  \f[B]null\f[R],
);
\f[I]/* Search the document for all h2 elements.\f[R]
\f[I] * The result will likely be an unordered node iterator. */\f[R]
\f[B]let\f[R] thisHeading = headings.iterateNext();
\f[B]let\f[R] alertText = \[dq]Level 2 headings in this document are:\[rs]n\[dq];
\f[B]while\f[R] (thisHeading) {
  alertText += \[ga]${thisHeading.textContent}\[rs]n\[ga];
  thisHeading = headings.iterateNext();
}
alert(alertText); \f[I]// Alerts the text of all h2 elements\f[R]
.EE
.PP
Note, in the above example, a more verbose \f[I]xpath\f[R] is preferred
over common shortcuts such as \f[CR]//h2\f[R].
Generally, more specific \f[I]xpath\f[R] selectors, as in the above
example, usually give a significant performance improvement, especially
on very large documents.
This is because the evaluation of the query does not waste time visiting
unnecessary nodes.
Using // is generally slow as it visits \f[I]every\f[R] node from the
root and all subnodes looking for possible matches.
.PP
Further optimization can be achieved by careful use of the context
parameter.
For example, if you know the content you are looking for is somewhere
inside the body tag, you can use this:
.IP
.EX
document.evaluate(\[dq].//h2\[dq], document.body, \f[B]null\f[R], XPathResult.ANY_TYPE, \f[B]null\f[R]);
.EE
.PP
Notice in the above \f[CR]document.body\f[R] has been used as the
context instead of \f[CR]document\f[R] so the \f[I]xpath\f[R] starts
from the body element.
(In this example, the \f[CR]\[dq].\[dq]\f[R] is important to indicate
that the querying should start from the context node, document.body.
If the \[lq].\[rq] was left out (leaving \f[CR]//h2\f[R]) the query
would start from the root node (\f[CR]html\f[R]) which would be more
wasteful.)
.PP
See Introduction to using XPath in JavaScript for more information.
.SS Getting element by xml:id
This function is a replacement for \f[CR]Document.getElementById()\f[R]
for when you need to search by \f[CR]xml:id\f[R] instead.
.IP
.EX
\f[B]function\f[R] getElementByIdWrapper(xmlDoc, id) {
  \f[B]return\f[R] xmlDoc.evaluate(
    \[ga]//*[\[at]xml:id=\[dq]${id}\[dq]]\[ga],
    xmlDoc,
    () \f[B]=>\f[R] \[dq]http://www.w3.org/XML/1998/namespace\[dq],
    XPathResult.FIRST_ORDERED_NODE_TYPE,
    \f[B]null\f[R],
  ).singleNodeValue;
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Document.createExpression()\f[R]
.IP \[bu] 2
\f[CR]XPathResult\f[R]
.IP \[bu] 2
\c
.UR https://codepen.io/johan/full/DJoqaX
Check for browser support
.UE \c
