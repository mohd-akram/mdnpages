.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERBUNDLEENCODER.SETVERTEXBUFFER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderBundleEncoder.setVertexBuffer \- GPURenderBundleEncoder:
setVertexBuffer() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]setVertexBuffer()\f[B]\f[R] method of the
\f[CR]GPURenderBundleEncoder\f[R] interface sets or unsets the current
\f[CR]GPUBuffer\f[R] for the given slot that will provide vertex data
for subsequent drawing commands.
.RS
.PP
\f[B]Note:\f[R] This method is functionally identical to its equivalent
on \f[CR]GPURenderPassEncoder\f[R] \(em \f[CR]setVertexBuffer()\f[R].
.RE
.SH SYNTAX
.IP
.EX
setVertexBuffer(slot, buffer, offset, size)
.EE
.SS Parameters
.TP
\f[B]slot\f[R]
A number referencing the vertex buffer slot to set the vertex buffer
for.
.TP
\f[B]buffer\f[R]
A \f[CR]GPUBuffer\f[R] representing the buffer containing the vertex
data to use for subsequent drawing commands, or \f[CR]null\f[R], in
which case any previously\-set buffer in the given slot is unset.
.TP
\f[B]offset\f[R] \f[I](optional)\f[R]
A number representing the offset, in bytes, into \f[CR]buffer\f[R] where
the vertex data begins.
If omitted, \f[CR]offset\f[R] defaults to 0.
.TP
\f[B]size\f[R] \f[I](optional)\f[R]
A number representing the size, in bytes, of the vertex data contained
in \f[CR]buffer\f[R].
If omitted, \f[CR]size\f[R] defaults to the \f[CR]buffer\f[R]\(cqs
\f[CR]GPUBuffer.size\f[R] \- \f[CR]offset\f[R].
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]setVertexBuffer()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the
\f[CR]GPURenderBundleEncoder\f[R] becomes invalid:
.IP \(bu 2
\f[CR]buffer\f[R]\(cqs \f[CR]GPUBuffer.usage\f[R] contains the
\f[CR]GPUBufferUsage.VERTEX\f[R] flag.
.IP \(bu 2
\f[CR]slot\f[R] is less than the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]maxVertexBuffers\f[R] limit.
.IP \(bu 2
\f[CR]offset\f[R] + \f[CR]size\f[R] is less than or equal to the
\f[CR]buffer\f[R]\(cqs \f[CR]GPUBuffer.size\f[R].
.IP \(bu 2
\f[CR]offset\f[R] is a multiple of 4.
.SH EXAMPLES
.SS Set vertex buffer
.IP
.EX
\f[B]function\f[R] recordRenderPass(passEncoder) {
  \f[B]if\f[R] (settings.dynamicOffsets) {
    passEncoder.setPipeline(dynamicPipeline);
  } \f[B]else\f[R] {
    passEncoder.setPipeline(pipeline);
  }
  passEncoder.setVertexBuffer(0, vertexBuffer);
  passEncoder.setBindGroup(0, timeBindGroup);
  \f[B]const\f[R] dynamicOffsets = [0];
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < numTriangles; ++i) {
    \f[B]if\f[R] (settings.dynamicOffsets) {
      dynamicOffsets[0] = i * alignedUniformBytes;
      passEncoder.setBindGroup(1, dynamicBindGroup, dynamicOffsets);
    } \f[B]else\f[R] {
      passEncoder.setBindGroup(1, bindGroups[i]);
    }
    passEncoder.draw(3, 1, 0, 0);
  }
}
.EE
.PP
The above snippet is taken from the WebGPU Samples \c
.UR https://webgpu.github.io/webgpu-samples/samples/animometer/
Animometer example
.UE \c
\&.
.SS Unset vertex buffer
.IP
.EX
\f[I]// Set vertex buffer in slot 0\f[R]
passEncoder.setVertexBuffer(0, vertexBuffer);

\f[I]// Later, unset vertex buffer in slot 0\f[R]
passEncoder.setVertexBuffer(0, \f[B]null\f[R]);
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
