.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "console.timelog_static" "JS" "November 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
console.timelog_static \- console: timeLog() static method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]console.timeLog()\f[B]\f[R] static method logs the
current value of a timer that was previously started by calling
\f[CR]console.time()\f[R].
.SH SYNTAX
.IP
.EX
timeLog()
timeLog(label)
timeLog(label, val1)
timeLog(label, val1, /* \&..., */ valN)
.EE
.SS Parameters
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
The name of the timer to log to the console.
If this is omitted the label \[lq]default\[rq] is used.
.TP
\f[B]valN\f[R] \f[I](optional)\f[R]
Additional values to be logged to the console after the timer output.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH DESCRIPTION
The \f[CR]console.timeLog()\f[R] method logs the current value of a
timer.
.PP
The method can be passed the name of a timer.
This will attempt to log the value of a timer created with that name in
a previous call to \f[CR]console.time()\f[R]:
.IP
.EX
console.time(\[dq]reticulating splines\[dq]);
reticulateSplines();
console.timeLog(\[dq]reticulating splines\[dq]);
\f[I]// reticulating splines: 650ms\f[R]
.EE
.PP
If the timer name is omitted, then the timer is named
\f[CR]\[dq]default\[dq]\f[R]:
.IP
.EX
console.time();
reticulateSplines();
console.timeLog();
\f[I]// default: 780ms\f[R]
.EE
.IP
.EX
console.time(\[dq]default\[dq]);
reticulateSplines();
console.timeLog();
\f[I]// default: 780ms\f[R]
.EE
.PP
If there is no corresponding timer, \f[CR]console.timeLog()\f[R] logs a
warning like:
.IP
.EX
Timer \[dq]timer name\[dq] doesn\[aq]t exist.
.EE
.PP
You can log additional values to the console after the timer output:
.IP
.EX
console.time();
reticulateSplines();
console.timeLog(\[dq]default\[dq], \[dq]Hello\[dq], \[dq]world\[dq]);
\f[I]// default: 780ms Hello world\f[R]
.EE
.PP
See Timers in the documentation for more details and examples.
.SH EXAMPLES
.IP
.EX
console.time(\[dq]answer time\[dq]);
alert(\[dq]Click to continue\[dq]);
console.timeLog(\[dq]answer time\[dq]);
alert(\[dq]Do a bunch of other stuff\&...\[dq]);
console.timeEnd(\[dq]answer time\[dq]);
.EE
.PP
The output from the example above shows the time taken by the user to
dismiss the first alert box, followed by the cumulative time it took for
the user to dismiss both alerts:
.IP
.EX
answer time: 2542ms debugger eval code:3:9
answer time: 4161ms \- timer ended
.EE
.PP
Notice that the timer\[cq]s name is displayed when the timer value is
logged using \f[CR]console.timeLog()\f[R] and again when it\[cq]s
stopped.
In addition, the call to \f[CR]console.timeEnd()\f[R] has the additional
information, \[lq]timer ended\[rq] to make it obvious that the timer is
no longer tracking time.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]console.time()\f[R]
.IP \[bu] 2
\f[CR]console.timeEnd()\f[R]
.IP \[bu] 2
\c
.UR https://nodejs.org/docs/latest/api/console.html#consoletimeloglabel-data
Node.JS documentation for \f[CR]console.timeLog()\f[R]
.UE \c
