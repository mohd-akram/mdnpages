.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATEBINDGROUP" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createBindGroup \- GPUDevice: createBindGroup() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createBindGroup()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPUBindGroup\f[R] based
on a \f[CR]GPUBindGroupLayout\f[R] that defines a set of resources to be
bound together in a group and how those resources are used in shader
stages.
.SH SYNTAX
.IP
.EX
createBindGroup(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]entries\f[R]
An array of entry objects describing the resources to expose to the
shader.
There will be one for each corresponding entry described by the
\f[CR]GPUBindGroupLayout\f[R] referenced in \f[CR]layout\f[R].
Each entry object has the following properties:
.RS
.TP
\f[B]binding\f[R]
A number representing a unique identifier for this resource binding,
which matches the \f[CR]binding\f[R] value of a corresponding
\f[CR]GPUBindGroupLayout\f[R] entry.
In addition, it matches the \f[CR]n\f[R] index value of the
corresponding \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#attribute-binding
\f[CR]\(atbinding(n)\f[R]
.UE \c
\ attribute in the shader (\f[CR]GPUShaderModule\f[R]) used in the
related pipeline.
.TP
\f[B]resource\f[R]
The resource to bind.
This can be one of the following:
.RS
.IP \(bu 2
\f[CR]GPUBufferBinding\f[R] (which wraps a \f[CR]GPUBuffer\f[R]; see
GPUBufferBinding objects for a definition)
.IP \(bu 2
\f[CR]GPUExternalTexture\f[R]
.IP \(bu 2
\f[CR]GPUSampler\f[R]
.IP \(bu 2
\f[CR]GPUTextureView\f[R]; can be used in place of a
\f[CR]GPUExternalTexture\f[R] provided it is compatible (a 2D format
with a single subresource, that is, \f[CR]dimension: \(dq2d\(dq\f[R]).
.RE
.RE
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]layout\f[R]
The \f[CR]GPUBindGroupLayout\f[R] that the \f[CR]entries\f[R] of this
bind group will conform to.
.RE
.SS GPUBufferBinding objects
A \f[CR]GPUBufferBinding\f[R] object can contain the following
properties:
.TP
\f[B]buffer\f[R]
The \f[CR]GPUBuffer\f[R] object you want to bind.
.TP
\f[B]offset\f[R] \f[I](optional)\f[R]
The offset, in bytes, from the beginning of the \f[CR]buffer\f[R] to the
beginning of the range exposed to the shader by the buffer binding.
If omitted, \f[CR]offset\f[R] defaults to 0.
.TP
\f[B]size\f[R] \f[I](optional)\f[R]
The size, in bytes, of the buffer binding.
If omitted, \f[CR]size\f[R] will be the range starting at
\f[CR]offset\f[R] and ending at the end of the \f[CR]buffer\f[R].
If both \f[CR]offset\f[R] and \f[CR]size\f[R] are omitted, the entire
buffer is exposed to the shader.
.SS Return value
A \f[CR]GPUBindGroup\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createBindGroup()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUBindGroup\f[R] object is returned:
.IP \(bu 2
The number of entries in the \f[CR]layout\f[R]
\f[CR]GPUBindGroupLayout\f[R] equals the number of entry objects in
\f[CR]entries\f[R].
.IP \(bu 2
For each entry in the \f[CR]layout\f[R] \f[CR]GPUBindGroupLayout\f[R],
the corresponding entry object in \f[CR]entries\f[R] binds the correct
resource type.
For example, a \f[CR]buffer\f[R] resource layout object has a
\f[CR]GPUBufferBinding\f[R] object specified in the corresponding
binding.
.IP \(bu 2
If the resource layout object is a \f[CR]buffer\f[R]:
.RS 2
.IP \(bu 2
The corresponding bound \f[CR]GPUBuffer\f[R]:
.RS 2
.IP \(bu 2
Has its bound part (as specified by \f[CR]offset\f[R] and
\f[CR]size\f[R]) contained inside it completely, with a non\-zero size.
.IP \(bu 2
Has a size bigger than the \f[CR]buffer\f[R] resource layout\(cqs
\f[CR]minBindingSize\f[R].
.RE
.IP \(bu 2
If the resource layout object \f[CR]type\f[R] is
\f[CR]\(dquniform\(dq\f[R]:
.RS 2
.IP \(bu 2
The bound \f[CR]GPUBuffer\f[R] has a \f[CR]usage\f[R] that includes
\f[CR]GPUBufferUsage.UNIFORM\f[R].
.IP \(bu 2
The effective size of the bound buffer segment is less than or equal to
the \f[CR]GPUDevice\f[R]\(cqs \f[CR]maxUniformBufferBindingSize\f[R]
limit.
.IP \(bu 2
The specified \f[CR]GPUBufferBinding\f[R] \f[CR]offset\f[R] is a
multiple of the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]minUniformBufferOffsetAlignment\f[R] limit.
.RE
.IP \(bu 2
If the resource layout object \f[CR]type\f[R] is
\f[CR]\(dqstorage\(dq\f[R] or \f[CR]\(dqread\-only\-storage\(dq\f[R]:
.RS 2
.IP \(bu 2
The bound \f[CR]GPUBuffer\f[R] has a \f[CR]usage\f[R] that includes
\f[CR]GPUBufferUsage.STORAGE\f[R].
.IP \(bu 2
The effective size of the bound buffer segment is less than or equal to
the \f[CR]GPUDevice\f[R]\(cqs \f[CR]maxStorageBufferBindingSize\f[R]
limit.
.IP \(bu 2
The effective size of the bound buffer segment is a multiple of 4.
.IP \(bu 2
The specified \f[CR]GPUBufferBinding\f[R] \f[CR]offset\f[R] is a
multiple of the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]minStorageBufferOffsetAlignment\f[R] limit.
.RE
.RE
.IP \(bu 2
If the resource layout object is a \f[CR]storageTexture\f[R], the
corresponding bound \f[CR]GPUTextureView\f[R]:
.RS 2
.IP \(bu 2
Has a \f[CR]dimension\f[R] equal to the resource layout object\(cqs
\f[CR]viewDimension\f[R] (see \f[CR]GPUTexture.createView()\f[R] for
more details of a texture view\(cqs settings).
.IP \(bu 2
Has a \f[CR]format\f[R] equal to the resource layout object\(cqs
\f[CR]sampleType\f[R].
.IP \(bu 2
Has a \f[CR]mipLevelCount\f[R] equal to 1.
.IP \(bu 2
Is a view of a \f[CR]GPUTexture\f[R] with a \f[CR]usage\f[R] that
includes \f[CR]GPUTextureUsage.STORAGE_BINDING\f[R].
.RE
.IP \(bu 2
If the resource layout object is a \f[CR]texture\f[R], the corresponding
bound \f[CR]GPUTextureView\f[R]:
.RS 2
.IP \(bu 2
Has a \f[CR]dimension\f[R] equal to the resource layout object\(cqs
\f[CR]viewDimension\f[R] (see \f[CR]GPUTexture.createView()\f[R] for
more details of a texture view\(cqs settings).
.IP \(bu 2
Has a \f[CR]format\f[R] compatible with the resource layout object\(cqs
\f[CR]sampleType\f[R].
.IP \(bu 2
Is a view of a \f[CR]GPUTexture\f[R] with a \f[CR]usage\f[R] that
includes \f[CR]GPUTextureUsage.TEXTURE_BINDING\f[R].
.IP \(bu 2
is a view of a \f[CR]GPUTexture\f[R] with a \f[CR]sampleCount\f[R]
greater than 1 if the resource layout object\(cqs
\f[CR]multisampled\f[R] property is \f[CR]true\f[R], or equal to 1 if it
is \f[CR]false\f[R].
.RE
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Basic example
Our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
\ shows an example of creating a bind group layout and then using that
as a template when creating a bind group.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] bindGroupLayout = device.createBindGroupLayout({
  entries: [
    {
      binding: 0,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {
        type: \(dqstorage\(dq,
      },
    },
  ],
});

\f[B]const\f[R] bindGroup = device.createBindGroup({
  layout: bindGroupLayout,
  entries: [
    {
      binding: 0,
      resource: {
        buffer: output,
      },
    },
  ],
});

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
