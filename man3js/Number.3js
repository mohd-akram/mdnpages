.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "NUMBER" "3JS" "March 6, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number \- Number
.SH SYNOPSIS
\f[B]\f[CB]Number\f[B]\f[R] values represent floating\-point numbers
like \f[CR]37\f[R] or \f[CR]\-9.25\f[R].
.PP
The \f[CR]Number\f[R] constructor contains constants and methods for
working with numbers.
Values of other types can be converted to numbers using the
\f[CR]Number()\f[R] function.
.SH DESCRIPTION
Numbers are most commonly expressed in literal forms like \f[CR]255\f[R]
or \f[CR]3.14159\f[R].
The lexical grammar contains a more detailed reference.
.IP
.EX
255; \f[I]// two\-hundred and fifty\-five\f[R]
255.0; \f[I]// same number\f[R]
255 === 255.0; \f[I]// true\f[R]
255 === 0xff; \f[I]// true (hexadecimal notation)\f[R]
255 === 0b11111111; \f[I]// true (binary notation)\f[R]
255 === 0.255e3; \f[I]// true (decimal exponential notation)\f[R]
.EE
.PP
A number literal like \f[CR]37\f[R] in JavaScript code is a
floating\-point value, not an integer.
There is no separate integer type in common everyday use.
(JavaScript also has a \f[CR]BigInt\f[R] type, but it\(cqs not designed
to replace Number for everyday uses.
\f[CR]37\f[R] is still a number, not a BigInt.)
.PP
When used as a function, \f[CR]Number(value)\f[R] converts a string or
other value to the Number type.
If the value can\(cqt be converted, it returns \f[CR]NaN\f[R].
.IP
.EX
Number(\(dq123\(dq); \f[I]// returns the number 123\f[R]
Number(\(dq123\(dq) === 123; \f[I]// true\f[R]

Number(\(dqunicorn\(dq); \f[I]// NaN\f[R]
Number(\f[B]undefined\f[R]); \f[I]// NaN\f[R]
.EE
.SS Number encoding
The JavaScript \f[CR]Number\f[R] type is a \c
.UR https://en.wikipedia.org/wiki/Double_precision_floating-point_format
double\-precision 64\-bit binary format IEEE 754
.UE \c
\ value, like \f[CR]double\f[R] in Java or C#.
This means it can represent fractional values, but there are some limits
to the stored number\(cqs magnitude and precision.
Very briefly, an IEEE 754 double\-precision number uses 64 bits to
represent 3 parts:
.IP \(bu 2
1 bit for the \f[I]sign\f[R] (positive or negative)
.IP \(bu 2
11 bits for the \f[I]exponent\f[R] (\-1022 to 1023)
.IP \(bu 2
52 bits for the \f[I]mantissa\f[R] (representing a number between 0 and
1)
.PP
The mantissa (also called \f[I]significand\f[R]) is the part of the
number representing the actual value (significant digits).
The exponent is the power of 2 that the mantissa should be multiplied
by.
Thinking about it as scientific notation:
.PP
\ Number=(−1)sign⋅(1+mantissa)⋅2exponent = ({\-1})\(ha{} (1 + ) \(ha{} 
.PP
The mantissa is stored with 52 bits, interpreted as digits after
\f[CR]1.\&...\f[R] in a binary fractional number.
Therefore, the mantissa\(cqs precision is 2\(ha\-52 (obtainable via
\f[CR]Number.EPSILON\f[R]), or about 15 to 17 decimal places; arithmetic
above that level of precision is subject to \c
.UR https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding
rounding
.UE \c
\&.
.PP
The largest value a number can hold is 2\(ha1023 × (2 \- 2\(ha\-52)
(with the exponent being 1023 and the mantissa being 0.1111\&...
in base 2), which is obtainable via \f[CR]Number.MAX_VALUE\f[R].
Values higher than that are replaced with the special number constant
\f[CR]Infinity\f[R].
.PP
Integers can only be represented without loss of precision in the range
\-2\(ha53 + 1 to 2\(ha53 \- 1, inclusive (obtainable via
\f[CR]Number.MIN_SAFE_INTEGER\f[R] and
\f[CR]Number.MAX_SAFE_INTEGER\f[R]), because the mantissa can only hold
53 bits (including the leading 1).
.PP
More details on this are described in the \c
.UR https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-ecmascript-language-types-number-type
ECMAScript standard
.UE \c
\&.
.SS Number coercion
Many built\-in operations that expect numbers first coerce their
arguments to numbers (which is largely why \f[CR]Number\f[R] objects
behave similarly to number primitives).
\c
.UR https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumber
The operation
.UE \c
\ can be summarized as follows:
.IP \(bu 2
Numbers are returned as\-is.
.IP \(bu 2
\f[CR]undefined\f[R] turns into \f[CR]NaN\f[R].
.IP \(bu 2
\f[CR]null\f[R] turns into \f[CR]0\f[R].
.IP \(bu 2
\f[CR]true\f[R] turns into \f[CR]1\f[R]; \f[CR]false\f[R] turns into
\f[CR]0\f[R].
.IP \(bu 2
Strings are converted by parsing them as if they contain a number
literal.
Parsing failure results in \f[CR]NaN\f[R].
There are some minor differences compared to an actual number literal:
.RS 2
.IP \(bu 2
Leading and trailing whitespace/line terminators are ignored.
.IP \(bu 2
A leading \f[CR]0\f[R] digit does not cause the number to become an
octal literal (or get rejected in strict mode).
.IP \(bu 2
\f[CR]+\f[R] and \f[CR]\-\f[R] are allowed at the start of the string to
indicate its sign.
(In actual code, they \(lqlook like\(rq part of the literal, but are
actually separate unary operators.)
However, the sign can only appear once, and must not be followed by
whitespace.
.IP \(bu 2
\f[CR]Infinity\f[R] and \f[CR]\-Infinity\f[R] are recognized as
literals.
In actual code, they are global variables.
.IP \(bu 2
Empty or whitespace\-only strings are converted to \f[CR]0\f[R].
.IP \(bu 2
Numeric separators are not allowed.
.RE
.IP \(bu 2
BigInts throw a \f[CR]TypeError\f[R] to prevent unintended implicit
coercion causing loss of precision.
.IP \(bu 2
Symbols throw a \f[CR]TypeError\f[R].
.IP \(bu 2
Objects are first converted to a primitive by calling their
\f[CR][Symbol.toPrimitive]()\f[R] (with \f[CR]\(dqnumber\(dq\f[R] as
hint), \f[CR]valueOf()\f[R], and \f[CR]toString()\f[R] methods, in that
order.
The resulting primitive is then converted to a number.
.PP
There are two ways to achieve nearly the same effect in JavaScript.
.IP \(bu 2
Unary plus: \f[CR]+x\f[R] does exactly the number coercion steps
explained above to convert \f[CR]x\f[R].
.IP \(bu 2
The \f[CR]Number()\f[R] function: \f[CR]Number(x)\f[R] uses the same
algorithm to convert \f[CR]x\f[R], except that BigInts don\(cqt throw a
\f[CR]TypeError\f[R], but return their number value, with possible loss
of precision.
.PP
\f[CR]Number.parseFloat()\f[R] and \f[CR]Number.parseInt()\f[R] are
similar to \f[CR]Number()\f[R] but only convert strings, and have
slightly different parsing rules.
For example, \f[CR]parseInt()\f[R] doesn\(cqt recognize the decimal
point, and \f[CR]parseFloat()\f[R] doesn\(cqt recognize the
\f[CR]0x\f[R] prefix.
.SS Integer conversion
Some operations expect integers, most notably those that work with
array/string indices, date/time components, and number radixes.
After performing the number coercion steps above, the result is
truncated to an integer (by discarding the fractional part).
If the number is ±Infinity, it\(cqs returned as\-is.
If the number is \f[CR]NaN\f[R] or \f[CR]\-0\f[R], it\(cqs returned as
\f[CR]0\f[R].
The result is therefore always an integer (which is not \f[CR]\-0\f[R])
or ±Infinity.
.PP
Notably, when converted to integers, both \f[CR]undefined\f[R] and
\f[CR]null\f[R] become \f[CR]0\f[R], because \f[CR]undefined\f[R] is
converted to \f[CR]NaN\f[R], which also becomes \f[CR]0\f[R].
.SS Fixed\-width number conversion
JavaScript has some lower\-level functions that deal with the binary
encoding of integer numbers, most notably bitwise operators and
\f[CR]TypedArray\f[R] objects.
Bitwise operators always convert the operands to 32\-bit integers.
In these cases, after converting the value to a number, the number is
then normalized to the given width by first truncating the fractional
part and then taking the lowest bits in the integer\(cqs two\(cqs
complement encoding.
.IP
.EX
\f[B]new\f[R] Int32Array([1.1, 1.9, \-1.1, \-1.9]); \f[I]// Int32Array(4) [ 1, 1, \-1, \-1 ]\f[R]

\f[B]new\f[R] Int8Array([257, \-257]); \f[I]// Int8Array(2) [ 1, \-1 ]\f[R]
\f[I]// 257 = 0001 0000 0001\f[R]
\f[I]//     =      0000 0001 (mod 2\(ha8)\f[R]
\f[I]//     = 1\f[R]
\f[I]// \-257 = 1110 1111 1111\f[R]
\f[I]//      =      1111 1111 (mod 2\(ha8)\f[R]
\f[I]//      = \-1 (as signed integer)\f[R]

\f[B]new\f[R] Uint8Array([257, \-257]); \f[I]// Uint8Array(2) [ 1, 255 ]\f[R]
\f[I]// \-257 = 1110 1111 1111\f[R]
\f[I]//      =      1111 1111 (mod 2\(ha8)\f[R]
\f[I]//      = 255 (as unsigned integer)\f[R]
.EE
.SH CONSTRUCTOR
.TP
\f[B]Number()\f[R]
Creates \f[CR]Number\f[R] objects.
When called as a function, it returns primitive values of type Number.
.SH STATIC PROPERTIES
.TP
\f[B]Number.EPSILON\f[R]
The smallest interval between two representable numbers.
.TP
\f[B]Number.MAX_SAFE_INTEGER\f[R]
The maximum safe integer in JavaScript (2\(ha53 \- 1).
.TP
\f[B]Number.MAX_VALUE\f[R]
The largest positive representable number.
.TP
\f[B]Number.MIN_SAFE_INTEGER\f[R]
The minimum safe integer in JavaScript (\-(2\(ha53 \- 1)).
.TP
\f[B]Number.MIN_VALUE\f[R]
The smallest positive representable number\(emthat is, the positive
number closest to zero (without actually being zero).
.TP
\f[B]Number.NaN\f[R]
Special \(lq\f[B]N\f[R]ot \f[B]a\f[R] \f[B]N\f[R]umber\(rq value.
.TP
\f[B]Number.NEGATIVE_INFINITY\f[R]
Special value representing negative infinity.
Returned on overflow.
.TP
\f[B]Number.POSITIVE_INFINITY\f[R]
Special value representing infinity.
Returned on overflow.
.SH STATIC METHODS
.TP
\f[B]Number.isFinite()\f[R]
Determine whether the passed value is a finite number.
.TP
\f[B]Number.isInteger()\f[R]
Determine whether the passed value is an integer.
.TP
\f[B]Number.isNaN()\f[R]
Determine whether the passed value is \f[CR]NaN\f[R].
.TP
\f[B]Number.isSafeInteger()\f[R]
Determine whether the passed value is a safe integer (number between
\-(2\(ha53 \- 1) and 2\(ha53 \- 1).
.TP
\f[B]Number.parseFloat()\f[R]
This is the same as the global \f[CR]parseFloat()\f[R] function.
.TP
\f[B]Number.parseInt()\f[R]
This is the same as the global \f[CR]parseInt()\f[R] function.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Number.prototype\f[R] and shared
by all \f[CR]Number\f[R] instances.
.TP
\f[B]Number.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Number\f[R] instances, the initial value is the
\f[CR]Number\f[R] constructor.
.SH INSTANCE METHODS
.TP
\f[B]Number.prototype.toExponential()\f[R]
Returns a string representing the number in exponential notation.
.TP
\f[B]Number.prototype.toFixed()\f[R]
Returns a string representing the number in fixed\-point notation.
.TP
\f[B]Number.prototype.toLocaleString()\f[R]
Returns a string with a language sensitive representation of this
number.
Overrides the \f[CR]Object.prototype.toLocaleString()\f[R] method.
.TP
\f[B]Number.prototype.toPrecision()\f[R]
Returns a string representing the number to a specified precision in
fixed\-point or exponential notation.
.TP
\f[B]Number.prototype.toString()\f[R]
Returns a string representing the specified object in the specified
\f[I]radix\f[R] (\(lqbase\(rq).
Overrides the \f[CR]Object.prototype.toString()\f[R] method.
.TP
\f[B]Number.prototype.valueOf()\f[R]
Returns the primitive value of the specified object.
Overrides the \f[CR]Object.prototype.valueOf()\f[R] method.
.SH EXAMPLES
.SS Using the Number object to assign values to numeric variables
The following example uses the \f[CR]Number\f[R] object\(cqs properties
to assign values to several numeric variables:
.IP
.EX
\f[B]const\f[R] biggestNum = Number.MAX_VALUE;
\f[B]const\f[R] smallestNum = Number.MIN_VALUE;
\f[B]const\f[R] infiniteNum = Number.POSITIVE_INFINITY;
\f[B]const\f[R] negInfiniteNum = Number.NEGATIVE_INFINITY;
\f[B]const\f[R] notANum = Number.NaN;
.EE
.SS Integer range for Number
The following example shows the minimum and maximum integer values that
can be represented as \f[CR]Number\f[R] object.
.IP
.EX
\f[B]const\f[R] biggestInt = Number.MAX_SAFE_INTEGER; \f[I]// (2**53 \- 1) => 9007199254740991\f[R]
\f[B]const\f[R] smallestInt = Number.MIN_SAFE_INTEGER; \f[I]// \-(2**53 \- 1) => \-9007199254740991\f[R]
.EE
.PP
When parsing data that has been serialized to JSON, integer values
falling outside of this range can be expected to become corrupted when
JSON parser coerces them to \f[CR]Number\f[R] type.
.PP
A possible workaround is to use \f[CR]String\f[R] instead.
.PP
Larger numbers can be represented using the \f[CR]BigInt\f[R] type.
.SS Using Number() to convert a Date object
The following example converts the \f[CR]Date\f[R] object to a numerical
value using \f[CR]Number\f[R] as a function:
.IP
.EX
\f[B]const\f[R] d = \f[B]new\f[R] Date(\(dq1995\-12\-17T03:24:00\(dq);
console.log(Number(d));
.EE
.PP
This logs \f[CR]819199440000\f[R].
.SS Convert numeric strings and null to numbers
.IP
.EX
Number(\(dq123\(dq); \f[I]// 123\f[R]
Number(\(dq123\(dq) === 123; \f[I]// true\f[R]
Number(\(dq12.3\(dq); \f[I]// 12.3\f[R]
Number(\(dq12.00\(dq); \f[I]// 12\f[R]
Number(\(dq123e\-1\(dq); \f[I]// 12.3\f[R]
Number(\(dq\(dq); \f[I]// 0\f[R]
Number(\f[B]null\f[R]); \f[I]// 0\f[R]
Number(\(dq0x11\(dq); \f[I]// 17\f[R]
Number(\(dq0b11\(dq); \f[I]// 3\f[R]
Number(\(dq0o11\(dq); \f[I]// 9\f[R]
Number(\(dqfoo\(dq); \f[I]// NaN\f[R]
Number(\(dq100a\(dq); \f[I]// NaN\f[R]
Number(\(dq\-Infinity\(dq); \f[I]// \-Infinity\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-number
Polyfill of modern \f[CR]Number\f[R] behavior (with support binary and
octal literals) in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]NaN\f[R]
.IP \(bu 2
Arithmetic operators
.IP \(bu 2
\f[CR]Math\f[R]
.IP \(bu 2
\f[CR]BigInt\f[R]
