'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MAP" "3JS" "April 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Map \- Map
.SH SYNOPSIS
The \f[B]\f[CB]Map\f[B]\f[R] object holds key\-value pairs and remembers
the original insertion order of the keys.
Any value (both objects and primitive values) may be used as either a
key or a value.
.IP
.EX
\f[B]const\f[R] map1 = \f[B]new\f[R] Map();

map1.set(\(dqa\(dq, 1);
map1.set(\(dqb\(dq, 2);
map1.set(\(dqc\(dq, 3);

console.log(map1.get(\(dqa\(dq));
\f[I]// Expected output: 1\f[R]

map1.set(\(dqa\(dq, 97);

console.log(map1.get(\(dqa\(dq));
\f[I]// Expected output: 97\f[R]

console.log(map1.size);
\f[I]// Expected output: 3\f[R]

map1.delete(\(dqb\(dq);

console.log(map1.size);
\f[I]// Expected output: 2\f[R]
.EE
.SH DESCRIPTION
\f[CR]Map\f[R] objects are collections of key\-value pairs.
A key in the \f[CR]Map\f[R] \f[B]may only occur once\f[R]; it is unique
in the \f[CR]Map\f[R]\(cqs collection.
A \f[CR]Map\f[R] object is iterated by key\-value pairs \(em a
\f[CR]for...of\f[R] loop returns a 2\-member array of
\f[CR][key, value]\f[R] for each iteration.
Iteration happens in \f[I]insertion order\f[R], which corresponds to the
order in which each key\-value pair was first inserted into the map by
the \f[CR]set()\f[R] method (that is, there wasn\(cqt a key with the
same value already in the map when \f[CR]set()\f[R] was called).
.PP
The specification requires maps to be implemented \(lqthat, on average,
provide access times that are sublinear on the number of elements in the
collection\(rq.
Therefore, it could be represented internally as a hash table (with O(1)
lookup), a search tree (with O(log(N)) lookup), or any other data
structure, as long as the complexity is better than O(N).
.SS Key equality
Value equality is based on the SameValueZero algorithm.
(It used to use SameValue, which treated \f[CR]0\f[R] and \f[CR]\-0\f[R]
as different.
Check browser compatibility.)
This means \f[CR]NaN\f[R] is considered the same as \f[CR]NaN\f[R] (even
though \f[CR]NaN !== NaN\f[R]) and all other values are considered equal
according to the semantics of the \f[CR]===\f[R] operator.
.SS Objects vs.\ Maps
\f[CR]Object\f[R] is similar to \f[CR]Map\f[R]\(emboth let you set keys
to values, retrieve those values, delete keys, and detect whether
something is stored at a key.
For this reason (and because there were no built\-in alternatives),
\f[CR]Object\f[R] has been used as \f[CR]Map\f[R] historically.
.PP
However, there are important differences that make \f[CR]Map\f[R]
preferable in some cases:
.PP
.TS
tab(@);
lw(23.3n) lw(23.3n) lw(23.3n).
T{
T}@T{
Map
T}@T{
Object
T}
_
T{
Accidental Keys
T}@T{
A \f[CR]Map\f[R] does not contain any keys by default.
It only contains what is explicitly put into it.
T}@T{
.PP
An \f[CR]Object\f[R] has a prototype, so it contains default keys that
could collide with your own keys if you\(aqre not careful.
.PP
\f[B]Note:\f[R] This can be bypassed by using
\(gaObject.create(null)\(ga, but this is seldom done.
T}
T{
Security
T}@T{
A \f[CR]Map\f[R] is safe to use with user\-provided keys and values.
T}@T{
.PP
Setting user\-provided key\-value pairs on an \f[CR]Object\f[R] may
allow an attacker to override the object\(aqs prototype, which can lead
to \c
.UR https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md
object injection attacks
.UE \c
\ .
Like the accidental keys issue, this can also be mitigated by using a
\f[CR]null\f[R]\-prototype object.
T}
T{
Key Types
T}@T{
A \f[CR]Map\f[R]\(aqs keys can be any value (including functions,
objects, or any primitive).
T}@T{
The keys of an \f[CR]Object\f[R] must be either a \(gaString\(ga or a
\(gaSymbol\(ga.
T}
T{
Key Order
T}@T{
.PP
The keys in \f[CR]Map\f[R] are ordered in a straightforward way: A
\f[CR]Map\f[R] object iterates entries, keys, and values in the order of
entry insertion.
T}@T{
.PP
Although the keys of an ordinary \f[CR]Object\f[R] are ordered now, this
was not always the case, and the order is complex.
As a result, it\(aqs best not to rely on property order.
.PP
The order was first defined for own properties only in ECMAScript 2015;
ECMAScript 2020 defines order for inherited properties as well.
But note that no single mechanism iterates \f[B]all\f[R] of an
object\(aqs properties; the various mechanisms each include different
subsets of properties.
(\(gafor\-in\(ga includes only enumerable string\-keyed properties;
\(gaObject.keys\(ga includes only own, enumerable, string\-keyed
properties; \(gaObject.getOwnPropertyNames\(ga includes own,
string\-keyed properties even if non\-enumerable;
\(gaObject.getOwnPropertySymbols\(ga does the same for just
\f[CR]Symbol\f[R]\-keyed properties, etc.)
T}
T{
.PP
Size
T}@T{
The number of items in a \f[CR]Map\f[R] is easily retrieved from its
\(gasize\(ga property.
T}@T{
Determining the number of items in an \f[CR]Object\f[R] is more
roundabout and less efficient.
A common way to do it is through the \(galength\(ga of the array
returned from \(gaObject.keys()\(ga.
T}
T{
Iteration
T}@T{
A \f[CR]Map\f[R] is an iterable, so it can be directly iterated.
T}@T{
.PP
\f[CR]Object\f[R] does not implement an iteration protocol, and so
objects are not directly iterable using the JavaScript for...of
statement (by default).
.PP
\f[B]Note:\f[R]
.IP \(bu 2
An object can implement the iteration protocol, or you can get an
iterable for an object using \f[CR]Object.keys\f[R] or
\f[CR]Object.entries\f[R].
.IP \(bu 2
The for...in statement allows you to iterate over the
\f[I]enumerable\f[R] properties of an object.
T}
T{
Performance
T}@T{
.PP
Performs better in scenarios involving frequent additions and removals
of key\-value pairs.
T}@T{
.PP
Not optimized for frequent additions and removals of key\-value pairs.
T}
T{
Serialization and parsing
T}@T{
.PP
No native support for serialization or parsing.
.PP
(But you can build your own serialization and parsing support for
\f[CR]Map\f[R] by using \(gaJSON.stringify()\(ga with its
\f[I]replacer\f[R] argument, and by using \(gaJSON.parse()\(ga with its
\f[I]reviver\f[R] argument.
See the Stack Overflow question \c
.UR https://stackoverflow.com/q/29085197/
How do you JSON.stringify an ES6 Map?
.UE \c
).
T}@T{
.PP
Native support for serialization from \(gaObject\(ga to JSON, using
\(gaJSON.stringify()\(ga.
.PP
Native support for parsing from JSON to \(gaObject\(ga, using
\(gaJSON.parse()\(ga.
T}
.TE
.SS Setting object properties
Setting Object properties works for Map objects as well, and can cause
considerable confusion.
.PP
Therefore, this appears to work in a way:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] wrongMap = \f[B]new\f[R] Map();
wrongMap[\(dqbla\(dq] = \(dqblaa\(dq;
wrongMap[\(dqbla2\(dq] = \(dqblaaa2\(dq;

console.log(wrongMap); \f[I]// Map { bla: \(aqblaa\(aq, bla2: \(aqblaaa2\(aq }\f[R]
.EE
.PP
But that way of setting a property does not interact with the Map data
structure.
It uses the feature of the generic object.
The value of `bla' is not stored in the Map for queries.
Other operations on the data fail:
.PP
\f[B]Bad\f[R]
.IP
.EX
wrongMap.has(\(dqbla\(dq); \f[I]// false\f[R]
wrongMap.delete(\(dqbla\(dq); \f[I]// false\f[R]
console.log(wrongMap); \f[I]// Map { bla: \(aqblaa\(aq, bla2: \(aqblaaa2\(aq }\f[R]
.EE
.PP
The correct usage for storing data in the Map is through the
\f[CR]set(key, value)\f[R] method.
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] contacts = \f[B]new\f[R] Map();
contacts.set(\(dqJessie\(dq, { phone: \(dq213\-555\-1234\(dq, address: \(dq123 N 1st Ave\(dq });
contacts.has(\(dqJessie\(dq); \f[I]// true\f[R]
contacts.get(\(dqHilary\(dq); \f[I]// undefined\f[R]
contacts.set(\(dqHilary\(dq, { phone: \(dq617\-555\-4321\(dq, address: \(dq321 S 2nd St\(dq });
contacts.get(\(dqJessie\(dq); \f[I]// {phone: \(dq213\-555\-1234\(dq, address: \(dq123 N 1st Ave\(dq}\f[R]
contacts.delete(\(dqRaymond\(dq); \f[I]// false\f[R]
contacts.delete(\(dqJessie\(dq); \f[I]// true\f[R]
console.log(contacts.size); \f[I]// 1\f[R]
.EE
.SS Map\-like browser APIs
\f[B]Browser \f[CB]Map\f[B]\-like objects\f[R] (or \(lqmaplike
objects\(rq) are Web API interfaces that behave in many ways like a
\f[CR]Map\f[R].
.PP
Just like \f[CR]Map\f[R], entries can be iterated in the same order that
they were added to the object.
\f[CR]Map\f[R]\-like objects and \f[CR]Map\f[R] also have properties and
methods that share the same name and behavior.
However unlike \f[CR]Map\f[R] they only allow specific predefined types
for the keys and values of each entry.
.PP
The allowed types are set in the specification IDL definition.
For example, \f[CR]RTCStatsReport\f[R] is a \f[CR]Map\f[R]\-like object
that must use strings for keys and objects for values.
This is defined in the specification IDL below:
.IP
.EX
interface RTCStatsReport {
  readonly maplike<DOMString, object>;
};
.EE
.PP
\f[CR]Map\f[R]\-like objects are either read\-only or read\-writable
(see the \f[CR]readonly\f[R] keyword in the IDL above).
.IP \(bu 2
Read\-only \f[CR]Map\f[R]\-like objects have the property
\f[CR]size\f[R], and the methods: \f[CR]entries()\f[R],
\f[CR]forEach()\f[R], \f[CR]get()\f[R], \f[CR]has()\f[R],
\f[CR]keys()\f[R], \f[CR]values()\f[R], and
\f[CR]Symbol.iterator()\f[R].
.IP \(bu 2
Writeable \f[CR]Map\f[R]\-like objects additionally have the methods:
\f[CR]clear()\f[R], \f[CR]delete()\f[R], and \f[CR]set()\f[R].
.PP
The methods and properties have the same behavior as the equivalent
entities in \f[CR]Map\f[R], except for the restriction on the types of
the keys and values.
.PP
The following are examples of read\-only \f[CR]Map\f[R]\-like browser
objects:
.IP \(bu 2
\f[CR]AudioParamMap\f[R]
.IP \(bu 2
\f[CR]RTCStatsReport\f[R]
.IP \(bu 2
\f[CR]EventCounts\f[R]
.IP \(bu 2
\f[CR]KeyboardLayoutMap\f[R]
.IP \(bu 2
\f[CR]MIDIInputMap\f[R]
.IP \(bu 2
\f[CR]MIDIOutputMap\f[R]
.SH CONSTRUCTOR
.TP
\f[B]Map()\f[R]
Creates a new \f[CR]Map\f[R] object.
.SH STATIC PROPERTIES
.TP
\f[B]Map[Symbol.species]\f[R]
The constructor function that is used to create derived objects.
.SH STATIC METHODS
.TP
\f[B]Map.groupBy()\f[R]
Groups the elements of a given iterable using the values returned by a
provided callback function.
The final returned \f[CR]Map\f[R] uses the unique values from the test
function as keys, which can be used to get the array of elements in each
group.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Map.prototype\f[R] and shared by
all \f[CR]Map\f[R] instances.
.TP
\f[B]Map.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Map\f[R] instances, the initial value is the \f[CR]Map\f[R]
constructor.
.TP
\f[B]Map.prototype.size\f[R]
Returns the number of key/value pairs in the \f[CR]Map\f[R] object.
.TP
\f[B]Map.prototype[Symbol.toStringTag]\f[R]
The initial value of the \f[CR][Symbol.toStringTag]\f[R] property is the
string \f[CR]\(dqMap\(dq\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]Map.prototype.clear()\f[R]
Removes all key\-value pairs from the \f[CR]Map\f[R] object.
.TP
\f[B]Map.prototype.delete()\f[R]
Returns \f[CR]true\f[R] if an element in the \f[CR]Map\f[R] object
existed and has been removed, or \f[CR]false\f[R] if the element does
not exist.
\f[CR]map.has(key)\f[R] will return \f[CR]false\f[R] afterwards.
.TP
\f[B]Map.prototype.entries()\f[R]
Returns a new Iterator object that contains a two\-member array of
\f[CR][key, value]\f[R] for each element in the \f[CR]Map\f[R] object in
insertion order.
.TP
\f[B]Map.prototype.forEach()\f[R]
Calls \f[CR]callbackFn\f[R] once for each key\-value pair present in the
\f[CR]Map\f[R] object, in insertion order.
If a \f[CR]thisArg\f[R] parameter is provided to \f[CR]forEach\f[R], it
will be used as the \f[CR]this\f[R] value for each callback.
.TP
\f[B]Map.prototype.get()\f[R]
Returns the value associated to the passed key, or \f[CR]undefined\f[R]
if there is none.
.TP
\f[B]Map.prototype.has()\f[R]
Returns a boolean indicating whether a value has been associated with
the passed key in the \f[CR]Map\f[R] object or not.
.TP
\f[B]Map.prototype.keys()\f[R]
Returns a new Iterator object that contains the keys for each element in
the \f[CR]Map\f[R] object in insertion order.
.TP
\f[B]Map.prototype.set()\f[R]
Sets the value for the passed key in the \f[CR]Map\f[R] object.
Returns the \f[CR]Map\f[R] object.
.TP
\f[B]Map.prototype.values()\f[R]
Returns a new Iterator object that contains the values for each element
in the \f[CR]Map\f[R] object in insertion order.
.TP
\f[B]Map.prototype[Symbol.iterator]()\f[R]
Returns a new Iterator object that contains a two\-member array of
\f[CR][key, value]\f[R] for each element in the \f[CR]Map\f[R] object in
insertion order.
.SH EXAMPLES
.SS Using the Map object
.IP
.EX
\f[B]const\f[R] myMap = \f[B]new\f[R] Map();

\f[B]const\f[R] keyString = \(dqa string\(dq;
\f[B]const\f[R] keyObj = {};
\f[B]const\f[R] keyFunc = \f[B]function\f[R] () {};

\f[I]// setting the values\f[R]
myMap.set(keyString, \(dqvalue associated with \(aqa string\(aq\(dq);
myMap.set(keyObj, \(dqvalue associated with keyObj\(dq);
myMap.set(keyFunc, \(dqvalue associated with keyFunc\(dq);

console.log(myMap.size); \f[I]// 3\f[R]

\f[I]// getting the values\f[R]
console.log(myMap.get(keyString)); \f[I]// \(dqvalue associated with \(aqa string\(aq\(dq\f[R]
console.log(myMap.get(keyObj)); \f[I]// \(dqvalue associated with keyObj\(dq\f[R]
console.log(myMap.get(keyFunc)); \f[I]// \(dqvalue associated with keyFunc\(dq\f[R]

console.log(myMap.get(\(dqa string\(dq)); \f[I]// \(dqvalue associated with \(aqa string\(aq\(dq, because keyString === \(aqa string\(aq\f[R]
console.log(myMap.get({})); \f[I]// undefined, because keyObj !== {}\f[R]
console.log(myMap.get(\f[B]function\f[R] () {})); \f[I]// undefined, because keyFunc !== function () {}\f[R]
.EE
.SS Using NaN as Map keys
\f[CR]NaN\f[R] can also be used as a key.
Even though every \f[CR]NaN\f[R] is not equal to itself
(\f[CR]NaN !== NaN\f[R] is true), the following example works because
\f[CR]NaN\f[R]s are indistinguishable from each other:
.IP
.EX
\f[B]const\f[R] myMap = \f[B]new\f[R] Map();
myMap.set(\f[B]NaN\f[R], \(dqnot a number\(dq);

myMap.get(\f[B]NaN\f[R]);
\f[I]// \(dqnot a number\(dq\f[R]

\f[B]const\f[R] otherNaN = Number(\(dqfoo\(dq);
myMap.get(otherNaN);
\f[I]// \(dqnot a number\(dq\f[R]
.EE
.SS Iterating Map with for\&...of
Maps can be iterated using a \f[CR]for...of\f[R] loop:
.IP
.EX
\f[B]const\f[R] myMap = \f[B]new\f[R] Map();
myMap.set(0, \(dqzero\(dq);
myMap.set(1, \(dqone\(dq);

\f[B]for\f[R] (\f[B]const\f[R] [key, value] \f[B]of\f[R] myMap) {
  console.log(\(ga${key} = ${value}\(ga);
}
\f[I]// 0 = zero\f[R]
\f[I]// 1 = one\f[R]

\f[B]for\f[R] (\f[B]const\f[R] key \f[B]of\f[R] myMap.keys()) {
  console.log(key);
}
\f[I]// 0\f[R]
\f[I]// 1\f[R]

\f[B]for\f[R] (\f[B]const\f[R] value \f[B]of\f[R] myMap.values()) {
  console.log(value);
}
\f[I]// zero\f[R]
\f[I]// one\f[R]

\f[B]for\f[R] (\f[B]const\f[R] [key, value] \f[B]of\f[R] myMap.entries()) {
  console.log(\(ga${key} = ${value}\(ga);
}
\f[I]// 0 = zero\f[R]
\f[I]// 1 = one\f[R]
.EE
.SS Iterating Map with forEach()
Maps can be iterated using the \f[CR]forEach()\f[R] method:
.IP
.EX
myMap.forEach((value, key) \f[B]=>\f[R] {
  console.log(\(ga${key} = ${value}\(ga);
});
\f[I]// 0 = zero\f[R]
\f[I]// 1 = one\f[R]
.EE
.SS Relation with Array objects
.IP
.EX
\f[B]const\f[R] kvArray = [
  [\(dqkey1\(dq, \(dqvalue1\(dq],
  [\(dqkey2\(dq, \(dqvalue2\(dq],
];

\f[I]// Use the regular Map constructor to transform a 2D key\-value Array into a map\f[R]
\f[B]const\f[R] myMap = \f[B]new\f[R] Map(kvArray);

console.log(myMap.get(\(dqkey1\(dq)); \f[I]// \(dqvalue1\(dq\f[R]

\f[I]// Use Array.from() to transform a map into a 2D key\-value Array\f[R]
console.log(Array.from(myMap)); \f[I]// Will show you exactly the same Array as kvArray\f[R]

\f[I]// A succinct way to do the same, using the spread syntax\f[R]
console.log([...myMap]);

\f[I]// Or use the keys() or values() iterators, and convert them to an array\f[R]
console.log(Array.from(myMap.keys())); \f[I]// [\(dqkey1\(dq, \(dqkey2\(dq]\f[R]
.EE
.SS Cloning and merging Maps
Just like \f[CR]Array\f[R]s, \f[CR]Map\f[R]s can be cloned:
.IP
.EX
\f[B]const\f[R] original = \f[B]new\f[R] Map([[1, \(dqone\(dq]]);

\f[B]const\f[R] clone = \f[B]new\f[R] Map(original);

console.log(clone.get(1)); \f[I]// one\f[R]
console.log(original === clone); \f[I]// false (useful for shallow comparison)\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] Keep in mind that \f[I]the data itself\f[R] is not
cloned.
In other words, it is only a shallow copy of the \f[CR]Map\f[R].
.RE
.PP
Maps can be merged, maintaining key uniqueness:
.IP
.EX
\f[B]const\f[R] first = \f[B]new\f[R] Map([
  [1, \(dqone\(dq],
  [2, \(dqtwo\(dq],
  [3, \(dqthree\(dq],
]);

\f[B]const\f[R] second = \f[B]new\f[R] Map([
  [1, \(dquno\(dq],
  [2, \(dqdos\(dq],
]);

\f[I]// Merge two maps. The last repeated key wins.\f[R]
\f[I]// Spread syntax essentially converts a Map to an Array\f[R]
\f[B]const\f[R] merged = \f[B]new\f[R] Map([...first, ...second]);

console.log(merged.get(1)); \f[I]// uno\f[R]
console.log(merged.get(2)); \f[I]// dos\f[R]
console.log(merged.get(3)); \f[I]// three\f[R]
.EE
.PP
Maps can be merged with Arrays, too:
.IP
.EX
\f[B]const\f[R] first = \f[B]new\f[R] Map([
  [1, \(dqone\(dq],
  [2, \(dqtwo\(dq],
  [3, \(dqthree\(dq],
]);

\f[B]const\f[R] second = \f[B]new\f[R] Map([
  [1, \(dquno\(dq],
  [2, \(dqdos\(dq],
]);

\f[I]// Merge maps with an array. The last repeated key wins.\f[R]
\f[B]const\f[R] merged = \f[B]new\f[R] Map([...first, ...second, [1, \(dqun\(dq]]);

console.log(merged.get(1)); \f[I]// un\f[R]
console.log(merged.get(2)); \f[I]// dos\f[R]
console.log(merged.get(3)); \f[I]// three\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#map
Polyfill for \f[CR]Map\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/es-map
es\-shims polyfill of \f[CR]Map\f[R]
.UE \c
.IP \(bu 2
\f[CR]Set\f[R]
.IP \(bu 2
\f[CR]WeakMap\f[R]
.IP \(bu 2
\f[CR]WeakSet\f[R]
