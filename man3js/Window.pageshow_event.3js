.\" Automatically generated by Pandoc 3.4
.\"
.TH "Window.pageshow_event" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.pageshow_event \- Window: pageshow event
.SH SYNOPSIS
The \f[B]\f[CB]pageshow\f[B]\f[R] event is sent to a \f[CR]Window\f[R]
when the browser displays the window\[cq]s document due to navigation.
.PP
This includes:
.IP \[bu] 2
Initially loading the page
.IP \[bu] 2
Navigating to the page from another page in the same window or tab
.IP \[bu] 2
Restoring a frozen page on mobile OSes
.IP \[bu] 2
Returning to the page using the browser\[cq]s forward or back buttons
.RS
.PP
\f[B]Note:\f[R] During the initial page load, the \f[CR]pageshow\f[R]
event fires \f[I]after\f[R] the \f[CR]load\f[R] event.
.RE
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]pageshow\[dq], (event) \f[B]=>\f[R] {});
onpageshow = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]PageTransitionEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
.TP
\f[B]PageTransitionEvent.persisted\f[R] \f[I](read\-only)\f[R]
Indicates if the document is loading from a cache.
.SH EVENT HANDLER ALIASES
In addition to the \f[CR]Window\f[R] interface, the event handler
property \f[CR]onpageshow\f[R] is also available on the following
targets:
.IP \[bu] 2
\f[CR]HTMLBodyElement\f[R]
.IP \[bu] 2
\f[CR]HTMLFrameSetElement\f[R]
.IP \[bu] 2
\f[CR]SVGSVGElement\f[R]
.SH EXAMPLES
This example sets up event handlers for events listed in the array
\f[CR]events\f[R].
The handler, \f[CR]eventLogger()\f[R], logs the type of event that
occurred to the console, and includes the value of the
\f[CR]persisted\f[R] flag on \f[CR]pageshow\f[R] and \f[CR]pagehide\f[R]
events.
.SS JavaScript
.IP
.EX
\f[B]const\f[R] events = [\[dq]pagehide\[dq], \[dq]pageshow\[dq], \[dq]unload\[dq], \[dq]load\[dq]];

\f[B]const\f[R] eventLogger = (event) \f[B]=>\f[R] {
  \f[B]switch\f[R] (event.type) {
    \f[B]case\f[R] \[dq]pagehide\[dq]:
    \f[B]case\f[R] \[dq]pageshow\[dq]: {
      \f[B]let\f[R] isPersisted = event.persisted ? \[dq]persisted\[dq] : \[dq]not persisted\[dq];
      console.log(\[ga]Event: ${event.type} \- ${isPersisted}\[ga]);
      \f[B]break\f[R];
    }
    \f[B]default\f[R]:
      console.log(\[ga]Event: ${event.type}\[ga]);
      \f[B]break\f[R];
  }
};

events.forEach((eventName) \f[B]=>\f[R] window.addEventListener(eventName, eventLogger));
.EE
.SS HTML
.IP
.EX
<\f[B]p\f[R]>
  Open the console and watch the output as you navigate to and from this page.
  Try loading new pages into this tab, then navigating forward and backward
  through history, noting the events\[aq] output to the log.
</\f[B]p\f[R]>
.EE
.SS Results
.SH SEE ALSO
.IP \[bu] 2
\f[CR]pagehide\f[R]
