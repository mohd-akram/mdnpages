.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MediaRecorder.dataavailable_event" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaRecorder.dataavailable_event \- MediaRecorder: dataavailable event
.SH SYNOPSIS
The \f[B]\f[CB]dataavailable\f[B]\f[R] event of the
\f[CR]MediaRecorder\f[R] interface is fired when the MediaRecorder
delivers media data to your application for its use.
The data is provided in a \f[CR]Blob\f[R] object that contains the data.
This occurs in four situations:
.IP \[bu] 2
When the media stream ends, any media data not already delivered to your
\f[CR]ondataavailable\f[R] handler is passed in a single
\f[CR]Blob\f[R].
.IP \[bu] 2
When \f[CR]MediaRecorder.stop()\f[R] is called, all media data which has
been captured since recording began or the last time a
\f[CR]dataavailable\f[R] event occurred is delivered in a
\f[CR]Blob\f[R]; after this, capturing ends.
.IP \[bu] 2
When \f[CR]MediaRecorder.requestData()\f[R] is called, all media data
which has been captured since recording began or the last time a
\f[CR]dataavailable\f[R] event occurred is delivered; then a new
\f[CR]Blob\f[R] is created and media capture continues into that blob.
.IP \[bu] 2
If a \f[CR]timeslice\f[R] property was passed into the
\f[CR]MediaRecorder.start()\f[R] method that started media capture, a
\f[CR]dataavailable\f[R] event is fired every \f[CR]timeslice\f[R]
milliseconds.
That means that each blob will have a specific time duration (except the
last blob, which might be shorter, since it would be whatever is left
over since the last event).
So if the method call looked like this \[em]
\f[CR]recorder.start(1000);\f[R] \[em] the \f[CR]dataavailable\f[R]
event would fire after each second of media capture, and our event
handler would be called every second with a blob of media data
that\[cq]s one second long.
You can use \f[CR]timeslice\f[R] alongside
\f[CR]MediaRecorder.stop()\f[R] and
\f[CR]MediaRecorder.requestData()\f[R] to produce multiple same\-length
blobs plus other shorter blobs as well.
.RS
.PP
\f[B]Note:\f[R] Like other time values in web APIs, \f[CR]timeslice\f[R]
is not exact and the real intervals may be slightly delayed due to other
pending tasks.
Therefore, don\[cq]t rely on \f[CR]timeslice\f[R] and the number of
chunks received to calculate the time elapsed, because errors may
accumulate.
Instead, keep a separate timer using \f[CR]Event.timeStamp\f[R] or
similar, that records the total time elapsed since starting.
.RE
.PP
The \f[CR]Blob\f[R] containing the media data is available in the
\f[CR]dataavailable\f[R] event\[cq]s \f[CR]data\f[R] property.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]dataavailable\[dq], (event) \f[B]=>\f[R] {});

ondataavailable = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]BlobEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EXAMPLE
.IP
.EX
\f[B]const\f[R] chunks = [];

mediaRecorder.onstop = (e) \f[B]=>\f[R] {
  console.log(\[dq]data available after MediaRecorder.stop() called.\[dq]);

  \f[B]const\f[R] audio = document.createElement(\[dq]audio\[dq]);
  audio.controls = \f[B]true\f[R];
  \f[B]const\f[R] blob = \f[B]new\f[R] Blob(chunks, { type: mediaRecorder.mimeType });
  \f[B]const\f[R] audioURL = window.URL.createObjectURL(blob);
  audio.src = audioURL;
  console.log(\[dq]recorder stopped\[dq]);
};

mediaRecorder.ondataavailable = (e) \f[B]=>\f[R] {
  chunks.push(e.data);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the MediaStream Recording API
.IP \[bu] 2
\c
.UR https://mdn.github.io/dom-examples/media/web-dictaphone/
Web Dictaphone
.UE \c
: MediaRecorder + getUserMedia + Web Audio API visualization demo, by \c
.UR https://github.com/chrisdavidmills
Chris Mills
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone
source on GitHub
.UE \c
\&.)
.IP \[bu] 2
\c
.UR https://simpl.info/mediarecorder/
simpl.info MediaStream Recording demo
.UE \c
, by \c
.UR https://github.com/samdutton
Sam Dutton
.UE \c
\&.
.IP \[bu] 2
\f[CR]Navigator.getUserMedia()\f[R]
