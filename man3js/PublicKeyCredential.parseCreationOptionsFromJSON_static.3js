.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "PublicKeyCredential.parseCreationOptionsFromJSON_static" "JS" "August 27, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential.parseCreationOptionsFromJSON_static \-
PublicKeyCredential: parseCreationOptionsFromJSON() static method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]parseCreationOptionsFromJSON()\f[B]\f[R] static method of
the \f[CR]PublicKeyCredential\f[R] interface creates a
\f[CR]PublicKeyCredentialCreationOptions\f[R] object from a JSON
representation of its properties.
.PP
The method is a convenience function for converting credential options
information provided by a relying party server to the form that a web
app can use to create a credential.
.SH SYNTAX
.IP
.EX
PublicKeyCredential.parseCreationOptionsFromJSON(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R]
An object with the same structure as a
\f[CR]PublicKeyCredentialCreationOptions\f[R], but with
base64url\-encoded strings used in place of buffer properties.
.SS Return value
A \f[CR]PublicKeyCredentialCreationOptions\f[R] object.
.SS Exceptions
.TP
\f[B]EncodingError\f[R] \f[B]DOMException\f[R]
Thrown the \f[CR]options\f[R] object cannot be converted into a
\f[CR]PublicKeyCredentialCreationOptions\f[R] object.
.SH DESCRIPTION
The Web Authentication process for creating a key pair and registering a
user involves a relying party server sending the web app information
needed to create a credential, including details about the user
identity, the relying party, and a \[lq]challenge\[rq].
The web app passes this information to an authenticator to create the
credential, by calling \f[CR]navigator.credentials.create()\f[R] with a
\f[CR]PublicKeyCredentialCreationOptions\f[R] object as an argument.
.PP
The specification does not define how the information needed for
creating a credential is sent.
A convenient approach is for the server to encapsulate the information
in a JSON type representation of the
\f[CR]PublicKeyCredentialCreationOptions\f[R] object that mirrors its
structure but encodes buffer properties such as the \f[CR]challenge\f[R]
and \f[CR]user.id\f[R] as base64url strings.
This object can be serialized to a JSON string, sent to the web app and
deserialized, and then converted to a
\f[CR]PublicKeyCredentialCreationOptions\f[R] object using
\f[B]\f[CB]parseCreationOptionsFromJSON()\f[B]\f[R].
.SH EXAMPLES
When registering a new user, a relying party server will supply
information about the expected credentials to the web app.
The code below defines this information in the form described in the
\f[CR]options\f[R] parameter above (taken from the \[lq]getting an
AuthenticatorAttestationResponse\[rq] in
\f[CR]AuthenticatorResponse\f[R]):
.IP
.EX
\f[B]const\f[R] createCredentialOptionsJSON = {
  challenge:
    \[dq]21, 31, 105, \[dq] \f[I]/* 29 more random bytes generated by the server in this string */\f[R],
  rp: {
    name: \[dq]Example CORP\[dq],
    id: \[dq]login.example.com\[dq],
  },
  user: {
    id: \[dq]16\[dq],
    name: \[dq]canand\[at]example.com\[dq],
    displayName: \[dq]Carina Anand\[dq],
  },
  pubKeyCredParams: [
    {
      type: \[dq]public\-key\[dq],
      alg: \-7,
    },
  ],
};
.EE
.PP
Because this object only uses JSON data types, it can be serialized to
JSON using \f[CR]JSON.stringify()\f[R] and sent to the web app.
.IP
.EX
JSON.stringify(createCredentialOptionsJSON);
.EE
.PP
The web app can deserialize the JSON string back to a
\f[CR]createCredentialOptionsJSON\f[R] object (not shown).
The \f[B]\f[CB]parseCreationOptionsFromJSON()\f[B]\f[R] method is used
to convert that object to the form that can be used in
\f[CR]navigator.credentials.create()\f[R]:
.IP
.EX
\f[I]// Convert options to form used by create()\f[R]
\f[B]const\f[R] createCredentialOptions =
  PublicKeyCredential.parseCreationOptionsFromJSON(
    createCredentialOptionsJSON, \f[I]// JSON\-type representation\f[R]
  );

navigator.credentials
  .create({ createCredentialOptions })
  .then((newCredentialInfo) \f[B]=>\f[R] {
    \f[I]// Handle the new credential information here.\f[R]
  })
  .catch((err) \f[B]=>\f[R] {
    console.error(err);
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
Web Authentication API
.IP \[bu] 2
\f[CR]PublicKeyCredential.parseRequestOptionsFromJSON()\f[R]
.IP \[bu] 2
\f[CR]PublicKeyCredential.toJSON()\f[R]
