.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "FileSystemSyncAccessHandle.close" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemSyncAccessHandle.close \- FileSystemSyncAccessHandle: close()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is only available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]close()\f[B]\f[R] method of the
\f[CR]FileSystemSyncAccessHandle\f[R] interface closes an open
synchronous file handle, disabling any further operations on it and
releasing the exclusive lock previously put on the file associated with
the file handle.
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the spec, \f[CR]close()\f[R],
\f[CR]flush()\f[R], \f[CR]getSize()\f[R], and \f[CR]truncate()\f[R] were
wrongly specified as asynchronous methods, and older versions of some
browsers implement them in this way.
However, all current browsers that support these methods implement them
as synchronous methods.
.RE
.SH SYNTAX
.IP
.EX
close()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
None.
.SH EXAMPLES
The following asynchronous event handler function is contained inside a
Web Worker.
On receiving a message from the main thread it:
.IP \[bu] 2
Creates a synchronous file access handle.
.IP \[bu] 2
Gets the size of the file and creates an \f[CR]ArrayBuffer\f[R] to
contain it.
.IP \[bu] 2
Reads the file contents into the buffer.
.IP \[bu] 2
Encodes the message and writes it to the end of the file.
.IP \[bu] 2
Persists the changes to disk and closes the access handle.
.IP
.EX
onmessage = \f[B]async\f[R] (e) \f[B]=>\f[R] {
  \f[I]// Retrieve message sent to work from main script\f[R]
  \f[B]const\f[R] message = e.data;

  \f[I]// Get handle to draft file\f[R]
  \f[B]const\f[R] root = \f[B]await\f[R] navigator.storage.getDirectory();
  \f[B]const\f[R] draftHandle = \f[B]await\f[R] root.getFileHandle(\[dq]draft.txt\[dq], { create: \f[B]true\f[R] });
  \f[I]// Get sync access handle\f[R]
  \f[B]const\f[R] accessHandle = \f[B]await\f[R] draftHandle.createSyncAccessHandle();

  \f[I]// Get size of the file.\f[R]
  \f[B]const\f[R] fileSize = accessHandle.getSize();
  \f[I]// Read file content to a buffer.\f[R]
  \f[B]const\f[R] buffer = \f[B]new\f[R] DataView(\f[B]new\f[R] ArrayBuffer(fileSize));
  \f[B]const\f[R] readBuffer = accessHandle.read(buffer, { at: 0 });

  \f[I]// Write the message to the end of the file.\f[R]
  \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
  \f[B]const\f[R] encodedMessage = encoder.encode(message);
  \f[B]const\f[R] writeBuffer = accessHandle.write(encodedMessage, { at: readBuffer });

  \f[I]// Persist changes to disk.\f[R]
  accessHandle.flush();

  \f[I]// Always close FileSystemSyncAccessHandle if done.\f[R]
  accessHandle.close();
};
.EE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
