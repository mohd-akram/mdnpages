.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Window.error_event" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.error_event \- Window: error event
.SH SYNOPSIS
The \f[CR]error\f[R] event is fired on a \f[CR]Window\f[R] object when a
resource failed to load or couldn\[cq]t be used \[em] for example if a
script has an execution error.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]error\[dq], (event) \f[B]=>\f[R] {});

onerror = (event, source, lineno, colno, error) \f[B]=>\f[R] {};
.EE
.RS
.PP
\f[B]Note:\f[R] Due to historical reasons, \f[CR]onerror\f[R] on
\f[CR]window\f[R] is the only event handler property that receives more
than one argument.
.RE
.SH EVENT TYPE
The event object is a \f[CR]ErrorEvent\f[R] instance if it was generated
from a user interface element, or an \f[CR]Event\f[R] instance
otherwise.
.SH USAGE NOTES
.SS Event handler property
For historical reasons, the \f[CR]onerror\f[R] event handler property,
on \f[CR]Window\f[R] objects only, has different behavior from other
event handler properties.
.PP
Note that this only applies to handlers assigned to \f[CR]onerror\f[R],
not to handlers added using \f[CR]addEventListener()\f[R].
.SS Cancellation
Most event handlers assigned to event handler properties can cancel the
event\[cq]s default behavior by returning \f[CR]false\f[R] from the
handler:
.IP
.EX
textarea.onkeydown = () \f[B]=>\f[R] \f[B]false\f[R];
.EE
.PP
However, for an event handler property to cancel the default behavior of
the \f[CR]error\f[R] event of \f[CR]Window\f[R], it must instead return
\f[CR]true\f[R]:
.IP
.EX
window.onerror = () \f[B]=>\f[R] \f[B]true\f[R];
.EE
.PP
When canceled, the error won\[cq]t appear in the console, but the
current script will still stop executing.
.SS Arguments
The event handler\[cq]s signature is asymmetric between
\f[CR]addEventListener()\f[R] and \f[CR]onerror\f[R].
The event handler passed to \f[CR]Window.addEventListener()\f[R]
receives a single \f[CR]ErrorEvent\f[R] object, while the
\f[CR]onerror\f[R] handler receives five arguments, matching the
\f[CR]ErrorEvent\f[R] object\[cq]s properties:
.TP
\f[B]event\f[R]
A string containing a human\-readable error message describing the
problem.
Same as \f[CR]ErrorEvent.message\f[R].
.TP
\f[B]source\f[R]
A string containing the URL of the script that generated the error.
.TP
\f[B]lineno\f[R]
An integer containing the line number of the script file on which the
error occurred.
.TP
\f[B]colno\f[R]
An integer containing the column number of the script file on which the
error occurred.
.TP
\f[B]error\f[R]
The error being thrown.
Usually an \f[CR]Error\f[R] object.
.IP
.EX
window.onerror = (a, b, c, d, e) \f[B]=>\f[R] {
  console.log(\[ga]message: ${a}\[ga]);
  console.log(\[ga]source: ${b}\[ga]);
  console.log(\[ga]lineno: ${c}\[ga]);
  console.log(\[ga]colno: ${d}\[ga]);
  console.log(\[ga]error: ${e}\[ga]);

  \f[B]return\f[R] \f[B]true\f[R];
};
.EE
.RS
.PP
\f[B]Note:\f[R] These parameter names are observable with an HTML event
handler attribute, where the first parameter is called \f[CR]event\f[R]
instead of \f[CR]message\f[R].
.RE
.PP
This special behavior only happens for the \f[CR]onerror\f[R] event
handler on \f[CR]window\f[R].
The \f[CR]Element.onerror\f[R] handler still receives a single
\f[CR]ErrorEvent\f[R] object.
.SH EXAMPLES
.SS Live example
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\[dq]controls\[dq]>
  <\f[B]button\f[R] id=\[dq]script\-error\[dq] type=\[dq]button\[dq]>Generate script error</\f[B]button\f[R]>
  <\f[B]img\f[R] class=\[dq]bad\-img\[dq] />
</\f[B]div\f[R]>

<\f[B]div\f[R] class=\[dq]event\-log\[dq]>
  <\f[B]label\f[R] for=\[dq]eventLog\[dq]>Event log:</\f[B]label\f[R]>
  <\f[B]textarea\f[R]
    readonly
    class=\[dq]event\-log\-contents\[dq]
    rows=\[dq]8\[dq]
    cols=\[dq]30\[dq]
    id=\[dq]eventLog\[dq]></\f[B]textarea\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] log = document.querySelector(\[dq].event\-log\-contents\[dq]);

window.addEventListener(\[dq]error\[dq], (event) \f[B]=>\f[R] {
  log.textContent = \[ga]${log.textContent}${event.type}: ${event.message}\[rs]n\[ga];
  console.log(event);
});

\f[B]const\f[R] scriptError = document.querySelector(\[dq]#script\-error\[dq]);
scriptError.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]const\f[R] badCode = \[dq]const s;\[dq];
  eval(badCode);
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
This event on \f[CR]Element\f[R] targets: \f[CR]error\f[R] event
