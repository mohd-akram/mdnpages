.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WINDOW.ERROR_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.error_event \- Window: error event
.SH SYNOPSIS
The \f[CR]error\f[R] event is fired on a \f[CR]Window\f[R] object when a
resource failed to load or couldn\(cqt be used \(em for example if a
script has an execution error.
.PP
This event is only generated for script errors thrown synchronously,
such as during initial loading or within event handlers.
If a promise was rejected (including an uncaught \f[CR]throw\f[R] within
an \f[CR]async function\f[R]) and no rejection handlers were attached,
an \f[CR]unhandledrejection\f[R] event is fired instead.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqerror\(dq, (event) => { })

onerror = (message, source, lineno, colno, error) => { }
.EE
.RS
.PP
\f[B]Note:\f[R] For historical reasons, \f[CR]onerror\f[R] on
\f[CR]Window\f[R] and \f[CR]WorkerGlobalScope\f[R] objects is the only
event handler property that receives more than one argument.
.RE
.SH EVENT TYPE
The event object is a \f[CR]ErrorEvent\f[R] instance if it was generated
from a user interface element, or an \f[CR]Event\f[R] instance
otherwise.
.SH DESCRIPTION
.SS Event handler property
For historical reasons, the \f[CR]onerror\f[R] event handler property,
on \f[CR]Window\f[R] and \f[CR]WorkerGlobalScope\f[R] objects only, has
different behavior from other event handler properties.
.PP
Note that this only applies to handlers assigned to \f[CR]onerror\f[R],
not to handlers added using \f[CR]addEventListener()\f[R].
.SS Cancellation
Most event handlers assigned to event handler properties can cancel the
event\(cqs default behavior by returning \f[CR]false\f[R] from the
handler:
.IP
.EX
textarea.onkeydown = () \f[B]=>\f[R] \f[B]false\f[R];
.EE
.PP
However, for an event handler property to cancel the default behavior of
the \f[CR]error\f[R] event of \f[CR]Window\f[R], it must instead return
\f[CR]true\f[R]:
.IP
.EX
window.onerror = () \f[B]=>\f[R] \f[B]true\f[R];
.EE
.PP
When canceled, the error won\(cqt appear in the console, but the current
script will still stop executing.
.SS Arguments
The event handler\(cqs signature is asymmetric between
\f[CR]addEventListener()\f[R] and \f[CR]onerror\f[R].
The event handler passed to \f[CR]Window.addEventListener()\f[R]
receives a single \f[CR]ErrorEvent\f[R] object, while the
\f[CR]onerror\f[R] handler receives five arguments, matching the
\f[CR]ErrorEvent\f[R] object\(cqs properties:
.TP
\f[B]message\f[R]
A string containing a human\-readable error message describing the
problem.
Same as \f[CR]ErrorEvent.message\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] In HTML, the content event handler attribute
\f[CR]onerror\f[R] on the \f[CR]<body>\f[R] element attaches
\f[CR]error\f[R] event listeners to \f[CR]window\f[R] (\f[I]not\f[R] the
\f[CR]<body>\f[R] element).
For this event handler, the first parameter is called \f[CR]event\f[R],
not \f[CR]message\f[R], although it still contains a string; that is,
you would use \f[CR]<body onerror=\(dqconsole.error(event)\(dq>\f[R] to
log the error message.
.RE
.RE
.TP
\f[B]source\f[R]
A string containing the URL of the script that generated the error.
.TP
\f[B]lineno\f[R]
An integer containing the line number of the script file on which the
error occurred.
.TP
\f[B]colno\f[R]
An integer containing the column number of the script file on which the
error occurred.
.TP
\f[B]error\f[R]
The error being thrown.
Usually an \f[CR]Error\f[R] object.
.IP
.EX
window.onerror = (a, b, c, d, e) \f[B]=>\f[R] {
  console.log(\(gamessage: ${a}\(ga);
  console.log(\(gasource: ${b}\(ga);
  console.log(\(galineno: ${c}\(ga);
  console.log(\(gacolno: ${d}\(ga);
  console.log(\(gaerror: ${e}\(ga);

  \f[B]return\f[R] \f[B]true\f[R];
};
.EE
.RS
.PP
\f[B]Note:\f[R] These parameter names are observable with an HTML event
handler attribute, where the first parameter is called \f[CR]event\f[R]
instead of \f[CR]message\f[R].
.RE
.PP
This special behavior only happens for the \f[CR]onerror\f[R] event
handler on \f[CR]window\f[R].
The \f[CR]Element.onerror\f[R] handler still receives a single
\f[CR]ErrorEvent\f[R] object.
.SH EXAMPLES
.SS Live example
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\(dqcontrols\(dq>
  <\f[B]button\f[R] id=\(dqscript\-error\(dq type=\(dqbutton\(dq>Generate script error</\f[B]button\f[R]>
  <\f[B]img\f[R] class=\(dqbad\-img\(dq />
</\f[B]div\f[R]>

<\f[B]div\f[R] class=\(dqevent\-log\(dq>
  <\f[B]label\f[R] for=\(dqeventLog\(dq>Event log:</\f[B]label\f[R]>
  <\f[B]textarea\f[R]
    readonly
    class=\(dqevent\-log\-contents\(dq
    rows=\(dq8\(dq
    cols=\(dq30\(dq
    id=\(dqeventLog\(dq></\f[B]textarea\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] log = document.querySelector(\(dq.event\-log\-contents\(dq);

window.addEventListener(\(dqerror\(dq, (event) \f[B]=>\f[R] {
  log.textContent = \(ga${log.textContent}${event.type}: ${event.message}\(rsn\(ga;
  console.log(event);
});

\f[B]const\f[R] scriptError = document.querySelector(\(dq#script\-error\(dq);
scriptError.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[B]const\f[R] badCode = \(dqconst s;\(dq;
  eval(badCode);
});
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
This event on \f[CR]Element\f[R] targets: \f[CR]error\f[R] event
.IP \(bu 2
\f[CR]Window\f[R]: \f[CR]unhandledrejection\f[R] event
