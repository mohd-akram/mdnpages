'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SYMBOL.SPECIES" "3JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.species \- Symbol.species
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.species\f[B]\f[R] static data property represents
the well\-known symbol \f[CR]Symbol.species\f[R].
Methods that create copies of an object may look up this symbol on the
object for the constructor function to use when creating the copy.
.RS
.PP
\f[B]Warning:\f[R] The existence of \f[CR][Symbol.species]\f[R] allows
execution of arbitrary code and may create security vulnerabilities.
It also makes certain optimizations much harder.
Engine implementers are \c
.UR https://github.com/tc39/proposal-rm-builtin-subclassing
investigating whether to remove this feature
.UE \c
\&.
Avoid relying on it if possible.
.RE
.IP
.EX
\f[B]class\f[R] Array1 \f[B]extends\f[R] Array {
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    \f[B]return\f[R] Array;
  }
}

\f[B]const\f[R] a = \f[B]new\f[R] Array1(1, 2, 3);
\f[B]const\f[R] mapped = a.map((x) \f[B]=>\f[R] x * x);

console.log(mapped \f[B]instanceof\f[R] Array1);
\f[I]// Expected output: false\f[R]

console.log(mapped \f[B]instanceof\f[R] Array);
\f[I]// Expected output: true\f[R]
.EE
.SH VALUE
The well\-known symbol \f[CR]Symbol.species\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
The \f[CR][Symbol.species]\f[R] accessor property allows subclasses to
override the default constructor for objects.
This specifies a protocol about how instances should be copied.
For example, when you use copying methods of arrays, such as
\f[CR]map()\f[R], the \f[CR]map()\f[R] method uses
\f[CR]instance.constructor[Symbol.species]\f[R] to get the constructor
for constructing the new array.
For more information, see subclassing built\-ins.
.PP
All built\-in implementations of \f[CR][Symbol.species]\f[R] return the
\f[CR]this\f[R] value, which is the current instance\(cqs constructor.
This allows copying methods to create instances of derived classes
rather than the base class \(em for example, \f[CR]map()\f[R] will
return an array of the same type as the original array.
.SH EXAMPLES
.SS Using species
You might want to return \f[CR]Array\f[R] objects in your derived array
class \f[CR]MyArray\f[R].
For example, when using methods such as \f[CR]map()\f[R] that return the
default constructor, you want these methods to return a parent
\f[CR]Array\f[R] object, instead of the \f[CR]MyArray\f[R] object.
The \f[CR]species\f[R] symbol lets you do this:
.IP
.EX
\f[B]class\f[R] MyArray \f[B]extends\f[R] Array {
  \f[I]// Overwrite species to the parent Array constructor\f[R]
  \f[B]static\f[R] \f[B]get\f[R] [Symbol.species]() {
    \f[B]return\f[R] Array;
  }
}
\f[B]const\f[R] a = \f[B]new\f[R] MyArray(1, 2, 3);
\f[B]const\f[R] mapped = a.map((x) \f[B]=>\f[R] x * x);

console.log(mapped \f[B]instanceof\f[R] MyArray); \f[I]// false\f[R]
console.log(mapped \f[B]instanceof\f[R] Array); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Array[Symbol.species]\f[R]
.IP \(bu 2
\f[CR]ArrayBuffer[Symbol.species]\f[R]
.IP \(bu 2
\f[CR]Map[Symbol.species]\f[R]
.IP \(bu 2
\f[CR]Promise[Symbol.species]\f[R]
.IP \(bu 2
\f[CR]RegExp[Symbol.species]\f[R]
.IP \(bu 2
\f[CR]Set[Symbol.species]\f[R]
.IP \(bu 2
\f[CR]TypedArray[Symbol.species]\f[R]
