.\" Automatically generated by Pandoc 3.4
.\"
.TH "WorkerGlobalScope.queueMicrotask" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WorkerGlobalScope.queueMicrotask \- WorkerGlobalScope: queueMicrotask()
method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Web Workers.
.PP
The \f[B]\f[CB]queueMicrotask()\f[B]\f[R] method of the
\f[CR]WorkerGlobalScope\f[R] interface queues a microtask to be executed
at a safe time prior to control returning to the browser\[cq]s event
loop.
.PP
The microtask is a short function which will run after the current task
has completed its work and when there is no other code waiting to be run
before control of the execution context is returned to the browser\[cq]s
event loop.
.PP
This lets your code run without interfering with any other, potentially
higher priority, code that is pending, but before the browser regains
control over the execution context, potentially depending on work you
need to complete.
You can learn more about how to use microtasks and why you might choose
to do so in our microtask guide.
.PP
The importance of microtasks comes in its ability to perform tasks
asynchronously but in a specific order.
See Using microtasks in JavaScript with \f[CR]queueMicrotask()\f[R] for
more details.
.PP
Microtasks are especially useful for libraries and frameworks that need
to perform final cleanup or other just\-before\-rendering tasks.
.SH SYNTAX
.IP
.EX
queueMicrotask(callback)
.EE
.SS Parameters
.TP
\f[B]callback\f[R]
A \f[CR]function\f[R] to be executed when the browser engine determines
it is safe to call your code.
Enqueued microtasks are executed after all pending tasks have completed
but before yielding control to the browser\[cq]s event loop.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.IP
.EX
queueMicrotask(() \f[B]=>\f[R] {
  \f[I]// function contents here\f[R]
});
.EE
.PP
Taken from the \c
.UR https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#microtask-queuing
queueMicrotask spec
.UE \c
:
.IP
.EX
MyElement.prototype.loadData = \f[B]function\f[R] (url) {
  \f[B]if\f[R] (\f[B]this\f[R]._cache[url]) {
    queueMicrotask(() \f[B]=>\f[R] {
      \f[B]this\f[R]._setData(\f[B]this\f[R]._cache[url]);
      \f[B]this\f[R].dispatchEvent(\f[B]new\f[R] Event(\[dq]load\[dq]));
    });
  } \f[B]else\f[R] {
    fetch(url)
      .then((res) \f[B]=>\f[R] res.arrayBuffer())
      .then((data) \f[B]=>\f[R] {
        \f[B]this\f[R]._cache[url] = data;
        \f[B]this\f[R]._setData(data);
        \f[B]this\f[R].dispatchEvent(\f[B]new\f[R] Event(\[dq]load\[dq]));
      });
  }
};
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Window.queueMicrotask()\f[R]
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#queuemicrotask
Polyfill of \f[CR]queueMicrotask()\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Using microtasks in JavaScript with queueMicrotask()
.IP \[bu] 2
Asynchronous JavaScript
.IP \[bu] 2
\c
.UR https://github.com/fergald/docs/blob/master/explainers/queueMicrotask.md
queueMicrotask explainer
.UE \c
.IP \[bu] 2
\c
.UR https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/
Tasks, microtasks, queues and schedules
.UE \c
\ by Jake Archibald
