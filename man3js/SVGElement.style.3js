.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SVGELEMENT.STYLE" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SVGElement.style \- SVGElement: style property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]style\f[B]\f[R] property of the
\f[CR]SVGElement\f[R] returns the \f[I]inline\f[R] style of an element
in the form of a live \f[CR]CSSStyleDeclaration\f[R] object that
contains a list of all styles properties for that element with values
assigned only for the attributes that are defined in the element\(cqs
inline \f[CR]style\f[R] attribute.
.PP
Shorthand properties are expanded.
If you set \f[CR]style=\(dqborder\-top: 1px solid black\(dq\f[R], the
longhand properties (\f[CR]border\-top\-color\f[R],
\f[CR]border\-top\-style\f[R], and \f[CR]border\-top\-width\f[R]) are
set instead.
.PP
This property is read\-only, meaning it is not possible to assign a
\f[CR]CSSStyleDeclaration\f[R] object to it.
Nevertheless, it is possible to set an inline style by assigning a
\f[I]string\f[R] directly to the \f[CR]style\f[R] property.
In this case the string is forwarded to
\f[CR]CSSStyleDeclaration.cssText\f[R].
Using \f[CR]style\f[R] in this manner will completely overwrite all
inline styles on the element.
.PP
Therefore, to add specific styles to an element without altering other
style values, it is generally preferable to set individual properties on
the \f[CR]CSSStyleDeclaration\f[R] object.
For example, you can write
\f[CR]element.style.backgroundColor = \(dqred\(dq\f[R].
.PP
A style declaration is reset by setting it to \f[CR]null\f[R] or an
empty string, e.g., \f[CR]elt.style.color = null\f[R].
.RS
.PP
\f[B]Note:\f[R] CSS property names are converted to JavaScript
identifier with these rules:
.IP \(bu 2
If the property is made of one word, it remains as it is:
\f[CR]height\f[R] stays as is (in lowercase).
.IP \(bu 2
If the property is made of several words, separated by dashes, the
dashes are removed and it is converted to camel case:
\f[CR]background\-attachment\f[R] becomes
\f[CR]backgroundAttachment\f[R].
.IP \(bu 2
The property \f[CR]float\f[R], being a reserved JavaScript keyword, is
converted to \f[CR]cssFloat\f[R].
.PP
The \f[CR]style\f[R] property has the same priority in the CSS cascade
as an inline style declaration set via the \f[CR]style\f[R] attribute.
.RE
.SH VALUE
A live \f[CR]CSSStyleDeclaration\f[R] object.
.SH EXAMPLES
.SS Getting style information
The following code snippet demonstrates how the \f[CR]style\f[R]
attribute is translated into a list of entries in
\f[CR]CSSStyleDeclaration\f[R] :
.IP
.EX
<\f[B]svg\f[R]
  width=\(dq50\(dq
  height=\(dq50\(dq
  xmlns=\(dqhttp://www.w3.org/2000/svg\(dq
  viewBox=\(dq0 0 250 250\(dq
  width=\(dq250\(dq
  height=\(dq250\(dq>
  <\f[B]circle\f[R]
    cx=\(dq100\(dq
    cy=\(dq100\(dq
    r=\(dq50\(dq
    id=\(dqcircle\(dq
    style=\(dqfill: red; stroke: black; stroke\-width: 2px;\(dq />
</\f[B]svg\f[R]>
<\f[B]pre\f[R] id=\(dqout\(dq></\f[B]pre\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] element = document.querySelector(\(dqcircle\(dq);
\f[B]const\f[R] out = document.getElementById(\(dqout\(dq);
\f[B]const\f[R] elementStyle = element.style;

\f[I]// We loop through all the element\(aqs styles using \(gafor...in\(ga\f[R]
\f[B]for\f[R] (\f[B]const\f[R] prop \f[B]in\f[R] elementStyle) {
  \f[I]// We check if the property belongs to the CSSStyleDeclaration instance\f[R]
  \f[I]// We also ensure that the property is a numeric index (indicating an inline style)\f[R]
  \f[B]if\f[R] (
    Object.hasOwn(elementStyle, prop) &&
    !Number.isNaN(Number.parseInt(prop))
  ) {
    out.textContent += \(ga${
      elementStyle[prop]
    } = \(aq${elementStyle.getPropertyValue(elementStyle[prop])}\(aq\(rsn\(ga;
  }
}
.EE
.SH SEE ALSO
.IP \(bu 2
Using dynamic styling information
.IP \(bu 2
\f[CR]HTMLElement.style\f[R]
.IP \(bu 2
\f[CR]MathMLElement.style\f[R]
.IP \(bu 2
\f[CR]SVGElement.attributeStyleMap\f[R]
