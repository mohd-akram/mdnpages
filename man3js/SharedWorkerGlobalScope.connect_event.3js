.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "SharedWorkerGlobalScope.connect_event" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SharedWorkerGlobalScope.connect_event \- SharedWorkerGlobalScope:
connect event
.SH SYNOPSIS
The \f[B]\f[CB]connect\f[B]\f[R] event is fired in shared workers at
their \f[CR]SharedWorkerGlobalScope\f[R] when a new client connects.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]connect\[dq], (event) \f[B]=>\f[R] {});

onconnect = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
This example shows a shared worker file \[em] when a connection to the
worker occurs from a main thread via a \f[CR]MessagePort\f[R], the
\f[CR]onconnect\f[R] event handler fires.
The event object is a \f[CR]MessageEvent\f[R].
.PP
The connecting port can be referenced through the event object\[cq]s
\f[CR]ports\f[R] parameter; this reference can have an
\f[CR]onmessage\f[R] handler attached to it to handle messages coming in
through the port, and its \f[CR]postMessage()\f[R] method can be used to
send messages back to the main thread using the worker.
.IP
.EX
self.onconnect = (e) \f[B]=>\f[R] {
  \f[B]const\f[R] port = e.ports[0];

  port.onmessage = (e) \f[B]=>\f[R] {
    \f[B]const\f[R] workerResult = \[ga]Result: ${e.data[0] * e.data[1]}\[ga];
    port.postMessage(workerResult);
  };

  port.start();
};
.EE
.PP
For a complete running example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/web-workers/simple-shared-worker
Basic shared worker example
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/web-workers/simple-shared-worker/
run shared worker
.UE \c
\&.)
.SS addEventListener equivalent
You could also set up an event handler using the
\f[CR]addEventListener()\f[R] method:
.IP
.EX
self.addEventListener(\[dq]connect\[dq], (e) \f[B]=>\f[R] {
  \f[B]const\f[R] port = e.ports[0];

  port.onmessage = (e) \f[B]=>\f[R] {
    \f[B]const\f[R] workerResult = \[ga]Result: ${e.data[0] * e.data[1]}\[ga];
    port.postMessage(workerResult);
  };
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using web workers
.IP \[bu] 2
\f[CR]SharedWorkerGlobalScope\f[R]
