.\" Automatically generated by Pandoc 3.4
.\"
.TH "CanvasRenderingContext2D.setLineDash" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.setLineDash \- CanvasRenderingContext2D:
setLineDash() method
.SH SYNOPSIS
The \f[B]\f[CB]setLineDash()\f[B]\f[R] method of the Canvas 2D API\[cq]s
\f[CR]CanvasRenderingContext2D\f[R] interface sets the line dash pattern
used when stroking lines.
It uses an array of values that specify alternating lengths of lines and
gaps which describe the pattern.
.RS
.PP
\f[B]Note:\f[R] To return to using solid lines, set the line dash list
to an empty array.
.RE
.SH SYNTAX
.IP
.EX
setLineDash(segments)
.EE
.SS Parameters
.TP
\f[B]segments\f[R]
An \f[CR]Array\f[R] of numbers that specify distances to alternately
draw a line and a gap (in coordinate space units).
If the number of elements in the array is odd, the elements of the array
get copied and concatenated.
For example, \f[CR][5, 15, 25]\f[R] will become
\f[CR][5, 15, 25, 5, 15, 25]\f[R].
If the array is empty, the line dash list is cleared and line strokes
return to being solid.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Basic example
This example uses the \f[CR]setLineDash()\f[R] method to draw a dashed
line above a solid line.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

\f[I]// Dashed line\f[R]
ctx.beginPath();
ctx.setLineDash([5, 15]);
ctx.moveTo(0, 50);
ctx.lineTo(300, 50);
ctx.stroke();

\f[I]// Solid line\f[R]
ctx.beginPath();
ctx.setLineDash([]);
ctx.moveTo(0, 100);
ctx.lineTo(300, 100);
ctx.stroke();
.EE
.SS Result
.SS Some common patterns
This example illustrates a variety of common line dash patterns.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
The \f[CR]drawDashedLine()\f[R] function created below makes the drawing
of multiple dashed lines simple.
It receives a pattern array as its only parameter.
.IP
.EX
\f[B]function\f[R] drawDashedLine(pattern) {
  ctx.beginPath();
  ctx.setLineDash(pattern);
  ctx.moveTo(0, y);
  ctx.lineTo(300, y);
  ctx.stroke();
  y += 20;
}

\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
\f[B]let\f[R] y = 15;

drawDashedLine([]);
drawDashedLine([1, 1]);
drawDashedLine([10, 10]);
drawDashedLine([20, 5]);
drawDashedLine([15, 3, 3, 3]);
drawDashedLine([20, 3, 3, 3, 3, 3, 3, 3]);
drawDashedLine([12, 3, 3]); \f[I]// Equals [12, 3, 3, 12, 3, 3]\f[R]
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.getLineDash()\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.lineDashOffset\f[R]
