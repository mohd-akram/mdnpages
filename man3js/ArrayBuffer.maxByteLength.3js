.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAYBUFFER.MAXBYTELENGTH" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ArrayBuffer.maxByteLength \- ArrayBuffer.prototype.maxByteLength
.SH SYNOPSIS
The \f[B]\f[CB]maxByteLength\f[B]\f[R] accessor property of
\f[CR]ArrayBuffer\f[R] instances returns the maximum length (in bytes)
that this array buffer can be resized to.
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8, { maxByteLength: 16 });

console.log(buffer.byteLength);
\f[I]// Expected output: 8\f[R]

console.log(buffer.maxByteLength);
\f[I]// Expected output: 16\f[R]
.EE
.SH DESCRIPTION
The \f[CR]maxByteLength\f[R] property is an accessor property whose set
accessor function is \f[CR]undefined\f[R], meaning that you can only
read this property.
The value is established when the array is constructed, set via the
\f[CR]maxByteLength\f[R] option of the \f[CR]ArrayBuffer()\f[R]
constructor, and cannot be changed.
.PP
This property returns 0 if this \f[CR]ArrayBuffer\f[R] has been
detached.
If this \f[CR]ArrayBuffer\f[R] was constructed without specifying a
\f[CR]maxByteLength\f[R] value, this property returns a value equal to
the value of the \f[CR]ArrayBuffer\f[R]\(cqs \f[CR]byteLength\f[R].
.SH EXAMPLES
.SS Using maxByteLength
In this example, we create an 8\-byte buffer that is resizable to a max
length of 16 bytes, then return its \f[CR]maxByteLength\f[R]:
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8, { maxByteLength: 16 });

buffer.maxByteLength; \f[I]// 16\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]ArrayBuffer\f[R]
.IP \(bu 2
\f[CR]ArrayBuffer.prototype.byteLength\f[R]
.IP \(bu 2
\f[CR]ArrayBuffer.prototype.resize()\f[R]
