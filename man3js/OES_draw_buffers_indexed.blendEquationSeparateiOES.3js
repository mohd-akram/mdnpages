.\" Automatically generated by Pandoc 3.4
.\"
.TH "OES_draw_buffers_indexed.blendEquationSeparateiOES" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OES_draw_buffers_indexed.blendEquationSeparateiOES \-
OES_draw_buffers_indexed: blendEquationSeparateiOES() method
.SH SYNOPSIS
The \f[CR]blendEquationSeparateiOES()\f[R] method of the
\f[CR]OES_draw_buffers_indexed\f[R] WebGL extension sets the RGB and
alpha blend equations separately for a particular draw buffer.
.PP
See \f[CR]OES_draw_buffers_indexed.blendEquationiOES()\f[R] for setting
RGB and alpha together and
\f[CR]WebGLRenderingContext.blendEquationSeparate()\f[R] for the WebGL 1
version of this method.
.SH SYNTAX
.IP
.EX
blendEquationSeparateiOES(buf, modeRGB, modeAlpha)
.EE
.SS Parameters
.TP
\f[B]buf\f[R]
An integer \f[CR]i\f[R] specifying the draw buffer associated with the
constant \f[CR]gl.DRAW_BUFFERi\f[R], see WebGL draw buffer constants.
.TP
\f[B]modeRGB\f[R]
A \f[CR]GLenum\f[R] specifying how source and destination RGB color
components are combined.
Accepts the same enums as the \f[CR]modeRGB\f[R] parameter in
\f[CR]WebGLRenderingContext.blendEquationSeparate()\f[R].
.TP
\f[B]modeAlpha\f[R]
A \f[CR]GLenum\f[R] specifying how source and destination alpha color
components are combined.
Accepts the same enums as the \f[CR]modeAlpha\f[R] parameter in
\f[CR]WebGLRenderingContext.blendEquationSeparate()\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.IP \[bu] 2
If \f[CR]buf\f[R] is not a valid value, a \f[CR]gl.INVALID_VALUE\f[R]
error is thrown.
.IP \[bu] 2
If \f[CR]modeRGB\f[R] or \f[CR]modeAlpha\f[R] are not set to one of the
possible values, a \f[CR]gl.INVALID_ENUM\f[R] error is thrown.
.SH EXAMPLES
.SS Setting and getting blend equations
The following sets the blend equations for the draw buffers
\f[CR]gl.DRAW_BUFFER0\f[R] (call where \f[CR]buf\f[R] is 0) and
\f[CR]gl.DRAW_BUFFER1\f[R] (call where \f[CR]buf\f[R] is 1).
.IP
.EX
\f[B]const\f[R] ext = gl.getExtension(\[dq]OES_draw_buffers_indexed\[dq]);

ext.blendEquationSeparateiOES(0, gl.FUNC_ADD, gl.FUNC_SUBTRACT);
ext.blendEquationSeparateiOES(1, gl.FUNC_ADD, gl.FUNC_SUBTRACT);
.EE
.PP
To get the blend equations for \f[CR]gl.DRAW_BUFFER0\f[R] and
\f[CR]gl.DRAW_BUFFER1\f[R], query the \f[CR]BLEND_EQUATION_RGB\f[R] and
\f[CR]BLEND_EQUATION_ALPHA\f[R] constants using
\f[CR]WebGL2RenderingContext.getIndexedParameter()\f[R]:
.IP
.EX
\f[I]// For gl.DRAW_BUFFER0\f[R]
gl.getIndexedParameter(gl.BLEND_EQUATION_RGB, 0);
gl.getIndexedParameter(gl.BLEND_EQUATION_ALPHA, 0);

\f[I]// for gl.DRAW_BUFFER1\f[R]
gl.getIndexedParameter(gl.BLEND_EQUATION_RGB, 1);
gl.getIndexedParameter(gl.BLEND_EQUATION_ALPHA, 1);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]OES_draw_buffers_indexed.blendEquationiOES()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.blendEquationSeparate()\f[R]
