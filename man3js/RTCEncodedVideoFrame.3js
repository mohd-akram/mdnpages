.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCEncodedVideoFrame" "JS" "April 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCEncodedVideoFrame \- RTCEncodedVideoFrame
.SH SYNOPSIS
This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]RTCEncodedVideoFrame\f[B]\f[R] of the WebRTC API
represents an encoded video frame in the WebRTC receiver or sender
pipeline, which may be modified using a WebRTC Encoded Transform.
.RS
.PP
\f[B]Note:\f[R] This feature is available in \f[I]Dedicated\f[R] Web
Workers.
.RE
.SH INSTANCE PROPERTIES
.TP
\f[B]RTCEncodedVideoFrame.type\f[R] \f[I](read\-only)\f[R]
Returns whether the current frame is a key frame, delta frame, or empty
frame.
.TP
\f[B]RTCEncodedVideoFrame.timestamp\f[R] \f[I](read\-only)\f[R]
Returns the timestamp at which sampling of the frame started.
.TP
\f[B]RTCEncodedVideoFrame.data\f[R]
Return a buffer containing the encoded frame data.
.SH INSTANCE METHODS
.TP
\f[B]RTCEncodedVideoFrame.getMetadata()\f[R]
Returns the metadata associated with the frame.
.SH DESCRIPTION
Raw video data is generated as a sequence of frames, where each frame is
a 2 dimensional array of pixel values.
Video encoders transform this raw input into a compressed representation
of the original for transmission and storage.
A common approach is to send \[lq]key frames\[rq] that contain enough
information to reproduce a whole image at a relatively low rate, and
between key frames to send many much smaller \[lq]delta frames\[rq] that
just encode the changes since the previous frame.
.PP
There are many different codecs, such as H.264, VP8, and VP9, each that
have a different encoding processes and configuration, which offer
different trade\-offs between compression efficiency and video quality.
.PP
The \f[B]\f[CB]RTCEncodedVideoFrame\f[B]\f[R] represents a single frame
encoded with a particular video encoder.
The \f[CR]type\f[R] property indicates whether the frame is a
\[lq]key\[rq] or \[lq]delta\[rq] frame, and you can use the
\f[CR]getMetadata()\f[R] method to get other details about the encoding
method.
The \f[CR]data\f[R] property provides access to the encoded image data
for the frame, which can then be modified (\[lq]transformed\[rq]) when
frames are sent or received.
.SH EXAMPLES
This code snippet shows a handler for the \f[CR]rtctransform\f[R] event
in a \f[CR]Worker\f[R] that implements a \f[CR]TransformStream\f[R], and
pipes encoded frames through it from the
\f[CR]event.transformer.readable\f[R] to
\f[CR]event.transformer.writable\f[R] (\f[CR]event.transformer\f[R] is a
\f[CR]RTCRtpScriptTransformer\f[R], the worker\-side counterpart of
\f[CR]RTCRtpScriptTransform\f[R]).
.PP
If the tranformer is inserted into a video stream, the
\f[CR]transform()\f[R] method is called with a
\f[CR]RTCEncodedVideoFrame\f[R] whenever a new frame is enqueued on
\f[CR]event.transformer.readable\f[R].
The \f[CR]transform()\f[R] method shows how this might be read, modified
by inverting the bits, and then enqueued on the controller (this
ultimately pipes it through to the
\f[CR]event.transformer.writable\f[R], and then back into the WebRTC
pipline).
.IP
.EX
addEventListener(\[dq]rtctransform\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] \f[B]async\f[R] transform = \f[B]new\f[R] TransformStream({
    \f[B]async\f[R] transform(encodedFrame, controller) {
      \f[I]// Reconstruct the original frame.\f[R]
      \f[B]const\f[R] view = \f[B]new\f[R] DataView(encodedFrame.data);

      \f[I]// Construct a new buffer\f[R]
      \f[B]const\f[R] newData = \f[B]new\f[R] ArrayBuffer(encodedFrame.data.byteLength);
      \f[B]const\f[R] newView = \f[B]new\f[R] DataView(newData);

      \f[I]// Negate all bits in the incoming frame\f[R]
      \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < encodedFrame.data.byteLength; ++i) {
        newView.setInt8(i, \[ti]view.getInt8(i));
      }

      encodedFrame.data = newData;
      controller.enqueue(encodedFrame);
    },
  });
  event.transformer.readable
    .pipeThrough(transform)
    .pipeTo(event.transformer.writable);
});
.EE
.PP
Note that more complete examples are provided in Using WebRTC Encoded
Transforms.
.SH SEE ALSO
.IP \[bu] 2
Using WebRTC Encoded Transforms
.IP \[bu] 2
\f[CR]TransformStream\f[R]
.IP \[bu] 2
\f[CR]RTCRtpScriptTransformer\f[R]
.IP \[bu] 2
\f[CR]RTCEncodedAudioFrame\f[R]
