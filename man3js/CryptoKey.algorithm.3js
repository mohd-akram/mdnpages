.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CRYPTOKEY.ALGORITHM" "3JS" "February 15, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CryptoKey.algorithm \- CryptoKey: algorithm property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The read\-only \f[B]\f[CB]algorithm\f[B]\f[R] property of the
\f[CR]CryptoKey\f[R] interface returns an object describing the
algorithm for which this key can be used, and any associated extra
parameters.
.PP
The object returned depends of the algorithm used to generate the key.
.SH VALUE
An object matching:
.IP \(bu 2
\f[CR]AesKeyGenParams\f[R] if the algorithm is any of the AES variants.
.IP \(bu 2
\f[CR]RsaHashedKeyGenParams\f[R] if the algorithm is any of the RSA
variants.
.IP \(bu 2
\f[CR]EcKeyGenParams\f[R] if the algorithm is any of the EC variants.
.IP \(bu 2
\f[CR]HmacKeyGenParams\f[R] if the algorithm is HMAC.
.PP
For \f[CR]RsaHashedKeyGenParams\f[R] and \f[CR]HmacKeyGenParams\f[R],
the \f[CR]hash\f[R] property is always in the object form (with a
property called \f[CR]name\f[R]), not the string form.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] rawKey = window.crypto.getRandomValues(\f[B]new\f[R] Uint8Array(16));

\f[I]// Import an AES secret key from an ArrayBuffer containing the raw bytes.\f[R]
\f[I]// Takes an ArrayBuffer string containing the bytes, and returns a Promise\f[R]
\f[I]// that will resolve to a CryptoKey representing the secret key.\f[R]
\f[B]function\f[R] importSecretKey(rawKey) {
  \f[B]return\f[R] window.crypto.subtle.importKey(\(dqraw\(dq, rawKey, \(dqAES\-GCM\(dq, \f[B]true\f[R], [
    \(dqencrypt\(dq,
    \(dqdecrypt\(dq,
  ]);
}

\f[B]const\f[R] key = importSecretKey(rawKey);
console.log(\(gaThis key is to be used with the ${key.algorithm} algorithm.\(ga);
.EE
