.\" Automatically generated by Pandoc 3.4
.\"
.TH "MediaRecorder.MediaRecorder" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaRecorder.MediaRecorder \- MediaRecorder: MediaRecorder()
constructor
.SH SYNOPSIS
The \f[B]\f[CB]MediaRecorder()\f[B]\f[R] constructor creates a new
\f[CR]MediaRecorder\f[R] object that will record a specified
\f[CR]MediaStream\f[R].
.PP
The object can optionally be configured to record using a specific media
container (file type), and, further, can specify the exact codec and
codec configuration(s) to use by specifying the \f[CR]codecs\f[R]
parameter.
.SH SYNTAX
.IP
.EX
new MediaRecorder(stream)
new MediaRecorder(stream, options)
.EE
.SS Parameters
.TP
\f[B]stream\f[R]
The \f[CR]MediaStream\f[R] that will be recorded.
This source media can come from a stream created using
\f[CR]navigator.mediaDevices.getUserMedia()\f[R] or from an
\f[CR]<audio>\f[R], \f[CR]<video>\f[R] or \f[CR]<canvas>\f[R] element.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
A dictionary object that can contain the following properties:
.RS
.TP
\f[B]mimeType\f[R] \f[I](optional)\f[R]
A MIME type specifying the format for the resulting media; you may
specify the container format (the browser will select its preferred
codecs for audio and/or video), or you may use the \f[CR]codecs\f[R]
parameter and/or the \f[CR]profiles\f[R] parameter to provide detailed
information about which codecs to use and how to configure them.
Applications can check in advance if a \f[CR]mimeType\f[R] is supported
by the user agent by calling \f[CR]MediaRecorder.isTypeSupported()\f[R].
Defaults to an empty string.
.TP
\f[B]audioBitsPerSecond\f[R] \f[I](optional)\f[R]
The chosen bitrate for the audio component of the media.
.TP
\f[B]videoBitsPerSecond\f[R] \f[I](optional)\f[R]
The chosen bitrate for the video component of the media.
.TP
\f[B]bitsPerSecond\f[R] \f[I](optional)\f[R]
The chosen bitrate for the audio and video components of the media.
This can be specified instead of the above two properties.
If this is specified along with one or the other of the above
properties, this will be used for the one that isn\[cq]t specified.
.TP
\f[B]audioBitrateMode\f[R] \f[I](optional)\f[R]
The bitrate mode that should be used to encode the audio.
Can be \f[CR]constant\f[R], which indicates that the recorder should
encode at a constant bitrate, or \f[CR]variable\f[R], which indicates
that the recorder should encode using a variable bitrate, thus allowing
more space to be used for complex signals and less space for
less\-complex signals.
Defaults to \f[CR]variable\f[R].
.TP
\f[B]videoKeyFrameIntervalDuration\f[R] \f[I](optional)\f[R]
The nominal interval in time between key frames in the encoded video
stream.
The user agent controls key\-frame generation based on this option and
the \f[CR]videoKeyFrameIntervalCount\f[R] option.
.TP
\f[B]videoKeyFrameIntervalCount\f[R] \f[I](optional)\f[R]
The interval in number of frames between key frames in the encoded video
stream.
The user agent controls key\-frame generation considering this option as
well as \f[CR]videoKeyFrameIntervalDuration\f[R] option.
.RS
.PP
\f[B]Note:\f[R] If bits per second values are not specified for video
and/or audio, the default adopted for video is 2.5Mbps, while the audio
default is adaptive, depending upon the sample rate and the number of
channels.
.RE
.RS
.PP
\f[B]Note:\f[R] Video resolution, frame rate and similar settings are
specified as constraints when calling \f[CR]getUserMedia()\f[R], not
here in the MediaStream Recording API.
.RE
.RE
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if the specified MIME type is not supported by the user agent.
.SH EXAMPLES
This example shows how to create a media recorder for a specified
stream, whose audio bit rate is set to 128 Kbit/sec and whose video bit
rate is set to 2.5 Mbit/sec.\ The recorded media data will be stored in
an MP4 wrapper (so if you gather the chunks of media data and save them
to disk, they will be in an MP4 file).
.IP
.EX
\f[B]if\f[R] (navigator.mediaDevices.getUserMedia) {
  \f[B]const\f[R] constraints = { audio: \f[B]true\f[R], video: \f[B]true\f[R] };
  \f[B]const\f[R] chunks = [];

  \f[B]const\f[R] onSuccess = (stream) \f[B]=>\f[R] {
    \f[B]const\f[R] options = {
      audioBitsPerSecond: 128000,
      videoBitsPerSecond: 2500000,
      mimeType: \[dq]video/mp4\[dq],
    };
    \f[B]const\f[R] mediaRecorder = \f[B]new\f[R] MediaRecorder(stream, options);
    m = mediaRecorder;

    \f[I]// \&...\f[R]
  };
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the MediaStream Recording API
.IP \[bu] 2
\c
.UR https://mdn.github.io/dom-examples/media/web-dictaphone/
Web Dictaphone
.UE \c
: MediaRecorder + getUserMedia + Web Audio API visualization demo, by \c
.UR https://github.com/chrisdavidmills
Chris Mills
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone
source on GitHub
.UE \c
\&.)
.IP \[bu] 2
\c
.UR https://simpl.info/mediarecorder/
simpl.info MediaStream Recording demo
.UE \c
, by \c
.UR https://github.com/samdutton
Sam Dutton
.UE \c
\&.
.IP \[bu] 2
\f[CR]MediaDevices.getUserMedia\f[R]
