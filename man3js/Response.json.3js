.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RESPONSE.JSON" "3JS" "March 13, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Response.json \- Response: json() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]json()\f[B]\f[R] method of the \f[CR]Response\f[R]
interface takes a \f[CR]Response\f[R] stream and reads it to completion.
It returns a promise which resolves with the result of parsing the body
text as \f[CR]JSON\f[R].
.PP
Note that despite the method being named \f[CR]json()\f[R], the result
is not JSON but is instead the result of taking JSON as input and
parsing it to produce a JavaScript object.
.SH SYNTAX
.IP
.EX
json()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that resolves to a JavaScript object.
This object could be anything that can be represented by JSON \(em an
object, an array, a string, a number\&...
.SS Exceptions
.TP
\f[B]DOMException\f[R] \f[B]AbortError\f[R]
The request was aborted.
.TP
\f[B]TypeError\f[R]
Thrown for one of the following reasons:
.RS
.IP \(bu 2
The response body is disturbed or locked.
.IP \(bu 2
There was an error decoding the body content (for example, because the
\f[CR]Content\-Encoding\f[R] header is incorrect).
.RE
.TP
\f[B]SyntaxError\f[R]
The response body cannot be parsed as JSON.
.SH EXAMPLES
In our \c
.UR https://github.com/mdn/dom-examples/tree/main/fetch/fetch-json
fetch JSON example
.UE \c
\ (run \c
.UR https://mdn.github.io/dom-examples/fetch/fetch-json/
fetch JSON live
.UE \c
), we create a new request using the \f[CR]Request()\f[R] constructor,
then use it to fetch a \f[CR].json\f[R] file.
When the fetch is successful, we read and parse the data using
\f[CR]json()\f[R], then read values out of the resulting objects as
you\(cqd expect and insert them into list items to display our product
data.
.IP
.EX
\f[B]const\f[R] myList = document.querySelector(\(dqul\(dq);
\f[B]const\f[R] myRequest = \f[B]new\f[R] Request(\(dqproducts.json\(dq);

fetch(myRequest)
  .then((response) \f[B]=>\f[R] response.json())
  .then((data) \f[B]=>\f[R] {
    \f[B]for\f[R] (\f[B]const\f[R] product \f[B]of\f[R] data.products) {
      \f[B]const\f[R] listItem = document.createElement(\(dqli\(dq);
      listItem.appendChild(document.createElement(\(dqstrong\(dq)).textContent =
        product.Name;
      listItem.append(\(ga can be found in ${product.Location}. Cost: \(ga);
      listItem.appendChild(document.createElement(\(dqstrong\(dq)).textContent =
        \(gaÂ£${product.Price}\(ga;
      myList.appendChild(listItem);
    }
  })
  .catch(console.error);
.EE
.SH SEE ALSO
.IP \(bu 2
ServiceWorker API
.IP \(bu 2
Cross\-Origin Resource Sharing (CORS)
.IP \(bu 2
HTTP
