.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WRITABLESTREAM" "3JS" "May 30, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStream \- WritableStream
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WritableStream\f[B]\f[R] interface of the Streams API
provides a standard abstraction for writing streaming data to a
destination, known as a sink.
This object comes with built\-in backpressure and queuing.
.PP
\f[CR]WritableStream\f[R] is a transferable object.
.SH CONSTRUCTOR
.TP
\f[B]WritableStream()\f[R]
Creates a new \f[CR]WritableStream\f[R] object.
.SH INSTANCE PROPERTIES
.TP
\f[B]WritableStream.locked\f[R] \f[I](read\-only)\f[R]
A boolean indicating whether the \f[CR]WritableStream\f[R] is locked to
a writer.
.SH INSTANCE METHODS
.TP
\f[B]WritableStream.abort()\f[R]
Aborts the stream, signaling that the producer can no longer
successfully write to the stream and it is to be immediately moved to an
error state, with any queued writes discarded.
.TP
\f[B]WritableStream.close()\f[R]
Closes the stream.
.TP
\f[B]WritableStream.getWriter()\f[R]
Returns a new instance of \f[CR]WritableStreamDefaultWriter\f[R] and
locks the stream to that instance.
While the stream is locked, no other writer can be acquired until this
one is released.
.SH EXAMPLES
The following example illustrates several features of this interface.
It creates the \f[CR]WritableStream\f[R] with a custom sink.
It then calls the stream\(cqs \f[CR]getWriter()\f[R] method, which
returns an instance of \f[CR]WritableStreamDefaultWriter\f[R].
Next, several strings are written to the stream.
Finally, \f[CR]close()\f[R] returns a promise that resolves when all the
writes have successfully completed.
.IP
.EX
\f[B]const\f[R] writableStream = \f[B]new\f[R] WritableStream(
  \f[I]// Implement the sink\f[R]
  {
    write(chunk) {
      \f[B]const\f[R] textElement = document.getElementById(\(dqtext\-output\(dq);
      textElement.textContent += chunk;
    },
  },
);

\f[B]const\f[R] writer = writableStream.getWriter();

\f[B]try\f[R] {
  writer.write(\(dqHello, \(dq);
  writer.write(\(dqworld!\(rsn\(dq);
  writer.write(\(dqThis has been a demo!\(rsn\(dq);

  \f[B]await\f[R] writer.close(); \f[I]// wait for all chunks to be written\f[R]
  console.log(\(dqAll chunks written\(dq);
} \f[B]catch\f[R] (error) {
  console.error(\(dqStream error: \(dq, error);
}
.EE
.PP
This example does not support the backpressure feature of Streams.
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://whatwg-stream-visualizer.glitch.me/
WHATWG Stream Visualizer
.UE \c
, for a basic visualization of readable, writable, and transform
streams.
