.\" Automatically generated by Pandoc 3.4
.\"
.TH "IDBObjectStore" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore \- IDBObjectStore
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]IDBObjectStore\f[B]\f[R] interface of the IndexedDB API
represents an object store in a database.
Records within an object store are sorted according to their keys.
This sorting enables fast insertion, look\-up, and ordered retrieval.
.SH INSTANCE PROPERTIES
.TP
\f[B]IDBObjectStore.indexNames\f[R] \f[I](read\-only)\f[R]
A list of the names of indexes on objects in this object store.
.TP
\f[B]IDBObjectStore.keyPath\f[R] \f[I](read\-only)\f[R]
The key path of this object store.
If this attribute is \f[CR]null\f[R], the application must provide a key
for each modification operation.
.TP
\f[B]IDBObjectStore.name\f[R]
The name of this object store.
.TP
\f[B]IDBObjectStore.transaction\f[R] \f[I](read\-only)\f[R]
The \f[CR]IDBTransaction\f[R] object to which this object store belongs.
.TP
\f[B]IDBObjectStore.autoIncrement\f[R] \f[I](read\-only)\f[R]
The value of the auto increment flag for this object store.
.SH INSTANCE METHODS
.TP
\f[B]IDBObjectStore.add()\f[R]
Returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread,
creates a \c
.UR https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#structured-clone
structured clone
.UE \c
\ of the \f[CR]value\f[R], and stores the cloned value in the object
store.
This is for adding new records to an object store.
.TP
\f[B]IDBObjectStore.clear()\f[R]
Creates and immediately returns an \f[CR]IDBRequest\f[R] object, and
clears this object store in a separate thread.
This is for deleting all current records out of an object store.
.TP
\f[B]IDBObjectStore.count()\f[R]
Returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread,
returns the total number of records that match the provided key or
\f[CR]IDBKeyRange\f[R].
If no arguments are provided, it returns the total number of records in
the store.
.TP
\f[B]IDBObjectStore.createIndex()\f[R]
Creates a new index during a version upgrade, returning a new
\f[CR]IDBIndex\f[R] object in the connected database.
.TP
\f[B]IDBObjectStore.delete()\f[R]
returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread,
deletes the store object selected by the specified key.
This is for deleting individual records out of an object store.
.TP
\f[B]IDBObjectStore.deleteIndex()\f[R]
Destroys the specified index in the connected database, used during a
version upgrade.
.TP
\f[B]IDBObjectStore.get()\f[R]
Returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread,
returns the store object store selected by the specified key.
This is for retrieving specific records from an object store.
.TP
\f[B]IDBObjectStore.getKey()\f[R]
Returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread
retrieves and returns the record key for the object in the object stored
matching the specified parameter.
.TP
\f[B]IDBObjectStore.getAll()\f[R]
Returns an \f[CR]IDBRequest\f[R] object retrieves all objects in the
object store matching the specified parameter or all objects in the
store if no parameters are given.
.TP
\f[B]IDBObjectStore.getAllKeys()\f[R]
Returns an \f[CR]IDBRequest\f[R] object retrieves record keys for all
objects in the object store matching the specified parameter or all
objects in the store if no parameters are given.
.TP
\f[B]IDBObjectStore.index()\f[R]
Opens an index from this object store after which it can, for example,
be used to return a sequence of records sorted by that index using a
cursor.
.TP
\f[B]IDBObjectStore.openCursor()\f[R]
Returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread,
returns a new \f[CR]IDBCursorWithValue\f[R] object.
Used for iterating through an object store by primary key with a cursor.
.TP
\f[B]IDBObjectStore.openKeyCursor()\f[R]
Returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread,
returns a new \f[CR]IDBCursor\f[R].
Used for iterating through an object store with a key.
.TP
\f[B]IDBObjectStore.put()\f[R]
Returns an \f[CR]IDBRequest\f[R] object, and, in a separate thread,
creates a \c
.UR https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#structured-clone
structured clone
.UE \c
\ of the \f[CR]value\f[R], and stores the cloned value in the object
store.
This is for updating existing records in an object store when the
transaction\[cq]s mode is \f[CR]readwrite\f[R].
.SH EXAMPLE
This example shows a variety of different uses of object stores, from
updating the data structure with \f[CR]IDBObjectStore.createIndex\f[R]
inside an \f[CR]onupgradeneeded\f[R] function, to adding a new item to
our object store with \f[CR]IDBObjectStore.add\f[R].
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in db.\f[R]
  db = DBOpenRequest.result;
};

\f[I]// This event handles the event whereby a new version of\f[R]
\f[I]// the database needs to be created Either one has not\f[R]
\f[I]// been created before, or a new version number has been\f[R]
\f[I]// submitted via the window.indexedDB.open line above\f[R]
DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Error loading database.\[dq];
  };

  \f[I]// Create an objectStore for this database\f[R]

  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]

  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });

  objectStore.createIndex(\[dq]notified\[dq], \[dq]notified\[dq], { unique: \f[B]false\f[R] });

  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Object store created.\[dq];
};

\f[I]// Create a new item to add in to the object store\f[R]
\f[B]const\f[R] newItem = [
  {
    taskTitle: \[dq]Walk dog\[dq],
    hours: 19,
    minutes: 30,
    day: 24,
    month: \[dq]December\[dq],
    year: 2013,
    notified: \[dq]no\[dq],
  },
];

\f[I]// open a read/write db transaction, ready for adding the data\f[R]
\f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

\f[I]// report on the success of the transaction completing, when everything is done\f[R]
transaction.oncomplete = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Transaction completed.\[dq];
};

transaction.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Transaction not opened due to error. Duplicate items not allowed.\[dq];
};

\f[I]// create an object store on the transaction\f[R]
\f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);
\f[I]// make a request to add our newItem object to the object store\f[R]
\f[B]const\f[R] objectStoreRequest = objectStore.add(newItem[0]);

objectStoreRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Request successful.\[dq];
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
