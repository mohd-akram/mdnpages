.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUBINDGROUP" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUBindGroup \- GPUBindGroup
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUBindGroup\f[B]\f[R] interface of the WebGPU API is
based on a \f[CR]GPUBindGroupLayout\f[R] and defines a set of resources
to be bound together in a group and how those resources are used in
shader stages.
.PP
A \f[CR]GPUBindGroup\f[R] object instance is created using the
\f[CR]GPUDevice.createBindGroup()\f[R] method.
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Basic example
Our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
\ shows an example of creating a bind group layout and then using that
as a template when creating a bind group.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] bindGroupLayout = device.createBindGroupLayout({
  entries: [
    {
      binding: 0,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {
        type: \(dqstorage\(dq,
      },
    },
  ],
});

\f[B]const\f[R] bindGroup = device.createBindGroup({
  layout: bindGroupLayout,
  entries: [
    {
      binding: 0,
      resource: {
        buffer: output,
      },
    },
  ],
});

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
