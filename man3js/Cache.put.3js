.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Cache.put" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Cache.put \- Cache: put() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]put()\f[B]\f[R] method of the \f[CR]Cache\f[R] interface
allows key/value pairs to be added to the current \f[CR]Cache\f[R]
object.
.PP
Often, you will just want to \f[CR]fetch()\f[R] one or more requests,
then add the result straight to your cache.
In such cases you are better off using
\f[CR]Cache.add()\f[R]/\f[CR]Cache.addAll()\f[R], as they are shorthand
functions for one or more of these operations.
.IP
.EX
fetch(url).then((response) \f[B]=>\f[R] {
  \f[B]if\f[R] (!response.ok) {
    \f[B]throw\f[R] \f[B]new\f[R] TypeError(\[dq]Bad response status\[dq]);
  }
  \f[B]return\f[R] cache.put(url, response);
});
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]put()\f[R] will overwrite any key/value pair
previously stored in the cache that matches the request.
.RE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Cache.add\f[R]/\f[CR]Cache.addAll\f[R] do not
cache responses with \f[CR]Response.status\f[R] values that are not in
the 200 range, whereas \f[CR]Cache.put\f[R] lets you store any
request/response pair.
As a result, \f[CR]Cache.add\f[R]/\f[CR]Cache.addAll\f[R] can\[cq]t be
used to store opaque responses, whereas \f[CR]Cache.put\f[R] can.
.RE
.SH SYNTAX
.IP
.EX
put(request, response)
.EE
.SS Parameters
.TP
\f[B]request\f[R]
The \f[CR]Request\f[R] object or URL that you want to add to the cache.
.TP
\f[B]response\f[R]
The \f[CR]Response\f[R] you want to match up to the request.
.SS Return value
A \f[CR]Promise\f[R] that resolves with \f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Returned if the URL scheme is not \f[CR]http\f[R] or \f[CR]https\f[R].
.SH EXAMPLES
This example is from the MDN \c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
simple\-service\-worker example
.UE \c
\ (see \c
.UR https://bncb2v.csb.app/
simple\-service\-worker running live
.UE \c
).
Here we wait for a \f[CR]FetchEvent\f[R] to fire.
We construct a custom response like so:
.IP "1." 3
Check whether a match for the request is found in the
\f[CR]CacheStorage\f[R] using \f[CR]CacheStorage.match()\f[R].
If so, serve that.
.IP "2." 3
If not, open the \f[CR]v1\f[R] cache using \f[CR]open()\f[R], put the
default network request in the cache using \f[CR]Cache.put()\f[R] and
return a clone of the default network request using
\f[CR]return response.clone()\f[R].
Clone is needed because \f[CR]put()\f[R] consumes the response body.
.IP "3." 3
If this fails (e.g., because the network is down), return a fallback
response.
.IP
.EX
\f[B]let\f[R] response;
\f[B]const\f[R] cachedResponse = caches
  .match(event.request)
  .then((r) \f[B]=>\f[R] (r !== \f[B]undefined\f[R] ? r : fetch(event.request)))
  .then((r) \f[B]=>\f[R] {
    response = r;
    caches.open(\[dq]v1\[dq]).then((cache) \f[B]=>\f[R] {
      cache.put(event.request, response);
    });
    \f[B]return\f[R] response.clone();
  })
  .catch(() \f[B]=>\f[R] caches.match(\[dq]/gallery/myLittleVader.jpg\[dq]));
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\f[CR]Cache\f[R]
.IP \[bu] 2
\f[CR]Window.caches\f[R] and \f[CR]WorkerGlobalScope.caches\f[R]
