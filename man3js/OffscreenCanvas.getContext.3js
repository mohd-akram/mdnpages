.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "OffscreenCanvas.getContext" "JS" "November 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OffscreenCanvas.getContext \- OffscreenCanvas: getContext() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]OffscreenCanvas.getContext()\f[B]\f[R] method returns a
drawing context for an offscreen canvas, or \f[CR]null\f[R] if the
context identifier is not supported, or the offscreen canvas has already
been set to a different context mode.
.SH SYNTAX
.IP
.EX
getContext(contextType, contextAttributes)
.EE
.SS Parameters
.TP
\f[B]contextType\f[R]
A string containing the context identifier defining the drawing context
associated to the canvas.
Possible values are:
.RS
.TP
\f[B]2d\f[R]
Creates a \f[CR]OffscreenCanvasRenderingContext2D\f[R] object
representing a two\-dimensional rendering context.
.TP
\f[B]webgl\f[R]
Creates a \f[CR]WebGLRenderingContext\f[R] object representing a
three\-dimensional rendering context.
This context is only available on browsers that implement WebGL version
1 (OpenGL ES 2.0).
.TP
\f[B]webgl2\f[R]
Creates a \f[CR]WebGL2RenderingContext\f[R] object representing a
three\-dimensional rendering context.
This context is only available on browsers that implement WebGL version
2 (OpenGL ES 3.0).
.TP
\f[B]\[dq]webgpu\[dq]\f[R]
Creates a \f[CR]GPUCanvasContext\f[R] object representing a
three\-dimensional rendering context for WebGPU render pipelines.
This context is only available on browsers that implement WebGPU API.
.TP
\f[B]bitmaprenderer\f[R]
Creates a \f[CR]ImageBitmapRenderingContext\f[R] which only provides
functionality to replace the content of the canvas with a given
\f[CR]ImageBitmap\f[R].
.RS
.PP
\f[B]Note:\f[R] The identifiers
\f[B]\f[CB]\[dq]experimental\-webgl\[dq]\f[B]\f[R] or
\f[B]\f[CB]\[dq]experimental\-webgl2\[dq]\f[B]\f[R] are also used in
implementations of WebGL.
These implementations have not reached test suite conformance, or the
graphic drivers situation on the platform is not yet stable.
The \c
.UR https://www.khronos.org/
Khronos Group
.UE \c
\ certifies WebGL implementations under certain \c
.UR https://registry.khronos.org/webgl/sdk/tests/CONFORMANCE_RULES.txt
conformance rules
.UE \c
\&.
.RE
.RE
.TP
\f[B]contextAttributes\f[R]
You can use several context attributes when creating your rendering
context, for example:
.RS
.IP
.EX
offscreen.getContext(\[dq]webgl\[dq], { antialias: \f[B]false\f[R], depth: \f[B]false\f[R] });
.EE
.PP
2d context attributes:
.TP
\f[B]alpha\f[R]
Boolean that indicates if the canvas contains an alpha channel.
If set to \f[CR]false\f[R], the browser now knows that the backdrop is
always opaque, which can speed up drawing of transparent content and
images then.
.TP
\f[B]willReadFrequently\f[R]
Boolean that indicates whether or not a lot of read\-back operations are
planned.
This will force the use of a software (instead of hardware accelerated)
2D canvas and can save memory when calling \f[CR]getImageData()\f[R]
frequently.
In Firefox this option is only available if the flag
\f[CR]gfx.canvas.willReadFrequently.enable\f[R] is set to
\f[CR]true\f[R] (which, by default, is only the case for B2G/Firefox
OS).
.PP
WebGL context attributes:
.TP
\f[B]alpha\f[R]
Boolean that indicates if the canvas contains an alpha buffer.
.TP
\f[B]depth\f[R]
Boolean that indicates that the drawing buffer is requested to have a
depth buffer of at least 16 bits.
.TP
\f[B]stencil\f[R]
Boolean that indicates that the drawing buffer is requested to have a
stencil buffer of at least 8 bits.
.TP
\f[B]antialias\f[R]
Boolean that indicates whether or not to perform anti\-aliasing if
possible.
.TP
\f[B]premultipliedAlpha\f[R]
Boolean that indicates that the page compositor will assume the drawing
buffer contains colors with pre\-multiplied alpha.
.TP
\f[B]preserveDrawingBuffer\f[R]
If the value is true the buffers will not be cleared and will preserve
their values until cleared or overwritten by the author.
.TP
\f[B]failIfMajorPerformanceCaveat\f[R]
Boolean that indicates if a context will be created if the system
performance is low.
.RE
.SS Return value
A rendering context which is either a
.IP \[bu] 2
\f[CR]OffscreenCanvasRenderingContext2D\f[R] for
\f[CR]\[dq]2d\[dq]\f[R],
.IP \[bu] 2
\f[CR]WebGLRenderingContext\f[R] for \f[CR]\[dq]webgl\[dq]\f[R] and
\f[CR]\[dq]experimental\-webgl\[dq]\f[R],
.IP \[bu] 2
\f[CR]WebGL2RenderingContext\f[R] for \f[CR]\[dq]webgl2\[dq]\f[R] and
\f[CR]\[dq]experimental\-webgl2\[dq]\f[R],
.IP \[bu] 2
\f[CR]GPUCanvasContext\f[R] for \f[CR]\[dq]webgpu\[dq]\f[R],
.IP \[bu] 2
\f[CR]ImageBitmapRenderingContext\f[R] for
\f[CR]\[dq]bitmaprenderer\[dq]\f[R].
.PP
If the context identifier is not supported, or the canvas has already
been set to a different context mode, \f[CR]null\f[R] is returned.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Throws if the canvas has transferred to another context scope, for
example, to worker.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] offscreen = \f[B]new\f[R] OffscreenCanvas(256, 256);
\f[B]const\f[R] gl = offscreen.getContext(\[dq]webgl\[dq]);

gl; \f[I]// WebGLRenderingContext\f[R]
gl.canvas; \f[I]// OffscreenCanvas\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]OffscreenCanvas\f[R]
.IP \[bu] 2
\f[CR]HTMLCanvasElement.getContext()\f[R]
.IP \[bu] 2
Available rendering contexts: \f[CR]CanvasRenderingContext2D\f[R],
\f[CR]WebGLRenderingContext\f[R], \f[CR]WebGL2RenderingContext\f[R],
\f[CR]ImageBitmapRenderingContext\f[R], and
\f[CR]OffscreenCanvasRenderingContext2D\f[R]
