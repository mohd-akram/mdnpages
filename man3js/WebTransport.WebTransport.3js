.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "WebTransport.WebTransport" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebTransport.WebTransport \- WebTransport: WebTransport() constructor
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebTransport()\f[B]\f[R] constructor creates a new
\f[CR]WebTransport\f[R] object instance.
.SH SYNTAX
.IP
.EX
new WebTransport(url)
new WebTransport(url, options)
.EE
.SS Parameters
.TP
\f[B]url\f[R]
A string representing the URL of the HTTP/3 server to connect to.
The scheme must be HTTPS, and the port number needs to be explicitly
specified.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that may have the following properties:
.RS
.TP
\f[B]allowPooling\f[R] \f[I](optional)\f[R]
A boolean value.
If \f[CR]true\f[R], the network connection for this
\f[CR]WebTransport\f[R] can be shared with a pool of other HTTP/3
sessions.
By default the value is \f[CR]false\f[R], and the connection cannot be
shared.
.TP
\f[B]congestionControl\f[R] \f[I](optional)\f[R]
A string indicating the application\[cq]s preference that the congestion
control algorithm used when sending data over this connection be tuned
for either throughput or low\-latency.
This is a hint to the user agent.
The allowed values are: \f[CR]default\f[R] (default),
\f[CR]throughput\f[R], and \f[CR]low\-latency\f[R].
.TP
\f[B]requireUnreliable\f[R] \f[I](optional)\f[R]
A boolean value.
If \f[CR]true\f[R], the connection cannot be established over HTTP/2 if
an HTTP/3 connection is not possible.
By default the value is \f[CR]false\f[R].
.TP
\f[B]serverCertificateHashes\f[R] \f[I](optional)\f[R]
An array of objects, each defining the hash value of a server
certificate along with the name of the algorithm that was used to
generate it.
This option is only supported for transports using dedicated connections
(\f[CR]allowPooling\f[R] is \f[CR]false\f[R]).
.RS
.PP
If specified, the browser will attempt to authenticate the certificate
provided by the server against the provided certificate hash(es) in
order to connect, instead of using the Web public key infrastructure
(PKI).
If any hashes match, the browser knows that the server has possession of
a trusted certificate and will connect as normal.
If empty the user agent uses the same PKI certificate verification
procedures it would use for a normal fetch operation.
.PP
This feature allows developers to connect to WebTransport servers that
would normally find obtaining a publicly trusted certificate
challenging, such as hosts that are not publicly routable, or ephemeral
hosts like virtual machines.
.RS
.PP
\f[B]Note:\f[R] The web application might typically fetch the hashes
from a trusted intermediary.
For example, you might use a cloud provider to provision VMs that run
your WebTransport servers.
The provider has trusted access to the server and can request its
certificate, generate hashes, and provide these to the application via
an API (which is mediated via PKI), or a cloud console.
The web application can now connect directly to the VM\-hosted server
using the supplied hashes, even though the VM itself does not have a
long\-lived TLS certificate.
.RE
.PP
The certificate must be an X.509v3 certificate that has a validity
period of less that 2 weeks, and the current time must be within that
validity period.
The format of the public key in the certificate depends on the
implementation, but must minimally include ECDSA with the secp256r1
(NIST P\-256) named group, and must not include RSA keys.
An ECSDA key is therefore an interoperable default public key format.
A user agent may add further requirements; these will be listed in the
browser compatibility section if known.
.PP
Each object in the array has the following properties:
.TP
\f[B]algorithm\f[R]
A string with the value: \f[CR]sha\-256\f[R] (case\-insensitive).
Note that this string represents the algorithm to use to verify the
hash, and that any hash using an unknown algorithm will be ignored.
At time of writing, \f[CR]SHA\-256\f[R] is the only hash algorithm
listed in the specification.
.TP
\f[B]value\f[R]
An \f[CR]ArrayBuffer\f[R] or \f[CR]TypedArray\f[R] containing the hash
value.
.RE
.RE
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]serverCertificateHashes\f[R] is specified but the
transport protocol does not support this feature.
.TP
\f[B]SyntaxError\f[R]
Thrown if the specified \f[CR]url\f[R] is invalid, if the scheme is not
HTTPS, or if the URL includes a fragment.
.TP
\f[B]TypeError\f[R]
Thrown if a \f[CR]serverCertificateHashes\f[R] is set for a
non\-dedicated connection (in other words, if \f[CR]allowPooling\f[R] is
\f[CR]true\f[R]).
.SH EXAMPLES
.SS Connecting with default options
This example shows how you might construct a \f[CR]WebTransport\f[R]
using just a URL, wait for it to connect, and then monitor the transport
and report when it has closed.
.PP
First we define an \f[CR]async\f[R] method that takes an URL and uses it
to construct the \f[CR]WebTransport\f[R] object.
No constructor options are specified, so the connection uses default
options: dedicated connection, support for unreliable transports is not
required, default congestion control, and normal Web PKI authentication
with the server.
Note that the scheme needs to be HTTPS, and the port number needs to be
explicitly specified.
.PP
Once the \f[CR]WebTransport.ready\f[R] promise fulfills, you can start
using the connection.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] initTransport(url) {
  \f[I]// Initialize transport connection\f[R]
  \f[B]const\f[R] transport = \f[B]new\f[R] WebTransport(url);

  \f[I]// The connection can be used once ready fulfills\f[R]
  \f[B]await\f[R] transport.ready;
  \f[B]return\f[R] transport;
}
.EE
.PP
You can respond to the connection closing by waiting for the
\f[CR]WebTransport.closed\f[R] promise to fulfill.
Errors returned by \f[CR]WebTransport\f[R] operations are of type
\f[CR]WebTransportError\f[R], and contain additional data on top of the
standard \f[CR]DOMException\f[R] set.
.PP
The \f[CR]closeTransport()\f[R] method below shows how.
Within a \f[CR]try...catch\f[R] block it uses \f[CR]await\f[R] to wait
for the \f[CR]closed\f[R] promise to fulfill or reject, and then reports
whether or not the connection closed intentionally or due to error.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] closeTransport(transport) {
  \f[I]// Respond to connection closing\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] transport.closed;
    console.log(\[ga]The HTTP/3 connection to ${url} closed gracefully.\[ga]);
  } \f[B]catch\f[R] (error) {
    console.error(\[ga]The HTTP/3 connection to ${url} closed due to ${error}.\[ga]);
  }
}
.EE
.PP
We might call the asynchronous functions above in their own asynchronous
function, as shown below.
.IP
.EX
\f[I]// Use the transport\f[R]
\f[B]async\f[R] \f[B]function\f[R] useTransport(url) {
  \f[B]const\f[R] transport = \f[B]await\f[R] initTransport(url);

  \f[I]// Use the transport object to send and receive data\f[R]
  \f[I]// ...\f[R]

  \f[I]// When done, close the transport\f[R]
  \f[B]await\f[R] closeTransport(transport);
}

\f[B]const\f[R] url = \[dq]https://example.com:4999/wt\[dq];
useTransport(url);
.EE
.SS Connecting with server certificate hashes
The example below shows the code to construct a \f[CR]WebTransport\f[R]
that specifies the \f[CR]serverCertificateHashes\f[R] option.
In this case the array contains two hashes, both encoded using the
SHA\-256 algorithm.
Note that the \f[CR]allowPooling\f[R] option must be \f[CR]false\f[R]
(the default).
.IP
.EX
\f[B]const\f[R] transport = \f[B]new\f[R] WebTransport(url, {
  serverCertificateHashes: [
    {
      algorithm: \[dq]sha\-256\[dq],
      value: \[dq]5a155927eba7996228455e4721e6fe5f739ae15db6915d765e5db302b4f8a274\[dq],
    },
    {
      algorithm: \[dq]sha\-256\[dq],
      value: \[dq]7d7094e7a8d3097feff3b5ee84fa5cab58e4de78f38bcfdee5ea8b51f4bfa8fd\[dq],
    },
  ],
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/webtransport
Using WebTransport
.UE \c
.IP \[bu] 2
WebSockets API
.IP \[bu] 2
Streams API
.IP \[bu] 2
\c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/
WebTransport over HTTP/3
.UE \c
