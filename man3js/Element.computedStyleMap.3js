.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.COMPUTEDSTYLEMAP" "3JS" "May 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.computedStyleMap \- Element: computedStyleMap() method
.SH SYNOPSIS
The \f[B]\f[CB]computedStyleMap()\f[B]\f[R] method of the
\f[CR]Element\f[R] interface returns a
\f[CR]StylePropertyMapReadOnly\f[R] interface which provides a
read\-only representation of a CSS declaration block that is an
alternative to \f[CR]CSSStyleDeclaration\f[R].
.SH SYNTAX
.IP
.EX
computedStyleMap()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]StylePropertyMapReadOnly\f[R] object.
.PP
Unlike \f[CR]Window.getComputedStyle\f[R], the return value contains
computed values, not resolved values.
For most properties, they are the same, except a few layout\-related
properties, where the resolved value is the used value instead of the
computed value.
See the comparison with \f[CR]getComputedStyle()\f[R] example for
details.
.SH EXAMPLES
.SS Getting default styles
We start with some simple HTML: a paragraph with a link, and a
definition list to which we will add all the CSS Property / Value pairs.
.IP
.EX
<\f[B]p\f[R]>
  <\f[B]a\f[R] href=\(dqhttps://example.com\(dq>Link</\f[B]a\f[R]>
</\f[B]p\f[R]>
<\f[B]dl\f[R] id=\(dqregurgitation\(dq></\f[B]dl\f[R]>
.EE
.PP
We add a little bit of CSS
.IP
.EX
a {
  \-\-color: red;
  \f[B]color\f[R]: var(\-\-color);
}
.EE
.PP
We add JavaScript to grab our link and return back a definition list of
all the CSS property values using \f[CR]computedStyleMap()\f[R].
.IP
.EX
\f[I]// get the element\f[R]
\f[B]const\f[R] myElement = document.querySelector(\(dqa\(dq);

\f[I]// get the <dl> we\(aqll be populating\f[R]
\f[B]const\f[R] stylesList = document.querySelector(\(dq#regurgitation\(dq);

\f[I]// Retrieve all computed styles with computedStyleMap()\f[R]
\f[B]const\f[R] allComputedStyles = myElement.computedStyleMap();

\f[I]// iterate through the map of all the properties and values, adding a <dt> and <dd> for each\f[R]
\f[B]for\f[R] (\f[B]const\f[R] [prop, val] \f[B]of\f[R] allComputedStyles) {
  \f[I]// properties\f[R]
  \f[B]const\f[R] cssProperty = document.createElement(\(dqdt\(dq);
  cssProperty.appendChild(document.createTextNode(prop));
  stylesList.appendChild(cssProperty);

  \f[I]// values\f[R]
  \f[B]const\f[R] cssValue = document.createElement(\(dqdd\(dq);
  cssValue.appendChild(document.createTextNode(val));
  stylesList.appendChild(cssValue);
}
.EE
.PP
In browsers that support \f[CR]computedStyleMap()\f[R], you\(cqll see a
list of all the CSS properties and values.
In other browsers you\(cqll just see a link.
.PP
Did you realize how many default CSS properties a link had?
Update the \f[CR]document.querySelector(\(dqa\(dq)\f[R] to
\f[CR]document.querySelector(\(dqp\(dq)\f[R], and you\(cqll notice a
difference in the \f[CR]margin\-top\f[R] and \f[CR]margin\-bottom\f[R]
default computed values.
.SS Comparison with getComputedStyle()
\f[CR]Window.getComputedStyle()\f[R] returns resolved values, while
\f[CR]computedStyleMap()\f[R] returns computed values.
These are usually the same, but for some properties, the resolved value
is the used value instead of the computed value.
For example, percentage values for widths are resolved to pixel values
\f[I]post\-layout\f[R], so the used values are in pixels, while the
computed values are still in percentages.
.PP
Note that the way we present it makes the two APIs seem more similar
than they are.
\f[CR]computedStyleMap()\f[R] contains CSS Typed OM objects, while
\f[CR]getComputedStyle()\f[R] contains strings.
The former presents the same information in a more structured and
processable way.
.PP
In this example, the \f[CR]width\f[R] property is specified as a
percentage, so the computed value is given as a percentage, but the
resolved value is given in pixels.
The \f[CR]height\f[R] is always in pixels.
The \f[CR]background\-color\f[R] is a named color, but it is computed to
an RGB value.
.IP
.EX
<\f[B]div\f[R] class=\(dqcontainer\(dq>
  <\f[B]div\f[R] class=\(dqitem\(dq></\f[B]div\f[R]>
</\f[B]div\f[R]>
<\f[B]pre\f[R] id=\(dqresult\(dq></\f[B]pre\f[R]>
.EE
.IP
.EX
\&.container {
  \f[B]width\f[R]: 200px;
  \f[B]height\f[R]: 200px;
}

\&.item {
  \f[B]width\f[R]: 50%;
  \f[B]height\f[R]: 100px;
  \f[B]background\-color\f[R]: tomato;
}
.EE
.IP
.EX
\f[B]const\f[R] item = document.querySelector(\(dq.item\(dq);
\f[B]const\f[R] result = document.querySelector(\(dq#result\(dq);
\f[B]const\f[R] resolvedValues = getComputedStyle(item);
\f[B]const\f[R] computedValues = item.computedStyleMap();

result.textContent = \(garesolvedValues.width = ${resolvedValues.width}
computedValues.get(\(dqwidth\(dq) = ${computedValues.get(\(dqwidth\(dq)}

resolvedValues.height = ${resolvedValues.height}
computedValues.get(\(dqheight\(dq) = ${computedValues.get(\(dqheight\(dq)}

resolvedValues.backgroundColor = ${resolvedValues.backgroundColor}
computedValues.get(\(dqbackground\-color\(dq) = ${computedValues.get(
  \(dqbackground\-color\(dq,
)}\(ga;
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Window.getComputedStyle()\f[R]
