.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "EventSource.message_event" "JS" "October 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
EventSource.message_event \- EventSource: message event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]message\f[B]\f[R] event of the \f[CR]EventSource\f[R]
interface is fired when data is received through an event source.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {});

onmessage = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
In this basic example, an \f[CR]EventSource\f[R] is created to receive
events from the server; a page with the name \f[CR]sse.php\f[R] is
responsible for generating the events.
.IP
.EX
\f[B]const\f[R] evtSource = \f[B]new\f[R] EventSource(\[dq]sse.php\[dq]);
\f[B]const\f[R] eventList = document.querySelector(\[dq]ul\[dq]);

evtSource.addEventListener(\[dq]message\[dq], (e) \f[B]=>\f[R] {
  \f[B]const\f[R] newElement = document.createElement(\[dq]li\[dq]);

  newElement.textContent = \[ga]message: ${e.data}\[ga];
  eventList.appendChild(newElement);
});
.EE
.SS onmessage equivalent
.IP
.EX
evtSource.onmessage = (e) \f[B]=>\f[R] {
  \f[B]const\f[R] newElement = document.createElement(\[dq]li\[dq]);

  newElement.textContent = \[ga]message: ${e.data}\[ga];
  eventList.appendChild(newElement);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using server\-sent events
.IP \[bu] 2
\f[CR]open\f[R]
.IP \[bu] 2
\f[CR]error\f[R]
