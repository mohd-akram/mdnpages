.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCIceCandidateStats.deleted" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCIceCandidateStats.deleted \- RTCIceCandidateStats: deleted property
.SH SYNOPSIS
The \f[CR]RTCIceCandidateStats\f[R] dictionary\[cq]s
\f[B]\f[CB]deleted\f[B]\f[R] property indicates whether or not the
candidate has been deleted or released.
.SH VALUE
A Boolean value indicating whether or not the candidate has been deleted
or released.
If this value is \f[CR]true\f[R], the candidate described by the
\f[CR]RTCIceCandidateStats\f[R] object is no longer under consideration.
The exact meaning varies depending on the type of candidate:
.TP
\f[B]Local candidate\f[R]
A value of \f[CR]true\f[R] means the candidate has been deleted as
described by RFC 5245, section 8.3).
.TP
\f[B]Host candidate\f[R]
A value of \f[CR]true\f[R] indicates that the candidate\[cq]s network
resources have been released.
This generally mean that any associated socket(s) have been closed and
released.
.TP
\f[B]Remote (TURN) candidate\f[R]
A value of \f[CR]true\f[R] means the candidate\[cq]s TURN allocation is
no longer active.
.PP
The net result is the same; the candidate is no longer under
consideration if this value is \f[CR]true\f[R].
.SH EXAMPLES
In this example, \f[CR]setInterval()\f[R] is used to set up a function
that runs periodically to display the latest statistics for candidates.
Only candidates which have not been deleted are included in the output.
.IP
.EX
setInterval(() \f[B]=>\f[R] {
  myPeerConnection.getStats(\f[B]null\f[R]).then((stats) \f[B]=>\f[R] {
    \f[B]let\f[R] statsOutput = \[dq]\[dq];

    stats.forEach((report) \f[B]=>\f[R] {
      \f[B]if\f[R] (
        (stats.type === \[dq]local\-candidate\[dq] ||
          stats.type === \[dq]remote.candidate\[dq]) &&
        !stats.deleted
      ) {
        statsOutput +=
          \[ga]<h2>Report: ${report.type}</h3>\[rs]n<strong>ID:</strong> ${report.id}<br>\[rs]n\[ga] +
          \[ga]<strong>Timestamp:</strong> ${report.timestamp}<br>\[rs]n\[ga];

        \f[I]// Now the statistics for this report; we intentionally drop the ones we\f[R]
        \f[I]// sorted to the top above\f[R]
        Object.keys(report).forEach((statName) \f[B]=>\f[R] {
          \f[B]if\f[R] (
            statName !== \[dq]id\[dq] &&
            statName !== \[dq]timestamp\[dq] &&
            statName !== \[dq]type\[dq]
          ) {
            statsOutput += \[ga]<strong>${statName}:</strong> ${report[statName]}<br>\[rs]n\[ga];
          }
        });
      }
    });

    document.querySelector(\[dq].stats\-box\[dq]).innerHTML = statsOutput;
  });
}, 1000);
.EE
