.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.CHECKVISIBILITY" "3JS" "May 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.checkVisibility \- Element: checkVisibility() method
.SH SYNOPSIS
The \f[B]\f[CB]checkVisibility()\f[B]\f[R] method of the
\f[CR]Element\f[R] interface checks whether the element is visible.
.PP
The method returns \f[CR]false\f[R] in either of the following
situations:
.IP \(bu 2
The element doesn\(cqt have an associated box, for example because the
CSS \f[CR]display\f[R] property is set to \f[CR]none\f[R] or
\f[CR]contents\f[R].
.IP \(bu 2
The element is not being rendered because the element or an ancestor
element sets the \f[CR]content\-visibility\f[R] property to
\f[CR]hidden\f[R].
.PP
The optional parameter enables additional checks to test for other
interpretations of what \(lqvisible\(rq means.
For example, you can further check whether an element has an opacity of
\f[CR]0\f[R], if the value of the element \f[CR]visibility\f[R] property
makes it invisible, or if the element \f[CR]content\-visibility\f[R]
property has a value of \f[CR]auto\f[R] and its rendering is currently
being skipped.
.SH SYNTAX
.IP
.EX
checkVisibility(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object indicating additional checks to run.
The possible options are:
.RS
.TP
\f[B]contentVisibilityAuto\f[R]
\f[CR]true\f[R] to check if the element \f[CR]content\-visibility\f[R]
property has (or inherits) the value \f[CR]auto\f[R], and it is
currently skipping its rendering.
\f[CR]false\f[R] by default.
.TP
\f[B]opacityProperty\f[R]
\f[CR]true\f[R] to check if the element \f[CR]opacity\f[R] property has
(or inherits) a value of \f[CR]0\f[R].
\f[CR]false\f[R] by default.
.TP
\f[B]visibilityProperty\f[R]
\f[CR]true\f[R] to check if the element is invisible due to the value of
its \f[CR]visibility\f[R] property.
\f[CR]false\f[R] by default.
.RS
.RS
.PP
\f[B]Note:\f[R] Invisible elements include those that have
\f[CR]visibility: hidden\f[R], and some element types that have
\f[CR]visibility: collapse\f[R].
.RE
.RE
.TP
\f[B]checkOpacity\f[R]
A historic alias for \f[CR]opacityProperty\f[R].
.TP
\f[B]checkVisibilityCSS\f[R]
A historic alias for \f[CR]visibilityProperty\f[R].
.RE
.SS Return value
\f[CR]false\f[R] if any of the following conditions are met, otherwise
\f[CR]true\f[R]:
.IP \(bu 2
The element doesn\(cqt have an associated box.
.IP \(bu 2
The element \f[CR]content\-visibility\f[R] property has (or inherits) a
value of \f[CR]hidden\f[R].
.IP \(bu 2
\f[CR]opacityProperty\f[R] (or \f[CR]checkOpacity\f[R]) is
\f[CR]true\f[R] and the element \f[CR]opacity\f[R] property has (or
inherits) a value of \f[CR]0\f[R].
.IP \(bu 2
\f[CR]visibilityProperty\f[R] (or \f[CR]checkVisibilityCSS\f[R]) is
\f[CR]true\f[R] and the element is invisible due to the value of its
\f[CR]visibility\f[R] property.
.IP \(bu 2
\f[CR]contentVisibilityAuto\f[R] is \f[CR]true\f[R], the
\f[CR]content\-visibility\f[R] property has (or inherits) a value of
\f[CR]auto\f[R], and element rendering is being skipped.
.SH EXAMPLES
.SS Test checkVisibility() with varied CSS
The following example allows you to test how the result of
\f[CR]checkVisibility()\f[R] might change with different values for
\f[CR]display\f[R], \f[CR]content\-visibility\f[R],
\f[CR]visibility\f[R], and \f[CR]opacity\f[R] CSS properties.
.SS HTML
The HTML defines a \f[CR]<select>\f[R] element for the CSS properties
that affect the results of \f[CR]checkVisibility()\f[R].
The first (default selected) values should result in
\f[CR]checkVisibility()\f[R] returning \f[CR]true\f[R] when applied to
an element, while the other values affect the visibility.
.IP
.EX
<\f[B]select\f[R] id=\(dqcss_display\(dq name=\(dqcss_display\(dq>
  <\f[B]option\f[R] value=\(dqblock\(dq selected>display: block</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\(dqnone\(dq>display: none</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\(dqcontent\(dq>display: content</\f[B]option\f[R]>
</\f[B]select\f[R]>

<\f[B]select\f[R] id=\(dqcss_content_visibility\(dq name=\(dqcss_content_visibility\(dq>
  <\f[B]option\f[R] value=\(dqvisible\(dq selected>content\-visibility: visible</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\(dqhidden\(dq>content\-visibility: hidden</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\(dqauto\(dq>content\-visibility: auto</\f[B]option\f[R]>
</\f[B]select\f[R]>

<\f[B]select\f[R] id=\(dqcss_opacity\(dq name=\(dqcss_opacity\(dq>
  <\f[B]option\f[R] value=\(dq1\(dq selected>opacity: 1</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\(dq0\(dq>opacity: 0</\f[B]option\f[R]>
</\f[B]select\f[R]>

<\f[B]select\f[R] id=\(dqcss_visibility\(dq name=\(dqcss_visibility\(dq>
  <\f[B]option\f[R] value=\(dqvisible\(dq selected>visibility: visible</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\(dqhidden\(dq>visibility: hidden</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\(dqcollapse\(dq>visibility: collapse</\f[B]option\f[R]>
</\f[B]select\f[R]>
.EE
.PP
Next we have a \f[CR]<pre>\f[R] that is used to output the result of the
\f[CR]checkVisibility()\f[R] check when no options are passed in the
parameter, and for each separate option value.
At the end we have the element that will be tested (to which we will
apply the selected CSS property values).
.IP
.EX
<\f[B]pre\f[R] id=\(dqoutput_result\(dq></\f[B]pre\f[R]>
<\f[B]div\f[R] id=\(dqtest_element\(dq>The element to be checked for visibility.</\f[B]div\f[R]>
.EE
.SS CSS
The CSS just highlights the element to be tested.
.IP
.EX
test_element {
  \f[B]border\f[R]: solid;
  \f[B]border\-color\f[R]: blue;
}
.EE
.SS JavaScript
The code below gets each of the \f[CR]<select>\f[R] elements.
The \f[CR]updateCSS()\f[R] method is called on start and whenever the
select elements change in order to apply the selected CSS to the target
element,
.IP
.EX
\f[B]const\f[R] displayCssSelect = document.getElementById(\(dqcss_display\(dq);
\f[B]const\f[R] contentVisibilityCssSelect = document.getElementById(
  \(dqcss_content_visibility\(dq,
);
\f[B]const\f[R] displayCssOpacity = document.getElementById(\(dqcss_opacity\(dq);
\f[B]const\f[R] displayCssVisibility = document.getElementById(\(dqcss_visibility\(dq);

\f[B]const\f[R] outputResult = document.getElementById(\(dqoutput_result\(dq);
\f[B]const\f[R] elementToCheck = document.getElementById(\(dqtest_element\(dq);

updateCSS();

\f[B]const\f[R] cssSelectors = document.querySelectorAll(\(dqselect\(dq);
cssSelectors.forEach((select) \f[B]=>\f[R] {
  select.addEventListener(\(dqchange\(dq, (event) \f[B]=>\f[R] {
    updateCSS();
  });
});

\f[B]function\f[R] updateCSS() {
  \f[I]// Apply selected CSS properties to target element\f[R]
  elementToCheck.style.display = displayCssSelect.value;
  elementToCheck.style.contentVisibility = contentVisibilityCssSelect.value;
  elementToCheck.style.opacity = displayCssOpacity.value;
  elementToCheck.style.visibility = displayCssVisibility.value;

  \f[I]// Call checkVisibility() on element using default and each of options\f[R]
  \f[B]const\f[R] defaultVisibilityCheck = elementToCheck.checkVisibility();
  \f[B]const\f[R] opacityVisibilityCheck = elementToCheck.checkVisibility({
    opacityProperty: \f[B]true\f[R],
  });
  \f[B]const\f[R] cssVisibilityCheck = elementToCheck.checkVisibility({
    visibilityProperty: \f[B]true\f[R],
  });
  \f[B]const\f[R] contentVisibilityAutoCheck = elementToCheck.checkVisibility({
    contentVisibilityAuto: \f[B]true\f[R],
  });

  \f[I]// Output the results of the tests\f[R]
  outputResult.innerText = \(gaChecks on element below (may be hidden):
\- Result of checkVisibility(): ${defaultVisibilityCheck}
\- Result of checkVisibility({opacityProperty: true}): ${opacityVisibilityCheck}
\- Result of checkVisibility({visibilityProperty: true}): ${cssVisibilityCheck}
\- Result of checkVisibility({contentVisibilityAuto: true}): ${contentVisibilityAutoCheck}\(ga;
}
.EE
.SS Result
The results are shown below.
If you change the selection the results will be applied to the test
element (blue outline) and the results of the
\f[CR]checkVisibility()\f[R] for each setting should be displayed.
So for example, if you set the \f[CR]opacity: 0\f[R] that test (only)
should indicate \f[CR]false\f[R].
However if you set \f[CR]display: none\f[R] then all tests should return
\f[CR]false\f[R].
