.\" Automatically generated by Pandoc 3.4
.\"
.TH "PerformanceResourceTiming.redirectEnd" "JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.redirectEnd \- PerformanceResourceTiming:
redirectEnd property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]redirectEnd\f[B]\f[R] read\-only property returns a
\f[CR]timestamp\f[R] immediately after receiving the last byte of the
response of the last redirect.
.PP
When fetching a resource, if there are multiple HTTP redirects, and any
of the redirects have an origin that is different from the current
document, and the timing allow check algorithm passes for each
redirected resource, this property returns the time immediately after
receiving the last byte of the response of the last redirect; otherwise,
zero is returned.
.PP
To get the amount of redirects, see also
\f[CR]PerformanceNavigationTiming.redirectCount\f[R].
.SH VALUE
The \f[CR]redirectEnd\f[R] property can have the following values:
.IP \[bu] 2
A \f[CR]timestamp\f[R] immediately after receiving the last byte of the
response of the last redirect.
.IP \[bu] 2
\f[CR]0\f[R] if there is no redirect.
.IP \[bu] 2
\f[CR]0\f[R] if the resource is a cross\-origin request and no
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header is used.
.SH EXAMPLES
.SS Measuring redirection time
The \f[CR]redirectEnd\f[R] and \f[CR]redirectStart\f[R] properties can
be used to measure how long the redirection takes.
.IP
.EX
\f[B]const\f[R] redirect = entry.redirectEnd \- entry.redirectStart;
.EE
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]const\f[R] redirect = entry.redirectEnd \- entry.redirectStart;
    \f[B]if\f[R] (redirect > 0) {
      console.log(\[ga]${entry.name}: Redirect time: ${redirect}ms\[ga]);
    }
  });
});

observer.observe({ type: \[dq]resource\[dq], buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) \f[B]=>\f[R] {
  \f[B]const\f[R] redirect = entry.redirectEnd \- entry.redirectStart;
  \f[B]if\f[R] (redirect > 0) {
    console.log(\[ga]${entry.name}: Redirect time: ${redirect}ms\[ga]);
  }
});
.EE
.SS Cross\-origin timing information
If the value of the \f[CR]redirectEnd\f[R] property is \f[CR]0\f[R], the
resource might be a cross\-origin request.
To allow seeing cross\-origin timing information, the
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header needs to be set.
.PP
For example, to allow \f[CR]https://developer.mozilla.org\f[R] to see
timing resources, the cross\-origin resource should send:
.IP
.EX
Timing\-Allow\-Origin: https://developer.mozilla.org
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]PerformanceNavigationTiming.redirectCount\f[R]
.IP \[bu] 2
\f[CR]Timing\-Allow\-Origin\f[R]
