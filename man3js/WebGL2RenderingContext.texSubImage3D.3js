.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "WebGL2RenderingContext.texSubImage3D" "JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGL2RenderingContext.texSubImage3D \- WebGL2RenderingContext:
texSubImage3D() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGL2RenderingContext.texSubImage3D()\f[B]\f[R] method
of the WebGL API specifies a sub\-rectangle of the current texture.
.SH SYNTAX
.IP
.EX
texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, offset)
texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, srcData)
texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, srcData, srcOffset)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A \f[CR]GLenum\f[R] specifying the binding point (target) of the active
texture.
Possible values:
.RS
.IP \[bu] 2
\f[CR]gl.TEXTURE_3D\f[R]: A three\-dimensional texture.
.IP \[bu] 2
\f[CR]gl.TEXTURE_2D_ARRAY\f[R]: A two\-dimensional array texture.
.RE
.TP
\f[B]level\f[R]
A \f[CR]GLint\f[R] specifying the level of detail.
Level 0 is the base image level and level \f[I]n\f[R] is the n\-th
mipmap reduction level.
.TP
\f[B]xoffset\f[R]
A \f[CR]GLint\f[R] specifying the x offset within the texture image.
.TP
\f[B]yoffset\f[R]
A \f[CR]GLint\f[R] specifying the y offset within the texture image.
.TP
\f[B]zoffset\f[R]
A \f[CR]GLint\f[R] specifying the z offset within the texture image.
.TP
\f[B]width\f[R]
A \f[CR]GLsizei\f[R] specifying the width of the texture.
.TP
\f[B]height\f[R]
A \f[CR]GLsizei\f[R] specifying the height of the texture.
.TP
\f[B]depth\f[R]
A \f[CR]GLsizei\f[R] specifying the depth of the texture.
.TP
\f[B]format\f[R]
A \f[CR]GLenum\f[R] specifying the format of the texel data.
Possible values:
.RS
.IP \[bu] 2
\f[CR]gl.ALPHA\f[R]: Discards the red, green and blue components and
reads the alpha component.
.IP \[bu] 2
\f[CR]gl.RGB\f[R]: Discards the alpha components and reads the red,
green and blue components.
.IP \[bu] 2
\f[CR]gl.RGBA\f[R]: Red, green, blue and alpha components are read from
the color buffer.
.IP \[bu] 2
\f[CR]gl.LUMINANCE\f[R]: Each color component is a luminance component,
alpha is 1.0.
.IP \[bu] 2
\f[CR]gl.LUMINANCE_ALPHA\f[R]: Each component is a luminance/alpha
component.
.IP \[bu] 2
\f[CR]gl.R8\f[R]
.IP \[bu] 2
\f[CR]gl.R16F\f[R]
.IP \[bu] 2
\f[CR]gl.R32F\f[R]
.IP \[bu] 2
\f[CR]gl.R8UI\f[R]
.IP \[bu] 2
\f[CR]gl.RG8\f[R]
.IP \[bu] 2
\f[CR]gl.RG16F\f[R]
.IP \[bu] 2
\f[CR]gl.RG32F\f[R]
.IP \[bu] 2
\f[CR]gl.RGUI\f[R]
.IP \[bu] 2
\f[CR]gl.RGB8\f[R]
.IP \[bu] 2
\f[CR]gl.SRGB8\f[R]
.IP \[bu] 2
\f[CR]gl.RGB565\f[R]
.IP \[bu] 2
\f[CR]gl.R11F_G11F_B10F\f[R]
.IP \[bu] 2
\f[CR]gl.RGB9_E5\f[R]
.IP \[bu] 2
\f[CR]gl.RGB16F\f[R]
.IP \[bu] 2
\f[CR]gl.RGB32F\f[R]
.IP \[bu] 2
\f[CR]gl.RGB8UI\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA8\f[R]
.IP \[bu] 2
\f[CR]gl.SRGB_ALPHA8\f[R]
.IP \[bu] 2
\f[CR]gl.RGB5_A1\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA4444\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA16F\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA32F\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA8UI\f[R]
.RE
.TP
\f[B]type\f[R]
A \f[CR]GLenum\f[R] specifying the data type of the texel data.
Possible values:
.RS
.IP \[bu] 2
\f[CR]gl.UNSIGNED_BYTE\f[R]: 8 bits per channel for \f[CR]gl.RGBA\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_5_6_5\f[R]: 5 red bits, 6 green bits, 5 blue
bits.
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_4_4_4_4\f[R]: 4 red bits, 4 green bits, 4 blue
bits, 4 alpha bits.
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_5_5_5_1\f[R]: 5 red bits, 5 green bits, 5 blue
bits, 1 alpha bit.
.IP \[bu] 2
\f[CR]gl.BYTE\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT\f[R]
.IP \[bu] 2
\f[CR]gl.SHORT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT\f[R]
.IP \[bu] 2
\f[CR]gl.INT\f[R]
.IP \[bu] 2
\f[CR]gl.HALF_FLOAT\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_2_10_10_10_REV\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_10F_11F_11F_REV\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_5_9_9_9_REV\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_24_8\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_32_UNSIGNED_INT_24_8_REV\f[R] (pixels must be
\f[CR]null\f[R])
.RE
.TP
\f[B]pixels\f[R]
One of the following objects can be used as a pixel source for the
texture:
.RS
.IP \[bu] 2
\f[CR]Uint8Array\f[R] (must be used if \f[CR]type\f[R] is
\f[CR]gl.UNSIGNED_BYTE\f[R])
.IP \[bu] 2
\f[CR]Uint16Array\f[R] (must be used if \f[CR]type\f[R] is either
\f[CR]gl.UNSIGNED_SHORT_5_6_5\f[R],
\f[CR]gl.UNSIGNED_SHORT_4_4_4_4\f[R],
\f[CR]gl.UNSIGNED_SHORT_5_5_5_1\f[R], or \f[CR]ext.HALF_FLOAT_OES\f[R])
.IP \[bu] 2
\f[CR]Float32Array\f[R] (must be used if \f[CR]type\f[R] is
\f[CR]gl.FLOAT\f[R])
.IP \[bu] 2
\f[CR]ImageBitmap\f[R]
.IP \[bu] 2
\f[CR]ImageData\f[R]
.IP \[bu] 2
\f[CR]HTMLImageElement\f[R]
.IP \[bu] 2
\f[CR]HTMLCanvasElement\f[R]
.IP \[bu] 2
\f[CR]HTMLVideoElement\f[R]
.RE
.TP
\f[B]srcData\f[R]
A \f[CR]TypedArray\f[R] or a \f[CR]DataView\f[R] object.
.TP
\f[B]offset\f[R]
A \f[CR]GLintptr\f[R] byte offset into the \f[CR]WebGLBuffer\f[R]\[cq]s
data store.
Used to upload data to the currently bound \f[CR]WebGLTexture\f[R] from
the \f[CR]WebGLBuffer\f[R] bound to the \f[CR]PIXEL_UNPACK_BUFFER\f[R]
target.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.IP
.EX
gl.texSubImage3D(
  gl.TEXTURE_3D,
  0,
  0,
  0,
  0,
  image.width,
  image.height,
  1,
  gl.RGBA,
  gl.UNSIGNED_BYTE,
  image,
);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.createTexture()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.bindTexture()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.texImage2D()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.compressedTexImage2D()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.copyTexImage2D()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getTexParameter()\f[R]
