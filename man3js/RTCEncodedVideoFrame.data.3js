.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCEncodedVideoFrame.data" "JS" "April 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCEncodedVideoFrame.data \- RTCEncodedVideoFrame: data property
.SH SYNOPSIS
This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]data\f[B]\f[R] property of the
\f[CR]RTCEncodedVideoFrame\f[R] interface returns a buffer containing
the frame data.
.SH VALUE
An \f[CR]ArrayBuffer\f[R].
.SH EXAMPLES
This example WebRTC encoded transform shows how you might get the frame
data in a \f[CR]TransformStream\f[R] \f[CR]transform()\f[R] function and
negate all the bits.
.PP
The \f[CR]transform()\f[R] function constructs a \f[CR]DataView\f[R] on
the buffer in the frame \f[CR]data\f[R] property, and also creates a
view on a new \f[CR]ArrayBuffer\f[R].
It then writes the inverted bytes in the original data to the new
buffer, assigns the buffer to the encoded frame \f[CR]data\f[R]
property, and enqueues the modified frame on the stream.
.IP
.EX
addEventListener(\[dq]rtctransform\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] transform = \f[B]new\f[R] TransformStream({
    \f[B]async\f[R] transform(encodedFrame, controller) {
      \f[I]// Reconstruct the original frame.\f[R]
      \f[B]const\f[R] view = \f[B]new\f[R] DataView(encodedFrame.data);

      \f[I]// Construct a new buffer\f[R]
      \f[B]const\f[R] newData = \f[B]new\f[R] ArrayBuffer(encodedFrame.data.byteLength);
      \f[B]const\f[R] newView = \f[B]new\f[R] DataView(newData);

      \f[I]// Negate all bits in the incoming frame\f[R]
      \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < encodedFrame.data.byteLength; ++i) {
        newView.setInt8(i, \[ti]view.getInt8(i));
      }

      encodedFrame.data = newData;
      controller.enqueue(encodedFrame);
    },
  });
  event.transformer.readable
    .pipeThrough(transform)
    .pipeTo(event.transformer.writable);
});
.EE
.PP
Note that the surrounding code shown here is described in Using WebRTC
Encoded Transforms.
.SH SEE ALSO
.IP \[bu] 2
Using WebRTC Encoded Transforms
