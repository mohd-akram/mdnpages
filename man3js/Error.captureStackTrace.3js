.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ERROR.CAPTURESTACKTRACE" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Error.captureStackTrace \- Error.captureStackTrace()
.SH SYNOPSIS
The \f[B]\f[CB]Error.captureStackTrace()\f[B]\f[R] static method
installs stack trace information on a provided object as the
\f[CR]stack\f[R] property.
.SH SYNTAX
.IP
.EX
Error.captureStackTrace(object)
Error.captureStackTrace(object, constructor)
.EE
.SS Parameters
.TP
\f[B]object\f[R]
The object on which to add the \f[CR]stack\f[R] property.
.TP
\f[B]constructor\f[R] \f[I](optional)\f[R]
A function, typically the constructor where the \f[CR]object\f[R] was
created.
When collecting the stack trace, all frames above the topmost call to
this function, including that call, are left out of the stack trace.
.SS Return value
None (\f[CR]undefined\f[R]).
.PP
The \f[CR]object\f[R] is modified in\-place with an extra own property
called \f[CR]stack\f[R] defined, whose string value follows the same
format as \f[CR]Error.prototype.stack\f[R].
This property is non\-enumerable and configurable.
In V8, it is a getter\-setter pair.
In SpiderMonkey and JavaScriptCore, it is a data property that is
writable.
.SH EXAMPLES
.SS Using Error.captureStackTrace()
The \f[CR]getStack()\f[R] utility function returns the current stack
trace at the point it is called, removing itself from the stack.
This serves the same debugging purpose as \f[CR]console.trace()\f[R],
but allows you to output the string elsewhere.
Note that it does not construct an \f[CR]Error\f[R] instance for this
purpose, but installs \f[CR]stack\f[R] on a plain object, which would be
more efficient for our purposes.
Normally, you would call \f[CR]Error.captureStackTrace\f[R] on objects
intended to be thrown as errors, as shown in the next example.
.IP
.EX
\f[B]function\f[R] getStack() {
  \f[B]const\f[R] obj = {};
  \f[B]if\f[R] (\(dqcaptureStackTrace\(dq \f[B]in\f[R] Error) {
    \f[I]// Avoid getStack itself in the stack trace\f[R]
    Error.captureStackTrace(obj, getStack);
  }
  \f[B]return\f[R] obj.stack;
}

\f[B]function\f[R] foo() {
  console.log(getStack());
}

foo();
\f[I]// Error\f[R]
\f[I]//     at foo (<anonymous>:8:15)\f[R]
\f[I]//     at <anonymous>:11:1\f[R]
.EE
.SS Installing stack trace on a custom error object
The main use case for \f[CR]Error.captureStackTrace()\f[R] is to install
a stack trace on a custom error object.
Typically, you define custom errors by extending the \f[CR]Error\f[R]
class, which automatically makes the \f[CR]stack\f[R] property available
via inheritance.
However, the problem with the default stack trace is that it includes
the constructor call itself, which leaks implementation details.
You can avoid this by using \f[CR]Error.captureStackTrace()\f[R], which
allows the stack trace to be installed even for custom errors that do
not inherit from \f[CR]Error\f[R].
.IP
.EX
\f[B]class\f[R] MyError \f[B]extends\f[R] Error {
  constructor(message, options) {
    \f[B]super\f[R](message, options);
    \f[B]if\f[R] (\(dqcaptureStackTrace\(dq \f[B]in\f[R] Error) {
      \f[I]// Avoid MyError itself in the stack trace\f[R]
      Error.captureStackTrace(\f[B]this\f[R], MyError);
    }
  }
}

\f[B]const\f[R] myError = \f[B]new\f[R] MyError(\(dqSomething went wrong\(dq);
console.log(myError.stack);
\f[I]// Error: Something went wrong\f[R]
\f[I]//     at <anonymous>:8:17\f[R]
.EE
.PP
Note that even if you don\(cqt call \f[CR]Error.captureStackTrace()\f[R]
here, some engines are still smart enough to avoid \f[CR]MyError\f[R] in
the stack trace if the constructor inherits from \f[CR]Error\f[R].
Calling \f[CR]Error.captureStackTrace()\f[R] is more important for
custom errors that, for some reason, do not inherit from
\f[CR]Error\f[R].
.IP
.EX
\f[B]class\f[R] MyError {
  constructor(message) {
    \f[B]this\f[R].message = message;
    \f[B]if\f[R] (\(dqcaptureStackTrace\(dq \f[B]in\f[R] Error) {
      \f[I]// Avoid MyError itself in the stack trace\f[R]
      Error.captureStackTrace(\f[B]this\f[R], MyError);
    }
  }
}

\f[B]const\f[R] myError = \f[B]new\f[R] MyError(\(dqSomething went wrong\(dq);
console.log(myError.stack);
\f[I]// Error: Something went wrong\f[R]
\f[I]//     at <anonymous>:8:17\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Error.prototype.stack\f[R]
.IP \(bu 2
\f[CR]Error.stackTraceLimit\f[R]
.IP \(bu 2
\c
.UR https://v8.dev/docs/stack-trace-api
Stack trace API
.UE \c
\ in the V8 docs
