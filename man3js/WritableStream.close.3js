.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WRITABLESTREAM.CLOSE" "3JS" "April 1, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStream.close \- WritableStream: close() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]close()\f[B]\f[R] method of the \f[CR]WritableStream\f[R]
interface closes the associated stream.
All chunks written before this method is called are sent before the
returned promise is fulfilled.
.PP
This is equivalent to getting a \f[CR]WritableStreamDefaultWriter\f[R]
with \f[CR]getWriter()\f[R], calling \f[CR]close()\f[R] on it.
.SH SYNTAX
.IP
.EX
close()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] which fulfills with the \f[CR]undefined\f[R] when
all remaining chunks were successfully written before the close, or
rejects with an error if a problem was encountered during the process.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The stream you are trying to close is locked.
.SH EXAMPLES
The following example illustrates several features of the
\f[CR]WritableStream\f[R].
It shows the creation of the \f[CR]WritableStream\f[R] with a custom
sink and an API\-supplied queuing strategy.
It then calls a function called \f[CR]sendMessage()\f[R], passing the
newly created stream and a string.
Inside this function it calls the stream\(cqs \f[CR]getWriter()\f[R]
method, which returns an instance of
\f[CR]WritableStreamDefaultWriter\f[R].
A \f[CR]forEach()\f[R] call is used to write each chunk of the string to
the stream.
Finally, \f[CR]write()\f[R] and \f[CR]close()\f[R] return promises that
are processed to deal with success or failure of chunks and streams.
Note that in order to be able to call \f[CR]close()\f[R] on the stream
itself, the writer must be disconnected using
\f[CR]defaultWriter.releaseLock();\f[R].
.IP
.EX
\f[B]function\f[R] sendMessage(message, writableStream) {
  \f[I]// defaultWriter is of type WritableStreamDefaultWriter\f[R]
  \f[B]const\f[R] defaultWriter = writableStream.getWriter();
  \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
  \f[B]const\f[R] encoded = encoder.encode(message);
  encoded.forEach((chunk) \f[B]=>\f[R] {
    defaultWriter.ready
      .then(() \f[B]=>\f[R] {
        defaultWriter.write(chunk);
      })
      .catch((err) \f[B]=>\f[R] {
        log(\(dqChunk error:\(dq, err);
      });
  });

  \f[I]// Call ready again to ensure that all chunks are written\f[R]
  \f[I]//   before closing the writer.\f[R]
  defaultWriter.ready
    .then(() \f[B]=>\f[R] {
      defaultWriter.releaseLock();
      writableStream.close();
    })
    .then(() \f[B]=>\f[R] {
      log(\(dqAll chunks written / stream closed.\(dq);
    })
    .catch((err) \f[B]=>\f[R] {
      log(\(dqStream error:\(dq, err);
    });
}

\f[B]const\f[R] decoder = \f[B]new\f[R] TextDecoder(\(dqutf\-8\(dq);
\f[B]const\f[R] queuingStrategy = \f[B]new\f[R] CountQueuingStrategy({ highWaterMark: 1 });
\f[B]let\f[R] result = \(dq\(dq;
\f[B]const\f[R] writableStream = \f[B]new\f[R] WritableStream(
  {
    \f[I]// Implement the sink\f[R]
    write(chunk) {
      \f[B]return\f[R] \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
        \f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(1);
        \f[B]const\f[R] view = \f[B]new\f[R] Uint8Array(buffer);
        view[0] = chunk;
        \f[B]const\f[R] decoded = decoder.decode(view, { stream: \f[B]true\f[R] });
        \f[B]const\f[R] listItem = document.createElement(\(dqli\(dq);
        result += decoded;
        resolve();
      });
    },
    close() {
      \f[B]const\f[R] listItem = document.createElement(\(dqli\(dq);
      log(\(ga[MESSAGE RECEIVED] ${result}\(ga);
    },
    abort(err) {
      log(\(dqSink error:\(dq, err);
    },
  },
  queuingStrategy,
);

log(\(dqSending \(aqHello, world.\(aq message.\(dq);
sendMessage(\(dqHello, world.\(dq, writableStream);
.EE
