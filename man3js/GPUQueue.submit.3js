.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUQUEUE.SUBMIT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUQueue.submit \- GPUQueue: submit() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]submit()\f[B]\f[R] method of the \f[CR]GPUQueue\f[R]
interface schedules the execution of command buffers represented by one
or more \f[CR]GPUCommandBuffer\f[R] objects by the GPU.
.SH SYNTAX
.IP
.EX
submit(commandBuffers)
.EE
.SS Parameters
.TP
\f[B]commandBuffers\f[R]
An array of \f[CR]GPUCommandBuffer\f[R] objects containing the commands
to be enqueued for processing by the GPU.
The array must not contain duplicate \f[CR]GPUCommandBuffer\f[R] objects
\(em each one can only be submitted once per \f[CR]submit()\f[R] call.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]submit()\f[B]\f[R], otherwise a \f[CR]GPUValidationError\f[R]
is generated and the \f[CR]GPUQueue\f[R] becomes invalid:
.IP \(bu 2
The array of \f[CR]GPUCommandBuffer\f[R] objects referenced in the
\f[CR]submit()\f[R] call does not contain duplicates.
.IP \(bu 2
Any \f[CR]GPUBuffer\f[R], \f[CR]GPUTexture\f[R], and
\f[CR]GPUQuerySet\f[R] objects used in the encoded commands are
available for use, i.e., not unavailable (\f[CR]GPUBuffer\f[R]s are
unavailable if they are currently mapped) or destroyed (with the
\f[CR]destroy()\f[R] method).
.IP \(bu 2
Any \f[CR]GPUExternalTexture\f[R] objects used in the encoded commands
are not expired (they expire automatically shortly after being imported
via \f[CR]importExternalTexture()\f[R]).
.IP \(bu 2
If a \f[CR]GPUQuerySet\f[R] object used in an encoded command is of type
\f[CR]\(dqocclusion\(dq\f[R] query, it is not already used, except by
\f[CR]GPURenderPassEncoder.beginOcclusionQuery()\f[R].
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, a number of commands are recorded via a \f[CR]GPUCommandEncoder\f[R]:
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create GPUCommandEncoder\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Create GPURenderPassDescriptor to tell WebGPU which texture to draw into, then initiate render pass\f[R]

\f[B]const\f[R] renderPassDescriptor = {
  colorAttachments: [
    {
      clearValue: clearColor,
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
      view: context.getCurrentTexture().createView(),
    },
  ],
};

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// Draw a triangle\f[R]

passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.draw(3);

\f[I]// End the render pass\f[R]

passEncoder.end();

\f[I]// \&...\f[R]
.EE
.PP
The commands encoded by the \f[CR]GPUCommandEncoder\f[R] are recoded
into a \f[CR]GPUCommandBuffer\f[R] using the
\f[CR]GPUCommandEncoder.finish()\f[R] method.
The command buffer is then passed into the queue via a
\f[CR]submit()\f[R] call, ready to be processed by the GPU.
.IP
.EX
device.queue.submit([commandEncoder.finish()]);
.EE
.RS
.PP
\f[B]Note:\f[R] Study the \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ to find more queue examples.
.RE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
