'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "console.table_static" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
console.table_static \- console: table() static method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]console.table()\f[B]\f[R] static method displays tabular
data as a table.
.PP
This function takes one mandatory argument \f[CR]data\f[R], which must
be an array or an object, and one additional optional parameter
\f[CR]columns\f[R].
.PP
It logs \f[CR]data\f[R] as a table.
Each element in the array (or enumerable property if \f[CR]data\f[R] is
an object) will be a row in the table.
.PP
The first column in the table will be labeled \f[CR](index)\f[R].
If \f[CR]data\f[R] is an array, then its values will be the array
indices.
If \f[CR]data\f[R] is an object, then its values will be the property
names.
Note that (in Firefox) \f[CR]console.table\f[R] is limited to displaying
1000 rows (first row is the labeled index).
.SS Collections of primitive types
The \f[CR]data\f[R] argument may be an array or an object.
.IP
.EX
\f[I]// an array of strings\f[R]

console.table([\[dq]apples\[dq], \[dq]oranges\[dq], \[dq]bananas\[dq]]);
.EE
.PP
.TS
tab(@);
l l.
T{
(index)
T}@T{
Values
T}
_
T{
0
T}@T{
`apples'
T}
T{
1
T}@T{
`oranges'
T}
T{
2
T}@T{
`bananas'
T}
.TE
.IP
.EX
\f[I]// an object whose properties are strings\f[R]

\f[B]function\f[R] Person(firstName, lastName) {
  \f[B]this\f[R].firstName = firstName;
  \f[B]this\f[R].lastName = lastName;
}

\f[B]const\f[R] me = \f[B]new\f[R] Person(\[dq]Tyrone\[dq], \[dq]Jones\[dq]);

console.table(me);
.EE
.PP
.TS
tab(@);
l l.
T{
(index)
T}@T{
Values
T}
_
T{
firstName
T}@T{
`Tyrone'
T}
T{
lastName
T}@T{
`Jones'
T}
.TE
.SS Collections of compound types
If the elements in the array, or properties in the object, are
themselves arrays or objects, then their elements or properties are
enumerated in the row, one per column:
.IP
.EX
\f[I]// an array of arrays\f[R]

\f[B]const\f[R] people = [
  [\[dq]Tyrone\[dq], \[dq]Jones\[dq]],
  [\[dq]Janet\[dq], \[dq]Smith\[dq]],
  [\[dq]Maria\[dq], \[dq]Cruz\[dq]],
];
console.table(people);
.EE
.PP
.TS
tab(@);
l l l.
T{
(index)
T}@T{
0
T}@T{
1
T}
_
T{
0
T}@T{
`Tyrone'
T}@T{
`Jones'
T}
T{
1
T}@T{
`Janet'
T}@T{
`Smith'
T}
T{
2
T}@T{
`Maria'
T}@T{
`Cruz'
T}
.TE
.IP
.EX
\f[I]// an array of objects\f[R]

\f[B]function\f[R] Person(firstName, lastName) {
  \f[B]this\f[R].firstName = firstName;
  \f[B]this\f[R].lastName = lastName;
}

\f[B]const\f[R] tyrone = \f[B]new\f[R] Person(\[dq]Tyrone\[dq], \[dq]Jones\[dq]);
\f[B]const\f[R] janet = \f[B]new\f[R] Person(\[dq]Janet\[dq], \[dq]Smith\[dq]);
\f[B]const\f[R] maria = \f[B]new\f[R] Person(\[dq]Maria\[dq], \[dq]Cruz\[dq]);

console.table([tyrone, janet, maria]);
.EE
.PP
Note that if the array contains objects, then the columns are labeled
with the property name.
.PP
.TS
tab(@);
l l l.
T{
(index)
T}@T{
firstName
T}@T{
lastName
T}
_
T{
0
T}@T{
`Tyrone'
T}@T{
`Jones'
T}
T{
1
T}@T{
`Janet'
T}@T{
`Smith'
T}
T{
2
T}@T{
`Maria'
T}@T{
`Cruz'
T}
.TE
.IP
.EX
\f[I]// an object whose properties are objects\f[R]

\f[B]const\f[R] family = {};

family.mother = \f[B]new\f[R] Person(\[dq]Janet\[dq], \[dq]Jones\[dq]);
family.father = \f[B]new\f[R] Person(\[dq]Tyrone\[dq], \[dq]Jones\[dq]);
family.daughter = \f[B]new\f[R] Person(\[dq]Maria\[dq], \[dq]Jones\[dq]);

console.table(family);
.EE
.PP
.TS
tab(@);
l l l.
T{
(index)
T}@T{
firstName
T}@T{
lastName
T}
_
T{
daughter
T}@T{
`Maria'
T}@T{
`Jones'
T}
T{
father
T}@T{
`Tyrone'
T}@T{
`Jones'
T}
T{
mother
T}@T{
`Janet'
T}@T{
`Jones'
T}
.TE
.SS Restricting the columns displayed
By default, \f[CR]console.table()\f[R] lists all elements in each row.
You can use the optional \f[CR]columns\f[R] parameter to select a subset
of columns to display:
.IP
.EX
\f[I]// an array of objects, logging only firstName\f[R]

\f[B]function\f[R] Person(firstName, lastName) {
  \f[B]this\f[R].firstName = firstName;
  \f[B]this\f[R].lastName = lastName;
}

\f[B]const\f[R] tyrone = \f[B]new\f[R] Person(\[dq]Tyrone\[dq], \[dq]Jones\[dq]);
\f[B]const\f[R] janet = \f[B]new\f[R] Person(\[dq]Janet\[dq], \[dq]Smith\[dq]);
\f[B]const\f[R] maria = \f[B]new\f[R] Person(\[dq]Maria\[dq], \[dq]Cruz\[dq]);

console.table([tyrone, janet, maria], [\[dq]firstName\[dq]]);
.EE
.PP
.TS
tab(@);
l l.
T{
(index)
T}@T{
firstName
T}
_
T{
0
T}@T{
`Tyrone'
T}
T{
1
T}@T{
`Janet'
T}
T{
2
T}@T{
`Maria'
T}
.TE
.SS Sorting columns
You can sort the table by a particular column by clicking on that
column\[cq]s label.
.SH SYNTAX
.IP
.EX
table(data)
table(data, columns)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
The data to display.
This must be either an array or an object.
.TP
\f[B]columns\f[R]
An array containing the names of columns to include in the output.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/console/api#table
Microsoft Edge\[cq]s documentation for \f[CR]console.table()\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://nodejs.org/docs/latest/api/console.html#consoletabletabulardata-properties
Node.JS documentation for \f[CR]console.table()\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/devtools/console/api/#table
Google Chrome\[cq]s documentation for \f[CR]console.table()\f[R]
.UE \c
