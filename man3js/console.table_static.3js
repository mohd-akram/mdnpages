'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "console.table_static" "JS" "February 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
console.table_static \- console: table() static method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]console.table()\f[B]\f[R] static method displays tabular
data as a table.
.SH SYNTAX
.IP
.EX
console.table(data)
console.table(data, columns)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
The data to display.
This must be either an array or an object.
Each item in the array, or property in the object, is represented by a
row in the table.
The first column in the table is labeled \f[CR](index)\f[R] and its
values are the array indices or the property names.
.RS
.PP
If the elements in the array, or properties in the object, are
themselves arrays or objects, then their items or properties are
enumerated in the row, one per column.
.PP
Note that in Firefox, \f[CR]console.table()\f[R] is limited to
displaying 1000 rows, including the heading row.
.RE
.TP
\f[B]columns\f[R] \f[I](optional)\f[R]
An array which can be used to restrict the columns shown in the table.
It contains indices, if each entry of \f[CR]data\f[R] is an array, or
property names, if each entry of \f[CR]data\f[R] is an object.
The resulting table then includes only columns for items which match the
given indices or names.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Collections of primitive types
The \f[CR]data\f[R] argument may be an array or an object.
.IP
.EX
\f[I]// an array of strings\f[R]

console.table([\[dq]apples\[dq], \[dq]oranges\[dq], \[dq]bananas\[dq]]);
.EE
.PP
.TS
tab(@);
l l.
T{
(index)
T}@T{
Values
T}
_
T{
0
T}@T{
`apples'
T}
T{
1
T}@T{
`oranges'
T}
T{
2
T}@T{
`bananas'
T}
.TE
.IP
.EX
\f[I]// an object whose properties are strings\f[R]

\f[B]function\f[R] Person(firstName, lastName) {
  \f[B]this\f[R].firstName = firstName;
  \f[B]this\f[R].lastName = lastName;
}

\f[B]const\f[R] me = \f[B]new\f[R] Person(\[dq]Tyrone\[dq], \[dq]Jones\[dq]);

console.table(me);
.EE
.PP
.TS
tab(@);
l l.
T{
(index)
T}@T{
Values
T}
_
T{
firstName
T}@T{
`Tyrone'
T}
T{
lastName
T}@T{
`Jones'
T}
.TE
.SS Collections of compound types
If the elements in the array, or properties in the object, are
themselves arrays or objects, then their elements or properties are
enumerated in the row, one per column:
.IP
.EX
\f[I]// an array of arrays\f[R]

\f[B]const\f[R] people = [
  [\[dq]Tyrone\[dq], \[dq]Jones\[dq]],
  [\[dq]Janet\[dq], \[dq]Smith\[dq]],
  [\[dq]Maria\[dq], \[dq]Cruz\[dq]],
];
console.table(people);
.EE
.PP
.TS
tab(@);
l l l.
T{
(index)
T}@T{
0
T}@T{
1
T}
_
T{
0
T}@T{
`Tyrone'
T}@T{
`Jones'
T}
T{
1
T}@T{
`Janet'
T}@T{
`Smith'
T}
T{
2
T}@T{
`Maria'
T}@T{
`Cruz'
T}
.TE
.IP
.EX
\f[I]// an array of objects\f[R]

\f[B]function\f[R] Person(firstName, lastName) {
  \f[B]this\f[R].firstName = firstName;
  \f[B]this\f[R].lastName = lastName;
}

\f[B]const\f[R] tyrone = \f[B]new\f[R] Person(\[dq]Tyrone\[dq], \[dq]Jones\[dq]);
\f[B]const\f[R] janet = \f[B]new\f[R] Person(\[dq]Janet\[dq], \[dq]Smith\[dq]);
\f[B]const\f[R] maria = \f[B]new\f[R] Person(\[dq]Maria\[dq], \[dq]Cruz\[dq]);

console.table([tyrone, janet, maria]);
.EE
.PP
If the array contains objects, then the columns are labeled with the
property name.
.PP
.TS
tab(@);
l l l.
T{
(index)
T}@T{
firstName
T}@T{
lastName
T}
_
T{
0
T}@T{
`Tyrone'
T}@T{
`Jones'
T}
T{
1
T}@T{
`Janet'
T}@T{
`Smith'
T}
T{
2
T}@T{
`Maria'
T}@T{
`Cruz'
T}
.TE
.IP
.EX
\f[I]// an object whose properties are objects\f[R]

\f[B]const\f[R] family = {};

family.mother = \f[B]new\f[R] Person(\[dq]Janet\[dq], \[dq]Jones\[dq]);
family.father = \f[B]new\f[R] Person(\[dq]Tyrone\[dq], \[dq]Jones\[dq]);
family.daughter = \f[B]new\f[R] Person(\[dq]Maria\[dq], \[dq]Jones\[dq]);

console.table(family);
.EE
.PP
.TS
tab(@);
l l l.
T{
(index)
T}@T{
firstName
T}@T{
lastName
T}
_
T{
daughter
T}@T{
`Maria'
T}@T{
`Jones'
T}
T{
father
T}@T{
`Tyrone'
T}@T{
`Jones'
T}
T{
mother
T}@T{
`Janet'
T}@T{
`Jones'
T}
.TE
.SS Restricting the columns displayed
By default, \f[CR]console.table()\f[R] lists all elements in each row.
You can use the optional \f[CR]columns\f[R] parameter to select a subset
of columns to display:
.IP
.EX
\f[I]// an array of objects, logging only firstName\f[R]

\f[B]function\f[R] Person(firstName, lastName) {
  \f[B]this\f[R].firstName = firstName;
  \f[B]this\f[R].lastName = lastName;
}

\f[B]const\f[R] tyrone = \f[B]new\f[R] Person(\[dq]Tyrone\[dq], \[dq]Jones\[dq]);
\f[B]const\f[R] janet = \f[B]new\f[R] Person(\[dq]Janet\[dq], \[dq]Smith\[dq]);
\f[B]const\f[R] maria = \f[B]new\f[R] Person(\[dq]Maria\[dq], \[dq]Cruz\[dq]);

console.table([tyrone, janet, maria], [\[dq]firstName\[dq]]);
.EE
.PP
.TS
tab(@);
l l.
T{
(index)
T}@T{
firstName
T}
_
T{
0
T}@T{
`Tyrone'
T}
T{
1
T}@T{
`Janet'
T}
T{
2
T}@T{
`Maria'
T}
.TE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/console/api#table
Microsoft Edge\[cq]s documentation for \f[CR]console.table()\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://nodejs.org/docs/latest/api/console.html#consoletabletabulardata-properties
Node.js documentation for \f[CR]console.table()\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/devtools/console/api/#table
Google Chrome\[cq]s documentation for \f[CR]console.table()\f[R]
.UE \c
