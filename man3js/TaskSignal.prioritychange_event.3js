.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "TaskSignal.prioritychange_event" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TaskSignal.prioritychange_event \- TaskSignal: prioritychange event
.SH SYNOPSIS
The \f[B]\f[CB]prioritychange\f[B]\f[R] event is sent to a
\f[CR]TaskSignal\f[R] if its priority is changed.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]prioritychange\[dq], (event) \f[B]=>\f[R] {});

onprioritychange = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]TaskPriorityChangeEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
.TP
\f[B]TaskPriorityChangeEvent.previousPriority\f[R]
Indicates the previous priority of the task (before it was changed).
The new/updated priority is read from \f[CR]event.target.priority\f[R]
(\f[CR]TaskSignal.priority\f[R]).
.SH EXAMPLES
The example below shows how to listen for the \f[CR]prioritychange\f[R]
event on a \f[CR]TaskSignal\f[R].
.PP
First we create a controller, and add an event listener to its signal.
When handling the event we use \f[CR]previousPriority\f[R] on the event
to get the original priority and \f[CR]TaskSignal.priority\f[R] on the
event target to get the new/current priority.
.PP
The task is then posted, passing in the signal, and then we immediately
change the priority.
.IP
.EX
\f[B]if\f[R] (\[dq]scheduler\[dq] \f[B]in\f[R] \f[B]this\f[R]) {
  \f[I]// Declare a TaskController, setting its signal priority to \[aq]user\-blocking\[aq]\f[R]
  \f[B]const\f[R] controller = \f[B]new\f[R] TaskController({ priority: \[dq]user\-blocking\[dq] });

  \f[I]// Listen for \[aq]prioritychange\[aq] events on the controller\[aq]s signal.\f[R]
  controller.signal.addEventListener(\[dq]prioritychange\[dq], (event) \f[B]=>\f[R] {
    \f[B]const\f[R] previousPriority = event.previousPriority;
    \f[B]const\f[R] newPriority = event.target.priority;
    mylog(\[ga]Priority changed from ${previousPriority} to ${newPriority}.\[ga]);
  });

  \f[I]// Post task using the controller\[aq]s signal.\f[R]
  \f[I]// The signal priority sets the initial priority of the task\f[R]
  scheduler.postTask(
    () \f[B]=>\f[R] {
      mylog(\[dq]Task 1\[dq]);
    },
    { signal: controller.signal },
  );

  \f[I]// Change the priority to \[aq]background\[aq] using the controller\f[R]
  controller.setPriority(\[dq]background\[dq]);
}
.EE
.RS
.PP
\f[B]Note:\f[R] The code above uses a custom logging function
\f[CR]mylog()\f[R] to log to the text area below.
This is hidden as it isn\[cq]t relevant to the example.
.RE
.PP
The output below demonstrates shows that the task\[cq]s priority changed
from \f[CR]user\-blocking\f[R] to \f[CR]background\f[R].
This happens before the task is executed, but could also happen when the
task is running.
