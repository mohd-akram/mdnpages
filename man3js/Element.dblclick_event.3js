.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Element.dblclick_event" "JS" "December 22, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.dblclick_event \- Element: dblclick event
.SH SYNOPSIS
The \f[B]\f[CB]dblclick\f[B]\f[R] event fires when a pointing device
button (such as a mouse\[cq]s primary button) is double\-clicked; that
is, when it\[cq]s rapidly clicked twice on a single element within a
very short span of time.
.PP
\f[CR]dblclick\f[R] fires after two \f[CR]click\f[R] events (and by
extension, after two pairs of \f[CR]mousedown\f[R] and
\f[CR]mouseup\f[R] events).
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]dblclick\[dq], (event) \f[B]=>\f[R] {});

ondblclick = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MouseEvent\f[R].
Inherits from \f[CR]UIEvent\f[R] and \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]MouseEvent.altKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the alt key was down when the mouse event was
fired.
.TP
\f[B]MouseEvent.button\f[R] \f[I](read\-only)\f[R]
The button number that was pressed (if applicable) when the mouse event
was fired.
.TP
\f[B]MouseEvent.buttons\f[R] \f[I](read\-only)\f[R]
The buttons being pressed (if any) when the mouse event was fired.
.TP
\f[B]MouseEvent.clientX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.clientY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.ctrlKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the control key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.layerX\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the horizontal coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.layerY\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the vertical coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.metaKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the meta key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.movementX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.movementY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.offsetX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.offsetY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.pageX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.pageY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.relatedTarget\f[R] \f[I](read\-only)\f[R]
The secondary target for the event, if there is one.
.TP
\f[B]MouseEvent.screenX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.screenY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.shiftKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the shift key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.mozInputSource\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The type of device that generated the event (one of the
\f[CR]MOZ_SOURCE_*\f[R] constants).
This lets you, for example, determine whether a mouse event was
generated by an actual mouse or by a touch event (which might affect the
degree of accuracy with which you interpret the coordinates associated
with the event).
.TP
\f[B]MouseEvent.webkitForce\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The amount of pressure applied when clicking.
.TP
\f[B]MouseEvent.x\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientX\f[R].
.TP
\f[B]MouseEvent.y\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientY\f[R].
.SH EXAMPLES
This example toggles the size of a card when you double click on it.
.SS JavaScript
.IP
.EX
\f[B]const\f[R] card = document.querySelector(\[dq]aside\[dq]);

card.addEventListener(\[dq]dblclick\[dq], (e) \f[B]=>\f[R] {
  card.classList.toggle(\[dq]large\[dq]);
});
.EE
.SS HTML
.IP
.EX
<\f[B]aside\f[R]>
  <\f[B]h3\f[R]>My Card</\f[B]h3\f[R]>
  <\f[B]p\f[R]>Double click to resize this object.</\f[B]p\f[R]>
</\f[B]aside\f[R]>
.EE
.SS CSS
.IP
.EX
aside {
  \f[B]background\f[R]: #fe9;
  \f[B]border\-radius\f[R]: 1em;
  \f[B]display\f[R]: inline\-block;
  \f[B]padding\f[R]: 1em;
  \f[B]transform\f[R]: scale(0.9);
  \f[B]transform\-origin\f[R]: 0 0;
  \f[B]transition\f[R]: transform 0.6s;
  \f[B]user\-select\f[R]: none;
}

\&.large {
  \f[B]transform\f[R]: scale(1.3);
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Introduction to events
.IP \[bu] 2
\f[CR]auxclick\f[R]
.IP \[bu] 2
\f[CR]click\f[R]
.IP \[bu] 2
\f[CR]contextmenu\f[R]
.IP \[bu] 2
\f[CR]mousedown\f[R]
.IP \[bu] 2
\f[CR]mouseup\f[R]
.IP \[bu] 2
\f[CR]pointerdown\f[R]
.IP \[bu] 2
\f[CR]pointerup\f[R]
