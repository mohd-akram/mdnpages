.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SYNCMANAGER.REGISTER" "3JS" "April 15, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SyncManager.register \- SyncManager: register() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]register()\f[B]\f[R] method of the \f[CR]SyncManager\f[R]
interface registers a synchronization event, triggering a
\f[CR]sync\f[R] event inside the associated service worker as soon as
network connectivity is available.
.SH SYNTAX
.IP
.EX
register(tag)
.EE
.SS Parameters
.TP
\f[B]tag\f[R]
An identifier for this synchronization event.
This will be the value of the \f[CR]tag\f[R] property of the
\f[CR]SyncEvent\f[R] that gets passed into the service worker\(cqs
\f[CR]sync\f[R] event handler.
.SS Return value
A \f[CR]Promise\f[R] that resolves to \f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if current service worker is not active.
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if background sync has been disabled by the user.
.SH EXAMPLES
The following asynchronous function registers a background sync from a
browsing context:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] syncMessagesLater() {
  \f[B]const\f[R] registration = \f[B]await\f[R] navigator.serviceWorker.ready;
  \f[B]try\f[R] {
    \f[B]await\f[R] registration.sync.register(\(dqsync\-messages\(dq);
  } \f[B]catch\f[R] {
    console.log(\(dqBackground Sync could not be registered!\(dq);
  }
}
.EE
