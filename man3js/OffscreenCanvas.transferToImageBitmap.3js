.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "OFFSCREENCANVAS.TRANSFERTOIMAGEBITMAP" "3JS" "November 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OffscreenCanvas.transferToImageBitmap \- OffscreenCanvas:
transferToImageBitmap() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]OffscreenCanvas.transferToImageBitmap()\f[B]\f[R] method
creates an \f[CR]ImageBitmap\f[R] object from the most recently rendered
image of the \f[CR]OffscreenCanvas\f[R].
The \f[CR]OffscreenCanvas\f[R] allocates a new image for its subsequent
rendering.
.SH SYNTAX
.IP
.EX
transferToImageBitmap()
.EE
.SS Parameters
None.
.SS Return value
A newly\-allocated \f[CR]ImageBitmap\f[R].
.PP
This \f[CR]ImageBitmap\f[R] references a potentially large graphics
resource, and to ensure your web application remains robust, it is
important to avoid allocating too many of these resources at any point
in time.
For this reason it is important to ensure that the
\f[CR]ImageBitmap\f[R] is either \f[I]consumed\f[R] or \f[I]closed\f[R].
.PP
As described in the \f[CR]OffscreenCanvas\f[R] examples, passing this
\f[CR]ImageBitmap\f[R] to
\f[CR]ImageBitmapRenderingContext.transferFromImageBitmap()\f[R]
\f[I]consumes\f[R] the \f[CR]ImageBitmap\f[R] object; it no longer
references the underlying graphics resource, and can not be passed to
any other web APIs.
.PP
If your goal is to pass the \f[CR]ImageBitmap\f[R] to other web APIs
which do not consume it \- for example,
\f[CR]CanvasRenderingContext2D.drawImage()\f[R] \- then you should
\f[I]close\f[R] it when you\(cqre done with it by calling
\f[CR]ImageBitmap.close()\f[R].
Don\(cqt simply drop the JavaScript reference to the
\f[CR]ImageBitmap\f[R]; doing so will keep its graphics resource alive
until the next time the garbage collector runs.
.PP
If you call \f[CR]transferToImageBitmap()\f[R] and don\(cqt intend to
pass it to
\f[CR]ImageBitmapRenderingContext.transferFromImageBitmap()\f[R],
consider whether you need to call \f[CR]transferToImageBitmap()\f[R] at
all.
Many web APIs which accept \f[CR]ImageBitmap\f[R] also accept
\f[CR]OffscreenCanvas\f[R] as an argument.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Throws if:
.RS
.IP \(bu 2
the canvas has transferred to another context scope, such as a worker
.IP \(bu 2
the canvas context mode has not been set by calling
\f[CR]OffscreenCanvas.getContext()\f[R].
.RE
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] offscreen = \f[B]new\f[R] OffscreenCanvas(256, 256);
\f[B]const\f[R] gl = offscreen.getContext(\(dqwebgl\(dq);

\f[I]// Perform some drawing using the gl context\f[R]

offscreen.transferToImageBitmap();
\f[I]// ImageBitmap { width: 256, height: 256 }\f[R]

\f[I]// Either:\f[R]
\f[I]// Pass this \(gaImageBitmap\(ga to \(gaImageBitmapRenderingContext.transferFromImageBitmap\(ga\f[R]
\f[I]// or:\f[R]
\f[I]// Use the \(gaImageBitmap\(ga with other web APIs, and call \(gaImageBitmap.close()\(ga!\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The interface defining this method, \f[CR]OffscreenCanvas\f[R]
.IP \(bu 2
\f[CR]ImageBitmapRenderingContext.transferFromImageBitmap\f[R]
