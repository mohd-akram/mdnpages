.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "XRINPUTSOURCE.PROFILES" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRInputSource.profiles \- XRInputSource: profiles property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The read\-only \f[CR]XRInputSource\f[R] property
\f[B]\f[CB]profiles\f[B]\f[R] returns an array of strings, each
describing a configuration profile for the input source.
The profile strings are listed in order of specificity, with the most
specific profile listed first.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]profiles\f[R] list is always empty when the
WebXR session is in inline mode.
.RE
.SH VALUE
An array of strings, each describing one configuration profile for the
input device represented by the \f[CR]XRInputSource\f[R] object.
Each input profile specifies the preferred visual representation and
behavior of the input source.
.SS Input profile names
An input profile name is a string describing a visual representation and
behavior the input source may be configured to use.
Each string:
.IP \(bu 2
Has no spaces; instead, words are separated by hyphen (\(lq\-\(rq)
characters
.IP \(bu 2
If the platform makes it available, the USB vendor and product ID may be
provided but cannot be relied upon
.IP \(bu 2
Does not uniquely identify a specific device; rather, it identifies a
configuration that the product is capable of using
.IP \(bu 2
Does not provide information about handedness of the device, if
applicable
.PP
The \c
.UR https://github.com/immersive-web/webxr-input-profiles/tree/main/packages/registry
WebXR Input Profiles Registry
.UE \c
\ is used by device developers and browser developers to attempt to
ensure that a given device will report the same profile strings
regardless of which browser or other user agent you use.
.SS Generic input profile names
The following input profile names are generic and can serve as fallbacks
that describe the devices in the roughest sense.
.IP \(bu 2
generic\-button
.IP \(bu 2
generic\-hand\-select\-grasp
.IP \(bu 2
generic\-hand\-select
.IP \(bu 2
generic\-hand
.IP \(bu 2
generic\-touchpad
.IP \(bu 2
generic\-touchscreen
.IP \(bu 2
generic\-trigger\-squeeze\-thumbstick
.IP \(bu 2
generic\-trigger\-squeeze\-touchpad\-thumbstick
.IP \(bu 2
generic\-trigger\-squeeze\-touchpad
.IP \(bu 2
generic\-trigger\-squeeze
.IP \(bu 2
generic\-trigger\-thumbstick
.IP \(bu 2
generic\-trigger\-touchpad\-thumbstick
.IP \(bu 2
generic\-trigger\-touchpad
.IP \(bu 2
generic\-trigger
.SH EXAMPLES
The list in \f[CR]profiles\f[R] is in order of reverse specificity; that
is, the most precise description is first, and the least precise
description is last.
The first entry in the list is typically indicative of the precise model
of the controller, or of a model with which the controller is
compatible.
.PP
For example, entry 0 in \f[CR]profiles\f[R] for an Oculus Touch
controller is \f[CR]oculus\-touch\f[R].
The next entry is \f[CR]generic\-trigger\-squeeze\-thumbstick\f[R],
indicating a generic device with a trigger, a squeeze control, and a
thumbstick.
While the Oculus Touch controller actually has a thumbpad rather than a
thumbstick, the overall description is \(lqclose enough\(rq that the
details within the profile matching the name will let the controller be
interpreted usefully.
.IP
.EX
inputSource.profiles;
\f[I]// [\(aqoculus\-touch\(aq, \(aqgeneric\-trigger\-squeeze\-thumbstick\(aq]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
WebXR Device API
.IP \(bu 2
Inputs and input sources
