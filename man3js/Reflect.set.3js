.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Reflect.set" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.set \- Reflect.set()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.set()\f[B]\f[R] static method is like the
property accessor and assignment syntax, but as a function.
.SH SYNTAX
.IP
.EX
Reflect.set(target, propertyKey, value)
Reflect.set(target, propertyKey, value, receiver)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target object on which to set the property.
.TP
\f[B]propertyKey\f[R]
The name of the property to set.
.TP
\f[B]value\f[R]
The value to set.
.TP
\f[B]receiver\f[R] \f[I](optional)\f[R]
The value of \f[CR]this\f[R] provided for the call to the setter for
\f[CR]propertyKey\f[R] on \f[CR]target\f[R].
If provided and \f[CR]target\f[R] does not have a setter for
\f[CR]propertyKey\f[R], the property will be set on \f[CR]receiver\f[R]
instead.
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not setting the property was
successful.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] is not an object.
.SH DESCRIPTION
\f[CR]Reflect.set()\f[R] provides the reflective semantic of a property
access.
That is, \f[CR]Reflect.set(target, propertyKey, value, receiver)\f[R] is
semantically equivalent to:
.IP
.EX
target[propertyKey] = value;
.EE
.PP
Note that in a normal property access, \f[CR]target\f[R] and
\f[CR]receiver\f[R] would observably be the same object.
.PP
\f[CR]Reflect.set()\f[R] invokes the \f[CR][[Set]]\f[R] object internal
method of \f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.set()
.IP
.EX
\f[I]// Object\f[R]
\f[B]const\f[R] obj = {};
Reflect.set(obj, \[dq]prop\[dq], \[dq]value\[dq]); \f[I]// true\f[R]
obj.prop; \f[I]// \[dq]value\[dq]\f[R]

\f[I]// Array\f[R]
\f[B]const\f[R] arr = [\[dq]duck\[dq], \[dq]duck\[dq], \[dq]duck\[dq]];
Reflect.set(arr, 2, \[dq]goose\[dq]); \f[I]// true\f[R]
arr[2]; \f[I]// \[dq]goose\[dq]\f[R]

\f[I]// It can truncate an array.\f[R]
Reflect.set(arr, \[dq]length\[dq], 1); \f[I]// true\f[R]
arr; \f[I]// [\[dq]duck\[dq]]\f[R]

\f[I]// With just one argument, propertyKey and value are \[dq]undefined\[dq].\f[R]
Reflect.set(obj); \f[I]// true\f[R]
Reflect.getOwnPropertyDescriptor(obj, \[dq]undefined\[dq]);
\f[I]// { value: undefined, writable: true, enumerable: true, configurable: true }\f[R]
.EE
.SS Different target and receiver
When the \f[CR]target\f[R] and \f[CR]receiver\f[R] are different,
\f[CR]Reflect.set\f[R] will use the property descriptor of
\f[CR]target\f[R] (to find the setter or determine if the property is
writable), but set the property on \f[CR]receiver\f[R].
.IP
.EX
\f[B]const\f[R] target = {};
\f[B]const\f[R] receiver = {};
Reflect.set(target, \[dq]a\[dq], 2, receiver); \f[I]// true\f[R]
\f[I]// target is {}; receiver is { a: 2 }\f[R]

\f[B]const\f[R] target = { a: 1 };
\f[B]const\f[R] receiver = {};
Reflect.set(target, \[dq]a\[dq], 2, receiver); \f[I]// true\f[R]
\f[I]// target is { a: 1 }; receiver is { a: 2 }\f[R]

\f[B]const\f[R] target = {
  \f[B]set\f[R] a(v) {
    \f[B]this\f[R].b = v;
  },
};
\f[B]const\f[R] receiver = {};
Reflect.set(target, \[dq]a\[dq], 2, receiver); \f[I]// true\f[R]
\f[I]// target is { a: [Setter] }; receiver is { b: 2 }\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-reflect
Polyfill of \f[CR]Reflect.set\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Reflect\f[R]
.IP \[bu] 2
Property accessors
.IP \[bu] 2
\f[CR]handler.set()\f[R]
