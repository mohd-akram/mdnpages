.\" Automatically generated by Pandoc 3.4
.\"
.TH "Float16Array" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Float16Array \- Float16Array
.SH SYNOPSIS
The \f[B]\f[CB]Float16Array\f[B]\f[R] typed array represents an array of
16\-bit floating point numbers in the platform byte order.
If control over byte order is needed, use \f[CR]DataView\f[R] instead.
The contents are initialized to \f[CR]0\f[R] unless initialization data
is explicitly provided.
Once established, you can reference elements in the array using the
object\[cq]s methods, or using standard array index syntax (that is,
using bracket notation).
.PP
\f[CR]Float16Array\f[R] is a subclass of the hidden
\f[CR]TypedArray\f[R] class.
.RS
.PP
\f[B]Note:\f[R] Float16 support is not universal, both in the JavaScript
API and the underlying CPU architecture.
Using it may result in slower performance on some platforms.
It is intended for interacting with highly optimized and
performance\-sensitive systems such as \c
.UR https://github.com/w3c/ColorWeb-CG/blob/main/canvas_float.md
float\-backed canvases
.UE \c
, WebGPU, WebGL, and deep learning models including \c
.UR https://github.com/huggingface/blog/blob/main/stable_diffusion.md
stable diffusion
.UE \c
\&.
.RE
.SH CONSTRUCTOR
.TP
\f[B]Float16Array()\f[R]
Creates a new \f[CR]Float16Array\f[R] object.
.SH STATIC PROPERTIES
\f[I]Also inherits static properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.TP
\f[B]Float16Array.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]2\f[R] in the case of \f[CR]Float16Array\f[R].
.SH STATIC METHODS
\f[I]Inherits static methods from its parent \f[CI]TypedArray\f[I]\f[R].
.SH INSTANCE PROPERTIES
\f[I]Also inherits instance properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.PP
These properties are defined on \f[CR]Float16Array.prototype\f[R] and
shared by all \f[CR]Float16Array\f[R] instances.
.TP
\f[B]Float16Array.prototype.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]2\f[R] in the case of a \f[CR]Float16Array\f[R].
.TP
\f[B]Float16Array.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Float16Array\f[R] instances, the initial value is the
\f[CR]Float16Array\f[R] constructor.
.SH INSTANCE METHODS
\f[I]Inherits instance methods from its parent
\f[CI]TypedArray\f[I]\f[R].
.SH EXAMPLES
.SS Different ways to create a Float16Array
.IP
.EX
\f[I]// From a length\f[R]
\f[B]const\f[R] float16 = \f[B]new\f[R] Float16Array(2);
float16[0] = 42;
console.log(float16[0]); \f[I]// 42\f[R]
console.log(float16.length); \f[I]// 2\f[R]
console.log(float16.BYTES_PER_ELEMENT); \f[I]// 2\f[R]

\f[I]// From an array\f[R]
\f[B]const\f[R] x = \f[B]new\f[R] Float16Array([21, 31]);
console.log(x[1]); \f[I]// 31\f[R]

\f[I]// From another TypedArray\f[R]
\f[B]const\f[R] y = \f[B]new\f[R] Float16Array(x);
console.log(y[0]); \f[I]// 21\f[R]

\f[I]// From an ArrayBuffer\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(32);
\f[B]const\f[R] z = \f[B]new\f[R] Float16Array(buffer, 4, 4);
console.log(z.byteOffset); \f[I]// 4\f[R]

\f[I]// From an iterable\f[R]
\f[B]const\f[R] iterable = (\f[B]function\f[R]* () {
  \f[B]yield\f[R]* [1, 2, 3];
})();
\f[B]const\f[R] float16FromIterable = \f[B]new\f[R] Float16Array(iterable);
console.log(float16FromIterable);
\f[I]// Float16Array [1, 2, 3]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]DataView\f[R]
