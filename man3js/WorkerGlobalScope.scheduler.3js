.\" Automatically generated by Pandoc 3.4
.\"
.TH "WorkerGlobalScope.scheduler" "JS" "September 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WorkerGlobalScope.scheduler \- WorkerGlobalScope: scheduler property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Web Workers.
.PP
The \f[B]\f[CB]scheduler\f[B]\f[R] read\-only property of the
\f[CR]WorkerGlobalScope\f[R] interface is the entry point for using the
Prioritized Task Scheduling API.
.PP
It returns a \f[CR]Scheduler\f[R] object instance containing
\f[CR]postTask()\f[R] and \f[CR]yield()\f[R] methods that can be used to
schedule prioritized tasks.
.SH VALUE
A \f[CR]Scheduler\f[R].
.SH EXAMPLES
The code below shows a very basic use of the property and its associated
interface.
It demonstrates how to check that the property exists and then posts a
task that returns a promise.
.IP
.EX
\f[I]// Check if the prioritized task API is supported\f[R]
\f[B]if\f[R] (\[dq]scheduler\[dq] \f[B]in\f[R] self) {
  \f[I]// Callback function \- \[dq]the task\[dq]\f[R]
  \f[B]const\f[R] myTask = () \f[B]=>\f[R] \[dq]Task 1: user\-visible\[dq];

  \f[I]// Post task with default priority: \[aq]user\-visible\[aq] (no other options)\f[R]
  \f[I]// When the task resolves, Promise.then() logs the result.\f[R]
  self.scheduler
    .postTask(myTask)
    \f[I]// Handle resolved value\f[R]
    .then((taskResult) \f[B]=>\f[R] console.log(\[ga]${taskResult}\[ga]))
    \f[I]// Handle error or abort\f[R]
    .catch((error) \f[B]=>\f[R] console.log(\[ga]Error: ${error}\[ga]));
} \f[B]else\f[R] {
  console.log(\[dq]Feature: NOT Supported\[dq]);
}
.EE
.PP
For comprehensive example code showing to use the API see Prioritized
Task Scheduling API > Examples.
.SH SEE ALSO
.IP \[bu] 2
Prioritized Task Scheduling API
.IP \[bu] 2
\f[CR]Scheduler.postTask()\f[R]
.IP \[bu] 2
\f[CR]Scheduler.yield()\f[R]
.IP \[bu] 2
\f[CR]TaskController\f[R]
.IP \[bu] 2
\f[CR]Window.scheduler\f[R]
