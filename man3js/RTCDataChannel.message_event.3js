.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCDataChannel.message_event" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCDataChannel.message_event \- RTCDataChannel: message event
.SH SYNOPSIS
The WebRTC \f[B]\f[CB]message\f[B]\f[R] event is sent to the
\f[CR]onmessage\f[R] event handler on an \f[CR]RTCDataChannel\f[R]
object when a message has been received from the remote peer.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]message\f[R] event uses as its event object
type the \f[CR]MessageEvent\f[R] interface defined by the HTML
specification.
.RE
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {});

onmessage = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A reference to the message emitter, one of WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R].
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
For a given \f[CR]RTCDataChannel\f[R], \f[CR]dc\f[R], created for a peer
connection using its \f[CR]createDataChannel()\f[R] method, this code
sets up a handler for incoming messages and acts on them by adding the
data contained within the message to the current document as a new
\f[CR]<p>\f[R] (paragraph) element.
.IP
.EX
dc.addEventListener(
  \[dq]message\[dq],
  (event) \f[B]=>\f[R] {
    \f[B]let\f[R] newParagraph = document.createElement(\[dq]p\[dq]);
    \f[B]let\f[R] textNode = document.createTextNode(event.data);
    newParagraph.appendChild(textNode);

    document.body.appendChild(newParagraph);
  },
  \f[B]false\f[R],
);
.EE
.PP
Lines 2\-4 create the new paragraph element and add the message data to
it as a new text node.
Line 6 appends the new paragraph to the end of the document\[cq]s body.
.PP
You can also use an \f[CR]RTCDataChannel\f[R] object\[cq]s
\f[CR]onmessage\f[R] event handler property to set the event handler:
.IP
.EX
dc.onmessage = (event) \f[B]=>\f[R] {
  \f[B]let\f[R] newParagraph = document.createElement(\[dq]p\[dq]);
  \f[B]let\f[R] textNode = document.createTextNode(event.data);
  newParagraph.appendChild(textNode);

  document.body.appendChild(newParagraph);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
A simple RTCDataChannel example
.IP \[bu] 2
Related events: \f[CR]open\f[R], \f[CR]close\f[R], and \f[CR]error\f[R]
.IP \[bu] 2
\f[CR]RTCDataChannel.send()\f[R]
