.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "PerformanceResourceTiming.nextHopProtocol" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.nextHopProtocol \- PerformanceResourceTiming:
nextHopProtocol property
.SH SYNOPSIS
The \f[B]\f[CB]nextHopProtocol\f[B]\f[R] read\-only property is a string
representing the network protocol used to fetch the resource, as
identified by the \c
.UR https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
ALPN Protocol ID (RFC7301)
.UE \c
\&.
.PP
When a proxy is used, if a tunnel connection is established, this
property returns the ALPN Protocol ID of the tunneled protocol.
Otherwise, this property returns the ALPN Protocol ID of the first hop
to the proxy.
.SH VALUE
The \f[CR]nextHopProtocol\f[R] property can have the following values:
.IP \[bu] 2
A string representing the network protocol used to fetch the resource,
as identified by the \c
.UR https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
ALPN Protocol ID (RFC7301)
.UE \c
\&.
Typical values are:
.RS 2
.IP \[bu] 2
\f[CR]\[dq]http/0.9\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]http/1.0\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]http/1.1\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]h2\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]h2c\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]h3\[dq]\f[R]
.RE
.IP \[bu] 2
An empty string if the resource is a cross\-origin request and no
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header is used.
.SH EXAMPLES
.SS Logging resources that use neither HTTP/2 nor HTTP/3
The \f[CR]nextHopProtocol\f[R] property can be used to see resources
that don\[cq]t use the HTTP/2 or HTTP/3 protocols.
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]const\f[R] protocol = entry.nextHopProtocol;
    \f[B]if\f[R] (protocol && !(protocol === \[dq]h2\[dq] || protocol === \[dq]h3\[dq])) {
      console.log(\[ga]${entry.name} uses ${protocol}.\[ga]);
    }
  });
});

observer.observe({ type: \[dq]resource\[dq], buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) \f[B]=>\f[R] {
  \f[B]const\f[R] protocol = entry.nextHopProtocol;
  \f[B]if\f[R] (protocol && !(protocol === \[dq]h2\[dq] || protocol === \[dq]h3\[dq])) {
    console.log(\[ga]${entry.name} uses ${protocol}.\[ga]);
  }
});
.EE
.SS Cross\-origin network protocol information
If the value of the \f[CR]nextHopProtocol\f[R] property is an empty
string, the resource might be a cross\-origin request.
To expose cross\-origin network protocol information, the
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header needs to be set.
.PP
For example, to allow \f[CR]https://developer.mozilla.org\f[R] to see
network protocol information, the cross\-origin resource should send:
.IP
.EX
Timing\-Allow\-Origin: https://developer.mozilla.org
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Timing\-Allow\-Origin\f[R]
.IP \[bu] 2
HTTP/2
.IP \[bu] 2
HTTP/3
