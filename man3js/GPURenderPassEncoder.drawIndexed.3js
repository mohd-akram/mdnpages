.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERPASSENCODER.DRAWINDEXED" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderPassEncoder.drawIndexed \- GPURenderPassEncoder: drawIndexed()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]drawIndexed()\f[B]\f[R] method of the
\f[CR]GPURenderPassEncoder\f[R] interface draws indexed primitives based
on the vertex and index buffers provided by \f[CR]setVertexBuffer()\f[R]
and \f[CR]setIndexBuffer()\f[R].
.SH SYNTAX
.IP
.EX
drawIndexed(indexCount)
drawIndexed(indexCount, instanceCount)
drawIndexed(indexCount, instanceCount, firstIndex)
drawIndexed(indexCount, instanceCount, firstIndex, baseVertex)
drawIndexed(indexCount, instanceCount, firstIndex, baseVertex, firstInstance)
.EE
.SS Parameters
.TP
\f[B]indexCount\f[R]
A number defining the number of indices to draw.
.TP
\f[B]instanceCount\f[R] \f[I](optional)\f[R]
A number defining the number of instances to draw.
If omitted, \f[CR]instanceCount\f[R] defaults to 1.
.TP
\f[B]firstIndex\f[R] \f[I](optional)\f[R]
A number defining the offset into the index buffer, in indices, to begin
drawing from.
If omitted, \f[CR]firstIndex\f[R] defaults to 0.
.TP
\f[B]baseVertex\f[R] \f[I](optional)\f[R]
A number added to each index value before indexing into the vertex
buffers.
If omitted, \f[CR]baseVertex\f[R] defaults to 0.
.TP
\f[B]firstInstance\f[R] \f[I](optional)\f[R]
A number defining the first instance to draw.
If omitted, \f[CR]firstInstance\f[R] defaults to 0.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SH EXAMPLES
In the WebGPU Samples \c
.UR https://webgpu.github.io/webgpu-samples/samples/shadowMapping/
Shadow Mapping
.UE \c
\ example, \f[CR]drawIndexed()\f[R] is used in two separate render
passes in each animation frame, one to populate the shadow buffer and
one to draw the primary view of the scene.
Study the example code listing for the full context.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] commandEncoder = device.createCommandEncoder();
{
  \f[B]const\f[R] shadowPass = commandEncoder.beginRenderPass(shadowPassDescriptor);
  shadowPass.setPipeline(shadowPipeline);
  shadowPass.setBindGroup(0, sceneBindGroupForShadow);
  shadowPass.setBindGroup(1, modelBindGroup);
  shadowPass.setVertexBuffer(0, vertexBuffer);
  shadowPass.setIndexBuffer(indexBuffer, \(dquint16\(dq);
  shadowPass.drawIndexed(indexCount);

  shadowPass.end();
}
{
  \f[B]const\f[R] renderPass = commandEncoder.beginRenderPass(renderPassDescriptor);
  renderPass.setPipeline(pipeline);
  renderPass.setBindGroup(0, sceneBindGroupForRender);
  renderPass.setBindGroup(1, modelBindGroup);
  renderPass.setVertexBuffer(0, vertexBuffer);
  renderPass.setIndexBuffer(indexBuffer, \(dquint16\(dq);
  renderPass.drawIndexed(indexCount);

  renderPass.end();
}

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
