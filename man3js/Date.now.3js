.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATE.NOW" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.now \- Date.now()
.SH SYNOPSIS
The \f[B]\f[CB]Date.now()\f[B]\f[R] static method returns the number of
milliseconds elapsed since the epoch, which is defined as the midnight
at the beginning of January 1, 1970, UTC.
.IP
.EX
\f[I]// This example takes 2 seconds to run\f[R]
\f[B]const\f[R] start = Date.now();

console.log(\(dqstarting timer...\(dq);
\f[I]// Expected output: \(dqstarting timer...\(dq\f[R]

setTimeout(() \f[B]=>\f[R] {
  \f[B]const\f[R] ms = Date.now() \- start;

  console.log(\(gaseconds elapsed = ${Math.floor(ms / 1000)}\(ga);
  \f[I]// Expected output: \(dqseconds elapsed = 2\(dq\f[R]
}, 2000);
.EE
.SH SYNTAX
.IP
.EX
Date.now()
.EE
.SS Parameters
None.
.SS Return value
A number representing the timestamp, in milliseconds, of the current
time.
.SH DESCRIPTION
.SS Reduced time precision
To offer protection against timing attacks and fingerprinting, the
precision of \f[CR]Date.now()\f[R] might get rounded depending on
browser settings.
In Firefox, the \f[CR]privacy.reduceTimerPrecision\f[R] preference is
enabled by default and defaults to 2ms.
You can also enable \f[CR]privacy.resistFingerprinting\f[R], in which
case the precision will be 100ms or the value of
\f[CR]privacy.resistFingerprinting.reduceTimerPrecision.microseconds\f[R],
whichever is larger.
.PP
For example, with reduced time precision, the result of
\f[CR]Date.now()\f[R] will always be a multiple of 2, or a multiple of
100 (or
\f[CR]privacy.resistFingerprinting.reduceTimerPrecision.microseconds\f[R])
with \f[CR]privacy.resistFingerprinting\f[R] enabled.
.IP
.EX
\f[I]// reduced time precision (2ms) in Firefox 60\f[R]
Date.now();
\f[I]// Might be:\f[R]
\f[I]// 1519211809934\f[R]
\f[I]// 1519211810362\f[R]
\f[I]// 1519211811670\f[R]
\f[I]// \&...\f[R]

\f[I]// reduced time precision with \(gaprivacy.resistFingerprinting\(ga enabled\f[R]
Date.now();
\f[I]// Might be:\f[R]
\f[I]// 1519129853500\f[R]
\f[I]// 1519129858900\f[R]
\f[I]// 1519129864400\f[R]
\f[I]// \&...\f[R]
.EE
.SH EXAMPLES
.SS Measuring time elapsed
You can use \f[CR]Date.now()\f[R] to get the current time in
milliseconds, then subtract a previous time to find out how much time
elapsed between the two calls.
.IP
.EX
\f[B]const\f[R] start = Date.now();
doSomeLongRunningProcess();
console.log(\(gaTime elapsed: ${Date.now() \- start} ms\(ga);
.EE
.PP
For more complex scenarios, you may want to use the performance API
instead.
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-date
Polyfill of \f[CR]Date.now\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]Performance.now()\f[R]
.IP \(bu 2
\f[CR]console.time()\f[R]
.IP \(bu 2
\f[CR]console.timeEnd()\f[R]
