.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "FileSystemSyncAccessHandle.read" "JS" "April 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemSyncAccessHandle.read \- FileSystemSyncAccessHandle: read()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is only available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]read()\f[B]\f[R] method of the
\f[CR]FileSystemSyncAccessHandle\f[R] interface reads the content of the
file associated with the handle into a specified buffer, optionally at a
given offset.
.SH SYNTAX
.IP
.EX
read(buffer, options)
.EE
.SS Parameters
.TP
\f[B]buffer\f[R]
An \f[CR]ArrayBuffer\f[R] or \f[CR]ArrayBufferView\f[R] (such as a
\f[CR]DataView\f[R]) representing the buffer that the file content
should be read into.
Note that you cannot directly manipulate the contents of an
\f[CR]ArrayBuffer\f[R].
Instead, you create one of the typed array objects like an
\f[CR]Int8Array\f[R] or a \f[CR]DataView\f[R] object which represents
the buffer in a specific format, and use that to read and write the
contents of the buffer.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An options object containing the following properties:
.RS
.TP
\f[B]at\f[R]
A number representing the offset in bytes that the file should be read
from.
.RE
.SS Return value
A number representing the number of bytes read from the file.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the associated access handle is already closed.
.TP
\f[B]TypeError\f[R]
Thrown if the underlying file system does not support reading the file
from the specified file offset.
.SH EXAMPLES
The following asynchronous event handler function is contained inside a
Web Worker.
On receiving a message from the main thread it:
.IP \[bu] 2
Creates a synchronous file access handle.
.IP \[bu] 2
Gets the size of the file and creates an \f[CR]ArrayBuffer\f[R] to
contain it.
.IP \[bu] 2
Reads the file contents into the buffer.
.IP \[bu] 2
Encodes the message and writes it to the end of the file.
.IP \[bu] 2
Persists the changes to disk and closes the access handle.
.IP
.EX
onmessage = \f[B]async\f[R] (e) \f[B]=>\f[R] {
  \f[I]// Retrieve message sent to work from main script\f[R]
  \f[B]const\f[R] message = e.data;

  \f[I]// Get handle to draft file\f[R]
  \f[B]const\f[R] root = \f[B]await\f[R] navigator.storage.getDirectory();
  \f[B]const\f[R] draftHandle = \f[B]await\f[R] root.getFileHandle(\[dq]draft.txt\[dq], { create: \f[B]true\f[R] });
  \f[I]// Get sync access handle\f[R]
  \f[B]const\f[R] accessHandle = \f[B]await\f[R] draftHandle.createSyncAccessHandle();

  \f[I]// Get size of the file.\f[R]
  \f[B]const\f[R] fileSize = accessHandle.getSize();
  \f[I]// Read file content to a buffer.\f[R]
  \f[B]const\f[R] buffer = \f[B]new\f[R] DataView(\f[B]new\f[R] ArrayBuffer(fileSize));
  \f[B]const\f[R] readBuffer = accessHandle.read(buffer, { at: 0 });

  \f[I]// Write the message to the end of the file.\f[R]
  \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
  \f[B]const\f[R] encodedMessage = encoder.encode(message);
  \f[B]const\f[R] writeBuffer = accessHandle.write(encodedMessage, { at: readBuffer });

  \f[I]// Persist changes to disk.\f[R]
  accessHandle.flush();

  \f[I]// Always close FileSystemSyncAccessHandle if done.\f[R]
  accessHandle.close();
};
.EE
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the spec, \f[CR]close()\f[R],
\f[CR]flush()\f[R], \f[CR]getSize()\f[R], and \f[CR]truncate()\f[R] were
wrongly specified as asynchronous methods, and older versions of some
browsers implement them in this way.
However, all current browsers that support these methods implement them
as synchronous methods.
.RE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
