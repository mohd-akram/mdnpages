.\" Automatically generated by Pandoc 3.4
.\"
.TH "Intl.supportedValuesOf" "JS" "October 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.supportedValuesOf \- Intl.supportedValuesOf()
.SH SYNOPSIS
The \f[B]\f[CB]Intl.supportedValuesOf()\f[B]\f[R] static method returns
an array containing the supported calendar, collation, currency,
numbering systems, or unit values supported by the implementation.
.PP
Duplicates are omitted and the array is sorted in ascending
lexicographical order (or more precisely, using
\f[CR]Array.prototype.sort()\f[R] with an \f[CR]undefined\f[R] compare
function).
.PP
The method can be used to feature\-test whether values are supported in
a particular implementation and download a polyfill only if necessary.
It can also be used to build UIs that allow users to select their
preferred localized values, for example when the UI is created from
WebGL or server\-side.
.SH SYNTAX
.IP
.EX
Intl.supportedValuesOf(key)
.EE
.SS Parameters
.TP
\f[B]key\f[R]
A key string indicating the category of values to be returned.
This is one of: \f[CR]\[dq]calendar\[dq]\f[R],
\f[CR]\[dq]collation\[dq]\f[R], \f[CR]\[dq]currency\[dq]\f[R],
\f[CR]\[dq]numberingSystem\[dq]\f[R], \f[CR]\[dq]timeZone\[dq]\f[R],
\f[CR]\[dq]unit\[dq]\f[R].
.SS Return value
A sorted array of unique string values indicating the values supported
by the implementation for the given key.
.RS
.PP
\f[B]Note:\f[R] While the IANA database changes from time to time, the
Unicode CLDR database (which browsers use) keeps old time zone names for
stability purposes.
Some browsers may use the legacy name, while others override it with the
new name.
See \f[CR]Intl.Locale.prototype.getTimeZones\f[R] for more information.
.RE
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if an unsupported key was passed as a parameter.
.SH EXAMPLES
.SS Feature testing
You can check that the method is supported by comparing to
\f[CR]undefined\f[R]:
.IP
.EX
\f[B]if\f[R] (\f[B]typeof\f[R] Intl.supportedValuesOf !== \[dq]undefined\[dq]) {
  \f[I]// method is supported\f[R]
}
.EE
.SS Get all values for key
To get the supported values for calendar you call the method with the
key \f[CR]\[dq]calendar\[dq]\f[R].
You can then iterate through the returned array as shown below:
.IP
.EX
Intl.supportedValuesOf(\[dq]calendar\[dq]).forEach((calendar) \f[B]=>\f[R] {
  \f[I]// \[dq]buddhist\[dq], \[dq]chinese\[dq], \[dq]coptic\[dq], \[dq]dangi\[dq], etc.\f[R]
});
.EE
.RS
.PP
\f[B]Note:\f[R] The array returned for calendar values will always
include the value \[lq]gregory\[rq] (gregorian).
.RE
.PP
The other values are all obtained in the same way:
.IP
.EX
Intl.supportedValuesOf(\[dq]collation\[dq]).forEach((collation) \f[B]=>\f[R] {
  \f[I]// \[dq]compat\[dq], \[dq]dict\[dq], \[dq]emoji\[dq], etc.\f[R]
});

Intl.supportedValuesOf(\[dq]currency\[dq]).forEach((currency) \f[B]=>\f[R] {
  \f[I]// \[dq]ADP\[dq], \[dq]AED\[dq], \[dq]AFA\[dq], \[dq]AFN\[dq], \[dq]ALK\[dq], \[dq]ALL\[dq], \[dq]AMD\[dq], etc.\f[R]
});

Intl.supportedValuesOf(\[dq]numberingSystem\[dq]).forEach((numberingSystem) \f[B]=>\f[R] {
  \f[I]// \[dq]adlm\[dq], \[dq]ahom\[dq], \[dq]arab\[dq], \[dq]arabext\[dq], \[dq]bali\[dq], etc.\f[R]
});

Intl.supportedValuesOf(\[dq]timeZone\[dq]).forEach((timeZone) \f[B]=>\f[R] {
  \f[I]// \[dq]Africa/Abidjan\[dq], \[dq]Africa/Accra\[dq], \[dq]Africa/Addis_Ababa\[dq], \[dq]Africa/Algiers\[dq], etc.\f[R]
});

Intl.supportedValuesOf(\[dq]unit\[dq]).forEach((unit) \f[B]=>\f[R] {
  \f[I]// \[dq]acre\[dq], \[dq]bit\[dq], \[dq]byte\[dq], \[dq]celsius\[dq], \[dq]centimeter\[dq], etc.\f[R]
});
.EE
.SS Invalid key throws RangeError
.IP
.EX
\f[B]try\f[R] {
  Intl.supportedValuesOf(\[dq]someInvalidKey\[dq]);
} \f[B]catch\f[R] (err) {
  \f[I]//Error: RangeError: invalid key: \[dq]someInvalidKey\[dq]\f[R]
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://formatjs.github.io/docs/polyfills/intl-supportedvaluesof/
Polyfill of \f[CR]Intl.supportedValuesOf\f[R] in FormatJS
.UE \c
.IP \[bu] 2
\f[CR]Intl\f[R]
