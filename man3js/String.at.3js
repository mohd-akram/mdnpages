.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.AT" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.at \- String.prototype.at()
.SH SYNOPSIS
The \f[B]\f[CB]at()\f[B]\f[R] method of \f[CR]String\f[R] values takes
an integer value and returns a new \f[CR]String\f[R] consisting of the
single UTF\-16 code unit located at the specified offset.
This method allows for positive and negative integers.
Negative integers count back from the last string character.
.IP
.EX
\f[B]const\f[R] sentence = \(dqThe quick brown fox jumps over the lazy dog.\(dq;

\f[B]let\f[R] index = 5;

console.log(\(gaAn index of ${index} returns the character ${sentence.at(index)}\(ga);
\f[I]// Expected output: \(dqAn index of 5 returns the character u\(dq\f[R]

index = \-4;

console.log(\(gaAn index of ${index} returns the character ${sentence.at(index)}\(ga);
\f[I]// Expected output: \(dqAn index of \-4 returns the character d\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
at(index)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
The index (position) of the string character to be returned.
Supports relative indexing from the end of the string when passed a
negative index; i.e., if a negative number is used, the character
returned will be found by counting back from the end of the string.
.SS Return value
A \f[CR]String\f[R] consisting of the single UTF\-16 code unit located
at the specified position.
Returns \f[CR]undefined\f[R] if the given index can not be found.
.SH EXAMPLES
.SS Return the last character of a string
The following example provides a function which returns the last
character found in a specified string.
.IP
.EX
\f[I]// A function which returns the last character of a given string\f[R]
\f[B]function\f[R] returnLast(str) {
  \f[B]return\f[R] str.at(\-1);
}

\f[B]let\f[R] invoiceRef = \(dqmy\-invoice01\(dq;

console.log(returnLast(invoiceRef)); \f[I]// \(aq1\(aq\f[R]

invoiceRef = \(dqmy\-invoice02\(dq;

console.log(returnLast(invoiceRef)); \f[I]// \(aq2\(aq\f[R]
.EE
.SS Comparing methods
Here we compare different ways to select the penultimate (last but one)
character of a \f[CR]String\f[R].
Whilst all below methods are valid, it highlights the succinctness and
readability of the \f[CR]at()\f[R] method.
.IP
.EX
\f[B]const\f[R] myString = \(dqEvery green bus drives fast.\(dq;

\f[I]// Using length property and charAt() method\f[R]
\f[B]const\f[R] lengthWay = myString.charAt(myString.length \- 2);
console.log(lengthWay); \f[I]// \(aqt\(aq\f[R]

\f[I]// Using slice() method\f[R]
\f[B]const\f[R] sliceWay = myString.slice(\-2, \-1);
console.log(sliceWay); \f[I]// \(aqt\(aq\f[R]

\f[I]// Using at() method\f[R]
\f[B]const\f[R] atWay = myString.at(\-2);
console.log(atWay); \f[I]// \(aqt\(aq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]String.prototype.at\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/string.prototype.at
es\-shims polyfill of \f[CR]String.prototype.at\f[R]
.UE \c
.IP \(bu 2
\f[CR]String.prototype.indexOf()\f[R]
.IP \(bu 2
\f[CR]String.prototype.lastIndexOf()\f[R]
.IP \(bu 2
\f[CR]String.prototype.charCodeAt()\f[R]
.IP \(bu 2
\f[CR]String.prototype.codePointAt()\f[R]
.IP \(bu 2
\f[CR]String.prototype.split()\f[R]
