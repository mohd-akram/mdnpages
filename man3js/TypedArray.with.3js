.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "TYPEDARRAY.WITH" "3JS" "September 15, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.with \- TypedArray.prototype.with()
.SH SYNOPSIS
The \f[B]\f[CB]with()\f[B]\f[R] method of \f[CR]TypedArray\f[R]
instances is the copying version of using the bracket notation to change
the value of a given index.
It returns a new typed array with the element at the given index
replaced with the given value.
This method has the same algorithm as \f[CR]Array.prototype.with()\f[R].
.SH SYNTAX
.IP
.EX
arrayInstance.with(index, value)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
Zero\-based index at which to change the typed array, converted to an
integer.
.TP
\f[B]value\f[R]
Any value to be assigned to the given index.
.SS Return value
A new typed array with the element at \f[CR]index\f[R] replaced with
\f[CR]value\f[R].
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]index >= array.length\f[R] or
\f[CR]index < \-array.length\f[R].
.SH DESCRIPTION
See \f[CR]Array.prototype.with()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Using with()
.IP
.EX
\f[B]const\f[R] arr = \f[B]new\f[R] Uint8Array([1, 2, 3, 4, 5]);
console.log(arr.with(2, 6)); \f[I]// Uint8Array [1, 2, 6, 4, 5]\f[R]
console.log(arr); \f[I]// Uint8Array [1, 2, 3, 4, 5]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#change-array-by-copy
Polyfill of \f[CR]TypedArray.prototype.with\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
JavaScript typed arrays guide
.IP \(bu 2
\f[CR]TypedArray.prototype.toReversed()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.toSorted()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.at()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.with()\f[R]
