.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ShadowRoot" "JS" "June 10, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ShadowRoot \- ShadowRoot
.SH SYNOPSIS
The \f[B]\f[CB]ShadowRoot\f[B]\f[R] interface of the Shadow DOM API is
the root node of a DOM subtree that is rendered separately from a
document\[cq]s main DOM tree.
.PP
You can retrieve a reference to an element\[cq]s shadow root using its
\f[CR]Element.shadowRoot\f[R] property, provided it was created using
\f[CR]Element.attachShadow()\f[R] with the \f[CR]mode\f[R] option set to
\f[CR]open\f[R].
.SH INSTANCE PROPERTIES
.TP
\f[B]ShadowRoot.activeElement\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Element\f[R] within the shadow tree that has focus.
.TP
\f[B]ShadowRoot.adoptedStyleSheets\f[R]
Add an array of constructed stylesheets to be used by the shadow DOM
subtree.
These may be shared with other DOM subtrees that share the same parent
\f[CR]Document\f[R] node, and the document itself.
.TP
\f[B]ShadowRoot.clonable\f[R] \f[I](read\-only)\f[R]
A boolean that indicates whether the shadow root is clonable.
.TP
\f[B]ShadowRoot.delegatesFocus\f[R] \f[I](read\-only)\f[R]
A boolean that indicates whether the shadow root delegates focus if a
non\-focusable node is selected.
.TP
\f[B]ShadowRoot.fullscreenElement\f[R] \f[I](read\-only)\f[R]
The element that\[cq]s currently in full screen mode for this shadow
tree.
.TP
\f[B]ShadowRoot.host\f[R] \f[I](read\-only)\f[R]
Returns a reference to the DOM element the \f[CR]ShadowRoot\f[R] is
attached to.
.TP
\f[B]ShadowRoot.innerHTML\f[R]
Sets or returns a reference to the DOM tree inside the
\f[CR]ShadowRoot\f[R].
.TP
\f[B]ShadowRoot.mode\f[R] \f[I](read\-only)\f[R]
The mode of the \f[CR]ShadowRoot\f[R], either \f[CR]open\f[R] or
\f[CR]closed\f[R].
This defines whether or not the shadow root\[cq]s internal features are
accessible from JavaScript.
.TP
\f[B]ShadowRoot.pictureInPictureElement\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Element\f[R] within the shadow tree that is currently
being presented in picture\-in\-picture mode.
.TP
\f[B]ShadowRoot.pointerLockElement\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Element\f[R] set as the target for mouse events while
the pointer is locked.
\f[CR]null\f[R] if lock is pending, pointer is unlocked, or if the
target is in another tree.
.TP
\f[B]ShadowRoot.serializable\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
A boolean that indicates whether the shadow root is serializable.
A serializable shadow root inside an element will be serialized by
\f[CR]Element.getHTML()\f[R] or \f[CR]ShadowRoot.getHTML()\f[R] when its
\f[CR]options.serializableShadowRoots\f[R] parameter is set
\f[CR]true\f[R].
This is set when the shadow root is created.
.TP
\f[B]ShadowRoot.slotAssignment\f[R] \f[I](read\-only)\f[R]
Returns a string containing the type of slot assignment, either
\f[CR]manual\f[R] or \f[CR]named\f[R].
.TP
\f[B]ShadowRoot.styleSheets\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]StyleSheetList\f[R] of \f[CR]CSSStyleSheet\f[R] objects
for stylesheets explicitly linked into, or embedded in a shadow tree.
.SH INSTANCE METHODS
.TP
\f[B]ShadowRoot.getAnimations()\f[R]
Returns an array of all \f[CR]Animation\f[R] objects currently in
effect, whose target elements are descendants of the shadow tree.
.TP
\f[B]ShadowRoot.getSelection()\f[R] \f[I](non\-standard)\f[R]
Returns a \f[CR]Selection\f[R] object representing the range of text
selected by the user, or the current position of the caret.
.TP
\f[B]ShadowRoot.elementFromPoint()\f[R] \f[I](non\-standard)\f[R]
Returns the topmost element at the specified coordinates.
.TP
\f[B]ShadowRoot.elementsFromPoint()\f[R] \f[I](non\-standard)\f[R]
Returns an array of all elements at the specified coordinates.
.TP
\f[B]ShadowRoot.setHTMLUnsafe()\f[R]
Parses a string of HTML into a document fragment, without sanitization,
which then replaces the shadowroot\[cq]s original subtree.
The HTML string may include declarative shadow roots, which would be
parsed as template elements the HTML was set using
\f[CR]ShadowRoot.innerHTML\f[R].
.SH EVENTS
The following events are available to \f[CR]ShadowRoot\f[R] via event
bubbling from \f[CR]HTMLSlotElement\f[R]:
.TP
\f[B]HTMLSlotElement\f[R] \f[B]slotchange\f[R] event
An event fired when the node(s) contained in that slot change.
.SH EXAMPLES
The following snippets are taken from our \c
.UR https://github.com/mdn/web-components-examples/tree/main/life-cycle-callbacks
life\-cycle\-callbacks
.UE \c
\ example (\c
.UR https://mdn.github.io/web-components-examples/life-cycle-callbacks/
see it live also
.UE \c
), which creates an element that displays a square of a size and color
specified in the element\[cq]s attributes.
.PP
Inside the \f[CR]<custom\-square>\f[R] element\[cq]s class definition we
include some life cycle callbacks that make a call to an external
function, \f[CR]updateStyle()\f[R], which actually applies the size and
color to the element.
You\[cq]ll see that we are passing it \f[CR]this\f[R] (the custom
element itself) as a parameter.
.IP
.EX
connectedCallback() {
  console.log(\[aq]Custom square element added to page.\[aq]);
  updateStyle(\f[B]this\f[R]);
}

attributeChangedCallback(name, oldValue, newValue) {
  console.log(\[aq]Custom square element attributes changed.\[aq]);
  updateStyle(\f[B]this\f[R]);
}
.EE
.PP
In the \f[CR]updateStyle()\f[R] function itself, we get a reference to
the shadow DOM using \f[CR]Element.shadowRoot\f[R].
From here we use standard DOM traversal techniques to find the
\f[CR]<style>\f[R] element inside the shadow DOM and then update the CSS
found inside it:
.IP
.EX
\f[B]function\f[R] updateStyle(elem) {
  \f[B]const\f[R] shadow = elem.shadowRoot;
  \f[B]const\f[R] childNodes = shadow.childNodes;
  \f[B]for\f[R] (\f[B]const\f[R] node \f[B]of\f[R] childNodes) {
    \f[B]if\f[R] (node.nodeName === \[dq]STYLE\[dq]) {
      node.textContent = \[ga]
div {
  width: ${elem.getAttribute(\[dq]l\[dq])}px;
  height: ${elem.getAttribute(\[dq]l\[dq])}px;
  background\-color: ${elem.getAttribute(\[dq]c\[dq])};
}
      \[ga];
    }
  }
}
.EE
