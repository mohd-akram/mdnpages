.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBGL2RENDERINGCONTEXT.VERTEXATTRIBIPOINTER" "3JS" "April 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGL2RenderingContext.vertexAttribIPointer \- WebGL2RenderingContext:
vertexAttribIPointer() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGL2RenderingContext.vertexAttribIPointer()\f[B]\f[R]
method of the WebGL 2 API specifies integer data formats and locations
of vertex attributes in a vertex attributes array.
.SH SYNTAX
.IP
.EX
vertexAttribIPointer(index, size, type, stride, offset)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
A \f[CR]GLuint\f[R] specifying the index of the vertex attribute that is
to be modified.
.TP
\f[B]size\f[R]
A \f[CR]GLint\f[R] specifying the number of components per vertex
attribute.
Must be 1, 2, 3, or 4.
.TP
\f[B]type\f[R]
A \f[CR]GLenum\f[R] specifying the data type of each component in the
array.
Must be one of: \f[CR]gl.BYTE\f[R], \f[CR]gl.UNSIGNED_BYTE\f[R],
\f[CR]gl.SHORT\f[R], \f[CR]gl.UNSIGNED_SHORT\f[R], \f[CR]gl.INT\f[R], or
\f[CR]gl.UNSIGNED_INT\f[R].
.TP
\f[B]stride\f[R]
A \f[CR]GLsizei\f[R] specifying the offset in bytes between the
beginning of consecutive vertex attributes.
.TP
\f[B]offset\f[R]
A \f[CR]GLintptr\f[R] specifying an offset in bytes of the first
component in the vertex attribute array.
Must be a multiple of \f[CR]type\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SH DESCRIPTION
Very similar to \f[CR]WebGLRenderingContext.vertexAttribPointer()\f[R].
The main difference is that while values specified by
\f[CR]vertexAttribPointer\f[R] are always interpreted as floating\-point
values in the shader (even if they were originally specified as integers
in the buffer), this method allows specifying values which are
interpreted as integers in the shader.
.SH EXAMPLES
.SS Linear Blend Skinning
.IP
.EX
\f[I]// Describe the layout of the buffer:\f[R]
\f[I]// 1. position\f[R]
gl.vertexAttribPointer(0, 3, gl.FLOAT, \f[B]false\f[R], 20, 0);
gl.enableVertexAttribArray(0);
\f[I]// 2. bone weights, normalized to [0, 1]\f[R]
gl.vertexAttribPointer(1, 4, gl.UNSIGNED_BYTE, \f[B]true\f[R], 20, 12);
gl.enableVertexAttribArray(1);
\f[I]// 3. bone indices, interpreted as integer\f[R]
gl.vertexAttribIPointer(2, 4, gl.UNSIGNED_BYTE, 20, 16);
gl.enableVertexAttribArray(2);

\f[I]// Connect to attributes from the vertex shader\f[R]
gl.bindAttribLocation(shaderProgram, 0, \(dqposition\(dq);
gl.bindAttribLocation(shaderProgram, 1, \(dqboneWeights\(dq);
gl.bindAttribLocation(shaderProgram, 2, \(dqboneIndices\(dq);
.EE
.IP
.EX
<\f[B]script\f[R] id=\(dqshader\-vs\(dq type=\(dqx\-shader/x\-vertex\(dq>
  #version 300 es

  uniform mat4 mvMatrix;
  uniform mat4 bones[120];

  \f[B]in\f[R] vec3 position;
  \f[B]in\f[R] vec4 boneWeights;
  \f[B]in\f[R] uvec4 boneIndices;\f[I]//read as 4\-component unsigned integer\f[R]

  \f[B]void\f[R] main() {
      vec4 skinnedPosition =
          bones[boneIndices.s] * vec4(position, 1.0) * boneWeights.s +
          bones[boneIndices.t] * vec4(position, 1.0) * boneWeights.t +
          bones[boneIndices.p] * vec4(position, 1.0) * boneWeights.p +
          bones[boneIndices.q] * vec4(position, 1.0) * boneWeights.q;
      gl_Position = mvMatrix * skinnedPosition;
  }
</\f[B]script\f[R]>
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]WebGLRenderingContext.vertexAttribPointer()\f[R]
