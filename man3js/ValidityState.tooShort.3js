.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ValidityState.tooShort" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ValidityState.tooShort \- ValidityState: tooShort property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]tooShort\f[B]\f[R] property of the
\f[CR]ValidityState\f[R] interface indicates if the value of an
\f[CR]<input>\f[R], \f[CR]<button>\f[R], \f[CR]<select>\f[R],
\f[CR]<output>\f[R], \f[CR]<fieldset>\f[R] or \f[CR]<textarea>\f[R],
after having been edited by the user, is less than the minimum
code\-unit length established by the element\[cq]s \f[CR]minlength\f[R]
attribute.
.SH VALUE
A boolean that is \f[CR]true\f[R] if the \f[CR]ValidityState\f[R] does
not conform to the constraints.
.SH EXAMPLES
.SS Input with too short string value
The following example checks the validity of a text input element.
A constraint has been added using the \f[CR]minlength\f[R] attribute so
the input expects a string with a minimum of 4 characters.
If the user enters a string that\[cq]s too short, the element fails
constraint validation, and the styles matching \f[CR]:invalid\f[R] CSS
pseudo\-class are applied.
.IP
.EX
input\f[BI]:invalid\f[R] {
  \f[B]outline\f[R]: red solid 3px;
}
.EE
.IP
.EX
<\f[B]pre\f[R] id=\[dq]log\[dq]>Validation logged here...</\f[B]pre\f[R]>
<\f[B]input\f[R] type=\[dq]text\[dq] id=\[dq]userText\[dq] minlength=\[dq]4\[dq] />
.EE
.IP
.EX
\f[B]const\f[R] userInput = document.getElementById(\[dq]userText\[dq]);
\f[B]const\f[R] logElement = document.getElementById(\[dq]log\[dq]);

\f[B]function\f[R] log(text) {
  logElement.innerText = text;
}

userInput.addEventListener(\[dq]input\[dq], () \f[B]=>\f[R] {
  userInput.reportValidity();
  \f[B]if\f[R] (userInput.validity.tooShort) {
    log(\[dq]Not enough characters entered.\[dq]);
  } \f[B]else\f[R] {
    log(\[dq]Input is valid\&...\[dq]);
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Guide: Constraint validation
.IP \[bu] 2
Tutorial: Form data validation
