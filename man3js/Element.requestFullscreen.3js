.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.REQUESTFULLSCREEN" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.requestFullscreen \- Element: requestFullscreen() method
.SH SYNOPSIS
The \f[B]\f[CB]Element.requestFullscreen()\f[B]\f[R] method issues an
asynchronous request to make the element be displayed in fullscreen
mode.
.PP
It\(cqs not guaranteed that the element will be put into full screen
mode.
If permission to enter full screen mode is granted, the returned
\f[CR]Promise\f[R] will resolve and the element will receive a
\f[CR]fullscreenchange\f[R] event to let it know that it\(cqs now in
full screen mode.
If permission is denied, the promise is rejected and the element
receives a \f[CR]fullscreenerror\f[R] event instead.
If the element has been detached from the original document, then the
document receives these events instead.
.SH SYNTAX
.IP
.EX
requestFullscreen()
requestFullscreen(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that controls the behavior of the transition to fullscreen
mode.
The available options are:
.RS
.TP
\f[B]navigationUI\f[R] \f[I](optional)\f[R]
Controls whether or not to show navigation UI while the element is in
fullscreen mode.
The default value is \f[CR]\(dqauto\(dq\f[R], which indicates that the
browser should decide what to do.
.RS
.TP
\f[B]\(dqhide\(dq\f[R]
The browser\(cqs navigation interface will be hidden and the entire
dimensions of the screen will be allocated to the display of the
element.
.TP
\f[B]\(dqshow\(dq\f[R]
The browser will present page navigation controls and possibly other
user interface; the dimensions of the element (and the perceived size of
the screen) will be clamped to leave room for this user interface.
.TP
\f[B]\(dqauto\(dq\f[R]
The browser will choose which of the above settings to apply.
This is the default value.
.RE
.TP
\f[B]screen\f[R] \f[I](optional)\f[R] \f[I](experimental)\f[R]
Specifies on which screen you want to put the element in fullscreen
mode.
This takes a \f[CR]ScreenDetailed\f[R] object as a value, representing
the chosen screen.
.RE
.SS Return value
A \f[CR]Promise\f[R] which is resolved with a value of
\f[CR]undefined\f[R] when the transition to full screen is complete.
.SS Exceptions
\f[I]Rather than throw a traditional exception, the
\f[CI]requestFullscreen()\f[I] procedure announces error conditions by
rejecting the \f[CI]Promise\f[I] it has returned.
The rejection handler receives one of the following exception
values:\f[R]
.TP
\f[B]TypeError\f[R]
The \f[CR]TypeError\f[R] exception may be delivered in any of the
following situations:
.RS
.IP \(bu 2
The document containing the element isn\(cqt fully active; that is,
it\(cqs not the current active document.
.IP \(bu 2
The element is not contained by a document.
.IP \(bu 2
The element is not permitted to use the \f[CR]fullscreen\f[R] feature,
either because of Permissions Policy configuration or other access
control features.
.IP \(bu 2
The element and its document are the same node.
.IP \(bu 2
The element is a popover that is already being shown via
\f[CR]HTMLElement.showPopover()\f[R].
.RE
.SH SECURITY
Transient user activation is required.
The user has to interact with the page or a UI element in order for this
feature to work.
.SH USAGE NOTES
.SS Compatible elements
An element that you wish to place into fullscreen mode has to meet a
small number of simple requirements:
.IP \(bu 2
It must be one of the standard HTML elements or \f[CR]<svg>\f[R] or
\f[CR]<math>\f[R].
.IP \(bu 2
It is \f[I]not\f[R] a \f[CR]<dialog>\f[R] element.
.IP \(bu 2
It must either be located within the top\-level document or in an
\f[CR]<iframe>\f[R] which has the \f[CR]allowfullscreen\f[R] attribute
applied to it.
.PP
Additionally, any set Permissions Policies must allow the use of this
feature.
.SS Detecting fullscreen activation
You can determine whether or not your attempt to switch to fullscreen
mode is successful by using the \f[CR]Promise\f[R] returned by
\f[CR]requestFullscreen()\f[R], as seen in the examples below.
.PP
To learn when other code has toggled fullscreen mode on and off, you
should establish listeners for the \f[CR]fullscreenchange\f[R] event on
the \f[CR]Document\f[R].
It\(cqs also important to listen for \f[CR]fullscreenchange\f[R] to be
aware when, for example, the user manually toggles fullscreen mode, or
when the user switches applications, causing your application to
temporarily exit fullscreen mode.
.SH EXAMPLES
.SS Requesting fullscreen mode
This function toggles the first \f[CR]<video>\f[R] element found in the
document into and out of fullscreen mode.
.IP
.EX
\f[B]function\f[R] toggleFullscreen() {
  \f[B]let\f[R] elem = document.querySelector(\(dqvideo\(dq);

  \f[B]if\f[R] (!document.fullscreenElement) {
    elem.requestFullscreen().catch((err) \f[B]=>\f[R] {
      alert(
        \(gaError attempting to enable fullscreen mode: ${err.message} (${err.name})\(ga,
      );
    });
  } \f[B]else\f[R] {
    document.exitFullscreen();
  }
}
.EE
.PP
If the document isn\(cqt already in fullscreen mode\(emdetected by
looking to see if \f[CR]document.fullscreenElement\f[R] has a
value\(emwe call the video\(cqs \f[CR]requestFullscreen()\f[R] method.
We don\(cqt need to do anything special if successful, but if the
request fails, our promise\(cqs \f[CR]catch()\f[R] handler presents an
alert with an appropriate error message.
.PP
If, on the other hand, fullscreen mode is already in effect, we call
\f[CR]document.exitFullscreen()\f[R] to disable fullscreen mode.
.PP
You can \c
.UR https://fullscreen-requestfullscreen-demo.glitch.me/
see this example in action
.UE \c
\ or \c
.UR https://glitch.com/edit/#!/fullscreen-requestfullscreen-demo
view or remix the code
.UE \c
\ on \c
.UR https://glitch.com/
Glitch
.UE \c
\&.
.SS Using navigationUI
In this example, the entire document is placed into fullscreen mode by
calling \f[CR]requestFullscreen()\f[R] on the document\(cqs
\f[CR]Document.documentElement\f[R], which is the document\(cqs root
\f[CR]<html>\f[R] element.
.IP
.EX
\f[B]let\f[R] elem = document.documentElement;

elem
  .requestFullscreen({ navigationUI: \(dqshow\(dq })
  .then(() \f[B]=>\f[R] {})
  .catch((err) \f[B]=>\f[R] {
    alert(
      \(gaAn error occurred while trying to switch into fullscreen mode: ${err.message} (${err.name})\(ga,
    );
  });
.EE
.PP
The promise\(cqs resolve handler does nothing, but if the promise is
rejected, an error message is displayed by calling \f[CR]alert()\f[R].
.SS Using the screen option
If you wanted to make the element fullscreen on the primary OS screen,
you could use code like the following:
.IP
.EX
\f[B]try\f[R] {
  \f[B]const\f[R] primaryScreen = (\f[B]await\f[R] getScreenDetails()).screens.find(
    (screen) \f[B]=>\f[R] screen.isPrimary,
  );
  \f[B]await\f[R] document.body.requestFullscreen({ screen: primaryScreen });
} \f[B]catch\f[R] (err) {
  console.error(err.name, err.message);
}
.EE
.PP
The \f[CR]Window.getScreenDetails()\f[R] method is used to retrieve the
\f[CR]ScreenDetails\f[R] object for the current device, which contains
\f[CR]ScreenDetailed\f[R] objects representing the different available
screens.
.SH SEE ALSO
.IP \(bu 2
Fullscreen API
.IP \(bu 2
\f[CR]Document.exitFullscreen()\f[R]
.IP \(bu 2
\f[CR]Document.fullscreen\f[R]
.IP \(bu 2
\f[CR]Document.fullscreenElement\f[R]
.IP \(bu 2
\f[CR]:fullscreen\f[R]
.IP \(bu 2
\f[CR]allowfullscreen\f[R]
