'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "NodeIterator" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
NodeIterator \- NodeIterator
.SH SYNOPSIS
The \f[B]\f[CB]NodeIterator\f[B]\f[R] interface represents an iterator
to traverse nodes of a DOM subtree in document order.
.SH SYNTAX
A \f[CR]NodeIterator\f[R] can be created using the
\f[CR]Document.createNodeIterator()\f[R] method, as follows:
.IP
.EX
\f[B]const\f[R] nodeIterator = document.createNodeIterator(root, whatToShow, filter);
.EE
.SH INSTANCE PROPERTIES
\f[I]This interface doesn\[cq]t inherit any property.\f[R]
.TP
\f[B]NodeIterator.root\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Node\f[R] representing the root node, as specified when
the \f[CR]NodeIterator\f[R] was created.
.TP
\f[B]NodeIterator.whatToShow\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]unsigned long\f[R] bitmask that describes the types of
\f[CR]Node\f[R] to be matched.
Non\-matching nodes are skipped, but relevant child nodes may be
included.
.RS
.PP
The possible bitmask values are constants from the \f[CR]NodeFilter\f[R]
interface:
.PP
.TS
tab(@);
lw(8.1n) lw(8.0n) lw(53.8n).
T{
Constant
T}@T{
Numerical value
T}@T{
Description
T}
_
T{
\f[CR]NodeFilter.SHOW_ALL\f[R]
T}@T{
\f[CR]4294967295\f[R] (that is the max value of
\f[CR]unsigned long\f[R])
T}@T{
Shows all nodes.
T}
T{
\f[CR]NodeFilter.SHOW_ATTRIBUTE\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]2\f[R]
T}@T{
Shows attribute \f[CR]Attr\f[R] nodes.
This is meaningful only when creating a \f[CR]NodeIterator\f[R] with an
\f[CR]Attr\f[R] node as its root; in this case, it means that the
attribute node will appear in the first position of the iteration or
traversal.
Since attributes are never children of other nodes, they do not appear
when traversing over the document tree.
T}
T{
\f[CR]NodeFilter.SHOW_CDATA_SECTION\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]8\f[R]
T}@T{
Shows \f[CR]CDATASection\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_COMMENT\f[R]
T}@T{
\f[CR]128\f[R]
T}@T{
Shows \f[CR]Comment\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_DOCUMENT\f[R]
T}@T{
\f[CR]256\f[R]
T}@T{
Shows \f[CR]Document\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_DOCUMENT_FRAGMENT\f[R]
T}@T{
\f[CR]1024\f[R]
T}@T{
Shows \f[CR]DocumentFragment\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_DOCUMENT_TYPE\f[R]
T}@T{
\f[CR]512\f[R]
T}@T{
Shows \f[CR]DocumentType\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_ELEMENT\f[R]
T}@T{
\f[CR]1\f[R]
T}@T{
Shows \f[CR]Element\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_ENTITY\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]32\f[R]
T}@T{
Legacy, no longer used.
T}
T{
\f[CR]NodeFilter.SHOW_ENTITY_REFERENCE\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]16\f[R]
T}@T{
Legacy, no longer used.
T}
T{
\f[CR]NodeFilter.SHOW_NOTATION\f[R] \f[I](deprecated)\f[R]
T}@T{
\f[CR]2048\f[R]
T}@T{
Legacy, no longer used.
T}
T{
\f[CR]NodeFilter.SHOW_PROCESSING_INSTRUCTION\f[R]
T}@T{
\f[CR]64\f[R]
T}@T{
Shows \f[CR]ProcessingInstruction\f[R] nodes.
T}
T{
\f[CR]NodeFilter.SHOW_TEXT\f[R]
T}@T{
\f[CR]4\f[R]
T}@T{
Shows \f[CR]Text\f[R] nodes.
T}
.TE
.RE
.TP
\f[B]NodeIterator.filter\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]NodeFilter\f[R] used to select the relevant nodes.
.TP
\f[B]NodeIterator.referenceNode\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns the \f[CR]Node\f[R] to which the iterator is anchored.
.TP
\f[B]NodeIterator.pointerBeforeReferenceNode\f[R] \f[I](read\-only)\f[R]
Returns a boolean indicating whether or not the \f[CR]NodeIterator\f[R]
is anchored \f[I]before\f[R] the \f[CR]NodeIterator.referenceNode\f[R].
If \f[CR]false\f[R], it indicates that the iterator is anchored
\f[I]after\f[R] the reference node.
.SH INSTANCE METHODS
\f[I]This interface doesn\[cq]t inherit any method.\f[R]
.TP
\f[B]NodeIterator.detach()\f[R] \f[I](deprecated)\f[R]
This is a legacy method, and no longer has any effect.
Previously it served to mark a \f[CR]NodeIterator\f[R] as disposed, so
it could be reclaimed by garbage collection.
.TP
\f[B]NodeIterator.previousNode()\f[R]
Returns the previous \f[CR]Node\f[R] in the document, or \f[CR]null\f[R]
if there are none.
.TP
\f[B]NodeIterator.nextNode()\f[R]
Returns the next \f[CR]Node\f[R] in the document, or \f[CR]null\f[R] if
there are none.
.SH SEE ALSO
.IP \[bu] 2
The creator method: \f[CR]Document.createNodeIterator()\f[R].
.IP \[bu] 2
Related interface: \f[CR]TreeWalker\f[R]
