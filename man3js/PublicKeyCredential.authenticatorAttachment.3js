.\" Automatically generated by Pandoc 3.4
.\"
.TH "PublicKeyCredential.authenticatorAttachment" "JS" "May 9, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential.authenticatorAttachment \- PublicKeyCredential:
authenticatorAttachment property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]authenticatorAttachment\f[B]\f[R] read\-only property of
the \f[CR]PublicKeyCredential\f[R] interface is a string that indicates
the general category of authenticator used during the associated
\f[CR]navigator.credentials.create()\f[R] or
\f[CR]navigator.credentials.get()\f[R] call.
.SH VALUE
A string, which will be one of the following values:
.TP
\f[B]\[dq]platform\[dq]\f[R]
The authenticator is part of the device WebAuthn is running on (termed a
\f[B]platform authenticator\f[R]), therefore WebAuthn will communicate
with it using a transport available to that platform, such as a
platform\-specific API.
A public key credential bound to a platform authenticator is called a
\f[B]platform credential\f[R].
.TP
\f[B]\[dq]cross\-platform\[dq]\f[R]
The authenticator is not a part of the device WebAuthn is running on
(termed a \f[B]roaming authenticator\f[R] as it can roam between
different devices), therefore WebAuthn will communicate with it using a
cross\-platform transport protocol such as Bluetooth or NFC.
A public key credential bound to a roaming authenticator is called a
\f[B]roaming credential\f[R].
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] options = {
  challenge: \f[B]new\f[R] Uint8Array(26) \f[I]/* from the server */\f[R],
  rp: {
    name: \[dq]Example CORP\[dq],
    id: \[dq]login.example.com\[dq],
  },
  user: {
    id: \f[B]new\f[R] Uint8Array(26) \f[I]/* To be changed for each user */\f[R],
    name: \[dq]canand\[at]example.com\[dq],
    displayName: \[dq]Carina Anand\[dq],
  },
  pubKeyCredParams: [
    {
      type: \[dq]public\-key\[dq],
      alg: \-7,
    },
  ],
};

navigator.credentials
  .create({ publicKey: options })
  .then((pubKeyCredential) \f[B]=>\f[R] {
    \f[B]const\f[R] attachment = pubKeyCredential.authenticatorAttachment;
    \f[I]// Do something with authenticatorAttachment\f[R]
  })
  .catch((err) \f[B]=>\f[R] {
    \f[I]// Deal with any error\f[R]
  });
.EE
