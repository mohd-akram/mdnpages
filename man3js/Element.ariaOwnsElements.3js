.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.ARIAOWNSELEMENTS" "3JS" "May 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.ariaOwnsElements \- Element: ariaOwnsElements property
.SH SYNOPSIS
The \f[B]\f[CB]ariaOwnsElements\f[B]\f[R] property of the
\f[CR]Element\f[R] interface is an array containing the element (or
elements) that define a visual, functional, or contextual relationship
between a parent element that it is applied to, and its child elements.
This is used when the DOM hierarchy cannot be used to represent the
relationship, and it would not otherwise be available to assistive
technology,
.PP
The \f[CR]aria\-owns\f[R] topic contains additional information about
how the attribute and property should be used.
.SH VALUE
An array of subclasses of \f[CR]HTMLElement\f[R].
.PP
When read, the returned array is a static and read\-only.
When written, the assigned array is copied: subsequent changes to the
array do not affect the value of the property.
.SH DESCRIPTION
The property is a flexible alternative to using the
\f[CR]aria\-owns\f[R] attribute to indicate ownership of an element.
Unlike \f[CR]aria\-owns\f[R], the elements assigned to this property do
not have to have an \f[CR]id\f[R] attribute.
.PP
The property reflects the element\(cqs \f[CR]aria\-owns\f[R] attribute
when it is defined, but only for listed reference \f[CR]id\f[R] values
that match valid in\-scope elements.
If the property is set, then the corresponding attribute is cleared.
For more information about reflected element references and scope see
Reflected element references in the \f[I]Reflected attributes\f[R]
guide.
.SH EXAMPLES
.SS Get the owned element
This example demonstrates how the \f[CR]aria\-owns\f[R] attribute and
property are used.
.PP
The code defines a menu and its associated submenu in separate and
non\-nested \f[CR]<div>\f[R] elements.
Because these elements are not nested the ownership relationship between
the menu and submenu is not captured by the DOM.
Here we provide that information to accessibility tools using the
\f[CR]aria\-owns\f[R] attribute, but we could also do it using the
reflected property.
.PP
Note that we could construct a menu where the submenu was nested: the
example has been \f[I]contrived\f[R] to make it easier to demonstrate a
case where the relationship needs to be defined.
.SS HTML
The HTML defines \f[CR]<div>\f[R] elements for the menu, with
\f[CR]id=parentMenu\f[R] and the submenu with
\f[CR]id=\(dqsubMenu1\(dq\f[R].
We\(cqve added a \f[CR]<div>\f[R] in between just to make it even more
obvious that there is no direct ownership model defined in the DOM.
.PP
The parent menu \f[CR]<div>\f[R] includes the attribute
\f[CR]aria\-owns=\(dqsubMenu1\(dq\f[R] to create this ownership
relationship.
.IP
.EX
<\f[B]div\f[R] class=\(dqmenu\(dq id=\(dqparentMenu\(dq role=\(dqmenubar\(dq aria\-owns=\(dqsubMenu1\(dq>
  Top level menu (hover over)
</\f[B]div\f[R]>

<\f[B]div\f[R]>Some other element</\f[B]div\f[R]>

<\f[B]div\f[R] class=\(dqsubmenu\(dq id=\(dqsubMenu1\(dq role=\(dqmenu\(dq>
  <\f[B]a\f[R] href=\(dq#\(dq role=\(dqmenuitem\(dq>Menu item 1</\f[B]a\f[R]>
  <\f[B]a\f[R] href=\(dq#\(dq role=\(dqmenuitem\(dq>Menu item 2</\f[B]a\f[R]>
  <\f[B]a\f[R] href=\(dq#\(dq role=\(dqmenuitem\(dq>Menu item 3</\f[B]a\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
The CSS styles the menu and submenu, and displays the submenu when the
menu is hovered over.
.IP
.EX
\&.menu {
  \f[B]position\f[R]: relative;
  \f[B]display\f[R]: inline\-block;
  \f[B]color\f[R]: purple;
}

\&.submenu {
  \f[B]display\f[R]: none;
  \f[B]position\f[R]: absolute;
  \f[B]background\-color\f[R]: #f9f9f9;
  \f[B]min\-width\f[R]: 160px;
  \f[B]box\-shadow\f[R]: 0px 6px 14px 0px rgba(0, 0, 0, 0.2);
  \f[B]z\-index\f[R]: 1;
  \f[B]top\f[R]: 20px;
  \f[B]left\f[R]: 0;
}

\&.menu\f[BI]:hover\f[R] \(ti .submenu {
  \f[B]display\f[R]: block;
}

\&.submenu a {
  \f[B]color\f[R]: black;
  \f[B]padding\f[R]: 12px 16px;
  \f[B]text\-decoration\f[R]: none;
  \f[B]display\f[R]: block;
}

\&.submenu a\f[BI]:hover\f[R] {
  \f[B]background\-color\f[R]: #f1f1f1;
}
.EE
.SS JavaScript
The code first checks whether the \f[CR]ariaOwnsElements\f[R] is
supported.
If it is, we log the attribute, the elements in the property, and the
\f[CR]id\f[R] value for each element.
.IP
.EX
\f[I]// Feature test for ariaOwnsElements\f[R]
\f[B]if\f[R] (\(dqariaOwnsElements\(dq \f[B]in\f[R] Element.prototype) {
  \f[B]const\f[R] parentMenu = document.querySelector(\(dq#parentMenu\(dq);
  log(\(gaparentMenu.getAttribute(): ${parentMenu.getAttribute(\(dqaria\-owns\(dq)}\(ga);
  log(\(gaparentMenu.ariaOwnsElements: ${parentMenu.ariaOwnsElements}\(ga);
  parentMenu.ariaOwnsElements?.forEach((elem) \f[B]=>\f[R] {
    log(\(ga  id: ${elem.id}\(ga);
  });
} \f[B]else\f[R] {
  log(\(dqelement.ariaOwnsElements: not supported by browser\(dq);
}
.EE
.SS Result
The result of running the code is shown below.
The log shows that the relationship defined using the
\f[CR]aria\-owns\f[R] attribute is reflected in the
\f[CR]ariaOwnsElements\f[R] property (elements in the array match the
attribute element references).
.SH SEE ALSO
.IP \(bu 2
\f[CR]aria\-owns\f[R] attribute
.IP \(bu 2
\f[CR]ElementInternals.ariaOwnsElements\f[R]
.IP \(bu 2
Reflected element references in the \f[I]Attribute reflection\f[R]
guide.
