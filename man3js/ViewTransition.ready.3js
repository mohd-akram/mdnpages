.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "VIEWTRANSITION.READY" "3JS" "December 20, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ViewTransition.ready \- ViewTransition: ready property
.SH SYNOPSIS
The \f[B]\f[CB]ready\f[B]\f[R] read\-only property of the
\f[CR]ViewTransition\f[R] interface is a \f[CR]Promise\f[R] that
fulfills once the pseudo\-element tree is created and the transition
animation is about to start.
.PP
\f[CR]ready\f[R] will reject if the transition cannot begin.
This can be due to misconfiguration, for example, duplicate
\f[CR]view\-transition\-name\f[R]s, or if the callback passed to
\f[CR]Document.startViewTransition()\f[R] throws or returns a promise
that rejects.
.SH VALUE
A Promise.
.SH EXAMPLES
In the following example, \f[CR]ready\f[R] is used to trigger a custom
circular reveal view transition emanating from the position of the
user\(cqs cursor on click, with animation provided by the Web Animations
API.
.IP
.EX
\f[I]// Store the last click event\f[R]
\f[B]let\f[R] lastClick;
addEventListener(\(dqclick\(dq, (event) \f[B]=>\f[R] (lastClick = event));

\f[B]function\f[R] spaNavigate(data) {
  \f[I]// Fallback for browsers that don\(aqt support this API:\f[R]
  \f[B]if\f[R] (!document.startViewTransition) {
    updateTheDOMSomehow(data);
    \f[B]return\f[R];
  }

  \f[I]// Get the click position, or fallback to the middle of the screen\f[R]
  \f[B]const\f[R] x = lastClick?.clientX ?? innerWidth / 2;
  \f[B]const\f[R] y = lastClick?.clientY ?? innerHeight / 2;
  \f[I]// Get the distance to the furthest corner\f[R]
  \f[B]const\f[R] endRadius = Math.hypot(
    Math.max(x, innerWidth \- x),
    Math.max(y, innerHeight \- y),
  );

  \f[I]// Create a transition:\f[R]
  \f[B]const\f[R] transition = document.startViewTransition(() \f[B]=>\f[R] {
    updateTheDOMSomehow(data);
  });

  \f[I]// Wait for the pseudo\-elements to be created:\f[R]
  transition.ready.then(() \f[B]=>\f[R] {
    \f[I]// Animate the root\(aqs new view\f[R]
    document.documentElement.animate(
      {
        clipPath: [
          \(gacircle(0 at ${x}px ${y}px)\(ga,
          \(gacircle(${endRadius}px at ${x}px ${y}px)\(ga,
        ],
      },
      {
        duration: 500,
        easing: \(dqease\-in\(dq,
        \f[I]// Specify which pseudo\-element to animate\f[R]
        pseudoElement: \(dq::view\-transition\-new(root)\(dq,
      },
    );
  });
}
.EE
.PP
This animation also requires the following CSS, to turn off the default
CSS animation and stop the old and new view states from blending in any
way (the new state \(lqwipes\(rq right over the top of the old state,
rather than transitioning in):
.IP
.EX
\f[BI]::view\-transition\-image\-pair(\f[R]root\f[BI])\f[R] {
  \f[B]isolation\f[R]: auto;
}

\f[BI]::view\-transition\-old(\f[R]root\f[BI])\f[R],
\f[BI]::view\-transition\-new(\f[R]root\f[BI])\f[R] {
  \f[B]animation\f[R]: none;
  \f[B]mix\-blend\-mode\f[R]: normal;
  \f[B]display\f[R]: block;
}
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://developer.chrome.com/docs/web-platform/view-transitions/
Smooth transitions with the View Transition API
.UE \c
