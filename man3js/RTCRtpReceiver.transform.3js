.\" Automatically generated by Pandoc 3.4
.\"
.TH "RTCRtpReceiver.transform" "JS" "January 10, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpReceiver.transform \- RTCRtpReceiver: transform property
.SH SYNOPSIS
The \f[B]\f[CB]transform\f[B]\f[R] property of the
\f[CR]RTCRtpReceiver\f[R] object is used to insert a transform stream
(\f[CR]TransformStream\f[R]) running in a worker thread into the
receiver pipeline.
This allows stream transforms to be applied to encoded video and audio
frames as they arrive from the packetizer (before they are
played/rendered).
.PP
The transform that is to be added is defined using an
\f[CR]RTCRtpScriptTransform\f[R] and its associated \f[CR]Worker\f[R].
If the transform is set in the peer connection \f[CR]track\f[R] event
handler, the transform stream will receive the first full incoming frame
for the track.
.SS Value
A \f[CR]RTCRtpScriptTransform\f[R], or \f[CR]null\f[R] if the receiver
has no associated transform stream.
.SH EXAMPLE
Note that this is part of a larger example in the guide topic Using
WebRTC Encoded Transforms.
.SH ADDING A TRANSFORM FOR INCOMING FRAMES
This example shows how you add a WebRTC encoded transform to modify an
incoming stream.
The code assumes that there is an \f[CR]RTCPeerConnection\f[R] called
\f[CR]peerConnection\f[R] that is already connected to a remote peer.
.PP
To add a transform stream into the pipeline for incoming frames we need
to construct an \f[CR]RTCRtpScriptTransform\f[R] and assign it to the
receiver\[cq]s \f[CR]transform\f[R] property.
We can do this in the \f[CR]track\f[R] event handler as shown.
This event is fired on the peer connection whenever the remote end sends
a track.
The \f[CR]event.receiver\f[R] property is an \f[CR]RTCRtpReceiver\f[R].
.IP
.EX
\f[B]const\f[R] worker = \f[B]new\f[R] Worker(\[dq]worker.js\[dq]);
peerConnection.ontrack = (event) \f[B]=>\f[R] {
  event.receiver.transform = \f[B]new\f[R] RTCRtpScriptTransform(worker, {
    someOption: \[dq]receiverTransform\[dq],
  });
};
.EE
.PP
Because the transform is constructed immediately after creation of the
\f[CR]RTCRtpReceiver\f[R], it will receive the first incoming frame.
The object passed as the second parameter in the
\f[CR]RTCRtpScriptTransform\f[R] constructor is sent to the worker
thread, and can be used by worker code to provide a different transform
for the incoming frames than is used for outgoing frames.
.SH SEE ALSO
.IP \[bu] 2
Using WebRTC Encoded Transforms
.IP \[bu] 2
\f[CR]RTCRtpSender.transform\f[R]
