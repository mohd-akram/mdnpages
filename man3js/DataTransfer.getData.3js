.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "DataTransfer.getData" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.getData \- DataTransfer: getData() method
.SH SYNOPSIS
The \f[B]\f[CB]DataTransfer.getData()\f[B]\f[R] method retrieves drag
data (as a string) for the specified type.
If the drag operation does not include data, this method returns an
empty string.
.PP
Example data types are \f[CR]text/plain\f[R] and
\f[CR]text/uri\-list\f[R].
.SH SYNTAX
.IP
.EX
getData(format)
.EE
.SS Parameters
.TP
\f[B]format\f[R]
A string representing the type of data to retrieve.
.SS Return value
A string representing the drag data for the specified \f[CR]format\f[R].
If the drag operation has no data or the operation has no data for the
specified \f[CR]format\f[R], this method returns an empty string.
.PP
Note that \f[CR]DataTransfer.getData()\f[R] may not return an expected
value, because it only allows reading and writing data for specified
events.
During the \f[CR]dragstart\f[R] and \f[CR]drop\f[R] events, it is safe
to access the data.
For all other events, the data should be considered unavailable.
Despite this, the items and their formats can still be enumerated.
.SH EXAMPLES
This example shows the use of the \f[CR]DataTransfer\f[R] object\[cq]s
\f[CR]getData()\f[R] and \f[CR]setData()\f[R] methods.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]div1\[dq] ondrop=\[dq]drop(event)\[dq] ondragover=\[dq]allowDrop(event)\[dq]>
  <\f[B]span\f[R] id=\[dq]drag\[dq] draggable=\[dq]true\[dq] ondragstart=\[dq]drag(event)\[dq]
    >drag me to the other box</\f[B]span\f[R]
  >
</\f[B]div\f[R]>
<\f[B]div\f[R] id=\[dq]div2\[dq] ondrop=\[dq]drop(event)\[dq] ondragover=\[dq]allowDrop(event)\[dq]></\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
div1,
div2 {
  \f[B]width\f[R]: 100px;
  \f[B]height\f[R]: 50px;
  \f[B]padding\f[R]: 10px;
  \f[B]border\f[R]: 1px solid #aaaaaa;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]function\f[R] allowDrop(allowDropEvent) {
  allowDropEvent.target.style.color = \[dq]blue\[dq];
  allowDropEvent.preventDefault();
}

\f[B]function\f[R] drag(dragEvent) {
  dragEvent.dataTransfer.setData(\[dq]text\[dq], dragEvent.target.id);
  dragEvent.target.style.color = \[dq]green\[dq];
}

\f[B]function\f[R] drop(dropEvent) {
  dropEvent.preventDefault();
  \f[B]const\f[R] data = dropEvent.dataTransfer.getData(\[dq]text\[dq]);
  dropEvent.target.appendChild(document.getElementById(data));
  document.getElementById(\[dq]drag\[dq]).style.color = \[dq]black\[dq];
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Drag and drop
.IP \[bu] 2
Drag Operations
.IP \[bu] 2
Recommended Drag Types
.IP \[bu] 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
