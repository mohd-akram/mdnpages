.\" Automatically generated by Pandoc 3.4
.\"
.TH "Math.log1p" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Math.log1p \- Math.log1p()
.SH SYNOPSIS
The \f[B]\f[CB]Math.log1p()\f[B]\f[R] static method returns the natural
logarithm (base e) of \f[CR]1 + x\f[R], where \f[CR]x\f[R] is the
argument.
That is:
.PP
\ ∀x>−1,𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝚙(𝚡)=ln(1+x)x > \-1,; = (1 + x) 
.SH SYNTAX
.IP
.EX
Math.log1p(x)
.EE
.SS Parameters
.TP
\f[B]x\f[R]
A number greater than or equal to \-1.
.SS Return value
The natural logarithm (base e) of \f[CR]x + 1\f[R].
If \f[CR]x\f[R] is \-1, returns \f[CR]\-Infinity\f[R].
If \f[CR]x < \-1\f[R], returns \f[CR]NaN\f[R].
.SH DESCRIPTION
For very small values of \f[I]x\f[R], adding 1 can reduce or eliminate
precision.
The double floats used in JS give you about 15 digits of precision.
1 + 1e\-15 = 1.000000000000001, but 1 + 1e\-16 = 1.000000000000000 and
therefore exactly 1.0 in that arithmetic, because digits past 15 are
rounded off.
.PP
When you calculate log(1 + \f[I]x\f[R]), where \f[I]x\f[R] is a small
positive number, you should get an answer very close to \f[I]x\f[R]
because: limx→0log⁡(1+x)x=1_{x }  = 1.
If you calculate \f[CR]Math.log(1 + 1.1111111111e\-15)\f[R], you should
get an answer close to \f[CR]1.1111111111e\-15\f[R].
Instead, you will end up taking the logarithm of
\f[CR]1.00000000000000111022\f[R] (the roundoff is in binary, so
sometimes it gets ugly), and get the answer 1.11022\&...e\-15, with only
3 correct digits.
If you calculate \f[CR]Math.log1p(1.1111111111e\-15)\f[R] instead, you
will get a much more accurate answer,
\f[CR]1.1111111110999995e\-15\f[R], with 15 correct digits of precision
(actually 16 in this case).
.PP
If the value of \f[CR]x\f[R] is less than \-1, the return value is
always \f[CR]NaN\f[R].
.PP
Because \f[CR]log1p()\f[R] is a static method of \f[CR]Math\f[R], you
always use it as \f[CR]Math.log1p()\f[R], rather than as a method of a
\f[CR]Math\f[R] object you created (\f[CR]Math\f[R] is not a
constructor).
.SH EXAMPLES
.SS Using Math.log1p()
.IP
.EX
Math.log1p(\-2); \f[I]// NaN\f[R]
Math.log1p(\-1); \f[I]// \-Infinity\f[R]
Math.log1p(\-0); \f[I]// \-0\f[R]
Math.log1p(0); \f[I]// 0\f[R]
Math.log1p(1); \f[I]// 0.6931471805599453\f[R]
Math.log1p(\f[B]Infinity\f[R]); \f[I]// Infinity\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-math
Polyfill of \f[CR]Math.log1p\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Math.exp()\f[R]
.IP \[bu] 2
\f[CR]Math.log()\f[R]
.IP \[bu] 2
\f[CR]Math.expm1()\f[R]
.IP \[bu] 2
\f[CR]Math.log10()\f[R]
.IP \[bu] 2
\f[CR]Math.log2()\f[R]
.IP \[bu] 2
\f[CR]Math.pow()\f[R]
