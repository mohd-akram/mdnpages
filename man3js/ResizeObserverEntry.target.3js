.\" Automatically generated by Pandoc 3.4
.\"
.TH "ResizeObserverEntry.target" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ResizeObserverEntry.target \- ResizeObserverEntry: target property
.SH SYNOPSIS
The \f[B]\f[CB]target\f[B]\f[R] read\-only property of the
\f[CR]ResizeObserverEntry\f[R] interface returns a reference to the
\f[CR]Element\f[R] or \f[CR]SVGElement\f[R] that is being observed.
.SH VALUE
An \f[CR]Element\f[R] or \f[CR]SVGElement\f[R] representing the element
being observed.
.SH EXAMPLES
The following snippet is taken from the \c
.UR https://mdn.github.io/dom-examples/resize-observer/resize-observer-border-radius.html
resize\-observer\-border\-radius.html
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/blob/main/resize-observer/resize-observer-border-radius.html
see source
.UE \c
) example.
This example includes a green box, sized as a percentage of the viewport
size.
When the viewport size is changed, the box\[cq]s rounded corners change
in proportion to the size of the box.
We could just implement this using \f[CR]border\-radius\f[R] with a
percentage, but that quickly leads to ugly\-looking elliptical corners;
this solution gives you nice square corners that scale with the box
size.
.PP
To grab a reference to the observed element so we can update its
\f[CR]border\-radius\f[R] value after each change, we make use of the
\f[CR]target\f[R] property of each entry \[em]
\f[CR]entry.target.style.borderRadius\f[R].
.IP
.EX
\f[B]const\f[R] resizeObserver = \f[B]new\f[R] ResizeObserver((entries) \f[B]=>\f[R] {
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] entries) {
    \f[B]if\f[R] (entry.contentBoxSize) {
      entry.target.style.borderRadius = \[ga]${Math.min(
        100,
        entry.contentBoxSize.inlineSize / 10 +
          entry.contentBoxSize.blockSize / 10,
      )}px\[ga];
    } \f[B]else\f[R] {
      entry.target.style.borderRadius = \[ga]${Math.min(
        100,
        entry.contentRect.width / 10 + entry.contentRect.height / 10,
      )}px\[ga];
    }
  }
});

resizeObserver.observe(document.querySelector(\[dq]div\[dq]));
.EE
