.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "PerformanceEntry.entryType" "JS" "April 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceEntry.entryType \- PerformanceEntry: entryType property
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The read\-only \f[B]\f[CB]entryType\f[B]\f[R] property returns a string
representing the type of performance metric that this entry represents.
.PP
All supported \f[CR]entryTypes\f[R] are available using the static
property \f[CR]PerformanceObserver.supportedEntryTypes\f[R].
.SH VALUE
A string.
The return value depends on the subtype of the
\f[CR]PerformanceEntry\f[R] object.
Some subtypes have more than one \f[CR]entryType\f[R].
.TP
\f[B]element\f[R]
Reports load time of elements.
.RS
.PP
The entry instance will be a \f[CR]PerformanceElementTiming\f[R] object.
.RE
.TP
\f[B]event\f[R]
Reports event latencies.
.RS
.PP
The entry instance will be a \f[CR]PerformanceEventTiming\f[R] object.
.RE
.TP
\f[B]first\-input\f[R]
Reports the first input delay (FID).
.RS
.PP
The entry instance will be a \f[CR]PerformanceEventTiming\f[R] object.
.RE
.TP
\f[B]largest\-contentful\-paint\f[R]
Reports the largest paint an element triggered on screen.
.RS
.PP
The entry instance will be a \f[CR]LargestContentfulPaint\f[R] object.
.RE
.TP
\f[B]layout\-shift\f[R]
Reports layout stability of web pages based on movements of the elements
on the page.
.RS
.PP
The entry instance will be a \f[CR]LayoutShift\f[R] object.
.RE
.TP
\f[B]long\-animation\-frame\f[R]
Reports instances of long animation frames (LoAFs).
.RS
.PP
The entry instance will be a
\f[CR]PerformanceLongAnimationFrameTiming\f[R] object.
.RE
.TP
\f[B]longtask\f[R]
Reports instances of long tasks.
.RS
.PP
The entry instance will be a \f[CR]PerformanceLongTaskTiming\f[R]
object.
.RE
.TP
\f[B]mark\f[R]
Reports your own custom performance markers.
.RS
.PP
The entry instance will be a \f[CR]PerformanceMark\f[R] object.
.RE
.TP
\f[B]measure\f[R]
Reports your own custom performance measures.
.RS
.PP
The entry instance will be a \f[CR]PerformanceMeasure\f[R] object.
.RE
.TP
\f[B]navigation\f[R]
Reports document navigation timing.
.RS
.PP
The entry instance will be a \f[CR]PerformanceNavigationTiming\f[R]
object.
.RE
.TP
\f[B]paint\f[R]
Reports key moments of document rendering (first paint, first contentful
paint) during page load.
.RS
.PP
The entry instance will be a \f[CR]PerformancePaintTiming\f[R] object.
.RE
.TP
\f[B]resource\f[R]
Reports timing information for resources in a document.
.RS
.PP
The entry instance will be a \f[CR]PerformanceResourceTiming\f[R]
object.
.RE
.TP
\f[B]taskattribution\f[R]
Reports the type of work that contributed significantly to the long
task.
.RS
.PP
The entry instance will be a \f[CR]TaskAttributionTiming\f[R] object.
.RE
.TP
\f[B]visibility\-state\f[R]
Reports the timing of page visibility state changes, i.e., when a tab
changes from the foreground to the background or vice versa.
.RS
.PP
The entry instance will be a \f[CR]VisibilityStateEntry\f[R] object.
.RE
.SH EXAMPLES
.SS Filtering performance entries by type
The \f[CR]entryType\f[R] property can be useful when filtering out
specific performance entries.
For example, you might want to check all script resources, so you would
check for an \f[CR]entryType\f[R] of \f[CR]\[dq]resource\[dq]\f[R] and
an \f[CR]initiatorType\f[R] of \f[CR]\[dq]script\[dq]\f[R].
.IP
.EX
\f[B]const\f[R] scriptResources = performance
  .getEntries()
  .filter(
    (entry) \f[B]=>\f[R]
      entry.entryType === \[dq]resource\[dq] && entry.initiatorType === \[dq]script\[dq],
  );
console.log(scriptResources);
.EE
.SS Getting performance entries by type
Both, \f[CR]Performance\f[R] and \f[CR]PerformanceObserver\f[R], provide
methods that allow you to get performance entries by type directly.
You don\[cq]t necessarily need the \f[CR]entryType\f[R] property for
that, instead you might use \f[CR]Performance.getEntriesByType()\f[R] or
\f[CR]PerformanceObserverEntryList.getEntriesByType()\f[R].
.PP
Also, when observing with a \f[CR]PerformanceObserver\f[R], the
\f[CR]observe()\f[R] method takes an array of \f[CR]entryTypes\f[R] in
its options object where you can decide which entry types to observe.
.IP
.EX
\f[I]// Log all resource entries at this point\f[R]
\f[B]const\f[R] resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) \f[B]=>\f[R] {
  console.log(\[ga]${entry.name}\[aq]s duration: ${entry.duration}\[ga]);
});

\f[I]// PerformanceObserver version\f[R]
\f[I]// Log all resource entries when they are available\f[R]
\f[B]function\f[R] perfObserver(list, observer) {
  list.getEntriesByType(\[dq]resource\[dq]).forEach((entry) \f[B]=>\f[R] {
    console.log(\[ga]${entry.name}\[aq]s duration: ${entry.duration}\[ga]);
  });
}
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver(perfObserver);
observer.observe({ entryTypes: [\[dq]resource\[dq], \[dq]navigation\[dq]] });
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]PerformanceObserver.supportedEntryTypes\f[R]
.IP \[bu] 2
\f[CR]Performance.getEntriesByType()\f[R]
.IP \[bu] 2
\f[CR]PerformanceObserverEntryList.getEntriesByType()\f[R]
