.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "DocumentFragment" "JS" "July 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DocumentFragment \- DocumentFragment
.SH SYNOPSIS
The \f[B]\f[CB]DocumentFragment\f[B]\f[R] interface represents a minimal
document object that has no parent.
.PP
It is used as a lightweight version of \f[CR]Document\f[R] that stores a
segment of a document structure comprised of nodes just like a standard
document.
The key difference is due to the fact that the document fragment
isn\[cq]t part of the active document tree structure.
Changes made to the fragment don\[cq]t affect the document.
.SH CONSTRUCTOR
.TP
\f[B]DocumentFragment()\f[R]
Creates and returns a new \f[CR]DocumentFragment\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]This interface has no specific properties, but inherits those of
its parent, \f[CI]Node\f[I].\f[R]
.TP
\f[B]DocumentFragment.childElementCount\f[R] \f[I](read\-only)\f[R]
Returns the amount of child \f[CR]elements\f[R] the
\f[CR]DocumentFragment\f[R] has.
.TP
\f[B]DocumentFragment.children\f[R] \f[I](read\-only)\f[R]
Returns a live \f[CR]HTMLCollection\f[R] containing all objects of type
\f[CR]Element\f[R] that are children of the \f[CR]DocumentFragment\f[R]
object.
.TP
\f[B]DocumentFragment.firstElementChild\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Element\f[R] that is the first child of the
\f[CR]DocumentFragment\f[R] object, or \f[CR]null\f[R] if there is none.
.TP
\f[B]DocumentFragment.lastElementChild\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]Element\f[R] that is the last child of the
\f[CR]DocumentFragment\f[R] object, or \f[CR]null\f[R] if there is none.
.SH INSTANCE METHODS
\f[I]This interface inherits the methods of its parent,
\f[CI]Node\f[I].\f[R]
.TP
\f[B]DocumentFragment.append()\f[R]
Inserts a set of \f[CR]Node\f[R] objects or strings after the last child
of the document fragment.
.TP
\f[B]DocumentFragment.prepend()\f[R]
Inserts a set of \f[CR]Node\f[R] objects or strings before the first
child of the document fragment.
.TP
\f[B]DocumentFragment.querySelector()\f[R]
Returns the first \f[CR]Element\f[R] node within the
\f[CR]DocumentFragment\f[R], in document order, that matches the
specified selectors.
.TP
\f[B]DocumentFragment.querySelectorAll()\f[R]
Returns a \f[CR]NodeList\f[R] of all the \f[CR]Element\f[R] nodes within
the \f[CR]DocumentFragment\f[R] that match the specified selectors.
.TP
\f[B]DocumentFragment.replaceChildren()\f[R]
Replaces the existing children of a \f[CR]DocumentFragment\f[R] with a
specified new set of children.
.TP
\f[B]DocumentFragment.getElementById()\f[R]
Returns the first \f[CR]Element\f[R] node within the
\f[CR]DocumentFragment\f[R], in document order, that matches the
specified ID.
Functionally equivalent to \f[CR]Document.getElementById()\f[R].
.SH USAGE NOTES
A common use for \f[CR]DocumentFragment\f[R] is to create one, assemble
a DOM subtree within it, then append or insert the fragment into the DOM
using \f[CR]Node\f[R] interface methods such as
\f[CR]appendChild()\f[R], \f[CR]append()\f[R], or
\f[CR]insertBefore()\f[R].
Doing this moves the fragment\[cq]s nodes into the DOM, leaving behind
an empty \f[CR]DocumentFragment\f[R].
.PP
This interface is also of great use with Web components:
\f[CR]<template>\f[R] elements contain a \f[CR]DocumentFragment\f[R] in
their \f[CR]HTMLTemplateElement.content\f[R] property.
.PP
An empty \f[CR]DocumentFragment\f[R] can be created using the
\f[CR]document.createDocumentFragment()\f[R] method or the constructor.
.SH PERFORMANCE
The performance benefit of \f[CR]DocumentFragment\f[R] is often
overstated.
In fact, in some engines, using a \f[CR]DocumentFragment\f[R] is slower
than appending to the document in a loop as demonstrated in \c
.UR https://jsbench.me/02l63eic9j/1
this benchmark
.UE \c
\&.
However, the difference between these examples is so marginal that
it\[cq]s better to optimize for readability than performance.
.SH EXAMPLE
.SS HTML
.IP
.EX
<\f[B]ul\f[R]></\f[B]ul\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] ul = document.querySelector(\[dq]ul\[dq]);
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Orange\[dq], \[dq]Banana\[dq], \[dq]Melon\[dq]];

\f[B]const\f[R] fragment = \f[B]new\f[R] DocumentFragment();

\f[B]for\f[R] (\f[B]const\f[R] fruit \f[B]of\f[R] fruits) {
  \f[B]const\f[R] li = document.createElement(\[dq]li\[dq]);
  li.textContent = fruit;
  fragment.append(li);
}

ul.append(fragment);
.EE
.SS Result
