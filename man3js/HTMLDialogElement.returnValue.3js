.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "HTMLDialogElement.returnValue" "JS" "February 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLDialogElement.returnValue \- HTMLDialogElement: returnValue property
.SH SYNOPSIS
The \f[B]\f[CB]returnValue\f[B]\f[R] property of the
\f[CR]HTMLDialogElement\f[R] interface is a string representing the
return value for a \f[CR]<dialog>\f[R] element when it\[cq]s closed.
You can set the value directly
(\f[CR]dialog.returnValue = \[dq]result\[dq]\f[R]) or by providing the
value as a string argument to \f[CR]close()\f[R] or
\f[CR]requestClose()\f[R].
.SH VALUE
A string representing the \f[CR]returnValue\f[R] of the dialog.
Defaults to an empty string (\f[CR]\[dq]\[dq]\f[R]).
.SH EXAMPLES
The following example displays a button to open a dialog containing a
Terms of Service prompt via the \f[CR]showModal()\f[R] method.
The script handles the user\[cq]s input by assigning the
\f[CR]returnValue\f[R] when the Accept or Decline button is clicked.
The \[lq]Decline\[rq] button sets the \f[CR]returnValue\f[R] to
\[lq]declined\[rq], while the \[lq]Accept\[rq] button sets it to
\[lq]accepted\[rq].
Additionally, closing the dialog (e.g., using the close event) updates
the status text with the dialog\[cq]s \f[CR]returnValue\f[R].
Closing the dialog with the Esc key does not set the
\f[CR]returnValue\f[R].
.IP
.EX
\f[I]<!\-\- Simple pop\-up dialog box \-\->\f[R]
<\f[B]dialog\f[R] id=\[dq]termsDialog\[dq]>
  <\f[B]p\f[R]>Do you agree to the Terms of Service(link)?</\f[B]p\f[R]>
  <\f[B]button\f[R] id=\[dq]declineButton\[dq] value=\[dq]declined\[dq]>Decline</\f[B]button\f[R]>
  <\f[B]button\f[R] id=\[dq]acceptButton\[dq] value=\[dq]accepted\[dq]>Accept</\f[B]button\f[R]>
</\f[B]dialog\f[R]>
<\f[B]p\f[R]>
  <\f[B]button\f[R] id=\[dq]openDialog\[dq]>Review ToS</\f[B]button\f[R]>
</\f[B]p\f[R]>
<\f[B]p\f[R] id=\[dq]statusText\[dq]></\f[B]p\f[R]>

<\f[B]script\f[R]>
  \f[B]const\f[R] dialog = document.getElementById(\[dq]termsDialog\[dq]);
  \f[B]const\f[R] openDialog = document.getElementById(\[dq]openDialog\[dq]);
  \f[B]const\f[R] statusText = document.getElementById(\[dq]statusText\[dq]);
  \f[B]const\f[R] declineButton = document.getElementById(\[dq]declineButton\[dq]);
  \f[B]const\f[R] acceptButton = document.getElementById(\[dq]acceptButton\[dq]);

  \f[B]function\f[R] handleUserInput(returnValue) {
    \f[B]if\f[R] (returnValue === \[dq]\[dq]) {
      statusText.innerText = \[dq]There was no return value\[dq];
    } \f[B]else\f[R] {
      statusText.innerText = \[dq]Return value: \[dq] + returnValue;
    }
  }

  openDialog.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
    dialog.showModal();
    handleUserInput(dialog.returnValue);
  });

  declineButton.addEventListener(\[dq]click\[dq], closeDialog);
  acceptButton.addEventListener(\[dq]click\[dq], closeDialog);

  \f[B]function\f[R] closeDialog(event) {
    \f[B]const\f[R] button = event.target;
    \f[B]const\f[R] returnValue = button.value;
    dialog.close(returnValue);
    handleUserInput(dialog.returnValue);
  }

  dialog.addEventListener(\[dq]close\[dq], () \f[B]=>\f[R] {
    openCheck(dialog);
    handleUserInput(dialog.returnValue);
  });
</\f[B]script\f[R]>
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The HTML element implementing this interface: \f[CR]<dialog>\f[R].
