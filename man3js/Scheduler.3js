.\" Automatically generated by Pandoc 3.4
.\"
.TH "Scheduler" "JS" "October 2, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Scheduler \- Scheduler
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]Scheduler\f[B]\f[R] interface of the Prioritized Task
Scheduling API provides methods for scheduling prioritized tasks.
.PP
A \f[CR]Scheduler\f[R] can be accessed from the global object using
\f[CR]Window.scheduler\f[R] or \f[CR]WorkerGlobalScope.scheduler\f[R]
within a worker.
.SH INSTANCE PROPERTIES
None.
.SH INSTANCE METHODS
.TP
\f[B]Scheduler.postTask()\f[R]
Adds a task to the scheduler as a callback, optionally specifying a
priority, delay, and/or a signal for aborting the task.
.TP
\f[B]Scheduler.yield()\f[R] \f[I](experimental)\f[R]
Yields control of the main thread back to the browser, returning a
promise that resolves to continue execution where it left off.
.SH EXAMPLES
If the feature is defined, an instance of this object is returned by the
\f[CR]globalThis\f[R] property in both workers and the main thread.
.PP
The code below shows a simple task that resolves with the text `Task
executing'.
This text is logged on success.
The code also shows a \f[CR]catch\f[R] block, which would be required in
more complex code to handle when a task is aborted or throws an error.
.IP
.EX
\f[B]if\f[R] (\[dq]scheduler\[dq] \f[B]in\f[R] \f[B]this\f[R]) {
  \f[I]// Post task with default priority: \[aq]user\-visible\[aq] (no other options)\f[R]
  \f[I]// When the task resolves, Promise.then() logs the result.\f[R]
  scheduler
    .postTask(() \f[B]=>\f[R] \[dq]Task executing\[dq])
    .then((taskResult) \f[B]=>\f[R] console.log(\[ga]${taskResult}\[ga])) \f[I]// Log result\f[R]
    .catch((error) \f[B]=>\f[R] console.error(\[ga]Error: ${error}\[ga])); \f[I]// Log errors\f[R]
}
.EE
.PP
For more comprehensive example code see Prioritized Task Scheduling API
> Examples.
