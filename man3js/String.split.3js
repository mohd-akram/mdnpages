.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.SPLIT" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.split \- String.prototype.split()
.SH SYNOPSIS
The \f[B]\f[CB]split()\f[B]\f[R] method of \f[CR]String\f[R] values
takes a pattern and divides this string into an ordered list of
substrings by searching for the pattern, puts these substrings into an
array, and returns the array.
.IP
.EX
\f[B]const\f[R] str = \(dqThe quick brown fox jumps over the lazy dog.\(dq;

\f[B]const\f[R] words = str.split(\(dq \(dq);
console.log(words[3]);
\f[I]// Expected output: \(dqfox\(dq\f[R]

\f[B]const\f[R] chars = str.split(\(dq\(dq);
console.log(chars[8]);
\f[I]// Expected output: \(dqk\(dq\f[R]

\f[B]const\f[R] strCopy = str.split();
console.log(strCopy);
\f[I]// Expected output: Array [\(dqThe quick brown fox jumps over the lazy dog.\(dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
split(separator)
split(separator, limit)
.EE
.SS Parameters
.TP
\f[B]separator\f[R]
The pattern describing where each split should occur.
Can be \f[CR]undefined\f[R], a string, or an object with a
\f[CR]Symbol.split\f[R] method \(em the typical example being a regular
expression.
Omitting \f[CR]separator\f[R] or passing \f[CR]undefined\f[R] causes
\f[CR]split()\f[R] to return an array with the calling string as a
single element.
All values that are not \f[CR]undefined\f[R] or objects with a
\f[CR][Symbol.split]()\f[R] method are coerced to strings.
.TP
\f[B]limit\f[R] \f[I](optional)\f[R]
A non\-negative integer specifying a limit on the number of substrings
to be included in the array.
If provided, splits the string at each occurrence of the specified
\f[CR]separator\f[R], but stops when \f[CR]limit\f[R] entries have been
placed in the array.
Any leftover text is not included in the array at all.
.RS
.IP \(bu 2
The array may contain fewer entries than \f[CR]limit\f[R] if the end of
the string is reached before the limit is reached.
.IP \(bu 2
If \f[CR]limit\f[R] is \f[CR]0\f[R], \f[CR][]\f[R] is returned.
.RE
.SS Return value
If \f[CR]separator\f[R] is a string, an \f[CR]Array\f[R] of strings is
returned, split at each point where the \f[CR]separator\f[R] occurs in
the given string.
.PP
If \f[CR]separator\f[R] is a regex, the returned \f[CR]Array\f[R] also
contains the captured groups for each separator match; see below for
details.
The capturing groups may be unmatched, in which case they are
\f[CR]undefined\f[R] in the array.
.PP
If \f[CR]separator\f[R] has a custom \f[CR][Symbol.split]()\f[R] method,
its return value is directly returned.
.SH DESCRIPTION
If \f[CR]separator\f[R] is a non\-empty string, the target string is
split by all matches of the \f[CR]separator\f[R] without including
\f[CR]separator\f[R] in the results.
For example, a string containing tab separated values (TSV) could be
parsed by passing a tab character as the separator, like
\f[CR]myString.split(\(dq\(rst\(dq)\f[R].
If \f[CR]separator\f[R] contains multiple characters, that entire
character sequence must be found in order to split.
If \f[CR]separator\f[R] appears at the beginning (or end) of the string,
it still has the effect of splitting, resulting in an empty (i.e., zero
length) string appearing at the first (or last) position of the returned
array.
If \f[CR]separator\f[R] does not occur in \f[CR]str\f[R], the returned
array contains one element consisting of the entire string.
.PP
If \f[CR]separator\f[R] is an empty string (\f[CR]\(dq\(dq\f[R]),
\f[CR]str\f[R] is converted to an array of each of its UTF\-16
\(lqcharacters\(rq, without empty strings on either ends of the
resulting string.
.RS
.PP
\f[B]Note:\f[R] \f[CR]\(dq\(dq.split(\(dq\(dq)\f[R] is therefore the
only way to produce an empty array when a string is passed as
\f[CR]separator\f[R] and \f[CR]limit\f[R] is not \f[CR]0\f[R].
.RE
.RS
.PP
\f[B]Warning:\f[R] When the empty string (\f[CR]\(dq\(dq\f[R]) is used
as a separator, the string is \f[B]not\f[R] split by
\f[I]user\-perceived characters\f[R] (\c
.UR https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries
grapheme clusters
.UE \c
) or unicode characters (code points), but by UTF\-16 code units.
This destroys \c
.UR https://unicode.org/faq/utf_bom.html#utf16-2
surrogate pairs
.UE \c
\&.
See \c
.UR https://stackoverflow.com/questions/4547609/how-to-get-character-array-from-a-string/34717402#34717402
\(lqHow do you get a string to a character array in JavaScript?\(rq on
Stack Overflow
.UE \c
\&.
.RE
.PP
If \f[CR]separator\f[R] is a regexp that matches empty strings, whether
the match is split by UTF\-16 code units or Unicode code points depends
on if the regex is Unicode\-aware.
.IP
.EX
\(dqðŸ˜„ðŸ˜„\(dq.split(/(?:)/); \f[I]// [ \(dq\(rsud83d\(dq, \(dq\(rsude04\(dq, \(dq\(rsud83d\(dq, \(dq\(rsude04\(dq ]\f[R]
\(dqðŸ˜„ðŸ˜„\(dq.split(/(?:)/u); \f[I]// [ \(dqðŸ˜„\(dq, \(dqðŸ˜„\(dq ]\f[R]
.EE
.PP
If \f[CR]separator\f[R] is a regular expression with capturing groups,
then each time \f[CR]separator\f[R] matches, the captured groups
(including any \f[CR]undefined\f[R] results) are spliced into the output
array.
This behavior is specified by the regexp\(cqs \f[CR]Symbol.split\f[R]
method.
.PP
If \f[CR]separator\f[R] is an object with a \f[CR]Symbol.split\f[R]
method, that method is called with the target string and
\f[CR]limit\f[R] as arguments, and \f[CR]this\f[R] set to the object.
Its return value becomes the return value of \f[CR]split\f[R].
.PP
Any other value will be coerced to a string before being used as
separator.
.SH EXAMPLES
.SS Using split()
When the string is empty and a non\-empty separator is specified,
\f[CR]split()\f[R] returns \f[CR][\(dq\(dq]\f[R].
If the string and separator are both empty strings, an empty array is
returned.
.IP
.EX
\f[B]const\f[R] emptyString = \(dq\(dq;

\f[I]// string is empty and separator is non\-empty\f[R]
console.log(emptyString.split(\(dqa\(dq));
\f[I]// [\(dq\(dq]\f[R]

\f[I]// string and separator are both empty strings\f[R]
console.log(emptyString.split(emptyString));
\f[I]// []\f[R]
.EE
.PP
The following example defines a function that splits a string into an
array of strings using \f[CR]separator\f[R].
After splitting the string, the function logs messages indicating the
original string (before the split), the separator used, the number of
elements in the array, and the individual array elements.
.IP
.EX
\f[B]function\f[R] splitString(stringToSplit, separator) {
  \f[B]const\f[R] arrayOfStrings = stringToSplit.split(separator);

  console.log(\(dqThe original string is:\(dq, stringToSplit);
  console.log(\(dqThe separator is:\(dq, separator);
  console.log(
    \(dqThe array has\(dq,
    arrayOfStrings.length,
    \(dqelements:\(dq,
    arrayOfStrings.join(\(dq / \(dq),
  );
}

\f[B]const\f[R] tempestString = \(dqOh brave new world that has such people in it.\(dq;
\f[B]const\f[R] monthString = \(dqJan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\(dq;

\f[B]const\f[R] space = \(dq \(dq;
\f[B]const\f[R] comma = \(dq,\(dq;

splitString(tempestString, space);
splitString(tempestString);
splitString(monthString, comma);
.EE
.PP
This example produces the following output:
.IP
.EX
The original string is: \(dqOh brave new world that has such people in it.\(dq
The separator is: \(dq \(dq
The array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it.

The original string is: \(dqOh brave new world that has such people in it.\(dq
The separator is: \(dqundefined\(dq
The array has 1 elements: Oh brave new world that has such people in it.

The original string is: \(dqJan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\(dq
The separator is: \(dq,\(dq
The array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec
.EE
.SS Removing spaces from a string
In the following example, \f[CR]split()\f[R] looks for zero or more
spaces, followed by a semicolon, followed by zero or more spaces\(emand,
when found, removes the spaces and the semicolon from the string.
\f[CR]nameList\f[R] is the array returned as a result of
\f[CR]split()\f[R].
.IP
.EX
\f[B]const\f[R] names = \(dqHarry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \(dq;

console.log(names);

\f[B]const\f[R] re = /\(rss*(?:;|$)\(rss*/;
\f[B]const\f[R] nameList = names.split(re);

console.log(nameList);
.EE
.PP
This logs two lines; the first line logs the original string, and the
second line logs the resulting array.
.IP
.EX
Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand
[ \(dqHarry Trump\(dq, \(dqFred Barney\(dq, \(dqHelen Rigby\(dq, \(dqBill Abel\(dq, \(dqChris Hand\(dq, \(dq\(dq ]
.EE
.SS Returning a limited number of splits
In the following example, \f[CR]split()\f[R] looks for spaces in a
string and returns the first 3 splits that it finds.
.IP
.EX
\f[B]const\f[R] myString = \(dqHello World. How are you doing?\(dq;
\f[B]const\f[R] splits = myString.split(\(dq \(dq, 3);

console.log(splits); \f[I]// [ \(dqHello\(dq, \(dqWorld.\(dq, \(dqHow\(dq ]\f[R]
.EE
.SS Splitting with a \f[CR]RegExp\f[R] to include parts of the separator in the result
If \f[CR]separator\f[R] is a regular expression that contains capturing
parentheses \f[CR]( )\f[R], matched results are included in the array.
.IP
.EX
\f[B]const\f[R] myString = \(dqHello 1 word. Sentence number 2.\(dq;
\f[B]const\f[R] splits = myString.split(/(\(rsd)/);

console.log(splits);
\f[I]// [ \(dqHello \(dq, \(dq1\(dq, \(dq word. Sentence number \(dq, \(dq2\(dq, \(dq.\(dq ]\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]\(rsd\f[R] matches the character class for digits
between 0 and 9.
.RE
.SS Using a custom splitter
An object with a \f[CR]Symbol.split\f[R] method can be used as a
splitter with custom behavior.
.PP
The following example splits a string using an internal state consisting
of an incrementing number:
.IP
.EX
\f[B]const\f[R] splitByNumber = {
  [Symbol.split](str) {
    \f[B]let\f[R] num = 1;
    \f[B]let\f[R] pos = 0;
    \f[B]const\f[R] result = [];
    \f[B]while\f[R] (pos < str.length) {
      \f[B]const\f[R] matchPos = str.indexOf(num, pos);
      \f[B]if\f[R] (matchPos === \-1) {
        result.push(str.substring(pos));
        \f[B]break\f[R];
      }
      result.push(str.substring(pos, matchPos));
      pos = matchPos + String(num).length;
      num++;
    }
    \f[B]return\f[R] result;
  },
};

\f[B]const\f[R] myString = \(dqa1bc2c5d3e4f\(dq;
console.log(myString.split(splitByNumber)); \f[I]// [ \(dqa\(dq, \(dqbc\(dq, \(dqc5d\(dq, \(dqe\(dq, \(dqf\(dq ]\f[R]
.EE
.PP
The following example uses an internal state to enforce certain
behavior, and to ensure a \(lqvalid\(rq result is produced.
.IP
.EX
\f[B]const\f[R] DELIMITER = \(dq;\(dq;

\f[I]// Split the commands, but remove any invalid or unnecessary values.\f[R]
\f[B]const\f[R] splitCommands = {
  [Symbol.split](str, lim) {
    \f[B]const\f[R] results = [];
    \f[B]const\f[R] state = {
      on: \f[B]false\f[R],
      brightness: {
        current: 2,
        min: 1,
        max: 3,
      },
    };
    \f[B]let\f[R] pos = 0;
    \f[B]let\f[R] matchPos = str.indexOf(DELIMITER, pos);

    \f[B]while\f[R] (matchPos !== \-1) {
      \f[B]const\f[R] subString = str.slice(pos, matchPos).trim();

      \f[B]switch\f[R] (subString) {
        \f[B]case\f[R] \(dqlight on\(dq:
          \f[I]// If the \(gaon\(ga state is already true, do nothing.\f[R]
          \f[B]if\f[R] (!state.on) {
            state.on = \f[B]true\f[R];
            results.push(subString);
          }
          \f[B]break\f[R];

        \f[B]case\f[R] \(dqlight off\(dq:
          \f[I]// If the \(gaon\(ga state is already false, do nothing.\f[R]
          \f[B]if\f[R] (state.on) {
            state.on = \f[B]false\f[R];
            results.push(subString);
          }
          \f[B]break\f[R];

        \f[B]case\f[R] \(dqbrightness up\(dq:
          \f[I]// Enforce a brightness maximum.\f[R]
          \f[B]if\f[R] (state.brightness.current < state.brightness.max) {
            state.brightness.current += 1;
            results.push(subString);
          }
          \f[B]break\f[R];

        \f[B]case\f[R] \(dqbrightness down\(dq:
          \f[I]// Enforce a brightness minimum.\f[R]
          \f[B]if\f[R] (state.brightness.current > state.brightness.min) {
            state.brightness.current \-= 1;
            results.push(subString);
          }
          \f[B]break\f[R];
      }

      \f[B]if\f[R] (results.length === lim) {
        \f[B]break\f[R];
      }

      pos = matchPos + DELIMITER.length;
      matchPos = str.indexOf(DELIMITER, pos);
    }

    \f[I]// If we broke early due to reaching the split \(galim\(ga, don\(aqt add the remaining commands.\f[R]
    \f[B]if\f[R] (results.length < lim) {
      results.push(str.slice(pos).trim());
    }

    \f[B]return\f[R] results;
  },
};

\f[B]const\f[R] commands =
  \(dqlight on; brightness up; brightness up; brightness up; light on; brightness down; brightness down; light off\(dq;
console.log(commands.split(splitCommands, 3)); \f[I]// [\(dqlight on\(dq, \(dqbrightness up\(dq, \(dqbrightness down\(dq]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]String.prototype.split\f[R] in \f[CR]core\-js\f[R]
with fixes and implementation of modern behavior like
\f[CR]Symbol.split\f[R] support
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/string.prototype.split
es\-shims polyfill of \f[CR]String.prototype.split\f[R]
.UE \c
.IP \(bu 2
Regular expressions guide
.IP \(bu 2
\f[CR]String.prototype.charAt()\f[R]
.IP \(bu 2
\f[CR]String.prototype.indexOf()\f[R]
.IP \(bu 2
\f[CR]String.prototype.lastIndexOf()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.join()\f[R]
