.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "URLSearchParams.URLSearchParams" "JS" "February 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
URLSearchParams.URLSearchParams \- URLSearchParams: URLSearchParams()
constructor
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]URLSearchParams()\f[B]\f[R] constructor creates and
returns a new \f[CR]URLSearchParams\f[R] object.
.SH SYNTAX
.IP
.EX
new URLSearchParams()
new URLSearchParams(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
One of:
.RS
.IP \[bu] 2
A string, which will be parsed from
\f[CR]application/x\-www\-form\-urlencoded\f[R] format.
A leading \f[CR]\[aq]?\[aq]\f[R] character is ignored.
This is the only form that decodes percent\-encoding, and decodes
\f[CR]+\f[R] to U+0020 SPACE.
.IP \[bu] 2
A literal sequence of name\-value string pairs, or any object \[em] such
as a \f[CR]FormData\f[R] object \[em] with an iterator that produces a
sequence of string pairs.
Note that \f[CR]File\f[R] entries will be serialized as
\f[CR][object File]\f[R] rather than as their filename (as they would in
an \f[CR]application/x\-www\-form\-urlencoded\f[R] form).
.IP \[bu] 2
A record of string keys and string values.
Note that nesting is not supported.
.RE
.SS Return value
A \f[CR]URLSearchParams\f[R] object instance.
.SH EXAMPLES
The following example shows how to create a \f[CR]URLSearchParams\f[R]
object from various inputs.
.IP
.EX
\f[I]// Retrieve params via url.search, passed into constructor\f[R]
\f[B]const\f[R] url = \f[B]new\f[R] URL(\[dq]https://example.com?foo=1&bar=2\[dq]);
\f[B]const\f[R] params1 = \f[B]new\f[R] URLSearchParams(url.search);

\f[I]// Get the URLSearchParams object directly from a URL object\f[R]
\f[B]const\f[R] params1a = url.searchParams;

\f[I]// Pass in a string literal\f[R]
\f[B]const\f[R] params2 = \f[B]new\f[R] URLSearchParams(\[dq]foo=1&bar=2\[dq]);
\f[B]const\f[R] params2a = \f[B]new\f[R] URLSearchParams(\[dq]?foo=1&bar=2\[dq]);

\f[I]// Pass in a sequence of pairs\f[R]
\f[B]const\f[R] params3 = \f[B]new\f[R] URLSearchParams([
  [\[dq]foo\[dq], \[dq]1\[dq]],
  [\[dq]bar\[dq], \[dq]2\[dq]],
]);

\f[I]// Pass in a record\f[R]
\f[B]const\f[R] params4 = \f[B]new\f[R] URLSearchParams({ foo: \[dq]1\[dq], bar: \[dq]2\[dq] });
.EE
.PP
This example shows how to build a new URL with an object of search
parameters from an existing URL that has search parameters.
.IP
.EX
\f[B]const\f[R] url = \f[B]new\f[R] URL(\[dq]https://example.com/?a=hello&b=world\[dq]);

console.log(url.href);
\f[I]// https://example.com/?a=hello&b=world\f[R]

console.log(url.origin);
\f[I]// https://example.com\f[R]

\f[B]const\f[R] add_params = {
  c: \[dq]a\[dq],
  d: \f[B]new\f[R] String(2),
  e: \f[B]false\f[R].toString(),
};

\f[B]const\f[R] new_params = \f[B]new\f[R] URLSearchParams([
  ...Array.from(url.searchParams.entries()), \f[I]// [[\[dq]a\[dq],\[dq]hello\[dq]],[\[dq]b\[dq],\[dq]world\[dq]]]\f[R]
  ...Object.entries(add_params), \f[I]// [[\[dq]c\[dq],\[dq]a\[dq]],[\[dq]d\[dq],\[dq]2\[dq]],[\[dq]e\[dq],\[dq]false\[dq]]]\f[R]
]).toString();
console.log(new_params);
\f[I]// a=hello&b=world&c=a&d=2&e=false\f[R]

\f[B]const\f[R] new_url = \f[B]new\f[R] URL(\[ga]${url.origin}${url.pathname}?${new_params}\[ga]);

console.log(new_url.href);
\f[I]// https://example.com/?a=hello&b=world&c=a&d=2&e=false\f[R]

\f[I]// Here it is as a function that accepts (URL, Record<string, string>)\f[R]
\f[B]const\f[R] addSearchParams = (url, params = {}) \f[B]=>\f[R]
  \f[B]new\f[R] URL(
    \[ga]${url.origin}${url.pathname}?${\f[B]new\f[R] URLSearchParams([
      ...Array.from(url.searchParams.entries()),
      ...Object.entries(params),
    ])}\[ga],
  );
.EE
