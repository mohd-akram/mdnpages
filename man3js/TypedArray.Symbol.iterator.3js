.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "TypedArray.Symbol.iterator" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.Symbol.iterator \- TypedArray.prototypeSymbol.iterator
.SH SYNOPSIS
The \f[B]\f[CB][Symbol.iterator]()\f[B]\f[R] method of
\f[CR]TypedArray\f[R] instances implements the iterable protocol and
allows typed arrays to be consumed by most syntaxes expecting iterables,
such as the spread syntax and \f[CR]for...of\f[R] loops.
It returns an array iterator object that yields the value of each index
in the typed array.
.PP
The initial value of this property is the same function object as the
initial value of the \f[CR]TypedArray.prototype.values\f[R] property.
.IP
.EX
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array([10, 20, 30]);
\f[B]const\f[R] iterator1 = uint8[Symbol.iterator]();

\f[B]for\f[R] (\f[B]const\f[R] value \f[B]of\f[R] iterator1) {
  console.log(value);
}

\f[I]// Expected output: 10\f[R]
\f[I]// Expected output: 20\f[R]
\f[I]// Expected output: 30\f[R]
.EE
.SH SYNTAX
.IP
.EX
typedArray[Symbol.iterator]()
.EE
.SS Parameters
None.
.SS Return value
The same return value as \f[CR]TypedArray.prototype.values()\f[R]: a new
iterable iterator object that yields the value of each index in the
typed array.
.SH EXAMPLES
.SS Iteration using for\&...of loop
Note that you seldom need to call this method directly.
The existence of the \f[CR][Symbol.iterator]()\f[R] method makes typed
arrays iterable, and iterating syntaxes like the \f[CR]for...of\f[R]
loop automatically call this method to obtain the iterator to loop over.
.IP
.EX
\f[B]const\f[R] arr = \f[B]new\f[R] Uint8Array([10, 20, 30, 40, 50]);
\f[B]for\f[R] (\f[B]const\f[R] n \f[B]of\f[R] arr) {
  console.log(n);
}
.EE
.SS Manually hand\-rolling the iterator
You may still manually call the \f[CR]next()\f[R] method of the returned
iterator object to achieve maximum control over the iteration process.
.IP
.EX
\f[B]const\f[R] arr = \f[B]new\f[R] Uint8Array([10, 20, 30, 40, 50]);
\f[B]const\f[R] arrIter = arr[Symbol.iterator]();
console.log(arrIter.next().value); \f[I]// 10\f[R]
console.log(arrIter.next().value); \f[I]// 20\f[R]
console.log(arrIter.next().value); \f[I]// 30\f[R]
console.log(arrIter.next().value); \f[I]// 40\f[R]
console.log(arrIter.next().value); \f[I]// 50\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]TypedArray.prototype[Symbol.iterator]\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.entries()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.keys()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.values()\f[R]
.IP \[bu] 2
\f[CR]Symbol.iterator\f[R]
.IP \[bu] 2
Iteration protocols
