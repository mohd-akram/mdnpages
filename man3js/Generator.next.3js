.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Generator.next" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Generator.next \- Generator.prototype.next()
.SH SYNOPSIS
The \f[B]\f[CB]next()\f[B]\f[R] method of \f[CR]Generator\f[R] instances
returns an object with two properties \f[CR]done\f[R] and
\f[CR]value\f[R].
You can also provide a parameter to the \f[CR]next\f[R] method to send a
value to the generator.
.SH SYNTAX
.IP
.EX
next()
next(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R] \f[I](optional)\f[R]
The value to send to the generator.
.RS
.PP
The value will be assigned as a result of a \f[CR]yield\f[R] expression.
For example, in \f[CR]variable = yield expression\f[R], the value passed
to the \f[CR].next()\f[R] function will be assigned to
\f[CR]variable\f[R].
.RE
.SS Return value
An \f[CR]Object\f[R] with two properties:
.TP
\f[B]done\f[R]
A boolean value:
.RS
.IP \[bu] 2
\f[CR]true\f[R] if the generator is past the end of its control flow.
In this case \f[CR]value\f[R] specifies the \f[I]return value\f[R] of
the generator (which may be undefined).
.IP \[bu] 2
\f[CR]false\f[R] if the generator is able to produce more values.
.RE
.TP
\f[B]value\f[R]
Any JavaScript value yielded or returned by the generator.
.SH EXAMPLES
.SS Using next()
The following example shows a simple generator and the object that the
\f[CR]next\f[R] method returns:
.IP
.EX
\f[B]function\f[R]* gen() {
  \f[B]yield\f[R] 1;
  \f[B]yield\f[R] 2;
  \f[B]yield\f[R] 3;
}

\f[B]const\f[R] g = gen(); \f[I]// Generator { }\f[R]
g.next(); \f[I]// { value: 1, done: false }\f[R]
g.next(); \f[I]// { value: 2, done: false }\f[R]
g.next(); \f[I]// { value: 3, done: false }\f[R]
g.next(); \f[I]// { value: undefined, done: true }\f[R]
.EE
.SS Using next() with a list
In this example, \f[CR]getPage\f[R] takes a list and \[lq]paginates\[rq]
it into chunks of size \f[CR]pageSize\f[R].
Each call to \f[CR]next\f[R] will yield one such chunk.
.IP
.EX
\f[B]function\f[R]* getPage(list, pageSize = 1) {
  \f[B]for\f[R] (\f[B]let\f[R] index = 0; index < list.length; index += pageSize) {
    \f[B]yield\f[R] list.slice(index, index + pageSize);
  }
}

\f[B]const\f[R] list = [1, 2, 3, 4, 5, 6, 7, 8];
\f[B]const\f[R] page = getPage(list, 3); \f[I]// Generator { }\f[R]

page.next(); \f[I]// { value: [1, 2, 3], done: false }\f[R]
page.next(); \f[I]// { value: [4, 5, 6], done: false }\f[R]
page.next(); \f[I]// { value: [7, 8], done: false }\f[R]
page.next(); \f[I]// { value: undefined, done: true }\f[R]
.EE
.SS Sending values to the generator
In this example, \f[CR]next\f[R] is called with a value.
.RS
.PP
\f[B]Note:\f[R] The first call does not log anything, because the
generator was not yielding anything initially.
.RE
.IP
.EX
\f[B]function\f[R]* gen() {
  \f[B]while\f[R] (\f[B]true\f[R]) {
    \f[B]const\f[R] value = \f[B]yield\f[R];
    console.log(value);
  }
}

\f[B]const\f[R] g = gen();
g.next(1); \f[I]// Returns { value: undefined, done: false }\f[R]
\f[I]// No log at this step: the first value sent through \[ga]next\[ga] is lost\f[R]
g.next(2); \f[I]// Returns { value: undefined, done: false }\f[R]
\f[I]// Logs 2\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]function*\f[R]
.IP \[bu] 2
Iterators and generators guide
