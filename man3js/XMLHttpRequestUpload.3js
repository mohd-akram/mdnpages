.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "XMLHttpRequestUpload" "JS" "April 4, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XMLHttpRequestUpload \- XMLHttpRequestUpload
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers, except for
Service Workers.
.PP
The \f[B]\f[CB]XMLHttpRequestUpload\f[B]\f[R] interface represents the
upload process for a specific \f[CR]XMLHttpRequest\f[R].
It is an \f[I]opaque\f[R] object that represents the underlying,
browser\-dependent, upload process.
It is an \f[CR]XMLHttpRequestEventTarget\f[R] and can be obtained by
calling \f[CR]XMLHttpRequest.upload\f[R].
.SH INSTANCE PROPERTIES
\f[I]This interface has no specific property, but inherits the
properties of \f[CI]XMLHttpRequestEventTarget\f[I] and of
\f[CI]EventTarget\f[I].\f[R]
.SH INSTANCE METHODS
\f[I]This interface has no specific method, but inherits the methods of
\f[CI]XMLHttpRequestEventTarget\f[I] and of \f[CI]EventTarget\f[I].\f[R]
.SH EVENTS
.TP
\f[B]abort\f[R]
Fired when a request has been aborted, for example because the program
called \f[CR]XMLHttpRequest.abort()\f[R].
Also available via the \f[CR]onabort\f[R] event handler property.
.TP
\f[B]error\f[R]
Fired when the request encountered an error.
Also available via the \f[CR]onerror\f[R] event handler property.
.TP
\f[B]load\f[R]
Fired when a request transaction completes successfully.
Also available via the \f[CR]onload\f[R] event handler property.
.TP
\f[B]loadend\f[R]
Fired when a request has completed, whether successfully (after
\f[CR]load\f[R]) or unsuccessfully (after \f[CR]abort\f[R] or
\f[CR]error\f[R]).
Also available via the \f[CR]onloadend\f[R] event handler property.
.TP
\f[B]loadstart\f[R]
Fired when a request has started to load data.
Also available via the \f[CR]onloadstart\f[R] event handler property.
.TP
\f[B]progress\f[R]
Fired periodically when a request receives more data.
Also available via the \f[CR]onprogress\f[R] event handler property.
.TP
\f[B]timeout\f[R]
Fired when progress is terminated due to preset time expiring.
Also available via the \f[CR]ontimeout\f[R] event handler property.
.SH EXAMPLES
.SS Uploading a file with a timeout
This allows you to upload a file to a server; it displays a progress bar
while the upload is happening as well as a message with the progress and
the results, success or failure.
An abort button allows to stop an upload.
.SS HTML
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\[dq]en\[dq]>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R] charset=\[dq]utf\-8\[dq] />
    <\f[B]meta\f[R] name=\[dq]viewport\[dq] content=\[dq]width=device\-width\[dq] />
    <\f[B]title\f[R]>XMLHttpRequestUpload test</\f[B]title\f[R]>
    <\f[B]link\f[R] rel=\[dq]stylesheet\[dq] href=\[dq]xhrupload_test.css\[dq] />
    <\f[B]script\f[R] src=\[dq]xhrupload_test.js\[dq]></\f[B]script\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    <\f[B]main\f[R]>
      <\f[B]h1\f[R]>Upload a file</\f[B]h1\f[R]>
      <\f[B]p\f[R]>
        <\f[B]label\f[R] for=\[dq]file\[dq]>File to upload</\f[B]label\f[R]><\f[B]input\f[R] type=\[dq]file\[dq] id=\[dq]file\[dq] />
      </\f[B]p\f[R]>
      <\f[B]p\f[R]>
        <\f[B]progress\f[R] />
      </\f[B]p\f[R]>
      <\f[B]p\f[R]>
        <\f[B]output\f[R]></\f[B]output\f[R]>
      </\f[B]p\f[R]>
      <\f[B]p\f[R]>
        <\f[B]button\f[R] disabled id=\[dq]abort\[dq]>Abort</\f[B]button\f[R]>
      </\f[B]p\f[R]>
    </\f[B]main\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SS CSS
.IP
.EX
body {
  \f[B]background\-color\f[R]: lightblue;
}

main {
  \f[B]margin\f[R]: 50px auto;
  \f[B]text\-align\f[R]: center;
}

file {
  \f[B]display\f[R]: none;
}

label[for=\[dq]file\[dq]] {
  \f[B]background\-color\f[R]: lightgrey;
  \f[B]padding\f[R]: 10px 10px;
}

progress {
  \f[B]display\f[R]: none;
}

progress.visible {
  \f[B]display\f[R]: inline;
}
.EE
.SS JavaScript
.IP
.EX
addEventListener(\[dq]DOMContentLoaded\[dq], () \f[B]=>\f[R] {
  \f[B]const\f[R] fileInput = document.getElementById(\[dq]file\[dq]);
  \f[B]const\f[R] progressBar = document.querySelector(\[dq]progress\[dq]);
  \f[B]const\f[R] log = document.querySelector(\[dq]output\[dq]);
  \f[B]const\f[R] abortButton = document.getElementById(\[dq]abort\[dq]);

  fileInput.addEventListener(\[dq]change\[dq], () \f[B]=>\f[R] {
    \f[B]const\f[R] xhr = \f[B]new\f[R] XMLHttpRequest();
    xhr.timeout = 2000; \f[I]// 2 seconds\f[R]

    \f[I]// Link abort button\f[R]
    abortButton.addEventListener(
      \[dq]click\[dq],
      () \f[B]=>\f[R] {
        xhr.abort();
      },
      { once: \f[B]true\f[R] },
    );

    \f[I]// When the upload starts, we display the progress bar\f[R]
    xhr.upload.addEventListener(\[dq]loadstart\[dq], (event) \f[B]=>\f[R] {
      progressBar.classList.add(\[dq]visible\[dq]);
      progressBar.value = 0;
      progressBar.max = event.total;
      log.textContent = \[dq]Uploading (0%)\&...\[dq];
      abortButton.disabled = \f[B]false\f[R];
    });

    \f[I]// Each time a progress event is received, we update the bar\f[R]
    xhr.upload.addEventListener(\[dq]progress\[dq], (event) \f[B]=>\f[R] {
      progressBar.value = event.loaded;
      log.textContent = \[ga]Uploading (${(
        (event.loaded / event.total) *
        100
      ).toFixed(2)}%)\&...\[ga];
    });

    \f[I]// When the upload is finished, we hide the progress bar.\f[R]
    xhr.upload.addEventListener(\[dq]loadend\[dq], (event) \f[B]=>\f[R] {
      progressBar.classList.remove(\[dq]visible\[dq]);
      \f[B]if\f[R] (event.loaded !== 0) {
        log.textContent = \[dq]Upload finished.\[dq];
      }
      abortButton.disabled = \f[B]true\f[R];
    });

    \f[I]// In case of an error, an abort, or a timeout, we hide the progress bar\f[R]
    \f[I]// Note that these events can be listened to on the xhr object too\f[R]
    \f[B]function\f[R] errorAction(event) {
      progressBar.classList.remove(\[dq]visible\[dq]);
      log.textContent = \[ga]Upload failed: ${event.type}\[ga];
    }
    xhr.upload.addEventListener(\[dq]error\[dq], errorAction);
    xhr.upload.addEventListener(\[dq]abort\[dq], errorAction);
    xhr.upload.addEventListener(\[dq]timeout\[dq], errorAction);

    \f[I]// Build the payload\f[R]
    \f[B]const\f[R] fileData = \f[B]new\f[R] FormData();
    fileData.append(\[dq]file\[dq], fileInput.files[0]);

    \f[I]// Theoretically, event listeners could be set after the open() call\f[R]
    \f[I]// but browsers are buggy here\f[R]
    xhr.open(\[dq]POST\[dq], \[dq]upload_test.php\[dq], \f[B]true\f[R]);

    \f[I]// Note that the event listener must be set before sending (as it is a preflighted request)\f[R]
    xhr.send(fileData);
  });
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]XMLHttpRequest\f[R]
