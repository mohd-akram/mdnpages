.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WINDOW.UNHANDLEDREJECTION_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.unhandledrejection_event \- Window: unhandledrejection event
.SH SYNOPSIS
The \f[B]\f[CB]unhandledrejection\f[B]\f[R] event is sent to the global
scope of a script when a JavaScript \f[CR]Promise\f[R] that has no
rejection handler is rejected; typically, this is the \f[CR]window\f[R],
but may also be a \f[CR]Worker\f[R].
.PP
This is useful for debugging and for providing fallback error handling
for unexpected situations.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqunhandledrejection\(dq, (event) => { })

onunhandledrejection = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]PromiseRejectionEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
.TP
\f[B]PromiseRejectionEvent.promise\f[R] \f[I](read\-only)\f[R]
The JavaScript \f[CR]Promise\f[R] that was rejected.
.TP
\f[B]PromiseRejectionEvent.reason\f[R] \f[I](read\-only)\f[R]
A value or \f[CR]Object\f[R] indicating why the promise was rejected, as
passed to \f[CR]Promise.reject()\f[R].
.SH EVENT HANDLER ALIASES
In addition to the \f[CR]Window\f[R] interface, the event handler
property \f[CR]onunhandledrejection\f[R] is also available on the
following targets:
.IP \(bu 2
\f[CR]HTMLBodyElement\f[R]
.IP \(bu 2
\f[CR]HTMLFrameSetElement\f[R]
.IP \(bu 2
\f[CR]SVGSVGElement\f[R]
.SH USAGE NOTES
Allowing the \f[CR]unhandledrejection\f[R] event to bubble will
eventually result in an error message being output to the console.
You can prevent this by calling \f[CR]preventDefault()\f[R] on the
\f[CR]PromiseRejectionEvent\f[R]; see Preventing default handling below
for an example.
.PP
Because this event can leak data, \f[CR]Promise\f[R] rejections that
originate from a cross\-origin script won\(cqt fire this event.
.SH EXAMPLES
.SS Basic error logging
This example logs information about the unhandled promise rejection to
the console.
.IP
.EX
window.addEventListener(\(dqunhandledrejection\(dq, (event) \f[B]=>\f[R] {
  console.warn(\(gaUNHANDLED PROMISE REJECTION: ${event.reason}\(ga);
});
.EE
.PP
You can also use the \f[CR]onunhandledrejection\f[R] event handler
property to set up the event listener:
.IP
.EX
window.onunhandledrejection = (event) \f[B]=>\f[R] {
  console.warn(\(gaUNHANDLED PROMISE REJECTION: ${event.reason}\(ga);
};
.EE
.SS Preventing default handling
Many environments (such as Node.js) report unhandled promise rejections
to the console by default.
You can prevent that from happening by adding a handler for
\f[CR]unhandledrejection\f[R] events that\(emin addition to any other
tasks you wish to perform\(emcalls \f[CR]preventDefault()\f[R] to cancel
the event, preventing it from bubbling up to be handled by the
runtime\(cqs logging code.
This works because \f[CR]unhandledrejection\f[R] is cancelable.
.IP
.EX
window.addEventListener(\(dqunhandledrejection\(dq, (event) \f[B]=>\f[R] {
  \f[I]// code for handling the unhandled rejection\f[R]
  \f[I]// \&...\f[R]

  \f[I]// Prevent the default handling (such as outputting the\f[R]
  \f[I]// error to the console)\f[R]

  event.preventDefault();
});
.EE
.SH SEE ALSO
.IP \(bu 2
Promise rejection events
.IP \(bu 2
\f[CR]rejectionhandled\f[R] event
.IP \(bu 2
\f[CR]Promise\f[R]
