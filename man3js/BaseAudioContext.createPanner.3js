.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "BASEAUDIOCONTEXT.CREATEPANNER" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BaseAudioContext.createPanner \- BaseAudioContext: createPanner() method
.SH SYNOPSIS
The \f[CR]createPanner()\f[R] method of the \f[CR]BaseAudioContext\f[R]
Interface is used to create a new \f[CR]PannerNode\f[R], which is used
to spatialize an incoming audio stream in 3D space.
.PP
The panner node is spatialized in relation to the AudioContext\(cqs
\f[CR]AudioListener\f[R] (defined by the
\f[CR]AudioContext.listener\f[R] attribute), which represents the
position and orientation of the person listening to the audio.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]PannerNode()\f[R] constructor is the
recommended way to create a \f[CR]PannerNode\f[R]; see Creating an
AudioNode.
.RE
.SH SYNTAX
.IP
.EX
createPanner()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]PannerNode\f[R].
.SH EXAMPLES
In the following example, you can see an example of how the
\f[CR]createPanner()\f[R] method, \f[CR]AudioListener\f[R] and
\f[CR]PannerNode\f[R] would be used to control audio spatialization.
Generally you will define the position in 3D space that your audio
listener and panner (source) occupy initially, and then update the
position of one or both of these as the application is used.
You might be moving a character around inside a game world for example,
and wanting delivery of audio to change realistically as your character
moves closer to or further away from a music player such as a stereo.
In the example you can see this being controlled by the functions
\f[CR]moveRight()\f[R], \f[CR]moveLeft()\f[R], etc., which set new
values for the panner position via the \f[CR]PositionPanner()\f[R]
function.
.PP
To see a complete implementation, check out our \c
.UR https://mdn.github.io/webaudio-examples/panner-node/
panner\-node example
.UE \c
\ (\c
.UR https://github.com/mdn/webaudio-examples/tree/main/panner-node
view the source code
.UE \c
) \(em this demo transports you to the 2.5D \(lqRoom of metal\(rq, where
you can play a track on a boom box and then walk around the boom box to
see how the sound changes!
.PP
Note how we have used some feature detection to either give the browser
the newer property values (like \f[CR]AudioListener.forwardX\f[R]) for
setting position, etc.
if it supports those, or older methods (like
\f[CR]AudioListener.setOrientation()\f[R]) if it still supports those
but not the new properties.
.IP
.EX
\f[I]// set up listener and panner position information\f[R]
\f[B]const\f[R] WIDTH = window.innerWidth;
\f[B]const\f[R] HEIGHT = window.innerHeight;

\f[B]const\f[R] xPos = Math.floor(WIDTH / 2);
\f[B]const\f[R] yPos = Math.floor(HEIGHT / 2);
\f[B]const\f[R] zPos = 295;

\f[I]// define other variables\f[R]

\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[B]const\f[R] panner = audioCtx.createPanner();
panner.panningModel = \(dqHRTF\(dq;
panner.distanceModel = \(dqinverse\(dq;
panner.refDistance = 1;
panner.maxDistance = 10000;
panner.rolloffFactor = 1;
panner.coneInnerAngle = 360;
panner.coneOuterAngle = 0;
panner.coneOuterGain = 0;

\f[B]if\f[R] (panner.orientationX) {
  panner.orientationX.setValueAtTime(1, audioCtx.currentTime);
  panner.orientationY.setValueAtTime(0, audioCtx.currentTime);
  panner.orientationZ.setValueAtTime(0, audioCtx.currentTime);
} \f[B]else\f[R] {
  panner.setOrientation(1, 0, 0);
}

\f[B]const\f[R] listener = audioCtx.listener;

\f[B]if\f[R] (listener.forwardX) {
  listener.forwardX.setValueAtTime(0, audioCtx.currentTime);
  listener.forwardY.setValueAtTime(0, audioCtx.currentTime);
  listener.forwardZ.setValueAtTime(\-1, audioCtx.currentTime);
  listener.upX.setValueAtTime(0, audioCtx.currentTime);
  listener.upY.setValueAtTime(1, audioCtx.currentTime);
  listener.upZ.setValueAtTime(0, audioCtx.currentTime);
} \f[B]else\f[R] {
  listener.setOrientation(0, 0, \-1, 0, 1, 0);
}

\f[B]let\f[R] source;

\f[B]const\f[R] play = document.querySelector(\(dq.play\(dq);
\f[B]const\f[R] stop = document.querySelector(\(dq.stop\(dq);

\f[B]const\f[R] boomBox = document.querySelector(\(dq.boom\-box\(dq);

\f[B]const\f[R] listenerData = document.querySelector(\(dq.listener\-data\(dq);
\f[B]const\f[R] pannerData = document.querySelector(\(dq.panner\-data\(dq);

leftBound = \-xPos + 50;
rightBound = xPos \- 50;

xIterator = WIDTH / 150;

\f[I]// listener will always be in the same place for this demo\f[R]

\f[B]if\f[R] (listener.positionX) {
  listener.positionX.setValueAtTime(xPos, audioCtx.currentTime);
  listener.positionY.setValueAtTime(yPos, audioCtx.currentTime);
  listener.positionZ.setValueAtTime(300, audioCtx.currentTime);
} \f[B]else\f[R] {
  listener.setPosition(xPos, yPos, 300);
}

listenerData.textContent = \(gaListener data: X ${xPos} Y ${yPos} Z 300\(ga;

\f[I]// panner will move as the boombox graphic moves around on the screen\f[R]
\f[B]function\f[R] positionPanner() {
  \f[B]if\f[R] (panner.positionX) {
    panner.positionX.setValueAtTime(xPos, audioCtx.currentTime);
    panner.positionY.setValueAtTime(yPos, audioCtx.currentTime);
    panner.positionZ.setValueAtTime(zPos, audioCtx.currentTime);
  } \f[B]else\f[R] {
    panner.setPosition(xPos, yPos, zPos);
  }
  pannerData.textContent = \(gaPanner data: X ${xPos} Y ${yPos} Z ${zPos}\(ga;
}
.EE
.RS
.PP
\f[B]Note:\f[R] In terms of working out what position values to apply to
the listener and panner, to make the sound appropriate to what the
visuals are doing on screen, there is quite a bit of math involved, but
you will soon get used to it with a bit of experimentation.
.RE
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
