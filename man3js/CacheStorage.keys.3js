.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CacheStorage.keys" "JS" "February 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CacheStorage.keys \- CacheStorage: keys() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]keys()\f[B]\f[R] method of the \f[CR]CacheStorage\f[R]
interface returns a \f[CR]Promise\f[R] that will resolve with an array
containing strings corresponding to all of the named \f[CR]Cache\f[R]
objects tracked by the \f[CR]CacheStorage\f[R] object in the order they
were created.
Use this method to iterate over a list of all \f[CR]Cache\f[R] objects.
.PP
You can access \f[CR]CacheStorage\f[R] through the global
\f[CR]caches\f[R] property.
.SH SYNTAX
.IP
.EX
keys()
.EE
.SS Parameters
None.
.SS Return value
a \f[CR]Promise\f[R] that resolves with an array of the \f[CR]Cache\f[R]
names inside the \f[CR]CacheStorage\f[R] object.
.SH EXAMPLES
In this code snippet we wait for an \f[CR]activate\f[R] event, and then
run a \f[CR]waitUntil()\f[R] block that clears up any old, unused caches
before a new service worker is activated.
Here we have an allowlist containing the names of the caches we want to
keep (\f[CR]cacheAllowlist\f[R]).
We return the keys of the caches in the \f[CR]CacheStorage\f[R] object
using \f[CR]keys()\f[R], then check each key to see if it is in the
allowlist.
If not, we delete it using \f[CR]CacheStorage.delete()\f[R].
.IP
.EX
\f[B]this\f[R].addEventListener(\[dq]activate\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] cacheAllowlist = [\[dq]v2\[dq]];

  event.waitUntil(
    caches.keys().then((keyList) \f[B]=>\f[R]
      Promise.all(
        keyList.map((key) \f[B]=>\f[R] {
          \f[B]if\f[R] (!cacheAllowlist.includes(key)) {
            \f[B]return\f[R] caches.delete(key);
          }
        }),
      ),
    ),
  );
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\f[CR]Cache\f[R]
.IP \[bu] 2
\f[CR]caches\f[R]
