.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ViewTransition" "JS" "July 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ViewTransition \- ViewTransition
.SH SYNOPSIS
The \f[B]\f[CB]ViewTransition\f[B]\f[R] interface of the View
Transitions API represents an active view transition, and provides
functionality to react to the transition reaching different states
(e.g.\ ready to run the animation, or animation finished) or skip the
transition altogether.
.PP
This object type is made available in the following ways:
.IP \[bu] 2
In the case of same\-document (SPA) transitions, it is returned by the
\f[CR]document.startViewTransition()\f[R] method.
.IP \[bu] 2
In the case of cross\-document (MPA) transitions, it is made available:
.RS 2
.IP \[bu] 2
In the outgoing page via the \f[CR]pageswap\f[R] event object\[cq]s
\f[CR]PageSwapEvent.viewTransition\f[R] property.
.IP \[bu] 2
In the inbound page via the \f[CR]pagereveal\f[R] event object\[cq]s
\f[CR]PageRevealEvent.viewTransition\f[R] property.
.RE
.PP
When a view transition is triggered by a
\f[CR]startViewTransition()\f[R] call (or a page navigation in the case
of MPA transitions), a sequence of steps is followed as explained in The
view transition process.
This also explains when the different promises fulfill.
.SH INSTANCE PROPERTIES
.TP
\f[B]ViewTransition.finished\f[R] \f[I](read\-only)\f[R]
A \f[CR]Promise\f[R] that fulfills once the transition animation is
finished, and the new page view is visible and interactive to the user.
.TP
\f[B]ViewTransition.ready\f[R] \f[I](read\-only)\f[R]
A \f[CR]Promise\f[R] that fulfills once the pseudo\-element tree is
created and the transition animation is about to start.
.TP
\f[B]ViewTransition.updateCallbackDone\f[R] \f[I](read\-only)\f[R]
A \f[CR]Promise\f[R] that fulfills when the promise returned by the
\f[CR]document.startViewTransition()\f[R] method\[cq]s callback
fulfills.
.SH INSTANCE METHODS
.TP
\f[B]skipTransition()\f[R]
Skips the animation part of the view transition, but doesn\[cq]t skip
running the \f[CR]document.startViewTransition()\f[R] callback that
updates the DOM.
.SH EXAMPLES
In the following SPA example, the \f[CR]ViewTransition.ready\f[R]
promise is used to trigger a custom circular reveal view transition
emanating from the position of the user\[cq]s cursor on click, with
animation provided by the Web Animations API.
.IP
.EX
\f[I]// Store the last click event\f[R]
\f[B]let\f[R] lastClick;
addEventListener(\[dq]click\[dq], (event) \f[B]=>\f[R] (lastClick = event));

\f[B]function\f[R] spaNavigate(data) {
  \f[I]// Fallback for browsers that don\[aq]t support this API:\f[R]
  \f[B]if\f[R] (!document.startViewTransition) {
    updateTheDOMSomehow(data);
    \f[B]return\f[R];
  }

  \f[I]// Get the click position, or fallback to the middle of the screen\f[R]
  \f[B]const\f[R] x = lastClick?.clientX ?? innerWidth / 2;
  \f[B]const\f[R] y = lastClick?.clientY ?? innerHeight / 2;
  \f[I]// Get the distance to the furthest corner\f[R]
  \f[B]const\f[R] endRadius = Math.hypot(
    Math.max(x, innerWidth \- x),
    Math.max(y, innerHeight \- y),
  );

  \f[I]// Create a transition:\f[R]
  \f[B]const\f[R] transition = document.startViewTransition(() \f[B]=>\f[R] {
    updateTheDOMSomehow(data);
  });

  \f[I]// Wait for the pseudo\-elements to be created:\f[R]
  transition.ready.then(() \f[B]=>\f[R] {
    \f[I]// Animate the root\[aq]s new view\f[R]
    document.documentElement.animate(
      {
        clipPath: [
          \[ga]circle(0 at ${x}px ${y}px)\[ga],
          \[ga]circle(${endRadius}px at ${x}px ${y}px)\[ga],
        ],
      },
      {
        duration: 500,
        easing: \[dq]ease\-in\[dq],
        \f[I]// Specify which pseudo\-element to animate\f[R]
        pseudoElement: \[dq]::view\-transition\-new(root)\[dq],
      },
    );
  });
}
.EE
.PP
This animation also requires the following CSS, to turn off the default
CSS animation and stop the old and new view states from blending in any
way (the new state \[lq]wipes\[rq] right over the top of the old state,
rather than transitioning in):
.IP
.EX
\f[BI]::view\-transition\-image\-pair(\f[R]root\f[BI])\f[R] {
  \f[B]isolation\f[R]: auto;
}

\f[BI]::view\-transition\-old(\f[R]root\f[BI])\f[R],
\f[BI]::view\-transition\-new(\f[R]root\f[BI])\f[R] {
  \f[B]animation\f[R]: none;
  \f[B]mix\-blend\-mode\f[R]: normal;
  \f[B]display\f[R]: block;
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/web-platform/view-transitions/
Smooth and simple transitions with the View Transitions API
.UE \c
