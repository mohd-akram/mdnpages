.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ClipboardItem.supports_static" "JS" "June 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ClipboardItem.supports_static \- ClipboardItem: supports() static method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]supports()\f[B]\f[R] static method of the
\f[CR]ClipboardItem\f[R] interface returns \f[CR]true\f[R] if the given
MIME type is supported by the clipboard, and \f[CR]false\f[R] otherwise.
.PP
Note that the Clipboard API mandates support for plain text, HTML and
PNG files.
The \f[CR]supports()\f[R] method will always return \f[CR]true\f[R] for
these MIME types, so testing them is unnecessary .
.SH SYNTAX
.IP
.EX
supports(type)
.EE
.SS Parameters
.TP
\f[B]type\f[R]
A string, indicating the MIME type to test.
.RS
.PP
These MIME types are always supported:
.IP \[bu] 2
\f[CR]text/plain\f[R]
.IP \[bu] 2
\f[CR]text/html\f[R]
.IP \[bu] 2
\f[CR]image/png\f[R]
.PP
These MIME types may be supported:
.IP \[bu] 2
\f[CR]image/svg+xml\f[R]
.IP \[bu] 2
Custom MIME\-type formats starting with \f[CR]\[dq]web \[dq]\f[R].
The custom type (without the \f[CR]\[dq]web \[dq]\f[R] prefix), must
have the correct formatting for a MIME type.
.RE
.SS Return value
\f[CR]true\f[R] if the given MIME type is supported by the clipboard,
\f[CR]false\f[R] otherwise.
.SH EXAMPLES
.SS Writing an image to the clipboard
The following example fetches an SVG image to a blob, and then writes it
to the clipboard.
.PP
We use \f[CR]supports()\f[R] to check whether the
\f[CR]\[dq]image/svg+xml\[dq]\f[R] MIME type is supported by the
clipboard before fetching the image and writing it using
\f[CR]clipboard.write()\f[R].
We also wrap the whole function body in \f[CR]try..catch\f[R] statement
to catch any other errors, such as \f[CR]ClipboardItem\f[R] itself not
being supported.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] writeClipImg() {
  \f[B]try\f[R] {
    \f[B]if\f[R] (ClipboardItem.supports(\[dq]image/svg+xml\[dq])) {
      \f[B]const\f[R] imgURL = \[dq]/myimage.svg\[dq];
      \f[B]const\f[R] data = \f[B]await\f[R] fetch(imgURL);
      \f[B]const\f[R] blob = \f[B]await\f[R] data.blob();
      \f[B]await\f[R] navigator.clipboard.write([
        \f[B]new\f[R] ClipboardItem({
          [blob.type]: blob,
        }),
      ]);
      console.log(\[dq]Fetched image copied to clipboard.\[dq]);
    } \f[B]else\f[R] {
      console.log(\[dq]SVG image not supported by clipboard\[dq]);
    }
  } \f[B]catch\f[R] (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
