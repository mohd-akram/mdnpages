.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "VideoEncoder.VideoEncoder" "JS" "November 3, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
VideoEncoder.VideoEncoder \- VideoEncoder: VideoEncoder() constructor
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]VideoEncoder()\f[B]\f[R] constructor creates a new
\f[CR]VideoEncoder\f[R] object with the provided
\f[CR]options.output\f[R] callback assigned as the output callback, the
provided \f[CR]options.error\f[R] callback as the error callback, and
sets the \f[CR]VideoEncoder.state\f[R] to
\f[CR]\[dq]unconfigured\[dq]\f[R].
.SH SYNTAX
.IP
.EX
new VideoEncoder(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R]
An object containing two required callbacks.
.RS
.TP
\f[B]output\f[R]
A callback which takes an \f[CR]EncodedVideoChunk\f[R] object as the
first argument, and an optional metadata object as the second.
The metadata object has three members:
.RS
.TP
\f[B]decoderConfig\f[R] \f[I](optional)\f[R]
An object containing:
.RS
.TP
\f[B]codec\f[R]
A string containing a \c
.UR https://www.w3.org/TR/webcodecs-codec-registry/#video-codec-registry
valid codec string
.UE \c
\&.
.TP
\f[B]description\f[R] \f[I](optional)\f[R]
An \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R], or a
\f[CR]DataView\f[R] containing a sequence of codec\-specific bytes,
commonly known as \[lq]extradata\[rq].
.TP
\f[B]codedWidth\f[R] \f[I](optional)\f[R]
An integer representing the width of the \f[CR]VideoFrame\f[R] in
pixels, potentially including non\-visible padding, and prior to
considering potential ratio adjustments.
.TP
\f[B]codedHeight\f[R] \f[I](optional)\f[R]
An integer representing the height of the \f[CR]VideoFrame\f[R] in
pixels, potentially including non\-visible padding, and prior to
considering potential ratio adjustments.
.TP
\f[B]displayAspectWidth\f[R] \f[I](optional)\f[R]
An integer representing the horizontal dimension of the
\f[CR]VideoFrame\f[R]\[cq]s aspect ratio when displayed.
.TP
\f[B]displayAspectHeight\f[R] \f[I](optional)\f[R]
An integer representing the vertical dimension of the
\f[CR]VideoFrame\f[R]\[cq]s aspect ratio when displayed.
.TP
\f[B]colorSpace\f[R] \f[I](optional)\f[R]
An object you pass to the \f[CR]VideoColorSpace\f[R] constructor as the
\f[CR]init\f[R] argument, configuring the
\f[CR]VideoFrame.colorSpace\f[R] for \f[CR]VideoFrames\f[R] associated
with this \f[CR]decoderConfig\f[R] object.
If \f[CR]colorSpace\f[R] exists, the provided values will override any
in\-band values from the bitstream.
.TP
\f[B]hardwareAcceleration\f[R] \f[I](optional)\f[R]
A string that configures hardware acceleration for this codec.
Defaults to \f[CR]\[dq]no\-preference\[dq]\f[R].
Options are:
.RS
.IP \[bu] 2
\f[CR]\[dq]no\-preference\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]prefer\-hardware\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]prefer\-software\[dq]\f[R]
.RE
.TP
\f[B]optimizeForLatency\f[R] \f[I](optional)\f[R]
A boolean representing whether the selected decoder should be configured
to minimize the number of \f[CR]EncodedVideoChunks\f[R] that have to be
decoded before a \f[CR]VideoFrame\f[R] is output.
.RE
.TP
\f[B]svc\f[R] \f[I](optional)\f[R]
An optional object with only one member: \f[CR]temporalLayerId\f[R],
which is a number that identifies the \c
.UR https://w3c.github.io/webcodecs/#temporal-layer
temporal layer
.UE \c
\ for the associated \f[CR]EncodedVideoChunk\f[R].
.TP
\f[B]alphaSideData\f[R] \f[I](optional)\f[R]
An \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R], or a
\f[CR]DataView\f[R] that contains the \f[CR]EncodedVideoChunk\f[R]\[cq]s
extra alpha channel data.
.RE
.TP
\f[B]error\f[R]
A callback which takes an \f[CR]Error\f[R] object as its only argument.
.RE
.SH EXAMPLES
In the following example a \f[CR]VideoEncoder\f[R] is created with the
two required callback functions, one to deal with the encoded frame and
the other to handle errors.
.IP
.EX
\f[B]const\f[R] videoEncoder = \f[B]new\f[R] VideoEncoder({
  output(chunk, metadata) {
    console.log(chunk.timestamp);
    console.log(chunk.byteLength);
    console.log(JSON.stringify(metadata));
  },
  error(error) {
    console.log(error);
  },
});
.EE
