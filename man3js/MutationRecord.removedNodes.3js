.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MUTATIONRECORD.REMOVEDNODES" "3JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.removedNodes \- MutationRecord: removedNodes property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]removedNodes\f[B]\f[R] is a \f[CR]NodeList\f[R] of nodes
removed from a target node by a mutation observed with a
\f[CR]MutationObserver\f[R].
.SH VALUE
A \f[CR]NodeList\f[R] containing the nodes removed from the target of
the mutation observed by the \f[CR]MutationObserver\f[R].
.SH EXAMPLES
.SS Observing removed nodes
In the following example, there are two buttons: one to add new nodes to
a target node, and one to remove them.
A \f[CR]MutationObserver\f[R] is used to observe the target node for
changes; when a change is detected, the observer calls a function,
\f[CR]logRemovedNodes()\f[R].
.PP
The \f[CR]logRemovedNodes()\f[R] function checks that the
MutationRecord\(cqs \f[CR]type\f[R] is \f[CR]childList\f[R], which means
that the target node\(cqs children have changed.
If the type is \f[CR]childlist\f[R] the function updates the total
number of nodes that have been removed.
However, note that clicking the \(lqAdd a node\(rq button will not
increment the total number of removed nodes, because in this case
\f[CR]record.removedNodes\f[R] will have a length of \f[CR]0\f[R].
.SS HTML
.IP
.EX
<\f[B]button\f[R] id=\(dqadd\-nodes\(dq>Add a node</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqremove\-nodes\(dq>Remove a node</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqreset\(dq>Reset</\f[B]button\f[R]>

<\f[B]pre\f[R] id=\(dqcounter\(dq>Total removed nodes: 0</\f[B]pre\f[R]>
<\f[B]div\f[R] id=\(dqtarget\(dq></\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] addNodes = document.querySelector(\(dq#add\-nodes\(dq);
\f[B]const\f[R] removeNodes = document.querySelector(\(dq#remove\-nodes\(dq);
\f[B]const\f[R] reset = document.querySelector(\(dq#reset\(dq);
\f[B]const\f[R] counter = document.querySelector(\(dq#counter\(dq);
\f[B]const\f[R] target = document.querySelector(\(dq#target\(dq);
\f[B]let\f[R] totalRemovedNodes = 0;

addNodes.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[B]const\f[R] newPara = document.createElement(\(dqp\(dq);
  newPara.textContent = \(gaCurrent time: ${Date.now()}\(ga;
  target.appendChild(newPara);
});

removeNodes.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[B]const\f[R] lastChild = target.lastChild;
  \f[B]if\f[R] (lastChild) {
    target.removeChild(lastChild);
  }
});

reset.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] self.location.reload());

\f[B]function\f[R] logRemovedNodes(records) {
  \f[B]for\f[R] (\f[B]const\f[R] record \f[B]of\f[R] records) {
    \f[I]// Check if the childlist of the target node has been mutated\f[R]
    \f[B]if\f[R] (record.type === \(dqchildList\(dq) {
      totalRemovedNodes = totalRemovedNodes + record.removedNodes.length;
      \f[I]// Log the number of nodes added\f[R]
      counter.textContent = \(gaTotal removed nodes: ${totalRemovedNodes}\(ga;
    }
  }
}

\f[B]const\f[R] observer = \f[B]new\f[R] MutationObserver(logRemovedNodes);
observer.observe(target, { childList: \f[B]true\f[R] });
.EE
.SS Result
