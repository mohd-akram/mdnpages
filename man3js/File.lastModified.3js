.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "File.lastModified" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
File.lastModified \- File: lastModified property
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The \f[B]\f[CB]lastModified\f[B]\f[R] read\-only property of the
\f[CR]File\f[R] interface provides the last modified date of the file as
the number of milliseconds since the Unix epoch (January 1, 1970 at
midnight).
Files without a known last modified date return the current date.
.SH VALUE
A number that represents the number of milliseconds since the Unix
epoch.
.SH EXAMPLES
The example below will loop through the files you choose, and print
whether each file was modified within the past year.
.SS HTML
.IP
.EX
<\f[B]input\f[R] type=\[dq]file\[dq] id=\[dq]filepicker\[dq] name=\[dq]fileList\[dq] multiple />
<\f[B]output\f[R] id=\[dq]output\[dq]></\f[B]output\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] output = document.getElementById(\[dq]output\[dq]);
\f[B]const\f[R] filepicker = document.getElementById(\[dq]filepicker\[dq]);

filepicker.addEventListener(\[dq]change\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] files = event.target.files;
  \f[B]const\f[R] now = \f[B]new\f[R] Date();
  output.textContent = \[dq]\[dq];

  \f[B]for\f[R] (\f[B]const\f[R] file \f[B]of\f[R] files) {
    \f[B]const\f[R] date = \f[B]new\f[R] Date(file.lastModified);
    \f[I]// true if the file hasn\[aq]t been modified for more than 1 year\f[R]
    \f[B]const\f[R] stale = now.getTime() \- file.lastModified > 31_536_000_000;
    output.textContent += \[ga]${file.name} is ${
      stale ? \[dq]stale\[dq] : \[dq]fresh\[dq]
    } (${date}).\[rs]n\[ga];
  }
});
.EE
.SS Result
.SS Dynamically created files
If a File is created dynamically, the last modified time can be supplied
in the \f[CR]new File()\f[R] constructor function.
If it is missing, \f[CR]lastModified\f[R] inherits the current time from
\f[CR]Date.now()\f[R] at the moment the \f[CR]File\f[R] object gets
created.
.IP
.EX
\f[B]const\f[R] fileWithDate = \f[B]new\f[R] File([], \[dq]file.bin\[dq], {
  lastModified: \f[B]new\f[R] Date(2017, 1, 1),
});
console.log(fileWithDate.lastModified); \f[I]// returns 1485903600000\f[R]

\f[B]const\f[R] fileWithoutDate = \f[B]new\f[R] File([], \[dq]file.bin\[dq]);
console.log(fileWithoutDate.lastModified); \f[I]// returns current time\f[R]
.EE
.SH REDUCED TIME PRECISION
To offer protection against timing attacks and fingerprinting, the
precision of \f[CR]someFile.lastModified\f[R] might get rounded
depending on browser settings.
In Firefox, the \f[CR]privacy.reduceTimerPrecision\f[R] preference is
enabled by default and defaults to 20us in Firefox 59; in 60 it will be
2ms.
.IP
.EX
\f[I]// reduced time precision (2ms) in Firefox 60\f[R]
someFile.lastModified;
\f[I]// 1519211809934\f[R]
\f[I]// 1519211810362\f[R]
\f[I]// 1519211811670\f[R]
\f[I]// \&...\f[R]

\f[I]// reduced time precision with \[ga]privacy.resistFingerprinting\[ga] enabled\f[R]
someFile.lastModified;
\f[I]// 1519129853500\f[R]
\f[I]// 1519129858900\f[R]
\f[I]// 1519129864400\f[R]
\f[I]// \&...\f[R]
.EE
.PP
In Firefox, if you enable \f[CR]privacy.resistFingerprinting\f[R], the
precision will be 100ms or the value of
\f[CR]privacy.resistFingerprinting.reduceTimerPrecision.microseconds\f[R],
whichever is larger.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]File\f[R]
