.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Number.isNaN" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.isNaN \- Number.isNaN()
.SH SYNOPSIS
The \f[B]\f[CB]Number.isNaN()\f[B]\f[R] static method determines whether
the passed value is the number value \f[CR]NaN\f[R], and returns
\f[CR]false\f[R] if the input is not of the Number type.
It is a more robust version of the original, global \f[CR]isNaN()\f[R]
function.
.SH SYNTAX
.IP
.EX
Number.isNaN(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
The value to be tested for \f[CR]NaN\f[R].
.SS Return value
The boolean value \f[CR]true\f[R] if the given value is a number with
value \f[CR]NaN\f[R].
Otherwise, \f[CR]false\f[R].
.SH DESCRIPTION
The function \f[CR]Number.isNaN()\f[R] provides a convenient way to
check for equality with \f[CR]NaN\f[R].
Note that you cannot test for equality with \f[CR]NaN\f[R] using either
the \f[CR]==\f[R] or \f[CR]===\f[R] operators, because unlike all other
value comparisons in JavaScript, these evaluate to \f[CR]false\f[R]
whenever one operand is \f[CR]NaN\f[R], even if the other operand is
also \f[CR]NaN\f[R].
.PP
Since \f[CR]x !== x\f[R] is only true for \f[CR]NaN\f[R] among all
possible JavaScript values, \f[CR]Number.isNaN(x)\f[R] can also be
replaced with a test for \f[CR]x !== x\f[R], despite the latter being
less readable.
.PP
As opposed to the global \f[CR]isNaN()\f[R] function, the
\f[CR]Number.isNaN()\f[R] method doesn\[cq]t force\-convert the
parameter to a number.
This makes it safe to pass values that would normally convert to
\f[CR]NaN\f[R] but aren\[cq]t actually the same value as \f[CR]NaN\f[R].
This also means that only values of the Number type that are also
\f[CR]NaN\f[R] return \f[CR]true\f[R].
.SH EXAMPLES
.SS Using isNaN()
.IP
.EX
Number.isNaN(\f[B]NaN\f[R]); \f[I]// true\f[R]
Number.isNaN(Number.NaN); \f[I]// true\f[R]
Number.isNaN(0 / 0); \f[I]// true\f[R]
Number.isNaN(37); \f[I]// false\f[R]
.EE
.SS Difference between Number.isNaN() and global isNaN()
\f[CR]Number.isNaN()\f[R] doesn\[cq]t attempt to convert the parameter
to a number, so non\-numbers always return \f[CR]false\f[R].
The following are all \f[CR]false\f[R]:
.IP
.EX
Number.isNaN(\[dq]NaN\[dq]);
Number.isNaN(\f[B]undefined\f[R]);
Number.isNaN({});
Number.isNaN(\[dq]blabla\[dq]);
Number.isNaN(\f[B]true\f[R]);
Number.isNaN(\f[B]null\f[R]);
Number.isNaN(\[dq]37\[dq]);
Number.isNaN(\[dq]37.37\[dq]);
Number.isNaN(\[dq]\[dq]);
Number.isNaN(\[dq] \[dq]);
.EE
.PP
The global \f[CR]isNaN()\f[R] coerces its parameter to a number:
.IP
.EX
isNaN(\[dq]NaN\[dq]); \f[I]// true\f[R]
isNaN(\f[B]undefined\f[R]); \f[I]// true\f[R]
isNaN({}); \f[I]// true\f[R]
isNaN(\[dq]blabla\[dq]); \f[I]// true\f[R]
isNaN(\f[B]true\f[R]); \f[I]// false, this is coerced to 1\f[R]
isNaN(\f[B]null\f[R]); \f[I]// false, this is coerced to 0\f[R]
isNaN(\[dq]37\[dq]); \f[I]// false, this is coerced to 37\f[R]
isNaN(\[dq]37.37\[dq]); \f[I]// false, this is coerced to 37.37\f[R]
isNaN(\[dq]\[dq]); \f[I]// false, this is coerced to 0\f[R]
isNaN(\[dq] \[dq]); \f[I]// false, this is coerced to 0\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-number
Polyfill of \f[CR]Number.isNaN\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Number\f[R]
.IP \[bu] 2
\f[CR]isNaN()\f[R]
