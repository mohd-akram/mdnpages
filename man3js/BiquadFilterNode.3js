'\" t
.\" Automatically generated by Pandoc 3.4
.\"
.TH "BiquadFilterNode" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BiquadFilterNode \- BiquadFilterNode
.SH SYNOPSIS
The \f[CR]BiquadFilterNode\f[R] interface represents a simple low\-order
filter, and is created using the
\f[CR]BaseAudioContext/createBiquadFilter\f[R] method.
It is an \f[CR]AudioNode\f[R] that can represent different kinds of
filters, tone control devices, and graphic equalizers.
A \f[CR]BiquadFilterNode\f[R] always has exactly one input and one
output.
.PP
.TS
tab(@);
l l.
T{
Number of inputs
T}@T{
\f[CR]1\f[R]
T}
T{
Number of outputs
T}@T{
\f[CR]1\f[R]
T}
T{
Channel count mode
T}@T{
\f[CR]\[dq]max\[dq]\f[R]
T}
T{
Channel count
T}@T{
\f[CR]2\f[R] (not used in the default count mode)
T}
T{
Channel interpretation
T}@T{
\f[CR]\[dq]speakers\[dq]\f[R]
T}
.TE
.SH CONSTRUCTOR
.TP
\f[B]BiquadFilterNode()\f[R]
Creates a new instance of a \f[CR]BiquadFilterNode\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent, \f[CI]AudioNode\f[I]\f[R].
.RS
.PP
\f[B]Note:\f[R] Though the \f[CR]AudioParam\f[R] objects returned are
read\-only, the values they represent are not.
.RE
.TP
\f[B]BiquadFilterNode.frequency\f[R] \f[I](read\-only)\f[R]
An a\-rate \f[CR]AudioParam\f[R], a double representing a frequency in
the current filtering algorithm measured in hertz (Hz).
.TP
\f[B]BiquadFilterNode.detune\f[R] \f[I](read\-only)\f[R]
An a\-rate \f[CR]AudioParam\f[R] representing detuning of the frequency
in \c
.UR https://en.wikipedia.org/wiki/Cent_%28music%29
cents
.UE \c
\&.
.TP
\f[B]BiquadFilterNode.Q\f[R] \f[I](read\-only)\f[R]
An a\-rate \f[CR]AudioParam\f[R], a double representing a \c
.UR https://en.wikipedia.org/wiki/Q_factor
Q factor
.UE \c
, or \f[I]quality factor\f[R].
.TP
\f[B]BiquadFilterNode.gain\f[R] \f[I](read\-only)\f[R]
An a\-rate \f[CR]AudioParam\f[R], a double representing the \c
.UR https://en.wikipedia.org/wiki/Gain
gain
.UE \c
\ used in the current filtering algorithm.
.TP
\f[B]BiquadFilterNode.type\f[R]
A string value defining the kind of filtering algorithm the node is
implementing.
.RS
.PP
The meaning of the different parameters depending on the type of the
filter (detune has the same meaning regardless, so isn\[aq]t listed
below)
.TS
tab(@);
l l l l l.
T{
\f[CR]type\f[R]
T}@T{
Description
T}@T{
\f[CR]frequency\f[R]
T}@T{
\f[CR]Q\f[R]
T}@T{
\f[CR]gain\f[R]
T}
_
T{
\f[CR]lowpass\f[R]
T}@T{
Standard second\-order resonant lowpass filter with 12dB/octave rolloff.
Frequencies below the cutoff pass through; frequencies above it are
attenuated.
T}@T{
The cutoff frequency.
T}@T{
Indicates how peaked the frequency is around the cutoff.
The greater the value is, the greater is the peak.
T}@T{
\f[I]Not used\f[R]
T}
T{
\f[CR]highpass\f[R]
T}@T{
Standard second\-order resonant highpass filter with 12dB/octave
rolloff.
Frequencies below the cutoff are attenuated; frequencies above it pass
through.
T}@T{
The cutoff frequency.
T}@T{
Indicates how peaked the frequency is around the cutoff.
The greater the value, the greater the peak.
T}@T{
\f[I]Not used\f[R]
T}
T{
\f[CR]bandpass\f[R]
T}@T{
Standard second\-order bandpass filter.
Frequencies outside the given range of frequencies are attenuated; the
frequencies inside it pass through.
T}@T{
The center of the range of frequencies.
T}@T{
Controls the width of the frequency band.
The greater the \f[CR]Q\f[R] value, the smaller the frequency band.
T}@T{
\f[I]Not used\f[R]
T}
T{
\f[CR]lowshelf\f[R]
T}@T{
Standard second\-order lowshelf filter.
Frequencies lower than the frequency get a boost, or an attenuation;
frequencies over it are unchanged.
T}@T{
The upper limit of the frequencies getting a boost or an attenuation.
T}@T{
\f[I]Not used\f[R]
T}@T{
The boost, in dB, to be applied; if negative, it will be an attenuation.
T}
T{
\f[CR]highshelf\f[R]
T}@T{
Standard second\-order highshelf filter.
Frequencies higher than the frequency get a boost or an attenuation;
frequencies lower than it are unchanged.
T}@T{
The lower limit of the frequencies getting a boost or an attenuation.
T}@T{
\f[I]Not used\f[R]
T}@T{
The boost, in dB, to be applied; if negative, it will be an attenuation.
T}
T{
\f[CR]peaking\f[R]
T}@T{
Frequencies inside the range get a boost or an attenuation; frequencies
outside it are unchanged.
T}@T{
The middle of the frequency range getting a boost or an attenuation.
T}@T{
Controls the width of the frequency band.
The greater the \f[CR]Q\f[R] value, the smaller the frequency band.
T}@T{
The boost, in dB, to be applied; if negative, it will be an attenuation.
T}
T{
\f[CR]notch\f[R]
T}@T{
Standard \c
.UR https://en.wikipedia.org/wiki/Band-stop_filter
notch
.UE \c
\ filter, also called a \f[I]band\-stop\f[R] or
\f[I]band\-rejection\f[R] filter.
It is the opposite of a bandpass filter: frequencies outside the give
range of frequencies pass through; frequencies inside it are attenuated.
T}@T{
The center of the range of frequencies.
T}@T{
Controls the width of the frequency band.
The greater the \f[CR]Q\f[R] value, the smaller the frequency band.
T}@T{
\f[I]Not used\f[R]
T}
T{
\f[CR]allpass\f[R]
T}@T{
Standard second\-order \c
.UR https://en.wikipedia.org/wiki/All-pass_filter#Digital_Implementation
allpass
.UE \c
\ filter.
It lets all frequencies through, but changes the phase\-relationship
between the various frequencies.
T}@T{
The frequency with the maximal \c
.UR https://en.wikipedia.org/wiki/Group_delay_and_phase_delay
group delay
.UE \c
, that is, the frequency where the center of the phase transition
occurs.
T}@T{
Controls how sharp the transition is at the medium frequency.
The larger this parameter is, the sharper and larger the transition will
be.
T}@T{
\f[I]Not used\f[R]
T}
.TE
.RE
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]AudioNode\f[I]\f[R].
.TP
\f[B]BiquadFilterNode.getFrequencyResponse()\f[R]
From the current filter parameter settings this method calculates the
frequency response for frequencies specified in the provided array of
frequencies.
.SH EXAMPLE
See \f[CR]AudioContext.createBiquadFilter\f[R] for example code that
shows how to use an \f[CR]AudioContext\f[R] to create a Biquad filter
node.
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
