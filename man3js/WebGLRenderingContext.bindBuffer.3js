.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBGLRENDERINGCONTEXT.BINDBUFFER" "3JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.bindBuffer \- WebGLRenderingContext: bindBuffer()
method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGLRenderingContext.bindBuffer()\f[B]\f[R] method of
the WebGL API binds a given \f[CR]WebGLBuffer\f[R] to a target.
.SH SYNTAX
.IP
.EX
bindBuffer(target, buffer)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A \f[CR]GLenum\f[R] specifying the binding point (target).
Possible values:
.RS
.TP
\f[B]gl.ARRAY_BUFFER\f[R]
Buffer containing vertex attributes, such as vertex coordinates, texture
coordinate data, or vertex color data.
.TP
\f[B]gl.ELEMENT_ARRAY_BUFFER\f[R]
Buffer used for element indices.
.PP
When using a WebGL 2 context, the following values are available
additionally:
.TP
\f[B]gl.COPY_READ_BUFFER\f[R]
Buffer for copying from one buffer object to another.
.TP
\f[B]gl.COPY_WRITE_BUFFER\f[R]
Buffer for copying from one buffer object to another.
.TP
\f[B]gl.TRANSFORM_FEEDBACK_BUFFER\f[R]
Buffer for transform feedback operations.
.TP
\f[B]gl.UNIFORM_BUFFER\f[R]
Buffer used for storing uniform blocks.
.TP
\f[B]gl.PIXEL_PACK_BUFFER\f[R]
Buffer used for pixel transfer operations.
.TP
\f[B]gl.PIXEL_UNPACK_BUFFER\f[R]
Buffer used for pixel transfer operations.
.RE
.TP
\f[B]buffer\f[R]
A \f[CR]WebGLBuffer\f[R] to bind.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
Only one target can be bound to a given \f[CR]WebGLBuffer\f[R].
An attempt to bind the buffer to another target will throw an
\f[CR]INVALID_OPERATION\f[R] error and the current buffer binding will
remain the same.
.PP
A \f[CR]WebGLBuffer\f[R] which has been marked for deletion with
\f[CR]deleteBuffer\f[R] cannot be (re\-)bound.
An attempt to do so will generate an \f[CR]INVALID_OPERATION\f[R] error,
and the current binding will remain untouched.
.SH EXAMPLES
.SS Binding a buffer to a target
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] gl = canvas.getContext(\(dqwebgl\(dq);
\f[B]const\f[R] buffer = gl.createBuffer();

gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
.EE
.SS Getting current bindings
To check the current buffer bindings, query the
\f[CR]ARRAY_BUFFER_BINDING\f[R] and
\f[CR]ELEMENT_ARRAY_BUFFER_BINDING\f[R] constants.
.IP
.EX
gl.getParameter(gl.ARRAY_BUFFER_BINDING);
gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]WebGLRenderingContext.createBuffer()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.deleteBuffer()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.isBuffer()\f[R]
.IP \(bu 2
Other buffers: \f[CR]WebGLFramebuffer\f[R], \f[CR]WebGLRenderbuffer\f[R]
