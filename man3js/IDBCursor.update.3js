.\" Automatically generated by Pandoc 3.4
.\"
.TH "IDBCursor.update" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBCursor.update \- IDBCursor: update() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]update()\f[B]\f[R] method of the \f[CR]IDBCursor\f[R]
interface returns an \f[CR]IDBRequest\f[R] object, and, in a separate
thread, updates the value at the current position of the cursor in the
object store.
If the cursor points to a record that has just been deleted, a new
record is created.
.PP
Be aware that you can\[cq]t call \f[CR]update()\f[R] (or
\f[CR]IDBCursor.delete()\f[R]) on cursors obtained from
\f[CR]IDBIndex.openKeyCursor()\f[R].
For such needs, you have to use \f[CR]IDBIndex.openCursor()\f[R]
instead.
.SH SYNTAX
.IP
.EX
update(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
The new value to be stored at the current position.
.SS Return value
An \f[CR]IDBRequest\f[R] object on which subsequent events related to
this operation are fired.
.PP
If the operation is successful, the value of the request\[cq]s
\f[CR]result\f[R] property is the key for the updated record.
.SS Exceptions
This method may raise a \f[CR]DOMException\f[R] of one of the following
types:
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if this IDBCursor\[cq]s transaction is inactive.
.TP
\f[B]ReadOnlyError\f[R] \f[B]DOMException\f[R]
Thrown if the transaction mode is read\-only.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the cursor was created using
\f[CR]IDBindex.openKeyCursor\f[R], is currently being iterated, or has
iterated past its end.
.TP
\f[B]DataError\f[R] \f[B]DOMException\f[R]
Thrown if the underlying object store uses in\-line keys and the
property in the value at the object store\[cq]s key path does not match
the key in this cursor\[cq]s position.
.TP
\f[B]DataCloneError\f[R] \f[B]DOMException\f[R]
Thrown if the data being stored could not be cloned by the internal
structured cloning algorithm.
.SH EXAMPLES
In this simple fragment we create a transaction, retrieve an object
store, then use a cursor to iterate through all the records in the
object store.
If the \f[CR]albumTitle\f[R] of the current cursor is \[lq]A farewell to
kings\[rq], we update year the album was released using
\f[CR]const request = cursor.update();\f[R].
.PP
Note that you cannot change primary keys using
\f[CR]cursor.update()\f[R], hence us not changing the album title; this
would ruin the integrity of the data.
In such a situation, you would have to delete the record altogether and
then add a new one using \f[CR]IDBObjectStore.add\f[R].
Note also that you can\[cq]t directly put \f[CR]cursor.value\f[R] into
an update call, hence the below example using an intermediary
\f[CR]updateData\f[R] variable.
.PP
The cursor does not require us to select the data based on a key; we can
just grab all of it.
Also note that in each iteration of the loop, you can grab data from the
current record under the cursor object using
\f[CR]cursor.value.foo\f[R].
For a complete working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/indexeddb-examples/idbcursor
IDBCursor example
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/indexeddb-examples/idbcursor/
View the example live
.UE \c
).
.IP
.EX
\f[B]function\f[R] updateResult() {
  list.textContent = \[dq]\[dq];
  \f[B]const\f[R] transaction = db.transaction([\[dq]rushAlbumList\[dq]], \[dq]readwrite\[dq]);
  \f[B]const\f[R] objectStore = transaction.objectStore(\[dq]rushAlbumList\[dq]);

  objectStore.openCursor().onsuccess = (event) \f[B]=>\f[R] {
    \f[B]const\f[R] cursor = event.target.result;
    \f[B]if\f[R] (cursor) {
      \f[B]if\f[R] (cursor.value.albumTitle === \[dq]A farewell to kings\[dq]) {
        \f[B]const\f[R] updateData = cursor.value;

        updateData.year = 2050;
        \f[B]const\f[R] request = cursor.update(updateData);
        request.onsuccess = () \f[B]=>\f[R] {
          console.log(\[dq]A better album year?\[dq]);
        };
      }

      \f[B]const\f[R] listItem = document.createElement(\[dq]li\[dq]);
      listItem.textContent = \[ga]${cursor.value.albumTitle}, ${cursor.value.year}\[ga];
      list.appendChild(listItem);
      cursor.continue();
    } \f[B]else\f[R] {
      console.log(\[dq]Entries displayed.\[dq]);
    }
  };
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
