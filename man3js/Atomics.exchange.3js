.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ATOMICS.EXCHANGE" "3JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Atomics.exchange \- Atomics.exchange()
.SH SYNOPSIS
The \f[B]\f[CB]Atomics.exchange()\f[B]\f[R] static method exchanges a
given value at a given position in the array and returns the old value
at that position.
This atomic operation guarantees that no other write happens between the
read of the old value and the write of the new value.
.IP
.EX
\f[I]// Create a SharedArrayBuffer with a size in bytes\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] SharedArrayBuffer(16);
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array(buffer);
uint8[0] = 5;

console.log(Atomics.load(uint8, 0));
\f[I]// Expected output: 5\f[R]

Atomics.exchange(uint8, 0, 2); \f[I]// Returns 5\f[R]
console.log(Atomics.load(uint8, 0));
\f[I]// Expected output: 2\f[R]
.EE
.SH SYNTAX
.IP
.EX
Atomics.exchange(typedArray, index, value)
.EE
.SS Parameters
.TP
\f[B]typedArray\f[R]
An integer typed array.
One of \f[CR]Int8Array\f[R], \f[CR]Uint8Array\f[R],
\f[CR]Int16Array\f[R], \f[CR]Uint16Array\f[R], \f[CR]Int32Array\f[R],
\f[CR]Uint32Array\f[R], \f[CR]BigInt64Array\f[R], or
\f[CR]BigUint64Array\f[R].
.TP
\f[B]index\f[R]
The position in the \f[CR]typedArray\f[R] to exchange a
\f[CR]value\f[R].
.TP
\f[B]value\f[R]
The number to exchange.
.SS Return value
The old value at the given position (\f[CR]typedArray[index]\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]typedArray\f[R] is not one of the allowed integer types.
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]index\f[R] is out of bounds in the
\f[CR]typedArray\f[R].
.SH EXAMPLES
.SS Using exchange()
.IP
.EX
\f[B]const\f[R] sab = \f[B]new\f[R] SharedArrayBuffer(1024);
\f[B]const\f[R] ta = \f[B]new\f[R] Uint8Array(sab);

Atomics.exchange(ta, 0, 12); \f[I]// returns 0, the old value\f[R]
Atomics.load(ta, 0); \f[I]// 12\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Atomics\f[R]
.IP \(bu 2
\f[CR]Atomics.compareExchange()\f[R]
