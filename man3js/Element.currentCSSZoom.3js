.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Element.currentCSSZoom" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.currentCSSZoom \- Element: currentCSSZoom property
.SH SYNOPSIS
The \f[B]\f[CB]currentCSSZoom\f[B]\f[R] read\-only property of the
\f[CR]Element\f[R] interface provides the \[lq]effective\[rq] CSS
\f[CR]zoom\f[R] of an element, taking into account the zoom applied to
the element and all its parent elements.
.PP
The value calculated by multiplying the CSS \f[CR]zoom\f[R] values of
the element and all of its parents.
For example, if three elements with zoom values of 2, 1.5, and 3, are
nested within each other, the most deeply nested element will have a
\f[CR]currentCSSZoom\f[R] value of 9.
If the element doesn\[cq]t have a CSS box, for example because
\f[CR]display: none\f[R] is set on the element or one of its parents,
then the \f[CR]currentCSSZoom\f[R] is set to 1.
.PP
Note that some methods, such as
\f[CR]Element.getBoundingClientRect()\f[R], return dimensions and
position that are relative to the viewport, and hence include the
effects of CSS \f[CR]zoom\f[R].
Other properties and methods return values that are relative to the
element itself, and do not include the effects of zooming.
These include, for example, \f[CR]client*\f[R] properties such as
\f[CR]Element.clientHeight\f[R], \f[CR]scroll*()\f[R] methods like
\f[CR]Element.scroll()\f[R], and \f[CR]offset*\f[R] properties such as
\f[CR]HTMLElement.offsetHeight\f[R].
The \f[CR]currentCSSZoom\f[R] property can be used to scale these values
to adjust for the effects of zooming.
.SH VALUE
A number indicating the effective CSS zoom on the element, or 1 if the
element is not rendered.
.SH EXAMPLES
This example demonstrates how the \f[CR]currentCSSZoom\f[R] is
calculated.
.PP
First we define a nested structure of \f[CR]<div>\f[R] elements where
the \[lq]parent\[rq] is unzoomed and contains a nested element
\[lq]child1\[rq] that has \f[CR]zoom: 2\f[R] applied, which in turn
contains a nested element \[lq]child2\[rq] with \f[CR]zoom: 3\f[R]
applied.
The \[lq]child2\[rq] element contains two nested elements, one of which
is not rendered, and neither of which have the zoom property applied.
.IP
.EX
<\f[B]div\f[R] id=\[dq]parent\[dq]>
  parent
  <\f[B]div\f[R] style=\[dq]zoom: 2\[dq] id=\[dq]child1\[dq]>
    child1 (zoom: 2)
    <\f[B]div\f[R] style=\[dq]zoom: 3\[dq] id=\[dq]child2\[dq]>
      child2 (zoom: 3)
      <\f[B]div\f[R] id=\[dq]child3_rendered\[dq]>child3_rendered</\f[B]div\f[R]>
      <\f[B]div\f[R] style=\[dq]display: none\[dq] id=\[dq]child3_not\-rendered\[dq]>
        child3_not\-rendered
      </\f[B]div\f[R]>
    </\f[B]div\f[R]>
  </\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.PP
The JavaScript code logs the zoom value applied at each level along with
its \f[CR]currentCSSZoom\f[R] value.
.IP
.EX
\f[B]if\f[R] (\[dq]currentCSSZoom\[dq] \f[B]in\f[R] Element.prototype) {
  \f[B]const\f[R] parent = document.querySelector(\[dq]#parent\[dq]);
  log(\[ga]parent (unzoomed). currentCSSZoom: ${parent.currentCSSZoom}\[ga]);
  \f[B]const\f[R] child1 = document.querySelector(\[dq]#child1\[dq]);
  log(\[ga]child1 (zoom: 2). currentCSSZoom: ${child1.currentCSSZoom}\[ga]);
  \f[B]const\f[R] child2 = document.querySelector(\[dq]#child2\[dq]);
  log(\[ga]child2 (zoom: 2). currentCSSZoom: ${child2.currentCSSZoom}\[ga]);
  \f[B]const\f[R] top_child3_rendered = document.querySelector(\[dq]#child3_rendered\[dq]);
  log(
    \[ga]child3_rendered (unzoomed). currentCSSZoom: ${child3_rendered.currentCSSZoom}\[ga],
  );
  \f[B]const\f[R] top_child3_notRendered = document.querySelector(\[dq]#child3_not\-rendered\[dq]);
  log(
    \[ga]child3_notRendered (not rendered): ${child3_notRendered.currentCSSZoom}\[ga],
  );
} \f[B]else\f[R] {
  log(\[dq]Element.currentCSSZoom not supported in this browser\[dq]);
}
.EE
.PP
The resulting rendered \f[CR]<div>\f[R] structure and log are shown
below.
First note that the parent, child1 and child2 have zoom levels 1, 2, and
3, respectively, and render at 1, 2 and 6 times the size of the parent
text.
This is reflected by the logged \f[CR]currentCSSZoom\f[R] values.
.PP
The \f[CR]<div>\f[R] with id \f[CR]child3_rendered\f[R] does not have
\f[CR]zoom\f[R] set but inherits the \f[CR]currentCSSZoom\f[R] value of
6 as shown in the log.
The final \f[CR]<div>\f[R] is not rendered and therefore has a
\f[CR]currentCSSZoom\f[R] value of 1.
.SH SEE ALSO
.IP \[bu] 2
CSS \f[CR]zoom\f[R]
