.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Intl.DateTimeFormat.format" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.DateTimeFormat.format \- Intl.DateTimeFormat.prototype.format()
.SH SYNOPSIS
The \f[B]\f[CB]format()\f[B]\f[R] method of
\f[CR]Intl.DateTimeFormat\f[R] instances formats a date according to the
locale and formatting options of this \f[CR]Intl.DateTimeFormat\f[R]
object.
.SH SYNTAX
.IP
.EX
format(date)
.EE
.SS Parameters
.TP
\f[B]date\f[R]
The date to format.
.SS Return value
A string representing the given \f[CR]date\f[R] formatted according to
the locale and formatting options of this \f[CR]Intl.DateTimeFormat\f[R]
object.
.SH EXAMPLES
.SS Using format
Use the \f[CR]format\f[R] getter function for formatting a single date,
here for Serbia:
.IP
.EX
\f[B]const\f[R] options = {
  weekday: \[dq]long\[dq],
  year: \[dq]numeric\[dq],
  month: \[dq]long\[dq],
  day: \[dq]numeric\[dq],
};
\f[B]const\f[R] dateTimeFormat = \f[B]new\f[R] Intl.DateTimeFormat(\[dq]sr\-RS\[dq], options);
console.log(dateTimeFormat.format(\f[B]new\f[R] Date()));
\f[I]// \[dq]недеља, 7. април 2013.\[dq]\f[R]
.EE
.SS Using format with map
Use the \f[CR]format\f[R] getter function for formatting all dates in an
array.
Note that the function is bound to the \f[CR]Intl.DateTimeFormat\f[R]
from which it was obtained, so it can be passed directly to
\f[CR]Array.prototype.map()\f[R].
.IP
.EX
\f[B]const\f[R] a = [\f[B]new\f[R] Date(2012, 8), \f[B]new\f[R] Date(2012, 11), \f[B]new\f[R] Date(2012, 3)];
\f[B]const\f[R] options = { year: \[dq]numeric\[dq], month: \[dq]long\[dq] };
\f[B]const\f[R] dateTimeFormat = \f[B]new\f[R] Intl.DateTimeFormat(\[dq]pt\-BR\[dq], options);
\f[B]const\f[R] formatted = a.map(dateTimeFormat.format);
console.log(formatted.join(\[dq]; \[dq]));
\f[I]// \[dq]setembro de 2012; dezembro de 2012; abril de 2012\[dq]\f[R]
.EE
.SS Avoid comparing formatted date values to static values
Most of the time, the formatting returned by \f[CR]format()\f[R] is
consistent.
However, this might change in the future and isn\[cq]t guaranteed for
all the languages \[em] output variations are by design and allowed by
the specification.
Most notably, the IE and Edge browsers insert bidirectional control
characters around dates, so the output text will flow properly when
concatenated with other text.
.PP
For this reason you cannot expect to be able to compare the results of
\f[CR]format()\f[R] to a static value:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]let\f[R] d = \f[B]new\f[R] Date(\[dq]2019\-01\-01T00:00:00.000000Z\[dq]);
\f[B]let\f[R] formattedDate = Intl.DateTimeFormat(\f[B]undefined\f[R], {
  year: \[dq]numeric\[dq],
  month: \[dq]numeric\[dq],
  day: \[dq]numeric\[dq],
  hour: \[dq]numeric\[dq],
  minute: \[dq]numeric\[dq],
  second: \[dq]numeric\[dq],
}).format(d);

\[dq]1.1.2019, 01:00:00\[dq] === formattedDate;
\f[I]// true in Firefox and others\f[R]
\f[I]// false in IE and Edge\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] See also this \c
.UR https://stackoverflow.com/questions/25574963/ies-tolocalestring-has-strange-characters-in-results
StackOverflow thread
.UE \c
\ for more details and examples.
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Intl.DateTimeFormat\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.toLocaleDateString()\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.toLocaleTimeString()\f[R]
