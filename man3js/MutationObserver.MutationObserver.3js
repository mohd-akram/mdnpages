.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MUTATIONOBSERVER.MUTATIONOBSERVER" "3JS" "November 11, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationObserver.MutationObserver \- MutationObserver:
MutationObserver() constructor
.SH SYNOPSIS
The DOM \f[B]\f[CB]MutationObserver()\f[B]\f[R] constructor \(em part of
the \f[CR]MutationObserver\f[R] interface \(em creates and returns a new
observer which invokes a specified callback when DOM events occur.
.PP
DOM observation does not begin immediately; the \f[CR]observe()\f[R]
method must be called first to establish which portion of the DOM to
watch and what kinds of changes to watch for.
.SH SYNTAX
.IP
.EX
new MutationObserver(callback)
.EE
.SS Parameters
.TP
\f[B]callback\f[R]
A function which will be called on each DOM change that qualifies given
the observed node or subtree and options.
.RS
.PP
The \f[CR]callback\f[R] function takes as input two parameters:
.IP "1." 3
An array of \f[CR]MutationRecord\f[R] objects, describing each change
that occurred.
.IP "2." 3
The \f[CR]MutationObserver\f[R] which invoked the \f[CR]callback\f[R].
This is most often used to disconnect the observer using
\f[CR]MutationObserver.disconnect()\f[R].
.PP
See the examples below for more details.
.RE
.SS Return value
A new \f[CR]MutationObserver\f[R] object, configured to call the
specified \f[CR]callback\f[R] when DOM mutations occur.
.SH EXAMPLES
.SS Observing child elements
This example has buttons to add an \f[CR]<li>\f[R] element to a list,
and to remove the first \f[CR]<li>\f[R] element from the list.
.PP
We use a \f[CR]MutationObserver\f[R] to be notified about changes to the
list.
In the callback, we log additions and removals, and as soon as the list
is empty, we disconnect the observer.
.PP
The \(lqReset example\(rq button resets the example to its original
state.
.SS HTML
.IP
.EX
<\f[B]button\f[R] id=\(dqadd\(dq>Add child</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqremove\(dq>Remove child</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqreset\(dq>Reset example</\f[B]button\f[R]>

<\f[B]ul\f[R] id=\(dqcontainer\(dq></\f[B]ul\f[R]>

<\f[B]pre\f[R] id=\(dqlog\(dq></\f[B]pre\f[R]>
.EE
.SS CSS
.IP
.EX
container,
log {
  \f[B]height\f[R]: 150px;
  \f[B]overflow\f[R]: scroll;
}

container li {
  \f[B]background\-color\f[R]: paleturquoise;
  \f[B]margin\f[R]: 0.5rem;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] add = document.querySelector(\(dq#add\(dq);
\f[B]const\f[R] remove = document.querySelector(\(dq#remove\(dq);
\f[B]const\f[R] reset = document.querySelector(\(dq#reset\(dq);
\f[B]const\f[R] container = document.querySelector(\(dq#container\(dq);
\f[B]const\f[R] log = document.querySelector(\(dq#log\(dq);

\f[B]let\f[R] namePrefix = 0;

add.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[B]const\f[R] newItem = document.createElement(\(dqli\(dq);
  newItem.textContent = \(gaitem ${namePrefix}\(ga;
  container.appendChild(newItem);
  namePrefix++;
});

remove.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[B]const\f[R] itemToRemove = document.querySelector(\(dqli\(dq);
  \f[B]if\f[R] (itemToRemove) {
    itemToRemove.parentNode.removeChild(itemToRemove);
  }
});

reset.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  document.location.reload();
});

\f[B]function\f[R] logChanges(records, observer) {
  \f[B]for\f[R] (\f[B]const\f[R] record \f[B]of\f[R] records) {
    \f[B]for\f[R] (\f[B]const\f[R] addedNode \f[B]of\f[R] record.addedNodes) {
      log.textContent = \(gaAdded: ${addedNode.textContent}\(rsn${log.textContent}\(ga;
    }
    \f[B]for\f[R] (\f[B]const\f[R] removedNode \f[B]of\f[R] record.removedNodes) {
      log.textContent = \(gaRemoved: ${removedNode.textContent}\(rsn${log.textContent}\(ga;
    }
    \f[B]if\f[R] (record.target.childNodes.length === 0) {
      log.textContent = \(gaDisconnected\(rsn${log.textContent}\(ga;
      observer.disconnect();
    }
    console.log(record.target.childNodes.length);
  }
}

\f[B]const\f[R] observerOptions = {
  childList: \f[B]true\f[R],
  subtree: \f[B]true\f[R],
};

\f[B]const\f[R] observer = \f[B]new\f[R] MutationObserver(logChanges);
observer.observe(container, observerOptions);
.EE
.SS Result
Try clicking \(lqAdd child\(rq to add list items, and \(lqRemove
child\(rq to remove them.
The observer callback logs additions and removals.
As soon as the list is empty, the observer logs a \(lqDisconnected\(rq
message and disconnects the observer.
.PP
The \(lqReset example\(rq button reloads the example so you can try it
again.
