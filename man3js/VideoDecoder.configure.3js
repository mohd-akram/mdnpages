.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "VideoDecoder.configure" "JS" "April 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
VideoDecoder.configure \- VideoDecoder: configure() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]configure()\f[B]\f[R] method of the
\f[CR]VideoDecoder\f[R] interface enqueues a control message to
configure the video decoder for decoding chunks.
.SH SYNTAX
.IP
.EX
configure(config)
.EE
.SS Parameters
.TP
\f[B]config\f[R]
An object containing the following members:
.RS
.TP
\f[B]codec\f[R]
A string containing a \c
.UR https://www.w3.org/TR/webcodecs-codec-registry/#video-codec-registry
valid codec string
.UE \c
\&.
See \[lq]codecs\[rq] parameter for details on codec string construction.
.TP
\f[B]description\f[R] \f[I](optional)\f[R]
An \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R], or a
\f[CR]DataView\f[R] containing a sequence of codec specific bytes,
commonly known as extradata.
.TP
\f[B]codedWidth\f[R] \f[I](optional)\f[R]
An integer representing the width of the \f[CR]VideoFrame\f[R] in
pixels, including any non\-visible padding, before any ratio
adjustments.
.TP
\f[B]codedHeight\f[R] \f[I](optional)\f[R]
An integer representing the height of the \f[CR]VideoFrame\f[R] in
pixels, including any non\-visible padding, before any ratio
adjustments.
.TP
\f[B]displayAspectWidth\f[R] \f[I](optional)\f[R]
An integer representing the horizontal dimension of the
\f[CR]VideoFrame\f[R] in pixels when displayed.
.TP
\f[B]displayAspectHeight\f[R] \f[I](optional)\f[R]
An integer representing the vertical dimension of the
\f[CR]VideoFrame\f[R] in pixels when displayed.
.TP
\f[B]colorSpace\f[R]
An object representing a \f[CR]VideoColorSpace\f[R], containing the
following members:
.RS
.TP
\f[B]primaries\f[R]
A string representing the color gamut of the video sample.
One of:
.RS
.IP \[bu] 2
\f[CR]\[dq]bt709\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]bt470bg\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]smpte170m\[dq]\f[R]
.RE
.TP
\f[B]transfer\f[R]
A string representing transfer characteristics.
One of:
.RS
.IP \[bu] 2
\f[CR]\[dq]bt709\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]smpte170m\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]iec61966\-2\-1\[dq]\f[R]
.RE
.TP
\f[B]matrix\f[R]
A string representing a matrix coefficient.
One of:
.RS
.IP \[bu] 2
\f[CR]\[dq]rgb\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]bt709\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]bt470bg\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]smpte170m\[dq]\f[R]
.RE
.RE
.TP
\f[B]hardwareAcceleration\f[R]
A hint as to the hardware acceleration method to use.
One of:
.RS
.IP \[bu] 2
\f[CR]\[dq]no\-preference\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]prefer\-hardware\[dq]\f[R]
.IP \[bu] 2
\f[CR]\[dq]prefer\-software\[dq]\f[R]
.RE
.TP
\f[B]optimizeForLatency\f[R]
A boolean.
If \f[CR]true\f[R] this is a hint that the selected decoder should be
optimized to minimize the number of \f[CR]EncodedVideoChunk\f[R] objects
that have to be decoded before a \f[CR]VideoFrame\f[R] is output.
.RE
.RS
.PP
\f[B]Note:\f[R] The registrations in the \c
.UR https://www.w3.org/TR/webcodecs-codec-registry/#audio-codec-registry
WebCodecs Codec Registry
.UE \c
\ link to a specification detailing whether and how to populate the
optional \f[CR]description\f[R] member.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the provided \f[CR]config\f[R] is invalid.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]state\f[R] is \f[CR]\[dq]closed\[dq]\f[R].
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if the provided \f[CR]config\f[R] is valid but the user agent
cannot provide a codec that can decode this profile.
.SH EXAMPLES
The following example creates a new \f[CR]VideoDecoder\f[R] and
configures it with the \f[CR]\[dq]vp8\[dq]\f[R] codec, a
\f[CR]codedWidth\f[R] of 640 pixels and a \f[CR]codedHeight\f[R] of 480
pixels.
.IP
.EX
\f[B]const\f[R] init = {
  output: handleFrame,
  error: (e) \f[B]=>\f[R] {
    console.log(e.message);
  },
};

\f[B]const\f[R] config = {
  codec: \[dq]vp8\[dq],
  codedWidth: 640,
  codedHeight: 480,
};

\f[B]let\f[R] decoder = \f[B]new\f[R] VideoDecoder(init);
decoder.configure(config);
.EE
