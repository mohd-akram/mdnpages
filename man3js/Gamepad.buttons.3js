.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Gamepad.buttons" "JS" "March 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Gamepad.buttons \- Gamepad: buttons property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]Gamepad.buttons\f[B]\f[R] property of the
\f[CR]Gamepad\f[R] interface returns an array of
\f[CR]gamepadButton\f[R] objects representing the buttons present on the
device.
.PP
Each entry in the array is 0 if the button is not pressed, and non\-zero
(typically 1.0) if the button is pressed.
Each \f[CR]gamepadButton\f[R] object has two properties:
\f[CR]pressed\f[R] and \f[CR]value\f[R]:
.IP \[bu] 2
The \f[CR]pressed\f[R] property is a boolean indicating whether the
button is currently pressed (\f[CR]true\f[R]) or unpressed
(\f[CR]false\f[R]).
.IP \[bu] 2
The \f[CR]value\f[R] property is a floating point value used to enable
representing analog buttons, such as the triggers on many modern
gamepads.
The values are normalized to the range 0.0 \[en] 1.0, with 0.0
representing a button that is not pressed, and 1.0 representing a button
that is fully pressed.
.SH VALUE
An array of \f[CR]gamepadButton\f[R] objects.
.SH EXAMPLES
The following code is taken from my Gamepad API button demo (you can \c
.UR https://chrisdavidmills.github.io/gamepad-buttons/
view the demo live
.UE \c
, and \c
.UR https://github.com/chrisdavidmills/gamepad-buttons/tree/master
find the source code
.UE \c
\ on GitHub.)
Note the code fork \[em] in Chrome \f[CR]Navigator.getGamepads\f[R]
needs a \f[CR]webkit\f[R] prefix and the button values are stores as an
array of double values, whereas in Firefox
\f[CR]Navigator.getGamepads\f[R] doesn\[cq]t need a prefix, and the
button values are stored as an array of \f[CR]GamepadButton\f[R]
objects; it is the \f[CR]GamepadButton.value\f[R] or
\f[CR]GamepadButton.pressed\f[R] properties of these we need to access,
depending on what type of buttons they are.
In this simple example I\[cq]ve just allowed either.
.IP
.EX
\f[B]function\f[R] gameLoop() {
  \f[B]let\f[R] a = 0;
  \f[B]let\f[R] b = 0;
  \f[B]if\f[R] (navigator.webkitGetGamepads) {
    \f[B]const\f[R] gp = navigator.webkitGetGamepads()[0];

    \f[B]if\f[R] (gp.buttons[0] === 1) {
      b\-\-;
    } \f[B]else\f[R] \f[B]if\f[R] (gp.buttons[1] === 1) {
      a++;
    } \f[B]else\f[R] \f[B]if\f[R] (gp.buttons[2] === 1) {
      b++;
    } \f[B]else\f[R] \f[B]if\f[R] (gp.buttons[3] === 1) {
      a\-\-;
    }
  } \f[B]else\f[R] {
    \f[B]const\f[R] gp = navigator.getGamepads()[0];

    \f[B]if\f[R] (gp.buttons[0].value > 0 || gp.buttons[0].pressed) {
      b\-\-;
    } \f[B]else\f[R] \f[B]if\f[R] (gp.buttons[1].value > 0 || gp.buttons[1].pressed) {
      a++;
    } \f[B]else\f[R] \f[B]if\f[R] (gp.buttons[2].value > 0 || gp.buttons[2].pressed) {
      b++;
    } \f[B]else\f[R] \f[B]if\f[R] (gp.buttons[3].value > 0 || gp.buttons[3].pressed) {
      a\-\-;
    }
  }

  ball.style.left = \[ga]${a * 2}px\[ga];
  ball.style.top = \[ga]${b * 2}px\[ga];

  \f[B]const\f[R] start = rAF(gameLoop);
}
.EE
.SH SEE ALSO
Using the Gamepad API
