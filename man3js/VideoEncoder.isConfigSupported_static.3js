.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "VideoEncoder.isConfigSupported_static" "JS" "May 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
VideoEncoder.isConfigSupported_static \- VideoEncoder:
isConfigSupported() static method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]isConfigSupported()\f[B]\f[R] static method of the
\f[CR]VideoEncoder\f[R] interface checks if \f[CR]VideoEncoder\f[R] can
be successfully configured with the given config.
.SH SYNTAX
.IP
.EX
VideoEncoder.isConfigSupported(config)
.EE
.SS Parameters
.TP
\f[B]config\f[R]
The dictionary object accepted by \f[CR]VideoEncoder.configure\f[R]
.SS Return value
A \f[CR]Promise\f[R] that resolves with an object containing the
following members:
.TP
\f[B]supported\f[R]
A boolean value which is \f[CR]true\f[R] if the given config is
supported by the encoder.
.TP
\f[B]config\f[R]
A copy of the given config with all the fields recognized by the
encoder.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the provided \f[CR]config\f[R] is invalid; that is, if
doesn\[cq]t have required values (such as an empty \f[CR]codec\f[R]
field) or has invalid values (such as a negative \f[CR]width\f[R])
.SH EXAMPLES
The following example tests if the browser supports accelerated and
un\-accelerated versions of several video codecs.
.IP
.EX
\f[B]const\f[R] codecs = [\[dq]avc1.42001E\[dq], \[dq]vp8\[dq], \[dq]vp09.00.10.08\[dq], \[dq]av01.0.04M.08\[dq]];
\f[B]const\f[R] accelerations = [\[dq]prefer\-hardware\[dq], \[dq]prefer\-software\[dq]];

\f[B]const\f[R] configs = [];
\f[B]for\f[R] (\f[B]const\f[R] codec \f[B]of\f[R] codecs) {
  \f[B]for\f[R] (\f[B]const\f[R] acceleration \f[B]of\f[R] accelerations) {
    configs.push({
      codec,
      hardwareAcceleration: acceleration,
      width: 1280,
      height: 720,
      bitrate: 2_000_000,
      bitrateMode: \[dq]constant\[dq],
      framerate: 30,
      not_supported_field: 123,
    });
  }
}

\f[B]for\f[R] (\f[B]const\f[R] config \f[B]of\f[R] configs) {
  \f[B]const\f[R] support = \f[B]await\f[R] VideoEncoder.isConfigSupported(config);
  console.log(
    \[ga]VideoEncoder\[aq]s config ${JSON.stringify(support.config)} support: ${
      support.supported
    }\[ga],
  );
}
.EE
