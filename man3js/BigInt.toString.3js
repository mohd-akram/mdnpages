.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "BIGINT.TOSTRING" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BigInt.toString \- BigInt.prototype.toString()
.SH SYNOPSIS
The \f[B]\f[CB]toString()\f[B]\f[R] method of \f[CR]BigInt\f[R] values
returns a string representing the specified \f[CR]BigInt\f[R] value.
The trailing \(lqn\(rq is not part of the string.
.IP
.EX
console.log(1024n.toString());
\f[I]// Expected output: \(dq1024\(dq\f[R]

console.log(1024n.toString(2));
\f[I]// Expected output: \(dq10000000000\(dq\f[R]

console.log(1024n.toString(16));
\f[I]// Expected output: \(dq400\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
toString()
toString(radix)
.EE
.SS Parameters
.TP
\f[B]radix\f[R] \f[I](optional)\f[R]
An integer in the range 2 through 36 specifying the base to use for
representing the BigInt value.
Defaults to 10.
.SS Return value
A string representing the specified \f[CR]BigInt\f[R] value.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]radix\f[R] is less than 2 or greater than 36.
.SH DESCRIPTION
The \f[CR]BigInt\f[R] object overrides the \f[CR]toString\f[R] method of
\f[CR]Object\f[R]; it does not inherit
\f[CR]Object.prototype.toString()\f[R].
For \f[CR]BigInt\f[R] values, the \f[CR]toString()\f[R] method returns a
string representation of the value in the specified radix.
.PP
For radixes above 10, the letters of the alphabet indicate digits
greater than 9.
For example, for hexadecimal numbers (base 16) \f[CR]a\f[R] through
\f[CR]f\f[R] are used.
.PP
If the specified BigInt value is negative, the sign is preserved.
This is the case even if the radix is 2; the string returned is the
positive binary representation of the BigInt value preceded by a
\f[CR]\-\f[R] sign, \f[B]not\f[R] the two\(cqs complement of the BigInt
value.
.PP
The \f[CR]toString()\f[R] method requires its \f[CR]this\f[R] value to
be a \f[CR]BigInt\f[R] primitive or wrapper object.
It throws a \f[CR]TypeError\f[R] for other \f[CR]this\f[R] values
without attempting to coerce them to BigInt values.
.PP
Because \f[CR]BigInt\f[R] doesn\(cqt have a
\f[CR][Symbol.toPrimitive]()\f[R] method, JavaScript calls the
\f[CR]toString()\f[R] method automatically when a \f[CR]BigInt\f[R]
\f[I]object\f[R] is used in a context expecting a string, such as in a
template literal.
However, BigInt \f[I]primitive\f[R] values do not consult the
\f[CR]toString()\f[R] method to be coerced to strings \(em rather, they
are directly converted using the same algorithm as the initial
\f[CR]toString()\f[R] implementation.
.IP
.EX
BigInt.prototype.toString = () \f[B]=>\f[R] \(dqOverridden\(dq;
console.log(\(ga${1n}\(ga); \f[I]// \(dq1\(dq\f[R]
console.log(\(ga${Object(1n)}\(ga); \f[I]// \(dqOverridden\(dq\f[R]
.EE
.SH EXAMPLES
.SS Using toString()
.IP
.EX
17n.toString(); \f[I]// \(dq17\(dq\f[R]
66n.toString(2); \f[I]// \(dq1000010\(dq\f[R]
254n.toString(16); \f[I]// \(dqfe\(dq\f[R]
(\-10n).toString(2); \f[I]// \(dq\-1010\(dq\f[R]
(\-0xffn).toString(2); \f[I]// \(dq\-11111111\(dq\f[R]
.EE
.SS Negative\-zero BigInt
There is no negative\-zero \f[CR]BigInt\f[R] as there are no negative
zeros in integers.
\f[CR]\-0.0\f[R] is an IEEE floating\-point concept that only appears in
the JavaScript \f[CR]Number\f[R] type.
.IP
.EX
(\-0n).toString(); \f[I]// \(dq0\(dq\f[R]
BigInt(\-0).toString(); \f[I]// \(dq0\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]BigInt.prototype.toLocaleString()\f[R]
.IP \(bu 2
\f[CR]BigInt.prototype.valueOf()\f[R]
.IP \(bu 2
\f[CR]Number.prototype.toString()\f[R]
