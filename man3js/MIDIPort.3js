.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "MIDIPort" "JS" "October 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MIDIPort \- MIDIPort
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]MIDIPort\f[B]\f[R] interface of the Web MIDI API
represents a MIDI input or output port.
.PP
A \f[CR]MIDIPort\f[R] instance is created when a new MIDI device is
connected.
Therefore it has no constructor.
.SH INSTANCE PROPERTIES
.TP
\f[B]MIDIPort.id\f[R] \f[I](read\-only)\f[R]
Returns a string containing the unique ID of the port.
.TP
\f[B]MIDIPort.manufacturer\f[R] \f[I](read\-only)\f[R]
Returns a string containing the manufacturer of the port.
.TP
\f[B]MIDIPort.name\f[R] \f[I](read\-only)\f[R]
Returns a string containing the system name of the port.
.TP
\f[B]MIDIPort.type\f[R] \f[I](read\-only)\f[R]
Returns a string containing the type of the port, one of:
.RS
.TP
\f[B]\[dq]input\[dq]\f[R]
The \f[CR]MIDIPort\f[R] is an input port.
.TP
\f[B]\[dq]output\[dq]\f[R]
The \f[CR]MIDIPort\f[R] is an output port.
.RE
.TP
\f[B]MIDIPort.version\f[R] \f[I](read\-only)\f[R]
Returns a string containing the version of the port.
.TP
\f[B]MIDIPort.state\f[R] \f[I](read\-only)\f[R]
Returns a string containing the state of the port, one of:
.RS
.TP
\f[B]\[dq]disconnected\[dq]\f[R]
The device that this \f[CR]MIDIPort\f[R] represents is disconnected from
the system.
.TP
\f[B]\[dq]connected\[dq]\f[R]
The device that this \f[CR]MIDIPort\f[R] represents is currently
connected.
.RE
.TP
\f[B]MIDIPort.connection\f[R] \f[I](read\-only)\f[R]
Returns a string containing the connection state of the port, one of:
.RS
.TP
\f[B]\[dq]open\[dq]\f[R]
The device that this \f[CR]MIDIPort\f[R] represents has been opened and
is available.
.TP
\f[B]\[dq]closed\[dq]\f[R]
The device that this \f[CR]MIDIPort\f[R] represents has not been opened,
or has been closed.
.TP
\f[B]\[dq]pending\[dq]\f[R]
The device that this \f[CR]MIDIPort\f[R] represents has been opened but
has subsequently disconnected.
.RE
.SH INSTANCE METHODS
\f[I]This interface also inherits methods from
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]MIDIPort.open()\f[R]
Makes the MIDI device connected to this \f[CR]MIDIPort\f[R] explicitly
available, and returns a \f[CR]Promise\f[R] which resolves once access
to the port has been successful.
.TP
\f[B]MIDIPort.close()\f[R]
Makes the MIDI device connected to this \f[CR]MIDIPort\f[R] unavailable,
changing the \f[CR]state\f[R] from \f[CR]\[dq]open\[dq]\f[R] to
\f[CR]\[dq]closed\[dq]\f[R].
This returns a \f[CR]Promise\f[R] which resolves once the port has been
closed.
.SH EVENTS
.TP
\f[B]statechange\f[R]
Called when an existing port changes its state or connection.
.SH EXAMPLES
.SS List ports and their information
The following example lists input and output ports, and displays
information about them using properties of \f[CR]MIDIPort\f[R].
.IP
.EX
\f[B]function\f[R] listInputsAndOutputs(midiAccess) {
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] midiAccess.inputs) {
    \f[B]const\f[R] input = entry[1];
    console.log(
      \[ga]Input port [type:\[aq]${input.type}\[aq]] id:\[aq]${input.id}\[aq] manufacturer: \[aq]${input.manufacturer}\[aq] name: \[aq]${input.name}\[aq] version: \[aq]${input.version}\[aq]\[ga],
    );
  }

  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] midiAccess.outputs) {
    \f[B]const\f[R] output = entry[1];
    console.log(
      \[ga]Output port [type:\[aq]${output.type}\[aq]] id: \[aq]${output.id}\[aq] manufacturer: \[aq]${output.manufacturer}\[aq] name: \[aq]${output.name}\[aq] version: \[aq]${output.version}\[aq]\[ga],
    );
  }
}
.EE
.SS Add available ports to a select list
The following example takes the list of input ports and adds them to a
select list, in order that a user can choose the device they want to
use.
.IP
.EX
inputs.forEach((port, key) \f[B]=>\f[R] {
  \f[B]const\f[R] opt = document.createElement(\[dq]option\[dq]);
  opt.text = port.name;
  document.getElementById(\[dq]port\-selector\[dq]).add(opt);
});
.EE
