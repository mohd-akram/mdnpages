.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Window.btoa" "JS" "June 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.btoa \- Window: btoa() method
.SH SYNOPSIS
The \f[B]\f[CB]btoa()\f[B]\f[R] method of the \f[CR]Window\f[R]
interface creates a Base64\-encoded ASCII string from a \f[I]binary
string\f[R] (i.e., a string in which each character in the string is
treated as a byte of binary data).
.PP
You can use this method to encode data which may otherwise cause
communication problems, transmit it, then use the
\f[CR]Window.atob()\f[R] method to decode the data again.
For example, you can encode control characters such as ASCII values 0
through 31.
.SH SYNTAX
.IP
.EX
btoa(stringToEncode)
.EE
.SS Parameters
.TP
\f[B]stringToEncode\f[R]
The \f[I]binary string\f[R] to encode.
.SS Return value
An ASCII string containing the Base64 representation of
\f[CR]stringToEncode\f[R].
.SS Exceptions
.TP
\f[B]InvalidCharacterError\f[R] \f[B]DOMException\f[R]
The string contained a character that did not fit in a single byte.
See \[lq]Unicode strings\[rq] below for more detail.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] encodedData = window.btoa(\[dq]Hello, world\[dq]); \f[I]// encode a string\f[R]
\f[B]const\f[R] decodedData = window.atob(encodedData); \f[I]// decode the string\f[R]
.EE
.SH UNICODE STRINGS
Base64, by design, expects binary data as its input.
In terms of JavaScript strings, this means strings in which the code
point of each character occupies only one byte.
So if you pass a string into \f[CR]btoa()\f[R] containing characters
that occupy more than one byte, you will get an error, because this is
not considered binary data:
.IP
.EX
\f[B]const\f[R] ok = \[dq]a\[dq];
console.log(ok.codePointAt(0).toString(16)); \f[I]//   61: occupies < 1 byte\f[R]

\f[B]const\f[R] notOK = \[dq]âœ“\[dq];
console.log(notOK.codePointAt(0).toString(16)); \f[I]// 2713: occupies > 1 byte\f[R]

console.log(window.btoa(ok)); \f[I]// YQ==\f[R]
console.log(window.btoa(notOK)); \f[I]// error\f[R]
.EE
.PP
For how to work around this limitation when dealing with arbitrary
Unicode text, see \f[I]The \[lq]Unicode Problem\[rq]\f[R] in the Base64
glossary entry.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#base64-utility-methods
A polyfill of \f[CR]btoa\f[R]
.UE \c
\ is available in \c
.UR https://github.com/zloirock/core-js
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]data\f[R] URLs
.IP \[bu] 2
\f[CR]WorkerGlobalScope.btoa()\f[R]: the same method, but in worker
scopes.
.IP \[bu] 2
\f[CR]Window.atob()\f[R]
.IP \[bu] 2
Base64
