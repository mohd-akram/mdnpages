.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PUBLICKEYCREDENTIALCREATIONOPTIONS" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredentialCreationOptions \- PublicKeyCredentialCreationOptions
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]PublicKeyCredentialCreationOptions\f[B]\f[R] dictionary
represents the object passed to \f[CR]CredentialsContainer.create()\f[R]
as the value of the \f[CR]publicKey\f[R] option: that is, when using
\f[CR]create()\f[R] to create a public key credential using the Web
Authentication API.
.SH INSTANCE PROPERTIES
.TP
\f[B]attestation\f[R] \f[I](optional)\f[R]
A string specifying the relying party\(cqs preference for how the
attestation statement (i.e., provision of verifiable evidence of the
authenticity of the authenticator and its data) is conveyed during
credential creation.
The value can be one of the following:
.RS
.TP
\f[B]\(dqnone\(dq\f[R]
Specifies that the relying party is not interested in authenticator
attestation.
This might be to avoid additional user consent for round trips to the
relying party server to relay identifying information, or round trips to
an attestation certificate authority (CA), with the aim of making the
authentication process smoother.
If \f[CR]\(dqnone\(dq\f[R] is chosen as the \f[CR]attestation\f[R]
value, and the authenticator signals that it uses a CA to generate its
attestation statement, the client app will replace it with a
\(lqNone\(rq attestation statement, indicating that no attestation
statement is available.
.TP
\f[B]\(dqdirect\(dq\f[R]
Specifies that the relying party wants to receive the attestation
statement as generated by the authenticator.
.TP
\f[B]\(dqenterprise\(dq\f[R]
Specifies that the Relying Party wants to receive an attestation
statement that may include uniquely identifying information.
This is intended for controlled deployments within an enterprise where
the organization wishes to tie registrations to specific authenticators.
.TP
\f[B]\(dqindirect\(dq\f[R]
Specifies that the relying party wants to receive a verifiable
attestation statement, but it will allow the client to decide how to
receive it.
For example, the client could choose to replace the authenticator\(cqs
assertion statement with one generated by an Anonymization CA to protect
user privacy.
.PP
If \f[CR]attestation\f[R] is omitted, it will default to
\f[CR]\(dqnone\(dq\f[R].
.RE
.TP
\f[B]attestationFormats\f[R] \f[I](optional)\f[R]
An array of strings specifying the relying party\(cqs preference for the
attestation statement format used by the authenticator.
Values should be ordered from highest to lowest preference, and should
be considered hints \(em the authenticator may choose to issue an
attestation statement in a different format.
For a list of valid formats, see \c
.UR https://www.iana.org/assignments/webauthn/webauthn.xhtml#webauthn-attestation-statement-format-ids
WebAuthn Attestation Statement Format Identifiers
.UE \c
\&.
.RS
.PP
If omitted, \f[CR]attestationFormats\f[R] defaults to an empty array.
.RE
.TP
\f[B]authenticatorSelection\f[R] \f[I](optional)\f[R]
An object whose properties are criteria used to filter out the potential
authenticators for the credential creation operation.
This object can contain the properties:
.RS
.TP
\f[B]authenticatorAttachment\f[R] \f[I](optional)\f[R]
A string indicating which authenticator attachment type should be
permitted for the chosen authenticator.
Possible values are:
.RS
.TP
\f[B]\(dqplatform\(dq\f[R]
The authenticator is part of the device WebAuthn is running on (termed a
\f[B]platform authenticator\f[R]), therefore WebAuthn will communicate
with it using a transport available to that platform, such as a
platform\-specific API.
A public key credential bound to a platform authenticator is called a
\f[B]platform credential\f[R].
.TP
\f[B]\(dqcross\-platform\(dq\f[R]
The authenticator is not a part of the device WebAuthn is running on
(termed a \f[B]roaming authenticator\f[R] as it can roam between
different devices), therefore WebAuthn will communicate with it using a
cross\-platform transport protocol such as Bluetooth or NFC.
A public key credential bound to a roaming authenticator is called a
\f[B]roaming credential\f[R].
.RS
.PP
If omitted, any type of authenticator, either platform or
cross\-platform, can be selected for the credential creation operation.
.RE
.RE
.TP
\f[B]requireResidentKey\f[R] \f[I](optional)\f[R]
A boolean.
If set to \f[CR]true\f[R], it indicates that a resident key is required
(see \f[CR]residentKey\f[R]) This property is deprecated, but still
available in some implementations for backwards compatibility with
WebAuthn Level 1.
The value should be set to \f[CR]true\f[R] if \f[CR]residentKey\f[R] is
set to \f[CR]\(dqrequired\(dq\f[R].
.RS
.PP
If omitted, \f[CR]requireResidentKey\f[R] defaults to \f[CR]false\f[R].
.RE
.TP
\f[B]residentKey\f[R] \f[I](optional)\f[R]
A string that specifies the extent to which the relying party desires to
create a client\-side discoverable credential (that is, one that is
usable in authentication requests where the relying party does not
provide credential IDs \(em \f[CR]navigator.credentials.get()\f[R] is
called with an empty \f[CR]allowCredentials\f[R] value).
The alternative is a \f[B]server\-side credential\f[R], where the
relying party must provide credential IDs in the \f[CR]get()\f[R]
\f[CR]allowCredentials\f[R] value.
Possible values are:
.RS
.TP
\f[B]\(dqdiscouraged\(dq\f[R]
The relying party prefers creation of a server\-side credential, but
will accept a client\-side discoverable credential.
.TP
\f[B]\(dqpreferred\(dq\f[R]
The relying party strongly prefers creation of a client\-side
discoverable credential, but will accept a server\-side credential.
The user agent should guide the user through setting up user
verification, if needed, to create a discoverable credential.
This takes precedence over the \f[CR]userVerification\f[R] setting.
.TP
\f[B]\(dqrequired\(dq\f[R]
The relying party requires a client\-side discoverable credential.
If one cannot be created, a \f[CR]NotAllowedError\f[R]
\f[CR]DOMException\f[R] is thrown.
See the \f[CR]create()\f[R] exceptions list for more details.
.PP
If omitted, \f[CR]residentKey\f[R] defaults to
\f[CR]\(dqrequired\(dq\f[R] if \f[CR]requireResidentKey\f[R] is
\f[CR]true\f[R], otherwise the default value is
\f[CR]\(dqdiscouraged\(dq\f[R].
.RE
.TP
\f[B]userVerification\f[R] \f[I](optional)\f[R]
A string that specifies the relying party\(cqs requirements for user
verification for the \f[CR]create()\f[R] operation.
Possible values are:
.RS
.TP
\f[B]\(dqdiscouraged\(dq\f[R]
The relying party prefers no user verification for the
\f[CR]create()\f[R] operation, in the interests of minimizing disruption
to the user experience.
.TP
\f[B]\(dqpreferred\(dq\f[R]
The relying party prefers user verification for the \f[CR]create()\f[R]
operation, but it will not fail if user verification cannot be
performed.
.TP
\f[B]\(dqrequired\(dq\f[R]
The relying party requires user verification for the \f[CR]create()\f[R]
operation \(em if user verification cannot be performed, an error is
thrown.
.PP
If omitted, \f[CR]userVerification\f[R] defaults to
\f[CR]\(dqpreferred\(dq\f[R].
.RE
.RE
.TP
\f[B]challenge\f[R]
An \f[CR]ArrayBuffer\f[R], \f[CR]TypedArray\f[R], or \f[CR]DataView\f[R]
provided by the relying party\(cqs server and used as a \c
.UR https://en.wikipedia.org/wiki/Challenge%E2%80%93response_authentication
cryptographic challenge
.UE \c
\&.
This value will be signed by the authenticator and the signature will be
sent back as part of
\f[CR]AuthenticatorAttestationResponse.attestationObject\f[R].
.TP
\f[B]excludeCredentials\f[R] \f[I](optional)\f[R]
An \f[CR]Array\f[R] of objects describing existing credentials that are
already mapped to this user account (as identified by
\f[CR]user.id\f[R]).
This is provided by the relying party, and checked by the user agent to
avoid creating a new public key credential on an authenticator that
already has a credential mapped to the specified user account.
Each item should be of the form:
.RS
.TP
\f[B]id\f[R]
An \f[CR]ArrayBuffer\f[R], \f[CR]TypedArray\f[R], or \f[CR]DataView\f[R]
representing the existing credential ID.
.TP
\f[B]transports\f[R] \f[I](optional)\f[R]
An \f[CR]Array\f[R] of strings representing allowed transports.
Possible transports are: \f[CR]\(dqble\(dq\f[R],
\f[CR]\(dqhybrid\(dq\f[R], \f[CR]\(dqinternal\(dq\f[R],
\f[CR]\(dqnfc\(dq\f[R], and \f[CR]\(dqusb\(dq\f[R] (see
\f[CR]getTransports()\f[R] for more details).
.TP
\f[B]type\f[R]
A string defining the type of public key credential to create.
This can currently take a single value, \f[CR]\(dqpublic\-key\(dq\f[R],
but more values may be added in the future.
.PP
If the \f[CR]create()\f[R] call is attempting to create a duplicate
public key credential on an authenticator, the user agent will guide to
user to create the credential using a different authenticator, or fail
if that is not possible.
.PP
If \f[CR]excludeCredentials\f[R] is omitted, it defaults to an empty
array.
.RE
.TP
\f[B]extensions\f[R] \f[I](optional)\f[R]
An object containing properties representing the input values for any
requested extensions.
These extensions are used to specific additional processing by the
client or authenticator during the credential creation process.
Examples include specifying whether a returned credential is
discoverable, or whether the relying party will be able to store large
blob data associated with a credential.
.RS
.PP
Extensions are optional and different browsers may recognize different
extensions.
Processing extensions is always optional for the client: if a browser
does not recognize a given extension, it will just ignore it.
For information on using extensions, and which ones are supported by
which browsers, see Web Authentication extensions.
.RE
.TP
\f[B]pubKeyCredParams\f[R]
An \f[CR]Array\f[R] of objects which specify the key types and signature
algorithms the Relying Party supports, ordered from most preferred to
least preferred.
The client and authenticator will make a best\-effort to create a
credential of the most preferred type possible.
These objects will contain the following properties:
.RS
.TP
\f[B]alg\f[R]
A number that is equal to a \c
.UR https://www.iana.org/assignments/cose/cose.xhtml#algorithms
COSE Algorithm Identifier
.UE \c
, representing the cryptographic algorithm to use for this credential
type.
It is recommended that relying parties that wish to support a wide range
of authenticators should include at least the following values in the
provided choices:
.RS
.IP \(bu 2
\f[CR]\-8\f[R]: Ed25519
.IP \(bu 2
\f[CR]\-7\f[R]: ES256
.IP \(bu 2
\f[CR]\-257\f[R]: RS256
.RE
.TP
\f[B]type\f[R]
A string defining the type of public key credential to create.
This can currently take a single value, \f[CR]\(dqpublic\-key\(dq\f[R],
but more values may be added in the future.
.PP
If none of the listed credential types can be created, the
\f[CR]create()\f[R] operation fails.
.RE
.TP
\f[B]rp\f[R]
An object describing the relying party that requested the credential
creation.
It can contain the following properties:
.RS
.TP
\f[B]id\f[R] \f[I](optional)\f[R]
A string representing the ID of the relying party.
A public key credential can only be used for authentication with the
same relying party (as identified by the \f[CR]publicKey.rpId\f[R] in a
\f[CR]navigator.credentials.get()\f[R] call) it was registered with \(em
the IDs need to match.
.RS
.PP
The \f[CR]id\f[R] cannot include a port or scheme like a standard
origin, but the domain scheme must be \f[CR]https\f[R] scheme.
The \f[CR]id\f[R] needs to equal the origin\(cqs effective domain, or a
domain suffix thereof.
So for example if the relying party\(cqs origin is
\f[CR]https://login.example.com:1337\f[R], the following \f[CR]id\f[R]s
are valid:
.IP \(bu 2
\f[CR]login.example.com\f[R]
.IP \(bu 2
\f[CR]example.com\f[R]
.PP
But not:
.IP \(bu 2
\f[CR]m.login.example.com\f[R]
.IP \(bu 2
\f[CR]com\f[R]
.PP
If omitted, \f[CR]id\f[R] defaults to the document origin \(em which
would be \f[CR]login.example.com\f[R] in the above example.
.RE
.TP
\f[B]name\f[R]
A string representing the name of the relying party (e.g.,
\f[CR]\(dqFacebook\(dq\f[R]).
This is the name the user will be presented with when creating or
validating a WebAuthn operation.
.RE
.TP
\f[B]timeout\f[R] \f[I](optional)\f[R]
A numerical hint, in milliseconds, which indicates the time the calling
web app is willing to wait for the creation operation to complete.
This hint may be overridden by the browser.
.TP
\f[B]user\f[R]
An object describing the user account for which the credential is
generated.
It can contain the following properties:
.RS
.TP
\f[B]displayName\f[R]
A string providing a human\-friendly user display name (example:
\f[CR]\(dqJohn Doe\(dq\f[R]), which will have been set by user during
initial registration with the relying party.
.TP
\f[B]id\f[R]
An \f[CR]ArrayBuffer\f[R], \f[CR]TypedArray\f[R], or \f[CR]DataView\f[R]
representing a unique ID for the user account.
This value has a maximum length of 64 bytes, and is not intended to be
displayed to the user.
.TP
\f[B]name\f[R]
A string providing a human\-friendly identifier for the user\(cqs
account, to help distinguish between different accounts with similar
\f[CR]displayName\f[R]s.
This could be an email address (such as
\f[CR]\(dqjohn.doe\(atexample.com\(dq\f[R]), phone number (for example
\f[CR]\(dq+12345678901\(dq\f[R]), or some other kind of user account
identifier (for example \f[CR]\(dqJohnDoe667\(dq\f[R]).
.RE
.TP
\f[B]hints\f[R] \f[I](optional)\f[R]
An array of strings providing hints as to what authentication UI the
user\-agent should provide for the user.
.RS
.PP
The values can be any of the following:
.TP
\f[B]\(dqsecurity\-key\(dq\f[R]
Authentication requires a separate dedicated physical device to provide
the key.
.TP
\f[B]\(dqclient\-device\(dq\f[R]
The user authenticates using their own device, such as a phone.
.TP
\f[B]\(dqhybrid\(dq\f[R]
Authentication relies on a combination of authorization/authentication
methods, potentially relying on both user and server\-based mechanisms.
.RE
.SH EXAMPLES
.SS Creating a public key credential
This example creates a \f[CR]PublicKeyCredentialCreationOptions\f[R],
specifying only the required properties, and using defaults for the
rest.
.PP
It then passes the object into
\f[CR]navigator.credentials.create()\f[R], to create a new public key
credential.
.IP
.EX
\f[B]const\f[R] publicKey = {
  challenge: challengeFromServer,
  rp: { id: \(dqacme.com\(dq, name: \(dqACME Corporation\(dq },
  user: {
    id: \f[B]new\f[R] Uint8Array([79, 252, 83, 72, 214, 7, 89, 26]),
    name: \(dqjamiedoe\(dq,
    displayName: \(dqJamie Doe\(dq,
  },
  pubKeyCredParams: [{ type: \(dqpublic\-key\(dq, alg: \-7 }],
};

\f[B]const\f[R] publicKeyCredential = \f[B]await\f[R] navigator.credentials.create({ publicKey });
.EE
.PP
A successful \f[CR]create()\f[R] call returns a promise that resolves
with a \f[CR]PublicKeyCredential\f[R] object instance, representing a
public key credential that can later be used to authenticate a user via
a WebAuthn \f[CR]get()\f[R] call.
Its \f[CR]PublicKeyCredential.response\f[R] property contains an
\f[CR]AuthenticatorAttestationResponse\f[R] object providing access to
several useful pieces of information including the authenticator data,
public key, transport mechanisms, and more.
.IP
.EX
navigator.credentials.create({ publicKey }).then((publicKeyCredential) \f[B]=>\f[R] {
  \f[B]const\f[R] response = publicKeyCredential.response;

  \f[I]// Access attestationObject ArrayBuffer\f[R]
  \f[B]const\f[R] attestationObj = response.attestationObject;

  \f[I]// Access client JSON\f[R]
  \f[B]const\f[R] clientJSON = response.clientDataJSON;

  \f[I]// Return authenticator data ArrayBuffer\f[R]
  \f[B]const\f[R] authenticatorData = response.getAuthenticatorData();

  \f[I]// Return public key ArrayBuffer\f[R]
  \f[B]const\f[R] pk = response.getPublicKey();

  \f[I]// Return public key algorithm identifier\f[R]
  \f[B]const\f[R] pkAlgo = response.getPublicKeyAlgorithm();

  \f[I]// Return permissible transports array\f[R]
  \f[B]const\f[R] transports = response.getTransports();
});
.EE
.PP
Some of this data will need to be stored on the server for future
authentication operations against this credential \(em for example the
public key, the algorithm used, and the permissible transports.
.PP
See Creating a key pair and registering a user for more information
about how the overall flow works.
