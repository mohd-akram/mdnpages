.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "XSLTProcessor.setParameter" "JS" "August 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XSLTProcessor.setParameter \- XSLTProcessor: setParameter() method
.SH SYNOPSIS
The \f[CR]setParameter()\f[R] method of the \f[CR]XSLTProcessor\f[R]
interface sets the value of a parameter (\f[CR]<xsl:param>\f[R]) in the
stylesheet imported in the processor.
.SH SYNTAX
.IP
.EX
setParameter(namespaceURI, localName, value)
.EE
.SS Parameters
.TP
\f[B]namespaceURI\f[R]
The namespace associated with the parameter name.
A \[lq]null\[rq] value is treated the same as the empty string
(\f[CR]\[dq]\[dq]\f[R]).
.TP
\f[B]localName\f[R]
The name of the parameter in the associated namespace.
.TP
\f[B]value\f[R]
The value of the parameter.
> \f[B]Note:\f[R] > Firefox supports any kind of parameter.
Chrome, Edge and Safari only support string parameters.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Using setParameter()
This example demonstrates how to pass parameters from JavaScript to an
XSLT stylesheet using \f[CR]setParameter()\f[R], allowing for dynamic
modification of the transformation output based on these parameters.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]result\[dq]></\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] xmlString = \[ga]
<items>
  <item>Item 1</item>
  <item>Item 2</item>
  <item>Item 3</item>
</items>
\[ga];

\f[B]const\f[R] xsltString = \[ga]
<xsl:stylesheet version=\[dq]1.0\[dq] xmlns:xsl=\[dq]http://www.w3.org/1999/XSL/Transform\[dq]>
  <xsl:param name=\[dq]showItems\[dq] select=\[dq]\[aq]yes\[aq]\[dq]/>
  <xsl:param name=\[dq]highlightColor\[dq] select=\[dq]\[aq]yellow\[aq]\[dq]/>
  <xsl:template match=\[dq]/\[dq]>
    <ul>
      <xsl:if test=\[dq]$showItems = \[aq]yes\[aq]\[dq]>
        <xsl:for\-each select=\[dq]items/item\[dq]>
          <li style=\[dq]background\-color: {$highlightColor};\[dq]>
            <xsl:value\-of select=\[dq].\[dq]/>
          </li>
        </xsl:for\-each>
      </xsl:if>
    </ul>
  </xsl:template>
</xsl:stylesheet>
\[ga];

\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
\f[B]const\f[R] xmlDoc = parser.parseFromString(xmlString, \[dq]application/xml\[dq]);
\f[B]const\f[R] xsltDoc = parser.parseFromString(xsltString, \[dq]application/xml\[dq]);

\f[B]const\f[R] xsltProcessor = \f[B]new\f[R] XSLTProcessor();
xsltProcessor.importStylesheet(xsltDoc);

xsltProcessor.setParameter(\f[B]null\f[R], \[dq]showItems\[dq], \[dq]yes\[dq]);
xsltProcessor.setParameter(\f[B]null\f[R], \[dq]highlightColor\[dq], \[dq]lightblue\[dq]);

\f[I]// Perform the transformation from XML to HTML\f[R]
\f[B]const\f[R] resultFragment = xsltProcessor.transformToFragment(xmlDoc, document);

\f[I]// Display the transformed result in the page\f[R]
document.getElementById(\[dq]result\[dq]).appendChild(resultFragment);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]XSLTProcessor.getParameter()\f[R]
.IP \[bu] 2
\f[CR]XSLTProcessor.removeParameter()\f[R]
.IP \[bu] 2
\f[CR]XSLTProcessor.clearParameters()\f[R]
.IP \[bu] 2
\f[CR]XSLTProcessor.reset()\f[R]
