.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATECOMPUTEPIPELINEASYNC" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createComputePipelineAsync \- GPUDevice:
createComputePipelineAsync() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createComputePipelineAsync()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface returns a \f[CR]Promise\f[R] that
fulfills with a \f[CR]GPUComputePipeline\f[R], which can control the
compute shader stage and be used in a \f[CR]GPUComputePassEncoder\f[R],
once the pipeline can be used without any stalling.
.RS
.PP
\f[B]Note:\f[R] It is generally preferable to use this method over
\f[CR]GPUDevice.createComputePipeline()\f[R] whenever possible, as it
prevents blocking of GPU operation execution on pipeline compilation.
.RE
.SH SYNTAX
.IP
.EX
createComputePipelineAsync(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
See the descriptor definition for the
\f[CR]GPUDevice.createComputePipeline()\f[R] method.
.SS Return value
A \f[CR]Promise\f[R] that fulfills with a \f[CR]GPUComputePipeline\f[R]
object instance when the created pipeline is ready to be used without
additional delay.
.SS Validation
If pipeline creation fails and the resulting pipeline becomes invalid as
a result, the returned promise rejects with a
\f[CR]GPUPipelineError\f[R]:
.IP \(bu 2
If this is due to an internal error, the \f[CR]GPUPipelineError\f[R]
will have a \f[CR]reason\f[R] of \f[CR]\(dqinternal\(dq\f[R].
.IP \(bu 2
If this is due to a validation error, the \f[CR]GPUPipelineError\f[R]
will have a \f[CR]reason\f[R] of \f[CR]\(dqvalidation\(dq\f[R].
.PP
A validation error can occur if any of the following are false:
.IP \(bu 2
The workgroup storage size used by the \f[CR]module\f[R] referenced
inside the \f[CR]compute\f[R] property is less than or equal to the
\f[CR]GPUDevice\f[R]\(cqs \f[CR]maxComputeWorkgroupStorageSize\f[R]
limit.
.IP \(bu 2
The \f[CR]module\f[R] uses a number of compute invocations per workgroup
less than or equal to the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]maxComputeInvocationsPerWorkgroup\f[R] limit.
.IP \(bu 2
The \f[CR]module\f[R]\(cqs workgroup size is less than or equal to the
\f[CR]GPUDevice\f[R]\(cqs corresponding
\f[CR]maxComputeWorkgroupSizeX\f[R],
\f[CR]maxComputeWorkgroupSizeY\f[R], or
\f[CR]maxComputeWorkgroupSizeZ\f[R] limit.
.IP \(bu 2
If the \f[CR]entryPoint\f[R] property is omitted, the shader code
contains a single compute shader entry point function for the browser to
use as the default entry point.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Basic example
The following example shows a process of:
.IP \(bu 2
Creating a bind group layout with
\f[CR]GPUDevice.createBindGroupLayout()\f[R].
.IP \(bu 2
Feeding the \f[CR]bindGroupLayout\f[R] into
\f[CR]GPUDevice.createPipelineLayout()\f[R] to create a
\f[CR]GPUPipelineLayout\f[R].
.IP \(bu 2
Using that value immediately in a
\f[CR]createComputePipelineAsync()\f[R] call to create a
\f[CR]GPUComputePipeline\f[R].
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[I]// \&...\f[R]

  \f[B]const\f[R] bindGroupLayout = device.createBindGroupLayout({
    entries: [
      {
        binding: 0,
        visibility: GPUShaderStage.COMPUTE,
        buffer: {
          type: \(dqstorage\(dq,
        },
      },
    ],
  });

  \f[B]const\f[R] computePipeline = \f[B]await\f[R] device.createComputePipelineAsync({
    layout: device.createPipelineLayout({
      bindGroupLayouts: [bindGroupLayout],
    }),
    compute: {
      module: shaderModule,
      entryPoint: \(dqmain\(dq,
    },
  });

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
