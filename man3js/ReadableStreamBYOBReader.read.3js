.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ReadableStreamBYOBReader.read" "JS" "December 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStreamBYOBReader.read \- ReadableStreamBYOBReader: read() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]read()\f[B]\f[R] method of the
\f[CR]ReadableStreamBYOBReader\f[R] interface is used to read data into
a view on a user\-supplied buffer from an associated readable byte
stream.
A request for data will be satisfied from the stream\[cq]s internal
queues if there is any data present.
If the stream queues are empty, the request may be supplied as a
zero\-copy transfer from the underlying byte source.
.PP
The method takes as an argument a view on a buffer that supplied data is
to be read into, and returns a \f[CR]Promise\f[R].
The promise fulfills with an object that has properties \f[CR]value\f[R]
and \f[CR]done\f[R] when data comes available, or if the stream is
cancelled.
If the stream is errored, the promise will be rejected with the relevant
error object.
.PP
When a chunk of data is supplied, the \f[CR]value\f[R] property will
contain a new view.
This will be a view over the same buffer/backing memory (and of the same
type) as the original \f[CR]view\f[R] passed to the \f[CR]read()\f[R]
method, now populated with the new chunk of data.
Note that once the promise fulfills, the original \f[CR]view\f[R] passed
to the method will be detached and no longer usable.
The promise will fulfill with a \f[CR]value: undefined\f[R] if the
stream has been cancelled.
In this case the backing memory region of \f[CR]view\f[R] is discarded
and not returned to the caller (all previously read data in the
view\[cq]s buffer is lost).
.PP
The \f[CR]done\f[R] property indicates whether or not more data is
expected.
The value is set \f[CR]true\f[R] if the stream is closed or cancelled,
and \f[CR]false\f[R] otherwise.
.PP
The method also has an optional \f[CR]options.min\f[R] argument that can
be used to specify the minimum number of elements that must be available
before the promise will fulfill, while the stream is active.
The view returned in the \f[CR]value\f[R] property will always have at
least this number of elements, except when the stream is closed.
.SH SYNTAX
.IP
.EX
read(view)
read(view, options)
.EE
.SS Parameters
.TP
\f[B]view\f[R]
The view that data is to be read into.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
Options are as follows:
.RS
.TP
\f[B]min\f[R]
The minimum number of elements to read before the promise will fulfill
while the stream is active.
If not given, the promise will resolve with at least one element, up to
the maximum size of the view.
This number must not be bigger than the view that is being read into.
.RE
.SS Return value
A \f[CR]Promise\f[R], which fulfills/rejects with a result depending on
the state of the stream.
.PP
The following are possible:
.IP \[bu] 2
If a chunk is available and the stream is still active, the promise
fulfills with an object of the form:
.RS 2
.IP
.EX
{ value: theChunk, done: \f[B]false\f[R] }
.EE
.PP
\f[CR]theChunk\f[R] is a view containing the new data.
This is a view of the same type and over the same backing memory as the
\f[CR]view\f[R] passed to the \f[CR]read()\f[R] method.
The original \f[CR]view\f[R] will be detached and no longer usable.
.RE
.IP \[bu] 2
If the stream is closed, the promise fulfills with an object of the form
(where \f[CR]theChunk\f[R] has the same properties as above):
.RS 2
.IP
.EX
{ value: theChunk, done: \f[B]true\f[R] }
.EE
.RE
.IP \[bu] 2
If the stream is cancelled, the promise fulfills with an object of the
form:
.RS 2
.IP
.EX
{ value: \f[B]undefined\f[R], done: \f[B]true\f[R] }
.EE
.PP
In this case the backing memory is discarded.
.RE
.IP \[bu] 2
If the stream throws an error, the promise rejects with the relevant
error.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The source object is not a \f[CR]ReadableStreamBYOBReader\f[R], the
stream has no owner, the view is not an object or has become detached,
the view\[cq]s length is 0, \f[CR]options.min\f[R] is 0, or
\f[CR]ReadableStreamBYOBReader.releaseLock()\f[R] is called (when
there\[cq]s a pending read request).
.TP
\f[B]RangeError\f[R]
The \f[CR]options.min\f[R] value is larger than the view being written
into.
.SH EXAMPLES
.SS Reading into a view
The example code here is taken from the live examples in Using readable
byte streams.
.PP
First we create the reader using \f[CR]ReadableStream.getReader()\f[R]
on the stream, specifying \f[CR]mode: \[dq]byob\[dq]\f[R] in the options
parameter.
We also need create an \f[CR]ArrayBuffer\f[R], which is the \[lq]backing
memory\[rq] of the views that we will write into.
.IP
.EX
\f[B]const\f[R] reader = stream.getReader({ mode: \[dq]byob\[dq] });
\f[B]let\f[R] buffer = \f[B]new\f[R] ArrayBuffer(4000);
.EE
.PP
A function that uses the reader is shown below.
This calls the \f[CR]read()\f[R] method recursively to read data into
the buffer.
The method takes a \f[CR]Uint8Array\f[R] typed array which is a view
over the part of the original array buffer that has not yet been
written.
The parameters of the view are calculated from the data that was
received in previous calls, which define an offset into the original
array buffer.
.IP
.EX
readStream(reader);

\f[B]function\f[R] readStream(reader) {
  \f[B]let\f[R] bytesReceived = 0;
  \f[B]let\f[R] offset = 0;

  \f[B]while\f[R] (offset < buffer.byteLength) {
    \f[I]// read() returns a promise that fulfills when a value has been received\f[R]
    reader
      .read(\f[B]new\f[R] Uint8Array(buffer, offset, buffer.byteLength \- offset))
      .then(\f[B]function\f[R] processBytes({ done, value }) {
        \f[I]// Result objects contain two properties:\f[R]
        \f[I]// done  \- true if the stream has already given all its data.\f[R]
        \f[I]// value \- some data. \[aq]undefined\[aq] if the reader is canceled.\f[R]

        \f[B]if\f[R] (done) {
          \f[I]// There is no more data in the stream\f[R]
          \f[B]return\f[R];
        }

        buffer = value.buffer;
        offset += value.byteLength;
        bytesReceived += value.byteLength;

        \f[I]// Read some more, and call this function again\f[R]
        \f[I]// Note that here we create a new view over the original buffer.\f[R]
        \f[B]return\f[R] reader
          .read(\f[B]new\f[R] Uint8Array(buffer, offset, buffer.byteLength \- offset))
          .then(processBytes);
      });
  }
}
.EE
.PP
When there is no more data in the stream, the \f[CR]read()\f[R] method
fulfills with an object with the property \f[CR]done\f[R] set to
\f[CR]true\f[R], and the function returns.
.SS Reading a minimum number of elements
This example is almost exactly the same as the previous one, except that
we\[cq]ve modified the code to read a minimum of 101 elements on each
iteration.
.PP
We\[cq]ve also made it into a live example.
Note that most of the code is not relevant to the example and is
therefore hidden.
For more information see Using readable byte streams.
.SS JavaScript
.IP
.EX
\f[B]function\f[R] readStream(reader) {
  \f[B]let\f[R] bytesReceived = 0;
  \f[B]let\f[R] offset = 0;

  \f[B]while\f[R] (offset < buffer.byteLength) {
    \f[I]// read() returns a promise that resolves when a value has been received\f[R]
    reader
      .read(\f[B]new\f[R] Uint8Array(buffer, offset, buffer.byteLength \- offset), {
        min: 101,
      })
      .then(\f[B]async\f[R] \f[B]function\f[R] processText({ done, value }) {
        \f[I]// Result objects contain two properties:\f[R]
        \f[I]// done  \- true if the stream has already given all its data.\f[R]
        \f[I]// value \- some data. Always undefined when done is true.\f[R]

        \f[B]if\f[R] (done) {
          logConsumer(
            \[ga]readStream() complete. Read ${value.byteLength} bytes (total: ${bytesReceived})\[ga],
          );
          \f[B]return\f[R];
        }

        buffer = value.buffer;
        offset += value.byteLength;
        bytesReceived += value.byteLength;

        \f[I]//logConsumer(\[ga]Read ${bytesReceived} bytes: ${value}\[ga]);\f[R]
        logConsumer(\[ga]Read ${value.byteLength} bytes (total: ${bytesReceived})\[ga]);
        result += value;

        \f[I]// Read some more, and call this function again\f[R]
        \f[B]return\f[R] reader
          .read(\f[B]new\f[R] Uint8Array(buffer, offset, buffer.byteLength \- offset), {
            min: 101,
          })
          .then(processText);
      });
  }
}
.EE
.SS Result
The logging from the underlying push source (left) and consumer (right)
are shown below.
Note that if the browser supports the \f[CR]options.min\f[R] argument
then at least 101 elements are returned every time (and often more),
except when the stream closes.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ReadableStreamBYOBReader()\f[R] constructor
.IP \[bu] 2
Using readable byte stream
