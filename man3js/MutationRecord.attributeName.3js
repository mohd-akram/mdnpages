.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MutationRecord.attributeName" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MutationRecord.attributeName \- MutationRecord: attributeName property
.SH SYNOPSIS
The \f[CR]MutationRecord\f[R] read\-only property
\f[B]\f[CB]attributeName\f[B]\f[R] contains the name of a changed
attribute belonging to a node that is observed by a
\f[CR]MutationObserver\f[R].
.SH VALUE
If the record\[cq]s \f[CR]type\f[R] is \f[CR]attributes\f[R], this is a
string representing the name of the mutated attribute of the mutation
target.
.PP
If the record\[cq]s \f[CR]type\f[R] is not \f[CR]attributes\f[R], this
is \f[CR]null\f[R].
.SH EXAMPLES
.SS Get last updated attribute name
In the following example, there are four buttons: two change the
\f[CR]style\f[R] attribute of the \f[CR]h1\f[R] element, and two change
the \f[CR]class\f[R] attribute of the \f[CR]h1\f[R] element.
The script uses a \f[CR]MutationObserver\f[R] to detect the changes and
will update the text below to the name of the last attribute that was
changed.
.SS HTML
.IP
.EX
<\f[B]h1\f[R] class=\[dq]blue\[dq] style=\[dq]color:black;\[dq] id=\[dq]hiMom\[dq]>Hi, Mom!</\f[B]h1\f[R]>

<\f[B]button\f[R] id=\[dq]redButton\[dq]>Set class to \[dq]red\[dq]</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]blueButton\[dq]>Set class to \[dq]blue\[dq]</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]whiteButton\[dq]>Set style to \[dq]color:white;\[dq]</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]blackButton\[dq]>Set style to \[dq]color:black;\[dq]</\f[B]button\f[R]>

<\f[B]p\f[R] id=\[dq]log\[dq]>Updated attribute name:</\f[B]p\f[R]>
.EE
.SS CSS
.IP
.EX
\&.red {
  \f[B]background\-color\f[R]: red;
}

\&.blue {
  \f[B]background\-color\f[R]: blue;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] hiMom = document.querySelector(\[dq]#hiMom\[dq]);
\f[B]const\f[R] redButton = document.querySelector(\[dq]#redButton\[dq]);
\f[B]const\f[R] blueButton = document.querySelector(\[dq]#blueButton \[dq]);
\f[B]const\f[R] whiteButton = document.querySelector(\[dq]#whiteButton\[dq]);
\f[B]const\f[R] blackButton = document.querySelector(\[dq]#blackButton\[dq]);
\f[B]const\f[R] log = document.querySelector(\[dq]#log\[dq]);

redButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  hiMom.classList.add(\[dq]red\[dq]);
  hiMom.classList.remove(\[dq]blue\[dq]);
});

blueButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  hiMom.classList.add(\[dq]blue\[dq]);
  hiMom.classList.remove(\[dq]red\[dq]);
});

whiteButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  hiMom.style.color = \[dq]white\[dq];
});

blackButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  hiMom.style.color = \[dq]black\[dq];
});

\f[B]function\f[R] logLastAttr(mutationRecordArray) {
  \f[B]for\f[R] (\f[B]const\f[R] record \f[B]of\f[R] mutationRecordArray) {
    \f[B]if\f[R] (record.type === \[dq]attributes\[dq]) {
      log.textContent = \[ga]Updated attribute name: ${record.attributeName}\[ga];
    }
  }
}

\f[B]const\f[R] observer = \f[B]new\f[R] MutationObserver(logLastAttr);
observer.observe(hiMom, { attributes: \f[B]true\f[R] });
.EE
.SS Result
