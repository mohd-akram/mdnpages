.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "OBJECT.DEFINEPROPERTY" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.defineProperty \- Object.defineProperty()
.SH SYNOPSIS
The \f[B]\f[CB]Object.defineProperty()\f[B]\f[R] static method defines a
new property directly on an object, or modifies an existing property on
an object, and returns the object.
.IP
.EX
\f[B]const\f[R] object1 = {};

Object.defineProperty(object1, \(dqproperty1\(dq, {
  value: 42,
  writable: \f[B]false\f[R],
});

object1.property1 = 77;
\f[I]// Throws an error in strict mode\f[R]

console.log(object1.property1);
\f[I]// Expected output: 42\f[R]
.EE
.SH SYNTAX
.IP
.EX
Object.defineProperty(obj, prop, descriptor)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object on which to define the property.
.TP
\f[B]prop\f[R]
A string or \f[CR]Symbol\f[R] specifying the key of the property to be
defined or modified.
.TP
\f[B]descriptor\f[R]
The descriptor for the property being defined or modified.
.SS Return value
The object that was passed to the function, with the specified property
added or modified.
.SH DESCRIPTION
\f[CR]Object.defineProperty()\f[R] allows a precise addition to or
modification of a property on an object.
Normal property addition through assignment creates properties which
show up during property enumeration (\f[CR]for...in\f[R],
\f[CR]Object.keys()\f[R], etc.), whose values may be changed and which
may be deleted.
This method allows these extra details to be changed from their
defaults.
By default, properties added using \f[CR]Object.defineProperty()\f[R]
are not writable, not enumerable, and not configurable.
In addition, \f[CR]Object.defineProperty()\f[R] uses the
\f[CR][[DefineOwnProperty]]\f[R] internal method, instead of
\f[CR][[Set]]\f[R], so it does not invoke setters, even when the
property is already present.
.PP
Property descriptors present in objects come in two main flavors: data
descriptors and accessor descriptors.
A \f[B]data descriptor\f[R] is a property with a value that may or may
not be writable.
An \f[B]accessor descriptor\f[R] is a property described by a
getter\-setter pair of functions.
A descriptor must be one of these two flavors; it cannot be both.
.PP
Both data and accessor descriptors are objects.
They share the following optional keys (please note: the
\f[B]defaults\f[R] mentioned here are in the case of defining properties
using \f[CR]Object.defineProperty()\f[R]):
.TP
\f[B]configurable\f[R]
when this is set to \f[CR]false\f[R],
.RS
.IP \(bu 2
the type of this property cannot be changed between data property and
accessor property, and
.IP \(bu 2
the property may not be deleted, and
.IP \(bu 2
other attributes of its descriptor cannot be changed (however, if
it\(cqs a data descriptor with \f[CR]writable: true\f[R], the
\f[CR]value\f[R] can be changed, and \f[CR]writable\f[R] can be changed
to \f[CR]false\f[R]).
.PP
\f[B]Defaults to \f[CB]false\f[B].\f[R]
.RE
.TP
\f[B]enumerable\f[R]
\f[CR]true\f[R] if and only if this property shows up during enumeration
of the properties on the corresponding object.
\f[B]Defaults to \f[CB]false\f[B].\f[R]
.PP
A \f[B]data descriptor\f[R] also has the following optional keys:
.TP
\f[B]value\f[R]
The value associated with the property.
Can be any valid JavaScript value (number, object, function, etc.).
\f[B]Defaults to \f[CB]undefined\f[B].\f[R]
.TP
\f[B]writable\f[R]
\f[CR]true\f[R] if the value associated with the property may be changed
with an assignment operator.
\f[B]Defaults to \f[CB]false\f[B].\f[R]
.PP
An \f[B]accessor descriptor\f[R] also has the following optional keys:
.TP
\f[B]get\f[R]
A function which serves as a getter for the property, or
\f[CR]undefined\f[R] if there is no getter.
When the property is accessed, this function is called without arguments
and with \f[CR]this\f[R] set to the object through which the property is
accessed (this may not be the object on which the property is defined
due to inheritance).
The return value will be used as the value of the property.
\f[B]Defaults to \f[CB]undefined\f[B].\f[R]
.TP
\f[B]set\f[R]
A function which serves as a setter for the property, or
\f[CR]undefined\f[R] if there is no setter.
When the property is assigned, this function is called with one argument
(the value being assigned to the property) and with \f[CR]this\f[R] set
to the object through which the property is assigned.
\f[B]Defaults to \f[CB]undefined\f[B].\f[R]
.PP
If a descriptor doesn\(cqt have any of the \f[CR]value\f[R],
\f[CR]writable\f[R], \f[CR]get\f[R], and \f[CR]set\f[R] keys, it is
treated as a data descriptor.
If a descriptor is both a data descriptor (because it has
\f[CR]value\f[R] or \f[CR]writable\f[R]) and an accessor descriptor
(because it has \f[CR]get\f[R] or \f[CR]set\f[R]), an exception is
thrown.
.PP
These attributes are not necessarily the descriptor\(cqs own properties.
Inherited properties will be considered as well.
In order to ensure these defaults are preserved, you might freeze
existing objects in the descriptor object\(cqs prototype chain upfront,
specify all options explicitly, or create a \f[CR]null\f[R]\-prototype
object.
.IP
.EX
\f[B]const\f[R] obj = {};
\f[I]// 1. Using a null prototype: no inherited properties\f[R]
\f[B]const\f[R] descriptor = Object.create(\f[B]null\f[R]);
descriptor.value = \(dqstatic\(dq;

\f[I]// not enumerable, not configurable, not writable as defaults\f[R]
Object.defineProperty(obj, \(dqkey\(dq, descriptor);

\f[I]// 2. Being explicit by using a throw\-away object literal with all attributes present\f[R]
Object.defineProperty(obj, \(dqkey2\(dq, {
  enumerable: \f[B]false\f[R],
  configurable: \f[B]false\f[R],
  writable: \f[B]false\f[R],
  value: \(dqstatic\(dq,
});

\f[I]// 3. Prevents adding or removing the object prototype properties\f[R]
\f[I]// (value, get, set, enumerable, writable, configurable)\f[R]
Object.freeze(Object.prototype);
.EE
.PP
When the property already exists, \f[CR]Object.defineProperty()\f[R]
attempts to modify the property according to the values in the
descriptor and the property\(cqs current configuration.
.PP
If the old descriptor had its \f[CR]configurable\f[R] attribute set to
\f[CR]false\f[R], the property is said to be
\f[I]non\-configurable\f[R].
It is not possible to change any attribute of a non\-configurable
accessor property, and it is not possible to switch between data and
accessor property types.
For data properties with \f[CR]writable: true\f[R], it is possible to
modify the value and change the \f[CR]writable\f[R] attribute from
\f[CR]true\f[R] to \f[CR]false\f[R].
A \f[CR]TypeError\f[R] is thrown when attempts are made to change
non\-configurable property attributes (except \f[CR]value\f[R] and
\f[CR]writable\f[R], if permitted), except when defining a value same as
the original value on a data property.
.PP
When the current property is configurable, defining an attribute to
\f[CR]undefined\f[R] effectively deletes it.
For example, if \f[CR]o.k\f[R] is an accessor property,
\f[CR]Object.defineProperty(o, \(dqk\(dq, { set: undefined })\f[R] will
remove the setter, making \f[CR]k\f[R] only have a getter and become
readonly.
If an attribute is absent from the new descriptor, the old descriptor
attribute\(cqs value is kept (it won\(cqt be implicitly re\-defined to
\f[CR]undefined\f[R]).
It is possible to toggle between data and accessor property by giving a
descriptor of a different \(lqflavor\(rq.
For example, if the new descriptor is a data descriptor (with
\f[CR]value\f[R] or \f[CR]writable\f[R]), the original descriptor\(cqs
\f[CR]get\f[R] and \f[CR]set\f[R] attributes will both be dropped.
.SH EXAMPLES
.SS Creating a property
When the property specified doesn\(cqt exist in the object,
\f[CR]Object.defineProperty()\f[R] creates a new property as described.
Fields may be omitted from the descriptor and default values for those
fields are inputted.
.IP
.EX
\f[B]const\f[R] o = {}; \f[I]// Creates a new object\f[R]

\f[I]// Example of an object property added\f[R]
\f[I]// with defineProperty with a data property descriptor\f[R]
Object.defineProperty(o, \(dqa\(dq, {
  value: 37,
  writable: \f[B]true\f[R],
  enumerable: \f[B]true\f[R],
  configurable: \f[B]true\f[R],
});
\f[I]// \(aqa\(aq property exists in the o object and its value is 37\f[R]

\f[I]// Example of an object property added\f[R]
\f[I]// with defineProperty with an accessor property descriptor\f[R]
\f[B]let\f[R] bValue = 38;
Object.defineProperty(o, \(dqb\(dq, {
  \f[B]get\f[R]() {
    \f[B]return\f[R] bValue;
  },
  \f[B]set\f[R](newValue) {
    bValue = newValue;
  },
  enumerable: \f[B]true\f[R],
  configurable: \f[B]true\f[R],
});
o.b; \f[I]// 38\f[R]
\f[I]// \(aqb\(aq property exists in the o object and its value is 38\f[R]
\f[I]// The value of o.b is now always identical to bValue,\f[R]
\f[I]// unless o.b is redefined\f[R]

\f[I]// You cannot try to mix both:\f[R]
Object.defineProperty(o, \(dqconflict\(dq, {
  value: 0x9f91102,
  \f[B]get\f[R]() {
    \f[B]return\f[R] 0xdeadbeef;
  },
});
\f[I]// throws a TypeError: value appears\f[R]
\f[I]// only in data descriptors,\f[R]
\f[I]// get appears only in accessor descriptors\f[R]
.EE
.SS Modifying a property
When modifying an existing property, the current property configuration
determines if the operator succeeds, does nothing, or throws a
\f[CR]TypeError\f[R].
.SS Writable attribute
When the \f[CR]writable\f[R] property attribute is \f[CR]false\f[R], the
property is said to be \(lqnon\-writable\(rq.
It cannot be reassigned.
Trying to write to a non\-writable property doesn\(cqt change it and
results in an error in strict mode.
.IP
.EX
\f[B]const\f[R] o = {}; \f[I]// Creates a new object\f[R]

Object.defineProperty(o, \(dqa\(dq, {
  value: 37,
  writable: \f[B]false\f[R],
});

console.log(o.a); \f[I]// 37\f[R]
o.a = 25; \f[I]// No error thrown\f[R]
\f[I]// (it would throw in strict mode,\f[R]
\f[I]// even if the value had been the same)\f[R]
console.log(o.a); \f[I]// 37; the assignment didn\(aqt work\f[R]

\f[I]// strict mode\f[R]
(() \f[B]=>\f[R] {
  \(dquse strict\(dq;
  \f[B]const\f[R] o = {};
  Object.defineProperty(o, \(dqb\(dq, {
    value: 2,
    writable: \f[B]false\f[R],
  });
  o.b = 3; \f[I]// throws TypeError: \(dqb\(dq is read\-only\f[R]
  \f[B]return\f[R] o.b; \f[I]// returns 2 without the line above\f[R]
})();
.EE
.SS Enumerable attribute
The \f[CR]enumerable\f[R] property attribute defines whether the
property is considered by \f[CR]Object.assign()\f[R] or the spread
operator.
For non\-\f[CR]Symbol\f[R] properties, it also defines whether it shows
up in a \f[CR]for...in\f[R] loop and \f[CR]Object.keys()\f[R] or not.
For more information, see Enumerability and ownership of properties.
.IP
.EX
\f[B]const\f[R] o = {};
Object.defineProperty(o, \(dqa\(dq, {
  value: 1,
  enumerable: \f[B]true\f[R],
});
Object.defineProperty(o, \(dqb\(dq, {
  value: 2,
  enumerable: \f[B]false\f[R],
});
Object.defineProperty(o, \(dqc\(dq, {
  value: 3,
}); \f[I]// enumerable defaults to false\f[R]
o.d = 4; \f[I]// enumerable defaults to true when creating a property by setting it\f[R]
Object.defineProperty(o, Symbol.for(\(dqe\(dq), {
  value: 5,
  enumerable: \f[B]true\f[R],
});
Object.defineProperty(o, Symbol.for(\(dqf\(dq), {
  value: 6,
  enumerable: \f[B]false\f[R],
});

\f[B]for\f[R] (\f[B]const\f[R] i \f[B]in\f[R] o) {
  console.log(i);
}
\f[I]// Logs \(aqa\(aq and \(aqd\(aq (always in that order)\f[R]

Object.keys(o); \f[I]// [\(aqa\(aq, \(aqd\(aq]\f[R]

o.propertyIsEnumerable(\(dqa\(dq); \f[I]// true\f[R]
o.propertyIsEnumerable(\(dqb\(dq); \f[I]// false\f[R]
o.propertyIsEnumerable(\(dqc\(dq); \f[I]// false\f[R]
o.propertyIsEnumerable(\(dqd\(dq); \f[I]// true\f[R]
o.propertyIsEnumerable(Symbol.for(\(dqe\(dq)); \f[I]// true\f[R]
o.propertyIsEnumerable(Symbol.for(\(dqf\(dq)); \f[I]// false\f[R]

\f[B]const\f[R] p = { ...o };
p.a; \f[I]// 1\f[R]
p.b; \f[I]// undefined\f[R]
p.c; \f[I]// undefined\f[R]
p.d; \f[I]// 4\f[R]
p[Symbol.for(\(dqe\(dq)]; \f[I]// 5\f[R]
p[Symbol.for(\(dqf\(dq)]; \f[I]// undefined\f[R]
.EE
.SS Configurable attribute
The \f[CR]configurable\f[R] attribute controls whether the property can
be deleted from the object and whether its attributes (other than
\f[CR]value\f[R] and \f[CR]writable\f[R]) can be changed.
.PP
This example illustrates a non\-configurable accessor property.
.IP
.EX
\f[B]const\f[R] o = {};
Object.defineProperty(o, \(dqa\(dq, {
  \f[B]get\f[R]() {
    \f[B]return\f[R] 1;
  },
  configurable: \f[B]false\f[R],
});

Object.defineProperty(o, \(dqa\(dq, {
  configurable: \f[B]true\f[R],
}); \f[I]// throws a TypeError\f[R]
Object.defineProperty(o, \(dqa\(dq, {
  enumerable: \f[B]true\f[R],
}); \f[I]// throws a TypeError\f[R]
Object.defineProperty(o, \(dqa\(dq, {
  \f[B]set\f[R]() {},
}); \f[I]// throws a TypeError (set was undefined previously)\f[R]
Object.defineProperty(o, \(dqa\(dq, {
  \f[B]get\f[R]() {
    \f[B]return\f[R] 1;
  },
}); \f[I]// throws a TypeError\f[R]
\f[I]// (even though the new get does exactly the same thing)\f[R]
Object.defineProperty(o, \(dqa\(dq, {
  value: 12,
}); \f[I]// throws a TypeError\f[R]
\f[I]// (\(aqvalue\(aq can be changed when \(aqconfigurable\(aq is false, but only when the property is a writable data property)\f[R]

console.log(o.a); \f[I]// 1\f[R]
\f[B]delete\f[R] o.a; \f[I]// Nothing happens; throws an error in strict mode\f[R]
console.log(o.a); \f[I]// 1\f[R]
.EE
.PP
If the \f[CR]configurable\f[R] attribute of \f[CR]o.a\f[R] had been
\f[CR]true\f[R], none of the errors would be thrown and the property
would be deleted at the end.
.PP
This example illustrates a non\-configurable but writable data property.
The property\(cqs \f[CR]value\f[R] can still be changed, and
\f[CR]writable\f[R] can still be toggled from \f[CR]true\f[R] to
\f[CR]false\f[R].
.IP
.EX
\f[B]const\f[R] o = {};
Object.defineProperty(o, \(dqb\(dq, {
  writable: \f[B]true\f[R],
  configurable: \f[B]false\f[R],
});
console.log(o.b); \f[I]// undefined\f[R]
Object.defineProperty(o, \(dqb\(dq, {
  value: 1,
}); \f[I]// Even when configurable is false, because the object is writable, we may still replace the value\f[R]
console.log(o.b); \f[I]// 1\f[R]
o.b = 2; \f[I]// We can change the value with assignment operators as well\f[R]
console.log(o.b); \f[I]// 2\f[R]
\f[I]// Toggle the property\(aqs writability\f[R]
Object.defineProperty(o, \(dqb\(dq, {
  writable: \f[B]false\f[R],
});
Object.defineProperty(o, \(dqb\(dq, {
  value: 1,
}); \f[I]// TypeError: because the property is neither writable nor configurable, it cannot be modified\f[R]
\f[I]// At this point, there\(aqs no way to further modify \(aqb\(aq\f[R]
\f[I]// or restore its writability\f[R]
.EE
.PP
This example illustrates a configurable but non\-writable data property.
The property\(cqs \f[CR]value\f[R] may still be replaced with
\f[CR]defineProperty\f[R] (but not with assignment operators), and
\f[CR]writable\f[R] may be toggled.
.IP
.EX
\f[B]const\f[R] o = {};
Object.defineProperty(o, \(dqb\(dq, {
  writable: \f[B]false\f[R],
  configurable: \f[B]true\f[R],
});
Object.defineProperty(o, \(dqb\(dq, {
  value: 1,
}); \f[I]// We can replace the value with defineProperty\f[R]
console.log(o.b); \f[I]// 1\f[R]
o.b = 2; \f[I]// throws TypeError in strict mode: cannot change a non\-writable property\(aqs value with assignment\f[R]
.EE
.PP
This example illustrates a non\-configurable and non\-writable data
property.
There\(cqs no way to update any attribute of the property, including its
\f[CR]value\f[R].
.IP
.EX
\f[B]const\f[R] o = {};
Object.defineProperty(o, \(dqb\(dq, {
  writable: \f[B]false\f[R],
  configurable: \f[B]false\f[R],
});
Object.defineProperty(o, \(dqb\(dq, {
  value: 1,
}); \f[I]// TypeError: the property cannot be modified because it is neither writable nor configurable.\f[R]
.EE
.SS Adding properties and default values
It is important to consider the way default values of attributes are
applied.
There is often a difference between using property accessors to assign a
value and using \f[CR]Object.defineProperty()\f[R], as shown in the
example below.
.IP
.EX
\f[B]const\f[R] o = {};

o.a = 1;
\f[I]// is equivalent to:\f[R]
Object.defineProperty(o, \(dqa\(dq, {
  value: 1,
  writable: \f[B]true\f[R],
  configurable: \f[B]true\f[R],
  enumerable: \f[B]true\f[R],
});

\f[I]// On the other hand,\f[R]
Object.defineProperty(o, \(dqa\(dq, { value: 1 });
\f[I]// is equivalent to:\f[R]
Object.defineProperty(o, \(dqa\(dq, {
  value: 1,
  writable: \f[B]false\f[R],
  configurable: \f[B]false\f[R],
  enumerable: \f[B]false\f[R],
});
.EE
.SS Custom setters and getters
The example below shows how to implement a self\-archiving object.
When \f[CR]temperature\f[R] property is set, the \f[CR]archive\f[R]
array gets a log entry.
.IP
.EX
\f[B]function\f[R] Archiver() {
  \f[B]let\f[R] temperature = \f[B]null\f[R];
  \f[B]const\f[R] archive = [];

  Object.defineProperty(\f[B]this\f[R], \(dqtemperature\(dq, {
    \f[B]get\f[R]() {
      console.log(\(dqget!\(dq);
      \f[B]return\f[R] temperature;
    },
    \f[B]set\f[R](value) {
      temperature = value;
      archive.push({ val: temperature });
    },
  });

  \f[B]this\f[R].getArchive = () \f[B]=>\f[R] archive;
}

\f[B]const\f[R] arc = \f[B]new\f[R] Archiver();
arc.temperature; \f[I]// \(aqget!\(aq\f[R]
arc.temperature = 11;
arc.temperature = 13;
arc.getArchive(); \f[I]// [{ val: 11 }, { val: 13 }]\f[R]
.EE
.PP
In this example, a getter always returns the same value.
.IP
.EX
\f[B]const\f[R] pattern = {
  \f[B]get\f[R]() {
    \f[B]return\f[R] \(dqI always return this string, whatever you have assigned\(dq;
  },
  \f[B]set\f[R]() {
    \f[B]this\f[R].myName = \(dqthis is my name string\(dq;
  },
};

\f[B]function\f[R] TestDefineSetAndGet() {
  Object.defineProperty(\f[B]this\f[R], \(dqmyProperty\(dq, pattern);
}

\f[B]const\f[R] instance = \f[B]new\f[R] TestDefineSetAndGet();
instance.myProperty = \(dqtest\(dq;
console.log(instance.myProperty);
\f[I]// I always return this string, whatever you have assigned\f[R]

console.log(instance.myName); \f[I]// this is my name string\f[R]
.EE
.SS Inheritance of properties
If an accessor property is inherited, its \f[CR]get\f[R] and
\f[CR]set\f[R] methods will be called when the property is accessed and
modified on descendant objects.
If these methods use a variable to store the value, this value will be
shared by all objects.
.IP
.EX
\f[B]function\f[R] MyClass() {}

\f[B]let\f[R] value;
Object.defineProperty(MyClass.prototype, \(dqx\(dq, {
  \f[B]get\f[R]() {
    \f[B]return\f[R] value;
  },
  \f[B]set\f[R](x) {
    value = x;
  },
});

\f[B]const\f[R] a = \f[B]new\f[R] MyClass();
\f[B]const\f[R] b = \f[B]new\f[R] MyClass();
a.x = 1;
console.log(b.x); \f[I]// 1\f[R]
.EE
.PP
This can be fixed by storing the value in another property.
In \f[CR]get\f[R] and \f[CR]set\f[R] methods, \f[CR]this\f[R] points to
the object which is used to access or modify the property.
.IP
.EX
\f[B]function\f[R] MyClass() {}

Object.defineProperty(MyClass.prototype, \(dqx\(dq, {
  \f[B]get\f[R]() {
    \f[B]return\f[R] \f[B]this\f[R].storedX;
  },
  \f[B]set\f[R](x) {
    \f[B]this\f[R].storedX = x;
  },
});

\f[B]const\f[R] a = \f[B]new\f[R] MyClass();
\f[B]const\f[R] b = \f[B]new\f[R] MyClass();
a.x = 1;
console.log(b.x); \f[I]// undefined\f[R]
.EE
.PP
Unlike accessor properties, data properties are always set on the object
itself, not on a prototype.
However, if a non\-writable data property is inherited, it is still
prevented from being modified on the object.
.IP
.EX
\f[B]function\f[R] MyClass() {}

MyClass.prototype.x = 1;
Object.defineProperty(MyClass.prototype, \(dqy\(dq, {
  writable: \f[B]false\f[R],
  value: 1,
});

\f[B]const\f[R] a = \f[B]new\f[R] MyClass();
a.x = 2;
console.log(a.x); \f[I]// 2\f[R]
console.log(MyClass.prototype.x); \f[I]// 1\f[R]
a.y = 2; \f[I]// Ignored, throws in strict mode\f[R]
console.log(a.y); \f[I]// 1\f[R]
console.log(MyClass.prototype.y); \f[I]// 1\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
Enumerability and ownership of properties
.IP \(bu 2
\f[CR]Object.defineProperties()\f[R]
.IP \(bu 2
\f[CR]Object.prototype.propertyIsEnumerable()\f[R]
.IP \(bu 2
\f[CR]Object.getOwnPropertyDescriptor()\f[R]
.IP \(bu 2
\f[CR]get\f[R]
.IP \(bu 2
\f[CR]set\f[R]
.IP \(bu 2
\f[CR]Object.create()\f[R]
.IP \(bu 2
\f[CR]Reflect.defineProperty()\f[R]
