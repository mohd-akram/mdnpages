.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATEBUFFER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createBuffer \- GPUDevice: createBuffer() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createBuffer()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPUBuffer\f[R] in which
to store raw data to use in GPU operations.
.SH SYNTAX
.IP
.EX
createBuffer(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]mappedAtCreation\f[R] \f[I](optional)\f[R]
A boolean.
If set to \f[CR]true\f[R], the buffer will be mapped upon creation,
meaning that you can set the values inside the buffer immediately by
calling \f[CR]GPUBuffer.getMappedRange()\f[R].
The default value is \f[CR]false\f[R].
.RS
.PP
Note that it is valid to set \f[CR]mappedAtCreation: true\f[R] so you
can set the buffer\(cqs initial data, even if the
\f[CR]GPUBufferUsage.MAP_READ\f[R] or
\f[CR]GPUBufferUsage.MAP_WRITE\f[R] usage flags are not set.
.RE
.TP
\f[B]size\f[R]
A number representing the size of the buffer, in bytes.
.TP
\f[B]usage\f[R]
The bitwise flags representing the allowed usages for the
\f[CR]GPUBuffer\f[R].
The possible values are in the \f[CR]GPUBuffer.usage\f[R] value table.
.RS
.PP
Note that multiple possible usages can be specified by separating values
with bitwise OR, for example:
\f[CR]GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE\f[R].
.RE
.RE
.SS Return value
A \f[CR]GPUBuffer\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createBuffer()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUBuffer\f[R] object is returned:
.IP \(bu 2
A valid \f[CR]usage\f[R] is specified.
.IP \(bu 2
\f[CR]GPUBufferUsage.MAP_READ\f[R] is specified, and no additional flags
are specified other than \f[CR]GPUBufferUsage.COPY_DST\f[R].
.IP \(bu 2
\f[CR]GPUBufferUsage.MAP_WRITE\f[R] is specified, and no additional
flags are specified other than \f[CR]GPUBufferUsage.COPY_SRC\f[R].
.IP \(bu 2
\f[CR]mappedAtCreation: true\f[R] is specified, and the specified
\f[CR]size\f[R] is a multiple of 4.
.RS
.PP
\f[B]Note:\f[R] If the buffer allocation fails without any specific
side\-effects, a \f[CR]GPUOutOfMemoryError\f[R] object is generated.
.RE
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
, we create an output buffer to read GPU calculations to, and a staging
buffer to be mapped for JavaScript access.
.IP
.EX
\f[B]const\f[R] output = device.createBuffer({
  size: BUFFER_SIZE,
  usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,
});

\f[B]const\f[R] stagingBuffer = device.createBuffer({
  size: BUFFER_SIZE,
  usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,
});
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
