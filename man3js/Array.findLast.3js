.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAY.FINDLAST" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.findLast \- Array.prototype.findLast()
.SH SYNOPSIS
The \f[B]\f[CB]findLast()\f[B]\f[R] method of \f[CR]Array\f[R] instances
iterates the array in reverse order and returns the value of the first
element that satisfies the provided testing function.
If no elements satisfy the testing function, \f[CR]undefined\f[R] is
returned.
.PP
If you need to find:
.IP \(bu 2
the \f[I]first\f[R] element that matches, use \f[CR]find()\f[R].
.IP \(bu 2
the \f[I]index\f[R] of the last matching element in the array, use
\f[CR]findLastIndex()\f[R].
.IP \(bu 2
the \f[I]index of a value\f[R], use \f[CR]indexOf()\f[R].
(It\(cqs similar to \f[CR]findIndex()\f[R], but checks each element for
equality with the value instead of using a testing function.)
.IP \(bu 2
whether a value \f[I]exists\f[R] in an array, use \f[CR]includes()\f[R].
Again, it checks each element for equality with the value instead of
using a testing function.
.IP \(bu 2
if any element satisfies the provided testing function, use
\f[CR]some()\f[R].
.IP
.EX
\f[B]const\f[R] array1 = [5, 12, 50, 130, 44];

\f[B]const\f[R] found = array1.findLast((element) \f[B]=>\f[R] element > 45);

console.log(found);
\f[I]// Expected output: 130\f[R]
.EE
.SH SYNTAX
.IP
.EX
findLast(callbackFn)
findLast(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a truthy value to indicate a matching element has been
found, and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[CR]findLast()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
The last (highest\-index) element in the array that satisfies the
provided testing function; \f[CR]undefined\f[R] if no matching element
is found.
.SH DESCRIPTION
The \f[CR]findLast()\f[R] method is an iterative method.
It calls a provided \f[CR]callbackFn\f[R] function once for each element
in an array in descending\-index order, until \f[CR]callbackFn\f[R]
returns a truthy value.
\f[CR]findLast()\f[R] then returns that element and stops iterating
through the array.
If \f[CR]callbackFn\f[R] never returns a truthy value,
\f[CR]findLast()\f[R] returns \f[CR]undefined\f[R].
Read the iterative methods section for more information about how these
methods work in general.
.PP
\f[CR]callbackFn\f[R] is invoked for \f[I]every\f[R] index of the array,
not just those with assigned values.
Empty slots in sparse arrays behave the same as \f[CR]undefined\f[R].
.PP
The \f[CR]findLast()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Find last object in an array matching on element properties
This example shows how you might create a test based on the properties
of array elements.
.IP
.EX
\f[B]const\f[R] inventory = [
  { name: \(dqapples\(dq, quantity: 2 },
  { name: \(dqbananas\(dq, quantity: 0 },
  { name: \(dqfish\(dq, quantity: 1 },
  { name: \(dqcherries\(dq, quantity: 5 },
];

\f[I]// return true inventory stock is low\f[R]
\f[B]function\f[R] isNotEnough(item) {
  \f[B]return\f[R] item.quantity < 2;
}

console.log(inventory.findLast(isNotEnough));
\f[I]// { name: \(dqfish\(dq, quantity: 1 }\f[R]
.EE
.SS Using arrow function and destructuring
The previous example might be written using an arrow function and object
destructuring:
.IP
.EX
\f[B]const\f[R] inventory = [
  { name: \(dqapples\(dq, quantity: 2 },
  { name: \(dqbananas\(dq, quantity: 0 },
  { name: \(dqfish\(dq, quantity: 1 },
  { name: \(dqcherries\(dq, quantity: 5 },
];

\f[B]const\f[R] result = inventory.findLast(({ quantity }) \f[B]=>\f[R] quantity < 2);

console.log(result);
\f[I]// { name: \(dqfish\(dq, quantity: 1 }\f[R]
.EE
.SS Find the last prime number in an array
The following example returns the last element in the array that is a
prime number, or \f[CR]undefined\f[R] if there is no prime number.
.IP
.EX
\f[B]function\f[R] isPrime(element) {
  \f[B]if\f[R] (element % 2 === 0 || element < 2) {
    \f[B]return\f[R] \f[B]false\f[R];
  }
  \f[B]for\f[R] (\f[B]let\f[R] factor = 3; factor <= Math.sqrt(element); factor += 2) {
    \f[B]if\f[R] (element % factor === 0) {
      \f[B]return\f[R] \f[B]false\f[R];
    }
  }
  \f[B]return\f[R] \f[B]true\f[R];
}

console.log([4, 6, 8, 12].findLast(isPrime)); \f[I]// undefined, not found\f[R]
console.log([4, 5, 7, 8, 9, 11, 12].findLast(isPrime)); \f[I]// 11\f[R]
.EE
.SS Using the third argument of callbackFn
The \f[CR]array\f[R] argument is useful if you want to access another
element in the array, especially when you don\(cqt have an existing
variable that refers to the array.
The following example first uses \f[CR]filter()\f[R] to extract the
positive values and then uses \f[CR]findLast()\f[R] to find the last
element that is less than its neighbors.
.IP
.EX
\f[B]const\f[R] numbers = [3, \-1, 1, 4, 1, 5, 9, 2, 6];
\f[B]const\f[R] lastTrough = numbers
  .filter((num) \f[B]=>\f[R] num > 0)
  .findLast((num, idx, arr) \f[B]=>\f[R] {
    \f[I]// Without the arr argument, there\(aqs no way to easily access the\f[R]
    \f[I]// intermediate array without saving it to a variable.\f[R]
    \f[B]if\f[R] (idx > 0 && num >= arr[idx \- 1]) \f[B]return\f[R] \f[B]false\f[R];
    \f[B]if\f[R] (idx < arr.length \- 1 && num >= arr[idx + 1]) \f[B]return\f[R] \f[B]false\f[R];
    \f[B]return\f[R] \f[B]true\f[R];
  });
console.log(lastTrough); \f[I]// 2\f[R]
.EE
.SS Using findLast() on sparse arrays
Empty slots in sparse arrays \f[I]are\f[R] visited, and are treated the
same as \f[CR]undefined\f[R].
.IP
.EX
\f[I]// Declare array with no elements at indexes 2, 3, and 4\f[R]
\f[B]const\f[R] array = [0, 1, , , , 5, 6];

\f[I]// Shows all indexes, not just those with assigned values\f[R]
array.findLast((value, index) \f[B]=>\f[R] {
  console.log(\(gaVisited index ${index} with value ${value}\(ga);
  \f[B]return\f[R] \f[B]false\f[R];
});
\f[I]// Visited index 6 with value 6\f[R]
\f[I]// Visited index 5 with value 5\f[R]
\f[I]// Visited index 4 with value undefined\f[R]
\f[I]// Visited index 3 with value undefined\f[R]
\f[I]// Visited index 2 with value undefined\f[R]
\f[I]// Visited index 1 with value 1\f[R]
\f[I]// Visited index 0 with value 0\f[R]

\f[I]// Shows all indexes, including deleted\f[R]
array.findLast((value, index) \f[B]=>\f[R] {
  \f[I]// Delete element 5 on first iteration\f[R]
  \f[B]if\f[R] (index === 6) {
    console.log(\(gaDeleting array[5] with value ${array[5]}\(ga);
    \f[B]delete\f[R] array[5];
  }
  \f[I]// Element 5 is still visited even though deleted\f[R]
  console.log(\(gaVisited index ${index} with value ${value}\(ga);
  \f[B]return\f[R] \f[B]false\f[R];
});
\f[I]// Deleting array[5] with value 5\f[R]
\f[I]// Visited index 6 with value 6\f[R]
\f[I]// Visited index 5 with value undefined\f[R]
\f[I]// Visited index 4 with value undefined\f[R]
\f[I]// Visited index 3 with value undefined\f[R]
\f[I]// Visited index 2 with value undefined\f[R]
\f[I]// Visited index 1 with value 1\f[R]
\f[I]// Visited index 0 with value 0\f[R]
.EE
.SS Calling findLast() on non\-array objects
The \f[CR]findLast()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each property whose key is a
nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: 2,
  1: 7.3,
  2: 4,
  3: 3, \f[I]// ignored by findLast() since length is 3\f[R]
};
console.log(
  Array.prototype.findLast.call(arrayLike, (x) \f[B]=>\f[R] Number.isInteger(x)),
); \f[I]// 4\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#array-find-from-last
Polyfill of \f[CR]Array.prototype.findLast\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/array.prototype.findlast
es\-shims polyfill of \f[CR]Array.prototype.findLast\f[R]
.UE \c
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array\f[R]
.IP \(bu 2
\f[CR]Array.prototype.find()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.findIndex()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.findLastIndex()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.includes()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.filter()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.every()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.some()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.findLast()\f[R]
