.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HTMLDIALOGELEMENT.REQUESTCLOSE" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLDialogElement.requestClose \- HTMLDialogElement: requestClose()
method
.SH SYNOPSIS
The \f[B]\f[CB]requestClose()\f[B]\f[R] method of the
\f[CR]HTMLDialogElement\f[R] interface requests to close the
\f[CR]<dialog>\f[R].
An optional string may be passed as an argument, updating the
\f[CR]returnValue\f[R] of the dialog.
.PP
This method differs from the \f[CR]HTMLDialogElement.close()\f[R] method
in that it fires a \f[CR]cancel\f[R] event before firing the
\f[CR]close\f[R] event.
Authors can call \f[CR]Event.preventDefault()\f[R] in the handler for
the \f[CR]cancel\f[R] event to prevent the dialog from closing.
.PP
This method exposes the same behavior as the dialog\(cqs internal close
watcher.
.SH SYNTAX
.IP
.EX
requestClose()
requestClose(returnValue)
.EE
.SS Parameters
.TP
\f[B]returnValue\f[R] \f[I](optional)\f[R]
A string representing an updated value for the
\f[CR]HTMLDialogElement.returnValue\f[R] of the dialog.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Using requestClose()
The following example shows a simple button that, when clicked, opens a
\f[CR]<dialog>\f[R] containing a form, via the \f[CR]showModal()\f[R]
method.
Once open you can click the \f[B]X\f[R] button to request to close the
dialog (via the \f[CR]HTMLDialogElement.requestClose()\f[R] method), or
submit the form via the \f[B]Confirm\f[R] button.
.SS HTML
.IP
.EX
\f[I]<!\-\- Simple pop\-up dialog box, containing a form \-\->\f[R]
<\f[B]dialog\f[R] id=\(dqfavDialog\(dq>
  <\f[B]form\f[R] method=\(dqdialog\(dq>
    <\f[B]button\f[R] type=\(dqbutton\(dq id=\(dqclose\(dq aria\-label=\(dqclose\(dq formnovalidate>
      X
    </\f[B]button\f[R]>
    <\f[B]section\f[R]>
      <\f[B]p\f[R]>
        <\f[B]label\f[R] for=\(dqfavAnimal\(dq>Favorite animal:</\f[B]label\f[R]>
        <\f[B]select\f[R] id=\(dqfavAnimal\(dq name=\(dqfavAnimal\(dq>
          <\f[B]option\f[R]></\f[B]option\f[R]>
          <\f[B]option\f[R]>Brine shrimp</\f[B]option\f[R]>
          <\f[B]option\f[R]>Red panda</\f[B]option\f[R]>
          <\f[B]option\f[R]>Spider monkey</\f[B]option\f[R]>
        </\f[B]select\f[R]>
      </\f[B]p\f[R]>
    </\f[B]section\f[R]>
    <\f[B]menu\f[R]>
      <\f[B]button\f[R] type=\(dqreset\(dq>Reset</\f[B]button\f[R]>
      <\f[B]button\f[R] type=\(dqsubmit\(dq>Confirm</\f[B]button\f[R]>
    </\f[B]menu\f[R]>
  </\f[B]form\f[R]>
</\f[B]dialog\f[R]>

<\f[B]menu\f[R]>
  <\f[B]button\f[R] id=\(dqupdateDetails\(dq>Update details</\f[B]button\f[R]>
</\f[B]menu\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] updateButton = document.getElementById(\(dqupdateDetails\(dq);
\f[B]const\f[R] closeButton = document.getElementById(\(dqclose\(dq);
\f[B]const\f[R] dialog = document.getElementById(\(dqfavDialog\(dq);

\f[I]// Update button opens a modal dialog\f[R]
updateButton.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  dialog.showModal();
});

\f[I]// Form close button requests to close the dialog box\f[R]
closeButton.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  dialog.requestClose(\(dqanimalNotChosen\(dq);
});

\f[B]function\f[R] dialogShouldNotClose() {
  \f[I]// Add logic to decide whether to allow the dialog to close.\f[R]
  \f[I]// Closing prevented by default\f[R]
  \f[B]return\f[R] \f[B]true\f[R];
}

dialog.addEventListener(\(dqcancel\(dq, (event) \f[B]=>\f[R] {
  \f[B]if\f[R] (!event.cancelable) \f[B]return\f[R];
  \f[B]if\f[R] (dialogShouldNotClose()) {
    console.log(\(dqClosing prevented\(dq);
    event.preventDefault();
  }
});
.EE
.PP
If the \(lqX\(rq button was of \f[CR]type=\(dqsubmit\(dq\f[R], the
dialog would have closed without requiring JavaScript.
A form submission closes the \f[CR]<dialog>\f[R] it is nested within if
the form\(cqs method is \f[CR]dialog\f[R], so no \(lqclose\(rq button is
required.
.SS Result
.SH SEE ALSO
.IP \(bu 2
The HTML element implementing this interface: \f[CR]<dialog>\f[R].
