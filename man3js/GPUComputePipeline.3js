.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMPUTEPIPELINE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUComputePipeline \- GPUComputePipeline
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUComputePipeline\f[B]\f[R] interface of the WebGPU API
represents a pipeline that controls the compute shader stage and can be
used in a \f[CR]GPUComputePassEncoder\f[R].
.PP
A \f[CR]GPUComputePipeline\f[R] object instance can be created using the
\f[CR]GPUDevice.createComputePipeline()\f[R] or
\f[CR]GPUDevice.createComputePipelineAsync()\f[R] methods.
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH INSTANCE METHODS
.TP
\f[B]getBindGroupLayout()\f[R]
Returns the pipeline\(cqs \f[CR]GPUBindGroupLayout\f[R] object with the
given index (i.e., included in the originating
\f[CR]GPUDevice.createComputePipeline()\f[R] or
\f[CR]GPUDevice.createComputePipelineAsync()\f[R] call\(cqs pipeline
layout).
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Basic example
Our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
\ shows a process of:
.IP \(bu 2
Creating a bind group layout with
\f[CR]GPUDevice.createBindGroupLayout()\f[R].
.IP \(bu 2
Feeding the \f[CR]bindGroupLayout\f[R] into
\f[CR]GPUDevice.createPipelineLayout()\f[R] to create a
\f[CR]GPUPipelineLayout\f[R].
.IP \(bu 2
Using that value immediately in a \f[CR]createComputePipeline()\f[R]
call to create a \f[CR]GPUComputePipeline\f[R].
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] bindGroupLayout = device.createBindGroupLayout({
  entries: [
    {
      binding: 0,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {
        type: \(dqstorage\(dq,
      },
    },
  ],
});

\f[B]const\f[R] computePipeline = device.createComputePipeline({
  layout: device.createPipelineLayout({
    bindGroupLayouts: [bindGroupLayout],
  }),
  compute: {
    module: shaderModule,
    entryPoint: \(dqmain\(dq,
  },
});

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
