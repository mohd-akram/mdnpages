.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERBUNDLE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderBundle \- GPURenderBundle
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPURenderBundle\f[B]\f[R] interface of the WebGPU API
represents a container for pre\-recorded bundles of commands.
.PP
The command bundles are encoded using a
\f[CR]GPURenderBundleEncoder\f[R]; once the desired commands have been
encoded, they are recorded into a \f[CR]GPURenderBundle\f[R] object
instance using the \f[CR]GPURenderBundleEncoder.finish()\f[R] method.
.PP
These command bundles can then be reused across multiple render passes
by passing the \f[CR]GPURenderBundle\f[R] objects into
\f[CR]GPURenderPassEncoder.executeBundles()\f[R] calls.
Reusing pre\-recoded commands can significantly improve app performance
in situations where JavaScript draw call overhead is a bottleneck.
Render bundles are most effective in situations where a batch of objects
will be drawn the same way across multiple views or frames, with the
only differences being the buffer content being used (such as updated
matrix uniforms).
.PP
A good example is VR rendering.
Recording the rendering as a render bundle and then tweaking the view
matrix and replaying it for each eye is a more efficient way to issue
draw calls for both renderings of the scene.
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH EXAMPLES
In the WebGPU Samples \c
.UR https://webgpu.github.io/webgpu-samples/samples/animometer/
Animometer example
.UE \c
, a lot of like operations are done on many different objects
simultaneously.
A render bundle is encoded using the following function:
.IP
.EX
\f[B]function\f[R] recordRenderPass(
  passEncoder: GPURenderBundleEncoder | GPURenderPassEncoder
) {
  \f[B]if\f[R] (settings.dynamicOffsets) {
    passEncoder.setPipeline(dynamicPipeline);
  } \f[B]else\f[R] {
    passEncoder.setPipeline(pipeline);
  }
  passEncoder.setVertexBuffer(0, vertexBuffer);
  passEncoder.setBindGroup(0, timeBindGroup);
  \f[B]const\f[R] dynamicOffsets = [0];
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < numTriangles; ++i) {
    \f[B]if\f[R] (settings.dynamicOffsets) {
      dynamicOffsets[0] = i * alignedUniformBytes;
      passEncoder.setBindGroup(1, dynamicBindGroup, dynamicOffsets);
    } \f[B]else\f[R] {
      passEncoder.setBindGroup(1, bindGroups[i]);
    }
    passEncoder.draw(3, 1, 0, 0);
  }
}
.EE
.PP
Later on, a \f[CR]GPURenderBundleEncoder\f[R] is created, the function
is invoked, and the render bundle is recorded using
\f[CR]GPURenderBundleEncoder.finish()\f[R]:
.IP
.EX
\f[B]const\f[R] renderBundleEncoder = device.createRenderBundleEncoder({
  colorFormats: [presentationFormat],
});
recordRenderPass(renderBundleEncoder);
\f[B]const\f[R] renderBundle = renderBundleEncoder.finish();
.EE
.PP
\f[CR]GPURenderPassEncoder.executeBundles()\f[R] is then used to reuse
the work across multiple render passes to improve performance.
Study the example code listing for the full context.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]return\f[R] \f[B]function\f[R] doDraw(timestamp) {
  \f[B]if\f[R] (startTime === \f[B]undefined\f[R]) {
    startTime = timestamp;
  }
  uniformTime[0] = (timestamp \- startTime) / 1000;
  device.queue.writeBuffer(uniformBuffer, timeOffset, uniformTime.buffer);

  renderPassDescriptor.colorAttachments[0].view = context
    .getCurrentTexture()
    .createView();

  \f[B]const\f[R] commandEncoder = device.createCommandEncoder();
  \f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

  \f[B]if\f[R] (settings.renderBundles) {
    passEncoder.executeBundles([renderBundle]);
  } \f[B]else\f[R] {
    recordRenderPass(passEncoder);
  }

  passEncoder.end();
  device.queue.submit([commandEncoder.finish()]);
};

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
