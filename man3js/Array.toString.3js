.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAY.TOSTRING" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.toString \- Array.prototype.toString()
.SH SYNOPSIS
The \f[B]\f[CB]toString()\f[B]\f[R] method of \f[CR]Array\f[R] instances
returns a string representing the specified array and its elements.
.IP
.EX
\f[B]const\f[R] array1 = [1, 2, \(dqa\(dq, \(dq1a\(dq];

console.log(array1.toString());
\f[I]// Expected output: \(dq1,2,a,1a\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
toString()
.EE
.SS Parameters
None.
.SS Return value
A string representing the elements of the array.
.SH DESCRIPTION
The \f[CR]Array\f[R] object overrides the \f[CR]toString\f[R] method of
\f[CR]Object\f[R].
The \f[CR]toString\f[R] method of arrays calls \f[CR]join()\f[R]
internally, which joins the array and returns one string containing each
array element separated by commas.
If the \f[CR]join\f[R] method is unavailable or is not a function,
\f[CR]Object.prototype.toString\f[R] is used instead, returning
\f[CR][object Array]\f[R].
.IP
.EX
\f[B]const\f[R] arr = [];
arr.join = 1; \f[I]// re\-assign \(gajoin\(ga with a non\-function\f[R]
console.log(arr.toString()); \f[I]// [object Array]\f[R]

console.log(Array.prototype.toString.call({ join: () \f[B]=>\f[R] 1 })); \f[I]// 1\f[R]
.EE
.PP
JavaScript calls the \f[CR]toString\f[R] method automatically when an
array is to be represented as a text value or when an array is referred
to in a string concatenation.
.PP
\f[CR]Array.prototype.toString\f[R] recursively converts each element,
including other arrays, to strings.
Because the string returned by \f[CR]Array.prototype.toString\f[R] does
not have delimiters, nested arrays look like they are flattened.
.IP
.EX
\f[B]const\f[R] matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];

console.log(matrix.toString()); \f[I]// 1,2,3,4,5,6,7,8,9\f[R]
.EE
.PP
When an array is cyclic (it contains an element that is itself),
browsers avoid infinite recursion by ignoring the cyclic reference.
.IP
.EX
\f[B]const\f[R] arr = [];
arr.push(1, [3, arr, 4], 2);
console.log(arr.toString()); \f[I]// 1,3,,4,2\f[R]
.EE
.SH EXAMPLES
.SS Using toString()
.IP
.EX
\f[B]const\f[R] array1 = [1, 2, \(dqa\(dq, \(dq1a\(dq];

console.log(array1.toString()); \f[I]// \(dq1,2,a,1a\(dq\f[R]
.EE
.SS Using toString() on sparse arrays
Following the behavior of \f[CR]join()\f[R], \f[CR]toString()\f[R]
treats empty slots the same as \f[CR]undefined\f[R] and produces an
extra separator:
.IP
.EX
console.log([1, , 3].toString()); \f[I]// \(aq1,,3\(aq\f[R]
.EE
.SS Calling toString() on non\-array objects
\f[CR]toString()\f[R] is generic.
It expects \f[CR]this\f[R] to have a \f[CR]join()\f[R] method; or,
failing that, uses \f[CR]Object.prototype.toString()\f[R] instead.
.IP
.EX
console.log(Array.prototype.toString.call({ join: () \f[B]=>\f[R] 1 }));
\f[I]// 1; a number\f[R]
console.log(Array.prototype.toString.call({ join: () \f[B]=>\f[R] \f[B]undefined\f[R] }));
\f[I]// undefined\f[R]
console.log(Array.prototype.toString.call({ join: \(dqnot function\(dq }));
\f[I]// \(dq[object Object]\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array\f[R]
.IP \(bu 2
\f[CR]Array.prototype.join()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.toLocaleString()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.toString()\f[R]
.IP \(bu 2
\f[CR]String.prototype.toString()\f[R]
