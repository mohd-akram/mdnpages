.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MATH.LOG" "3JS" "April 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Math.log \- Math.log()
.SH SYNOPSIS
The \f[B]\f[CB]Math.log()\f[B]\f[R] static method returns the natural
logarithm (base e) of a number.
That is
.PP
\ ∀x>0,𝙼𝚊𝚝𝚑.𝚕𝚘𝚐(𝚡)=ln(x)=the unique\ y\ such that\ ey=xx > 0,; = (x) = 
y  e\(hay = x 
.IP
.EX
\f[B]function\f[R] getBaseLog(x, y) {
  \f[B]return\f[R] Math.log(y) / Math.log(x);
}

\f[I]// 2 x 2 x 2 = 8\f[R]
console.log(getBaseLog(2, 8));
\f[I]// Expected output: 3\f[R]

\f[I]// 5 x 5 x 5 x 5 = 625\f[R]
console.log(getBaseLog(5, 625));
\f[I]// Expected output: 4\f[R]
.EE
.SH SYNTAX
.IP
.EX
Math.log(x)
.EE
.SS Parameters
.TP
\f[B]x\f[R]
A number greater than or equal to 0.
.SS Return value
The natural logarithm (base e) of \f[CR]x\f[R].
If \f[CR]x\f[R] is ±0, returns \f[CR]\-Infinity\f[R].
If \f[CR]x < 0\f[R], returns \f[CR]NaN\f[R].
.SH DESCRIPTION
Because \f[CR]log()\f[R] is a static method of \f[CR]Math\f[R], you
always use it as \f[CR]Math.log()\f[R], rather than as a method of a
\f[CR]Math\f[R] object you created (\f[CR]Math\f[R] is not a
constructor).
.PP
If you need the natural log of 2 or 10, use the constants
\f[CR]Math.LN2\f[R] or \f[CR]Math.LN10\f[R].
If you need a logarithm to base 2 or 10, use \f[CR]Math.log2()\f[R] or
\f[CR]Math.log10()\f[R].
If you need a logarithm to other bases, use
\f[CR]Math.log(x) / Math.log(otherBase)\f[R] as in the example below;
you might want to precalculate \f[CR]1 / Math.log(otherBase)\f[R] since
multiplication in \f[CR]Math.log(x) * constant\f[R] is much faster.
.PP
Beware that positive numbers very close to 1 can suffer from loss of
precision and make its natural logarithm less accurate.
In this case, you may want to use \f[CR]Math.log1p\f[R] instead.
.SH EXAMPLES
.SS Using Math.log()
.IP
.EX
Math.log(\-1); \f[I]// NaN\f[R]
Math.log(\-0); \f[I]// \-Infinity\f[R]
Math.log(0); \f[I]// \-Infinity\f[R]
Math.log(1); \f[I]// 0\f[R]
Math.log(10); \f[I]// 2.302585092994046\f[R]
Math.log(\f[B]Infinity\f[R]); \f[I]// Infinity\f[R]
.EE
.SS Using Math.log() with a different base
The following function returns the logarithm of \f[CR]y\f[R] with base
\f[CR]x\f[R] (i.e., logxy_x y):
.IP
.EX
\f[B]function\f[R] getBaseLog(x, y) {
  \f[B]return\f[R] Math.log(y) / Math.log(x);
}
.EE
.PP
If you run \f[CR]getBaseLog(10, 1000)\f[R], it returns
\f[CR]2.9999999999999996\f[R] due to floating\-point rounding, but still
very close to the actual answer of 3.
.SH SEE ALSO
.IP \(bu 2
\f[CR]Math.exp()\f[R]
.IP \(bu 2
\f[CR]Math.log1p()\f[R]
.IP \(bu 2
\f[CR]Math.log10()\f[R]
.IP \(bu 2
\f[CR]Math.log2()\f[R]
.IP \(bu 2
\f[CR]Math.pow()\f[R]
