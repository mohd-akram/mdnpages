.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "DOMPointReadOnly.fromPoint_static" "JS" "October 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMPointReadOnly.fromPoint_static \- DOMPointReadOnly: fromPoint()
static method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The static \f[B]\f[CB]DOMPointReadOnly\f[B]\f[R] method
\f[CR]fromPoint()\f[R] creates and returns a new
\f[CR]DOMPointReadOnly\f[R] object given a source point.
.PP
You can also create a new \f[CR]DOMPointReadOnly\f[R] object using the
\f[CR]DOMPointReadOnly()\f[R] constructor.
.SH SYNTAX
.IP
.EX
DOMPointReadOnly.fromPoint(sourcePoint)
.EE
.SS Parameters
.TP
\f[B]sourcePoint\f[R]
A \f[CR]DOMPoint\f[R] or \f[CR]DOMPointReadOnly\f[R] instance, or an
object containing the following properties, from which to take the
values of the new point\[cq]s properties:
.RS
.TP
\f[B]x\f[R]
An unrestricted floating\-point value indicating the
\f[CR]x\f[R]\-coordinate of the point in space.
This is generally the horizontal coordinate, with positive values being
to the right and negative values to the left.
The default value is \f[CR]0\f[R].
.TP
\f[B]y\f[R]
An unrestricted floating\-point number providing the point\[cq]s
\f[CR]y\f[R]\-coordinate.
This is the vertical coordinate, and barring any transforms applied to
the coordinate system, positive values are downward and negative values
upward toward the top of the screen.
The default is \f[CR]0\f[R].
.TP
\f[B]z\f[R]
An unrestricted floating\-point value which gives the point\[cq]s
\f[CR]z\f[R]\-coordinate, which is (assuming no transformations that
alter the situation) the depth coordinate; positive values are closer to
the user and negative values retreat back into the screen.
The default value is \f[CR]0\f[R].
.TP
\f[B]w\f[R]
The point\[cq]s \f[CR]w\f[R] perspective value, given as an unrestricted
floating\-point number.
The default is \f[CR]1\f[R].
.RE
.SS Return value
A new \f[CR]DOMPointReadOnly\f[R] object (which is identical to the
source point).
.SH EXAMPLES
.SS Creating a 2D point
This sample creates a 2D point, specifying an inline object that
includes the values to use for \f[CR]x\f[R] and \f[CR]y\f[R].
The \f[CR]z\f[R] and \f[CR]w\f[R] properties are allowed to keep their
default values (\f[CR]0\f[R] and \f[CR]1\f[R] respectively).
.IP
.EX
\f[B]const\f[R] point2D = DOMPointReadOnly.fromPoint({ x: 25, y: 25 });
.EE
.SS Creating a 3D point using an existing point
This example creates a point, \f[CR]origPoint\f[R], of type
\f[CR]DOMPoint\f[R], using \f[CR]DOMPoint()\f[R].
That point is then used as the input for \f[CR]fromPoint()\f[R] to
create a new point, \f[CR]newPoint\f[R].
.IP
.EX
\f[B]const\f[R] origPoint = \f[B]new\f[R] DOMPoint(25, 25, 100, 0.5);

\f[B]const\f[R] newPoint = DOMPointReadOnly.fromPoint(origPoint);
.EE
