.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATATRANSFERITEMLIST.CLEAR" "3JS" "June 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransferItemList.clear \- DataTransferItemList: clear() method
.SH SYNOPSIS
The \f[CR]DataTransferItemList\f[R] method \f[B]\f[CB]clear()\f[B]\f[R]
removes all \f[CR]DataTransferItem\f[R] objects from the drag data items
list, leaving the list empty.
.PP
The drag data store in which this list is kept is only writable while
handling the \f[CR]dragstart\f[R] event.
While handling \f[CR]drop\f[R], the drag data store is in read\-only
mode, and this method silently does nothing.
No exception is thrown.
.SH SYNTAX
.IP
.EX
clear()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
This example shows the use of the \f[CR]clear()\f[R] method.
.SS HTML
.IP
.EX
<\f[B]div\f[R]>
  <\f[B]p\f[R] id=\(dqsource\(dq draggable=\(dqtrue\(dq>
    Select this element, drag it to the Drop Zone and then release the selection
    to move the element.
  </\f[B]p\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] id=\(dqtarget\(dq>Drop Zone</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]margin\f[R]: 0em;
  \f[B]padding\f[R]: 2em;
}
source {
  \f[B]color\f[R]: blue;
  \f[B]border\f[R]: 1px solid black;
}
target {
  \f[B]border\f[R]: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] source = document.getElementById(\(dqsource\(dq);
\f[B]const\f[R] target = document.getElementById(\(dqtarget\(dq);

source.addEventListener(\(dqdragstart\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragStart\(dq);

  \f[I]// Add this element\(aqs id to the drag payload so the drop handler will\f[R]
  \f[I]// know which element to add to its tree\f[R]
  \f[B]const\f[R] dataList = ev.dataTransfer.items;
  dataList.add(ev.target.id, \(dqtext/plain\(dq);

  \f[I]// Add some other items to the drag payload\f[R]
  dataList.add(\(dq<p>Paragraph\&...</p>\(dq, \(dqtext/html\(dq);
  dataList.add(\(dqhttp://www.example.org\(dq, \(dqtext/uri\-list\(dq);
});

source.addEventListener(\(dqdragend\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragEnd\(dq);
  \f[B]const\f[R] dataList = ev.dataTransfer.items;

  \f[I]// Clear any remaining drag data\f[R]
  dataList.clear();
});

target.addEventListener(\(dqdrop\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqDrop\(dq);
  ev.preventDefault();

  \f[I]// Loop through the dropped items and log their data\f[R]
  \f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] ev.dataTransfer.items) {
    \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(/\(hatext\(rs/plain/)) {
      \f[I]// This item is the target node\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        ev.target.appendChild(document.getElementById(s));
      });
    } \f[B]else\f[R] \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(/\(hatext\(rs/html/)) {
      \f[I]// Drag data item is HTML\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        console.log(\(ga\&... Drop: HTML = ${s}\(ga);
      });
    } \f[B]else\f[R] \f[B]if\f[R] (item.kind === \(dqstring\(dq && item.type.match(/\(hatext\(rs/uri\-list/)) {
      \f[I]// Drag data item is URI\f[R]
      item.getAsString((s) \f[B]=>\f[R] {
        console.log(\(ga\&... Drop: URI = ${s}\(ga);
      });
    }
  }
});

target.addEventListener(\(dqdragover\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragOver\(dq);
  ev.preventDefault();

  \f[I]// Set the dropEffect to move\f[R]
  ev.dataTransfer.dropEffect = \(dqmove\(dq;
});
.EE
.SS Result
