.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SET.UNION" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.union \- Set.prototype.union()
.SH SYNOPSIS
The \f[B]\f[CB]union()\f[B]\f[R] method of \f[CR]Set\f[R] instances
takes a set and returns a new set containing elements which are in
either or both of this set and the given set.
.SH SYNTAX
.IP
.EX
union(other)
.EE
.SS Parameters
.TP
\f[B]other\f[R]
A \f[CR]Set\f[R] object, or set\-like object.
.SS Return value
A new \f[CR]Set\f[R] object containing elements which are in either or
both of this set and the \f[CR]other\f[R] set.
.SH DESCRIPTION
In mathematical notation, \f[I]union\f[R] is defined as:
.PP
\ A∪B={x∣x∊A\ or\ x∊B}AB = \(rs{xxAxB\(rs} 
.PP
And using Venn diagram:
[IMAGE: A Venn diagram where two circles overlap.
The symmetric difference of A and B is the region contained by either or
both circles.]
A Venn diagram where two circles overlap.
The symmetric difference of A and B is the region contained by either or
both circles.
.PP
\f[CR]union()\f[R] accepts set\-like objects as the \f[CR]other\f[R]
parameter.
It requires \f[CR]this\f[R] to be an actual \f[CR]Set\f[R] instance,
because it directly retrieves the underlying data stored in
\f[CR]this\f[R] without invoking any user code.
Then, it iterates over \f[CR]other\f[R] by calling its \f[CR]keys()\f[R]
method, and constructs a new set with all elements in \f[CR]this\f[R],
followed by all elements in \f[CR]other\f[R] that are not present in
\f[CR]this\f[R].
.PP
The order of elements in the returned set is first those in
\f[CR]this\f[R] followed by those in \f[CR]other\f[R].
.SH EXAMPLES
.SS Using union()
The following example computes the union between the set of even numbers
(<10) and the set of perfect squares (<10).
The result is the set of numbers that are either even or a perfect
square, or both.
.IP
.EX
\f[B]const\f[R] evens = \f[B]new\f[R] Set([2, 4, 6, 8]);
\f[B]const\f[R] squares = \f[B]new\f[R] Set([1, 4, 9]);
console.log(evens.union(squares)); \f[I]// Set(6) { 2, 4, 6, 8, 1, 9 }\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#new-set-methods
Polyfill of \f[CR]Set.prototype.union\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/set.prototype.union
es\-shims polyfill of \f[CR]Set.prototype.union\f[R]
.UE \c
.IP \(bu 2
\f[CR]Set.prototype.difference()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.intersection()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.isDisjointFrom()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.isSubsetOf()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.isSupersetOf()\f[R]
.IP \(bu 2
\f[CR]Set.prototype.symmetricDifference()\f[R]
