.\" Automatically generated by Pandoc 3.4
.\"
.TH "IDBTransaction.abort_event" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.abort_event \- IDBTransaction: abort event
.SH SYNOPSIS
The \f[CR]abort\f[R] event is fired when an \f[CR]IndexedDB\f[R]
transaction is aborted.
.PP
This can happen for any of the following reasons:
.IP \[bu] 2
Bad requests, (E.g., trying to add the same key twice, or put the same
index key when the key has a uniqueness constraint).
.IP \[bu] 2
An explicit \f[CR]abort()\f[R] call.
.IP \[bu] 2
An uncaught exception in the request\[cq]s success/error handler.
.IP \[bu] 2
An I/O error (an actual failure to write to disk, for example disk
detached, or other OS/hardware failure).
.IP \[bu] 2
Quota exceeded.
.PP
This non\-cancelable event bubbles to the associated
\f[CR]IDBDatabase\f[R] object.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]abort\[dq], (event) \f[B]=>\f[R] {});
onabort = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH BUBBLING
This event bubbles to \f[CR]IDBDatabase\f[R].
The \f[CR]event.target\f[R] property refers to the
\f[CR]IDBTransaction\f[R] object that bubbles up.
.PP
For more information, see Event bubbling.
.SH EXAMPLES
This example opens a database (creating the database if it does not
exist), then opens a transaction, adds a listener to the
\f[CR]abort\f[R] event, then aborts the transaction to trigger the
event.
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\[dq]Error creating database\[dq]);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = DBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  \f[I]// add a listener for \[ga]abort\[ga]\f[R]
  transaction.addEventListener(\[dq]abort\[dq], () \f[B]=>\f[R] {
    console.log(\[dq]Transaction was aborted\[dq]);
  });

  \f[I]// abort the transaction\f[R]
  transaction.abort();
};
.EE
.PP
The same example, but assigning the event handler to the
\f[CR]onabort\f[R] property:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\[dq]Error creating database\[dq]);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = DBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  \f[I]// add a listener for \[ga]abort\[ga]\f[R]
  transaction.onabort = (event) \f[B]=>\f[R] {
    console.log(\[dq]Transaction was aborted\[dq]);
  };

  \f[I]// abort the transaction\f[R]
  transaction.abort();
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
