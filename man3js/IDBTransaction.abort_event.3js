.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBTRANSACTION.ABORT_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.abort_event \- IDBTransaction: abort event
.SH SYNOPSIS
The \f[CR]abort\f[R] event is fired when an \f[CR]IndexedDB\f[R]
transaction is aborted.
.PP
This can happen for any of the following reasons:
.IP \(bu 2
Bad requests, (E.g., trying to add the same key twice, or put the same
index key when the key has a uniqueness constraint).
.IP \(bu 2
An explicit \f[CR]abort()\f[R] call.
.IP \(bu 2
An uncaught exception in the request\(cqs success/error handler.
.IP \(bu 2
An I/O error (an actual failure to write to disk, for example disk
detached, or other OS/hardware failure).
.IP \(bu 2
Quota exceeded.
.PP
This non\-cancelable event bubbles to the associated
\f[CR]IDBDatabase\f[R] object.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqabort\(dq, (event) => { })

onabort = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH BUBBLING
This event bubbles to \f[CR]IDBDatabase\f[R].
The \f[CR]event.target\f[R] property refers to the
\f[CR]IDBTransaction\f[R] object that bubbles up.
.PP
For more information, see Event bubbling.
.SH EXAMPLES
This example opens a database (creating the database if it does not
exist), then opens a transaction, adds a listener to the
\f[CR]abort\f[R] event, then aborts the transaction to trigger the
event.
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = DBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\(dqtoDoList\(dq], \(dqreadwrite\(dq);

  \f[I]// add a listener for \(gaabort\(ga\f[R]
  transaction.addEventListener(\(dqabort\(dq, () \f[B]=>\f[R] {
    console.log(\(dqTransaction was aborted\(dq);
  });

  \f[I]// abort the transaction\f[R]
  transaction.abort();
};
.EE
.PP
The same example, but assigning the event handler to the
\f[CR]onabort\f[R] property:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\(dqtoDoList\(dq, 4);

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = () \f[B]=>\f[R] {
    console.log(\(dqError creating database\(dq);
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = DBOpenRequest.result;

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\(dqtoDoList\(dq], \(dqreadwrite\(dq);

  \f[I]// add a listener for \(gaabort\(ga\f[R]
  transaction.onabort = (event) \f[B]=>\f[R] {
    console.log(\(dqTransaction was aborted\(dq);
  };

  \f[I]// abort the transaction\f[R]
  transaction.abort();
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
