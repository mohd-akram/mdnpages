.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUADAPTER.FEATURES" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUAdapter.features \- GPUAdapter: features property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]features\f[B]\f[R] read\-only property of the
\f[CR]GPUAdapter\f[R] interface returns a
\f[CR]GPUSupportedFeatures\f[R] object that describes additional
functionality supported by the adapter.
.PP
You should note that not all features will be available to WebGPU in all
browsers that support it, even if the features are supported by the
underlying hardware.
This could be due to constraints in the underlying system, browser, or
adapter.
For example:
.IP \(bu 2
The underlying system might not be able to guarantee exposure of a
feature in a way that is compatible with a certain browser.
.IP \(bu 2
The browser vendor might not have found a secure way to implement
support for that feature, or might just not have gotten round to it yet.
.PP
If you are hoping to take advantage of a specific additional feature in
a WebGPU app, thorough testing is advised.
.SH VALUE
A \f[CR]GPUSupportedFeatures\f[R] object instance.
This is a setlike object.
.SH EXAMPLES
In the following code we check whether a \f[CR]GPUAdapter\f[R] has the
\f[CR]texture\-compression\-astc\f[R] feature available.
If so, we push it into the array of \f[CR]requiredFeatures\f[R], and
request a device with that feature requirement using
\f[CR]GPUAdapter.requestDevice()\f[R]
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();
  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[B]const\f[R] requiredFeatures = [];

  \f[B]if\f[R] (adapter.features.has(\(dqtexture\-compression\-astc\(dq)) {
    requiredFeatures.push(\(dqtexture\-compression\-astc\(dq);
  }

  \f[B]const\f[R] device = \f[B]await\f[R] adapter.requestDevice({
    requiredFeatures,
  });

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
