.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Clients.openWindow" "JS" "May 13, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clients.openWindow \- Clients: openWindow() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
The \f[B]\f[CB]openWindow()\f[B]\f[R] method of the \f[CR]Clients\f[R]
interface creates a new top level browsing context and loads a given
URL.
If the calling script doesn\[cq]t have permission to show popups,
\f[CR]openWindow()\f[R] will throw an \f[CR]InvalidAccessError\f[R].
.PP
In Firefox, the method is allowed to show popups only when called as the
result of a notification click event.
.PP
In Chrome for Android, the method may instead open the URL in an
existing browsing context provided by a standalone web app previously
added to the user\[cq]s home screen.
As of recently, this also works on Chrome for Windows.
.SH SYNTAX
.IP
.EX
openWindow(url)
.EE
.SS Parameters
.TP
\f[B]url\f[R]
A string representing the URL of the client you want to open in the
window.
Generally this value must be a URL from the same origin as the calling
script.
.SS Return value
A \f[CR]Promise\f[R] that resolves to a \f[CR]WindowClient\f[R] object
if the URL is from the same origin as the service worker or a null value
otherwise.
.SS Exceptions
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
The promise is rejected with this exception if none of the windows in
the app\[cq]s origin have transient activation.
.SH SECURITY REQUIREMENTS
.IP \[bu] 2
At least one window in the app\[cq]s origin must have transient
activation.
.SH EXAMPLES
.IP
.EX
\f[I]// Send notification to OS if applicable\f[R]
\f[B]if\f[R] (self.Notification.permission === \[dq]granted\[dq]) {
  \f[B]const\f[R] notificationObject = {
    body: \[dq]Click here to view your messages.\[dq],
    data: { url: \[ga]${self.location.origin}/some/path\[ga] },
    \f[I]// data: { url: \[aq]http://example.com\[aq] },\f[R]
  };
  self.registration.showNotification(
    \[dq]You\[aq]ve got messages!\[dq],
    notificationObject,
  );
}

\f[I]// Notification click event listener\f[R]
self.addEventListener(\[dq]notificationclick\[dq], (e) \f[B]=>\f[R] {
  \f[I]// Close the notification popout\f[R]
  e.notification.close();
  \f[I]// Get all the Window clients\f[R]
  e.waitUntil(
    clients.matchAll({ type: \[dq]window\[dq] }).then((clientsArr) \f[B]=>\f[R] {
      \f[I]// If a Window tab matching the targeted URL already exists, focus that;\f[R]
      \f[B]const\f[R] hadWindowToFocus = clientsArr.some((windowClient) \f[B]=>\f[R]
        windowClient.url === e.notification.data.url
          ? (windowClient.focus(), \f[B]true\f[R])
          : \f[B]false\f[R],
      );
      \f[I]// Otherwise, open a new tab to the applicable URL and focus it.\f[R]
      \f[B]if\f[R] (!hadWindowToFocus)
        clients
          .openWindow(e.notification.data.url)
          .then((windowClient) \f[B]=>\f[R] (windowClient ? windowClient.focus() : \f[B]null\f[R]));
    }),
  );
});
.EE
