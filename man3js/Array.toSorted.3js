.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAY.TOSORTED" "3JS" "March 5, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.toSorted \- Array.prototype.toSorted()
.SH SYNOPSIS
The \f[B]\f[CB]toSorted()\f[B]\f[R] method of \f[CR]Array\f[R] instances
is the copying version of the \f[CR]sort()\f[R] method.
It returns a new array with the elements sorted in ascending order.
.SH SYNTAX
.IP
.EX
toSorted()
toSorted(compareFn)
.EE
.SS Parameters
.TP
\f[B]compareFn\f[R] \f[I](optional)\f[R]
A function that determines the order of the elements.
If omitted, the array elements are converted to strings, then sorted
according to each character\(cqs Unicode code point value.
See \f[CR]sort()\f[R] for more information.
.SS Return value
A new array with the elements sorted in ascending order.
.SH DESCRIPTION
See \f[CR]sort()\f[R] for more information on the \f[CR]compareFn\f[R]
parameter.
.PP
When used on sparse arrays, the \f[CR]toSorted()\f[R] method iterates
empty slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]toSorted()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Sorting an array
.IP
.EX
\f[B]const\f[R] months = [\(dqMar\(dq, \(dqJan\(dq, \(dqFeb\(dq, \(dqDec\(dq];
\f[B]const\f[R] sortedMonths = months.toSorted();
console.log(sortedMonths); \f[I]// [\(aqDec\(aq, \(aqFeb\(aq, \(aqJan\(aq, \(aqMar\(aq]\f[R]
console.log(months); \f[I]// [\(aqMar\(aq, \(aqJan\(aq, \(aqFeb\(aq, \(aqDec\(aq]\f[R]

\f[B]const\f[R] values = [1, 10, 21, 2];
\f[B]const\f[R] sortedValues = values.toSorted((a, b) \f[B]=>\f[R] a \- b);
console.log(sortedValues); \f[I]// [1, 2, 10, 21]\f[R]
console.log(values); \f[I]// [1, 10, 21, 2]\f[R]
.EE
.PP
For more usage examples, see \f[CR]sort()\f[R].
.SS Using toSorted() on sparse arrays
Empty slots are sorted as if they have the value \f[CR]undefined\f[R].
They are always sorted to the end of the array and \f[CR]compareFn\f[R]
is not called for them.
.IP
.EX
console.log([\(dqa\(dq, \(dqc\(dq, , \(dqb\(dq].toSorted()); \f[I]// [\(aqa\(aq, \(aqb\(aq, \(aqc\(aq, undefined]\f[R]
console.log([, \f[B]undefined\f[R], \(dqa\(dq, \(dqb\(dq].toSorted()); \f[I]// [\(dqa\(dq, \(dqb\(dq, undefined, undefined]\f[R]
.EE
.SS Calling toSorted() on non\-array objects
The \f[CR]toSorted()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R].
It then collects all existing integer\-keyed properties in the range of
\f[CR]0\f[R] to \f[CR]length \- 1\f[R], sorts them, and writes them into
a new array.
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  unrelated: \(dqfoo\(dq,
  0: 5,
  2: 4,
  3: 3, \f[I]// ignored by toSorted() since length is 3\f[R]
};
console.log(Array.prototype.toSorted.call(arrayLike));
\f[I]// [4, 5, undefined]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#change-array-by-copy
Polyfill of \f[CR]Array.prototype.toSorted\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/array.prototype.tosorted
es\-shims polyfill of \f[CR]Array.prototype.toSorted\f[R]
.UE \c
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array.prototype.sort()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.toReversed()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.toSpliced()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.with()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.toSorted()\f[R]
