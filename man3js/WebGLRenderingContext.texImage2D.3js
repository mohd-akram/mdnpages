'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "WebGLRenderingContext.texImage2D" "JS" "August 2, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.texImage2D \- WebGLRenderingContext: texImage2D()
method
.SH SYNOPSIS
The \f[B]\f[CB]WebGLRenderingContext.texImage2D()\f[B]\f[R] method of
the WebGL API specifies a two\-dimensional texture image.
.SH SYNTAX
.IP
.EX
// WebGL1
texImage2D(target, level, internalformat, width, height, border, format, type, pixels)
texImage2D(target, level, internalformat, format, type, pixels)


// WebGL2
texImage2D(target, level, internalformat, width, height, border, format, type, offset)
texImage2D(target, level, internalformat, width, height, border, format, type, source)
texImage2D(target, level, internalformat, width, height, border, format, type, srcData, srcOffset)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A \f[CR]GLenum\f[R] specifying the binding point (target) of the active
texture.
Possible values:
.RS
.IP \[bu] 2
\f[CR]gl.TEXTURE_2D\f[R]: A two\-dimensional texture.
.IP \[bu] 2
\f[CR]gl.TEXTURE_CUBE_MAP_POSITIVE_X\f[R]: Positive X face for a
cube\-mapped texture.
.IP \[bu] 2
\f[CR]gl.TEXTURE_CUBE_MAP_NEGATIVE_X\f[R]: Negative X face for a
cube\-mapped texture.
.IP \[bu] 2
\f[CR]gl.TEXTURE_CUBE_MAP_POSITIVE_Y\f[R]: Positive Y face for a
cube\-mapped texture.
.IP \[bu] 2
\f[CR]gl.TEXTURE_CUBE_MAP_NEGATIVE_Y\f[R]: Negative Y face for a
cube\-mapped texture.
.IP \[bu] 2
\f[CR]gl.TEXTURE_CUBE_MAP_POSITIVE_Z\f[R]: Positive Z face for a
cube\-mapped texture.
.IP \[bu] 2
\f[CR]gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\f[R]: Negative Z face for a
cube\-mapped texture.
.RE
.TP
\f[B]level\f[R]
A \f[CR]GLint\f[R] specifying the level of detail.
Level 0 is the base image level and level \f[I]n\f[R] is the n\-th
mipmap reduction level.
.TP
\f[B]internalformat\f[R]
A \f[CR]GLenum\f[R] specifying the color components in the texture.
.RS
.PP
Possible values in both WebGL1 and WebGL2
.PP
.TS
tab(@);
l l l l.
T{
Format
T}@T{
Type
T}@T{
Channels
T}@T{
Bytes per pixel
T}
_
T{
RGBA
T}@T{
UNSIGNED_BYTE
T}@T{
4
T}@T{
4
T}
T{
RGB
T}@T{
UNSIGNED_BYTE
T}@T{
3
T}@T{
3
T}
T{
RGBA
T}@T{
UNSIGNED_SHORT_4_4_4_4
T}@T{
4
T}@T{
2
T}
T{
RGBA
T}@T{
UNSIGNED_SHORT_5_5_5_1
T}@T{
4
T}@T{
2
T}
T{
RGB
T}@T{
UNSIGNED_SHORT_5_6_5
T}@T{
3
T}@T{
2
T}
T{
LUMINANCE_ALPHA
T}@T{
UNSIGNED_BYTE
T}@T{
2
T}@T{
2
T}
T{
LUMINANCE
T}@T{
UNSIGNED_BYTE
T}@T{
1
T}@T{
1
T}
T{
ALPHA
T}@T{
UNSIGNED_BYTE
T}@T{
1
T}@T{
1
T}
.TE
.PP
Other possible values in WebGL2 for the versions of
\f[CR]texImage2D\f[R] that take a \f[CR]TypedArray\f[R] or a
\f[CR]DataView\f[R], or a \f[CR]GLintptr offset\f[R]
.PP
.TS
tab(@);
lw(7.8n) lw(7.8n) lw(7.8n) lw(7.8n) lw(7.8n) lw(7.8n) lw(7.8n) lw(7.8n) lw(7.8n).
T{
\f[B]Sized
.PD 0
.P
.PD
Format\f[R]
T}@T{
\f[B]Base
.PD 0
.P
.PD
Format\f[R]
T}@T{
\f[B]R
.PD 0
.P
.PD
bits\f[R]
T}@T{
\f[B]G
.PD 0
.P
.PD
bits\f[R]
T}@T{
\f[B]B
.PD 0
.P
.PD
bits\f[R]
T}@T{
\f[B]A
.PD 0
.P
.PD
bits\f[R]
T}@T{
\f[B]Shared
.PD 0
.P
.PD
bits\f[R]
T}@T{
\f[B]Color
.PD 0
.P
.PD
renderable\f[R]
T}@T{
\f[B]Texture
.PD 0
.P
.PD
filterable\f[R]
T}
_
T{
R8
T}@T{
RED
T}@T{
8
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
●
T}
T{
R8_SNORM
T}@T{
RED
T}@T{
s8
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}
T{
RG8
T}@T{
RG
T}@T{
8
T}@T{
8
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
●
T}
T{
RG8_SNORM
T}@T{
RG
T}@T{
s8
T}@T{
s8
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}
T{
RGB8
T}@T{
RGB
T}@T{
8
T}@T{
8
T}@T{
8
T}@T{
T}@T{
T}@T{
●
T}@T{
●
T}
T{
RGB8_SNORM
T}@T{
RGB
T}@T{
s8
T}@T{
s8
T}@T{
s8
T}@T{
T}@T{
T}@T{
T}@T{
●
T}
T{
RGB565
T}@T{
RGB
T}@T{
5
T}@T{
6
T}@T{
5
T}@T{
T}@T{
T}@T{
●
T}@T{
●
T}
T{
RGBA4
T}@T{
RGBA
T}@T{
4
T}@T{
4
T}@T{
4
T}@T{
4
T}@T{
T}@T{
●
T}@T{
●
T}
T{
RGB5_A1
T}@T{
RGBA
T}@T{
5
T}@T{
5
T}@T{
5
T}@T{
1
T}@T{
T}@T{
●
T}@T{
●
T}
T{
RGBA8
T}@T{
RGBA
T}@T{
8
T}@T{
8
T}@T{
8
T}@T{
8
T}@T{
T}@T{
●
T}@T{
●
T}
T{
RGBA8_SNORM
T}@T{
RGBA
T}@T{
s8
T}@T{
s8
T}@T{
s8
T}@T{
s8
T}@T{
T}@T{
T}@T{
●
T}
T{
RGB10_A2
T}@T{
RGBA
T}@T{
10
T}@T{
10
T}@T{
10
T}@T{
2
T}@T{
T}@T{
●
T}@T{
●
T}
T{
RGB10_A2UI
T}@T{
RGBA
T}@T{
ui10
T}@T{
ui10
T}@T{
ui10
T}@T{
ui2
T}@T{
T}@T{
●
T}@T{
T}
T{
SRGB8
T}@T{
RGB
T}@T{
8
T}@T{
8
T}@T{
8
T}@T{
T}@T{
T}@T{
T}@T{
●
T}
T{
SRGB8_ALPHA8
T}@T{
RGBA
T}@T{
8
T}@T{
8
T}@T{
8
T}@T{
8
T}@T{
T}@T{
●
T}@T{
●
T}
T{
R16F
T}@T{
RED
T}@T{
f16
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}
T{
RG16F
T}@T{
RG
T}@T{
f16
T}@T{
f16
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}
T{
RGB16F
T}@T{
RGB
T}@T{
f16
T}@T{
f16
T}@T{
f16
T}@T{
T}@T{
T}@T{
T}@T{
●
T}
T{
RGBA16F
T}@T{
RGBA
T}@T{
f16
T}@T{
f16
T}@T{
f16
T}@T{
f16
T}@T{
T}@T{
T}@T{
●
T}
T{
R32F
T}@T{
RED
T}@T{
f32
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RG32F
T}@T{
RG
T}@T{
f32
T}@T{
f32
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RGB32F
T}@T{
RGB
T}@T{
f32
T}@T{
f32
T}@T{
f32
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RGBA32F
T}@T{
RGBA
T}@T{
f32
T}@T{
f32
T}@T{
f32
T}@T{
f32
T}@T{
T}@T{
T}@T{
T}
T{
R11F_G11F_B10F
T}@T{
RGB
T}@T{
f11
T}@T{
f11
T}@T{
f10
T}@T{
T}@T{
T}@T{
T}@T{
●
T}
T{
RGB9_E5
T}@T{
RGB
T}@T{
9
T}@T{
9
T}@T{
9
T}@T{
T}@T{
5
T}@T{
T}@T{
●
T}
T{
R8I
T}@T{
RED
T}@T{
i8
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
R8UI
T}@T{
RED
T}@T{
ui8
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
R16I
T}@T{
RED
T}@T{
i16
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
R16UI
T}@T{
RED
T}@T{
ui16
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
R32I
T}@T{
RED
T}@T{
i32
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
R32UI
T}@T{
RED
T}@T{
ui32
T}@T{
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
RG8I
T}@T{
RG
T}@T{
i8
T}@T{
i8
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
RG8UI
T}@T{
RG
T}@T{
ui8
T}@T{
ui8
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
RG16I
T}@T{
RG
T}@T{
i16
T}@T{
i16
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
RG16UI
T}@T{
RG
T}@T{
ui16
T}@T{
ui16
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
RG32I
T}@T{
RG
T}@T{
i32
T}@T{
i32
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
RG32UI
T}@T{
RG
T}@T{
ui32
T}@T{
ui32
T}@T{
T}@T{
T}@T{
T}@T{
●
T}@T{
T}
T{
RGB8I
T}@T{
RGB
T}@T{
i8
T}@T{
i8
T}@T{
i8
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RGB8UI
T}@T{
RGB
T}@T{
ui8
T}@T{
ui8
T}@T{
ui8
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RGB16I
T}@T{
RGB
T}@T{
i16
T}@T{
i16
T}@T{
i16
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RGB16UI
T}@T{
RGB
T}@T{
ui16
T}@T{
ui16
T}@T{
ui16
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RGB32I
T}@T{
RGB
T}@T{
i32
T}@T{
i32
T}@T{
i32
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RGB32UI
T}@T{
RGB
T}@T{
ui32
T}@T{
ui32
T}@T{
ui32
T}@T{
T}@T{
T}@T{
T}@T{
T}
T{
RGBA8I
T}@T{
RGBA
T}@T{
i8
T}@T{
i8
T}@T{
i8
T}@T{
i8
T}@T{
T}@T{
●
T}@T{
T}
T{
RGBA8UI
T}@T{
RGBA
T}@T{
ui8
T}@T{
ui8
T}@T{
ui8
T}@T{
ui8
T}@T{
T}@T{
●
T}@T{
T}
T{
RGBA16I
T}@T{
RGBA
T}@T{
i16
T}@T{
i16
T}@T{
i16
T}@T{
i16
T}@T{
T}@T{
●
T}@T{
T}
T{
RGBA16UI
T}@T{
RGBA
T}@T{
ui16
T}@T{
ui16
T}@T{
ui16
T}@T{
ui16
T}@T{
T}@T{
●
T}@T{
T}
T{
RGBA32I
T}@T{
RGBA
T}@T{
i32
T}@T{
i32
T}@T{
i32
T}@T{
i32
T}@T{
T}@T{
●
T}@T{
T}
T{
RGBA32UI
T}@T{
RGBA
T}@T{
ui32
T}@T{
ui32
T}@T{
ui32
T}@T{
ui32
T}@T{
T}@T{
●
T}@T{
T}
.TE
.PP
Possible values in WebGL2 for the versions of \f[CR]texImage2D\f[R] that
take a texture an \f[CR]HTMLImageElement\f[R],
\f[CR]HTMLCanvasElement\f[R], \f[CR]HTMLVideoElement\f[R],
\f[CR]ImageBitmap\f[R], or \f[CR]ImageData\f[R]
.IP \[bu] 2
\f[CR]gl.ALPHA\f[R]: Discards the red, green and blue components and
reads the alpha component.
.IP \[bu] 2
\f[CR]gl.RGB\f[R]: Discards the alpha components and reads the red,
green and blue components.
.IP \[bu] 2
\f[CR]gl.RGBA\f[R]: Red, green, blue and alpha components are read from
the color buffer.
.IP \[bu] 2
\f[CR]gl.LUMINANCE\f[R]: Each color component is a luminance component,
alpha is 1.0.
.IP \[bu] 2
\f[CR]gl.LUMINANCE_ALPHA\f[R]: Each component is a luminance/alpha
component.
.PP
When using the \f[CR]WEBGL_depth_texture\f[R] extension:
.IP \[bu] 2
\f[CR]gl.DEPTH_COMPONENT\f[R]
.IP \[bu] 2
\f[CR]gl.DEPTH_STENCIL\f[R]
.PP
When using the \f[CR]EXT_sRGB\f[R] extension:
.IP \[bu] 2
\f[CR]ext.SRGB_EXT\f[R]
.IP \[bu] 2
\f[CR]ext.SRGB_ALPHA_EXT\f[R]
.PP
When using a WebGL 2 context, the following values are available
additionally:
.IP \[bu] 2
\f[CR]gl.R8\f[R]
.IP \[bu] 2
\f[CR]gl.R16F\f[R]
.IP \[bu] 2
\f[CR]gl.R32F\f[R]
.IP \[bu] 2
\f[CR]gl.R8UI\f[R]
.IP \[bu] 2
\f[CR]gl.RG8\f[R]
.IP \[bu] 2
\f[CR]gl.RG16F\f[R]
.IP \[bu] 2
\f[CR]gl.RG32F\f[R]
.IP \[bu] 2
\f[CR]gl.RG8UI\f[R]
.IP \[bu] 2
\f[CR]gl.RG16UI\f[R]
.IP \[bu] 2
\f[CR]gl.RG32UI\f[R]
.IP \[bu] 2
\f[CR]gl.RGB8\f[R]
.IP \[bu] 2
\f[CR]gl.SRGB8\f[R]
.IP \[bu] 2
\f[CR]gl.RGB565\f[R]
.IP \[bu] 2
\f[CR]gl.R11F_G11F_B10F\f[R]
.IP \[bu] 2
\f[CR]gl.RGB9_E5\f[R]
.IP \[bu] 2
\f[CR]gl.RGB16F\f[R]
.IP \[bu] 2
\f[CR]gl.RGB32F\f[R]
.IP \[bu] 2
\f[CR]gl.RGB8UI\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA8\f[R]
.IP \[bu] 2
\f[CR]gl.SRGB8_ALPHA8\f[R]
.IP \[bu] 2
\f[CR]gl.RGB5_A1\f[R]
.IP \[bu] 2
\f[CR]gl.RGB10_A2\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA4\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA16F\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA32F\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA8UI\f[R]
.RE
.TP
\f[B]width\f[R]
A \f[CR]GLsizei\f[R] specifying the width of the texture.
.TP
\f[B]height\f[R]
A \f[CR]GLsizei\f[R] specifying the height of the texture.
.TP
\f[B]border\f[R]
A \f[CR]GLint\f[R] specifying the width of the border.
Must be 0.
.TP
\f[B]format\f[R]
A \f[CR]GLenum\f[R] specifying the format of the texel data.
In WebGL 1, this must be the same as \f[CR]internalformat\f[R] (see
above).
in WebGL 2, the combinations are listed in \c
.UR https://registry.khronos.org/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE
this table
.UE \c
\&.
.TP
\f[B]type\f[R]
A \f[CR]GLenum\f[R] specifying the data type of the texel data.
Possible values:
.RS
.IP \[bu] 2
\f[CR]gl.UNSIGNED_BYTE\f[R]: 8 bits per channel for \f[CR]gl.RGBA\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_5_6_5\f[R]: 5 red bits, 6 green bits, 5 blue
bits.
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_4_4_4_4\f[R]: 4 red bits, 4 green bits, 4 blue
bits, 4 alpha bits.
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_5_5_5_1\f[R]: 5 red bits, 5 green bits, 5 blue
bits, 1 alpha bit.
.PP
When using the \f[CR]WEBGL_depth_texture\f[R] extension:
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT\f[R]
.IP \[bu] 2
\f[CR]ext.UNSIGNED_INT_24_8_WEBGL\f[R] (constant provided by the
extension)
.IP \[bu] 2
When using the \f[CR]OES_texture_float\f[R] extension:
.RS 2
.IP \[bu] 2
\f[CR]gl.FLOAT\f[R]
.RE
.PP
When using the \f[CR]OES_texture_half_float\f[R] extension:
.IP \[bu] 2
\f[CR]ext.HALF_FLOAT_OES\f[R] (constant provided by the extension)
.PP
When using a WebGL 2 context, the following values are available
additionally:
.IP \[bu] 2
\f[CR]gl.BYTE\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT\f[R]
.IP \[bu] 2
\f[CR]gl.SHORT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT\f[R]
.IP \[bu] 2
\f[CR]gl.INT\f[R]
.IP \[bu] 2
\f[CR]gl.HALF_FLOAT\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_2_10_10_10_REV\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_10F_11F_11F_REV\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_5_9_9_9_REV\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_24_8\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_32_UNSIGNED_INT_24_8_REV\f[R] (pixels must be
\f[CR]null\f[R])
.RE
.TP
\f[B]pixels\f[R]
The following types can always be used as a pixel source for the
texture:
.RS
.IP \[bu] 2
\f[CR]ImageData\f[R],
.IP \[bu] 2
\f[CR]HTMLImageElement\f[R],
.IP \[bu] 2
\f[CR]HTMLCanvasElement\f[R],
.IP \[bu] 2
\f[CR]HTMLVideoElement\f[R],
.IP \[bu] 2
\f[CR]ImageBitmap\f[R].
.PP
The following types can only be used as a pixel source when
\f[CR]width\f[R], \f[CR]height\f[R], and \f[CR]border\f[R] are
specified:
.IP \[bu] 2
\f[CR]Uint8Array\f[R] (must be used if \f[CR]type\f[R] is
\f[CR]gl.UNSIGNED_BYTE\f[R])
.IP \[bu] 2
\f[CR]Uint16Array\f[R] (must be used if \f[CR]type\f[R] is either
\f[CR]gl.UNSIGNED_SHORT_5_6_5\f[R],
\f[CR]gl.UNSIGNED_SHORT_4_4_4_4\f[R],
\f[CR]gl.UNSIGNED_SHORT_5_5_5_1\f[R], \f[CR]gl.UNSIGNED_SHORT\f[R] or
\f[CR]ext.HALF_FLOAT_OES\f[R])
.IP \[bu] 2
\f[CR]Uint32Array\f[R] (must be used if \f[CR]type\f[R] is
\f[CR]gl.UNSIGNED_INT\f[R] or \f[CR]ext.UNSIGNED_INT_24_8_WEBGL\f[R])
.IP \[bu] 2
\f[CR]Float32Array\f[R] (must be used if \f[CR]type\f[R] is
\f[CR]gl.FLOAT\f[R])
.RE
.TP
\f[B]offset\f[R]
(WebGL 2 only) A \f[CR]GLintptr\f[R] byte offset into the
\f[CR]WebGLBuffer\f[R]\[cq]s data store.
Used to upload data to the currently bound \f[CR]WebGLTexture\f[R] from
the \f[CR]WebGLBuffer\f[R] bound to the \f[CR]PIXEL_UNPACK_BUFFER\f[R]
target.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.IP
.EX
gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.createTexture()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.bindTexture()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.texSubImage2D()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.compressedTexImage2D()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.copyTexImage2D()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getTexParameter()\f[R]
.IP \[bu] 2
\f[CR]WEBGL_depth_texture\f[R]
.IP \[bu] 2
\f[CR]OES_texture_float\f[R]
.IP \[bu] 2
\f[CR]OES_texture_half_float\f[R]
.IP \[bu] 2
\f[CR]EXT_texture_norm16\f[R]
.IP \[bu] 2
\f[CR]EXT_sRGB\f[R]
