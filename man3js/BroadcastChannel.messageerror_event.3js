.\" Automatically generated by Pandoc 3.4
.\"
.TH "BroadcastChannel.messageerror_event" "JS" "June 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BroadcastChannel.messageerror_event \- BroadcastChannel: messageerror
event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]messageerror\f[B]\f[R] event of the
\f[CR]BroadcastChannel\f[R] interface fires when a message that
can\[cq]t be deserialized arrives on the channel.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]messageerror\[dq], (event) => { })
onmessageerror = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]In addition to the properties listed below, properties from the
parent interface, \f[CI]Event\f[I], are available.\f[R]
.TP
\f[B]data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]source\f[R] \f[I](read\-only)\f[R]
A \f[I]message event source\f[R], which is either a WindowProxy, a
\f[CR]MessagePort\f[R], or a \f[CR]ServiceWorker\f[R] object
representing the message emitter.
.TP
\f[B]ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
This code uses \f[CR]addEventListener()\f[R] to listen for messages and
errors:
.IP
.EX
\f[B]const\f[R] channel = \f[B]new\f[R] BroadcastChannel(\[dq]example\-channel\[dq]);

channel.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  received.textContent = event.data;
});

channel.addEventListener(\[dq]messageerror\[dq], (event) \f[B]=>\f[R] {
  console.error(event);
});
.EE
.PP
The same, but using the \f[CR]onmessage\f[R] and
\f[CR]onmessageerror\f[R] event handler properties:
.IP
.EX
\f[B]const\f[R] channel = \f[B]new\f[R] BroadcastChannel(\[dq]example\-channel\[dq]);

channel.onmessage = (event) \f[B]=>\f[R] {
  received.textContent = event.data;
};

channel.onmessageerror = (event) \f[B]=>\f[R] {
  console.log(event);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]message\f[R].
