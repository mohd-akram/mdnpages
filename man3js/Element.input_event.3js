.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Element.input_event" "JS" "January 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.input_event \- Element: input event
.SH SYNOPSIS
The \f[B]\f[CB]input\f[B]\f[R] event fires when the \f[CR]value\f[R] of
an \f[CR]<input>\f[R], \f[CR]<select>\f[R], or \f[CR]<textarea>\f[R]
element has been changed as a direct result of a user action (such as
typing in a textbox or checking a checkbox).
.PP
The event also applies to elements with \f[CR]contenteditable\f[R]
enabled, and to any element when \f[CR]designMode\f[R] is turned on.
In the case of \f[CR]contenteditable\f[R] and \f[CR]designMode\f[R], the
event target is the \f[I]editing host\f[R].
If these properties apply to multiple elements, the editing host is the
nearest ancestor element whose parent isn\[cq]t editable.
.PP
For \f[CR]<input>\f[R] elements with \f[CR]type=checkbox\f[R] or
\f[CR]type=radio\f[R], the \f[CR]input\f[R] event should fire whenever a
user toggles the control, per the \c
.UR https://html.spec.whatwg.org/multipage/input.html#the-input-element:event-input-2
HTML Living Standard specification
.UE \c
\&.
However, historically this has not always been the case.
Check compatibility, or use the \f[CR]change\f[R] event instead for
elements of these types.
.PP
For \f[CR]<textarea>\f[R] and \f[CR]<input>\f[R] elements that accept
text input (\f[CR]type=text\f[R], \f[CR]type=tel\f[R], etc.), the
interface is \f[CR]InputEvent\f[R]; for others, the interface is
\f[CR]Event\f[R].
.PP
The \f[CR]input\f[R] event is fired every time the \f[CR]value\f[R] of
the element changes.
This is unlike the \f[CR]change\f[R] event, which only fires when the
value is committed, such as by pressing the enter key or selecting a
value from a list of options.
Note that the \f[CR]input\f[R] event is not fired when JavaScript
changes an element\[cq]s \f[CR]value\f[R] programmatically.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]input\[dq], (event) \f[B]=>\f[R] {});

oninput = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
An \f[CR]InputEvent\f[R].
Inherits from \f[CR]UIEvent\f[R].
.SH EVENT PROPERTIES
\f[I]This interface inherits properties from its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]InputEvent.data\f[R] \f[I](read\-only)\f[R]
Returns a string with the inserted characters.
This may be an empty string if the change doesn\[cq]t insert text (for
example, when deleting characters).
.TP
\f[B]InputEvent.dataTransfer\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]DataTransfer\f[R] object containing information about
richtext or plaintext data being added to or removed from editable
content.
.TP
\f[B]InputEvent.inputType\f[R] \f[I](read\-only)\f[R]
Returns the type of change for editable content such as, for example,
inserting, deleting, or formatting text.
.TP
\f[B]InputEvent.isComposing\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Boolean\f[R] value indicating if the event is fired
after \f[CR]compositionstart\f[R] and before \f[CR]compositionend\f[R].
.SH EXAMPLES
This example logs the value whenever you change the value of the
\f[CR]<input>\f[R] element.
.SS HTML
.IP
.EX
<\f[B]input\f[R] placeholder=\[dq]Enter some text\[dq] name=\[dq]name\[dq] />
<\f[B]p\f[R] id=\[dq]values\[dq]></\f[B]p\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] input = document.querySelector(\[dq]input\[dq]);
\f[B]const\f[R] log = document.getElementById(\[dq]values\[dq]);

input.addEventListener(\[dq]input\[dq], updateValue);

\f[B]function\f[R] updateValue(e) {
  log.textContent = e.target.value;
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Related events
.RS 2
.IP \[bu] 2
\f[CR]beforeinput\f[R]
.IP \[bu] 2
\f[CR]change\f[R]
.IP \[bu] 2
\f[CR]invalid\f[R]
.RE
