.\" Automatically generated by Pandoc 3.4
.\"
.TH "FetchEvent.request" "JS" "July 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FetchEvent.request \- FetchEvent: request property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
The \f[B]\f[CB]request\f[B]\f[R] read\-only property of the
\f[CR]FetchEvent\f[R] interface returns the \f[CR]Request\f[R] that
triggered the event handler.
.PP
This property is non\-nullable (since version 46, in the case of
Firefox.)
If a request is not provided by some other means, the constructor
\f[CR]options\f[R] object must contain a request (see
\f[CR]FetchEvent()\f[R].)
.SH VALUE
A \f[CR]Request\f[R] object.
.SH EXAMPLES
This code snippet is from the \c
.UR https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/prefetch/service-worker.js
service worker fetch sample
.UE \c
\ (\c
.UR https://googlechrome.github.io/samples/service-worker/prefetch/
run the fetch sample live
.UE \c
).
The \f[CR]onfetch\f[R] event handler listens for the \f[CR]fetch\f[R]
event.
When fired, pass a promise that back to the controlled page to
\f[CR]FetchEvent.respondWith()\f[R].
This promise resolves to the first matching URL request in the
\f[CR]Cache\f[R] object.
If no match is found, the code fetches a response from the network.
.PP
The code also handles exceptions thrown from the \f[CR]fetch()\f[R]
operation.
Note that an HTTP error response (e.g., 404) will not trigger an
exception.
It will return a normal response object that has the appropriate error
code set.
.IP
.EX
self.addEventListener(\[dq]fetch\[dq], (event) \f[B]=>\f[R] {
  console.log(\[dq]Handling fetch event for\[dq], event.request.url);

  event.respondWith(
    caches.match(event.request).then((response) \f[B]=>\f[R] {
      \f[B]if\f[R] (response) {
        console.log(\[dq]Found response in cache:\[dq], response);

        \f[B]return\f[R] response;
      }
      console.log(\[dq]No response found in cache. About to fetch from network\&...\[dq]);

      \f[B]return\f[R] fetch(event.request)
        .then((response) \f[B]=>\f[R] {
          console.log(\[dq]Response from network is:\[dq], response);

          \f[B]return\f[R] response;
        })
        .catch((error) \f[B]=>\f[R] {
          console.error(\[dq]Fetching failed:\[dq], error);

          \f[B]throw\f[R] error;
        });
    }),
  );
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \[bu] 2
Using web workers
