.\" Automatically generated by Pandoc 3.4
.\"
.TH "HTMLMediaElement.captureStream" "JS" "December 16, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLMediaElement.captureStream \- HTMLMediaElement: captureStream()
method
.SH SYNOPSIS
The \f[B]\f[CB]captureStream()\f[B]\f[R] method of the
\f[CR]HTMLMediaElement\f[R] interface returns a \f[CR]MediaStream\f[R]
object which is streaming a real\-time capture of the content being
rendered in the media element.
.PP
This can be used, for example, as a source for a WebRTC
\f[CR]RTCPeerConnection\f[R].
.SH SYNTAX
.IP
.EX
captureStream()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]MediaStream\f[R] object which can be used as a source for audio
and/or video data by other media processing code, or as a source for
WebRTC.
.SH EXAMPLES
In this example, an event handler is established so that clicking a
button starts capturing the contents of a media element with the ID
\f[CR]\[dq]playback\[dq]\f[R] into a \f[CR]MediaStream\f[R].
The stream can then be used for other purposes\[em]like a source for
streaming over WebRTC, to allow sharing prerecorded videos with another
person during a video call.
.IP
.EX
document.querySelector(\[dq].playAndRecord\[dq]).addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]const\f[R] playbackElement = document.getElementById(\[dq]playback\[dq]);
  \f[B]const\f[R] captureStream = playbackElement.captureStream();
  playbackElement.play();
});
.EE
.PP
See Recording a media element for a longer and more intricate example
and explanation.
.SS Firefox\-specific notes
Prior to Firefox 51, you couldn\[cq]t use \f[CR]captureStream()\f[R] on
a media element whose source is, itself, a \f[CR]MediaStream\f[R] (like
a \f[CR]<video>\f[R] element which is presenting a stream being received
over a \f[CR]RTCPeerConnection\f[R]).
Beginning in Firefox 51, this works.
This means you can capture a stream from the video element and use
\f[CR]MediaRecorder\f[R] to record it.
See \c
.UR https://bugzil.la/1259788
Firefox bug 1259788
.UE \c
\ for details.
.PP
However, \f[CR]captureStream()\f[R] is still prefixed as
\f[CR]mozCaptureStream()\f[R] on Firefox for good reason: there are some
quirks in the present implementation which are worth noting:
.IP \[bu] 2
The Firefox implementation currently only works as described in the
specification when the media element\[cq]s source is, itself, a
\f[CR]MediaStream\f[R].
.IP \[bu] 2
If the media element\[cq]s source isn\[cq]t a \f[CR]MediaStream\f[R],
the output from this method isn\[cq]t compatible with the spec, and if
you change the source after starting capture, the output capture stream
can\[cq]t accept the new source data due to that incompatibility, so no
\f[CR]MediaStreamTrack\f[R]s from the new source \f[CR]MediaStream\f[R]
are added to the captured stream, resulting in output that doesn\[cq]t
capture the updated source.
.IP \[bu] 2
Switching the source back to a \f[CR]MediaStream\f[R] adds tracks back
to the stream and it works again as expected.
.IP \[bu] 2
Calling \f[CR]mozCaptureMediaStream()\f[R] on an element with a
\f[CR]MediaStream\f[R] source returns a stream that only contains tracks
while the element is playing a \f[CR]MediaStream\f[R].
.IP \[bu] 2
If you call \f[CR]mozCaptureMediaStream()\f[R] on a media element with
no source media, its compatibility mode will be based on the first
source that\[cq]s added; for example, if it\[cq]s a
\f[CR]MediaStream\f[R], then the capture stream will only work with
MediaStream sources from then on.
.IP \[bu] 2
This special behavior will be removed once the
non\-\f[CR]MediaStream\f[R] source support is brought up to
specification and the method is unprefixed.
See \c
.UR https://bugzil.la/1259788
Firefox bug 1259788
.UE \c
\ for details.
.SH SEE ALSO
.IP \[bu] 2
Recording a media element
.IP \[bu] 2
MediaStream Recording API
.IP \[bu] 2
\f[CR]HTMLCanvasElement.captureStream()\f[R]
.IP \[bu] 2
\f[CR]MediaStream\f[R]
.IP \[bu] 2
WebRTC API
