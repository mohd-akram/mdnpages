.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "PaymentRequest.PaymentRequest" "JS" "January 10, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PaymentRequest.PaymentRequest \- PaymentRequest: PaymentRequest()
constructor
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]PaymentRequest()\f[B]\f[R] constructor creates a new
\f[CR]PaymentRequest\f[R] object which will be used to handle the
process of generating, validating, and submitting a payment request.
.SH SYNTAX
.IP
.EX
new PaymentRequest(methodData, details)
new PaymentRequest(methodData, details, options)
.EE
.SS Parameters
.TP
\f[B]methodData\f[R]
Contains an array of identifiers for the payment methods the merchant
website accepts and any associated payment method specific data.
Each item in the array contains the following fields:
.RS
.TP
\f[B]supportedMethods\f[R]
A string containing a payment method identifier.
This is either a URL or one of the standardized payment method
identifiers.
The value and structure of the \f[CR]data\f[R] field will vary depending
on the value of the \f[CR]supportedMethods\f[R] field.
.TP
\f[B]data\f[R]
A JSON\-serializable object that provides optional information that
might be needed by the supported payment methods.
This has to conform to the type expected by the payment handler
indicated by \f[CR]supportedMethods\f[R].
Developers need to consult whomever controls the payment methods for the
expected shape of the data object.
If \f[CR]supportedMethods\f[R] is
\f[CR]secure\-payment\-confirmation\f[R], then \f[CR]data\f[R] needs to
conform to the \f[CR]SecurePaymentConfirmationRequest\f[R] dictionary.
.RE
.TP
\f[B]details\f[R]
Provides information about the requested transaction.
This parameter contains the following fields:
.RS
.TP
\f[B]total\f[R]
The total amount of the payment request.
.TP
\f[B]id\f[R] \f[I](optional)\f[R]
A free\-form identifier for this payment request.
If a value is not supplied, the browser will construct one.
.TP
\f[B]displayItems\f[R]
An array of optional line items for the payment request that the user
agent may display, such as product details, tax, and shipping.
.TP
\f[B]shippingOptions\f[R]
The shipping options the user may choose from.
If this sequence is blank, it indicates the merchant cannot ship to the
current shipping address.
The default shipping option may be indicated in this sequence.
.TP
\f[B]modifiers\f[R]
Modifiers for specific payment methods; for example, adjusting the total
amount based on the payment method.
This parameter contains the following fields:
.RS
.TP
\f[B]additionalDisplayItems\f[R]
An array of items to be appended to the \f[CR]details.displayItems\f[R]
property.
This property is commonly used to add a discount or surcharge line item
indicating the different amount in \f[CR]details.modifiers.total\f[R].
.TP
\f[B]data\f[R]
A JSON\-serializable object that provides optional information that
might be needed by the supported payment methods.
.TP
\f[B]total\f[R]
A total amount for the payment request that overrides value in
details.total.
This is typically used when \f[CR]details.modifiers.additionalItems\f[R]
adds a discount or a purchase to the request.
.RE
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
Lets you set options that control the behavior of the user agent.
This parameter contains the following fields:
.RS
.TP
\f[B]requestPayerName\f[R]
A Boolean indicating whether the user agent should collect the
payer\[cq]s name and submit it with the payment request.
The default is \f[CR]false\f[R].
.TP
\f[B]requestPayerEmail\f[R]
A Boolean indicating whether the user agent should collect the
payer\[cq]s email address and submit it with the payment request.
The default is \f[CR]false\f[R].
.TP
\f[B]requestPayerPhone\f[R]
A Boolean indicating whether the user agent should collect the
payer\[cq]s phone number and submit it with the payment request.
The default is \f[CR]false\f[R].
.TP
\f[B]requestShipping\f[R]
A Boolean indicating whether the user agent should collect the
payer\[cq]s shipping address and submit it with the payment request.
If you set this type to true, you should select an appropriate
\f[CR]shippingType\f[R].
The default is \f[CR]false\f[R].
.TP
\f[B]shippingType\f[R]
Lets you specify how the user interface refers to shipping when the word
`shipping' isn\[cq]t appropriate for your use case.
For example, in English speaking countries you would say \[lq]pizza
delivery\[rq] not \[lq]pizza shipping\[rq].
Valid values are \f[CR]\[dq]shipping\[dq]\f[R],
\f[CR]\[dq]delivery\[dq]\f[R], and \f[CR]\[dq]pickup\[dq]\f[R].
Quotation marks must be included.
The default value is \f[CR]\[dq]shipping\[dq]\f[R].
.RE
.SS Return value
A new \f[CR]PaymentRequest\f[R] object, configured for use as configured
by the input parameters.
.SS Exceptions
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Use of this feature was blocked by a Permissions Policy.
.SH EXAMPLES
The following example shows minimal functionality and focuses instead on
showing the complete context of instantiating a
\f[CR]PaymentRequest\f[R] object.
.IP
.EX
\f[B]const\f[R] supportedInstruments = [
  {
    supportedMethods: \[dq]https://example.com/pay\[dq],
  },
];

\f[B]const\f[R] details = {
  total: { label: \[dq]Donation\[dq], amount: { currency: \[dq]USD\[dq], value: \[dq]65.00\[dq] } },
  displayItems: [
    {
      label: \[dq]Original donation amount\[dq],
      amount: { currency: \[dq]USD\[dq], value: \[dq]65.00\[dq] },
    },
  ],
  shippingOptions: [
    {
      id: \[dq]standard\[dq],
      label: \[dq]Standard shipping\[dq],
      amount: { currency: \[dq]USD\[dq], value: \[dq]0.00\[dq] },
      selected: \f[B]true\f[R],
    },
  ],
};

\f[B]const\f[R] options = { requestShipping: \f[B]true\f[R] };

\f[B]try\f[R] {
  \f[B]const\f[R] request = \f[B]new\f[R] PaymentRequest(supportedInstruments, details, options);
  \f[I]// Add event listeners here.\f[R]
  \f[I]// Call show() to trigger the browser\[aq]s payment flow.\f[R]
  request
    .show()
    .then((instrumentResponse) \f[B]=>\f[R] {
      \f[I]// Do something with the response from the UI.\f[R]
    })
    .catch((err) \f[B]=>\f[R] {
      \f[I]// Do something with the error from request.show().\f[R]
    });
} \f[B]catch\f[R] (e) {
  \f[I]// Catch any other errors.\f[R]
}
.EE
