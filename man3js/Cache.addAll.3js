.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Cache.addAll" "JS" "May 18, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Cache.addAll \- Cache: addAll() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]addAll()\f[B]\f[R] method of the \f[CR]Cache\f[R]
interface takes an array of URLs, retrieves them, and adds the resulting
response objects to the given cache.
The request objects created during retrieval become keys to the stored
response operations.
.RS
.PP
\f[B]Note:\f[R] \f[CR]addAll()\f[R] will overwrite any key/value pairs
previously stored in the cache that match the request, but will fail if
a resulting \f[CR]put()\f[R] operation would overwrite a previous cache
entry stored by the same \f[CR]addAll()\f[R] method.
.RE
.SH SYNTAX
.IP
.EX
addAll(requests)
.EE
.SS Parameters
.TP
\f[B]requests\f[R]
An array of requests for the resources you want to add to the cache.
These can be \f[CR]Request\f[R] objects or URLs.
.RS
.PP
These requests are used as parameters to the \f[CR]Request()\f[R]
constructor, so URLs follow the same rules as for that constructor.
In particular, URLs may be relative to the base URL, which is the
document\[cq]s \f[CR]baseURI\f[R] in a window context, or
\f[CR]WorkerGlobalScope.location\f[R] in a worker context.
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with \f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The URL scheme is not \f[CR]http\f[R] or \f[CR]https\f[R].
.RS
.PP
The Response status is not in the 200 range (i.e., not a successful
response.)
This occurs if the request does not return successfully, but also if the
request is a \f[I]cross\-origin no\-cors\f[R] request (in which case the
reported status is always 0.)
.RE
.SH EXAMPLES
This code block waits for an \f[CR]InstallEvent\f[R] to fire, then runs
\f[CR]waitUntil()\f[R] to handle the install process for the app.
This consists of calling \f[CR]CacheStorage.open\f[R] to create a new
cache, then using \f[CR]addAll()\f[R] to add a series of assets to it.
.IP
.EX
\f[B]this\f[R].addEventListener(\[dq]install\[dq], (event) \f[B]=>\f[R] {
  event.waitUntil(
    caches
      .open(\[dq]v1\[dq])
      .then((cache) \f[B]=>\f[R]
        cache.addAll([
          \[dq]/\[dq],
          \[dq]/index.html\[dq],
          \[dq]/style.css\[dq],
          \[dq]/app.js\[dq],
          \[dq]/image\-list.js\[dq],
          \[dq]/star\-wars\-logo.jpg\[dq],
          \[dq]/gallery/\[dq],
          \[dq]/gallery/bountyHunters.jpg\[dq],
          \[dq]/gallery/myLittleVader.jpg\[dq],
          \[dq]/gallery/snowTroopers.jpg\[dq],
        ]),
      ),
  );
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\f[CR]Cache\f[R]
.IP \[bu] 2
\f[CR]Window.caches\f[R] and \f[CR]WorkerGlobalScope.caches\f[R]
