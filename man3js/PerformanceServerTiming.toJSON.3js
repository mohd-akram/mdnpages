.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "PerformanceServerTiming.toJSON" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceServerTiming.toJSON \- PerformanceServerTiming: toJSON()
method
.SH SYNOPSIS
The \f[B]\f[CB]toJSON()\f[B]\f[R] method of the
\f[CR]PerformanceServerTiming\f[R] interface is a serializer; it returns
a JSON representation of the \f[CR]PerformanceServerTiming\f[R] object.
.SH SYNTAX
.IP
.EX
toJSON()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]JSON\f[R] object that is the serialization of the
\f[CR]PerformanceServerTiming\f[R] object.
.SH EXAMPLES
.SS Logging server timing entries
Server timing metrics require the server to send the
\f[CR]Server\-Timing\f[R] header.
For example:
.IP
.EX
Server\-Timing: cache;desc=\[dq]Cache Read\[dq];dur=23.2
.EE
.PP
The \f[CR]serverTiming\f[R] entries can live on \f[CR]navigation\f[R]
and \f[CR]resource\f[R] entries.
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]navigation\f[R] and \f[CR]resource\f[R] performance entries as
they are recorded in the browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    entry.serverTiming.forEach((serverEntry) \f[B]=>\f[R] {
      console.log(serverEntry.toJSON());
    });
  });
});

[\[dq]navigation\[dq], \[dq]resource\[dq]].forEach((type) \f[B]=>\f[R]
  observer.observe({ type, buffered: \f[B]true\f[R] }),
);
.EE
.PP
This would log a JSON object like so:
.IP
.EX
{
  \[dq]name\[dq]: \[dq]cache\[dq],
  \[dq]duration\[dq]: 23.2,
  \[dq]description\[dq]: \[dq]Cache Read\[dq]
}
.EE
.PP
To get a JSON string, you can use \f[CR]JSON.stringify(serverEntry)\f[R]
directly; it will call \f[CR]toJSON()\f[R] automatically.
