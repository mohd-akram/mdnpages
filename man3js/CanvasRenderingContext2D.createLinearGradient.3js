.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CANVASRENDERINGCONTEXT2D.CREATELINEARGRADIENT" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.createLinearGradient \-
CanvasRenderingContext2D: createLinearGradient() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.createLinearGradient()\f[B]\f[R]
method of the Canvas 2D API creates a gradient along the line connecting
two given coordinates.
[IMAGE: The gradient transitions colors along the gradient line,
starting at point x0, y0 and going to x1, y1, even if those points
extend the gradient line beyond the edges of the element on which the
gradient is drawn.]
The gradient transitions colors along the gradient line, starting at
point x0, y0 and going to x1, y1, even if those points extend the
gradient line beyond the edges of the element on which the gradient is
drawn.
.PP
This method returns a linear \f[CR]CanvasGradient\f[R].
To be applied to a shape, the gradient must first be assigned to the
\f[CR]fillStyle\f[R] or \f[CR]strokeStyle\f[R] properties.
.RS
.PP
\f[B]Note:\f[R] Gradient coordinates are global, i.e., relative to the
current coordinate space.
When applied to a shape, the coordinates are NOT relative to the
shape\(cqs coordinates.
.RE
.SH SYNTAX
.IP
.EX
createLinearGradient(x0, y0, x1, y1)
.EE
.PP
The \f[CR]createLinearGradient()\f[R] method is specified by four
parameters defining the start and end points of the gradient line.
.SS Parameters
.TP
\f[B]x0\f[R]
The x\-axis coordinate of the start point.
.TP
\f[B]y0\f[R]
The y\-axis coordinate of the start point.
.TP
\f[B]x1\f[R]
The x\-axis coordinate of the end point.
.TP
\f[B]y1\f[R]
The y\-axis coordinate of the end point.
.SS Return value
A linear \f[CR]CanvasGradient\f[R] initialized with the specified line.
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown when non\-finite values are passed as parameters.
.SH EXAMPLES
.SS Filling a rectangle with a linear gradient
This example initializes a linear gradient using the
\f[CR]createLinearGradient()\f[R] method.
Three color stops between the gradient\(cqs start and end points are
then created.
Finally, the gradient is assigned to the canvas context, and is rendered
to a filled rectangle.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

\f[I]// Create a linear gradient\f[R]
\f[I]// The start gradient point is at x=20, y=0\f[R]
\f[I]// The end gradient point is at x=220, y=0\f[R]
\f[B]const\f[R] gradient = ctx.createLinearGradient(20, 0, 220, 0);

\f[I]// Add three color stops\f[R]
gradient.addColorStop(0, \(dqgreen\(dq);
gradient.addColorStop(0.5, \(dqcyan\(dq);
gradient.addColorStop(1, \(dqgreen\(dq);

\f[I]// Set the fill style and draw a rectangle\f[R]
ctx.fillStyle = gradient;
ctx.fillRect(20, 20, 200, 100);
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \(bu 2
\f[CR]CanvasRenderingContext2D.createRadialGradient()\f[R]
.IP \(bu 2
\f[CR]CanvasRenderingContext2D.createConicGradient()\f[R]
