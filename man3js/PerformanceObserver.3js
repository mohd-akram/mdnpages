.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "PerformanceObserver" "JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceObserver \- PerformanceObserver
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]PerformanceObserver\f[B]\f[R] interface is used to
observe performance measurement events and be notified of new
performance entries as they are recorded in the browser\[cq]s
\f[I]performance timeline\f[R].
.SH CONSTRUCTOR
.TP
\f[B]PerformanceObserver()\f[R]
Creates and returns a new \f[CR]PerformanceObserver\f[R] object.
.SH STATIC PROPERTIES
.TP
\f[B]PerformanceObserver.supportedEntryTypes\f[R] \f[I](read\-only)\f[R]
Returns an array of the \f[CR]entryType\f[R] values supported by the
user agent.
.SH INSTANCE METHODS
.TP
\f[B]PerformanceObserver.observe()\f[R]
Specifies the set of entry types to observe.
The performance observer\[cq]s callback function will be invoked when
performance entry is recorded for one of the specified
\f[CR]entryTypes\f[R].
.TP
\f[B]PerformanceObserver.disconnect()\f[R]
Stops the performance observer callback from receiving performance
entries.
.TP
\f[B]PerformanceObserver.takeRecords()\f[R]
Returns the current list of performance entries stored in the
performance observer, emptying it out.
.SH EXAMPLES
.SS Creating a PerformanceObserver
The following example creates a \f[CR]PerformanceObserver\f[R] watching
for \[lq]mark\[rq] (\f[CR]PerformanceMark\f[R]) and \[lq]measure\[rq]
(\f[CR]PerformanceMeasure\f[R]) events.
The \f[CR]perfObserver\f[R] callback provides a \f[CR]list\f[R]
(\f[CR]PerformanceObserverEntryList\f[R]) which allows you to get
observed performance entries.
.IP
.EX
\f[B]function\f[R] perfObserver(list, observer) {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]if\f[R] (entry.entryType === \[dq]mark\[dq]) {
      console.log(\[ga]${entry.name}\[aq]s startTime: ${entry.startTime}\[ga]);
    }
    \f[B]if\f[R] (entry.entryType === \[dq]measure\[dq]) {
      console.log(\[ga]${entry.name}\[aq]s duration: ${entry.duration}\[ga]);
    }
  });
}
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver(perfObserver);
observer.observe({ entryTypes: [\[dq]measure\[dq], \[dq]mark\[dq]] });
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]MutationObserver\f[R]
.IP \[bu] 2
\f[CR]ResizeObserver\f[R]
.IP \[bu] 2
\f[CR]IntersectionObserver\f[R]
