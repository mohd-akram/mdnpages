.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Symbol.valueOf" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.valueOf \- Symbol.prototype.valueOf()
.SH SYNOPSIS
The \f[B]\f[CB]valueOf()\f[B]\f[R] method of \f[CR]Symbol\f[R] values
returns this symbol value.
.IP
.EX
\f[B]const\f[R] symbol1 = Symbol(\[dq]foo\[dq]);

console.log(\f[B]typeof\f[R] Object(symbol1));
\f[I]// Expected output: \[dq]object\[dq]\f[R]

console.log(\f[B]typeof\f[R] Object(symbol1).valueOf());
\f[I]// Expected output: \[dq]symbol\[dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
valueOf()
.EE
.SS Parameters
None.
.SS Return value
The primitive value of the specified \f[CR]Symbol\f[R] object.
.SH DESCRIPTION
The \f[CR]valueOf()\f[R] method of \f[CR]Symbol\f[R] returns the
primitive value of a Symbol object as a Symbol data type.
.PP
JavaScript calls the \f[CR]valueOf()\f[R] method to convert an object to
a primitive value.
You rarely need to invoke the \f[CR]valueOf()\f[R] method yourself;
JavaScript automatically invokes it when encountering an object where a
primitive value is expected.
.SH EXAMPLES
.SS Using valueOf()
.IP
.EX
\f[B]const\f[R] sym = Symbol(\[dq]example\[dq]);
sym === sym.valueOf(); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Object.prototype.valueOf()\f[R]
