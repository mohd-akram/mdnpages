.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEAKSET.HAS" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WeakSet.has \- WeakSet.prototype.has()
.SH SYNOPSIS
The \f[B]\f[CB]has()\f[B]\f[R] method of \f[CR]WeakSet\f[R] instances
returns a boolean indicating whether an object exists in this
\f[CR]WeakSet\f[R] or not.
.IP
.EX
\f[B]const\f[R] weakset1 = \f[B]new\f[R] WeakSet();
\f[B]const\f[R] object1 = {};
\f[B]const\f[R] object2 = {};

weakset1.add(object1);

console.log(weakset1.has(object1));
\f[I]// Expected output: true\f[R]

console.log(weakset1.has(object2));
\f[I]// Expected output: false\f[R]
.EE
.SH SYNTAX
.IP
.EX
has(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
The value to test for presence in the \f[CR]WeakSet\f[R].
.SS Return value
Returns \f[CR]true\f[R] if an element with the specified value exists in
the \f[CR]WeakSet\f[R] object; otherwise \f[CR]false\f[R].
Always returns \f[CR]false\f[R] if \f[CR]value\f[R] is not an object or
a non\-registered symbol.
.SH EXAMPLES
.SS Using the \f[CR]has()\f[R] method
.IP
.EX
\f[B]const\f[R] ws = \f[B]new\f[R] WeakSet();
\f[B]const\f[R] obj = {};
ws.add(window);

ws.has(window); \f[I]// returns true\f[R]
ws.has(obj); \f[I]// returns false\f[R]

\f[I]// Storing a non\-registered symbol\f[R]
\f[B]const\f[R] sym = Symbol(\(dqfoo\(dq);
ws.add(sym);
ws.add(Symbol.iterator);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]WeakSet\f[R]
.IP \(bu 2
\f[CR]WeakSet.prototype.add()\f[R]
.IP \(bu 2
\f[CR]WeakSet.prototype.delete()\f[R]
