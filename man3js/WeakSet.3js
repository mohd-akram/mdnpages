.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "WeakSet" "JS" "August 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WeakSet \- WeakSet
.SH SYNOPSIS
A \f[B]\f[CB]WeakSet\f[B]\f[R] is a collection of garbage\-collectable
values, including objects and non\-registered symbols.
A value in the \f[CR]WeakSet\f[R] may only occur once.
It is unique in the \f[CR]WeakSet\f[R]\[cq]s collection.
.SH DESCRIPTION
Values of WeakSets must be garbage\-collectable.
Most primitive data types can be arbitrarily created and don\[cq]t have
a lifetime, so they cannot be stored.
Objects and non\-registered symbols can be stored because they are
garbage\-collectable.
.PP
The main differences to the \f[CR]Set\f[R] object are:
.IP \[bu] 2
\f[CR]WeakSet\f[R]s are collections of \f[B]objects and symbols
only\f[R].
They cannot contain arbitrary values of any type, as \f[CR]Set\f[R]s
can.
.IP \[bu] 2
The \f[CR]WeakSet\f[R] is \f[I]weak\f[R], meaning references to objects
in a \f[CR]WeakSet\f[R] are held \f[I]weakly\f[R].
If no other references to a value stored in the \f[CR]WeakSet\f[R]
exist, those values can be garbage collected.
.RS 2
.RS
.PP
\f[B]Note:\f[R] This also means that there is no list of current values
stored in the collection.
\f[CR]WeakSets\f[R] are not enumerable.
.RE
.RE
.SS Use case: Detecting circular references
Functions that call themselves recursively need a way of guarding
against circular data structures by tracking which objects have already
been processed.
.PP
\f[CR]WeakSet\f[R]s are ideal for this purpose:
.IP
.EX
\f[I]// Execute a callback on everything stored inside an object\f[R]
\f[B]function\f[R] execRecursively(fn, subject, _refs = \f[B]new\f[R] WeakSet()) {
  \f[I]// Avoid infinite recursion\f[R]
  \f[B]if\f[R] (_refs.has(subject)) {
    \f[B]return\f[R];
  }

  fn(subject);
  \f[B]if\f[R] (\f[B]typeof\f[R] subject === \[dq]object\[dq] && subject) {
    _refs.add(subject);
    \f[B]for\f[R] (\f[B]const\f[R] key \f[B]in\f[R] subject) {
      execRecursively(fn, subject[key], _refs);
    }
    _refs.delete(subject);
  }
}

\f[B]const\f[R] foo = {
  foo: \[dq]Foo\[dq],
  bar: {
    bar: \[dq]Bar\[dq],
  },
};

foo.bar.baz = foo; \f[I]// Circular reference!\f[R]
execRecursively((obj) \f[B]=>\f[R] console.log(obj), foo);
.EE
.PP
Here, a \f[CR]WeakSet\f[R] is created on the first run, and passed along
with every subsequent function call (using the internal \f[CR]_refs\f[R]
parameter).
.PP
The number of objects or their traversal order is immaterial, so a
\f[CR]WeakSet\f[R] is more suitable (and performant) than a
\f[CR]Set\f[R] for tracking object references, especially if a very
large number of objects is involved.
.SH CONSTRUCTOR
.TP
\f[B]WeakSet()\f[R]
Creates a new \f[CR]WeakSet\f[R] object.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]WeakSet.prototype\f[R] and shared
by all \f[CR]WeakSet\f[R] instances.
.TP
\f[B]WeakSet.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]WeakSet\f[R] instances, the initial value is the
\f[CR]WeakSet\f[R] constructor.
.TP
\f[B]WeakSet.prototype[\[at]\[at]toStringTag]\f[R]
The initial value of the \f[CR]\[at]\[at]toStringTag\f[R] property is
the string \f[CR]\[dq]WeakSet\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]WeakSet.prototype.add()\f[R]
Appends \f[CR]value\f[R] to the \f[CR]WeakSet\f[R] object.
.TP
\f[B]WeakSet.prototype.delete()\f[R]
Removes \f[CR]value\f[R] from the \f[CR]WeakSet\f[R].
\f[CR]WeakSet.prototype.has(value)\f[R] will return \f[CR]false\f[R]
afterwards.
.TP
\f[B]WeakSet.prototype.has()\f[R]
Returns a boolean asserting whether \f[CR]value\f[R] is present in the
\f[CR]WeakSet\f[R] object or not.
.SH EXAMPLES
.SS Using the WeakSet object
.IP
.EX
\f[B]const\f[R] ws = \f[B]new\f[R] WeakSet();
\f[B]const\f[R] foo = {};
\f[B]const\f[R] bar = {};

ws.add(foo);
ws.add(bar);

ws.has(foo); \f[I]// true\f[R]
ws.has(bar); \f[I]// true\f[R]

ws.delete(foo); \f[I]// removes foo from the set\f[R]
ws.has(foo); \f[I]// false, foo has been removed\f[R]
ws.has(bar); \f[I]// true, bar is retained\f[R]
.EE
.PP
Note that \f[CR]foo !== bar\f[R].
While they are similar objects, \f[I]they are not \f[BI]the same
object\f[I]\f[R].
And so they are both added to the set.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#weakset
Polyfill of \f[CR]WeakSet\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Map\f[R]
.IP \[bu] 2
\f[CR]Set\f[R]
.IP \[bu] 2
\f[CR]WeakMap\f[R]
