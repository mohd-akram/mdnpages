'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Array" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array \- Array
.SH SYNOPSIS
The \f[B]\f[CB]Array\f[B]\f[R] object, as with arrays in other
programming languages, enables storing a collection of multiple items
under a single variable name, and has members for performing common
array operations.
.SH DESCRIPTION
In JavaScript, arrays aren\[cq]t primitives but are instead
\f[CR]Array\f[R] objects with the following core characteristics:
.IP \[bu] 2
\f[B]JavaScript arrays are resizable\f[R] and \f[B]can contain a mix of
different data types\f[R].
(When those characteristics are undesirable, use typed arrays instead.)
.IP \[bu] 2
\f[B]JavaScript arrays are not associative arrays\f[R] and so, array
elements cannot be accessed using arbitrary strings as indexes, but must
be accessed using nonnegative integers (or their respective string form)
as indexes.
.IP \[bu] 2
\f[B]JavaScript arrays are \c
.UR https://en.wikipedia.org/wiki/Zero-based_numbering
zero\-indexed
.UE \c
\f[R]: the first element of an array is at index \f[CR]0\f[R], the
second is at index \f[CR]1\f[R], and so on \[em] and the last element is
at the value of the array\[cq]s \f[CR]length\f[R] property minus
\f[CR]1\f[R].
.IP \[bu] 2
\f[B]JavaScript array\-copy operations create shallow copies\f[R].
(All standard built\-in copy operations with \f[I]any\f[R] JavaScript
objects create shallow copies, rather than deep copies).
.SS Array indices
\f[CR]Array\f[R] objects cannot use arbitrary strings as element indexes
(as in an \c
.UR https://en.wikipedia.org/wiki/Associative_array
associative array
.UE \c
) but must use nonnegative integers (or their respective string form).
Setting or accessing via non\-integers will not set or retrieve an
element from the array list itself, but will set or access a variable
associated with that array\[cq]s object property collection.
The array\[cq]s object properties and list of array elements are
separate, and the array\[cq]s traversal and mutation operations cannot
be applied to these named properties.
.PP
Array elements are object properties in the same way that
\f[CR]toString\f[R] is a property (to be specific, however,
\f[CR]toString()\f[R] is a method).
Nevertheless, trying to access an element of an array as follows throws
a syntax error because the property name is not valid:
.PP
\f[B]Bad\f[R]
.IP
.EX
arr.0; // a syntax error
.EE
.PP
JavaScript syntax requires properties beginning with a digit to be
accessed using bracket notation instead of dot notation.
It\[cq]s also possible to quote the array indices (e.g.,
\f[CR]years[\[aq]2\[aq]]\f[R] instead of \f[CR]years[2]\f[R]), although
usually not necessary.
.PP
The \f[CR]2\f[R] in \f[CR]years[2]\f[R] is coerced into a string by the
JavaScript engine through an implicit \f[CR]toString\f[R] conversion.
As a result, \f[CR]\[aq]2\[aq]\f[R] and \f[CR]\[aq]02\[aq]\f[R] would
refer to two different slots on the \f[CR]years\f[R] object, and the
following example could be \f[CR]true\f[R]:
.IP
.EX
console.log(years[\[dq]2\[dq]] !== years[\[dq]02\[dq]]);
.EE
.PP
Only \f[CR]years[\[aq]2\[aq]]\f[R] is an actual array index.
\f[CR]years[\[aq]02\[aq]]\f[R] is an arbitrary string property that will
not be visited in array iteration.
.SS Relationship between length and numerical properties
A JavaScript array\[cq]s \f[CR]length\f[R] property and numerical
properties are connected.
.PP
Several of the built\-in array methods (e.g., \f[CR]join()\f[R],
\f[CR]slice()\f[R], \f[CR]indexOf()\f[R], etc.)
take into account the value of an array\[cq]s \f[CR]length\f[R] property
when they\[cq]re called.
.PP
Other methods (e.g., \f[CR]push()\f[R], \f[CR]splice()\f[R], etc.)
also result in updates to an array\[cq]s \f[CR]length\f[R] property.
.IP
.EX
\f[B]const\f[R] fruits = [];
fruits.push(\[dq]banana\[dq], \[dq]apple\[dq], \[dq]peach\[dq]);
console.log(fruits.length); \f[I]// 3\f[R]
.EE
.PP
When setting a property on a JavaScript array when the property is a
valid array index and that index is outside the current bounds of the
array, the engine will update the array\[cq]s \f[CR]length\f[R] property
accordingly:
.IP
.EX
fruits[5] = \[dq]mango\[dq];
console.log(fruits[5]); \f[I]// \[aq]mango\[aq]\f[R]
console.log(Object.keys(fruits)); \f[I]// [\[aq]0\[aq], \[aq]1\[aq], \[aq]2\[aq], \[aq]5\[aq]]\f[R]
console.log(fruits.length); \f[I]// 6\f[R]
.EE
.PP
Increasing the \f[CR]length\f[R] extends the array by adding empty slots
without creating any new elements \[em] not even \f[CR]undefined\f[R].
.IP
.EX
fruits.length = 10;
console.log(fruits); \f[I]// [\[aq]banana\[aq], \[aq]apple\[aq], \[aq]peach\[aq], empty x 2, \[aq]mango\[aq], empty x 4]\f[R]
console.log(Object.keys(fruits)); \f[I]// [\[aq]0\[aq], \[aq]1\[aq], \[aq]2\[aq], \[aq]5\[aq]]\f[R]
console.log(fruits.length); \f[I]// 10\f[R]
console.log(fruits[8]); \f[I]// undefined\f[R]
.EE
.PP
Decreasing the \f[CR]length\f[R] property does, however, delete
elements.
.IP
.EX
fruits.length = 2;
console.log(Object.keys(fruits)); \f[I]// [\[aq]0\[aq], \[aq]1\[aq]]\f[R]
console.log(fruits.length); \f[I]// 2\f[R]
.EE
.PP
This is explained further on the \f[CR]length\f[R] page.
.SS Array methods and empty slots
Array methods have different behaviors when encountering empty slots in
sparse arrays.
In general, older methods (e.g.\ \f[CR]forEach\f[R]) treat empty slots
differently from indices that contain \f[CR]undefined\f[R].
.PP
Methods that have special treatment for empty slots include the
following: \f[CR]concat()\f[R], \f[CR]copyWithin()\f[R],
\f[CR]every()\f[R], \f[CR]filter()\f[R], \f[CR]flat()\f[R],
\f[CR]flatMap()\f[R], \f[CR]forEach()\f[R], \f[CR]indexOf()\f[R],
\f[CR]lastIndexOf()\f[R], \f[CR]map()\f[R], \f[CR]reduce()\f[R],
\f[CR]reduceRight()\f[R], \f[CR]reverse()\f[R], \f[CR]slice()\f[R],
\f[CR]some()\f[R], \f[CR]sort()\f[R], and \f[CR]splice()\f[R].
Iteration methods such as \f[CR]forEach\f[R] don\[cq]t visit empty slots
at all.
Other methods, such as \f[CR]concat\f[R], \f[CR]copyWithin\f[R], etc.,
preserve empty slots when doing the copying, so in the end the array is
still sparse.
.IP
.EX
\f[B]const\f[R] colors = [\[dq]red\[dq], \[dq]yellow\[dq], \[dq]blue\[dq]];
colors[5] = \[dq]purple\[dq];
colors.forEach((item, index) \f[B]=>\f[R] {
  console.log(\[ga]${index}: ${item}\[ga]);
});
\f[I]// Output:\f[R]
\f[I]// 0: red\f[R]
\f[I]// 1: yellow\f[R]
\f[I]// 2: blue\f[R]
\f[I]// 5: purple\f[R]

colors.reverse(); \f[I]// [\[aq]purple\[aq], empty Ã— 2, \[aq]blue\[aq], \[aq]yellow\[aq], \[aq]red\[aq]]\f[R]
.EE
.PP
Newer methods (e.g.\ \f[CR]keys\f[R]) do not treat empty slots specially
and treat them as if they contain \f[CR]undefined\f[R].
Methods that conflate empty slots with \f[CR]undefined\f[R] elements
include the following: \f[CR]entries()\f[R], \f[CR]fill()\f[R],
\f[CR]find()\f[R], \f[CR]findIndex()\f[R], \f[CR]findLast()\f[R],
\f[CR]findLastIndex()\f[R], \f[CR]includes()\f[R], \f[CR]join()\f[R],
\f[CR]keys()\f[R], \f[CR]toLocaleString()\f[R], \f[CR]toReversed()\f[R],
\f[CR]toSorted()\f[R], \f[CR]toSpliced()\f[R], \f[CR]values()\f[R], and
\f[CR]with()\f[R].
.IP
.EX
\f[B]const\f[R] colors = [\[dq]red\[dq], \[dq]yellow\[dq], \[dq]blue\[dq]];
colors[5] = \[dq]purple\[dq];
\f[B]const\f[R] iterator = colors.keys();
\f[B]for\f[R] (\f[B]const\f[R] key \f[B]of\f[R] iterator) {
  console.log(\[ga]${key}: ${colors[key]}\[ga]);
}
\f[I]// Output\f[R]
\f[I]// 0: red\f[R]
\f[I]// 1: yellow\f[R]
\f[I]// 2: blue\f[R]
\f[I]// 3: undefined\f[R]
\f[I]// 4: undefined\f[R]
\f[I]// 5: purple\f[R]

\f[B]const\f[R] newColors = colors.toReversed(); \f[I]// [\[aq]purple\[aq], undefined, undefined, \[aq]blue\[aq], \[aq]yellow\[aq], \[aq]red\[aq]]\f[R]
.EE
.SS Copying methods and mutating methods
Some methods do not mutate the existing array that the method was called
on, but instead return a new array.
They do so by first constructing a new array and then populating it with
elements.
The copy always happens \f[I]shallowly\f[R] \[em] the method never
copies anything beyond the initially created array.
Elements of the original array(s) are copied into the new array as
follows:
.IP \[bu] 2
Objects: the object reference is copied into the new array.
Both the original and new array refer to the same object.
That is, if a referenced object is modified, the changes are visible to
both the new and original arrays.
.IP \[bu] 2
Primitive types such as strings, numbers and booleans (not
\f[CR]String\f[R], \f[CR]Number\f[R], and \f[CR]Boolean\f[R] objects):
their values are copied into the new array.
.PP
Other methods mutate the array that the method was called on, in which
case their return value differs depending on the method: sometimes a
reference to the same array, sometimes the length of the new array.
.PP
The following methods create new arrays by accessing
\f[CR]this.constructor[Symbol.species]\f[R] to determine the constructor
to use: \f[CR]concat()\f[R], \f[CR]filter()\f[R], \f[CR]flat()\f[R],
\f[CR]flatMap()\f[R], \f[CR]map()\f[R], \f[CR]slice()\f[R], and
\f[CR]splice()\f[R] (to construct the array of removed elements
that\[cq]s returned).
.PP
The following methods always create new arrays with the \f[CR]Array\f[R]
base constructor: \f[CR]toReversed()\f[R], \f[CR]toSorted()\f[R],
\f[CR]toSpliced()\f[R], and \f[CR]with()\f[R].
.PP
The following table lists the methods that mutate the original array,
and the corresponding non\-mutating alternative:
.PP
.TS
tab(@);
lw(31.6n) lw(38.4n).
T{
Mutating method
T}@T{
Non\-mutating alternative
T}
_
T{
\f[CR]copyWithin()\f[R]
T}@T{
No one\-method alternative
T}
T{
\f[CR]fill()\f[R]
T}@T{
No one\-method alternative
T}
T{
\f[CR]pop()\f[R]
T}@T{
\f[CR]slice(0, \-1)\f[R]
T}
T{
\f[CR]push(v1, v2)\f[R]
T}@T{
\f[CR]concat([v1, v2])\f[R]
T}
T{
\f[CR]reverse()\f[R]
T}@T{
\f[CR]toReversed()\f[R]
T}
T{
\f[CR]shift()\f[R]
T}@T{
\f[CR]slice(1)\f[R]
T}
T{
\f[CR]sort()\f[R]
T}@T{
\f[CR]toSorted()\f[R]
T}
T{
\f[CR]splice()\f[R]
T}@T{
\f[CR]toSpliced()\f[R]
T}
T{
\f[CR]unshift(v1, v2)\f[R]
T}@T{
\f[CR]toSpliced(0, 0, v1, v2)\f[R]
T}
.TE
.PP
An easy way to change a mutating method into a non\-mutating alternative
is to use the spread syntax or \f[CR]slice()\f[R] to create a copy
first:
.IP
.EX
arr.copyWithin(0, 1, 2); // mutates arr
const arr2 = arr.slice().copyWithin(0, 1, 2); // does not mutate arr
const arr3 = [...arr].copyWithin(0, 1, 2); // does not mutate arr
.EE
.SS Iterative methods
Many array methods take a callback function as an argument.
The callback function is called sequentially and at most once for each
element in the array, and the return value of the callback function is
used to determine the return value of the method.
They all share the same signature:
.IP
.EX
method(callbackFn, thisArg)
.EE
.PP
Where \f[CR]callbackFn\f[R] takes three arguments:
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array that the method was called upon.
.PP
What \f[CR]callbackFn\f[R] is expected to return depends on the array
method that was called.
.PP
The \f[CR]thisArg\f[R] argument (defaults to \f[CR]undefined\f[R]) will
be used as the \f[CR]this\f[R] value when calling \f[CR]callbackFn\f[R].
The \f[CR]this\f[R] value ultimately observable by \f[CR]callbackFn\f[R]
is determined according to the usual rules: if \f[CR]callbackFn\f[R] is
non\-strict, primitive \f[CR]this\f[R] values are wrapped into objects,
and \f[CR]undefined\f[R]/\f[CR]null\f[R] is substituted with
\f[CR]globalThis\f[R].
The \f[CR]thisArg\f[R] argument is irrelevant for any
\f[CR]callbackFn\f[R] defined with an arrow function, as arrow functions
don\[cq]t have their own \f[CR]this\f[R] binding.
.PP
The \f[CR]array\f[R] argument passed to \f[CR]callbackFn\f[R] is most
useful if you want to read another index during iteration, because you
may not always have an existing variable that refers to the current
array.
You should generally not mutate the array during iteration (see mutating
initial array in iterative methods), but you can also use this argument
to do so.
The \f[CR]array\f[R] argument is \f[I]not\f[R] the array that is being
built, in the case of methods like \f[CR]map()\f[R],
\f[CR]filter()\f[R], and \f[CR]flatMap()\f[R] \[em] there is no way to
access the array being built from the callback function.
.PP
All iterative methods are copying and generic, although they behave
differently with empty slots.
.PP
The following methods are iterative: \f[CR]every()\f[R],
\f[CR]filter()\f[R], \f[CR]find()\f[R], \f[CR]findIndex()\f[R],
\f[CR]findLast()\f[R], \f[CR]findLastIndex()\f[R], \f[CR]flatMap()\f[R],
\f[CR]forEach()\f[R], \f[CR]map()\f[R], and \f[CR]some()\f[R].
.PP
In particular, \f[CR]every()\f[R], \f[CR]find()\f[R],
\f[CR]findIndex()\f[R], \f[CR]findLast()\f[R],
\f[CR]findLastIndex()\f[R], and \f[CR]some()\f[R] do not always invoke
\f[CR]callbackFn\f[R] on every element \[em] they stop iteration as soon
as the return value is determined.
.PP
The \f[CR]reduce()\f[R] and \f[CR]reduceRight()\f[R] methods also take a
callback function and run it at most once for each element in the array,
but they have slightly different signatures from typical iterative
methods (for example, they don\[cq]t accept \f[CR]thisArg\f[R]).
.PP
The \f[CR]sort()\f[R] method also takes a callback function, but it is
not an iterative method.
It mutates the array in\-place, doesn\[cq]t accept \f[CR]thisArg\f[R],
and may invoke the callback multiple times on an index.
.PP
Iterative methods iterate the array like the following (with a lot of
technical details omitted):
.IP
.EX
\f[B]function\f[R] method(callbackFn, thisArg) {
  \f[B]const\f[R] length = \f[B]this\f[R].length;
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < length; i++) {
    \f[B]if\f[R] (i \f[B]in\f[R] \f[B]this\f[R]) {
      \f[B]const\f[R] result = callbackFn.call(thisArg, \f[B]this\f[R][i], i, \f[B]this\f[R]);
      \f[I]// Do something with result; maybe return early\f[R]
    }
  }
}
.EE
.PP
Note the following:
.IP "1." 3
Not all methods do the \f[CR]i in this\f[R] test.
The \f[CR]find\f[R], \f[CR]findIndex\f[R], \f[CR]findLast\f[R], and
\f[CR]findLastIndex\f[R] methods do not, but other methods do.
.IP "2." 3
The \f[CR]length\f[R] is memorized before the loop starts.
This affects how insertions and deletions during iteration are handled
(see mutating initial array in iterative methods).
.IP "3." 3
The method doesn\[cq]t memorize the array contents, so if any index is
modified during iteration, the new value might be observed.
.IP "4." 3
The code above iterates the array in ascending order of index.
Some methods iterate in descending order of index
(\f[CR]for (let i = length \- 1; i >= 0; i\-\-)\f[R]):
\f[CR]reduceRight()\f[R], \f[CR]findLast()\f[R], and
\f[CR]findLastIndex()\f[R].
.IP "5." 3
\f[CR]reduce\f[R] and \f[CR]reduceRight\f[R] have slightly different
signatures and do not always start at the first/last element.
.SS Generic array methods
Array methods are always generic \[em] they don\[cq]t access any
internal data of the array object.
They only access the array elements through the \f[CR]length\f[R]
property and the indexed elements.
This means that they can be called on array\-like objects as well.
.IP
.EX
\f[B]const\f[R] arrayLike = {
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  length: 2,
};
console.log(Array.prototype.join.call(arrayLike, \[dq]+\[dq])); \f[I]// \[aq]a+b\[aq]\f[R]
.EE
.SS Normalization of the length property
The \f[CR]length\f[R] property is converted to an integer and then
clamped to the range between 0 and 2\[ha]53 \- 1.
\f[CR]NaN\f[R] becomes \f[CR]0\f[R], so even when \f[CR]length\f[R] is
not present or is \f[CR]undefined\f[R], it behaves as if it has value
\f[CR]0\f[R].
.PP
The language avoids setting \f[CR]length\f[R] to an unsafe integer.
All built\-in methods will throw a \f[CR]TypeError\f[R] if
\f[CR]length\f[R] will be set to a number greater than 2\[ha]53 \- 1.
However, because the \f[CR]length\f[R] property of arrays throws an
error if it\[cq]s set to greater than 2\[ha]32 \- 1, the safe integer
threshold is usually not reached unless the method is called on a
non\-array object.
.IP
.EX
Array.prototype.flat.call({}); \f[I]// []\f[R]
.EE
.PP
Some array methods set the \f[CR]length\f[R] property of the array
object.
They always set the value after normalization, so \f[CR]length\f[R]
always ends as an integer.
.IP
.EX
\f[B]const\f[R] a = { length: 0.7 };
Array.prototype.push.call(a);
console.log(a.length); \f[I]// 0\f[R]
.EE
.SS Array\-like objects
The term \f[I]array\-like object\f[R] refers to any object that
doesn\[cq]t throw during the \f[CR]length\f[R] conversion process
described above.
In practice, such object is expected to actually have a
\f[CR]length\f[R] property and to have indexed elements in the range
\f[CR]0\f[R] to \f[CR]length \- 1\f[R].
(If it doesn\[cq]t have all indices, it will be functionally equivalent
to a sparse array.)
Any integer index less than zero or greater than \f[CR]length \- 1\f[R]
is ignored when an array method operates on an array\-like object.
.PP
Many DOM objects are array\-like \[em] for example, \f[CR]NodeList\f[R]
and \f[CR]HTMLCollection\f[R].
The \f[CR]arguments\f[R] object is also array\-like.
You can call array methods on them even if they don\[cq]t have these
methods themselves.
.IP
.EX
\f[B]function\f[R] f() {
  console.log(Array.prototype.join.call(\f[B]arguments\f[R], \[dq]+\[dq]));
}

f(\[dq]a\[dq], \[dq]b\[dq]); \f[I]// \[aq]a+b\[aq]\f[R]
.EE
.SH CONSTRUCTOR
.TP
\f[B]Array()\f[R]
Creates a new \f[CR]Array\f[R] object.
.SH STATIC PROPERTIES
.TP
\f[B]Array[Symbol.species]\f[R]
Returns the \f[CR]Array\f[R] constructor.
.SH STATIC METHODS
.TP
\f[B]Array.from()\f[R]
Creates a new \f[CR]Array\f[R] instance from an iterable or array\-like
object.
.TP
\f[B]Array.fromAsync()\f[R]
Creates a new \f[CR]Array\f[R] instance from an async iterable,
iterable, or array\-like object.
.TP
\f[B]Array.isArray()\f[R]
Returns \f[CR]true\f[R] if the argument is an array, or \f[CR]false\f[R]
otherwise.
.TP
\f[B]Array.of()\f[R]
Creates a new \f[CR]Array\f[R] instance with a variable number of
arguments, regardless of number or type of the arguments.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Array.prototype\f[R] and shared by
all \f[CR]Array\f[R] instances.
.TP
\f[B]Array.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Array\f[R] instances, the initial value is the
\f[CR]Array\f[R] constructor.
.TP
\f[B]Array.prototype[Symbol.unscopables]\f[R]
Contains property names that were not included in the ECMAScript
standard prior to the ES2015 version and that are ignored for
\f[CR]with\f[R] statement\-binding purposes.
.PP
These properties are own properties of each \f[CR]Array\f[R] instance.
.TP
\f[B]length\f[R]
Reflects the number of elements in an array.
.SH INSTANCE METHODS
.TP
\f[B]Array.prototype.at()\f[R]
Returns the array item at the given index.
Accepts negative integers, which count back from the last item.
.TP
\f[B]Array.prototype.concat()\f[R]
Returns a new array that is the calling array joined with other array(s)
and/or value(s).
.TP
\f[B]Array.prototype.copyWithin()\f[R]
Copies a sequence of array elements within an array.
.TP
\f[B]Array.prototype.entries()\f[R]
Returns a new \f[I]array iterator\f[R] object that contains the
key/value pairs for each index in an array.
.TP
\f[B]Array.prototype.every()\f[R]
Returns \f[CR]true\f[R] if every element in the calling array satisfies
the testing function.
.TP
\f[B]Array.prototype.fill()\f[R]
Fills all the elements of an array from a start index to an end index
with a static value.
.TP
\f[B]Array.prototype.filter()\f[R]
Returns a new array containing all elements of the calling array for
which the provided filtering function returns \f[CR]true\f[R].
.TP
\f[B]Array.prototype.find()\f[R]
Returns the value of the first element in the array that satisfies the
provided testing function, or \f[CR]undefined\f[R] if no appropriate
element is found.
.TP
\f[B]Array.prototype.findIndex()\f[R]
Returns the index of the first element in the array that satisfies the
provided testing function, or \f[CR]\-1\f[R] if no appropriate element
was found.
.TP
\f[B]Array.prototype.findLast()\f[R]
Returns the value of the last element in the array that satisfies the
provided testing function, or \f[CR]undefined\f[R] if no appropriate
element is found.
.TP
\f[B]Array.prototype.findLastIndex()\f[R]
Returns the index of the last element in the array that satisfies the
provided testing function, or \f[CR]\-1\f[R] if no appropriate element
was found.
.TP
\f[B]Array.prototype.flat()\f[R]
Returns a new array with all sub\-array elements concatenated into it
recursively up to the specified depth.
.TP
\f[B]Array.prototype.flatMap()\f[R]
Returns a new array formed by applying a given callback function to each
element of the calling array, and then flattening the result by one
level.
.TP
\f[B]Array.prototype.forEach()\f[R]
Calls a function for each element in the calling array.
.TP
\f[B]Array.prototype.includes()\f[R]
Determines whether the calling array contains a value, returning
\f[CR]true\f[R] or \f[CR]false\f[R] as appropriate.
.TP
\f[B]Array.prototype.indexOf()\f[R]
Returns the first (least) index at which a given element can be found in
the calling array.
.TP
\f[B]Array.prototype.join()\f[R]
Joins all elements of an array into a string.
.TP
\f[B]Array.prototype.keys()\f[R]
Returns a new \f[I]array iterator\f[R] that contains the keys for each
index in the calling array.
.TP
\f[B]Array.prototype.lastIndexOf()\f[R]
Returns the last (greatest) index at which a given element can be found
in the calling array, or \f[CR]\-1\f[R] if none is found.
.TP
\f[B]Array.prototype.map()\f[R]
Returns a new array containing the results of invoking a function on
every element in the calling array.
.TP
\f[B]Array.prototype.pop()\f[R]
Removes the last element from an array and returns that element.
.TP
\f[B]Array.prototype.push()\f[R]
Adds one or more elements to the end of an array, and returns the new
\f[CR]length\f[R] of the array.
.TP
\f[B]Array.prototype.reduce()\f[R]
Executes a user\-supplied \[lq]reducer\[rq] callback function on each
element of the array (from left to right), to reduce it to a single
value.
.TP
\f[B]Array.prototype.reduceRight()\f[R]
Executes a user\-supplied \[lq]reducer\[rq] callback function on each
element of the array (from right to left), to reduce it to a single
value.
.TP
\f[B]Array.prototype.reverse()\f[R]
Reverses the order of the elements of an array \f[I]in place\f[R].
(First becomes the last, last becomes first.)
.TP
\f[B]Array.prototype.shift()\f[R]
Removes the first element from an array and returns that element.
.TP
\f[B]Array.prototype.slice()\f[R]
Extracts a section of the calling array and returns a new array.
.TP
\f[B]Array.prototype.some()\f[R]
Returns \f[CR]true\f[R] if at least one element in the calling array
satisfies the provided testing function.
.TP
\f[B]Array.prototype.sort()\f[R]
Sorts the elements of an array in place and returns the array.
.TP
\f[B]Array.prototype.splice()\f[R]
Adds and/or removes elements from an array.
.TP
\f[B]Array.prototype.toLocaleString()\f[R]
Returns a localized string representing the calling array and its
elements.
Overrides the \f[CR]Object.prototype.toLocaleString()\f[R] method.
.TP
\f[B]Array.prototype.toReversed()\f[R]
Returns a new array with the elements in reversed order, without
modifying the original array.
.TP
\f[B]Array.prototype.toSorted()\f[R]
Returns a new array with the elements sorted in ascending order, without
modifying the original array.
.TP
\f[B]Array.prototype.toSpliced()\f[R]
Returns a new array with some elements removed and/or replaced at a
given index, without modifying the original array.
.TP
\f[B]Array.prototype.toString()\f[R]
Returns a string representing the calling array and its elements.
Overrides the \f[CR]Object.prototype.toString()\f[R] method.
.TP
\f[B]Array.prototype.unshift()\f[R]
Adds one or more elements to the front of an array, and returns the new
\f[CR]length\f[R] of the array.
.TP
\f[B]Array.prototype.values()\f[R]
Returns a new \f[I]array iterator\f[R] object that contains the values
for each index in the array.
.TP
\f[B]Array.prototype.with()\f[R]
Returns a new array with the element at the given index replaced with
the given value, without modifying the original array.
.TP
\f[B]Array.prototype[Symbol.iterator]()\f[R]
An alias for the \f[CR]values()\f[R] method by default.
.SH EXAMPLES
This section provides some examples of common array operations in
JavaScript.
.RS
.PP
\f[B]Note:\f[R] If you\[cq]re not yet familiar with array basics,
consider first reading JavaScript First Steps: Arrays, which explains
what arrays are, and includes other examples of common array operations.
.RE
.SS Create an array
This example shows three ways to create new array: first using array
literal notation, then using the \f[CR]Array()\f[R] constructor, and
finally using \f[CR]String.prototype.split()\f[R] to build the array
from a string.
.IP
.EX
\f[I]// \[aq]fruits\[aq] array created using array literal notation.\f[R]
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
console.log(fruits.length);
\f[I]// 2\f[R]

\f[I]// \[aq]fruits2\[aq] array created using the Array() constructor.\f[R]
\f[B]const\f[R] fruits2 = \f[B]new\f[R] Array(\[dq]Apple\[dq], \[dq]Banana\[dq]);
console.log(fruits2.length);
\f[I]// 2\f[R]

\f[I]// \[aq]fruits3\[aq] array created using String.prototype.split().\f[R]
\f[B]const\f[R] fruits3 = \[dq]Apple, Banana\[dq].split(\[dq], \[dq]);
console.log(fruits3.length);
\f[I]// 2\f[R]
.EE
.SS Create a string from an array
This example uses the \f[CR]join()\f[R] method to create a string from
the \f[CR]fruits\f[R] array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
\f[B]const\f[R] fruitsString = fruits.join(\[dq], \[dq]);
console.log(fruitsString);
\f[I]// \[dq]Apple, Banana\[dq]\f[R]
.EE
.SS Access an array item by its index
This example shows how to access items in the \f[CR]fruits\f[R] array by
specifying the index number of their position in the array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];

\f[I]// The index of an array\[aq]s first element is always 0.\f[R]
fruits[0]; \f[I]// Apple\f[R]

\f[I]// The index of an array\[aq]s second element is always 1.\f[R]
fruits[1]; \f[I]// Banana\f[R]

\f[I]// The index of an array\[aq]s last element is always one\f[R]
\f[I]// less than the length of the array.\f[R]
fruits[fruits.length \- 1]; \f[I]// Banana\f[R]

\f[I]// Using an index number larger than the array\[aq]s length\f[R]
\f[I]// returns \[aq]undefined\[aq].\f[R]
fruits[99]; \f[I]// undefined\f[R]
.EE
.SS Find the index of an item in an array
This example uses the \f[CR]indexOf()\f[R] method to find the position
(index) of the string \f[CR]\[dq]Banana\[dq]\f[R] in the
\f[CR]fruits\f[R] array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
console.log(fruits.indexOf(\[dq]Banana\[dq]));
\f[I]// 1\f[R]
.EE
.SS Check if an array contains a certain item
This example shows two ways to check if the \f[CR]fruits\f[R] array
contains \f[CR]\[dq]Banana\[dq]\f[R] and \f[CR]\[dq]Cherry\[dq]\f[R]:
first with the \f[CR]includes()\f[R] method, and then with the
\f[CR]indexOf()\f[R] method to test for an index value that\[cq]s not
\f[CR]\-1\f[R].
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];

fruits.includes(\[dq]Banana\[dq]); \f[I]// true\f[R]
fruits.includes(\[dq]Cherry\[dq]); \f[I]// false\f[R]

\f[I]// If indexOf() doesn\[aq]t return \-1, the array contains the given item.\f[R]
fruits.indexOf(\[dq]Banana\[dq]) !== \-1; \f[I]// true\f[R]
fruits.indexOf(\[dq]Cherry\[dq]) !== \-1; \f[I]// false\f[R]
.EE
.SS Append an item to an array
This example uses the \f[CR]push()\f[R] method to append a new string to
the \f[CR]fruits\f[R] array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
\f[B]const\f[R] newLength = fruits.push(\[dq]Orange\[dq]);
console.log(fruits);
\f[I]// [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Orange\[dq]]\f[R]
console.log(newLength);
\f[I]// 3\f[R]
.EE
.SS Remove the last item from an array
This example uses the \f[CR]pop()\f[R] method to remove the last item
from the \f[CR]fruits\f[R] array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Orange\[dq]];
\f[B]const\f[R] removedItem = fruits.pop();
console.log(fruits);
\f[I]// [\[dq]Apple\[dq], \[dq]Banana\[dq]]\f[R]
console.log(removedItem);
\f[I]// Orange\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]pop()\f[R] can only be used to remove the last
item from an array.
To remove multiple items from the end of an array, see the next example.
.RE
.SS Remove multiple items from the end of an array
This example uses the \f[CR]splice()\f[R] method to remove the last 3
items from the \f[CR]fruits\f[R] array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]];
\f[B]const\f[R] start = \-3;
\f[B]const\f[R] removedItems = fruits.splice(start);
console.log(fruits);
\f[I]// [\[dq]Apple\[dq], \[dq]Banana\[dq]]\f[R]
console.log(removedItems);
\f[I]// [\[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]]\f[R]
.EE
.SS Truncate an array down to just its first N items
This example uses the \f[CR]splice()\f[R] method to truncate the
\f[CR]fruits\f[R] array down to just its first 2 items.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]];
\f[B]const\f[R] start = 2;
\f[B]const\f[R] removedItems = fruits.splice(start);
console.log(fruits);
\f[I]// [\[dq]Apple\[dq], \[dq]Banana\[dq]]\f[R]
console.log(removedItems);
\f[I]// [\[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]]\f[R]
.EE
.SS Remove the first item from an array
This example uses the \f[CR]shift()\f[R] method to remove the first item
from the \f[CR]fruits\f[R] array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq]];
\f[B]const\f[R] removedItem = fruits.shift();
console.log(fruits);
\f[I]// [\[dq]Banana\[dq]]\f[R]
console.log(removedItem);
\f[I]// Apple\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]shift()\f[R] can only be used to remove the first
item from an array.
To remove multiple items from the beginning of an array, see the next
example.
.RE
.SS Remove multiple items from the beginning of an array
This example uses the \f[CR]splice()\f[R] method to remove the first 3
items from the \f[CR]fruits\f[R] array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Strawberry\[dq], \[dq]Cherry\[dq], \[dq]Banana\[dq], \[dq]Mango\[dq]];
\f[B]const\f[R] start = 0;
\f[B]const\f[R] deleteCount = 3;
\f[B]const\f[R] removedItems = fruits.splice(start, deleteCount);
console.log(fruits);
\f[I]// [\[dq]Banana\[dq], \[dq]Mango\[dq]]\f[R]
console.log(removedItems);
\f[I]// [\[dq]Apple\[dq], \[dq]Strawberry\[dq], \[dq]Cherry\[dq]]\f[R]
.EE
.SS Add a new first item to an array
This example uses the \f[CR]unshift()\f[R] method to add, at index
\f[CR]0\f[R], a new item to the \f[CR]fruits\f[R] array \[em] making it
the new first item in the array.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Banana\[dq], \[dq]Mango\[dq]];
\f[B]const\f[R] newLength = fruits.unshift(\[dq]Strawberry\[dq]);
console.log(fruits);
\f[I]// [\[dq]Strawberry\[dq], \[dq]Banana\[dq], \[dq]Mango\[dq]]\f[R]
console.log(newLength);
\f[I]// 3\f[R]
.EE
.SS Remove a single item by index
This example uses the \f[CR]splice()\f[R] method to remove the string
\f[CR]\[dq]Banana\[dq]\f[R] from the \f[CR]fruits\f[R] array \[em] by
specifying the index position of \f[CR]\[dq]Banana\[dq]\f[R].
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Strawberry\[dq], \[dq]Banana\[dq], \[dq]Mango\[dq]];
\f[B]const\f[R] start = fruits.indexOf(\[dq]Banana\[dq]);
\f[B]const\f[R] deleteCount = 1;
\f[B]const\f[R] removedItems = fruits.splice(start, deleteCount);
console.log(fruits);
\f[I]// [\[dq]Strawberry\[dq], \[dq]Mango\[dq]]\f[R]
console.log(removedItems);
\f[I]// [\[dq]Banana\[dq]]\f[R]
.EE
.SS Remove multiple items by index
This example uses the \f[CR]splice()\f[R] method to remove the strings
\f[CR]\[dq]Banana\[dq]\f[R] and \f[CR]\[dq]Strawberry\[dq]\f[R] from the
\f[CR]fruits\f[R] array \[em] by specifying the index position of
\f[CR]\[dq]Banana\[dq]\f[R], along with a count of the number of total
items to remove.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq], \[dq]Mango\[dq]];
\f[B]const\f[R] start = 1;
\f[B]const\f[R] deleteCount = 2;
\f[B]const\f[R] removedItems = fruits.splice(start, deleteCount);
console.log(fruits);
\f[I]// [\[dq]Apple\[dq], \[dq]Mango\[dq]]\f[R]
console.log(removedItems);
\f[I]// [\[dq]Banana\[dq], \[dq]Strawberry\[dq]]\f[R]
.EE
.SS Replace multiple items in an array
This example uses the \f[CR]splice()\f[R] method to replace the last 2
items in the \f[CR]fruits\f[R] array with new items.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq]];
\f[B]const\f[R] start = \-2;
\f[B]const\f[R] deleteCount = 2;
\f[B]const\f[R] removedItems = fruits.splice(start, deleteCount, \[dq]Mango\[dq], \[dq]Cherry\[dq]);
console.log(fruits);
\f[I]// [\[dq]Apple\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]]\f[R]
console.log(removedItems);
\f[I]// [\[dq]Banana\[dq], \[dq]Strawberry\[dq]]\f[R]
.EE
.SS Iterate over an array
This example uses a \f[CR]for...of\f[R] loop to iterate over the
\f[CR]fruits\f[R] array, logging each item to the console.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]];
\f[B]for\f[R] (\f[B]const\f[R] fruit \f[B]of\f[R] fruits) {
  console.log(fruit);
}
\f[I]// Apple\f[R]
\f[I]// Mango\f[R]
\f[I]// Cherry\f[R]
.EE
.PP
But \f[CR]for...of\f[R] is just one of many ways to iterate over any
array; for more ways, see Loops and iteration, and see the documentation
for the \f[CR]every()\f[R], \f[CR]filter()\f[R], \f[CR]flatMap()\f[R],
\f[CR]map()\f[R], \f[CR]reduce()\f[R], and \f[CR]reduceRight()\f[R]
methods \[em] and see the next example, which uses the
\f[CR]forEach()\f[R] method.
.SS Call a function on each element in an array
This example uses the \f[CR]forEach()\f[R] method to call a function on
each element in the \f[CR]fruits\f[R] array; the function causes each
item to be logged to the console, along with the item\[cq]s index
number.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]];
fruits.forEach((item, index, array) \f[B]=>\f[R] {
  console.log(item, index);
});
\f[I]// Apple 0\f[R]
\f[I]// Mango 1\f[R]
\f[I]// Cherry 2\f[R]
.EE
.SS Merge multiple arrays together
This example uses the \f[CR]concat()\f[R] method to merge the
\f[CR]fruits\f[R] array with a \f[CR]moreFruits\f[R] array, to produce a
new \f[CR]combinedFruits\f[R] array.
Notice that \f[CR]fruits\f[R] and \f[CR]moreFruits\f[R] remain
unchanged.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq]];
\f[B]const\f[R] moreFruits = [\[dq]Mango\[dq], \[dq]Cherry\[dq]];
\f[B]const\f[R] combinedFruits = fruits.concat(moreFruits);
console.log(combinedFruits);
\f[I]// [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq], \[dq]Mango\[dq], \[dq]Cherry\[dq]]\f[R]

\f[I]// The \[aq]fruits\[aq] array remains unchanged.\f[R]
console.log(fruits);
\f[I]// [\[dq]Apple\[dq], \[dq]Banana\[dq], \[dq]Strawberry\[dq]]\f[R]

\f[I]// The \[aq]moreFruits\[aq] array also remains unchanged.\f[R]
console.log(moreFruits);
\f[I]// [\[dq]Mango\[dq], \[dq]Cherry\[dq]]\f[R]
.EE
.SS Copy an array
This example shows three ways to create a new array from the existing
\f[CR]fruits\f[R] array: first by using spread syntax, then by using the
\f[CR]from()\f[R] method, and then by using the \f[CR]slice()\f[R]
method.
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Strawberry\[dq], \[dq]Mango\[dq]];

\f[I]// Create a copy using spread syntax.\f[R]
\f[B]const\f[R] fruitsCopy = [...fruits];
\f[I]// [\[dq]Strawberry\[dq], \[dq]Mango\[dq]]\f[R]

\f[I]// Create a copy using the from() method.\f[R]
\f[B]const\f[R] fruitsCopy2 = Array.from(fruits);
\f[I]// [\[dq]Strawberry\[dq], \[dq]Mango\[dq]]\f[R]

\f[I]// Create a copy using the slice() method.\f[R]
\f[B]const\f[R] fruitsCopy3 = fruits.slice();
\f[I]// [\[dq]Strawberry\[dq], \[dq]Mango\[dq]]\f[R]
.EE
.PP
All built\-in array\-copy operations (spread syntax,
\f[CR]Array.from()\f[R], \f[CR]Array.prototype.slice()\f[R], and
\f[CR]Array.prototype.concat()\f[R]) create shallow copies.
If you instead want a deep copy of an array, you can use
\f[CR]JSON.stringify()\f[R] to convert the array to a JSON string, and
then \f[CR]JSON.parse()\f[R] to convert the string back into a new array
that\[cq]s completely independent from the original array.
.IP
.EX
\f[B]const\f[R] fruitsDeepCopy = JSON.parse(JSON.stringify(fruits));
.EE
.PP
You can also create deep copies using the \f[CR]structuredClone()\f[R]
method, which has the advantage of allowing transferable objects in the
source to be \f[I]transferred\f[R] to the new copy, rather than just
cloned.
.PP
Finally, it\[cq]s important to understand that assigning an existing
array to a new variable doesn\[cq]t create a copy of either the array or
its elements.
Instead the new variable is just a reference, or alias, to the original
array; that is, the original array\[cq]s name and the new variable name
are just two names for the exact same object (and so will always
evaluate as strictly equivalent).
Therefore, if you make any changes at all either to the value of the
original array or to the value of the new variable, the other will
change, too:
.IP
.EX
\f[B]const\f[R] fruits = [\[dq]Strawberry\[dq], \[dq]Mango\[dq]];
\f[B]const\f[R] fruitsAlias = fruits;
\f[I]// \[aq]fruits\[aq] and \[aq]fruitsAlias\[aq] are the same object, strictly equivalent.\f[R]
fruits === fruitsAlias; \f[I]// true\f[R]
\f[I]// Any changes to the \[aq]fruits\[aq] array change \[aq]fruitsAlias\[aq] too.\f[R]
fruits.unshift(\[dq]Apple\[dq], \[dq]Banana\[dq]);
console.log(fruits);
\f[I]// [\[aq]Apple\[aq], \[aq]Banana\[aq], \[aq]Strawberry\[aq], \[aq]Mango\[aq]]\f[R]
console.log(fruitsAlias);
\f[I]// [\[aq]Apple\[aq], \[aq]Banana\[aq], \[aq]Strawberry\[aq], \[aq]Mango\[aq]]\f[R]
.EE
.SS Creating a two\-dimensional array
The following creates a chessboard as a two\-dimensional array of
strings.
The first move is made by copying the \f[CR]\[aq]p\[aq]\f[R] in
\f[CR]board[6][4]\f[R] to \f[CR]board[4][4]\f[R].
The old position at \f[CR][6][4]\f[R] is made blank.
.IP
.EX
\f[B]const\f[R] board = [
  [\[dq]R\[dq], \[dq]N\[dq], \[dq]B\[dq], \[dq]Q\[dq], \[dq]K\[dq], \[dq]B\[dq], \[dq]N\[dq], \[dq]R\[dq]],
  [\[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq], \[dq]P\[dq]],
  [\[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq]],
  [\[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq]],
  [\[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq]],
  [\[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq], \[dq] \[dq]],
  [\[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq], \[dq]p\[dq]],
  [\[dq]r\[dq], \[dq]n\[dq], \[dq]b\[dq], \[dq]q\[dq], \[dq]k\[dq], \[dq]b\[dq], \[dq]n\[dq], \[dq]r\[dq]],
];

console.log(\[ga]${board.join(\[dq]\[rs]n\[dq])}\[rs]n\[rs]n\[ga]);

\f[I]// Move King\[aq]s Pawn forward 2\f[R]
board[4][4] = board[6][4];
board[6][4] = \[dq] \[dq];
console.log(board.join(\[dq]\[rs]n\[dq]));
.EE
.PP
Here is the output:
.IP
.EX
R,N,B,Q,K,B,N,R
P,P,P,P,P,P,P,P
 , , , , , , ,
 , , , , , , ,
 , , , , , , ,
 , , , , , , ,
p,p,p,p,p,p,p,p
r,n,b,q,k,b,n,r

R,N,B,Q,K,B,N,R
P,P,P,P,P,P,P,P
 , , , , , , ,
 , , , , , , ,
 , , , ,p, , ,
 , , , , , , ,
p,p,p,p, ,p,p,p
r,n,b,q,k,b,n,r
.EE
.SS Using an array to tabulate a set of values
.IP
.EX
\f[B]const\f[R] values = [];
\f[B]for\f[R] (\f[B]let\f[R] x = 0; x < 10; x++) {
  values.push([2 ** x, 2 * x ** 2]);
}
console.table(values);
.EE
.PP
Results in
.IP
.EX
// The first column is the index
0  1    0
1  2    2
2  4    8
3  8    18
4  16   32
5  32   50
6  64   72
7  128  98
8  256  128
9  512  162
.EE
.SS Creating an array using the result of a match
The result of a match between a \f[CR]RegExp\f[R] and a string can
create a JavaScript array that has properties and elements which provide
information about the match.
Such an array is returned by \f[CR]RegExp.prototype.exec()\f[R] and
\f[CR]String.prototype.match()\f[R].
.PP
For example:
.IP
.EX
\f[I]// Match one d followed by one or more b\[aq]s followed by one d\f[R]
\f[I]// Remember matched b\[aq]s and the following d\f[R]
\f[I]// Ignore case\f[R]

\f[B]const\f[R] myRe = /d(b+)(d)/i;
\f[B]const\f[R] execResult = myRe.exec(\[dq]cdbBdbsbz\[dq]);

console.log(execResult.input); \f[I]// \[aq]cdbBdbsbz\[aq]\f[R]
console.log(execResult.index); \f[I]// 1\f[R]
console.log(execResult); \f[I]// [ \[dq]dbBd\[dq], \[dq]bB\[dq], \[dq]d\[dq] ]\f[R]
.EE
.PP
For more information about the result of a match, see the
\f[CR]RegExp.prototype.exec()\f[R] and
\f[CR]String.prototype.match()\f[R] pages.
.SS Mutating initial array in iterative methods
Iterative methods do not mutate the array on which it is called, but the
function provided as \f[CR]callbackFn\f[R] can.
The key principle to remember is that only indexes between 0 and
\f[CR]arrayLength \- 1\f[R] are visited, where \f[CR]arrayLength\f[R] is
the length of the array at the time the array method was first called,
but the element passed to the callback is the value at the time the
index is visited.
Therefore:
.IP \[bu] 2
\f[CR]callbackFn\f[R] will not visit any elements added beyond the
array\[cq]s initial length when the call to the iterative method began.
.IP \[bu] 2
Changes to already\-visited indexes do not cause \f[CR]callbackFn\f[R]
to be invoked on them again.
.IP \[bu] 2
If an existing, yet\-unvisited element of the array is changed by
\f[CR]callbackFn\f[R], its value passed to the \f[CR]callbackFn\f[R]
will be the value at the time that element gets visited.
Removed elements are not visited.
.RS
.PP
\f[B]Warning:\f[R] Concurrent modifications of the kind described above
frequently lead to hard\-to\-understand code and are generally to be
avoided (except in special cases).
.RE
.PP
The following examples use the \f[CR]forEach\f[R] method as an example,
but other methods that visit indexes in ascending order work in the same
way.
We will first define a helper function:
.IP
.EX
\f[B]function\f[R] testSideEffect(effect) {
  \f[B]const\f[R] arr = [\[dq]e1\[dq], \[dq]e2\[dq], \[dq]e3\[dq], \[dq]e4\[dq]];
  arr.forEach((elem, index, arr) \f[B]=>\f[R] {
    console.log(\[ga]array: [${arr.join(\[dq], \[dq])}], index: ${index}, elem: ${elem}\[ga]);
    effect(arr, index);
  });
  console.log(\[ga]Final array: [${arr.join(\[dq], \[dq])}]\[ga]);
}
.EE
.PP
Modification to indexes not visited yet will be visible once the index
is reached:
.IP
.EX
testSideEffect((arr, index) \f[B]=>\f[R] {
  \f[B]if\f[R] (index + 1 < arr.length) arr[index + 1] += \[dq]*\[dq];
});
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// array: [e1, e2*, e3, e4], index: 1, elem: e2*\f[R]
\f[I]// array: [e1, e2*, e3*, e4], index: 2, elem: e3*\f[R]
\f[I]// array: [e1, e2*, e3*, e4*], index: 3, elem: e4*\f[R]
\f[I]// Final array: [e1, e2*, e3*, e4*]\f[R]
.EE
.PP
Modification to already visited indexes does not change iteration
behavior, although the array will be different afterwards:
.IP
.EX
testSideEffect((arr, index) \f[B]=>\f[R] {
  \f[B]if\f[R] (index > 0) arr[index \- 1] += \[dq]*\[dq];
});
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// array: [e1, e2, e3, e4], index: 1, elem: e2\f[R]
\f[I]// array: [e1*, e2, e3, e4], index: 2, elem: e3\f[R]
\f[I]// array: [e1*, e2*, e3, e4], index: 3, elem: e4\f[R]
\f[I]// Final array: [e1*, e2*, e3*, e4]\f[R]
.EE
.PP
Inserting \f[I]n\f[R] elements at unvisited indexes that are less than
the initial array length will make them be visited.
The last \f[I]n\f[R] elements in the original array that now have index
greater than the initial array length will not be visited:
.IP
.EX
testSideEffect((arr, index) \f[B]=>\f[R] {
  \f[B]if\f[R] (index === 1) arr.splice(2, 0, \[dq]new\[dq]);
});
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// array: [e1, e2, e3, e4], index: 1, elem: e2\f[R]
\f[I]// array: [e1, e2, new, e3, e4], index: 2, elem: new\f[R]
\f[I]// array: [e1, e2, new, e3, e4], index: 3, elem: e3\f[R]
\f[I]// Final array: [e1, e2, new, e3, e4]\f[R]
\f[I]// e4 is not visited because it now has index 4\f[R]
.EE
.PP
Inserting \f[I]n\f[R] elements with index greater than the initial array
length will not make them be visited:
.IP
.EX
testSideEffect((arr) \f[B]=>\f[R] arr.push(\[dq]new\[dq]));
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// array: [e1, e2, e3, e4, new], index: 1, elem: e2\f[R]
\f[I]// array: [e1, e2, e3, e4, new, new], index: 2, elem: e3\f[R]
\f[I]// array: [e1, e2, e3, e4, new, new, new], index: 3, elem: e4\f[R]
\f[I]// Final array: [e1, e2, e3, e4, new, new, new, new]\f[R]
.EE
.PP
Inserting \f[I]n\f[R] elements at already visited indexes will not make
them be visited, but it shifts remaining elements back by \f[I]n\f[R],
so the current index and the \f[I]n \- 1\f[R] elements before it are
visited again:
.IP
.EX
testSideEffect((arr, index) \f[B]=>\f[R] arr.splice(index, 0, \[dq]new\[dq]));
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// array: [new, e1, e2, e3, e4], index: 1, elem: e1\f[R]
\f[I]// array: [new, new, e1, e2, e3, e4], index: 2, elem: e1\f[R]
\f[I]// array: [new, new, new, e1, e2, e3, e4], index: 3, elem: e1\f[R]
\f[I]// Final array: [new, new, new, new, e1, e2, e3, e4]\f[R]
\f[I]// e1 keeps getting visited because it keeps getting shifted back\f[R]
.EE
.PP
Deleting \f[I]n\f[R] elements at unvisited indexes will make them not be
visited anymore.
Because the array has shrunk, the last \f[I]n\f[R] iterations will visit
out\-of\-bounds indexes.
If the method ignores non\-existent indexes (see array methods and empty
slots), the last \f[I]n\f[R] iterations will be skipped; otherwise, they
will receive \f[CR]undefined\f[R]:
.IP
.EX
testSideEffect((arr, index) \f[B]=>\f[R] {
  \f[B]if\f[R] (index === 1) arr.splice(2, 1);
});
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// array: [e1, e2, e3, e4], index: 1, elem: e2\f[R]
\f[I]// array: [e1, e2, e4], index: 2, elem: e4\f[R]
\f[I]// Final array: [e1, e2, e4]\f[R]
\f[I]// Does not visit index 3 because it\[aq]s out\-of\-bounds\f[R]

\f[I]// Compare this with find(), which treats nonexistent indexes as undefined:\f[R]
\f[B]const\f[R] arr2 = [\[dq]e1\[dq], \[dq]e2\[dq], \[dq]e3\[dq], \[dq]e4\[dq]];
arr2.find((elem, index, arr) \f[B]=>\f[R] {
  console.log(\[ga]array: [${arr.join(\[dq], \[dq])}], index: ${index}, elem: ${elem}\[ga]);
  \f[B]if\f[R] (index === 1) arr.splice(2, 1);
  \f[B]return\f[R] \f[B]false\f[R];
});
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// array: [e1, e2, e3, e4], index: 1, elem: e2\f[R]
\f[I]// array: [e1, e2, e4], index: 2, elem: e4\f[R]
\f[I]// array: [e1, e2, e4], index: 3, elem: undefined\f[R]
.EE
.PP
Deleting \f[I]n\f[R] elements at already visited indexes does not change
the fact that they were visited before they get deleted.
Because the array has shrunk, the next \f[I]n\f[R] elements after the
current index are skipped.
If the method ignores non\-existent indexes, the last \f[I]n\f[R]
iterations will be skipped; otherwise, they will receive
\f[CR]undefined\f[R]:
.IP
.EX
testSideEffect((arr, index) \f[B]=>\f[R] arr.splice(index, 1));
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// Does not visit e2 because e2 now has index 0, which has already been visited\f[R]
\f[I]// array: [e2, e3, e4], index: 1, elem: e3\f[R]
\f[I]// Does not visit e4 because e4 now has index 1, which has already been visited\f[R]
\f[I]// Final array: [e2, e4]\f[R]
\f[I]// Index 2 is out\-of\-bounds, so it\[aq]s not visited\f[R]

\f[I]// Compare this with find(), which treats nonexistent indexes as undefined:\f[R]
\f[B]const\f[R] arr2 = [\[dq]e1\[dq], \[dq]e2\[dq], \[dq]e3\[dq], \[dq]e4\[dq]];
arr2.find((elem, index, arr) \f[B]=>\f[R] {
  console.log(\[ga]array: [${arr.join(\[dq], \[dq])}], index: ${index}, elem: ${elem}\[ga]);
  arr.splice(index, 1);
  \f[B]return\f[R] \f[B]false\f[R];
});
\f[I]// array: [e1, e2, e3, e4], index: 0, elem: e1\f[R]
\f[I]// array: [e2, e3, e4], index: 1, elem: e3\f[R]
\f[I]// array: [e2, e4], index: 2, elem: undefined\f[R]
\f[I]// array: [e2, e4], index: 3, elem: undefined\f[R]
.EE
.PP
For methods that iterate in descending order of index, insertion causes
elements to be skipped, and deletion causes elements to be visited
multiple times.
Adjust the code above yourself to see the effects.
.SH SEE ALSO
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
