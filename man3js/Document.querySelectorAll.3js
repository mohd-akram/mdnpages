.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Document.querySelectorAll" "JS" "August 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.querySelectorAll \- Document: querySelectorAll() method
.SH SYNOPSIS
The \f[CR]Document\f[R] method \f[B]\f[CB]querySelectorAll()\f[B]\f[R]
returns a static (not live) \f[CR]NodeList\f[R] representing a list of
the document\[cq]s elements that match the specified group of selectors.
.SH SYNTAX
.IP
.EX
querySelectorAll(selectors)
.EE
.SS Parameters
.TP
\f[B]selectors\f[R]
A string containing one or more selectors to match.
This string must be a valid CSS selector string; if it isn\[cq]t, a
\f[CR]SyntaxError\f[R] exception is thrown.
.RS
.PP
Note that the HTML specification does not require attribute values to be
valid CSS identifiers.
If a \f[CR]class\f[R] or \f[CR]id\f[R] attribute value is not a valid
CSS identifier, then you must escape it before using it in a selector,
either by calling \f[CR]CSS.escape()\f[R] on the value, or using one of
the techniques described in Escaping characters.
See Escaping attribute values for an example.
.RE
.SS Return value
A non\-live \f[CR]NodeList\f[R] containing one \f[CR]Element\f[R] object
for each element that matches at least one of the specified selectors or
an empty \f[CR]NodeList\f[R] in case of no matches.
.RS
.PP
\f[B]Note:\f[R] If the specified \f[CR]selectors\f[R] include a CSS
pseudo\-element, the returned list is always empty.
.RE
.SS Exceptions
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if the syntax of the specified \f[CR]selectors\f[R] string is not
valid.
.SH EXAMPLES
.SS Obtaining a list of matches
To obtain a \f[CR]NodeList\f[R] of all of the \f[CR]<p>\f[R] elements in
the document:
.IP
.EX
\f[B]const\f[R] matches = document.querySelectorAll(\[dq]p\[dq]);
.EE
.PP
This example returns a list of all \f[CR]<div>\f[R] elements within the
document with a class of either \f[CR]note\f[R] or \f[CR]alert\f[R]:
.IP
.EX
\f[B]const\f[R] matches = document.querySelectorAll(\[dq]div.note, div.alert\[dq]);
.EE
.PP
Here, we get a list of \f[CR]<p>\f[R] elements whose immediate parent
element is a \f[CR]<div>\f[R] with the class \f[CR]highlighted\f[R] and
which are located inside a container whose ID is \f[CR]test\f[R].
.IP
.EX
\f[B]const\f[R] container = document.querySelector(\[dq]#test\[dq]);
\f[B]const\f[R] matches = container.querySelectorAll(\[dq]div.highlighted > p\[dq]);
.EE
.PP
This example uses an attribute selector to return a list of the
\f[CR]<iframe>\f[R] elements in the document that contain an attribute
named \f[CR]data\-src\f[R]:
.IP
.EX
\f[B]const\f[R] matches = document.querySelectorAll(\[dq]iframe[data\-src]\[dq]);
.EE
.PP
Here, an attribute selector is used to return a list of the list items
contained within a list whose ID is \f[CR]userlist\f[R] which have a
\f[CR]data\-active\f[R] attribute whose value is \f[CR]1\f[R]:
.IP
.EX
\f[B]const\f[R] container = document.querySelector(\[dq]#userlist\[dq]);
\f[B]const\f[R] matches = container.querySelectorAll(\[dq]li[data\-active=\[aq]1\[aq]]\[dq]);
.EE
.SS Accessing the matches
Once the \f[CR]NodeList\f[R] of matching elements is returned, you can
examine it just like any array.
If the array is empty (that is, its \f[CR]length\f[R] property is 0),
then no matches were found.
.PP
Otherwise, you can use standard array notation to access the contents of
the list.
You can use any common looping statement, such as:
.IP
.EX
\f[B]const\f[R] highlightedItems = userList.querySelectorAll(\[dq].highlighted\[dq]);

highlightedItems.forEach((userItem) \f[B]=>\f[R] {
  deleteUser(userItem);
});
.EE
.SS Escaping attribute values
This example shows that if an HTML document contains an \f[CR]id\f[R]
which is not a valid CSS identifier, then we must escape the attribute
value before using it in \f[CR]querySelectorAll()\f[R].
.SS HTML
In the following code, a \f[CR]<div>\f[R] element has an \f[CR]id\f[R]
of \f[CR]\[dq]this?element\[dq]\f[R], which is not a valid CSS
identifier, because the \f[CR]\[dq]?\[dq]\f[R] character is not allowed
in CSS identifiers.
.PP
We also have three buttons, and a \f[CR]<pre>\f[R] element for logging
errors.
.IP
.EX
<\f[B]div\f[R] id=\[dq]this?element\[dq]></\f[B]div\f[R]>

<\f[B]button\f[R] id=\[dq]no\-escape\[dq]>No escape</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]css\-escape\[dq]>CSS.escape()</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]manual\-escape\[dq]>Manual escape</\f[B]button\f[R]>

<\f[B]pre\f[R] id=\[dq]log\[dq]></\f[B]pre\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]background\-color\f[R]: blue;
  \f[B]margin\f[R]: 1rem 0;
  \f[B]height\f[R]: 100px;
  \f[B]width\f[R]: 200px;
}
.EE
.SS JavaScript
All three buttons, when clicked, try to select the \f[CR]<div>\f[R], and
then set its background color to a random value.
.IP \[bu] 2
The first button uses the \f[CR]\[dq]this?element\[dq]\f[R] value
directly.
.IP \[bu] 2
The second button escapes the value using \f[CR]CSS.escape()\f[R].
.IP \[bu] 2
The third button explicitly escapes the \f[CR]\[dq]?\[dq]\f[R] character
using a backslash.
Note that we must also escape the backslash itself, using another
backslash, like: \f[CR]\[dq]\[rs]\[rs]?\[dq]\f[R].
.IP
.EX
\f[B]const\f[R] log = document.querySelector(\[dq]#log\[dq]);

\f[B]function\f[R] random(number) {
  \f[B]return\f[R] Math.floor(Math.random() * number);
}

\f[B]function\f[R] setBackgroundColor(id) {
  log.textContent = \[dq]\[dq];

  \f[B]try\f[R] {
    \f[B]const\f[R] elements = document.querySelectorAll(\[ga]#${id}\[ga]);
    \f[B]const\f[R] randomColor = \[ga]rgb(${random(255)} ${random(255)} ${random(255)})\[ga];
    elements[0].style.backgroundColor = randomColor;
  } \f[B]catch\f[R] (e) {
    log.textContent = e;
  }
}

document.querySelector(\[dq]#no\-escape\[dq]).addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  setBackgroundColor(\[dq]this?element\[dq]);
});

document.querySelector(\[dq]#css\-escape\[dq]).addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  setBackgroundColor(CSS.escape(\[dq]this?element\[dq]));
});

document.querySelector(\[dq]#manual\-escape\[dq]).addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  setBackgroundColor(\[dq]this\[rs]\[rs]?element\[dq]);
});
.EE
.SS Result
Clicking the first button gives an error, while the second and third
buttons work properly.
.SH SEE ALSO
.IP \[bu] 2
Locating DOM elements using selectors
.IP \[bu] 2
Attribute selectors in the CSS Guide
.IP \[bu] 2
Attribute selectors in the MDN Learning Area
.IP \[bu] 2
\f[CR]Element.querySelector()\f[R] and
\f[CR]Element.querySelectorAll()\f[R]
.IP \[bu] 2
\f[CR]Document.querySelector()\f[R]
.IP \[bu] 2
\f[CR]DocumentFragment.querySelector()\f[R] and
\f[CR]DocumentFragment.querySelectorAll()\f[R]
