.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RegExp.escape" "JS" "November 29, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.escape \- RegExp.escape()
.SH SYNOPSIS
The \f[B]\f[CB]RegExp.escape()\f[B]\f[R] static method escapes any
potential regex syntax characters in a string, and returns a new string
that can be safely used as a literal pattern for the \f[CR]RegExp()\f[R]
constructor.
.PP
When dynamically creating a \f[CR]RegExp\f[R] with user\-provided
content, consider using this function to sanitize the input (unless the
input is actually intended to contain regex syntax).
In addition, don\[cq]t try to re\-implement its functionality by, for
example, using \f[CR]String.prototype.replaceAll()\f[R] to insert a
\f[CR]\[rs]\f[R] before all syntax characters.
\f[CR]RegExp.escape()\f[R] is designed to use escape sequences that work
in many more edge cases/contexts than hand\-crafted code is likely to
achieve.
.SH SYNTAX
.IP
.EX
RegExp.escape(string)
.EE
.SS Parameters
.TP
\f[B]string\f[R]
The string to escape.
.SS Return value
A new string that can be safely used as a literal pattern for the
\f[CR]RegExp()\f[R] constructor.
Namely, the following things in the input string are replaced:
.IP \[bu] 2
The first character of the string, if it\[cq]s either a decimal digit
(0\[en]9) or ASCII letter (a\[en]z, A\[en]Z), is escaped using the
\f[CR]\[rs]x\f[R] character escape syntax.
For example, \f[CR]RegExp.escape(\[dq]foo\[dq])\f[R] returns
\f[CR]\[dq]\[rs]\[rs]x66oo\[dq]\f[R] (here and after, the two
backslashes in a string literal denote a single backslash character).
This step ensures that if this escaped string is embedded into a bigger
pattern where it\[cq]s immediately preceded by \f[CR]\[rs]1\f[R],
\f[CR]\[rs]x0\f[R], \f[CR]\[rs]u000\f[R], etc., the leading character
doesn\[cq]t get interpreted as part of the escape sequence.
.IP \[bu] 2
Regex syntax characters, including \f[CR]\[ha]\f[R], \f[CR]$\f[R],
\f[CR]\[rs]\f[R], \f[CR].\f[R], \f[CR]*\f[R], \f[CR]+\f[R],
\f[CR]?\f[R], \f[CR](\f[R], \f[CR])\f[R], \f[CR][\f[R], \f[CR]]\f[R],
\f[CR]{\f[R], \f[CR]}\f[R], and \f[CR]|\f[R], as well as the
\f[CR]/\f[R] delimiter, are escaped by inserting a \f[CR]\[rs]\f[R]
character before them.
For example, \f[CR]RegExp.escape(\[dq]foo.bar\[dq])\f[R] returns
\f[CR]\[dq]\[rs]\[rs]x66oo\[rs]\[rs].bar\[dq]\f[R], and
\f[CR]RegExp.escape(\[dq](foo)\[dq])\f[R] returns
\f[CR]\[dq]\[rs]\[rs](foo\[rs]\[rs])\[dq]\f[R].
.IP \[bu] 2
Other punctuators, including \f[CR],\f[R], \f[CR]\-\f[R], \f[CR]=\f[R],
\f[CR]<\f[R], \f[CR]>\f[R], \f[CR]#\f[R], \f[CR]&\f[R], \f[CR]!\f[R],
\f[CR]%\f[R], \f[CR]:\f[R], \f[CR];\f[R], \f[CR]\[at]\f[R],
\f[CR]\[ti]\f[R], \f[CR]\[aq]\f[R], \f[CR]\[ga]\f[R], and
\f[CR]\[dq]\f[R], are escaped using the \f[CR]\[rs]x\f[R] syntax.
For example, \f[CR]RegExp.escape(\[dq]foo\-bar\[dq])\f[R] returns
\f[CR]\[dq]\[rs]\[rs]x66oo\[rs]\[rs]x2dbar\[dq]\f[R].
These characters cannot be escaped by prefixing with \f[CR]\[rs]\f[R]
because, for example, \f[CR]/foo\[rs]\-bar/u\f[R] is a syntax error.
.IP \[bu] 2
The characters with their own character escape sequences:
\f[CR]\[rs]f\f[R] (U+000C FORM FEED), \f[CR]\[rs]n\f[R] (U+000A LINE
FEED), \f[CR]\[rs]r\f[R] (U+000D CARRIAGE RETURN), \f[CR]\[rs]t\f[R]
(U+0009 CHARACTER TABULATION), and \f[CR]\[rs]v\f[R] (U+000B LINE
TABULATION), are replaced with their escape sequences.
For example, \f[CR]RegExp.escape(\[dq]foo\[rs]nbar\[dq])\f[R] returns
\f[CR]\[dq]\[rs]\[rs]x66oo\[rs]\[rs]nbar\[dq]\f[R].
.IP \[bu] 2
The space character is escaped as \f[CR]\[dq]\[rs]\[rs]x20\[dq]\f[R].
.IP \[bu] 2
Other non\-ASCII line break and white space characters are replaced with
one or two \f[CR]\[rs]uXXXX\f[R] escape sequences representing their
UTF\-16 code units.
For example, \f[CR]RegExp.escape(\[dq]foo\[rs]u2028bar\[dq])\f[R]
returns \f[CR]\[dq]\[rs]\[rs]x66oo\[rs]\[rs]u2028bar\[dq]\f[R].
.IP \[bu] 2
Lone surrogates are replaced with their \f[CR]\[rs]uXXXX\f[R] escape
sequences.
For example, \f[CR]RegExp.escape(\[dq]foo\[rs]uD800bar\[dq])\f[R]
returns \f[CR]\[dq]\[rs]\[rs]x66oo\[rs]\[rs]ud800bar\[dq]\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]string\f[R] is not a string.
.SH EXAMPLES
.SS Using RegExp.escape()
The following examples demonstrate various inputs and outputs for the
\f[CR]RegExp.escape()\f[R] method.
.IP
.EX
RegExp.escape(\[dq]Buy it. use it. break it. fix it.\[dq]);
\f[I]// \[dq]\[rs]\[rs]x42uy\[rs]\[rs]x20it\[rs]\[rs].\[rs]\[rs]x20use\[rs]\[rs]x20it\[rs]\[rs].\[rs]\[rs]x20break\[rs]\[rs]x20it\[rs]\[rs].\[rs]\[rs]x20fix\[rs]\[rs]x20it\[rs]\[rs].\[dq]\f[R]
RegExp.escape(\[dq]foo.bar\[dq]); \f[I]// \[dq]\[rs]\[rs]x66oo\[rs]\[rs].bar\[dq]\f[R]
RegExp.escape(\[dq]foo\-bar\[dq]); \f[I]// \[dq]\[rs]\[rs]x66oo\[rs]\[rs]x2dbar\[dq]\f[R]
RegExp.escape(\[dq]foo\[rs]nbar\[dq]); \f[I]// \[dq]\[rs]\[rs]x66oo\[rs]\[rs]nbar\[dq]\f[R]
RegExp.escape(\[dq]foo\[rs]uD800bar\[dq]); \f[I]// \[dq]\[rs]\[rs]x66oo\[rs]\[rs]ud800bar\[dq]\f[R]
RegExp.escape(\[dq]foo\[rs]u2028bar\[dq]); \f[I]// \[dq]\[rs]\[rs]x66oo\[rs]\[rs]u2028bar\[dq]\f[R]
.EE
.SS Using RegExp.escape() with the RegExp constructor
The primary use case of \f[CR]RegExp.escape()\f[R] is when you want to
embed a string into a bigger regex pattern, and you want to ensure that
the string is treated as a literal pattern, not as a regex syntax.
Consider the following na√Øve example that replaces URLs:
.IP
.EX
\f[B]function\f[R] removeDomain(text, domain) {
  \f[B]return\f[R] text.replace(\f[B]new\f[R] RegExp(\[ga]https?://${domain}(?=/)\[ga], \[dq]g\[dq]), \[dq]\[dq]);
}

\f[B]const\f[R] input =
  \[dq]Consider using [RegExp.escape()](https://developer.mozilla.org/en\-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/escape) to escape special characters in a string.\[dq];
\f[B]const\f[R] domain = \[dq]developer.mozilla.org\[dq];
console.log(removeDomain(input, domain));
\f[I]// Consider using [RegExp.escape()](/en\-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/escape) to escape special characters in a string.\f[R]
.EE
.PP
Inserting the \f[CR]domain\f[R] above results in the regular expression
literal \f[CR]https?://developer.mozilla.org(?=/)\f[R], where the
\[lq].\[rq] character is a regex wildcard character.
This means the string will match the string with any character in place
of the \[lq].\[rq], such as \f[CR]developer\-mozilla\-org\f[R].
Therefore, it would incorrectly also change the following text:
.IP
.EX
\f[B]const\f[R] input =
  \[dq]This is not an MDN link: https://developer\-mozilla.org/, be careful!\[dq];
\f[B]const\f[R] domain = \[dq]developer.mozilla.org\[dq];
console.log(removeDomain(input, domain));
\f[I]// This is not an MDN link: /, be careful!\f[R]
.EE
.PP
To fix this, we can use \f[CR]RegExp.escape()\f[R] to ensure that any
user input is treated as a literal pattern:
.IP
.EX
\f[B]function\f[R] removeDomain(text, domain) {
  \f[B]return\f[R] text.replace(
    \f[B]new\f[R] RegExp(\[ga]https?://${RegExp.escape(domain)}(?=/)\[ga], \[dq]g\[dq]),
    \[dq]\[dq],
  );
}
.EE
.PP
Now this function will do exactly what we intend to, and will not
transform \f[CR]developer\-mozilla.org\f[R] URLs.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#regexp-escaping
Polyfill of \f[CR]RegExp.escape\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]RegExp\f[R]
