.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ServiceWorkerRegistration.pushManager" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerRegistration.pushManager \- ServiceWorkerRegistration:
pushManager property
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).This feature is available in Web Workers.
.PP
The \f[B]\f[CB]pushManager\f[B]\f[R] read\-only property of the
\f[CR]ServiceWorkerRegistration\f[R] interface returns a reference to
the \f[CR]PushManager\f[R] interface for managing push subscriptions;
this includes support for subscribing, getting an active subscription,
and accessing push permission status.
.SH VALUE
A \f[CR]PushManager\f[R] object.
.SH EXAMPLES
.IP
.EX
\f[B]this\f[R].onpush = (event) \f[B]=>\f[R] {
  console.log(event.data);
  \f[I]// From here we can write the data to IndexedDB, send it to any open\f[R]
  \f[I]// windows, display a notification, etc.\f[R]
};

navigator.serviceWorker
  .register(\[dq]serviceworker.js\[dq])
  .then((serviceWorkerRegistration) \f[B]=>\f[R] {
    serviceWorkerRegistration.pushManager.subscribe().then(
      (pushSubscription) \f[B]=>\f[R] {
        console.log(pushSubscription.subscriptionId);
        console.log(pushSubscription.endpoint);
        \f[I]// The push subscription details needed by the application\f[R]
        \f[I]// server are now available, and can be sent to it using,\f[R]
        \f[I]// for example, the fetch() API.\f[R]
      },
      (error) \f[B]=>\f[R] {
        \f[I]// During development it often helps to log errors to the\f[R]
        \f[I]// console. In a production environment it might make sense to\f[R]
        \f[I]// also report information about errors back to the\f[R]
        \f[I]// application server.\f[R]
        console.error(error);
      },
    );
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
Push API
