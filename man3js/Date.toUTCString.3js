'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATE.TOUTCSTRING" "3JS" "April 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.toUTCString \- Date.prototype.toUTCString()
.SH SYNOPSIS
The \f[B]\f[CB]toUTCString()\f[B]\f[R] method of \f[CR]Date\f[R]
instances returns a string representing this date in the \c
.UR https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.1.1
RFC 7231
.UE \c
\ format, with negative years allowed.
The timezone is always UTC.
\f[CR]toGMTString()\f[R] is an alias of this method.
.IP
.EX
\f[B]const\f[R] event = \f[B]new\f[R] Date(\(dq14 Jun 2017 00:00:00 PDT\(dq);

console.log(event.toUTCString());
\f[I]// Expected output: \(dqWed, 14 Jun 2017 07:00:00 GMT\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
toUTCString()
.EE
.SS Parameters
None.
.SS Return value
A string representing the given date using the UTC time zone (see
description for the format).
Returns \f[CR]\(dqInvalid Date\(dq\f[R] if the date is invalid.
.SH DESCRIPTION
The value returned by \f[CR]toUTCString()\f[R] is a string in the form
\f[CR]Www, dd Mmm yyyy HH:mm:ss GMT\f[R], where:
.PP
.TS
tab(@);
lw(12.5n) lw(57.5n).
T{
Format String
T}@T{
Description
T}
_
T{
\f[CR]Www\f[R]
T}@T{
Day of week, as three letters (e.g., \f[CR]Sun\f[R], \f[CR]Mon\f[R])
T}
T{
\f[CR]dd\f[R]
T}@T{
Day of month, as two digits with leading zero if required
T}
T{
\f[CR]Mmm\f[R]
T}@T{
Month, as three letters (e.g., \f[CR]Jan\f[R], \f[CR]Feb\f[R])
T}
T{
\f[CR]yyyy\f[R]
T}@T{
Year, as four or more digits with leading zeroes if required
T}
T{
\f[CR]HH\f[R]
T}@T{
Hour, as two digits with leading zero if required
T}
T{
\f[CR]mm\f[R]
T}@T{
Minute, as two digits with leading zero if required
T}
T{
\f[CR]ss\f[R]
T}@T{
Seconds, as two digits with leading zero if required
T}
.TE
.SS Aliasing
JavaScript\(cqs \f[CR]Date\f[R] API was inspired by Java\(cqs
\f[CR]java.util.Date\f[R] library (while the latter had become de facto
legacy since Java 1.1 in 1997).
In particular, the Java \f[CR]Date\f[R] class had a method called
\f[CR]toGMTString\f[R] \(em which was poorly named, because the \c
.UR https://en.wikipedia.org/wiki/Greenwich_Mean_Time
Greenwich Mean Time
.UE \c
\ is not equivalent to the \c
.UR https://en.wikipedia.org/wiki/Coordinated_Universal_Time
Coordinated Universal Time
.UE \c
, while JavaScript dates always operate by UTC time.
For web compatibility reasons, \f[CR]toGMTString\f[R] remains as an
alias to \f[CR]toUTCString\f[R], and they refer to the exact same
function object.
This means:
.IP
.EX
Date.prototype.toGMTString.name === \(dqtoUTCString\(dq;
.EE
.SH EXAMPLES
.SS Using toUTCString()
.IP
.EX
\f[B]const\f[R] d = \f[B]new\f[R] Date(0);
console.log(d.toUTCString()); \f[I]// \(aqThu, 01 Jan 1970 00:00:00 GMT\(aq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Date.prototype.toLocaleString()\f[R]
.IP \(bu 2
\f[CR]Date.prototype.toString()\f[R]
.IP \(bu 2
\f[CR]Date.prototype.toISOString()\f[R]
