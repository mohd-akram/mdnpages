.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "PublicKeyCredential.getClientExtensionResults" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PublicKeyCredential.getClientExtensionResults \- PublicKeyCredential:
getClientExtensionResults() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]getClientExtensionResults()\f[B]\f[R] method of the
\f[CR]PublicKeyCredential\f[R] interface returns a map between the
identifiers of extensions requested during credential creation or
authentication, and their results after processing by the user agent.
.PP
During the creation or fetching of a \f[CR]PublicKeyCredential\f[R] (via
\f[CR]navigator.credentials.create()\f[R] and
\f[CR]navigator.credentials.get()\f[R] respectively), it is possible to
request \[lq]custom\[rq] processing by the client for different
extensions, specified in the \f[CR]publicKey\f[R] option\[cq]s
\f[CR]extensions\f[R] property.
You can find more information about requesting the different extensions
in Web Authentication extensions.
.RS
.PP
\f[B]Note:\f[R] \f[CR]getClientExtensionResults()\f[R] only returns the
results from extensions processed by the user agent (client).
The results from extensions processed by the authenticator can be found
in the authenticator data available in
\f[CR]AuthenticatorAssertionResponse.authenticatorData\f[R].
.RE
.SH SYNTAX
.IP
.EX
getClientExtensionResults()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]map\f[R], with each entry being an extensions\[cq] identifier
string as the key, and the output from the processing of the extension
by the client as the value.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] publicKey = {
  \f[I]// Here are the extension \[dq]inputs\[dq]\f[R]
  extensions: {
    appid: \[dq]https://accounts.example.com\[dq],
  },
  allowCredentials: {
    id: \[dq]fgrt46jfgd...\[dq],
    transports: [\[dq]usb\[dq], \[dq]nfc\[dq]],
    type: \[dq]public\-key\[dq],
  },
  challenge: \f[B]new\f[R] Uint8Array(16) \f[I]/* from the server */\f[R],
};

navigator.credentials
  .get({ publicKey })
  .then((publicKeyCred) \f[B]=>\f[R] {
    \f[B]const\f[R] myResults = publicKeyCred.getClientExtensionResults();
    \f[I]// myResults will contain the output of processing the \[dq]appid\[dq] extension\f[R]
  })
  .catch((err) \f[B]=>\f[R] {
    console.error(err);
  });
.EE
.RS
.PP
\f[B]Note:\f[R] Extensions are optional and different browsers may
recognize different extensions.
Processing extensions is always optional for the client: if a browser
does not recognize a given extension, it will just ignore it.
For information on which extensions are supported by which browsers, see
Web Authentication extensions.
.RE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://www.w3.org/TR/webauthn/#sctn-defined-extensions
The list of the currently defined extensions
.UE \c
.IP \[bu] 2
\f[CR]AuthenticatorAssertionResponse.authenticatorData\f[R] which
contains the result of the authenticator\[cq]s extensions processing
