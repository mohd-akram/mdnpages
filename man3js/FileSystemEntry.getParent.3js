.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "FileSystemEntry.getParent" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemEntry.getParent \- FileSystemEntry: getParent() method
.SH SYNOPSIS
The \f[CR]FileSystemEntry\f[R] interface\[cq]s method
\f[B]\f[CB]getParent()\f[B]\f[R] obtains a
\f[CR]FileSystemDirectoryEntry\f[R].
.SH SYNTAX
.IP
.EX
getParent(successCallback, errorCallback)
getParent(successCallback)
.EE
.SS Parameters
.TP
\f[B]successCallback\f[R]
A function which is called when the parent directory entry has been
retrieved.
The callback receives a single input parameter: a
\f[CR]FileSystemDirectoryEntry\f[R] object representing the parent
directory.
The parent of the root directory is considered to be the root directory,
itself, so be sure to watch for that.
.TP
\f[B]errorCallback\f[R] \f[I](optional)\f[R]
An optional callback which is executed if an error occurs.
There\[cq]s a single parameter: a \f[CR]DOMException\f[R] describing
what went wrong.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Errors
.TP
\f[B]FileError.INVALID_STATE_ERR\f[R]
The operation failed because the file system\[cq]s state doesn\[cq]t
permit it.
This can happen, for example, if the file system\[cq]s cached state
differs from the actual state of the file system.
.TP
\f[B]FileError.NOT_FOUND_ERR\f[R]
The specified path could not be found.
.TP
\f[B]FileError.SECURITY_ERR\f[R]
Security restrictions prohibit obtaining the parent directory\[cq]s
information.
.SH EXAMPLES
This example renames the file specified by the variable
\f[CR]fileEntry\f[R] to \f[CR]\[dq]newname.html\[dq]\f[R].
.IP
.EX
fileEntry.getParent(
  (parent) \f[B]=>\f[R] {
    fileEntry.moveTo(parent, \[dq]newname.html\[dq], (updatedEntry) \f[B]=>\f[R] {
      console.log(\[ga]File ${fileEntry.name} renamed to newname.html.\[ga]);
    });
  },
  (error) \f[B]=>\f[R] {
    console.error(
      \[ga]An error occurred: Unable to rename ${fileEntry.name} to newname.html.\[ga],
    );
  },
);
.EE
.PP
This is accomplished by first obtaining a
\f[CR]FileSystemDirectoryEntry\f[R] object representing the directory
the file is currently located in.
Then \f[CR]moveTo()\f[R] is used to rename the file within that
directory.
.SH USING PROMISES
Currently, there isn\[cq]t a \f[CR]Promise\f[R]\-based version of this
method.
You can, however, create a simple helper function to adapt it, like
this:
.IP
.EX
\f[B]function\f[R] getParentPromise(entry) {
  \f[B]return\f[R] \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
    entry.getParent(resolve, reject);
  });
}
.EE
.PP
A similar approach can be taken elsewhere in the File and Directory
Entries API.
.SH SEE ALSO
.IP \[bu] 2
File and Directory Entries API
.IP \[bu] 2
Introduction to the File and Directory Entries API
