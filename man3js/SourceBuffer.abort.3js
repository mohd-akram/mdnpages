.\" Automatically generated by Pandoc 3.4
.\"
.TH "SourceBuffer.abort" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SourceBuffer.abort \- SourceBuffer: abort() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]abort()\f[B]\f[R] method of the \f[CR]SourceBuffer\f[R]
interface aborts the current segment and resets the segment parser.
.SH SYNTAX
.IP
.EX
abort()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]MediaSource.readyState\f[R] property of the parent
media source is not equal to \f[CR]open\f[R], or this
\f[CR]SourceBuffer\f[R] has been removed from the
\f[CR]MediaSource\f[R].
.SH EXAMPLES
The spec description of \f[CR]abort()\f[R] is somewhat confusing \[em]
consider for example step 1 of \c
.UR https://w3c.github.io/media-source/index.html#sourcebuffer-reset-parser-state
reset parser state
.UE \c
\&.
The MSE API is fully asynchronous, but this step seems to suggest a
synchronous (blocking) operation, which doesn\[cq]t make sense.
.PP
Saying that, current implementations can be useful in certain
situations, when you want to stop the current append (or whatever)
operation occurring on a source buffer, and then immediately start
performing operations on it again.
For example, consider this code:
.IP
.EX
sourceBuffer.addEventListener(\[dq]updateend\[dq], (ev) \f[B]=>\f[R] {
  \f[I]// ...\f[R]
});

sourceBuffer.appendBuffer(buf);
.EE
.PP
Let\[cq]s say that after the call to \f[CR]appendBuffer\f[R] BUT before
the \f[CR]updateend\f[R] event fires (i.e.\ a buffer is being appended
but the operation has not yet completed) a user \[lq]scrubs\[rq] the
video seeking to a new point in time.
In this case you would want to manually call \f[CR]abort()\f[R] on the
source buffer to stop the decoding of the current buffer, then fetch and
append the newly requested segment that relates to the current new
position of the video.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]MediaSource\f[R]
.IP \[bu] 2
\f[CR]SourceBufferList\f[R]
