.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Set.isSubsetOf" "JS" "September 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.isSubsetOf \- Set.prototype.isSubsetOf()
.SH SYNOPSIS
The \f[B]\f[CB]isSubsetOf()\f[B]\f[R] method of \f[CR]Set\f[R] instances
takes a set and returns a boolean indicating if all elements of this set
are in the given set.
.SH SYNTAX
.IP
.EX
isSubsetOf(other)
.EE
.SS Parameters
.TP
\f[B]other\f[R]
A \f[CR]Set\f[R] object, or set\-like object.
.SS Return value
\f[CR]true\f[R] if all elements in this set are also in the
\f[CR]other\f[R] set, and \f[CR]false\f[R] otherwise.
.SH DESCRIPTION
In mathematical notation, \f[I]subset\f[R] is defined as:
.PP
\ A⊆B⇔∀x∊A,x∊BAB xA,,xB 
.PP
And using Venn diagram:
[IMAGE: A Venn diagram with two circles.
A is a subset of B because A is completely contained in B.]
A Venn diagram with two circles.
A is a subset of B because A is completely contained in B.
.RS
.PP
\f[B]Note:\f[R] The \f[I]subset\f[R] relationship is not \f[I]proper
subset\f[R], which means \f[CR]isSubsetOf()\f[R] returns \f[CR]true\f[R]
if \f[CR]this\f[R] and \f[CR]other\f[R] contain the same elements.
.RE
.PP
\f[CR]isSubsetOf()\f[R] accepts set\-like objects as the
\f[CR]other\f[R] parameter.
It requires \f[CR]this\f[R] to be an actual \f[CR]Set\f[R] instance,
because it directly retrieves the underlying data stored in
\f[CR]this\f[R] without invoking any user code.
Then, its behavior depends on the sizes of \f[CR]this\f[R] and
\f[CR]other\f[R]:
.IP \[bu] 2
If there are more elements in \f[CR]this\f[R] than
\f[CR]other.size\f[R], then it directly returns \f[CR]false\f[R].
.IP \[bu] 2
Otherwise, it iterates over the elements in \f[CR]this\f[R], and returns
\f[CR]false\f[R] if any element \f[CR]e\f[R] in \f[CR]this\f[R] causes
\f[CR]other.has(e)\f[R] to return a falsy value.
Otherwise, it returns \f[CR]true\f[R].
.SH EXAMPLES
.SS Using isSubsetOf()
The set of multiples of 4 (<20) is a subset of even numbers (<20):
.IP
.EX
\f[B]const\f[R] fours = \f[B]new\f[R] Set([4, 8, 12, 16]);
\f[B]const\f[R] evens = \f[B]new\f[R] Set([2, 4, 6, 8, 10, 12, 14, 16, 18]);
console.log(fours.isSubsetOf(evens)); \f[I]// true\f[R]
.EE
.PP
The set of prime numbers (<20) is not a subset of all odd numbers (<20),
because 2 is prime but not odd:
.IP
.EX
\f[B]const\f[R] primes = \f[B]new\f[R] Set([2, 3, 5, 7, 11, 13, 17, 19]);
\f[B]const\f[R] odds = \f[B]new\f[R] Set([3, 5, 7, 9, 11, 13, 15, 17, 19]);
console.log(primes.isSubsetOf(odds)); \f[I]// false\f[R]
.EE
.PP
Equivalent sets are subsets of each other:
.IP
.EX
\f[B]const\f[R] set1 = \f[B]new\f[R] Set([1, 2, 3]);
\f[B]const\f[R] set2 = \f[B]new\f[R] Set([1, 2, 3]);
console.log(set1.isSubsetOf(set2)); \f[I]// true\f[R]
console.log(set2.isSubsetOf(set1)); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#new-set-methods
Polyfill of \f[CR]Set.prototype.isSubsetOf\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Set.prototype.difference()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.intersection()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.isDisjointFrom()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.isSupersetOf()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.symmetricDifference()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.union()\f[R]
