.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "WakeLockSentinel" "JS" "July 29, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WakeLockSentinel \- WakeLockSentinel
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]WakeLockSentinel\f[B]\f[R] interface of the Screen Wake
Lock API can be used to monitor the status of the platform screen wake
lock, and manually release the lock when needed.
.PP
The screen wake lock prevents device screens from dimming or locking
when an application needs to keep running.
.PP
A screen wake lock is requested using the
\f[CR]navigator.wakeLock.request()\f[R] method, which returns a
\f[CR]Promise\f[R] that fulfills with a \f[CR]WakeLockSentinel\f[R]
object if the lock is granted.
.PP
An acquired screen wake lock can be released manually via the
\f[CR]release()\f[R] method, or automatically via the platform screen
wake lock.
The latter may occur if the document becomes inactive or loses
visibility, if the device is low on power, or if the user turns on a
power save mode.
A released \f[CR]WakeLockSentinel\f[R] cannot be re\-used: a new
sentinel must be requested using \f[CR]navigator.wakeLock.request()\f[R]
if a new lock is needed.
Releasing all \f[CR]WakeLockSentinel\f[R] instances of a given wake lock
type will cause the underlying platform wake lock to be released.
.PP
An event is fired at the \f[CR]WakeLockSentinel\f[R] if the platform
lock is released, allowing applications to configure their UI, and
re\-request the lock if needed.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]released\f[R] \f[I](read\-only)\f[R]
Returns a boolean indicating whether the \f[CR]WakeLockSentinel\f[R] has
been released.
.TP
\f[B]type\f[R] \f[I](read\-only)\f[R]
Returns a string representation of the currently acquired
\f[CR]WakeLockSentinel\f[R] type.
Return values are:
.RS
.IP \[bu] 2
\f[CR]screen\f[R]: A screen wake lock.
Prevents devices from dimming or locking the screen.
.RE
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]release()\f[R]
Releases the \f[CR]WakeLockSentinel\f[R], returning a \f[CR]Promise\f[R]
that is resolved once the sentinel has been successfully released.
.SH EVENTS
.TP
\f[B]release\f[R]
Fired when the \f[CR]release()\f[R] method is called or the wake lock is
released by the user agent.
.SH EXAMPLES
In this example, we create an asynchronous function that requests a
\f[CR]WakeLockSentinel\f[R].
Once the screen wake lock is acquired we listen for the
\f[CR]release\f[R] event, which can be used to give appropriate UI
feedback.
The sentinel can be acquired or released via appropriate interactions.
.IP
.EX
\f[I]// create a reference for the wake lock\f[R]
\f[B]let\f[R] wakeLock = \f[B]null\f[R];

\f[I]// create an async function to request a wake lock\f[R]
\f[B]const\f[R] requestWakeLock = \f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]try\f[R] {
    wakeLock = \f[B]await\f[R] navigator.wakeLock.request(\[dq]screen\[dq]);

    \f[I]// listen for our release event\f[R]
    wakeLock.addEventListener(\[dq]release\[dq], () \f[B]=>\f[R] {
      \f[I]// if wake lock is released alter the UI accordingly\f[R]
    });
  } \f[B]catch\f[R] (err) {
    \f[I]// if wake lock request fails \- usually system related, such as battery\f[R]
  }
};

wakeLockOnButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  requestWakeLock();
});

wakeLockOffButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[B]if\f[R] (wakeLock !== \f[B]null\f[R]) {
    wakeLock.release().then(() \f[B]=>\f[R] {
      wakeLock = \f[B]null\f[R];
    });
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/wake-lock/
Stay awake with the Screen Wake Lock API
.UE \c
