.\" Automatically generated by Pandoc 3.4
.\"
.TH "Reflect.setPrototypeOf" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.setPrototypeOf \- Reflect.setPrototypeOf()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.setPrototypeOf()\f[B]\f[R] static method is like
\f[CR]Object.setPrototypeOf()\f[R] but returns a \f[CR]Boolean\f[R].
It sets the prototype (i.e., the internal \f[CR][[Prototype]]\f[R]
property) of a specified object.
.SH SYNTAX
.IP
.EX
Reflect.setPrototypeOf(target, prototype)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target object of which to set the prototype.
.TP
\f[B]prototype\f[R]
The object\[cq]s new prototype (an object or \f[CR]null\f[R]).
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not the prototype was
successfully set.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] is not an object or if \f[CR]prototype\f[R]
is neither an object nor \f[CR]null\f[R].
.SH DESCRIPTION
\f[CR]Reflect.setPrototypeOf()\f[R] provides the reflective semantic of
setting the prototype of an object.
At the very low level, setting the prototype returns a boolean (as is
the case with the proxy handler).
\f[CR]Object.setPrototypeOf()\f[R] provides nearly the same semantic,
but it throws a \f[CR]TypeError\f[R] if the status is \f[CR]false\f[R]
(the operation was unsuccessful), while
\f[CR]Reflect.setPrototypeOf()\f[R] directly returns the status.
.PP
\f[CR]Reflect.setPrototypeOf()\f[R] invokes the
\f[CR][[SetPrototypeOf]]\f[R] object internal method of
\f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.setPrototypeOf()
.IP
.EX
Reflect.setPrototypeOf({}, Object.prototype); \f[I]// true\f[R]

\f[I]// It can change an object\[aq]s [[Prototype]] to null.\f[R]
Reflect.setPrototypeOf({}, \f[B]null\f[R]); \f[I]// true\f[R]

\f[I]// Returns false if target is not extensible.\f[R]
Reflect.setPrototypeOf(Object.freeze({}), \f[B]null\f[R]); \f[I]// false\f[R]

\f[I]// Returns false if it cause a prototype chain cycle.\f[R]
\f[B]const\f[R] target = {};
\f[B]const\f[R] proto = Object.create(target);
Reflect.setPrototypeOf(target, proto); \f[I]// false\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-reflect
Polyfill of \f[CR]Reflect.setPrototypeOf\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Reflect\f[R]
.IP \[bu] 2
\f[CR]Object.setPrototypeOf()\f[R]
.IP \[bu] 2
\f[CR]handler.setPrototypeOf()\f[R]
