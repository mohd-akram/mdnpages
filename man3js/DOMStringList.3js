.\" Automatically generated by Pandoc 3.4
.\"
.TH "DOMStringList" "JS" "October 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMStringList \- DOMStringList
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]DOMStringList\f[B]\f[R] interface is a legacy type
returned by some APIs and represents a non\-modifiable list of strings
(\f[CR]DOMString\f[R]).
.PP
This interface was an \c
.UR https://stackoverflow.com/questions/74630989/why-use-domstringlist-rather-than-an-array/74641156#74641156
attempt to create an unmodifiable list
.UE \c
\ and only continues to be supported to not break code that\[cq]s
already using it.
Modern APIs represent list structures using types based on JavaScript
arrays, thus making many array methods available, and at the same time
imposing additional semantics on their usage (such as making their items
read\-only).
.PP
These historical reasons do not mean that you as a developer should
avoid \f[CR]DOMStringList\f[R].
You don\[cq]t create \f[CR]DOMStringList\f[R] objects yourself, but you
get them from APIs such as \f[CR]Location.ancestorOrigins\f[R], and
these APIs are not deprecated.
However, be careful of the semantic differences from a real array.
.PP
This interface is used in IndexedDB and in the \f[CR]Location\f[R] API:
.IP \[bu] 2
\f[CR]IDBDatabase.objectStoreNames\f[R]
.IP \[bu] 2
\f[CR]IDBObjectStore.indexNames\f[R]
.IP \[bu] 2
\f[CR]Location.ancestorOrigins\f[R]
.SH INSTANCE PROPERTIES
.TP
\f[B]DOMStringList.length\f[R] \f[I](read\-only)\f[R]
Returns the size of the list.
.SH INSTANCE METHODS
.TP
\f[B]DOMStringList.item()\f[R]
Returns a string from the list with the given index.
.TP
\f[B]DOMStringList.contains()\f[R]
Returns a boolean indicating whether the given string is in the list.
