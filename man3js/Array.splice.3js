.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAY.SPLICE" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.splice \- Array.prototype.splice()
.SH SYNOPSIS
The \f[B]\f[CB]splice()\f[B]\f[R] method of \f[CR]Array\f[R] instances
changes the contents of an array by removing or replacing existing
elements and/or adding new elements \c
.UR https://en.wikipedia.org/wiki/In-place_algorithm
in place
.UE \c
\&.
.PP
To create a new array with a segment removed and/or replaced without
mutating the original array, use \f[CR]toSpliced()\f[R].
To access part of an array without modifying it, see \f[CR]slice()\f[R].
.IP
.EX
\f[B]const\f[R] months = [\(dqJan\(dq, \(dqMarch\(dq, \(dqApril\(dq, \(dqJune\(dq];
months.splice(1, 0, \(dqFeb\(dq);
\f[I]// Inserts at index 1\f[R]
console.log(months);
\f[I]// Expected output: Array [\(dqJan\(dq, \(dqFeb\(dq, \(dqMarch\(dq, \(dqApril\(dq, \(dqJune\(dq]\f[R]

months.splice(4, 1, \(dqMay\(dq);
\f[I]// Replaces 1 element at index 4\f[R]
console.log(months);
\f[I]// Expected output: Array [\(dqJan\(dq, \(dqFeb\(dq, \(dqMarch\(dq, \(dqApril\(dq, \(dqMay\(dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
splice(start)
splice(start, deleteCount)
splice(start, deleteCount, item1)
splice(start, deleteCount, item1, item2)
splice(start, deleteCount, item1, item2, /* \&..., */ itemN)
.EE
.SS Parameters
.TP
\f[B]start\f[R]
Zero\-based index at which to start changing the array, converted to an
integer.
.RS
.IP \(bu 2
Negative index counts back from the end of the array \(em if
\f[CR]\-array.length <= start < 0\f[R], \f[CR]start + array.length\f[R]
is used.
.IP \(bu 2
If \f[CR]start < \-array.length\f[R], \f[CR]0\f[R] is used.
.IP \(bu 2
If \f[CR]start >= array.length\f[R], no element will be deleted, but the
method will behave as an adding function, adding as many elements as
provided.
.IP \(bu 2
If \f[CR]start\f[R] is omitted (and \f[CR]splice()\f[R] is called with
no arguments), nothing is deleted.
This is different from passing \f[CR]undefined\f[R], which is converted
to \f[CR]0\f[R].
.RE
.TP
\f[B]deleteCount\f[R] \f[I](optional)\f[R]
An integer indicating the number of elements in the array to remove from
\f[CR]start\f[R].
.RS
.PP
If \f[CR]deleteCount\f[R] is omitted, or if its value is greater than or
equal to the number of elements after the position specified by
\f[CR]start\f[R], then all the elements from \f[CR]start\f[R] to the end
of the array will be deleted.
However, if you wish to pass any \f[CR]itemN\f[R] parameter, you should
pass \f[CR]Infinity\f[R] as \f[CR]deleteCount\f[R] to delete all
elements after \f[CR]start\f[R], because an explicit
\f[CR]undefined\f[R] gets converted to \f[CR]0\f[R].
.PP
If \f[CR]deleteCount\f[R] is \f[CR]0\f[R] or negative, no elements are
removed.
In this case, you should specify at least one new element (see below).
.RE
.TP
\f[B]item1\f[R], \&..., \f[B]itemN\f[R] \f[I](optional)\f[R]
The elements to add to the array, beginning from \f[CR]start\f[R].
.RS
.PP
If you do not specify any elements, \f[CR]splice()\f[R] will only remove
elements from the array.
.RE
.SS Return value
An array containing the deleted elements.
.PP
If only one element is removed, an array of one element is returned.
.PP
If no elements are removed, an empty array is returned.
.SH DESCRIPTION
The \f[CR]splice()\f[R] method is a mutating method.
It may change the content of \f[CR]this\f[R].
If the specified number of elements to insert differs from the number of
elements being removed, the array\(cqs \f[CR]length\f[R] will be changed
as well.
At the same time, it uses \f[CR][Symbol.species]\f[R] to create a new
array instance to be returned.
.PP
If the deleted portion is sparse, the array returned by
\f[CR]splice()\f[R] is sparse as well, with those corresponding indices
being empty slots.
.PP
The \f[CR]splice()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
Although strings are also array\-like, this method is not suitable to be
applied on them, as strings are immutable.
.SH EXAMPLES
.SS Remove 0 (zero) elements before index 2, and insert \(lqdrum\(rq
.IP
.EX
\f[B]const\f[R] myFish = [\(dqangel\(dq, \(dqclown\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(2, 0, \(dqdrum\(dq);

\f[I]// myFish is [\(dqangel\(dq, \(dqclown\(dq, \(dqdrum\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// removed is [], no elements removed\f[R]
.EE
.SS Remove 0 (zero) elements before index 2, and insert \(lqdrum\(rq and \(lqguitar\(rq
.IP
.EX
\f[B]const\f[R] myFish = [\(dqangel\(dq, \(dqclown\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(2, 0, \(dqdrum\(dq, \(dqguitar\(dq);

\f[I]// myFish is [\(dqangel\(dq, \(dqclown\(dq, \(dqdrum\(dq, \(dqguitar\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// removed is [], no elements removed\f[R]
.EE
.SS Remove 0 (zero) elements at index 0, and insert \(lqangel\(rq
\f[CR]splice(0, 0, ...elements)\f[R] inserts elements at the start of
the array like \f[CR]unshift()\f[R].
.IP
.EX
\f[B]const\f[R] myFish = [\(dqclown\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(0, 0, \(dqangel\(dq);

\f[I]// myFish is [\(dqangel\(dq, \(dqclown\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// no items removed\f[R]
.EE
.SS Remove 0 (zero) elements at last index, and insert \(lqsturgeon\(rq
\f[CR]splice(array.length, 0, ...elements)\f[R] inserts elements at the
end of the array like \f[CR]push()\f[R].
.IP
.EX
\f[B]const\f[R] myFish = [\(dqangel\(dq, \(dqclown\(dq, \(dqmandarin\(dq];
\f[B]const\f[R] removed = myFish.splice(myFish.length, 0, \(dqsturgeon\(dq);

\f[I]// myFish is [\(dqangel\(dq, \(dqclown\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// no items removed\f[R]
.EE
.SS Remove 1 element at index 3
.IP
.EX
\f[B]const\f[R] myFish = [\(dqangel\(dq, \(dqclown\(dq, \(dqdrum\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(3, 1);

\f[I]// myFish is [\(dqangel\(dq, \(dqclown\(dq, \(dqdrum\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// removed is [\(dqmandarin\(dq]\f[R]
.EE
.SS Remove 1 element at index 2, and insert \(lqtrumpet\(rq
.IP
.EX
\f[B]const\f[R] myFish = [\(dqangel\(dq, \(dqclown\(dq, \(dqdrum\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(2, 1, \(dqtrumpet\(dq);

\f[I]// myFish is [\(dqangel\(dq, \(dqclown\(dq, \(dqtrumpet\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// removed is [\(dqdrum\(dq]\f[R]
.EE
.SS Remove 2 elements from index 0, and insert \(lqparrot\(rq, \(lqanemone\(rq and \(lqblue\(rq
.IP
.EX
\f[B]const\f[R] myFish = [\(dqangel\(dq, \(dqclown\(dq, \(dqtrumpet\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(0, 2, \(dqparrot\(dq, \(dqanemone\(dq, \(dqblue\(dq);

\f[I]// myFish is [\(dqparrot\(dq, \(dqanemone\(dq, \(dqblue\(dq, \(dqtrumpet\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// removed is [\(dqangel\(dq, \(dqclown\(dq]\f[R]
.EE
.SS Remove 2 elements, starting from index 2
.IP
.EX
\f[B]const\f[R] myFish = [\(dqparrot\(dq, \(dqanemone\(dq, \(dqblue\(dq, \(dqtrumpet\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(2, 2);

\f[I]// myFish is [\(dqparrot\(dq, \(dqanemone\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// removed is [\(dqblue\(dq, \(dqtrumpet\(dq]\f[R]
.EE
.SS Remove 1 element from index \-2
.IP
.EX
\f[B]const\f[R] myFish = [\(dqangel\(dq, \(dqclown\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(\-2, 1);

\f[I]// myFish is [\(dqangel\(dq, \(dqclown\(dq, \(dqsturgeon\(dq]\f[R]
\f[I]// removed is [\(dqmandarin\(dq]\f[R]
.EE
.SS Remove all elements, starting from index 2
.IP
.EX
\f[B]const\f[R] myFish = [\(dqangel\(dq, \(dqclown\(dq, \(dqmandarin\(dq, \(dqsturgeon\(dq];
\f[B]const\f[R] removed = myFish.splice(2);

\f[I]// myFish is [\(dqangel\(dq, \(dqclown\(dq]\f[R]
\f[I]// removed is [\(dqmandarin\(dq, \(dqsturgeon\(dq]\f[R]
.EE
.SS Using splice() on sparse arrays
The \f[CR]splice()\f[R] method preserves the array\(cqs sparseness.
.IP
.EX
\f[B]const\f[R] arr = [1, , 3, 4, , 6];
console.log(arr.splice(1, 2)); \f[I]// [empty, 3]\f[R]
console.log(arr); \f[I]// [1, 4, empty, 6]\f[R]
.EE
.SS Calling splice() on non\-array objects
The \f[CR]splice()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R].
It then updates the integer\-keyed properties and the \f[CR]length\f[R]
property as needed.
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  unrelated: \(dqfoo\(dq,
  0: 5,
  2: 4,
};
console.log(Array.prototype.splice.call(arrayLike, 0, 1, 2, 3));
\f[I]// [ 5 ]\f[R]
console.log(arrayLike);
\f[I]// { \(aq0\(aq: 2, \(aq1\(aq: 3, \(aq3\(aq: 4, length: 4, unrelated: \(aqfoo\(aq }\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array\f[R]
.IP \(bu 2
\f[CR]Array.prototype.concat()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.push()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.pop()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.shift()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.slice()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.toSpliced()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.unshift()\f[R]
