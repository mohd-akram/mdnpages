.\" Automatically generated by Pandoc 3.4
.\"
.TH "AudioParam.setValueAtTime" "JS" "July 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioParam.setValueAtTime \- AudioParam: setValueAtTime() method
.SH SYNOPSIS
The \f[CR]setValueAtTime()\f[R] method of the \f[CR]AudioParam\f[R]
interface schedules an instant change to the \f[CR]AudioParam\f[R] value
at a precise time, as measured against
\f[CR]AudioContext.currentTime\f[R].
The new value is given in the value parameter.
.SH SYNTAX
.IP
.EX
setValueAtTime(value, startTime)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
A floating point number representing the value the AudioParam will
change to at the given time.
.TP
\f[B]startTime\f[R]
A double representing the time (in seconds) after the
\f[CR]AudioContext\f[R] was first created that the change in value will
happen.
If the time is less than \f[CR]AudioContext.currentTime\f[R], the change
happens immediately.
A \f[CR]TypeError\f[R] is thrown if this value is negative.
.SS Return value
A reference to this \f[CR]AudioParam\f[R] object.
In some browsers older implementations of this interface return
\f[CR]undefined\f[R].
.SH EXAMPLES
This simple example features a media element source with two control
buttons (see our \c
.UR https://github.com/mdn/webaudio-examples/blob/main/audio-param/index.html
webaudio\-examples repo
.UE \c
\ for the source code, or \c
.UR https://mdn.github.io/webaudio-examples/audio-param/
view the example live
.UE \c
).
When the buttons are pressed, the \f[CR]currGain\f[R] variable is
incremented/decremented by 0.25, then the \f[CR]setValueAtTime()\f[R]
method is used to set the gain value equal to \f[CR]currGain\f[R], one
second from now (\f[CR]audioCtx.currentTime + 1\f[R].)
.IP
.EX
\f[I]// create audio context\f[R]
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[I]// set basic variables for example\f[R]
\f[B]const\f[R] myAudio = document.querySelector(\[dq]audio\[dq]);
\f[B]const\f[R] pre = document.querySelector(\[dq]pre\[dq]);
\f[B]const\f[R] myScript = document.querySelector(\[dq]script\[dq]);

pre.textContent = myScript.textContent;

\f[B]const\f[R] targetAtTimePlus = document.querySelector(\[dq].set\-target\-at\-time\-plus\[dq]);
\f[B]const\f[R] targetAtTimeMinus = document.querySelector(\[dq].set\-target\-at\-time\-minus\[dq]);

\f[I]// Create a MediaElementAudioSourceNode\f[R]
\f[I]// Feed the HTMLMediaElement into it\f[R]
\f[B]const\f[R] source = audioCtx.createMediaElementSource(myAudio);

\f[I]// Create a gain node and set its gain value to 0.5\f[R]
\f[B]const\f[R] gainNode = audioCtx.createGain();
gainNode.gain.value = 0.5;
\f[B]let\f[R] currGain = gainNode.gain.value;

\f[I]// connect the AudioBufferSourceNode to the gainNode\f[R]
\f[I]// and the gainNode to the destination\f[R]
source.connect(gainNode);
gainNode.connect(audioCtx.destination);

\f[I]// set buttons to do something onclick\f[R]
targetAtTimePlus.onclick = () \f[B]=>\f[R] {
  currGain += 0.25;
  gainNode.gain.setValueAtTime(currGain, audioCtx.currentTime + 1);
};

targetAtTimeMinus.onclick = () \f[B]=>\f[R] {
  currGain \-= 0.25;
  gainNode.gain.setValueAtTime(currGain, audioCtx.currentTime + 1);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
