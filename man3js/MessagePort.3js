.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "MessagePort" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MessagePort \- MessagePort
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]MessagePort\f[B]\f[R] interface of the Channel Messaging
API represents one of the two ports of a \f[CR]MessageChannel\f[R],
allowing messages to be sent from one port and listening out for them
arriving at the other.
.PP
\f[CR]MessagePort\f[R] is a transferable object.
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent, \f[CI]EventTarget\f[I]\f[R].
.TP
\f[B]postMessage()\f[R]
Sends a message from the port, and optionally, transfers ownership of
objects to other browsing contexts.
.TP
\f[B]start()\f[R]
Starts the sending of messages queued on the port (only needed when
using \f[CR]EventTarget.addEventListener\f[R]; it is implied when using
\f[CR]onmessage\f[R]).
.TP
\f[B]close()\f[R]
Disconnects the port, so it is no longer active.
.SH EVENTS
\f[I]Inherits events from its parent, \f[CI]EventTarget\f[I]\f[R].
.TP
\f[B]message\f[R]
Fired when a \f[CR]MessagePort\f[R] object receives a message.
.TP
\f[B]messageerror\f[R]
Fired when a \f[CR]MessagePort\f[R] object receives a message that
can\[cq]t be deserialized.
.SH EXAMPLE
In the following example, you can see a new channel being created using
the \f[CR]MessageChannel()\f[R] constructor.
.PP
When the IFrame has loaded, we register an \f[CR]onmessage\f[R] handler
for \f[CR]MessageChannel.port1\f[R] and transfer
\f[CR]MessageChannel.port2\f[R] to the IFrame using the
\f[CR]window.postMessage\f[R] method along with a message.
.PP
When a message is received back from the IFrame, the
\f[CR]onMessage\f[R] function outputs the message to a paragraph.
.IP
.EX
\f[B]const\f[R] channel = \f[B]new\f[R] MessageChannel();
\f[B]const\f[R] output = document.querySelector(\[dq].output\[dq]);
\f[B]const\f[R] iframe = document.querySelector(\[dq]iframe\[dq]);

\f[I]// Wait for the iframe to load\f[R]
iframe.addEventListener(\[dq]load\[dq], onLoad);

\f[B]function\f[R] onLoad() {
  \f[I]// Listen for messages on port1\f[R]
  channel.port1.onmessage = onMessage;

  \f[I]// Transfer port2 to the iframe\f[R]
  iframe.contentWindow.postMessage(\[dq]Hello from the main page!\[dq], \[dq]*\[dq], [
    channel.port2,
  ]);
}

\f[I]// Handle messages received on port1\f[R]
\f[B]function\f[R] onMessage(e) {
  output.innerHTML = e.data;
}
.EE
.PP
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/channel-messaging-basic
channel messaging basic demo
.UE \c
\ on GitHub (\c
.UR https://mdn.github.io/dom-examples/channel-messaging-basic/
run it live too
.UE \c
).
.SH SEE ALSO
.IP \[bu] 2
Using channel messaging
