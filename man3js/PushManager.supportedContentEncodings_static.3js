.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PUSHMANAGER.SUPPORTEDCONTENTENCODINGS_STATIC" "3JS" "April 7, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PushManager.supportedContentEncodings_static \- PushManager:
supportedContentEncodings static property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]supportedContentEncodings\f[B]\f[R] read\-only static
property of the \f[CR]PushManager\f[R] interface returns an array of
supported content codings that can be used to encrypt the payload of a
push message.
.PP
User agents must support the \f[CR]aes128gcm\f[R] content coding defined
in RFC 8291, and may also support content codings defined from previous
versions of the specification.
The returned array is frozen, and may not be modified by the recipient.
.PP
The application server requires this coding in order to encrypt push
messages for sending to the push server.
The coding used for encryption is also included by the app server in the
\f[CR]Content\-Encoding\f[R] HTTP header field of each push message.
.PP
The specification does not define how the client code should send the
application server the supported codings, or the information in the
\f[CR]PushSubscription\f[R] that it also needs in order to encrypt and
send a push message.
One approach is shown in the examples section below.
.SH VALUE
An array of strings.
This usually contains just one value: \f[CR]\(dqaes128gcm\(dq\f[R].
.SH EXCEPTIONS
.TP
\f[B]TypeError\f[R]
This is thrown when attempting to set a value in the returned array.
.SH EXAMPLES
.SS Sending coding information to the server
Push messages are encrypted on the application server for sending to the
push server, and decrypted by the browser before being passed to the
application service worker.
The public and private keys used are generated by the browser, and only
the public key and an associated secret are shared with the web app, and
hence the application server.
This ensures that push messages remain private as they pass through the
push server infrastructure.
.PP
The \f[CR]p256dh\f[R] public key and \f[CR]auth\f[R] secret used for
encrypting the message are provided to the service worker via its push
subscription, using the \f[CR]PushSubscription.getKey()\f[R] method,
along with the target endpoint for sending push messages in
\f[CR]PushSubscription.endpoint\f[R].
The coding that should be used for encryption is provided by
\f[CR]supportedContentEncodings\f[R].
.PP
This information may be sent to the application server using any
mechanism.
One approach is to put the needed information from
\f[CR]PushSubscription\f[R] and \f[CR]supportedContentEncodings\f[R]
into a JSON object, serialize it using \f[CR]JSON.stringify()\f[R] and
post the result to the application server.
.IP
.EX
\f[I]// Get a PushSubscription object\f[R]
\f[B]const\f[R] pushSubscription =
  \f[B]await\f[R] serviceWorkerRegistration.pushManager.subscribe();

\f[I]// Create an object containing the information needed by the app server\f[R]
\f[B]const\f[R] subscriptionObject = {
  endpoint: pushSubscription.endpoint,
  keys: {
    p256dh: pushSubscription.getKeys(\(dqp256dh\(dq),
    auth: pushSubscription.getKeys(\(dqauth\(dq),
  },
  encoding: PushManager.supportedContentEncodings,
  \f[I]/* other app\-specific data, such as user identity */\f[R]
};

\f[I]// Stringify the object an post to the app server\f[R]
fetch(\(dqhttps://example.com/push/\(dq, {
  method: \(dqPOST\(dq,
  body: JSON.stringify(pushSubscription),
});
.EE
