.\" Automatically generated by Pandoc 3.4
.\"
.TH "Array.keys" "JS" "July 15, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.keys \- Array.prototype.keys()
.SH SYNOPSIS
The \f[B]\f[CB]keys()\f[B]\f[R] method of \f[CR]Array\f[R] instances
returns a new \f[I]array iterator\f[R] object that contains the keys for
each index in the array.
.SH SYNTAX
.IP
.EX
keys()
.EE
.SS Parameters
None.
.SS Return value
A new iterable iterator object.
.SH DESCRIPTION
When used on sparse arrays, the \f[CR]keys()\f[R] method iterates empty
slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]keys()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Using keys() on sparse arrays
Unlike \f[CR]Object.keys()\f[R], which only includes keys that actually
exist in the array, the \f[CR]keys()\f[R] iterator doesn\[cq]t ignore
holes representing missing properties.
.IP
.EX
\f[B]const\f[R] arr = [\[dq]a\[dq], , \[dq]c\[dq]];
\f[B]const\f[R] sparseKeys = Object.keys(arr);
\f[B]const\f[R] denseKeys = [...arr.keys()];
console.log(sparseKeys); \f[I]// [\[aq]0\[aq], \[aq]2\[aq]]\f[R]
console.log(denseKeys); \f[I]// [0, 1, 2]\f[R]
.EE
.SS Calling keys() on non\-array objects
The \f[CR]keys()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then yields all integer indices between 0 and
\f[CR]length \- 1\f[R].
No index access actually happens.
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
};
\f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] Array.prototype.keys.call(arrayLike)) {
  console.log(entry);
}
\f[I]// 0\f[R]
\f[I]// 1\f[R]
\f[I]// 2\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.keys\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.entries()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.values()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype[Symbol.iterator]()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.keys()\f[R]
.IP \[bu] 2
Iteration protocols
