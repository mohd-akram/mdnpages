.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "String.toWellFormed" "JS" "August 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.toWellFormed \- String.prototype.toWellFormed()
.SH SYNOPSIS
The \f[B]\f[CB]toWellFormed()\f[B]\f[R] method of \f[CR]String\f[R]
values returns a string where all lone surrogates of this string are
replaced with the Unicode replacement character U+FFFD.
.SH SYNTAX
.IP
.EX
toWellFormed()
.EE
.SS Parameters
None.
.SS Return value
A new string that is a copy of this string, with all lone surrogates
replaced with the Unicode replacement character U+FFFD.
If \f[CR]str\f[R] is well formed, a new string is still returned
(essentially a copy of \f[CR]str\f[R]).
.SH DESCRIPTION
Strings in JavaScript are UTF\-16 encoded.
UTF\-16 encoding has the concept of \f[I]surrogate pairs\f[R], which is
introduced in detail in the UTF\-16 characters, Unicode code points, and
grapheme clusters section.
.PP
\f[CR]toWellFormed()\f[R] iterates through the code units of this
string, and replaces any lone surrogates with the \c
.UR https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character
Unicode replacement character
.UE \c
\ U+FFFD \f[CR]ï¿½\f[R].
This ensures that the returned string is well\-formed and can be used in
functions that expect well\-formed strings, such as
\f[CR]encodeURI\f[R].
Compared to a custom implementation, \f[CR]toWellFormed()\f[R] is more
efficient, as engines can directly access the internal representation of
strings.
.PP
When ill\-formed strings are used in certain contexts, such as
\f[CR]TextEncoder\f[R], they are automatically converted to well\-formed
strings using the same replacement character.
When lone surrogates are rendered, they are also rendered as the
replacement character (a diamond with a question mark inside).
.SH EXAMPLES
.SS Using toWellFormed()
.IP
.EX
\f[B]const\f[R] strings = [
  \f[I]// Lone leading surrogate\f[R]
  \[dq]ab\[rs]uD800\[dq],
  \[dq]ab\[rs]uD800c\[dq],
  \f[I]// Lone trailing surrogate\f[R]
  \[dq]\[rs]uDFFFab\[dq],
  \[dq]c\[rs]uDFFFab\[dq],
  \f[I]// Well\-formed\f[R]
  \[dq]abc\[dq],
  \[dq]ab\[rs]uD83D\[rs]uDE04c\[dq],
];

\f[B]for\f[R] (\f[B]const\f[R] str \f[B]of\f[R] strings) {
  console.log(str.toWellFormed());
}
\f[I]// Logs:\f[R]
\f[I]// \[dq]abï¿½\[dq]\f[R]
\f[I]// \[dq]abï¿½c\[dq]\f[R]
\f[I]// \[dq]ï¿½ab\[dq]\f[R]
\f[I]// \[dq]cï¿½ab\[dq]\f[R]
\f[I]// \[dq]abc\[dq]\f[R]
\f[I]// \[dq]abðŸ˜„c\[dq]\f[R]
.EE
.SS Avoiding errors in encodeURI()
\f[CR]encodeURI\f[R] throws an error if the string passed is not
well\-formed.
This can be avoided by using \f[CR]toWellFormed()\f[R] to convert the
string to a well\-formed string first.
.IP
.EX
\f[B]const\f[R] illFormed = \[dq]https://example.com/search?q=\[rs]uD800\[dq];

\f[B]try\f[R] {
  encodeURI(illFormed);
} \f[B]catch\f[R] (e) {
  console.log(e); \f[I]// URIError: URI malformed\f[R]
}

console.log(encodeURI(illFormed.toWellFormed())); \f[I]// \[dq]https://example.com/search?q=%EF%BF%BD\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#well-formed-unicode-strings
Polyfill of \f[CR]String.prototype.toWellFormed\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]String.prototype.isWellFormed()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.normalize()\f[R]
