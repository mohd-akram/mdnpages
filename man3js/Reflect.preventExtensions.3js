.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Reflect.preventExtensions" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.preventExtensions \- Reflect.preventExtensions()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.preventExtensions()\f[B]\f[R] static method is
like \f[CR]Object.preventExtensions()\f[R].
It prevents new properties from ever being added to an object (i.e.,
prevents future extensions to the object).
.SH SYNTAX
.IP
.EX
Reflect.preventExtensions(target)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target object on which to prevent extensions.
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not the target was
successfully set to prevent extensions.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] is not an object.
.SH DESCRIPTION
\f[CR]Reflect.preventExtensions()\f[R] provides the reflective semantic
of preventing extensions of an object.
The differences with \f[CR]Object.preventExtensions()\f[R] are:
.IP \[bu] 2
\f[CR]Reflect.preventExtensions()\f[R] throws a \f[CR]TypeError\f[R] if
the target is not an object, while \f[CR]Object.preventExtensions()\f[R]
always returns non\-object targets as\-is.
.IP \[bu] 2
\f[CR]Reflect.preventExtensions()\f[R] returns a \f[CR]Boolean\f[R]
indicating whether or not the target was successfully set to prevent
extensions, while \f[CR]Object.preventExtensions()\f[R] returns the
target object.
.PP
\f[CR]Reflect.preventExtensions()\f[R] invokes the
\f[CR][[PreventExtensions]]\f[R] object internal method of
\f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.preventExtensions()
See also \f[CR]Object.preventExtensions()\f[R].
.IP
.EX
\f[I]// Objects are extensible by default.\f[R]
\f[B]const\f[R] empty = {};
Reflect.isExtensible(empty); \f[I]// true\f[R]

\f[I]// ...but that can be changed.\f[R]
Reflect.preventExtensions(empty);
Reflect.isExtensible(empty); \f[I]// false\f[R]
.EE
.SS Difference with Object.preventExtensions()
If the \f[CR]target\f[R] argument to this method is not an object (a
primitive), then it will cause a \f[CR]TypeError\f[R].
With \f[CR]Object.preventExtensions()\f[R], a non\-object
\f[CR]target\f[R] will be returned as\-is without any errors.
.IP
.EX
Reflect.preventExtensions(1);
\f[I]// TypeError: 1 is not an object\f[R]

Object.preventExtensions(1);
\f[I]// 1\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-reflect
Polyfill of \f[CR]Reflect.preventExtensions\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Reflect\f[R]
.IP \[bu] 2
\f[CR]Object.preventExtensions()\f[R]
.IP \[bu] 2
\f[CR]handler.preventExtensions()\f[R]
