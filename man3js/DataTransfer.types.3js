.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "DataTransfer.types" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.types \- DataTransfer: types property
.SH SYNOPSIS
The \f[B]\f[CB]DataTransfer.types\f[B]\f[R] read\-only property returns
the available types that exist in the \f[CR]items\f[R].
.SH VALUE
An array of the data formats used in the drag operation.
Each format is a string which is generally a MIME type such as
\f[CR]text/plain\f[R] or \f[CR]text/html\f[R].
If the drag operation included no data, this list will be empty.
If any files are included in the drag operation, then one of the types
will be the string \f[CR]Files\f[R].
.SH EXAMPLES
This example shows the use of the \f[CR]types\f[R] and \f[CR]items\f[R]
properties.
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\[dq]en\[dq]>
  <\f[B]title\f[R]>Examples of DataTransfer.{types,items} properties</\f[B]title\f[R]>
  <\f[B]meta\f[R] content=\[dq]width=device\-width\[dq] />
  <\f[B]style\f[R]>
    div {
      \f[B]margin\f[R]: 0em;
      \f[B]padding\f[R]: 2em;
    }
    #target {
      \f[B]border\f[R]: 1px solid black;
    }
  </\f[B]style\f[R]>
  <\f[B]script\f[R]>
    \f[B]function\f[R] dragstart_handler(ev) {
      console.log(\[dq]dragStart: target.id = \[dq] + ev.target.id);

      \f[I]// Add this element\[aq]s id to the drag payload so the drop handler will\f[R]
      \f[I]// know which element to add to its tree\f[R]
      ev.dataTransfer.setData(\[dq]text/plain\[dq], ev.target.id);
      ev.dataTransfer.effectAllowed = \[dq]move\[dq];
    }

    \f[B]function\f[R] drop_handler(ev) {
      console.log(\[dq]drop: target.id = \[dq] + ev.target.id);
      ev.preventDefault();

      \f[I]// Get the id of the target and add the moved element to the target\[aq]s DOM\f[R]
      \f[B]const\f[R] data = ev.dataTransfer.getData(\[dq]text\[dq]);
      ev.target.appendChild(document.getElementById(data));

      \f[I]// Print each format type\f[R]
      \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < ev.dataTransfer.types.length; i++) {
        console.log(\[ga]\&... types[${i}] = ${ev.dataTransfer.types[i]}\[ga]);
      }

      \f[I]// Print each item\[aq]s \[dq]kind\[dq] and \[dq]type\[dq]\f[R]
      \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < ev.dataTransfer.items.length; i++) {
        console.log(
          \[ga]\&... items[${i}].kind = ${ev.dataTransfer.items[i].kind}; type = ${ev.dataTransfer.items[i].type}\[ga],
        );
      }
    }

    \f[B]function\f[R] dragover_handler(ev) {
      console.log(\[dq]dragOver\[dq]);
      ev.preventDefault();
      \f[I]// Set the dropEffect to move\f[R]
      ev.dataTransfer.dropEffect = \[dq]move\[dq];
    }
  </\f[B]script\f[R]>
  <\f[B]body\f[R]>
    <\f[B]h1\f[R]>
      Examples of <\f[B]code\f[R]>DataTransfer</\f[B]code\f[R]>.{<\f[B]code\f[R]>types</\f[B]code\f[R]>,
      <\f[B]code\f[R]>items</\f[B]code\f[R]>} properties
    </\f[B]h1\f[R]>
    <\f[B]ul\f[R]>
      <\f[B]li\f[R] id=\[dq]i1\[dq] ondragstart=\[dq]dragstart_handler(event);\[dq] draggable=\[dq]true\[dq]>
        Drag Item 1 to the Drop Zone
      </\f[B]li\f[R]>
      <\f[B]li\f[R] id=\[dq]i2\[dq] ondragstart=\[dq]dragstart_handler(event);\[dq] draggable=\[dq]true\[dq]>
        Drag Item 2 to the Drop Zone
      </\f[B]li\f[R]>
    </\f[B]ul\f[R]>
    <\f[B]div\f[R]
      id=\[dq]target\[dq]
      ondrop=\[dq]drop_handler(event);\[dq]
      ondragover=\[dq]dragover_handler(event);\[dq]>
      Drop Zone
    </\f[B]div\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SH SEE ALSO
.IP \[bu] 2
Drag and drop
.IP \[bu] 2
Drag Operations
.IP \[bu] 2
Recommended Drag Types
.IP \[bu] 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
