.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATATRANSFER.TYPES" "3JS" "June 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.types \- DataTransfer: types property
.SH SYNOPSIS
The \f[B]\f[CB]DataTransfer.types\f[B]\f[R] read\-only property returns
the available types that exist in the \f[CR]items\f[R].
.SH VALUE
An array of the data formats.
Each format is a string which is generally a MIME type such as
\f[CR]text/plain\f[R] or \f[CR]text/html\f[R].
If the drag operation included no data, this list will be empty.
If any files are included in the drag operation, then one of the types
will be the string \f[CR]Files\f[R].
.SH EXAMPLES
This example shows the use of the \f[CR]types\f[R] and \f[CR]items\f[R]
properties.
.IP
.EX
<\f[B]ul\f[R]>
  <\f[B]li\f[R] id=\(dqi1\(dq draggable=\(dqtrue\(dq>Drag Item 1 to the Drop Zone</\f[B]li\f[R]>
  <\f[B]li\f[R] id=\(dqi2\(dq draggable=\(dqtrue\(dq>Drag Item 2 to the Drop Zone</\f[B]li\f[R]>
</\f[B]ul\f[R]>
<\f[B]div\f[R] id=\(dqtarget\(dq>Drop Zone</\f[B]div\f[R]>
<\f[B]pre\f[R] id=\(dqoutput\(dq></\f[B]pre\f[R]>
.EE
.IP
.EX
div {
  \f[B]margin\f[R]: 0em;
  \f[B]padding\f[R]: 2em;
}
target {
  \f[B]border\f[R]: 1px solid black;
}
.EE
.IP
.EX
\f[B]const\f[R] output = document.getElementById(\(dqoutput\(dq);
\f[B]function\f[R] log(msg) {
  output.textContent += \(ga${msg}\(rsn\(ga;
}

document.querySelectorAll(\(dqli\(dq).forEach((item) \f[B]=>\f[R] {
  item.addEventListener(\(dqdragstart\(dq, dragstart_handler);
});

\f[B]function\f[R] dragstart_handler(ev) {
  log(\(gadragStart: target.id = ${ev.target.id}\(ga);

  \f[I]// Add this element\(aqs id to the drag payload so the drop handler will\f[R]
  \f[I]// know which element to add to its tree\f[R]
  ev.dataTransfer.setData(\(dqtext/plain\(dq, ev.target.id);
  ev.dataTransfer.effectAllowed = \(dqmove\(dq;
}

\f[B]const\f[R] target = document.getElementById(\(dqtarget\(dq);

target.addEventListener(\(dqdrop\(dq, (ev) \f[B]=>\f[R] {
  log(\(gadrop: target.id = ${ev.target.id}\(ga);
  ev.preventDefault();

  \f[I]// Get the id of the target and add the moved element to the target\(aqs DOM\f[R]
  \f[B]const\f[R] data = ev.dataTransfer.getData(\(dqtext\(dq);
  ev.target.appendChild(document.getElementById(data));

  \f[I]// Print each format type\f[R]
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < ev.dataTransfer.types.length; i++) {
    log(\(ga\&... types[${i}] = ${ev.dataTransfer.types[i]}\(ga);
  }

  \f[I]// Print each item\(aqs \(dqkind\(dq and \(dqtype\(dq\f[R]
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < ev.dataTransfer.items.length; i++) {
    log(
      \(ga\&... items[${i}].kind = ${ev.dataTransfer.items[i].kind}; type = ${ev.dataTransfer.items[i].type}\(ga,
    );
  }
});

target.addEventListener(\(dqdragover\(dq, (ev) \f[B]=>\f[R] {
  ev.preventDefault();
  ev.dataTransfer.dropEffect = \(dqmove\(dq;
});
.EE
.SH SEE ALSO
.IP \(bu 2
Drag and drop
.IP \(bu 2
Drag Operations
.IP \(bu 2
Recommended Drag Types
.IP \(bu 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
