.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "IDBDatabase.transaction" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBDatabase.transaction \- IDBDatabase: transaction() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]transaction\f[B]\f[R] method of the
\f[CR]IDBDatabase\f[R] interface immediately returns a transaction
object (\f[CR]IDBTransaction\f[R]) containing the
\f[CR]IDBTransaction.objectStore\f[R] method, which you can use to
access your object store.
.SH SYNTAX
.IP
.EX
transaction(storeNames)
transaction(storeNames, mode)
transaction(storeNames, mode, options)
.EE
.SS Parameters
.TP
\f[B]storeNames\f[R]
The names of object stores that are in the scope of the new transaction,
declared as an array of strings.
Specify only the object stores that you need to access.
If you need to access only one object store, you can specify its name as
a string.
Therefore the following lines are equivalent:
.RS
.IP
.EX
db.transaction([\[dq]my\-store\-name\[dq]]);
db.transaction(\[dq]my\-store\-name\[dq]);
.EE
.PP
If you need to access all object stores in the database, you can use the
property \f[CR]IDBDatabase.objectStoreNames\f[R]:
.IP
.EX
\f[B]const\f[R] transaction = db.transaction(db.objectStoreNames);
.EE
.PP
Passing an empty array will throw an exception.
.RE
.TP
\f[B]mode\f[R] \f[I](optional)\f[R]
The types of access that can be performed in the transaction.
Transactions are opened in one of three modes: \f[CR]readonly\f[R],
\f[CR]readwrite\f[R] and \f[CR]readwriteflush\f[R] (non\-standard,
Firefox\-only.)
\f[CR]versionchange\f[R] mode can\[cq]t be specified here.
If you don\[cq]t provide the parameter, the default access mode is
\f[CR]readonly\f[R].
To avoid slowing things down, don\[cq]t open a \f[CR]readwrite\f[R]
transaction unless you actually need to write into the database.
.RS
.PP
If you need to open the object store in \f[CR]readwrite\f[R] mode to
change data, you would use the following:
.IP
.EX
\f[B]const\f[R] transaction = db.transaction(\[dq]my\-store\-name\[dq], \[dq]readwrite\[dq]);
.EE
.PP
As of Firefox 40, IndexedDB transactions have relaxed durability
guarantees to increase performance (see \c
.UR https://bugzil.la/1112702
Firefox bug 1112702
.UE \c
), which is the same behavior as other IndexedDB\-supporting browsers.
Previously in a \f[CR]readwrite\f[R] transaction, a \f[CR]complete\f[R]
event was fired only when all data was guaranteed to have been flushed
to disk.
In Firefox 40+ the \f[CR]complete\f[R] event is fired after the OS has
been told to write the data but potentially before that data has
actually been flushed to disk.
The \f[CR]complete\f[R] event may thus be delivered quicker than before,
however, there exists a small chance that the entire transaction will be
lost if the OS crashes or there is a loss of system power before the
data is flushed to disk.
Since such catastrophic events are rare most consumers should not need
to concern themselves further.
.RS
.PP
\f[B]Note:\f[R] In Firefox, if you wish to ensure durability for some
reason (e.g.\ you\[cq]re storing critical data that cannot be recomputed
later) you can force a transaction to flush to disk before delivering
the \f[CR]complete\f[R] event by creating a transaction using the
experimental (non\-standard) \f[CR]readwriteflush\f[R] mode (see
\f[CR]IDBDatabase.transaction\f[R].)
This is currently experimental, and can only be used if the
\f[CR]dom.indexedDB.experimental\f[R] pref is set to \f[CR]true\f[R] in
\f[CR]about:config\f[R].
.RE
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
Dictionary of other options.
Available options are:
.RS
.TP
\f[B]durability\f[R]
\f[CR]\[dq]default\[dq]\f[R], \f[CR]\[dq]strict\[dq]\f[R], or
\f[CR]\[dq]relaxed\[dq]\f[R].
The default is \f[CR]\[dq]default\[dq]\f[R].
Using \f[CR]\[dq]relaxed\[dq]\f[R] provides better performance, but with
fewer guarantees.
Web applications are encouraged to use \f[CR]\[dq]relaxed\[dq]\f[R] for
ephemeral data such as caches or quickly changing records, and
\f[CR]\[dq]strict\[dq]\f[R] in cases where reducing the risk of data
loss outweighs the impact to performance and power.
.RE
.SS Return value
An \f[CR]IDBTransaction\f[R] object.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]close()\f[R] method has previously been called on
this \f[CR]IDBDatabase\f[R] instance.
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if an object store specified in the `storeNames' parameter has
been deleted or removed.
.TP
\f[B]TypeError\f[R]
Thrown if the value for the \f[CR]mode\f[R] parameter is invalid.
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Thrown if the function was called with an empty list of store names.
.SH EXAMPLES
In this example we open a database connection, then use transaction() to
open a transaction on the database.
For a complete example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[B]let\f[R] db;

\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.innerHTML += \[dq]<li>Database initialized.</li>\[dq];

  \f[I]// store the result of opening the database in the db variable.\f[R]
  \f[I]// This is used a lot below\f[R]
  db = DBOpenRequest.result;

  \f[I]// Run the displayData() function to populate the task list with\f[R]
  \f[I]// all the to\-do list data already in the IDB\f[R]
  displayData();
};

\f[I]// open a read/write db transaction, ready for adding the data\f[R]
\f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

\f[I]// report on the success of opening the transaction\f[R]
transaction.oncomplete = (event) \f[B]=>\f[R] {
  note.innerHTML +=
    \[dq]<li>Transaction completed: database modification finished.</li>\[dq];
};

transaction.onerror = (event) \f[B]=>\f[R] {
  note.innerHTML +=
    \[dq]<li>Transaction not opened due to error. Duplicate items not allowed.</li>\[dq];
};

\f[I]// you would then go on to do something to this database\f[R]
\f[I]// via an object store\f[R]
\f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);
\f[I]// etc.\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
