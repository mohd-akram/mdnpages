.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "IDBDatabase.transaction" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBDatabase.transaction \- IDBDatabase: transaction() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]transaction\f[B]\f[R] method of the
\f[CR]IDBDatabase\f[R] interface immediately returns a transaction
object (\f[CR]IDBTransaction\f[R]) containing the
\f[CR]IDBTransaction.objectStore\f[R] method, which you can use to
access your object store.
.SH SYNTAX
.IP
.EX
transaction(storeNames)
transaction(storeNames, mode)
transaction(storeNames, mode, options)
.EE
.SS Parameters
.TP
\f[B]storeNames\f[R]
The names of object stores that are in the scope of the new transaction,
declared as an array of strings.
Specify only the object stores that you need to access.
If you need to access only one object store, you can specify its name as
a string.
Therefore the following lines are equivalent:
.RS
.IP
.EX
db.transaction([\[dq]my\-store\-name\[dq]]);
db.transaction(\[dq]my\-store\-name\[dq]);
.EE
.PP
If you need to access all object stores in the database, you can use the
property \f[CR]IDBDatabase.objectStoreNames\f[R]:
.IP
.EX
\f[B]const\f[R] transaction = db.transaction(db.objectStoreNames);
.EE
.PP
Passing an empty array will throw an exception.
.RE
.TP
\f[B]mode\f[R] \f[I](optional)\f[R]
The types of access that can be performed in the transaction.
Transactions are opened in one of three modes:
.RS
.TP
\f[B]readonly\f[R]
Open a transaction for reading from an object store.
This is the default mode.
.TP
\f[B]readwrite\f[R]
Open a transaction for both reading and writing from an object store.
This should only be used if need to write into the database.
.TP
\f[B]readwriteflush\f[R] \f[I](non\-standard)\f[R] \f[I](experimental)\f[R]
Force a transaction to flush to disk before delivering the
\f[CR]complete\f[R] event.
This might be used for storing critical data that cannot be recomputed
later.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
Object defining additional options, including:
.RS
.TP
\f[B]durability\f[R]
One of the three string\-literal values below:
.RS
.TP
\f[B]\[dq]strict\[dq]\f[R]
The user agent may consider that the transaction has successfully
committed only after verifying that all outstanding changes have been
successfully written to a persistent storage medium.
This is recommended where the risk of data loss outweighs the impact of
its use on performance and power (compared to \f[CR]relaxed\f[R]).
.TP
\f[B]\[dq]relaxed\[dq]\f[R]
The user agent may consider that the transaction has successfully
committed as soon as all outstanding changes have been written to the
operating system, without subsequent verification.
This offers better performance than \f[CR]strict\f[R], and is
recommended for ephemeral data such as caches or quickly changing
records.
.TP
\f[B]\[dq]default\[dq]\f[R]
The user agent should use its default durability behavior for the
storage bucket.
This is the default for transactions if not otherwise specified.
.RE
.RE
.SS Return value
An \f[CR]IDBTransaction\f[R] object.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]close()\f[R] method has previously been called on
this \f[CR]IDBDatabase\f[R] instance.
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if an object store specified in the `storeNames' parameter has
been deleted or removed.
.TP
\f[B]TypeError\f[R]
Thrown if the value for the \f[CR]mode\f[R] parameter is invalid.
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Thrown if the function was called with an empty list of store names.
.SH EXAMPLES
In this example we open a database connection, then use transaction() to
open a transaction on the database.
For a complete example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[B]let\f[R] db;

\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db variable.\f[R]
  \f[I]// This is used a lot below\f[R]
  db = DBOpenRequest.result;

  \f[I]// Run the displayData() function to populate the task list with\f[R]
  \f[I]// all the to\-do list data already in the IDB\f[R]
  displayData();
};

\f[I]// open a read/write db transaction, ready for adding the data\f[R]
\f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

\f[I]// report on the success of opening the transaction\f[R]
transaction.oncomplete = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Transaction completed: database modification finished.\[dq];
};

transaction.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Transaction not opened due to error. Duplicate items not allowed.\[dq];
};

\f[I]// you would then go on to do something to this database\f[R]
\f[I]// via an object store\f[R]
\f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);
\f[I]// etc.\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
