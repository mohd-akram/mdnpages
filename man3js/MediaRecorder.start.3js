.\" Automatically generated by Pandoc 3.4
.\"
.TH "MediaRecorder.start" "JS" "September 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaRecorder.start \- MediaRecorder: start() method
.SH SYNOPSIS
The \f[B]\f[CB]start()\f[B]\f[R] method of the \f[CR]MediaRecorder\f[R]
interface begins recording media into one or more \f[CR]Blob\f[R]
objects.
.PP
You can record the entire duration of the media into a single
\f[CR]Blob\f[R] (or until you call \f[CR]requestData()\f[R]), or you can
specify the number of milliseconds to record at a time.
Then, each time that amount of media has been recorded, an event will be
delivered to let you act upon the recorded media, while a new
\f[CR]Blob\f[R] is created to record the next slice of the media.
.PP
Assuming the \f[CR]MediaRecorder\f[R]\[cq]s \f[CR]state\f[R] is
\f[CR]inactive\f[R], \f[CR]start()\f[R] sets the \f[CR]state\f[R] to
\f[CR]recording\f[R], then begins capturing media from the input stream.
A \f[CR]Blob\f[R] is created and the data is collected in it until the
time slice period elapses or the source media ends.
Each time a \f[CR]Blob\f[R] is filled up to that point (the timeslice
duration or the end\-of\-media, if no slice duration was provided), a
\f[CR]dataavailable\f[R] event is sent to the \f[CR]MediaRecorder\f[R]
with the recorded data.
If the source is still playing, a new \f[CR]Blob\f[R] is created and
recording continues into that, and so forth.
.PP
When the source stream ends, \f[CR]state\f[R] is set to
\f[CR]inactive\f[R] and data gathering stops.
A final \f[CR]dataavailable\f[R] event is sent to the
\f[CR]MediaRecorder\f[R], followed by a \f[CR]stop\f[R] event.
.RS
.PP
\f[B]Note:\f[R] If the browser is unable to start recording or continue
recording, it will raise an \f[CR]error\f[R] event, followed by a
\f[CR]dataavailable\f[R] event containing the \f[CR]Blob\f[R] it has
gathered, followed by the \f[CR]stop\f[R] event.
.RE
.SH SYNTAX
.IP
.EX
start()
start(timeslice)
.EE
.SS Parameters
.TP
\f[B]timeslice\f[R] \f[I](optional)\f[R]
The number of milliseconds to record into each \f[CR]Blob\f[R].
If this parameter isn\[cq]t included, the entire media duration is
recorded into a single \f[CR]Blob\f[R] unless the
\f[CR]requestData()\f[R] method is called to obtain the \f[CR]Blob\f[R]
and trigger the creation of a new \f[CR]Blob\f[R] into which the media
continues to be recorded.
.RS
.RS
.PP
\f[B]Note:\f[R] Like other time values in web APIs, \f[CR]timeslice\f[R]
is not exact and the real intervals may be slightly longer due to other
pending tasks before the creation of the next blob.
.RE
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
Errors that can be detected immediately are thrown as DOM exceptions.
All other errors are reported through \f[CR]error\f[R] events sent to
the \f[CR]MediaRecorder\f[R] object.
You can implement the \f[CR]onerror\f[R] event handler to respond to
these errors.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]MediaRecorder\f[R] is not in the \f[CR]inactive\f[R]
state; you cannot start recording media if it is already being recorded.
See the \f[CR]state\f[R] property.
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if:
.RS
.IP \[bu] 2
The media stream you are attempting to record is inactive.
.IP \[bu] 2
One or more of the stream\[cq]s tracks is in a format that cannot be
recorded using the current configuration
.IP \[bu] 2
The \f[CR]videoKeyFrameIntervalDuration\f[R] and
\f[CR]videoKeyFrameIntervalCount\f[R] parameter are both specified when
creating the \f[CR]MediaRecorder\f[R].
.RE
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]MediaStream\f[R] is configured to disallow
recording.
This may be the case, for example, with sources obtained using
\f[CR]getUserMedia()\f[R] when the user denies permission to use an
input device.
This exception may also be delivered as an \f[CR]error\f[R] event if the
security options for the source media change after recording begins.
.SH EXAMPLES
.IP
.EX
record.onclick = () \f[B]=>\f[R] {
  mediaRecorder.start();
  console.log(\[dq]recorder started\[dq]);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the MediaStream Recording API
.IP \[bu] 2
\c
.UR https://mdn.github.io/dom-examples/media/web-dictaphone/
Web Dictaphone
.UE \c
: MediaRecorder + getUserMedia + Web Audio API visualization demo, by \c
.UR https://github.com/chrisdavidmills
Chris Mills
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone
source on GitHub
.UE \c
\&.)
.IP \[bu] 2
\c
.UR https://simpl.info/mediarecorder/
simpl.info MediaStream Recording demo
.UE \c
, by \c
.UR https://github.com/samdutton
Sam Dutton
.UE \c
\&.
.IP \[bu] 2
\f[CR]getUserMedia()\f[R]
