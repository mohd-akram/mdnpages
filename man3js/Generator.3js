.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Generator" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Generator \- Generator
.SH SYNOPSIS
The \f[B]\f[CB]Generator\f[B]\f[R] object is returned by a generator
function and it conforms to both the iterable protocol and the iterator
protocol.
.PP
\f[CR]Generator\f[R] is a subclass of the hidden \f[CR]Iterator\f[R]
class.
.IP
.EX
\f[B]const\f[R] foo = \f[B]function\f[R]* () {
  \f[B]yield\f[R] \[dq]a\[dq];
  \f[B]yield\f[R] \[dq]b\[dq];
  \f[B]yield\f[R] \[dq]c\[dq];
};

\f[B]let\f[R] str = \[dq]\[dq];
\f[B]for\f[R] (\f[B]const\f[R] val \f[B]of\f[R] foo()) {
  str = str + val;
}

console.log(str);
\f[I]// Expected output: \[dq]abc\[dq]\f[R]
.EE
.SH CONSTRUCTOR
There\[cq]s no JavaScript entity that corresponds to the
\f[CR]Generator\f[R] constructor.
Instances of \f[CR]Generator\f[R] must be returned from generator
functions:
.IP
.EX
\f[B]function\f[R]* generator() {
  \f[B]yield\f[R] 1;
  \f[B]yield\f[R] 2;
  \f[B]yield\f[R] 3;
}

\f[B]const\f[R] gen = generator(); \f[I]// \[dq]Generator { }\[dq]\f[R]

console.log(gen.next().value); \f[I]// 1\f[R]
console.log(gen.next().value); \f[I]// 2\f[R]
console.log(gen.next().value); \f[I]// 3\f[R]
.EE
.PP
There\[cq]s only a hidden object which is the prototype object shared by
all objects created by generator functions.
This object is often stylized as \f[CR]Generator.prototype\f[R] to make
it look like a class, but it should be more appropriately called
\f[CR]GeneratorFunction.prototype.prototype\f[R], because
\f[CR]GeneratorFunction\f[R] is an actual JavaScript entity.
To understand the prototype chain of \f[CR]Generator\f[R] instances, see
\f[CR]GeneratorFunction.prototype.prototype\f[R].
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Generator.prototype\f[R] and
shared by all \f[CR]Generator\f[R] instances.
.TP
\f[B]Generator.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Generator\f[R] instances, the initial value is
\f[CR]GeneratorFunction.prototype\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] \f[CR]Generator\f[R] objects do not store a reference to
the generator function that created them.
.RE
.RE
.TP
\f[B]Generator.prototype[Symbol.toStringTag]\f[R]
The initial value of the \f[CR][Symbol.toStringTag]\f[R] property is the
string \f[CR]\[dq]Generator\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
\f[I]Also inherits instance methods from its parent
\f[CI]Iterator\f[I]\f[R].
.TP
\f[B]Generator.prototype.next()\f[R]
Returns a value yielded by the \f[CR]yield\f[R] expression.
.TP
\f[B]Generator.prototype.return()\f[R]
Acts as if a \f[CR]return\f[R] statement is inserted in the
generator\[cq]s body at the current suspended position, which finishes
the generator and allows the generator to perform any cleanup tasks when
combined with a \f[CR]try...finally\f[R] block.
.TP
\f[B]Generator.prototype.throw()\f[R]
Acts as if a \f[CR]throw\f[R] statement is inserted in the
generator\[cq]s body at the current suspended position, which informs
the generator of an error condition and allows it to handle the error,
or perform cleanup and close itself.
.SH EXAMPLES
.SS An infinite iterator
With a generator function, values are not evaluated until they are
needed.
Therefore a generator allows us to define a potentially infinite data
structure.
.IP
.EX
\f[B]function\f[R]* infinite() {
  \f[B]let\f[R] index = 0;

  \f[B]while\f[R] (\f[B]true\f[R]) {
    \f[B]yield\f[R] index++;
  }
}

\f[B]const\f[R] generator = infinite(); \f[I]// \[dq]Generator { }\[dq]\f[R]

console.log(generator.next().value); \f[I]// 0\f[R]
console.log(generator.next().value); \f[I]// 1\f[R]
console.log(generator.next().value); \f[I]// 2\f[R]
\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]function*\f[R]
.IP \[bu] 2
\f[CR]function*\f[R] expression
.IP \[bu] 2
\f[CR]GeneratorFunction\f[R]
.IP \[bu] 2
Iteration protocols
