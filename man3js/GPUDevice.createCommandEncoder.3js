.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATECOMMANDENCODER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createCommandEncoder \- GPUDevice: createCommandEncoder()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createCommandEncoder()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPUCommandEncoder\f[R],
used to encode commands to be issued to the GPU.
.SH SYNTAX
.IP
.EX
createCommandEncoder()
createCommandEncoder(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R] \f[I](optional)\f[R]
An object containing the following properties:
.RS
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.RE
.SS Return value
A \f[CR]GPUCommandEncoder\f[R] object instance.
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, several commands are recorded via a \f[CR]GPUCommandEncoder\f[R]
created via \f[CR]createCommandEncoder()\f[R]:
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create GPUCommandEncoder\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Create GPURenderPassDescriptor to tell WebGPU which texture to draw into, then initiate render pass\f[R]
\f[B]const\f[R] renderPassDescriptor = {
  colorAttachments: [
    {
      clearValue: clearColor,
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
      view: context.getCurrentTexture().createView(),
    },
  ],
};

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// Draw a triangle\f[R]
passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.draw(3);

\f[I]// End the render pass\f[R]
passEncoder.end();

\f[I]// \&...\f[R]
.EE
.PP
The commands encoded by the \f[CR]GPUCommandEncoder\f[R] are recoded
into a \f[CR]GPUCommandBuffer\f[R] using the
\f[CR]GPUCommandEncoder.finish()\f[R] method.
The command buffer is then passed into the queue via a
\f[CR]submit()\f[R] call, ready to be processed by the GPU.
.IP
.EX
device.queue.submit([commandEncoder.finish()]);
.EE
.RS
.PP
\f[B]Note:\f[R] Study the \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ to find more command encoding examples.
.RE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
