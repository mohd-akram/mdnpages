.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Set" "JS" "January 31, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set \- Set
.SH SYNOPSIS
The \f[B]\f[CB]Set\f[B]\f[R] object lets you store unique values of any
type, whether primitive values or object references.
.SH DESCRIPTION
\f[CR]Set\f[R] objects are collections of values.
A value in the set \f[B]may only occur once\f[R]; it is unique in the
set\[cq]s collection.
You can iterate through the elements of a set in insertion order.
The \f[I]insertion order\f[R] corresponds to the order in which each
element was inserted into the set by the \f[CR]add()\f[R] method
successfully (that is, there wasn\[cq]t an identical element already in
the set when \f[CR]add()\f[R] was called).
.PP
The specification requires sets to be implemented \[lq]that, on average,
provide access times that are sublinear on the number of elements in the
collection\[rq].
Therefore, it could be represented internally as a hash table (with O(1)
lookup), a search tree (with O(log(N)) lookup), or any other data
structure, as long as the complexity is better than O(N).
.SS Value equality
Value equality is based on the SameValueZero algorithm.
(It used to use SameValue, which treated \f[CR]0\f[R] and \f[CR]\-0\f[R]
as different.
Check browser compatibility.)
This means \f[CR]NaN\f[R] is considered the same as \f[CR]NaN\f[R] (even
though \f[CR]NaN !== NaN\f[R]) and all other values are considered equal
according to the semantics of the \f[CR]===\f[R] operator.
.SS Performance
The \f[CR]has\f[R] method checks if a value is in the set, using an
approach that is, on average, quicker than testing most of the elements
that have previously been added to the set.
In particular, it is, on average, faster than the
\f[CR]Array.prototype.includes\f[R] method when an array has a
\f[CR]length\f[R] equal to a set\[cq]s \f[CR]size\f[R].
.SS Set composition
The \f[CR]Set\f[R] object provides some methods that allow you to
compose sets like you would with mathematical operations.
These methods include:
Method
Return type
Mathematical equivalent
Venn diagram
\f[CR]A.difference(B)\f[R]
Set
A∖BAB
\f[CR]A.intersection(B)\f[R]
Set
A∩BAB
\f[CR]A.symmetricDifference(B)\f[R]
Set
(A∖B)∪(B∖A)(AB)(BA)
\f[CR]A.union(B)\f[R]
Set
A∪BAB
\f[CR]A.isDisjointFrom(B)\f[R]
Boolean
A∩B=∅AB =
\f[CR]A.isSubsetOf(B)\f[R]
Boolean
A⊆BAB
\f[CR]A.isSupersetOf(B)\f[R]
Boolean
A⊇BAB
.PP
To make them more generalizable, these methods don\[cq]t just accept
\f[CR]Set\f[R] objects, but anything that\[cq]s set\-like.
.SS Set\-like objects
All set composition methods require \f[CR]this\f[R] to be an actual
\f[CR]Set\f[R] instance, but their arguments just need to be set\-like.
A \f[I]set\-like object\f[R] is an object that provides the following:
.IP \[bu] 2
A \f[CR]size\f[R] property that contains a number.
.IP \[bu] 2
A \f[CR]has()\f[R] method that takes an element and returns a boolean.
.IP \[bu] 2
A \f[CR]keys()\f[R] method that returns an iterator of the elements in
the set.
.PP
For example, \f[CR]Map\f[R] objects are set\-like because they also have
\f[CR]size\f[R], \f[CR]has()\f[R], and \f[CR]keys()\f[R], so they behave
just like sets of keys when used in set methods:
.IP
.EX
\f[B]const\f[R] a = \f[B]new\f[R] Set([1, 2, 3]);
\f[B]const\f[R] b = \f[B]new\f[R] Map([
  [1, \[dq]one\[dq]],
  [2, \[dq]two\[dq]],
  [4, \[dq]four\[dq]],
]);
console.log(a.union(b)); \f[I]// Set(4) {1, 2, 3, 4}\f[R]
.EE
.RS
.PP
\f[B]Note:\f[R] The set\-like protocol invokes the \f[CR]keys()\f[R]
method instead of \f[CR][\[at]\[at]iterator]()\f[R] to produce elements.
This is to make maps valid set\-like objects, because for maps, the
iterator produces \f[I]entries\f[R] but the \f[CR]has()\f[R] method
takes \f[I]keys\f[R].
.RE
.PP
Arrays are not set\-like because they don\[cq]t have a \f[CR]has()\f[R]
method or the \f[CR]size\f[R] property, and their \f[CR]keys()\f[R]
method produces indices instead of elements.
\f[CR]WeakSet\f[R] objects are also not set\-like because they don\[cq]t
have a \f[CR]keys()\f[R] method.
.SS Set\-like browser APIs
Browser \f[B]\f[CB]Set\f[B]\-like objects\f[R] (or \[lq]setlike
objects\[rq]) are Web API interfaces that behave in many ways like a
\f[CR]Set\f[R].
.PP
Just like \f[CR]Set\f[R], elements can be iterated in the same order
that they were added to the object.
\f[CR]Set\f[R]\-like objects and \f[CR]Set\f[R] also have properties and
methods that share the same name and behavior.
However unlike \f[CR]Set\f[R] they only allow a specific predefined type
for each entry.
.PP
The allowed types are set in the specification IDL definition.
For example, \f[CR]GPUSupportedFeatures\f[R] is a \f[CR]Set\f[R]\-like
object that must use strings as the key/value.
This is defined in the specification IDL below:
.IP
.EX
interface GPUSupportedFeatures {
  readonly setlike<DOMString>;
};
.EE
.PP
\f[CR]Set\f[R]\-like objects are either read\-only or read\-writable
(see the \f[CR]readonly\f[R] keyword in the IDL above).
.IP \[bu] 2
Read\-only \f[CR]Set\f[R]\-like objects have the property
\f[CR]size\f[R], and the methods: \f[CR]entries()\f[R],
\f[CR]forEach()\f[R], \f[CR]has()\f[R], \f[CR]keys()\f[R],
\f[CR]values()\f[R], and \f[CR]\[at]\[at]iterator\f[R].
.IP \[bu] 2
Writeable \f[CR]Set\f[R]\-like objects additionally have the methods:
\f[CR]clear()\f[R], \f[CR]delete()\f[R], and \f[CR]add()\f[R].
.PP
The methods and properties have the same behavior as the equivalent
entities in \f[CR]Set\f[R], except for the restriction on the types of
the entry.
.PP
The following are examples of read\-only \f[CR]Set\f[R]\-like browser
objects:
.IP \[bu] 2
\f[CR]GPUSupportedFeatures\f[R]
.IP \[bu] 2
\f[CR]XRAnchorSet\f[R]
.PP
The following are examples of writable \f[CR]Set\f[R]\-like browser
objects:
.IP \[bu] 2
\f[CR]CustomStateSet\f[R]
.IP \[bu] 2
\f[CR]FontFaceSet\f[R]
.IP \[bu] 2
\f[CR]Highlight\f[R]
.SH CONSTRUCTOR
.TP
\f[B]Set()\f[R]
Creates a new \f[CR]Set\f[R] object.
.SH STATIC PROPERTIES
.TP
\f[B]Set[\[at]\[at]species]\f[R]
The constructor function that is used to create derived objects.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Set.prototype\f[R] and shared by
all \f[CR]Set\f[R] instances.
.TP
\f[B]Set.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Set\f[R] instances, the initial value is the \f[CR]Set\f[R]
constructor.
.TP
\f[B]Set.prototype.size\f[R]
Returns the number of values in the \f[CR]Set\f[R] object.
.TP
\f[B]Set.prototype[\[at]\[at]toStringTag]\f[R]
The initial value of the \f[CR]\[at]\[at]toStringTag\f[R] property is
the string \f[CR]\[dq]Set\[dq]\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]Set.prototype.add()\f[R]
Inserts a new element with a specified value in to a \f[CR]Set\f[R]
object, if there isn\[cq]t an element with the same value already in the
\f[CR]Set\f[R].
.TP
\f[B]Set.prototype.clear()\f[R]
Removes all elements from the \f[CR]Set\f[R] object.
.TP
\f[B]Set.prototype.delete()\f[R]
Removes the element associated to the \f[CR]value\f[R] and returns a
boolean asserting whether an element was successfully removed or not.
\f[CR]Set.prototype.has(value)\f[R] will return \f[CR]false\f[R]
afterwards.
.TP
\f[B]Set.prototype.difference()\f[R]
Takes a set and returns a new set containing elements in this set but
not in the given set.
.TP
\f[B]Set.prototype.entries()\f[R]
Returns a new iterator object that contains \f[B]an array of
\f[CB][value, value]\f[B]\f[R] for each element in the \f[CR]Set\f[R]
object, in insertion order.
This is similar to the \f[CR]Map\f[R] object, so that each entry\[cq]s
\f[I]key\f[R] is the same as its \f[I]value\f[R] for a \f[CR]Set\f[R].
.TP
\f[B]Set.prototype.forEach()\f[R]
Calls \f[CR]callbackFn\f[R] once for each value present in the
\f[CR]Set\f[R] object, in insertion order.
If a \f[CR]thisArg\f[R] parameter is provided, it will be used as the
\f[CR]this\f[R] value for each invocation of \f[CR]callbackFn\f[R].
.TP
\f[B]Set.prototype.has()\f[R]
Returns a boolean asserting whether an element is present with the given
value in the \f[CR]Set\f[R] object or not.
.TP
\f[B]Set.prototype.intersection()\f[R]
Takes a set and returns a new set containing elements in both this set
and the given set.
.TP
\f[B]Set.prototype.isDisjointFrom()\f[R]
Takes a set and returns a boolean indicating if this set has no elements
in common with the given set.
.TP
\f[B]Set.prototype.isSubsetOf()\f[R]
Takes a set and returns a boolean indicating if all elements of this set
are in the given set.
.TP
\f[B]Set.prototype.isSupersetOf()\f[R]
Takes a set and returns a boolean indicating if all elements of the
given set are in this set.
.TP
\f[B]Set.prototype.keys()\f[R]
An alias for \f[CR]Set.prototype.values()\f[R].
.TP
\f[B]Set.prototype.symmetricDifference()\f[R]
Takes a set and returns a new set containing elements which are in
either this set or the given set, but not in both.
.TP
\f[B]Set.prototype.union()\f[R]
Takes a set and returns a new set containing elements which are in
either or both of this set and the given set.
.TP
\f[B]Set.prototype.values()\f[R]
Returns a new iterator object that yields the \f[B]values\f[R] for each
element in the \f[CR]Set\f[R] object in insertion order.
.TP
\f[B]Set.prototype[\[at]\[at]iterator]()\f[R]
Returns a new iterator object that yields the \f[B]values\f[R] for each
element in the \f[CR]Set\f[R] object in insertion order.
.SH EXAMPLES
.SS Using the Set object
.IP
.EX
\f[B]const\f[R] mySet1 = \f[B]new\f[R] Set();

mySet1.add(1); \f[I]// Set(1) { 1 }\f[R]
mySet1.add(5); \f[I]// Set(2) { 1, 5 }\f[R]
mySet1.add(5); \f[I]// Set(2) { 1, 5 }\f[R]
mySet1.add(\[dq]some text\[dq]); \f[I]// Set(3) { 1, 5, \[aq]some text\[aq] }\f[R]
\f[B]const\f[R] o = { a: 1, b: 2 };
mySet1.add(o);

mySet1.add({ a: 1, b: 2 }); \f[I]// o is referencing a different object, so this is okay\f[R]

mySet1.has(1); \f[I]// true\f[R]
mySet1.has(3); \f[I]// false, since 3 has not been added to the set\f[R]
mySet1.has(5); \f[I]// true\f[R]
mySet1.has(Math.sqrt(25)); \f[I]// true\f[R]
mySet1.has(\[dq]Some Text\[dq].toLowerCase()); \f[I]// true\f[R]
mySet1.has(o); \f[I]// true\f[R]

mySet1.size; \f[I]// 5\f[R]

mySet1.delete(5); \f[I]// removes 5 from the set\f[R]
mySet1.has(5); \f[I]// false, 5 has been removed\f[R]

mySet1.size; \f[I]// 4, since we just removed one value\f[R]

mySet1.add(5); \f[I]// Set(5) { 1, \[aq]some text\[aq], {...}, {...}, 5 } \- a previously deleted item will be added as a new item, it will not retain its original position before deletion\f[R]

console.log(mySet1); \f[I]// Set(5) { 1, \[dq]some text\[dq], {\&...}, {\&...}, 5 }\f[R]
.EE
.SS Iterating sets
The iteration over a set visits elements in insertion order.
.IP
.EX
\f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] mySet1) {
  console.log(item);
}
\f[I]// 1, \[dq]some text\[dq], { \[dq]a\[dq]: 1, \[dq]b\[dq]: 2 }, { \[dq]a\[dq]: 1, \[dq]b\[dq]: 2 }, 5\f[R]

\f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] mySet1.keys()) {
  console.log(item);
}
\f[I]// 1, \[dq]some text\[dq], { \[dq]a\[dq]: 1, \[dq]b\[dq]: 2 }, { \[dq]a\[dq]: 1, \[dq]b\[dq]: 2 }, 5\f[R]

\f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] mySet1.values()) {
  console.log(item);
}
\f[I]// 1, \[dq]some text\[dq], { \[dq]a\[dq]: 1, \[dq]b\[dq]: 2 }, { \[dq]a\[dq]: 1, \[dq]b\[dq]: 2 }, 5\f[R]

\f[I]// key and value are the same here\f[R]
\f[B]for\f[R] (\f[B]const\f[R] [key, value] \f[B]of\f[R] mySet1.entries()) {
  console.log(key);
}
\f[I]// 1, \[dq]some text\[dq], { \[dq]a\[dq]: 1, \[dq]b\[dq]: 2 }, { \[dq]a\[dq]: 1, \[dq]b\[dq]: 2 }, 5\f[R]

\f[I]// Convert Set object to an Array object, with Array.from\f[R]
\f[B]const\f[R] myArr = Array.from(mySet1); \f[I]// [1, \[dq]some text\[dq], {\[dq]a\[dq]: 1, \[dq]b\[dq]: 2}, {\[dq]a\[dq]: 1, \[dq]b\[dq]: 2}, 5]\f[R]

\f[I]// the following will also work if run in an HTML document\f[R]
mySet1.add(document.body);
mySet1.has(document.querySelector(\[dq]body\[dq])); \f[I]// true\f[R]

\f[I]// converting between Set and Array\f[R]
\f[B]const\f[R] mySet2 = \f[B]new\f[R] Set([1, 2, 3, 4]);
console.log(mySet2.size); \f[I]// 4\f[R]
console.log([...mySet2]); \f[I]// [1, 2, 3, 4]\f[R]

\f[I]// intersect can be simulated via\f[R]
\f[B]const\f[R] intersection = \f[B]new\f[R] Set([...mySet1].filter((x) \f[B]=>\f[R] mySet2.has(x)));

\f[I]// difference can be simulated via\f[R]
\f[B]const\f[R] difference = \f[B]new\f[R] Set([...mySet1].filter((x) \f[B]=>\f[R] !mySet2.has(x)));

\f[I]// Iterate set entries with forEach()\f[R]
mySet2.forEach((value) \f[B]=>\f[R] {
  console.log(value);
});
\f[I]// 1\f[R]
\f[I]// 2\f[R]
\f[I]// 3\f[R]
\f[I]// 4\f[R]
.EE
.SS Implementing basic set operations
.IP
.EX
\f[B]function\f[R] isSuperset(\f[B]set\f[R], subset) {
  \f[B]for\f[R] (\f[B]const\f[R] elem \f[B]of\f[R] subset) {
    \f[B]if\f[R] (!\f[B]set\f[R].has(elem)) {
      \f[B]return\f[R] \f[B]false\f[R];
    }
  }
  \f[B]return\f[R] \f[B]true\f[R];
}

\f[B]function\f[R] union(setA, setB) {
  \f[B]const\f[R] _union = \f[B]new\f[R] Set(setA);
  \f[B]for\f[R] (\f[B]const\f[R] elem \f[B]of\f[R] setB) {
    _union.add(elem);
  }
  \f[B]return\f[R] _union;
}

\f[B]function\f[R] intersection(setA, setB) {
  \f[B]const\f[R] _intersection = \f[B]new\f[R] Set();
  \f[B]for\f[R] (\f[B]const\f[R] elem \f[B]of\f[R] setB) {
    \f[B]if\f[R] (setA.has(elem)) {
      _intersection.add(elem);
    }
  }
  \f[B]return\f[R] _intersection;
}

\f[B]function\f[R] symmetricDifference(setA, setB) {
  \f[B]const\f[R] _difference = \f[B]new\f[R] Set(setA);
  \f[B]for\f[R] (\f[B]const\f[R] elem \f[B]of\f[R] setB) {
    \f[B]if\f[R] (_difference.has(elem)) {
      _difference.delete(elem);
    } \f[B]else\f[R] {
      _difference.add(elem);
    }
  }
  \f[B]return\f[R] _difference;
}

\f[B]function\f[R] difference(setA, setB) {
  \f[B]const\f[R] _difference = \f[B]new\f[R] Set(setA);
  \f[B]for\f[R] (\f[B]const\f[R] elem \f[B]of\f[R] setB) {
    _difference.delete(elem);
  }
  \f[B]return\f[R] _difference;
}

\f[I]// Examples\f[R]
\f[B]const\f[R] setA = \f[B]new\f[R] Set([1, 2, 3, 4]);
\f[B]const\f[R] setB = \f[B]new\f[R] Set([2, 3]);
\f[B]const\f[R] setC = \f[B]new\f[R] Set([3, 4, 5, 6]);

isSuperset(setA, setB); \f[I]// returns true\f[R]
union(setA, setC); \f[I]// returns Set {1, 2, 3, 4, 5, 6}\f[R]
intersection(setA, setC); \f[I]// returns Set {3, 4}\f[R]
symmetricDifference(setA, setC); \f[I]// returns Set {1, 2, 5, 6}\f[R]
difference(setA, setC); \f[I]// returns Set {1, 2}\f[R]
.EE
.SS Relation to arrays
.IP
.EX
\f[B]const\f[R] myArray = [\[dq]value1\[dq], \[dq]value2\[dq], \[dq]value3\[dq]];

\f[I]// Use the regular Set constructor to transform an Array into a Set\f[R]
\f[B]const\f[R] mySet = \f[B]new\f[R] Set(myArray);

mySet.has(\[dq]value1\[dq]); \f[I]// returns true\f[R]

\f[I]// Use the spread syntax to transform a set into an Array.\f[R]
console.log([...mySet]); \f[I]// Will show you exactly the same Array as myArray\f[R]
.EE
.SS Remove duplicate elements from an array
.IP
.EX
\f[I]// Use to remove duplicate elements from an array\f[R]
\f[B]const\f[R] numbers = [2, 13, 4, 4, 2, 13, 13, 4, 4, 5, 5, 6, 6, 7, 5, 32, 13, 4, 5];

console.log([...\f[B]new\f[R] Set(numbers)]); \f[I]// [2, 13, 4, 5, 6, 7, 32]\f[R]
.EE
.SS Relation to strings
.IP
.EX
\f[I]// Case sensitive (set will contain \[dq]F\[dq] and \[dq]f\[dq])\f[R]
\f[B]new\f[R] Set(\[dq]Firefox\[dq]); \f[I]// Set(7) [ \[dq]F\[dq], \[dq]i\[dq], \[dq]r\[dq], \[dq]e\[dq], \[dq]f\[dq], \[dq]o\[dq], \[dq]x\[dq] ]\f[R]

\f[I]// Duplicate omission (\[dq]f\[dq] occurs twice in the string but set will contain only one)\f[R]
\f[B]new\f[R] Set(\[dq]firefox\[dq]); \f[I]// Set(6) [ \[dq]f\[dq], \[dq]i\[dq], \[dq]r\[dq], \[dq]e\[dq], \[dq]o\[dq], \[dq]x\[dq] ]\f[R]
.EE
.SS Use a set to ensure the uniqueness of a list of values
.IP
.EX
\f[B]const\f[R] array = Array.from(document.querySelectorAll(\[dq][id]\[dq])).map((e) \f[B]=>\f[R] e.id);

\f[B]const\f[R] \f[B]set\f[R] = \f[B]new\f[R] Set(array);
console.assert(\f[B]set\f[R].size === array.length);
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#set
Polyfill of \f[CR]Set\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Map\f[R]
.IP \[bu] 2
\f[CR]WeakMap\f[R]
.IP \[bu] 2
\f[CR]WeakSet\f[R]
