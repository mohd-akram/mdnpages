.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUADAPTER.LIMITS" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUAdapter.limits \- GPUAdapter: limits property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]limits\f[B]\f[R] read\-only property of the
\f[CR]GPUAdapter\f[R] interface returns a \f[CR]GPUSupportedLimits\f[R]
object that describes the limits supported by the adapter.
.PP
You should note that, rather than reporting the exact limits of each
GPU, browsers will likely report different tier values of different
limits to reduce the unique information available to drive\-by
fingerprinting.
For example, the tiers of a certain limit might be 2048, 8192, and
32768.
If your GPU\(cqs actual limit is 16384, the browser will still report
8192.
.PP
Given that different browsers will handle this differently and the tier
values may change over time, it is hard to provide an accurate account
of what limit values to expect \(em thorough testing is advised.
.SH VALUE
A \f[CR]GPUSupportedLimits\f[R] object instance.
.SH EXAMPLES
In the following code we query the \f[CR]GPUAdapter.limits\f[R] value of
\f[CR]maxBindGroups\f[R] to see if it is equal to or greater than 6.
Our theoretical example app ideally needs 6 bind groups, so if the
returned value is >= 6, we add a maximum limit of 6 to the
\f[CR]requiredLimits\f[R] object, and request a device with that limit
requirement using \f[CR]GPUAdapter.requestDevice()\f[R]:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();
  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[B]const\f[R] requiredLimits = {};

  \f[I]// App ideally needs 6 bind groups, so we\(aqll try to request what the app needs\f[R]
  \f[B]if\f[R] (adapter.limits.maxBindGroups >= 6) {
    requiredLimits.maxBindGroups = 6;
  }

  \f[B]const\f[R] device = \f[B]await\f[R] adapter.requestDevice({
    requiredLimits,
  });

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
