.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CanvasRenderingContext2D.scale" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.scale \- CanvasRenderingContext2D: scale()
method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.scale()\f[B]\f[R] method of the
Canvas 2D API adds a scaling transformation to the canvas units
horizontally and/or vertically.
.PP
By default, one unit on the canvas is exactly one pixel.
A scaling transformation modifies this behavior.
For instance, a scaling factor of 0.5 results in a unit size of 0.5
pixels; shapes are thus drawn at half the normal size.
Similarly, a scaling factor of 2.0 increases the unit size so that one
unit becomes two pixels; shapes are thus drawn at twice the normal size.
.SH SYNTAX
.IP
.EX
scale(x, y)
.EE
.SS Parameters
.TP
\f[B]x\f[R]
Scaling factor in the horizontal direction.
A negative value flips pixels across the vertical axis.
A value of \f[CR]1\f[R] results in no horizontal scaling.
.TP
\f[B]y\f[R]
Scaling factor in the vertical direction.
A negative value flips pixels across the horizontal axis.
A value of \f[CR]1\f[R] results in no vertical scaling.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Scaling a shape
This example draws a scaled rectangle.
A non\-scaled rectangle is then drawn for comparison.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
The rectangle has a specified width of 8 and a height of 20.
The transformation matrix scales it by 9x horizontally and by 3x
vertically.
Thus, its final size is a width of 72 and a height of 60.
.PP
Notice that its position on the canvas also changes.
Since its specified corner is (10, 10), its rendered corner becomes (90,
30).
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

\f[I]// Scaled rectangle\f[R]
ctx.scale(9, 3);
ctx.fillStyle = \[dq]red\[dq];
ctx.fillRect(10, 10, 8, 20);

\f[I]// Reset current transformation matrix to the identity matrix\f[R]
ctx.setTransform(1, 0, 0, 1, 0, 0);

\f[I]// Non\-scaled rectangle\f[R]
ctx.fillStyle = \[dq]gray\[dq];
ctx.fillRect(10, 10, 8, 20);
.EE
.SS Result
The scaled rectangle is red, and the non\-scaled rectangle is gray.
.SS Flipping things horizontally or vertically
You can use \f[CR]scale(\-1, 1)\f[R] to flip the context horizontally
and \f[CR]scale(1, \-1)\f[R] to flip it vertically.
In this example, the words \[lq]Hello world!\[rq] are flipped
horizontally.
.PP
Note that the call to \f[CR]fillText()\f[R] specifies a negative x
coordinate.
This is to adjust for the negative scaling factor:
\f[CR]\-280 * \-1\f[R] becomes \f[CR]280\f[R], and text is drawn
leftwards from that point.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

ctx.scale(\-1, 1);
ctx.font = \[dq]48px serif\[dq];
ctx.fillText(\[dq]Hello world!\[dq], \-280, 90);
ctx.setTransform(1, 0, 0, 1, 0, 0);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
