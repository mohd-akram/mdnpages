.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMMANDENCODER.BEGINRENDERPASS" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUCommandEncoder.beginRenderPass \- GPUCommandEncoder:
beginRenderPass() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]beginRenderPass()\f[B]\f[R] method of the
\f[CR]GPUCommandEncoder\f[R] interface starts encoding a render pass,
returning a \f[CR]GPURenderPassEncoder\f[R] that can be used to control
rendering.
.SH SYNTAX
.IP
.EX
beginRenderPass(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]colorAttachments\f[R]
An array of objects (see Color attachment object structure) defining the
color attachments that will be output to when executing this render
pass.
.TP
\f[B]depthStencilAttachment\f[R] \f[I](optional)\f[R]
An object (see Depth/stencil attachment object structure) defining the
depth/stencil attachment that will be output to and tested against when
executing this render pass.
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]maxDrawCount\f[R] \f[I](optional)\f[R]
A number indicating the maximum number of draw calls that will be done
in the render pass.
This is used by some implementations to size work injected before the
render pass.
You should keep the default value \(em 50000000 \(em unless you know
that more draw calls will be done.
.TP
\f[B]occlusionQuerySet\f[R] \f[I](optional)\f[R]
The \f[CR]GPUQuerySet\f[R] that will store the occlusion query results
for this pass.
.TP
\f[B]timestampWrites\f[R] \f[I](optional)\f[R]
An array of objects defining where and when timestamp query values will
be written for this pass.
These objects have the following properties:
.RS
.TP
\f[B]querySet\f[R]
A \f[CR]GPUQuerySet\f[R] of type \f[CR]\(dqtimestamp\(dq\f[R] that the
timestamp query results will be written to.
.TP
\f[B]beginningOfPassWriteIndex\f[R]
A number specifying the query index in \f[CR]querySet\f[R] where the
timestamp at the beginning of the render pass will be written.
This is optional \- if not defined, no timestamp will be written for the
beginning of the pass.
.TP
\f[B]endOfPassWriteIndex\f[R]
A number specifying the query index in \f[CR]querySet\f[R] where the
timestamp at the end of the render pass will be written.
This is optional \- if not defined, no timestamp will be written for the
end of the pass.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]timestamp\-query\f[R] feature needs to be
enabled to use timestamp queries.
Timestamp query values are written in nanoseconds, but how the value is
determined is implementation\-defined.
.RE
.RE
.RE
.SS Color attachment object structure
Color attachment objects can have the following properties:
.TP
\f[B]clearValue\f[R] \f[I](optional)\f[R]
A color value to clear the \f[CR]view\f[R] texture to, prior to
executing the render pass.
This value is ignored if \f[CR]loadOp\f[R] is not set to
\f[CR]\(dqclear\(dq\f[R].
\f[CR]clearValue\f[R] takes an array or object representing the four
color components \f[CR]r\f[R], \f[CR]g\f[R], \f[CR]b\f[R], and
\f[CR]a\f[R] as decimals.
.RS
.PP
For example, you can pass an array like \f[CR][0.0, 0.5, 1.0, 1.0]\f[R],
or its equivalent object \f[CR]{ r: 0.0, g: 0.5, b: 1.0, a: 1.0 }\f[R].
.PP
If \f[CR]clearValue\f[R] is omitted, it defaults to
\f[CR]{ r: 0, g: 0, b: 0, a: 0 }\f[R].
.RE
.TP
\f[B]depthSlice\f[R] \f[I](optional)\f[R]
A number representing the index of the 3D depth slice that will be
output to for this color attachment, in the case of a 3D
\f[CR]GPUTextureView\f[R] \f[CR]view\f[R].
When specified, this allows WebGPU to render directly to slices of 3D
textures within render passes.
.TP
\f[B]loadOp\f[R]
An enumerated value indicating the load operation to perform on
\f[CR]view\f[R] prior to executing the render pass.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqclear\(dq\f[R]: Loads the \f[CR]clearValue\f[R] for this
attachment into the render pass.
.IP \(bu 2
\f[CR]\(dqload\(dq\f[R]: Loads the existing value for this attachment
into the render pass.
.RS
.PP
\f[B]Note:\f[R] It is recommended to always use \f[CR]\(dqclear\(dq\f[R]
in cases where the initial value doesn\(cqt matter, as it will give
better performance on some devices such as mobiles.
.RE
.RE
.TP
\f[B]storeOp\f[R]
An enumerated value indicating the store operation to perform on
\f[CR]view\f[R] after executing the render pass.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqdiscard\(dq\f[R]: Discards the resulting value of the render
pass for this attachment.
.IP \(bu 2
\f[CR]\(dqstore\(dq\f[R]: Stores the resulting value of the render pass
for this attachment.
.RE
.TP
\f[B]resolveTarget\f[R] \f[I](optional)\f[R]
A \f[CR]GPUTextureView\f[R] object representing the texture subresource
that will receive the resolved output for this color attachment if
\f[CR]view\f[R] is multisampled.
.TP
\f[B]view\f[R]
A \f[CR]GPUTextureView\f[R] object representing the texture subresource
that will be output to for this color attachment.
.RS
.RS
.PP
\f[B]Note:\f[R] Each color or depth/stencil attachment must be a unique
texture subresource, and texture subresources used as attachments cannot
be used inside the render pass.
.RE
.RE
.SS Depth/stencil attachment object structure
The \f[CR]depthStencilAttachment\f[R] object can have the following
properties:
.TP
\f[B]depthClearValue\f[R] \f[I](optional)\f[R]
A number indicating the value to clear \f[CR]view\f[R]\(cqs depth
component prior to executing the render pass.
This is ignored if \f[CR]depthLoadOp\f[R] is not set to
\f[CR]\(dqclear\(dq\f[R].
.RS
.PP
The value must be between 0.0 and 1.0, inclusive.
.RE
.TP
\f[B]depthLoadOp\f[R] \f[I](optional)\f[R]
An enumerated value indicating the load operation to perform on
\f[CR]view\f[R]\(cqs depth component prior to executing the render pass.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqclear\(dq\f[R]: Loads the \f[CR]clearValue\f[R] for this
attachment into the render pass.
.IP \(bu 2
\f[CR]\(dqload\(dq\f[R]: Loads the existing value for this attachment
into the render pass.
.RS
.PP
\f[B]Note:\f[R] It is recommended to always use \f[CR]\(dqclear\(dq\f[R]
in cases where the initial value doesn\(cqt matter, as it will give
better performance on some devices such as mobiles.
.RE
.RE
.TP
\f[B]depthReadOnly\f[R] \f[I](optional)\f[R]
A boolean.
Setting the value to \f[CR]true\f[R] causes the depth component of
\f[CR]view\f[R] to be read\-only.
If \f[CR]depthReadOnly\f[R] is omitted, it defaults to \f[CR]false\f[R].
.TP
\f[B]depthStoreOp\f[R] \f[I](optional)\f[R]
An enumerated value indicating the store operation to perform on
\f[CR]view\f[R]\(cqs depth component after executing the render pass.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqdiscard\(dq\f[R]: Discards the resulting value of the render
pass for this attachment.
.IP \(bu 2
\f[CR]\(dqstore\(dq\f[R]: Stores the resulting value of the render pass
for this attachment.
.RE
.TP
\f[B]stencilClearValue\f[R] \f[I](optional)\f[R]
A number indicating the value to clear \f[CR]view\f[R]\(cqs stencil
component to prior to executing the render pass.
This is ignored if \f[CR]stencilLoadOp\f[R] is not set to
\f[CR]\(dqclear\(dq\f[R].
.RS
.PP
If \f[CR]stencilClearValue\f[R] is omitted, it defaults to 0.
.RE
.TP
\f[B]stencilLoadOp\f[R] \f[I](optional)\f[R]
An enumerated value indicating the load operation to perform on
\f[CR]view\f[R]\(cqs stencil component prior to executing the render
pass.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqclear\(dq\f[R]: Loads the \f[CR]clearValue\f[R] for this
attachment into the render pass.
.IP \(bu 2
\f[CR]\(dqload\(dq\f[R]: Loads the existing value for this attachment
into the render pass.
.RS
.PP
\f[B]Note:\f[R] It is recommended to always use \f[CR]\(dqclear\(dq\f[R]
in cases where the initial value doesn\(cqt matter, as it will give
better performance on some devices such as mobiles.
.RE
.RE
.TP
\f[B]stencilReadOnly\f[R] \f[I](optional)\f[R]
A boolean.
Setting the value to \f[CR]true\f[R] causes the stencil component of
\f[CR]view\f[R] to be read\-only.
If \f[CR]stencilReadOnly\f[R] is omitted, it defaults to
\f[CR]false\f[R].
.TP
\f[B]stencilStoreOp\f[R] \f[I](optional)\f[R]
An enumerated value indicating the store operation to perform on
\f[CR]view\f[R]\(cqs stencil component after executing the render pass.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqdiscard\(dq\f[R]: Discards the resulting value of the render
pass for this attachment.
.IP \(bu 2
\f[CR]\(dqstore\(dq\f[R]: Stores the resulting value of the render pass
for this attachment.
.RE
.TP
\f[B]view\f[R]
A \f[CR]GPUTextureView\f[R] object representing the texture subresource
that will be output to and read from for this depth/stencil attachment.
.SS Return value
A \f[CR]GPURenderPassEncoder\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]beginRenderPass()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPURenderPassEncoder\f[R] is returned.
.PP
General:
.IP \(bu 2
\f[CR]colorAttachments.length\f[R] is less than or equal to the
\f[CR]GPUDevice\f[R]\(cqs \f[CR]maxColorAttachments\f[R] limit.
.IP \(bu 2
If \f[CR]colorAttachments\f[R] contains only \f[CR]null\f[R] values,
\f[CR]depthStencilAttachment\f[R] is provided.
.IP \(bu 2
All \f[CR]view\f[R]s in \f[CR]colorAttachments\f[R] and
\f[CR]depthStencilAttachment\f[R] have equal
\f[CR]GPUTexture.sampleCount\f[R] values and render extents
(\f[CR]GPUTexture.height\f[R], \f[CR]GPUTexture.width\f[R], and
\f[CR]GPUTexture.depthOrArrayLayers\f[R]).
.IP \(bu 2
If \f[CR]occlusionQuerySet\f[R] is set, the referenced
\f[CR]GPUQuerySet\f[R] has a \f[CR]type\f[R] of
\f[CR]\(dqocclusion\(dq\f[R].
.PP
For color attachment objects
.IP \(bu 2
The \f[CR]view\f[R] is renderable, and the \f[CR]view\f[R]\(cqs format
(i.e., specified in the descriptor of the originating
\f[CR]GPUTexture.createView()\f[R] call) is a color renderable format.
.IP \(bu 2
If \f[CR]resolveTarget\f[R] is provided:
.RS 2
.IP \(bu 2
The \f[CR]view\f[R]\(cqs originating \f[CR]GPUTexture\f[R]\(cqs
\f[CR]sampleCount\f[R] is greater than 1.
.IP \(bu 2
The \f[CR]resolveTarget\f[R]\(cqs originating \f[CR]GPUTexture\f[R]\(cqs
\f[CR]sampleCount\f[R] is 1.
.IP \(bu 2
\f[CR]resolveTarget\f[R] is renderable.
.IP \(bu 2
The sizes of the subresources that \f[CR]view\f[R] and
\f[CR]resolveTarget\f[R] provide a view of match.
.IP \(bu 2
\f[CR]view\f[R]\(cqs and \f[CR]resolveTarget\f[R]\(cqs formats match.
.RE
.IP \(bu 2
\c
.UR https://gpuweb.github.io/gpuweb/#abstract-opdef-validating-gpurenderpassdescriptors-color-attachment-bytes-per-sample
Color attachments bytes per sample
.UE \c
\ is less than or equal to the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]maxColorAttachmentBytesPerSample\f[R] limit.
.PP
For depth/stencil attachment objects:
.IP \(bu 2
The \f[CR]view\f[R] is renderable, and its format is a \c
.UR https://gpuweb.github.io/gpuweb/#depth-or-stencil-format
depth\-or\-stencil
.UE \c
\ format.
.IP \(bu 2
If \f[CR]depthLoadOp\f[R] is set to \f[CR]\(dqclear\(dq\f[R], a valid
\f[CR]depthClearValue\f[R] is provided.
.IP \(bu 2
If \f[CR]view\f[R]\(cqs format is a combined depth\-or\-stencil format,
\f[CR]depthReadOnly\f[R] matches \f[CR]stencilReadOnly\f[R].
.IP \(bu 2
If \f[CR]view\f[R]\(cqs format has a depth aspect, and
\f[CR]depthReadOnly\f[R] is \f[CR]false\f[R], \f[CR]depthLoadOp\f[R] and
\f[CR]depthStoreOp\f[R] are provided.
.IP \(bu 2
If \f[CR]view\f[R]\(cqs format has a depth aspect, and
\f[CR]depthReadOnly\f[R] is \f[CR]true\f[R], \f[CR]depthLoadOp\f[R] and
\f[CR]depthStoreOp\f[R] are not provided.
.IP \(bu 2
If \f[CR]view\f[R]\(cqs format has a stencil aspect, and
\f[CR]stencilReadOnly\f[R] is \f[CR]false\f[R], \f[CR]stencilLoadOp\f[R]
and \f[CR]stencilStoreOp\f[R] are provided.
.IP \(bu 2
If \f[CR]view\f[R]\(cqs format has a stencil aspect, and
\f[CR]stencilReadOnly\f[R] is \f[CR]true\f[R], \f[CR]stencilLoadOp\f[R]
and \f[CR]stencilStoreOp\f[R] are not provided.
.PP
For timestamp queries:
.IP \(bu 2
The \f[CR]timestamp\-query\f[R] feature is enabled in the
\f[CR]GPUDevice\f[R].
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, a number of commands are recorded via a \f[CR]GPUCommandEncoder\f[R].
These commands originate from the \f[CR]GPURenderPassEncoder\f[R]
created via \f[CR]beginRenderPass()\f[R] :
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create GPUCommandEncoder\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Create GPURenderPassDescriptor to tell WebGPU which texture to draw into, then initiate render pass\f[R]

\f[B]const\f[R] renderPassDescriptor = {
  colorAttachments: [
    {
      clearValue: clearColor,
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
      view: context.getCurrentTexture().createView(),
    },
  ],
};

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// Draw a triangle\f[R]

passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.draw(3);

\f[I]// End the render pass\f[R]

passEncoder.end();

device.queue.submit([commandEncoder.finish()]);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
