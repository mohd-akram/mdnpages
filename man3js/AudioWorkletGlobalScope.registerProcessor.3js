.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "AudioWorkletGlobalScope.registerProcessor" "JS" "March 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioWorkletGlobalScope.registerProcessor \- AudioWorkletGlobalScope:
registerProcessor() method
.SH SYNOPSIS
The \f[B]\f[CB]registerProcessor\f[B]\f[R] method of the
\f[CR]AudioWorkletGlobalScope\f[R] interface registers a class
constructor derived from \f[CR]AudioWorkletProcessor\f[R] interface
under a specified \f[I]name\f[R].
.SH SYNTAX
.IP
.EX
registerProcessor(name, processorCtor)
.EE
.SS Parameters
.TP
\f[B]name\f[R]
A string representing the name under which the processor will be
registered.
.TP
\f[B]processorCtor\f[R]
The constructor of a class derived from
\f[CR]AudioWorkletProcessor\f[R].
.RS
.PP
\f[B]Note:\f[R] A key\-value pair \f[CR]{ name: constructor }\f[R] is
saved internally in the \f[CR]AudioWorkletGlobalScope\f[R] once the
processor is registered.
The \f[I]name\f[R] is to be referred to when creating an
\f[CR]AudioWorkletNode\f[R] based on the registered processor.
A new processor by the given name is internally created and associated
with the new node.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown under the following conditions:
.RS
.IP \[bu] 2
The \f[I]name\f[R] is an empty string.
.IP \[bu] 2
A constructor under the given \f[I]name\f[R] is already registered.
Registering the same name twice is not allowed.
.RE
.TP
\f[B]TypeError\f[R]
Thrown under the following conditions:
.RS
.IP \[bu] 2
The \f[I]processorCtor\f[R] is not a callable constructor.
.IP \[bu] 2
The \f[CR]parameterDescriptors\f[R] property of the constructor exists
and doesn\[cq]t return an array of
\f[CR]AudioParamDescriptor\f[R]\-based objects.
.RE
.SH EXAMPLES
In this example we create a custom \f[CR]AudioWorkletNode\f[R] that
outputs silence.
.PP
First, we need to define a custom \f[CR]AudioWorkletProcessor\f[R] and
register it.
Note that this should be done in a separate file.
.IP
.EX
\f[I]// test\-processor.js\f[R]
\f[B]class\f[R] TestProcessor \f[B]extends\f[R] AudioWorkletProcessor {
  process(inputs, outputs, parameters) {
    \f[B]return\f[R] \f[B]true\f[R];
  }
}

registerProcessor(\[dq]test\-processor\[dq], TestProcessor);
.EE
.PP
Next, in our main script file we\[cq]ll load the processor, create an
instance of \f[CR]AudioWorkletNode\f[R] \[em] passing it the processor
name that we used when calling \f[CR]registerProcessor\f[R] \[em] and
connect it to an audio graph.
.IP
.EX
\f[B]const\f[R] audioContext = \f[B]new\f[R] AudioContext();
\f[B]await\f[R] audioContext.audioWorklet.addModule(\[dq]test\-processor.js\[dq]);
\f[B]const\f[R] node = \f[B]new\f[R] AudioWorkletNode(audioContext, \[dq]test\-processor\[dq]);
node.connect(audioContext.destination);
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
