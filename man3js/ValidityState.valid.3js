.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ValidityState.valid" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ValidityState.valid \- ValidityState: valid property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]valid\f[B]\f[R] property of the
\f[CR]ValidityState\f[R] interface indicates if the value of an
\f[CR]<input>\f[R] element meets all its validation constraints, and is
therefore considered to be valid.
.PP
If \f[CR]true\f[R], the element matches the \f[CR]:valid\f[R] CSS
pseudo\-class; otherwise the \f[CR]:invalid\f[R] CSS pseudo\-class
applies.
.SH VALUE
A boolean that is \f[CR]true\f[R] if the \f[CR]ValidityState\f[R] does
conform to all the constraints.
.SH EXAMPLES
.SS Displaying validity state
The following example checks the validity of a numeric input element.
A constraint has been added using the \f[CR]min\f[R] attribute which
sets a minimum value of \f[CR]18\f[R] for the input.
If the user enters any value that\[cq]s not a number greater than 17,
the element fails constraint validation, and the styles matching
\f[CR]input:invalid\f[R] are applied.
.IP
.EX
input\f[BI]:invalid\f[R] {
  \f[B]outline\f[R]: red solid 3px;
}
input\f[BI]:valid\f[R] {
  \f[B]outline\f[R]: palegreen solid 3px;
}
.EE
.IP
.EX
<\f[B]pre\f[R] id=\[dq]log\[dq]>Validation logged here...</\f[B]pre\f[R]>
<\f[B]input\f[R] type=\[dq]number\[dq] id=\[dq]age\[dq] min=\[dq]18\[dq] required />
.EE
.IP
.EX
\f[B]const\f[R] userInput = document.getElementById(\[dq]age\[dq]);
\f[B]const\f[R] logElement = document.getElementById(\[dq]log\[dq]);

\f[B]function\f[R] log(text) {
  logElement.innerText = text;
}

userInput.addEventListener(\[dq]input\[dq], () \f[B]=>\f[R] {
  userInput.reportValidity();
  \f[B]if\f[R] (userInput.validity.valid) {
    log(\[dq]Input OK\&...\[dq]);
  } \f[B]else\f[R] {
    log(\[dq]Bad input detected\&...\[dq]);
  }
});
.EE
.SH SEE ALSO
.IP \[bu] 2
ValidityState badInput, customError properties.
.IP \[bu] 2
Constraint validation
.IP \[bu] 2
Forms: Data form validation
