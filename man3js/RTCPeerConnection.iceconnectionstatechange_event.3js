.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RTCPeerConnection.iceconnectionstatechange_event" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.iceconnectionstatechange_event \- RTCPeerConnection:
iceconnectionstatechange event
.SH SYNOPSIS
An \f[B]\f[CB]iceconnectionstatechange\f[B]\f[R] event is sent to an
\f[CR]RTCPeerConnection\f[R] object each time the ICE connection state
changes during the negotiation process.
The new ICE connection state is available in the object\[cq]s
\f[CR]iceConnectionState\f[R] property.
.PP
One common task performed by the \f[CR]iceconnectionstatechange\f[R]
event listener is to trigger ICE restart when the state changes to
\f[CR]failed\f[R].
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]iceconnectionstatechange\[dq], (event) \f[B]=>\f[R] {});

oniceconnectionstatechange = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH USAGE NOTES
A successful connection attempt will typically involve the state
starting at \f[CR]new\f[R], then transitioning through
\f[CR]checking\f[R], then \f[CR]connected\f[R], and finally
\f[CR]completed\f[R].
However, under certain circumstances, the \f[CR]connected\f[R] state can
be skipped, causing a connection to transition directly from the
\f[CR]checking\f[R] state to \f[CR]completed\f[R].
This can happen when only the last checked candidate is successful, and
the gathering and end\-of\-candidates signals both occur before the
successful negotiation is completed.
.SS ICE connection state during ICE restarts
When an ICE restart is processed, the gathering and connectivity
checking process is started over from the beginning, which will cause
the \f[CR]iceConnectionState\f[R] to transition to \f[CR]connected\f[R]
if the ICE restart was triggered while in the \f[CR]completed\f[R]
state.
If ICE restart is initiated while in the transient
\f[CR]disconnected\f[R] state, the state transitions instead to
\f[CR]checking\f[R], essentially indicating that the negotiation is
ignoring the fact that the connection had been temporarily lost.
.SS State transitions as negotiation ends
When the negotiation process runs out of candidates to check, the ICE
connection transitions to one of two states.
If no suitable candidates were found, the state transitions to
\f[CR]failed\f[R].
If at least one suitable candidate was successfully identified, the
state transitions to \f[CR]completed\f[R].
The ICE layer makes this determination upon receiving the
end\-of\-candidates signal, which is provided by calling
\f[CR]addIceCandidate()\f[R] with a candidate whose \f[CR]candidate\f[R]
property is an empty string (\[lq]\[lq]), or by setting the
\f[CR]RTCPeerConnection\f[R] property \f[CR]canTrickleIceCandidates\f[R]
to \f[CR]false\f[R].
.SH EXAMPLES
An event handler for this event can be added using the
\f[CR]oniceconnectionstatechange\f[R] property or by using
\f[CR]addEventListener()\f[R] on the \f[CR]RTCPeerConnection\f[R].
.PP
In this example, a handler for \f[CR]iceconnectionstatechange\f[R] is
set up to update a call state indicator by using the value of
\f[CR]iceConnectionState\f[R] to create a string which corresponds to
the name of a CSS class that we can assign to the status indicator to
cause it to reflect the current state of the connection.
.IP
.EX
pc.addEventListener(
  \[dq]iceconnectionstatechange\[dq],
  (ev) \f[B]=>\f[R] {
    \f[B]let\f[R] stateElem = document.querySelector(\[dq]#call\-state\[dq]);
    stateElem.className = \[ga]${pc.iceConnectionState}\-state\[ga];
  },
  \f[B]false\f[R],
);
.EE
.PP
This can also be written as:
.IP
.EX
pc.oniceconnectionstatechange = (ev) \f[B]=>\f[R] {
  \f[B]let\f[R] stateElem = document.querySelector(\[dq]#call\-state\[dq]);
  stateElem.className = \[ga]${pc.iceConnectionState}\-state\[ga];
};
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
\f[CR]RTCPeerConnection\f[R]
.IP \[bu] 2
\f[CR]RTCPeerConnection.iceConnectionState\f[R]
