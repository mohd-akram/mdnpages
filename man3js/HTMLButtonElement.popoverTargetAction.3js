.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "HTMLButtonElement.popoverTargetAction" "JS" "November 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLButtonElement.popoverTargetAction \- HTMLButtonElement:
popoverTargetAction property
.SH SYNOPSIS
The \f[B]\f[CB]popoverTargetAction\f[B]\f[R] property of the
\f[CR]HTMLButtonElement\f[R] interface gets and sets the action to be
performed (\f[CR]\[dq]hide\[dq]\f[R], \f[CR]\[dq]show\[dq]\f[R], or
\f[CR]\[dq]toggle\[dq]\f[R]) on a popover element being controlled by a
button.
.PP
It reflects the value of the \f[CR]popovertargetaction\f[R] HTML
attribute.
.SH VALUE
An enumerated value.
Possible values are:
.TP
\f[B]\[dq]hide\[dq]\f[R]
The button will hide a shown popover.
If you try to hide an already hidden popover, no action will be taken.
.TP
\f[B]\[dq]show\[dq]\f[R]
The button will show a hidden popover.
If you try to show an already showing popover, no action will be taken.
.TP
\f[B]\[dq]toggle\[dq]\f[R]
The button will toggle a popover between showing and hidden.
If the popover is hidden, it will be shown; if the popover is showing,
it will be hidden.
If \f[CR]popoverTargetAction\f[R] is not set,
\f[CR]\[dq]toggle\[dq]\f[R] is the default action that will be performed
by the control button.
.SH EXAMPLES
.SS Toggle popover action with an auto popover
This example shows the basic use of the popover API with a
\[lq]toggle\[rq] value set for the \f[CR]popoverTargetAction\f[R]
property.
The \f[CR]popover\f[R] attribute is set to \f[CR]\[dq]auto\[dq]\f[R], so
the popover can be closed (\[lq]light\-dismissed\[rq]) by clicking
outside the popover area.
.PP
First we define an HTML \f[CR]<button>\f[R] element that we will use to
show and hide the popover, and a \f[CR]<div>\f[R] that will be the
popover.
In this case we don\[cq]t set the \f[CR]popovertargetaction\f[R] HTML
attribute on the \f[CR]<button>\f[R] or the \f[CR]popover\f[R] attribute
on the \f[CR]<div>\f[R], as we will be doing so programmatically.
.IP
.EX
<\f[B]button\f[R] id=\[dq]toggleBtn\[dq]>Toggle popover</\f[B]button\f[R]>
<\f[B]div\f[R] id=\[dq]mypopover\[dq]>This is popover content!</\f[B]div\f[R]>
.EE
.PP
The JavaScript code first gets a handle to the \f[CR]<div>\f[R] and
\f[CR]<button>\f[R] elements.
It then defines a function to check for popover support.
.IP
.EX
\f[B]const\f[R] popover = document.getElementById(\[dq]mypopover\[dq]);
\f[B]const\f[R] toggleBtn = document.getElementById(\[dq]toggleBtn\[dq]);

\f[I]// Check for popover API support.\f[R]
\f[B]function\f[R] supportsPopover() {
  \f[B]return\f[R] HTMLElement.prototype.hasOwnProperty(\[dq]popover\[dq]);
}
.EE
.PP
If the popover API is supported the code sets the \f[CR]<div>\f[R]
element\[cq]s \f[CR]popover\f[R] attribute to \f[CR]\[dq]auto\[dq]\f[R]
and makes it the popover target of the toggle button.
We then set the \f[CR]popoverTargetAction\f[R] of the
\f[CR]<button>\f[R] to \f[CR]\[dq]toggle\[dq]\f[R].
If the popover API is not supported we change the text content of the
\f[CR]<div>\f[R] element to state this, and hide the toggle button.
.IP
.EX
\f[B]if\f[R] (supportsPopover()) {
  \f[I]// Set the <div> element to be an auto popover\f[R]
  popover.popover = \[dq]auto\[dq];
  \f[I]// Set the button popover target to be the popover\f[R]
  toggleBtn.popoverTargetElement = popover;

  \f[I]// Set that the button toggles popover visibility\f[R]
  toggleBtn.popoverTargetAction = \[dq]toggle\[dq];
} \f[B]else\f[R] {
  popover.textContent = \[dq]Popover API not supported.\[dq];
  toggleBtn.hidden = \f[B]true\f[R];
}
.EE
.RS
.PP
\f[B]Note:\f[R] A popover element is hidden by default, but if the API
is not supported your element will display \[lq]as usual\[rq].
.RE
.PP
You can try out the example below.
Show and hide the popover by toggling the button.
The \f[CR]\[dq]auto\[dq]\f[R] popover can also be \[lq]light
dismissed\[rq] by selecting outside the bounds of the popover text.
.SS Show/hide popover action with a manual popover
This example shows how to use the \f[CR]\[dq]show\[dq]\f[R] and
\f[CR]\[dq]hide\[dq]\f[R] values of the \f[CR]popoverTargetAction\f[R]
attribute.
.PP
The code is near identical to the previous example, except that there
are two \f[CR]<button>\f[R] elements, and the popover is set to
\f[CR]\[dq]manual\[dq]\f[R].
A \f[CR]manual\f[R] popover must be closed explicitly, and not
\[lq]light dismissed\[rq] by selecting outside the popover area.
.IP
.EX
<\f[B]button\f[R] id=\[dq]showBtn\[dq]>Show popover</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]hideBtn\[dq]>Hide popover</\f[B]button\f[R]>
<\f[B]div\f[R] id=\[dq]mypopover\[dq]>This is popover content!</\f[B]div\f[R]>
.EE
.IP
.EX
\f[B]function\f[R] supportsPopover() {
  \f[B]return\f[R] HTMLElement.prototype.hasOwnProperty(\[dq]popover\[dq]);
}

\f[B]const\f[R] popover = document.getElementById(\[dq]mypopover\[dq]);
\f[B]const\f[R] showBtn = document.getElementById(\[dq]showBtn\[dq]);
\f[B]const\f[R] hideBtn = document.getElementById(\[dq]hideBtn\[dq]);

\f[B]const\f[R] popoverSupported = supportsPopover();

\f[B]if\f[R] (supportsPopover()) {
  \f[I]// Set the <div> element be a manual popover\f[R]
  popover.popover = \[dq]manual\[dq];

  \f[I]// Set the button targets to be the popover\f[R]
  showBtn.popoverTargetElement = popover;
  hideBtn.popoverTargetElement = popover;

  \f[I]// Set the target actions to be show/hide\f[R]
  showBtn.popoverTargetAction = \[dq]show\[dq];
  hideBtn.popoverTargetAction = \[dq]hide\[dq];
} \f[B]else\f[R] {
  popover.textContent = \[dq]Popover API not supported.\[dq];
  showBtn.hidden = \f[B]true\f[R];
  hideBtn.hidden = \f[B]true\f[R];
}
.EE
.PP
The popover can be displayed by selecting the \[lq]Show popover\[rq]
button, and dismissed using the \[lq]Hide popover\[rq] button.
.SH SEE ALSO
.IP \[bu] 2
Popover API
