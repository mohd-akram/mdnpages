.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Date.getTime" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.getTime \- Date.prototype.getTime()
.SH SYNOPSIS
The \f[B]\f[CB]getTime()\f[B]\f[R] method of \f[CR]Date\f[R] instances
returns the number of milliseconds for this date since the epoch, which
is defined as the midnight at the beginning of January 1, 1970, UTC.
.SH SYNTAX
.IP
.EX
getTime()
.EE
.SS Parameters
None.
.SS Return value
A number representing the timestamp, in milliseconds, of this date.
Returns \f[CR]NaN\f[R] if the date is invalid.
.SH DESCRIPTION
\f[CR]Date\f[R] objects are fundamentally represented by a timestamp,
and this method allows you to retrieve the timestamp.
You can use this method to help assign a date and time to another
\f[CR]Date\f[R] object.
This method is functionally equivalent to the \f[CR]valueOf()\f[R]
method.
.SS Reduced time precision
To offer protection against timing attacks and fingerprinting, the
precision of \f[CR]new Date().getTime()\f[R] might get rounded depending
on browser settings.
In Firefox, the \f[CR]privacy.reduceTimerPrecision\f[R] preference is
enabled by default and defaults to 2ms.
You can also enable \f[CR]privacy.resistFingerprinting\f[R], in which
case the precision will be 100ms or the value of
\f[CR]privacy.resistFingerprinting.reduceTimerPrecision.microseconds\f[R],
whichever is larger.
.IP
.EX
\f[I]// reduced time precision (2ms) in Firefox 60\f[R]
\f[B]new\f[R] Date().getTime();
\f[I]// 1519211809934\f[R]
\f[I]// 1519211810362\f[R]
\f[I]// 1519211811670\f[R]
\f[I]// \&...\f[R]

\f[I]// reduced time precision with \[ga]privacy.resistFingerprinting\[ga] enabled\f[R]
\f[B]new\f[R] Date().getTime();
\f[I]// 1519129853500\f[R]
\f[I]// 1519129858900\f[R]
\f[I]// 1519129864400\f[R]
\f[I]// \&...\f[R]
.EE
.SH EXAMPLES
.SS Using getTime() for copying dates
Constructing a date object with the identical time value.
.IP
.EX
\f[I]// Since month is zero based, birthday will be January 10, 1995\f[R]
\f[B]const\f[R] birthday = \f[B]new\f[R] Date(1994, 12, 10);
\f[B]const\f[R] copy = \f[B]new\f[R] Date();
copy.setTime(birthday.getTime());
.EE
.SS Measuring execution time
Subtracting two subsequent \f[CR]getTime()\f[R] calls on newly generated
\f[CR]Date\f[R] objects, give the time span between these two calls.
This can be used to calculate the executing time of some operations.
See also \f[CR]Date.now()\f[R] to prevent instantiating unnecessary
\f[CR]Date\f[R] objects.
.IP
.EX
\f[B]let\f[R] end, start;

start = \f[B]new\f[R] Date();
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < 1000; i++) {
  Math.sqrt(i);
}
end = \f[B]new\f[R] Date();

console.log(\[ga]Operation took ${end.getTime() \- start.getTime()} msec\[ga]);
.EE
.RS
.PP
\f[B]Note:\f[R] In browsers that support the Web Performance API\[cq]s
high\-resolution time feature, \f[CR]Performance.now()\f[R] can provide
more reliable and precise measurements of elapsed time than
\f[CR]Date.now()\f[R].
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Date.prototype.setTime()\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.valueOf()\f[R]
.IP \[bu] 2
\f[CR]Date.now()\f[R]
