.\" Automatically generated by Pandoc 3.4
.\"
.TH "PerformanceObserverEntryList.getEntries" "JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceObserverEntryList.getEntries \- PerformanceObserverEntryList:
getEntries() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]getEntries()\f[B]\f[R] method of the
\f[CR]PerformanceObserverEntryList\f[R] interface returns a list of
explicitly observed performance entry objects.
The list\[cq]s members are determined by the set of entry types
specified in the call to the \f[CR]observe()\f[R] method.
The list is available in the observer\[cq]s callback function (as the
first parameter in the callback).
.SH SYNTAX
.IP
.EX
getEntries()
.EE
.SS Return value
A list of explicitly observed \f[CR]PerformanceEntry\f[R] objects.
The items will be in chronological order based on the entries\[cq]
\f[CR]startTime\f[R].
If no objects are found, an empty list is returned.
.SH EXAMPLES
.SS Working with getEntries, getEntriesByName and getEntriesByType
The following example shows the difference between the
\f[CR]getEntries()\f[R], \f[CR]getEntriesByName()\f[R], and
\f[CR]getEntriesByType()\f[R] methods.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list, obs) \f[B]=>\f[R] {
  \f[I]// Log all entries\f[R]
  \f[B]let\f[R] perfEntries = list.getEntries();
  perfEntries.forEach((entry) \f[B]=>\f[R] {
    console.log(\[ga]${entry.name}\[aq]s duration: ${entry.duration}\[ga]);
  });

  \f[I]// Log entries named \[dq]debugging\[dq] with type \[dq]measure\[dq]\f[R]
  perfEntries = list.getEntriesByName(\[dq]debugging\[dq], \[dq]measure\[dq]);
  perfEntries.forEach((entry) \f[B]=>\f[R] {
    console.log(\[ga]${entry.name}\[aq]s duration: ${entry.duration}\[ga]);
  });

  \f[I]// Log entries with type \[dq]mark\[dq]\f[R]
  perfEntries = list.getEntriesByType(\[dq]mark\[dq]);
  perfEntries.forEach((entry) \f[B]=>\f[R] {
    console.log(\[ga]${entry.name}\[aq]s startTime: ${entry.startTime}\[ga]);
  });
});

\f[I]// Subscribe to various performance event types\f[R]
observer.observe({
  entryTypes: [\[dq]mark\[dq], \[dq]measure\[dq], \[dq]navigation\[dq], \[dq]resource\[dq]],
});
.EE
