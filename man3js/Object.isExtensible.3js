.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Object.isExtensible" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.isExtensible \- Object.isExtensible()
.SH SYNOPSIS
The \f[B]\f[CB]Object.isExtensible()\f[B]\f[R] static method determines
if an object is extensible (whether it can have new properties added to
it).
.SH SYNTAX
.IP
.EX
Object.isExtensible(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object which should be checked.
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not the given object is
extensible.
.SH DESCRIPTION
Objects are extensible by default: they can have new properties added to
them, and their \f[CR][[Prototype]]\f[R] can be re\-assigned.
An object can be marked as non\-extensible using one of
\f[CR]Object.preventExtensions()\f[R], \f[CR]Object.seal()\f[R],
\f[CR]Object.freeze()\f[R], or \f[CR]Reflect.preventExtensions()\f[R].
.SH EXAMPLES
.SS Using Object.isExtensible
.IP
.EX
\f[I]// New objects are extensible.\f[R]
\f[B]const\f[R] empty = {};
Object.isExtensible(empty); \f[I]// true\f[R]

\f[I]// They can be made un\-extensible\f[R]
Object.preventExtensions(empty);
Object.isExtensible(empty); \f[I]// false\f[R]

\f[I]// Sealed objects are by definition non\-extensible.\f[R]
\f[B]const\f[R] sealed = Object.seal({});
Object.isExtensible(sealed); \f[I]// false\f[R]

\f[I]// Frozen objects are also by definition non\-extensible.\f[R]
\f[B]const\f[R] frozen = Object.freeze({});
Object.isExtensible(frozen); \f[I]// false\f[R]
.EE
.SS Non\-object argument
In ES5, if the argument to this method is not an object (a primitive),
then it will cause a \f[CR]TypeError\f[R].
In ES2015, it will return \f[CR]false\f[R] without any errors if a
non\-object argument is passed, since primitives are, by definition,
immutable.
.IP
.EX
Object.isExtensible(1);
\f[I]// TypeError: 1 is not an object (ES5 code)\f[R]

Object.isExtensible(1);
\f[I]// false                         (ES2015 code)\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Object.preventExtensions()\f[R]
.IP \[bu] 2
\f[CR]Object.seal()\f[R]
.IP \[bu] 2
\f[CR]Object.isSealed()\f[R]
.IP \[bu] 2
\f[CR]Object.freeze()\f[R]
.IP \[bu] 2
\f[CR]Object.isFrozen()\f[R]
.IP \[bu] 2
\f[CR]Reflect.isExtensible()\f[R]
