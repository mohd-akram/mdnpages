.\" Automatically generated by Pandoc 3.4
.\"
.TH "HTMLSelectElement.add" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLSelectElement.add \- HTMLSelectElement: add() method
.SH SYNOPSIS
The \f[B]\f[CB]HTMLSelectElement.add()\f[B]\f[R] method adds an element
to the collection of \f[CR]option\f[R] elements for this
\f[CR]select\f[R] element.
.SH SYNTAX
.IP
.EX
add(item)
add(item, before)
.EE
.SS Parameters
.TP
\f[B]item\f[R]
An \f[CR]HTMLOptionElement\f[R] or \f[CR]HTMLOptGroupElement\f[R]
.TP
\f[B]before\f[R] \f[I](optional)\f[R]
An element of the collection, or an index of type \f[I]long\f[R],
representing the \f[I]item\f[R] should be inserted before.
If this parameter is \f[CR]null\f[R] (or the index does not exist), the
new element is appended to the end of the collection.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]HierarchyRequestError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[I]item\f[R] passed to the method is an ancestor of the
\f[CR]HTMLSelectElement\f[R].
.SH EXAMPLES
.SS Creating Elements from Scratch
.IP
.EX
\f[B]const\f[R] sel = document.createElement(\[dq]select\[dq]);
\f[B]const\f[R] opt1 = document.createElement(\[dq]option\[dq]);
\f[B]const\f[R] opt2 = document.createElement(\[dq]option\[dq]);

opt1.value = \[dq]1\[dq];
opt1.text = \[dq]Option: Value 1\[dq];

opt2.value = \[dq]2\[dq];
opt2.text = \[dq]Option: Value 2\[dq];

sel.add(opt1, \f[B]null\f[R]);
sel.add(opt2, \f[B]null\f[R]);

\f[I]/*\f[R]
\f[I]  Produces the following, conceptually:\f[R]

\f[I]  <select>\f[R]
\f[I]    <option value=\[dq]1\[dq]>Option: Value 1</option>\f[R]
\f[I]    <option value=\[dq]2\[dq]>Option: Value 2</option>\f[R]
\f[I]  </select>\f[R]
\f[I]*/\f[R]
.EE
.PP
The before parameter is optional.
So the following is accepted.
.IP
.EX
sel.add(opt1);
sel.add(opt2);
.EE
.SS Append to an Existing Collection
.IP
.EX
\f[B]const\f[R] sel = document.getElementById(\[dq]existingList\[dq]);

\f[B]const\f[R] opt = document.createElement(\[dq]option\[dq]);
opt.value = \[dq]3\[dq];
opt.text = \[dq]Option: Value 3\[dq];

sel.add(opt, \f[B]null\f[R]);

\f[I]/*\f[R]
\f[I]  Takes the existing following select object:\f[R]

\f[I]  <select id=\[dq]existingList\[dq]>\f[R]
\f[I]    <option value=\[dq]1\[dq]>Option: Value 1</option>\f[R]
\f[I]    <option value=\[dq]2\[dq]>Option: Value 2</option>\f[R]
\f[I]  </select>\f[R]

\f[I]  And changes it to:\f[R]

\f[I]  <select id=\[dq]existingList\[dq]>\f[R]
\f[I]    <option value=\[dq]1\[dq]>Option: Value 1</option>\f[R]
\f[I]    <option value=\[dq]2\[dq]>Option: Value 2</option>\f[R]
\f[I]    <option value=\[dq]3\[dq]>Option: Value 3</option>\f[R]
\f[I]  </select>\f[R]
\f[I]*/\f[R]
.EE
.PP
The before parameter is optional.
So the following is accepted.
.IP
.EX
sel.add(opt);
.EE
.SS Inserting to an Existing Collection
.IP
.EX
\f[B]const\f[R] sel = document.getElementById(\[dq]existingList\[dq]);

\f[B]const\f[R] opt = document.createElement(\[dq]option\[dq]);
opt.value = \[dq]3\[dq];
opt.text = \[dq]Option: Value 3\[dq];

sel.add(opt, sel.options[1]);

\f[I]/*\f[R]
\f[I]  Takes the existing following select object:\f[R]

\f[I]  <select id=\[dq]existingList\[dq]>\f[R]
\f[I]    <option value=\[dq]1\[dq]>Option: Value 1</option>\f[R]
\f[I]    <option value=\[dq]2\[dq]>Option: Value 2</option>\f[R]
\f[I]  </select>\f[R]

\f[I]  And changes it to:\f[R]

\f[I]  <select id=\[dq]existingList\[dq]>\f[R]
\f[I]    <option value=\[dq]1\[dq]>Option: Value 1</option>\f[R]
\f[I]    <option value=\[dq]3\[dq]>Option: Value 3</option>\f[R]
\f[I]    <option value=\[dq]2\[dq]>Option: Value 2</option>\f[R]
\f[I]  </select>\f[R]
\f[I]*/\f[R]
.EE
