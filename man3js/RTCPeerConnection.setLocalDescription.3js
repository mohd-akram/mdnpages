.\" Automatically generated by Pandoc 3.4
.\"
.TH "RTCPeerConnection.setLocalDescription" "JS" "September 27, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.setLocalDescription \- RTCPeerConnection:
setLocalDescription() method
.SH SYNOPSIS
The \f[B]\f[CB]setLocalDescription()\f[B]\f[R] method of the
\f[CR]RTCPeerConnection\f[R] interface changes the local description
associated with the connection.
This description specifies the properties of the local end of the
connection, including the media format.
The method takes a single parameter\[em]the session description\[em]and
it returns a \f[CR]Promise\f[R] which is fulfilled once the description
has been changed, asynchronously.
.PP
If \f[CR]setLocalDescription()\f[R] is called while a connection is
already in place, it means renegotiation is underway (possibly to adapt
to changing network conditions).
Because descriptions will be exchanged until the two peers agree on a
configuration, the description submitted by calling
\f[CR]setLocalDescription()\f[R] does not immediately take effect.
Instead, the current connection configuration remains in place until
negotiation is complete.
Only then does the agreed\-upon configuration take effect.
.SH SYNTAX
.IP
.EX
setLocalDescription()
setLocalDescription(sessionDescription)

setLocalDescription(sessionDescription, successCallback, errorCallback) // deprecated
.EE
.SS Parameters
.TP
\f[B]sessionDescription\f[R] \f[I](optional)\f[R]
An object which specifies the configuration to be applied to the local
end of the connection.
It should contain the following properties:
.RS
.TP
\f[B]type\f[R] \f[I](optional)\f[R]
A string indicating the type of the session description.
If you don\[cq]t explicitly provide a session description, the WebRTC
runtime will try to handle it correctly.
If the signaling state is one of \f[CR]stable\f[R],
\f[CR]have\-local\-offer\f[R], or \f[CR]have\-remote\-pranswer\f[R], the
WebRTC runtime automatically creates a new offer and sets that as the
new local description.
Otherwise, \f[CR]setLocalDescription()\f[R] creates an answer, which
becomes the new local description.
.TP
\f[B]sdp\f[R] \f[I](optional)\f[R]
A string containing the SDP describing the session.
If sdp is not provided, it defaults to an empty string.
If \f[CR]type\f[R] is \f[CR]\[dq]rollback\[dq]\f[R], \f[CR]sdp\f[R] must
be null or an empty string.
.PP
If the description is omitted, the WebRTC runtime tries to automatically
do the right thing.
.PP
You can also pass an actual \f[CR]RTCSessionDescription\f[R] instance,
but there\[cq]s no difference.
For this reason, the \f[CR]RTCSessionDescription\f[R] constructor is
deprecated.
.RE
.PP
In older code and documentation, you may see a callback\-based version
of this function used.
This has been deprecated and its use is \f[B]strongly\f[R] discouraged,
as it will be removed in the future.
You should update any existing code to use the \f[CR]Promise\f[R]\-based
version of \f[CR]setLocalDescription()\f[R] instead.
The parameters for the older form of \f[CR]setLocalDescription()\f[R]
are described below, to aid in updating existing code.
.TP
\f[B]successCallback\f[R] \f[I](deprecated)\f[R]
A JavaScript \f[CR]Function\f[R] which accepts no input parameters to be
called once the description has been successfully set.
At that time, the offer can be sent to a remote peer via the signaling
server.
.TP
\f[B]errorCallback\f[R] \f[I](deprecated)\f[R]
A function matching the signature
\f[CR]RTCPeerConnectionErrorCallback\f[R] which gets called if the
description can\[cq]t be set.
It is passed a single \f[CR]DOMException\f[R] object explaining why the
request failed.
.PP
This deprecated form of the method returns instantaneously without
waiting for the actual setting to be done: in case of success, the
\f[CR]successCallback\f[R] will be called; in case of failure, the
\f[CR]errorCallback\f[R] will be called.
.SS Return value
A \f[CR]Promise\f[R] which is fulfilled once the value of
\f[CR]RTCPeerConnection.localDescription\f[R] is successfully changed or
rejected if the change cannot be applied (for example, if the specified
description is incompatible with one or both of the peers on the
connection).
The promise\[cq]s fulfillment handler receives no input parameters.
.RS
.PP
\f[B]Note:\f[R] The process of changing descriptions actually involves
intermediary steps handled by the WebRTC layer to ensure that an active
connection can be changed without losing the connection if the change
does not succeed.
See Pending and current descriptions in the WebRTC Connectivity page for
more details on this process.
.RE
.SS Deprecated exceptions
When using the deprecated callback\-based version of
\f[CR]setLocalDescription()\f[R], the following exceptions may occur:
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R] \f[I](deprecated)\f[R]
Thrown if the connection\[cq]s \f[CR]signalingState\f[R] is
\f[CR]\[dq]closed\[dq]\f[R], indicating that the connection is not
currently open, so negotiation cannot take place.
.TP
\f[B]InvalidSessionDescriptionError\f[R] \f[B]DOMException\f[R] \f[I](deprecated)\f[R]
Thrown if the \f[CR]sessionDescription\f[R] parameter is invalid.
.SH EXAMPLES
.SS Implicit descriptions
One of the advantages of the parameter\-free form of
\f[CR]setLocalDescription()\f[R] is that it lets you simplify your
negotiation code substantially.
This is all your \f[CR]negotiationneeded\f[R] event handler needs to
look like, for the most part.
Just add the signaling server code, which here is represented by the
call to \f[CR]signalRemotePeer()\f[R].
.IP
.EX
pc.addEventListener(\[dq]negotiationneeded\[dq], \f[B]async\f[R] (event) \f[B]=>\f[R] {
  \f[B]await\f[R] pc.setLocalDescription();
  signalRemotePeer({ description: pc.localDescription });
});
.EE
.PP
Other than error handling, that\[cq]s about it!
.SS Providing your own offer or answer
The example below shows the implementation of a handler for the
\f[CR]negotiationneeded\f[R] event that explicitly creates an offer,
rather than letting \f[CR]setLocalDescription()\f[R] do it.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] handleNegotiationNeededEvent() {
  \f[B]try\f[R] {
    \f[B]const\f[R] offer = \f[B]await\f[R] pc.createOffer();
    pc.setLocalDescription(offer);
    signalRemotePeer({ description: pc.localDescription });
  } \f[B]catch\f[R] (err) {
    window.reportError(err);
  }
}
.EE
.PP
This begins by creating an offer by calling \f[CR]createOffer()\f[R];
when that succeeds, we call \f[CR]setLocalDescription()\f[R].
We can then send the newly\-created offer along to the other peer using
the signaling server, which here is done by calling a function called
\f[CR]signalRemotePeer()\f[R].
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
\f[CR]RTCSessionDescription\f[R]
