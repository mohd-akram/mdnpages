.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "URLSearchParams.has" "JS" "July 2, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
URLSearchParams.has \- URLSearchParams: has() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]has()\f[B]\f[R] method of the \f[CR]URLSearchParams\f[R]
interface returns a boolean value that indicates whether the specified
parameter is in the search parameters.
.PP
A parameter name and optional value are used to match parameters.
If only a parameter name is specified, then the method will return
\f[CR]true\f[R] if any parameters in the query string match the name,
and \f[CR]false\f[R] otherwise.
If both a parameter name and value are specified, then the method will
return \f[CR]true\f[R] if a parameter matches both the name and value.
.SH SYNTAX
.IP
.EX
has(name)
has(name, value)
.EE
.SS Parameters
.TP
\f[B]name\f[R]
The name of the parameter to match.
.TP
\f[B]value\f[R]
The value of the parameter, along with the given name, to match.
.SS Return value
A boolean value.
.SH EXAMPLES
.SS Check for parameter with specified name
This example shows how to check if the query string has any parameters
with a particular name.
.IP
.EX
\f[B]const\f[R] url = \f[B]new\f[R] URL(\[dq]https://example.com?foo=1&bar=2&foo=3\[dq]);
\f[B]const\f[R] params = \f[B]new\f[R] URLSearchParams(url.search);

\f[I]// has() returns true if the parameter is in the query string\f[R]
console.log(\[ga]bar?:\[rs]t${params.has(\[dq]bar\[dq])}\[ga]);
console.log(\[ga]bark?:\[rs]t${params.has(\[dq]bark\[dq])}\[ga]);
console.log(\[ga]foo?:\[rs]t${params.has(\[dq]foo\[dq])}\[ga]);
.EE
.PP
The log below shows whether the parameters \f[CR]bar\f[R],
\f[CR]bark\f[R], and \f[CR]foo\f[R], are present in the query string.
.IP
.EX
bar?:  true
bark?: false
foo?:  true
.EE
.SS Check for parameter with specified name and value
This example shows how to check whether the query string has a parameter
that matches both a particular name and value.
.IP
.EX
\f[B]const\f[R] url = \f[B]new\f[R] URL(\[dq]https://example.com?foo=1&bar=2&foo=3\[dq]);
\f[B]const\f[R] params = \f[B]new\f[R] URLSearchParams(url.search);

\f[I]// has() returns true if a parameter with the matching name and value is in the query string\f[R]
console.log(\[ga]bar=1?:\[rs]t${params.has(\[dq]bar\[dq], \[dq]1\[dq])}\[ga]);
console.log(\[ga]bar=2?:\[rs]t${params.has(\[dq]bar\[dq], \[dq]2\[dq])}\[ga]);
console.log(\[ga]foo=4?:\[rs]t${params.has(\[dq]foo\[dq], \[dq]4\[dq])}\[ga]);
.EE
.PP
Only the second value above should be \f[CR]true\f[R], as only the
parameter name \f[CR]bar\f[R] with value \f[CR]2\f[R] is matched.
.IP
.EX
bar=1?: false
bar=2?: true
foo=4?: false
.EE
.PP
If your browser does not support the \f[CR]value\f[R] option the method
will match on the name, and all the results should be \f[CR]true\f[R].
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#url-and-urlsearchparams
Polyfill of \f[CR]URLSearchParams\f[R] in \f[CR]core\-js\f[R]
.UE \c
