.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REGEXP.GLOBAL" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.global \- RegExp.prototype.global
.SH SYNOPSIS
The \f[B]\f[CB]global\f[B]\f[R] accessor property of \f[CR]RegExp\f[R]
instances returns whether or not the \f[CR]g\f[R] flag is used with this
regular expression.
.IP
.EX
\f[B]const\f[R] regex1 = /foo/g;

console.log(regex1.global);
\f[I]// Expected output: true\f[R]

\f[B]const\f[R] regex2 = /bar/i;

console.log(regex2.global);
\f[I]// Expected output: false\f[R]
.EE
.SH DESCRIPTION
\f[CR]RegExp.prototype.global\f[R] has the value \f[CR]true\f[R] if the
\f[CR]g\f[R] flag was used; otherwise, \f[CR]false\f[R].
The \f[CR]g\f[R] flag indicates that the regular expression should be
tested against all possible matches in a string.
Each call to \f[CR]exec()\f[R] will update its \f[CR]lastIndex\f[R]
property, so that the next call to \f[CR]exec()\f[R] will start at the
next character.
.PP
Some methods, such as \f[CR]String.prototype.matchAll()\f[R] and
\f[CR]String.prototype.replaceAll()\f[R], will validate that, if the
parameter is a regex, it is global.
The regex\(cqs \f[CR][Symbol.match]()\f[R] and
\f[CR][Symbol.replace]()\f[R] methods (called by
\f[CR]String.prototype.match()\f[R] and
\f[CR]String.prototype.replace()\f[R]) would also have different
behaviors when the regex is global.
.PP
The set accessor of \f[CR]global\f[R] is \f[CR]undefined\f[R].
You cannot change this property directly.
.SH EXAMPLES
.SS Using global
.IP
.EX
\f[B]const\f[R] regex = /foo/g;
console.log(regex.global); \f[I]// true\f[R]

\f[B]const\f[R] str = \(dqfooexamplefoo\(dq;
\f[B]const\f[R] str1 = str.replace(regex, \(dq\(dq);
console.log(str1); \f[I]// example\f[R]

\f[B]const\f[R] regex1 = /foo/;
\f[B]const\f[R] str2 = str.replace(regex1, \(dq\(dq);
console.log(str2); \f[I]// examplefoo\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]RegExp.prototype.lastIndex\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.dotAll\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.hasIndices\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.ignoreCase\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.multiline\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.source\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.sticky\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.unicode\f[R]
