.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ReadableStreamDefaultReader.ReadableStreamDefaultReader" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStreamDefaultReader.ReadableStreamDefaultReader \-
ReadableStreamDefaultReader: ReadableStreamDefaultReader() constructor
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]ReadableStreamDefaultReader()\f[B]\f[R] constructor
creates and returns a \f[CR]ReadableStreamDefaultReader\f[R] object
instance.
.RS
.PP
\f[B]Note:\f[R] You generally wouldn\[cq]t use this constructor
manually; instead, you\[cq]d use the
\f[CR]ReadableStream.getReader()\f[R] method.
.RE
.SH SYNTAX
.IP
.EX
new ReadableStreamDefaultReader(stream)
.EE
.SS Parameters
.TP
\f[B]stream\f[R]
The \f[CR]ReadableStream\f[R] to be read.
.SS Return value
An instance of the \f[CR]ReadableStreamDefaultReader\f[R] object.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the supplied \f[CR]stream\f[R] parameter is not a
\f[CR]ReadableStream\f[R], or it is already locked for reading by
another reader.
.SH EXAMPLES
In the following simple example, a previously\-created custom
\f[CR]ReadableStream\f[R] is read using a
\f[CR]ReadableStreamDefaultReader\f[R] created using
\f[CR]getReader()\f[R].
(see our \c
.UR https://mdn.github.io/dom-examples/streams/simple-random-stream/
Simple random stream example
.UE \c
\ for the full code).
Each chunk is read sequentially and output to the UI, until the stream
has finished being read, at which point we return out of the recursive
function and print the entire stream to another part of the UI.
.IP
.EX
\f[B]function\f[R] fetchStream() {
  \f[B]const\f[R] reader = stream.getReader();
  \f[B]let\f[R] charsReceived = 0;

  \f[I]// read() returns a promise that resolves\f[R]
  \f[I]// when a value has been received\f[R]
  reader.read().then(\f[B]function\f[R] processText({ done, value }) {
    \f[I]// Result objects contain two properties:\f[R]
    \f[I]// done  \- true if the stream has already given you all its data.\f[R]
    \f[I]// value \- some data. Always undefined when done is true.\f[R]
    \f[B]if\f[R] (done) {
      console.log(\[dq]Stream complete\[dq]);
      para.textContent = result;
      \f[B]return\f[R];
    }

    \f[I]// value for fetch streams is a Uint8Array\f[R]
    charsReceived += value.length;
    \f[B]const\f[R] chunk = value;
    \f[B]let\f[R] listItem = document.createElement(\[dq]li\[dq]);
    listItem.textContent = \[ga]Received ${charsReceived} characters so far. Current chunk = ${chunk}\[ga];
    list2.appendChild(listItem);

    result += chunk;

    \f[I]// Read some more, and call this function again\f[R]
    \f[B]return\f[R] reader.read().then(processText);
  });
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Streams API concepts
.IP \[bu] 2
Using readable streams
.IP \[bu] 2
\f[CR]ReadableStream\f[R]
.IP \[bu] 2
\f[CR]ReadableStreamDefaultController\f[R]
