.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "CanvasRenderingContext2D.createPattern" "JS" "July 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.createPattern \- CanvasRenderingContext2D:
createPattern() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.createPattern()\f[B]\f[R] method
of the Canvas 2D API creates a pattern using the specified image and
repetition.
This method returns a \f[CR]CanvasPattern\f[R].
.PP
This method doesn\[cq]t draw anything to the canvas directly.
The pattern it creates must be assigned to the
\f[CR]CanvasRenderingContext2D.fillStyle\f[R] or
\f[CR]CanvasRenderingContext2D.strokeStyle\f[R] properties, after which
it is applied to any subsequent drawing.
.SH SYNTAX
.IP
.EX
createPattern(image, repetition)
.EE
.SS Parameters
.TP
\f[B]image\f[R]
An image to be used as the pattern\[cq]s image.
It can be any of the following:
.RS
.IP \[bu] 2
\f[CR]HTMLImageElement\f[R] (\f[CR]<img>\f[R])
.IP \[bu] 2
\f[CR]SVGImageElement\f[R] (\f[CR]<image>\f[R])
.IP \[bu] 2
\f[CR]HTMLVideoElement\f[R] (\f[CR]<video>\f[R], by using the capture of
the video)
.IP \[bu] 2
\f[CR]HTMLCanvasElement\f[R] (\f[CR]<canvas>\f[R])
.IP \[bu] 2
\f[CR]ImageBitmap\f[R]
.IP \[bu] 2
\f[CR]OffscreenCanvas\f[R]
.IP \[bu] 2
\f[CR]VideoFrame\f[R]
.RE
.TP
\f[B]repetition\f[R]
A string indicating how to repeat the pattern\[cq]s image.
Possible values are:
.RS
.IP \[bu] 2
\f[CR]\[dq]repeat\[dq]\f[R] (both directions)
.IP \[bu] 2
\f[CR]\[dq]repeat\-x\[dq]\f[R] (horizontal only)
.IP \[bu] 2
\f[CR]\[dq]repeat\-y\[dq]\f[R] (vertical only)
.IP \[bu] 2
\f[CR]\[dq]no\-repeat\[dq]\f[R] (neither direction)
.PP
A \f[CR]null\f[R] value is treated the same as the empty string
(\f[CR]\[dq]\[dq]\f[R]): both are synonyms of
\f[CR]\[dq]repeat\[dq]\f[R].
.RE
.SS Return value
.TP
\f[B]CanvasPattern\f[R]
An opaque object describing a pattern.
.PP
If the \f[CR]image\f[R] is not fully loaded
(\f[CR]HTMLImageElement.complete\f[R] is \f[CR]false\f[R]), then
\f[CR]null\f[R] is returned.
.SH EXAMPLES
.SS Creating a pattern from an image
This example uses the \f[CR]createPattern()\f[R] method to create a
\f[CR]CanvasPattern\f[R] with a repeating source image.
Once created, the pattern is assigned to the canvas context\[cq]s fill
style and applied to a rectangle.
.PP
The original image looks like this:
[IMAGE: A flowery pattern]
A flowery pattern
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq] width=\[dq]300\[dq] height=\[dq]300\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

\f[B]const\f[R] img = \f[B]new\f[R] Image();
img.src = \[dq]canvas_createpattern.png\[dq];
\f[I]// Only use the image after it\[aq]s loaded\f[R]
img.onload = () \f[B]=>\f[R] {
  \f[B]const\f[R] pattern = ctx.createPattern(img, \[dq]repeat\[dq]);
  ctx.fillStyle = pattern;
  ctx.fillRect(0, 0, 300, 300);
};
.EE
.SS Creating a pattern from a canvas
In this example we create a pattern from the contents of an offscreen
canvas.
We then apply it to the fill style of our primary canvas, and fill that
canvas with the pattern.
.SS JavaScript
.IP
.EX
\f[I]// Create a pattern, offscreen\f[R]
\f[B]const\f[R] patternCanvas = document.createElement(\[dq]canvas\[dq]);
\f[B]const\f[R] patternContext = patternCanvas.getContext(\[dq]2d\[dq]);

\f[I]// Give the pattern a width and height of 50\f[R]
patternCanvas.width = 50;
patternCanvas.height = 50;

\f[I]// Give the pattern a background color and draw an arc\f[R]
patternContext.fillStyle = \[dq]#fec\[dq];
patternContext.fillRect(0, 0, patternCanvas.width, patternCanvas.height);
patternContext.arc(0, 0, 50, 0, 0.5 * Math.PI);
patternContext.stroke();

\f[I]// Create our primary canvas and fill it with the pattern\f[R]
\f[B]const\f[R] canvas = document.createElement(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
\f[B]const\f[R] pattern = ctx.createPattern(patternCanvas, \[dq]repeat\[dq]);
ctx.fillStyle = pattern;
ctx.fillRect(0, 0, canvas.width, canvas.height);

\f[I]// Add our primary canvas to the webpage\f[R]
document.body.appendChild(canvas);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]CanvasPattern\f[R]
