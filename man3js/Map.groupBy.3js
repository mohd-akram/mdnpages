.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MAP.GROUPBY" "3JS" "March 7, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Map.groupBy \- Map.groupBy()
.SH SYNOPSIS
.RS
.PP
\f[B]Note:\f[R] In some versions of some browsers, this method was
implemented as the method \f[CR]Array.prototype.groupToMap()\f[R].
Due to web compatibility issues, it is now implemented as a static
method.
Check the browser compatibility table for details.
.RE
.PP
The \f[B]\f[CB]Map.groupBy()\f[B]\f[R] static method groups the elements
of a given iterable using the values returned by a provided callback
function.
The final returned \f[CR]Map\f[R] uses the unique values from the test
function as keys, which can be used to get the array of elements in each
group.
.PP
The method is primarily useful when grouping elements that are
associated with an object, and in particular when that object might
change over time.
If the object is invariant, you might instead represent it using a
string, and group elements with \f[CR]Object.groupBy()\f[R].
.IP
.EX
\f[B]const\f[R] inventory = [
  { name: \(dqasparagus\(dq, type: \(dqvegetables\(dq, quantity: 9 },
  { name: \(dqbananas\(dq, type: \(dqfruit\(dq, quantity: 5 },
  { name: \(dqgoat\(dq, type: \(dqmeat\(dq, quantity: 23 },
  { name: \(dqcherries\(dq, type: \(dqfruit\(dq, quantity: 12 },
  { name: \(dqfish\(dq, type: \(dqmeat\(dq, quantity: 22 },
];

\f[B]const\f[R] restock = { restock: \f[B]true\f[R] };
\f[B]const\f[R] sufficient = { restock: \f[B]false\f[R] };
\f[B]const\f[R] result = Map.groupBy(inventory, ({ quantity }) \f[B]=>\f[R]
  quantity < 6 ? restock : sufficient,
);
console.log(result.get(restock));
\f[I]// [{ name: \(dqbananas\(dq, type: \(dqfruit\(dq, quantity: 5 }]\f[R]
.EE
.SH SYNTAX
.IP
.EX
Map.groupBy(items, callbackFn)
.EE
.SS Parameters
.TP
\f[B]items\f[R]
An iterable (such as an \f[CR]Array\f[R]) whose elements will be
grouped.
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the iterable.
It should return a value (object or primitive) indicating the group of
the current element.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed.
.TP
\f[B]index\f[R]
The index of the current element being processed.
.RE
.SS Return value
A \f[CR]Map\f[R] object with keys for each group, each assigned to an
array containing the elements of the associated group.
.SH DESCRIPTION
\f[CR]Map.groupBy()\f[R] calls a provided \f[CR]callbackFn\f[R] function
once for each element in an iterable.
The callback function should return a value indicating the group of the
associated element.
The values returned by \f[CR]callbackFn\f[R] are used as keys for the
\f[CR]Map\f[R] returned by \f[CR]Map.groupBy()\f[R].
Each key has an associated array containing all the elements for which
the callback returned the same value.
.PP
The elements in the returned \f[CR]Map\f[R] and the original iterable
are the same (not deep copies).
Changing the internal structure of the elements will be reflected in
both the original iterable and the returned \f[CR]Map\f[R].
.PP
This method is useful when you need to group information that is related
to a particular object that might potentially change over time.
This is because even if the object is modified, it will continue to work
as a key to the returned \f[CR]Map\f[R].
If you instead create a string representation for the object and use
that as a grouping key in \f[CR]Object.groupBy()\f[R], you must maintain
the mapping between the original object and its representation as the
object changes.
.RS
.PP
\f[B]Note:\f[R] To access the groups in the returned \f[CR]Map\f[R], you
must use the same object that was originally used as a key in the
\f[CR]Map\f[R] (although you may modify its properties).
You can\(cqt use another object that just happens to have the same name
and properties.
.RE
.PP
\f[CR]Map.groupBy\f[R] does not read the value of \f[CR]this\f[R].
It can be called on any object and a new \f[CR]Map\f[R] instance will be
returned.
.SH EXAMPLES
.SS Using Map.groupBy()
First we define an array containing objects representing an inventory of
different foodstuffs.
Each food has a \f[CR]type\f[R] and a \f[CR]quantity\f[R].
.IP
.EX
\f[B]const\f[R] inventory = [
  { name: \(dqasparagus\(dq, type: \(dqvegetables\(dq, quantity: 9 },
  { name: \(dqbananas\(dq, type: \(dqfruit\(dq, quantity: 5 },
  { name: \(dqgoat\(dq, type: \(dqmeat\(dq, quantity: 23 },
  { name: \(dqcherries\(dq, type: \(dqfruit\(dq, quantity: 12 },
  { name: \(dqfish\(dq, type: \(dqmeat\(dq, quantity: 22 },
];
.EE
.PP
The code below uses \f[CR]Map.groupBy()\f[R] with an arrow function that
returns the object keys named \f[CR]restock\f[R] or
\f[CR]sufficient\f[R], depending on whether the element has
\f[CR]quantity < 6\f[R].
The returned \f[CR]result\f[R] object is a \f[CR]Map\f[R] so we need to
call \f[CR]get()\f[R] with the key to obtain the array.
.IP
.EX
\f[B]const\f[R] restock = { restock: \f[B]true\f[R] };
\f[B]const\f[R] sufficient = { restock: \f[B]false\f[R] };
\f[B]const\f[R] result = Map.groupBy(inventory, ({ quantity }) \f[B]=>\f[R]
  quantity < 6 ? restock : sufficient,
);
console.log(result.get(restock));
\f[I]// [{ name: \(dqbananas\(dq, type: \(dqfruit\(dq, quantity: 5 }]\f[R]
.EE
.PP
Note that the function argument \f[CR]{ quantity }\f[R] is a basic
example of object destructuring syntax for function arguments.
This unpacks the \f[CR]quantity\f[R] property of an object passed as a
parameter, and assigns it to a variable named \f[CR]quantity\f[R] in the
body of the function.
This is a very succinct way to access the relevant values of elements
within a function.
.PP
The key to a \f[CR]Map\f[R] can be modified and still used.
However you can\(cqt recreate the key and still use it.
For this reason it is important that anything that needs to use the map
keeps a reference to its keys.
.IP
.EX
\f[I]// The key can be modified and still used\f[R]
restock[\(dqfast\(dq] = \f[B]true\f[R];
console.log(result.get(restock));
\f[I]// [{ name: \(dqbananas\(dq, type: \(dqfruit\(dq, quantity: 5 }]\f[R]

\f[I]// A new key can\(aqt be used, even if it has the same structure!\f[R]
\f[B]const\f[R] restock2 = { restock: \f[B]true\f[R] };
console.log(result.get(restock2)); \f[I]// undefined\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#array-grouping
Polyfill of \f[CR]Map.groupBy\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/map.groupby
es\-shims polyfill of \f[CR]Map.groupBy\f[R]
.UE \c
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array.prototype.reduce()\f[R]
.IP \(bu 2
\f[CR]Map()\f[R]
.IP \(bu 2
\f[CR]Object.groupBy()\f[R]
