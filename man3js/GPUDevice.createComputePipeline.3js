.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATECOMPUTEPIPELINE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createComputePipeline \- GPUDevice: createComputePipeline()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createComputePipeline()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPUComputePipeline\f[R]
that can control the compute shader stage and be used in a
\f[CR]GPUComputePassEncoder\f[R].
.SH SYNTAX
.IP
.EX
createComputePipeline(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]compute\f[R]
An object describing the compute shader entry point of the pipeline.
This object can contain the following properties:
.RS
.TP
\f[B]constants\f[R] \f[I](optional)\f[R]
A sequence of record types, with the structure \f[CR](id, value)\f[R],
representing override values for \c
.UR https://gpuweb.github.io/gpuweb/#typedefdef-gpupipelineconstantvalue
WGSL constants that can be overridden in the pipeline
.UE \c
\&.
These behave like ordered maps.
In each case, the \f[CR]id\f[R] is a key used to identify or select the
record, and the \f[CR]constant\f[R] is an enumerated value representing
a WGSL.
.RS
.PP
Depending on which constant you want to override, the \f[CR]id\f[R] may
take the form of the numeric ID of the constant, if one is specified, or
otherwise the constant\(cqs identifier name.
.PP
A code snippet providing override values for several overridable
constants might look like this:
.IP
.EX
({
  \f[I]// \&...\f[R]
  constants: {
    0: \f[B]false\f[R],
    1200: 3.0,
    1300: 2.0,
    width: 20,
    depth: \-1,
    height: 15,
  },
});
.EE
.RE
.TP
\f[B]entryPoint\f[R] \f[I](optional)\f[R]
The name of the function in the \f[CR]module\f[R] that this stage will
use to perform its work.
The corresponding shader function must have the \f[CR]\(atcompute\f[R]
attribute to be identified as this entry point.
See \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#entry-point-decl
Entry Point Declaration
.UE \c
\ for more information.
.RS
.PP
You can omit the \f[CR]entryPoint\f[R] property if your shader code
contains a single function with the \f[CR]\(atcompute\f[R] attribute set
\(em the browser will use this as the default entry point.
If \f[CR]entryPoint\f[R] is omitted and the browser cannot determine a
default entry point, a \f[CR]GPUValidationError\f[R] is generated and
the resulting \f[CR]GPUComputePipeline\f[R] will be invalid.
.RE
.TP
\f[B]module\f[R]
A \f[CR]GPUShaderModule\f[R] object containing the \c
.UR https://gpuweb.github.io/gpuweb/wgsl/
WGSL
.UE \c
\ code that this programmable stage will execute.
.RE
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]layout\f[R]
Defines the layout (structure, purpose, and type) of all the GPU
resources (buffers, textures, etc.)
used during the execution of the pipeline.
Possible values are:
.RS
.IP \(bu 2
A \f[CR]GPUPipelineLayout\f[R] object, created using
\f[CR]GPUDevice.createPipelineLayout()\f[R], which allows the GPU to
figure out how to run the pipeline most efficiently ahead of time.
.IP \(bu 2
A string of \f[CR]\(dqauto\(dq\f[R], which causes the pipeline to
generate an implicit bind group layout based on any bindings defined in
the shader code.
If \f[CR]\(dqauto\(dq\f[R] is used, the generated bind group layouts may
only be used with the current pipeline.
.RE
.RE
.SS Return value
A \f[CR]GPUComputePipeline\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createComputePipeline()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUComputePipeline\f[R] object is returned:
.IP \(bu 2
The workgroup storage size used by the \f[CR]module\f[R] referenced
inside the \f[CR]compute\f[R] property is less than or equal to the
\f[CR]GPUDevice\f[R]\(cqs \f[CR]maxComputeWorkgroupStorageSize\f[R]
limit.
.IP \(bu 2
The \f[CR]module\f[R] uses a number of compute invocations per workgroup
less than or equal to the \f[CR]GPUDevice\f[R]\(cqs
\f[CR]maxComputeInvocationsPerWorkgroup\f[R] limit.
.IP \(bu 2
The \f[CR]module\f[R]\(cqs workgroup size is less than or equal to the
\f[CR]GPUDevice\f[R]\(cqs corresponding
\f[CR]maxComputeWorkgroupSizeX\f[R],
\f[CR]maxComputeWorkgroupSizeY\f[R], or
\f[CR]maxComputeWorkgroupSizeZ\f[R] limit.
.IP \(bu 2
If the \f[CR]entryPoint\f[R] property is omitted, the shader code
contains a single compute shader entry point function for the browser to
use as the default entry point.
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Basic example
Our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
\ shows a process of:
.IP \(bu 2
Creating a bind group layout with
\f[CR]GPUDevice.createBindGroupLayout()\f[R].
.IP \(bu 2
Feeding the \f[CR]bindGroupLayout\f[R] into
\f[CR]GPUDevice.createPipelineLayout()\f[R] to create a
\f[CR]GPUPipelineLayout\f[R].
.IP \(bu 2
Using that value immediately in a \f[CR]createComputePipeline()\f[R]
call to create a \f[CR]GPUComputePipeline\f[R].
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] bindGroupLayout = device.createBindGroupLayout({
  entries: [
    {
      binding: 0,
      visibility: GPUShaderStage.COMPUTE,
      buffer: {
        type: \(dqstorage\(dq,
      },
    },
  ],
});

\f[B]const\f[R] computePipeline = device.createComputePipeline({
  layout: device.createPipelineLayout({
    bindGroupLayouts: [bindGroupLayout],
  }),
  compute: {
    module: shaderModule,
    entryPoint: \(dqmain\(dq,
  },
});

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
