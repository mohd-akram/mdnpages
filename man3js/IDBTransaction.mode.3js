.\" Automatically generated by Pandoc 3.4
.\"
.TH "IDBTransaction.mode" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.mode \- IDBTransaction: mode property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]mode\f[B]\f[R] read\-only property of the
\f[CR]IDBTransaction\f[R] interface returns the current mode for
accessing the data in the object stores in the scope of the transaction
(i.e.\ is the mode to be read\-only, or do you want to write to the
object stores?)
The default value is \f[CR]readonly\f[R].
.SH VALUE
An object defining the mode for isolating access to data in the current
object stores: A string defining the mode for isolating access to data
in the current object stores.
The following values are available:
.TP
\f[B]readonly\f[R]
Allows data to be read but not changed.
.TP
\f[B]readwrite\f[R]
Allows reading and writing of data in existing data stores to be
changed.
.TP
\f[B]versionchange\f[R]
Allows any operation, including ones that delete and create object
stores and indexes.
This mode is for updating the version number of transactions if the need
is detected when calling \f[CR]IDBFactory.open()\f[R].
Transactions of this mode cannot run concurrently with other
transactions.
Transactions in this mode are known as \f[I]upgrade transactions\f[R].
.SH EXAMPLES
In the following code snippet, we open a read/write transaction on our
database and add some data to an object store.
Note also the functions attached to transaction event handlers to report
on the outcome of the transaction opening in the event of success or
failure.
At the end, we log the mode of the current transaction using
\f[CR]mode\f[R].
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications app
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[B]const\f[R] note = document.getElementById(\[dq]notifications\[dq]);

\f[I]// an instance of a db object for us to store the IDB data in\f[R]
\f[B]let\f[R] db;

\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db variable.\f[R]
  \f[I]// This is used a lot below\f[R]
  db = DBOpenRequest.result;

  \f[I]// Run the addData() function to add the data to the database\f[R]
  addData();
};

\f[B]function\f[R] addData() {
  \f[I]// Create a new object ready for being inserted into the IDB\f[R]
  \f[B]const\f[R] newItem = [
    {
      taskTitle: \[dq]Walk dog\[dq],
      hours: 19,
      minutes: 30,
      day: 24,
      month: \[dq]December\[dq],
      year: 2013,
      notified: \[dq]no\[dq],
    },
  ];

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  \f[I]// report on the success of opening the transaction\f[R]
  transaction.oncomplete = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Transaction completed: database modification finished.\[dq];
  };

  transaction.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Transaction not opened due to error. Duplicate items not allowed.\[dq];
  };

  \f[I]// create an object store on the transaction\f[R]
  \f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);

  \f[I]// add our newItem object to the object store\f[R]
  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem[0]);

  objectStoreRequest.onsuccess = (event) \f[B]=>\f[R] {
    \f[I]// report the success of the request (this does not mean the item\f[R]
    \f[I]// has been stored successfully in the DB \- for that you need transaction.onsuccess)\f[R]
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Request successful.\[dq];
  };

  \f[I]// Return the mode this transaction has been opened in (should be \[dq]readwrite\[dq] in this case)\f[R]
  transaction.mode;
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
