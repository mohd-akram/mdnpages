.\" Automatically generated by Pandoc 3.4
.\"
.TH "RTCPeerConnection.setRemoteDescription" "JS" "September 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.setRemoteDescription \- RTCPeerConnection:
setRemoteDescription() method
.SH SYNOPSIS
The \f[B]\f[CB]setRemoteDescription()\f[B]\f[R] method of the
\f[CR]RTCPeerConnection\f[R] interface sets the specified session
description as the remote peer\[cq]s current offer or answer.
The description specifies the properties of the remote end of the
connection, including the media format.
The method takes a single parameter\[em]the session description\[em]and
it returns a \f[CR]Promise\f[R] which is fulfilled once the description
has been changed, asynchronously.
.PP
This is typically called after receiving an offer or answer from another
peer over the signaling server.
Keep in mind that if \f[CR]setRemoteDescription()\f[R] is called while a
connection is already in place, it means renegotiation is underway
(possibly to adapt to changing network conditions).
.PP
Because descriptions will be exchanged until the two peers agree on a
configuration, the description submitted by calling
\f[CR]setRemoteDescription()\f[R] does not immediately take effect.
Instead, the current connection configuration remains in place until
negotiation is complete.
Only then does the agreed\-upon configuration take effect.
.SH SYNTAX
.IP
.EX
setRemoteDescription(sessionDescription)

// deprecated
setRemoteDescription(sessionDescription, successCallback, errorCallback)
.EE
.SS Parameters
.TP
\f[B]sessionDescription\f[R]
An object which specifies the remote peer\[cq]s current offer or answer.
It should contain the following properties:
.RS
.TP
\f[B]type\f[R]
A string indicating the type of the session description.
See \f[CR]RTCSessionDescription.type\f[R].
.TP
\f[B]sdp\f[R] \f[I](optional)\f[R]
A string containing the SDP describing the session.
If sdp is not provided, it defaults to an empty string.
If \f[CR]type\f[R] is \f[CR]\[dq]rollback\[dq]\f[R], \f[CR]sdp\f[R] must
be null or an empty string.
See \f[CR]RTCSessionDescription.sdp\f[R].
.PP
You can also pass an actual \f[CR]RTCSessionDescription\f[R] instance,
but there\[cq]s no difference.
For this reason, the \f[CR]RTCSessionDescription\f[R] constructor is
deprecated.
.RE
.PP
In older code and documentation, you may see a callback\-based version
of this function used.
This has been deprecated and its use is \f[I]strongly\f[R] discouraged.
You should update any existing code to use the \f[CR]Promise\f[R]\-based
version of \f[CR]setRemoteDescription()\f[R] instead.
The parameters for the older form of \f[CR]setRemoteDescription()\f[R]
are described below, to aid in updating existing code.
.TP
\f[B]successCallback\f[R] \f[I](deprecated)\f[R]
A JavaScript \f[CR]Function\f[R] which accepts no input parameters to be
called once the description has been successfully set.
At that time, the offer can be sent to a remote peer via the signaling
server.
.TP
\f[B]errorCallback\f[R] \f[I](deprecated)\f[R]
A function matching the signature
\f[CR]RTCPeerConnectionErrorCallback\f[R] which gets called if the
description can\[cq]t be set.
It is passed a single \f[CR]DOMException\f[R] object explaining why the
request failed.
.PP
This deprecated form of the method returns instantaneously without
waiting for the actual setting to be done: in case of success, the
\f[CR]successCallback\f[R] will be called; in case of failure, the
\f[CR]errorCallback\f[R] will be called.
.SS Return value
A \f[CR]Promise\f[R] which is fulfilled once the value of the
connection\[cq]s \f[CR]remoteDescription\f[R] is successfully changed or
rejected if the change cannot be applied (for example, if the specified
description is incompatible with one or both of the peers on the
connection).
The promise fulfillment handler receives no input parameters.
.RS
.PP
\f[B]Note:\f[R] The process of changing descriptions actually involves
intermediary steps handled by the WebRTC layer to ensure that an active
connection can be changed without losing the connection if the change
does not succeed.
See Pending and current descriptions in the WebRTC Connectivity page for
more details on this process.
.RE
.SS Exceptions
The following exceptions are reported to the rejection handler for the
promise returned by \f[CR]setRemoteDescription()\f[R]:
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Returned if the content of the description is invalid.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Returned if the \f[CR]RTCPeerConnection\f[R] is closed, or it\[cq]s in a
state that is not compatible with the specified description\[cq]s
\f[CR]type\f[R].
For example, this exception is thrown if the \f[CR]type\f[R] is
\f[CR]rollback\f[R] and the signaling state is one of \f[CR]stable\f[R],
\f[CR]have\-local\-pranswer\f[R], or \f[CR]have\-remote\-pranswer\f[R]
because you cannot roll back a connection that\[cq]s either fully
established or is in the final stage of becoming connected.
.TP
\f[B]OperationError\f[R] \f[B]DOMException\f[R]
Returned if an error does not match the ones specified here.
This includes identity validation errors.
.TP
\f[B]RTCError\f[R] \f[B]DOMException\f[R]
Returned with the \f[CR]errorDetail\f[R] set to
\f[CR]sdp\-syntax\-error\f[R] if the SDP specified by
\f[CR]RTCSessionDescription.sdp\f[R] is not valid.
The error object\[cq]s \f[CR]sdpLineNumber\f[R] property indicates the
line number within the SDP on which the syntax error was detected.
.TP
\f[B]TypeError\f[R]
Returned if the \f[CR]sessionDescription\f[R] is missing the
\f[CR]type\f[R] property, or no description parameter was provided at
all.
.PP
When using the deprecated callback\-based version of
\f[CR]setRemoteDescription()\f[R], the following exceptions may occur:
.TP
\f[B]InvalidStateError\f[R] \f[I](deprecated)\f[R]
The connection\[cq]s \f[CR]signalingState\f[R] is
\f[CR]\[dq]closed\[dq]\f[R], indicating that the connection is not
currently open, so negotiation cannot take place.
.TP
\f[B]InvalidSessionDescriptionError\f[R] \f[I](deprecated)\f[R]
The \f[CR]sessionDescription\f[R] parameter is invalid.
.SH USAGE NOTES
When you call \f[CR]setRemoteDescription()\f[R], the ICE agent checks to
make sure the \f[CR]RTCPeerConnection\f[R] is in either the
\f[CR]stable\f[R] or \f[CR]have\-remote\-offer\f[R]
\f[CR]signalingState\f[R].
These states indicate that either an existing connection is being
renegotiated or that an offer previously specified by an earlier call to
\f[CR]setRemoteDescription()\f[R] is to be replaced with the new offer.
In either of those two cases, we\[cq]re at the beginning of the
negotiation process, and the offer is set as the remote description.
.PP
On the other hand, if we\[cq]re in the middle of an ongoing negotiation
and an offer is passed into \f[CR]setRemoteDescription()\f[R], the ICE
agent automatically begins an ICE rollback in order to return the
connection to a stable signaling state, then, once the rollback is
completed, sets the remote description to the specified offer.
This begins a new negotiation session, with the newly\-established offer
as the starting point.
.PP
Upon starting the new negotiation with the newly\-established offer, the
local peer is now the callee, even if it was previously the caller.
This happens instead of throwing an exception, thereby reducing the
number of potential errors which might occur, and simplifies the
processing you need to do when you receive an offer, by eliminating the
need to handle the offer/answer process differently depending on whether
the local peer is the caller or callee.
.RS
.PP
\f[B]Note:\f[R] Earlier implementations of WebRTC would throw an
exception if an offer was set outside a \f[CR]stable\f[R] or
\f[CR]have\-remote\-offer\f[R] state.
.RE
.SH EXAMPLES
Here we see a function which handles an offer received from the remote
peer.
This code is derived from the example and tutorial in the article
Signaling and video calling; take a look at that for more details and a
more in\-depth explanation of what\[cq]s going on.
.IP
.EX
\f[B]function\f[R] handleOffer(msg) {
  createMyPeerConnection();

  myPeerConnection
    .setRemoteDescription(msg.description)
    .then(() \f[B]=>\f[R] navigator.mediaDevices.getUserMedia(mediaConstraints))
    .then((stream) \f[B]=>\f[R] {
      document.getElementById(\[dq]local_video\[dq]).srcObject = stream;
      \f[B]return\f[R] myPeerConnection.addStream(stream);
    })
    .then(() \f[B]=>\f[R] myPeerConnection.createAnswer())
    .then((answer) \f[B]=>\f[R] myPeerConnection.setLocalDescription(answer))
    .then(() \f[B]=>\f[R] {
      \f[I]// Send the answer to the remote peer using the signaling server\f[R]
    })
    .catch(handleGetUserMediaError);
}
.EE
.PP
After creating our \f[CR]RTCPeerConnection\f[R] and saving it as
\f[CR]myPeerConnection\f[R], we pass the description included in the
received offer message, \f[CR]msg\f[R], directly into
\f[CR]setRemoteDescription()\f[R] to tell the user agent\[cq]s WebRTC
layer what configuration the caller has proposed using.
When our promise fulfillment handler is called, indicating that this has
been done, we create a stream, add it to the connection, then create an
SDP answer and call \f[CR]setLocalDescription()\f[R] to set that as the
configuration at our end of the call before forwarding that answer to
the caller.
.SH SEE ALSO
.IP \[bu] 2
WebRTC
.IP \[bu] 2
\f[CR]RTCPeerConnection.remoteDescription\f[R],
\f[CR]RTCPeerConnection.pendingRemoteDescription\f[R],
\f[CR]RTCPeerConnection.currentRemoteDescription\f[R]
.IP \[bu] 2
\f[CR]RTCSessionDescription\f[R]
