.\" Automatically generated by Pandoc 3.4
.\"
.TH "ImageDecoder.decode" "JS" "October 31, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ImageDecoder.decode \- ImageDecoder: decode() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]decode()\f[B]\f[R] method of the \f[CR]ImageDecoder\f[R]
interface enqueues a control message to decode the frame of an image.
.SH SYNTAX
.IP
.EX
decode()
decode(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing the following members:
.RS
.TP
\f[B]frameIndex\f[R] \f[I](optional)\f[R]
An integer representing the index of the frame to decode.
Defaults to \f[CR]0\f[R] (the first frame).
.TP
\f[B]completeFramesOnly\f[R] \f[I](optional)\f[R]
A \f[CR]boolean\f[R] defaulting to \f[CR]true\f[R].
When \f[CR]false\f[R] indicates that for progressive images the decoder
may output an image with reduced detail.
When \f[CR]false\f[R], the promise returned by \f[CR]decode()\f[R] will
resolve exactly once for each new level of detail.
.RE
.SS Return value
A \f[CR]promise\f[R] that resolves with an object containing the
following members:
.TP
\f[B]image\f[R]
A \f[CR]VideoFrame\f[R] containing the decoded image.
.TP
\f[B]complete\f[R]
A \f[CR]boolean\f[R], if \f[CR]true\f[R] indicates that \f[CR]image\f[R]
contains the final full\-detail output.
.SS Exceptions
If an error occurs, the promise will resolve with following exception:
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Returned if any of the following conditions apply:
.RS
.IP \[bu] 2
\f[CR]close\f[R] is true, meaning \f[CR]close()\f[R] has already been
called.
.IP \[bu] 2
The requested frame does not exist.
.RE
.SH EXAMPLES
.SS Synchronous decoding of a completed image frame
The following example decodes the second frame (at index \f[CR]1\f[R])
and prints the resulting \f[CR]VideoFrame\f[R] to the console.
.IP
.EX
\f[B]let\f[R] result = \f[B]await\f[R] imageDecoder.decode({ frameIndex: 1 });
console.log(result.image);
.EE
.SS Partial decoding of a progressive image frame
The following example decodes the first frame repeatedly until its
complete:
.IP
.EX
\f[B]let\f[R] complete = \f[B]false\f[R];
\f[B]while\f[R] (!complete) {
  \f[I]// The promise returned by \[ga]decode()\[ga] will only resolve when a new\f[R]
  \f[I]// level of detail is available or the frame is complete. I.e.,\f[R]
  \f[I]// calling \[ga]decode()\[ga] in a loop like this is won\[aq]t needlessly spin.\f[R]
  \f[B]let\f[R] result = \f[B]await\f[R] imageDecode.decode({ completeFramesOnly: \f[B]false\f[R] });

  \f[I]// Do something with \[ga]result.image\[ga].\f[R]

  complete = result.complete;
}
.EE
