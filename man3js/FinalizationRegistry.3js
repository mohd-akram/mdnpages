.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "FINALIZATIONREGISTRY" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FinalizationRegistry \- FinalizationRegistry
.SH SYNOPSIS
A \f[B]\f[CB]FinalizationRegistry\f[B]\f[R] object lets you request a
callback when a value is garbage\-collected.
.SH DESCRIPTION
\f[CR]FinalizationRegistry\f[R] provides a way to request that a
\f[I]cleanup callback\f[R] get called at some point when a value
registered with the registry has been \f[I]reclaimed\f[R]
(garbage\-collected).
(Cleanup callbacks are sometimes called \f[I]finalizers\f[R].)
.RS
.PP
\f[B]Note:\f[R] Cleanup callbacks should not be used for essential
program logic.
See Notes on cleanup callbacks for details.
.RE
.PP
You create the registry passing in the callback:
.IP
.EX
\f[B]const\f[R] registry = \f[B]new\f[R] FinalizationRegistry((heldValue) \f[B]=>\f[R] {
  \f[I]// \&...\f[R]
});
.EE
.PP
Then you register any value you want a cleanup callback for by calling
the \f[CR]register\f[R] method, passing in the value and a \f[I]held
value\f[R] for it:
.IP
.EX
registry.register(target, \(dqsome value\(dq);
.EE
.PP
The registry does not keep a strong reference to the value, as that
would defeat the purpose (if the registry held it strongly, the value
would never be reclaimed).
In JavaScript, objects and non\-registered symbols are garbage
collectable, so they can be registered in a
\f[CR]FinalizationRegistry\f[R] object as the target or the token.
.PP
If \f[CR]target\f[R] is reclaimed, your cleanup callback may be called
at some point with the \f[I]held value\f[R] you provided for it
(\f[CR]\(dqsome value\(dq\f[R] in the above).
The held value can be any value you like: a primitive or an object, even
\f[CR]undefined\f[R].
If the held value is an object, the registry keeps a \f[I]strong\f[R]
reference to it (so it can pass it to your cleanup callback later).
.PP
If you might want to unregister a registered target value later, you
pass a third value, which is the \f[I]unregistration token\f[R]
you\(cqll use later when calling the registry\(cqs \f[CR]unregister\f[R]
function to unregister the value.
The registry only keeps a weak reference to the unregister token.
.PP
It\(cqs common to use the target value itself as the unregister token,
which is just fine:
.IP
.EX
registry.register(target, \(dqsome value\(dq, target);
\f[I]// \&...\f[R]

\f[I]// some time later, if you don\(aqt care about \(gatarget\(ga anymore, unregister it\f[R]
registry.unregister(target);
.EE
.PP
It doesn\(cqt have to be the same value, though; it can be a different
one:
.IP
.EX
registry.register(target, \(dqsome value\(dq, token);
\f[I]// \&...\f[R]

\f[I]// some time later\f[R]
registry.unregister(token);
.EE
.SS Avoid where possible
Correct use of \f[CR]FinalizationRegistry\f[R] takes careful thought,
and it\(cqs best avoided if possible.
It\(cqs also important to avoid relying on any specific behaviors not
guaranteed by the specification.
When, how, and whether garbage collection occurs is down to the
implementation of any given JavaScript engine.
Any behavior you observe in one engine may be different in another
engine, in another version of the same engine, or even in a slightly
different situation with the same version of the same engine.
Garbage collection is a hard problem that JavaScript engine implementers
are constantly refining and improving their solutions to.
.PP
Here are some specific points included by the authors in the \c
.UR https://github.com/tc39/proposal-weakrefs
proposal
.UE \c
\ that introduced \f[CR]FinalizationRegistry\f[R]:
.RS
.PP
\c
.UR https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)
Garbage collectors
.UE \c
\ are complicated.
If an application or library depends on GC cleaning up a WeakRef or
calling a finalizer [cleanup callback] in a timely, predictable manner,
it\(cqs likely to be disappointed: the cleanup may happen much later
than expected, or not at all.
Sources of variability include:
.IP \(bu 2
One object might be garbage\-collected much sooner than another object,
even if they become unreachable at the same time, e.g., due to
generational collection.
.IP \(bu 2
Garbage collection work can be split up over time using incremental and
concurrent techniques.
.IP \(bu 2
Various runtime heuristics can be used to balance memory usage,
responsiveness.
.IP \(bu 2
The JavaScript engine may hold references to things which look like they
are unreachable (e.g., in closures, or inline caches).
.IP \(bu 2
Different JavaScript engines may do these things differently, or the
same engine may change its algorithms across versions.
.IP \(bu 2
Complex factors may lead to objects being held alive for unexpected
amounts of time, such as use with certain APIs.
.RE
.SS Notes on cleanup callbacks
.IP \(bu 2
Developers shouldn\(cqt rely on cleanup callbacks for essential program
logic.
Cleanup callbacks may be useful for reducing memory usage across the
course of a program, but are unlikely to be useful otherwise.
.IP \(bu 2
If your code has just registered a value to the registry, that target
will not be reclaimed until the end of the current JavaScript \c
.UR https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#job
job
.UE \c
\&.
See notes on WeakRefs for details.
.IP \(bu 2
A conforming JavaScript implementation, even one that does garbage
collection, is not required to call cleanup callbacks.
When and whether it does so is entirely down to the implementation of
the JavaScript engine.
When a registered object is reclaimed, any cleanup callbacks for it may
be called then, or some time later, or not at all.
.IP \(bu 2
It\(cqs likely that major implementations will call cleanup callbacks at
some point during execution, but those calls may be substantially after
the related object was reclaimed.
Furthermore, if there is an object registered in two registries, there
is no guarantee that the two callbacks are called next to each other
\(em one may be called and the other never called, or the other may be
called much later.
.IP \(bu 2
There are also situations where even implementations that normally call
cleanup callbacks are unlikely to call them:
.RS 2
.IP \(bu 2
When the JavaScript program shuts down entirely (for instance, closing a
tab in a browser).
.IP \(bu 2
When the \f[CR]FinalizationRegistry\f[R] instance itself is no longer
reachable by JavaScript code.
.RE
.IP \(bu 2
If the target of a \f[CR]WeakRef\f[R] is also in a
\f[CR]FinalizationRegistry\f[R], the \f[CR]WeakRef\f[R]\(cqs target is
cleared at the same time or before any cleanup callback associated with
the registry is called; if your cleanup callback calls \f[CR]deref\f[R]
on a \f[CR]WeakRef\f[R] for the object, it will receive
\f[CR]undefined\f[R].
.SH CONSTRUCTOR
.TP
\f[B]FinalizationRegistry()\f[R]
Creates a new \f[CR]FinalizationRegistry\f[R] object.
.SH INSTANCE PROPERTIES
These properties are defined on
\f[CR]FinalizationRegistry.prototype\f[R] and shared by all
\f[CR]FinalizationRegistry\f[R] instances.
.TP
\f[B]FinalizationRegistry.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]FinalizationRegistry\f[R] instances, the initial value is the
\f[CR]FinalizationRegistry\f[R] constructor.
.TP
\f[B]FinalizationRegistry.prototype[Symbol.toStringTag]\f[R]
The initial value of the \f[CR][Symbol.toStringTag]\f[R] property is the
string \f[CR]\(dqFinalizationRegistry\(dq\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]FinalizationRegistry.prototype.register()\f[R]
Registers an object with the registry in order to get a cleanup callback
when/if the object is garbage\-collected.
.TP
\f[B]FinalizationRegistry.prototype.unregister()\f[R]
Unregisters an object from the registry.
.SH EXAMPLES
.SS Creating a new registry
You create the registry passing in the callback:
.IP
.EX
\f[B]const\f[R] registry = \f[B]new\f[R] FinalizationRegistry((heldValue) \f[B]=>\f[R] {
  \f[I]// \&...\f[R]
});
.EE
.SS Registering objects for cleanup
Then you register any objects you want a cleanup callback for by calling
the \f[CR]register\f[R] method, passing in the object and a \f[I]held
value\f[R] for it:
.IP
.EX
registry.register(theObject, \(dqsome value\(dq);
.EE
.SS Callbacks never called synchronously
No matter how much pressure you put on the garbage collector, the
cleanup callback will never be called synchronously.
The object may be reclaimed synchronously, but the callback will always
be called sometime after the current job finishes:
.IP
.EX
\f[B]let\f[R] counter = 0;
\f[B]const\f[R] registry = \f[B]new\f[R] FinalizationRegistry(() \f[B]=>\f[R] {
  console.log(\(gaArray gets garbage collected at ${counter}\(ga);
});

registry.register([\(dqfoo\(dq]);

(\f[B]function\f[R] allocateMemory() {
  \f[I]// Allocate 50000 functions \(em a lot of memory!\f[R]
  Array.from({ length: 50000 }, () \f[B]=>\f[R] () \f[B]=>\f[R] {});
  \f[B]if\f[R] (counter > 5000) \f[B]return\f[R];
  counter++;
  allocateMemory();
})();

console.log(\(dqMain job ends\(dq);
\f[I]// Logs:\f[R]
\f[I]// Main job ends\f[R]
\f[I]// Array gets garbage collected at 5001\f[R]
.EE
.PP
However, if you allow a little break between each allocation, the
callback may be called sooner:
.IP
.EX
\f[B]let\f[R] arrayCollected = \f[B]false\f[R];
\f[B]let\f[R] counter = 0;
\f[B]const\f[R] registry = \f[B]new\f[R] FinalizationRegistry(() \f[B]=>\f[R] {
  console.log(\(gaArray gets garbage collected at ${counter}\(ga);
  arrayCollected = \f[B]true\f[R];
});

registry.register([\(dqfoo\(dq]);

(\f[B]function\f[R] allocateMemory() {
  \f[I]// Allocate 50000 functions \(em a lot of memory!\f[R]
  Array.from({ length: 50000 }, () \f[B]=>\f[R] () \f[B]=>\f[R] {});
  \f[B]if\f[R] (counter > 5000 || arrayCollected) \f[B]return\f[R];
  counter++;
  \f[I]// Use setTimeout to make each allocateMemory a different job\f[R]
  setTimeout(allocateMemory);
})();

console.log(\(dqMain job ends\(dq);
.EE
.PP
There\(cqs no guarantee that the callback will be called sooner or if it
will be called at all, but there\(cqs a possibility that the logged
message has a counter value smaller than 5000.
.SH SEE ALSO
.IP \(bu 2
\f[CR]WeakRef\f[R]
.IP \(bu 2
\f[CR]WeakSet\f[R]
.IP \(bu 2
\f[CR]WeakMap\f[R]
