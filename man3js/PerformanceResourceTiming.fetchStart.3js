.\" Automatically generated by Pandoc 3.4
.\"
.TH "PerformanceResourceTiming.fetchStart" "JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.fetchStart \- PerformanceResourceTiming:
fetchStart property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]fetchStart\f[B]\f[R] read\-only property represents a
\f[CR]timestamp\f[R] immediately before the browser starts to fetch the
resource.
.PP
If there are HTTP redirects, the property returns the time immediately
before the user agent starts to fetch the final resource in the
redirection.
.PP
Unlike many other \f[CR]PerformanceResourceTiming\f[R] properties, the
\f[CR]fetchStart\f[R] property is available for cross\-origin requests
without the need of the \f[CR]Timing\-Allow\-Origin\f[R] HTTP response
header.
.SH VALUE
A \f[CR]DOMHighResTimeStamp\f[R] immediately before the browser starts
to fetch the resource.
.SH EXAMPLES
.SS Measuring time to fetch (without redirects)
The \f[CR]fetchStart\f[R] and \f[CR]responseEnd\f[R] properties can be
used to measure the overall time it took to fetch the final resource
(without redirects).
If you want to include redirects, the overall time to fetch is provided
in the \f[CR]duration\f[R] property.
.IP
.EX
\f[B]const\f[R] timeToFetch = entry.responseEnd \- entry.fetchStart;
.EE
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]const\f[R] timeToFetch = entry.responseEnd \- entry.fetchStart;
    \f[B]if\f[R] (timeToFetch > 0) {
      console.log(\[ga]${entry.name}: Time to fetch: ${timeToFetch}ms\[ga]);
    }
  });
});

observer.observe({ type: \[dq]resource\[dq], buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) \f[B]=>\f[R] {
  \f[B]const\f[R] timeToFetch = entry.responseEnd \- entry.fetchStart;
  \f[B]if\f[R] (timeToFetch > 0) {
    console.log(\[ga]${entry.name}: Time to fetch: ${timeToFetch}ms\[ga]);
  }
});
.EE
