.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCRtpSender.transform" "JS" "January 10, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpSender.transform \- RTCRtpSender: transform property
.SH SYNOPSIS
The \f[B]\f[CB]transform\f[B]\f[R] property of the
\f[CR]RTCRtpSender\f[R] object is used to insert a transform stream
(\f[CR]TransformStream\f[R]) running in a worker thread into the sender
pipeline.
This allows stream transforms to be applied to encoded video and audio
frames after they are output by a codec, and before they are sent.
.PP
The transform that is to be added is defined using an
\f[CR]RTCRtpScriptTransform\f[R] and its associated \f[CR]Worker\f[R].
If the transform is set synchronously immediately after creating the
\f[CR]RTCRtpSender\f[R] it will receive the first full frame generated
by the sender\[cq]s encoder.
.SS Value
A \f[CR]RTCRtpScriptTransform\f[R], or \f[CR]null\f[R] if the sender has
no associated transform stream.
.SH EXAMPLE
This example shows how you might stream video from a user\[cq]s webcam
over WebRTC, adding a WebRTC encoded transform to modify the outgoing
streams.
Note that this is part of a larger example in the guide topic Using
WebRTC Encoded Transforms.
.PP
The code assumes that there is an \f[CR]RTCPeerConnection\f[R] called
\f[CR]peerConnection\f[R] that is already connected to a remote peer.
It first gets a \f[CR]MediaStreamTrack\f[R], using
\f[CR]getUserMedia()\f[R] to get a video \f[CR]MediaStream\f[R] from a
media device, and then the \f[CR]MediaStream.getTracks()\f[R] method to
get the first \f[CR]MediaStreamTrack\f[R] in the stream.
.PP
The track is added to the peer connection using \f[CR]addTrack()\f[R].
This returns a new \f[CR]RTCRtpSender\f[R] that will be used to send it.
.IP
.EX
\f[B]const\f[R] mediaStream = \f[B]await\f[R] navigator.mediaDevices.getUserMedia({ video: \f[B]true\f[R] });
\f[B]const\f[R] [track] = mediaStream.getTracks();
\f[B]const\f[R] videoSender = peerConnection.addTrack(track, mediaStream);
.EE
.PP
The code above sets up the connection and starts sending the track.
To add a transform stream into the pipeline we need to construct an
\f[CR]RTCRtpScriptTransform\f[R] and assign it to the sender\[cq]s
\f[CR]transform\f[R] property.
As the transform is constructed immediately after creation of the
\f[CR]RTCRtpSender\f[R], it will receive the first frame generated by
the sender\[cq]s encoder, before it is sent.
.IP
.EX
\f[B]const\f[R] worker = \f[B]new\f[R] Worker(\[dq]worker.js\[dq]);
videoSender.transform = \f[B]new\f[R] RTCRtpScriptTransform(worker, {
  name: \[dq]senderTransform\[dq],
});
.EE
.PP
Note that you can add the transform at any time.
However by adding it immediately after calling \f[CR]addTrack()\f[R] the
transform will get the first encoded frame that is sent.
.SH SEE ALSO
.IP \[bu] 2
Using WebRTC Encoded Transforms
.IP \[bu] 2
\f[CR]RTCRtpReceiver.transform\f[R]
