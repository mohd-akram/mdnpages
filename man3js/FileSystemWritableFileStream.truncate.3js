.\" Automatically generated by Pandoc 3.4
.\"
.TH "FileSystemWritableFileStream.truncate" "JS" "April 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemWritableFileStream.truncate \- FileSystemWritableFileStream:
truncate() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]truncate()\f[B]\f[R] method of the
\f[CR]FileSystemWritableFileStream\f[R] interface resizes the file
associated with the stream to the specified size in bytes.
.PP
If the size specified is larger than the current file size the file is
padded with \f[CR]0x00\f[R] bytes.
.PP
The file cursor is also updated when \f[CR]truncate()\f[R] is called.
If the offset is smaller than the size, it remains unchanged.
If the offset is larger than size, the offset is set to that size.
This ensures that subsequent writes do not error.
.PP
No changes are written to the actual file on disk until the stream has
been closed.
Changes are typically written to a temporary file instead.
.SH SYNTAX
.IP
.EX
truncate(size)
.EE
.SS Parameters
.TP
\f[B]size\f[R]
A number specifying the number of bytes to resize the stream to.
.SS Return value
A \f[CR]Promise\f[R] that returns \f[CR]undefined\f[R].
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]PermissionStatus.state\f[R] is not \f[CR]granted\f[R].
.TP
\f[B]QuotaExceededError\f[R] \f[B]DOMException\f[R]
Thrown if the new size of the file is larger than the original size of
the file, and exceeds the browser\[cq]s storage quota.
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]size\f[R] is not a number or not defined.
.SH EXAMPLES
The following asynchronous function opens the `Save File' picker, which
returns a \f[CR]FileSystemFileHandle\f[R] once a file is selected.
From this, a writable stream is created using the
\f[CR]FileSystemFileHandle.createWritable()\f[R] method.
.PP
Next, we write to the stream:
.IP "1." 3
A text string is written to the stream.
.IP "2." 3
The \f[CR]truncate()\f[R] method is used to resize the file to 8 bytes.
.IP "3." 3
A second text string is written to the start of the stream, overwriting
the first write.
.PP
The stream is then closed.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] saveFile() {
  \f[B]try\f[R] {
    \f[I]// create a new handle\f[R]
    \f[B]const\f[R] newHandle = \f[B]await\f[R] window.showSaveFilePicker();

    \f[I]// create a FileSystemWritableFileStream to write to\f[R]
    \f[B]const\f[R] writableStream = \f[B]await\f[R] newHandle.createWritable();

    \f[I]// write our file\f[R]
    \f[B]await\f[R] writableStream.write(\[dq]This is my first file content\[dq]);
    \f[B]await\f[R] writableStream.truncate(8);
    \f[B]await\f[R] writableStream.write(\[dq]my second file content\[dq]);

    \f[I]// close the file and write the contents to disk.\f[R]
    \f[B]await\f[R] writableStream.close();
  } \f[B]catch\f[R] (err) {
    console.error(err.name, err.message);
  }
}
.EE
.PP
If you run the above function and then open the resulting file created
on disk, you should see the text \[lq]This is my second file
content\[rq].
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
