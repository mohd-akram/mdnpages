.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WGSLLANGUAGEFEATURES" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WGSLLanguageFeatures \- WGSLLanguageFeatures
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WGSLLanguageFeatures\f[B]\f[R] interface of the WebGPU
API is a setlike object that reports the \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#language-extension
WGSL language extensions
.UE \c
\ supported by the WebGPU implementation.
.PP
The \f[CR]WGSLLanguageFeatures\f[R] object is accessed via the
\f[CR]GPU.wgslLanguageFeatures\f[R] property.
.RS
.PP
\f[B]Note:\f[R] Not all WGSL language extensions are available to WebGPU
in all browsers that support the API.
We recommend you thoroughly test any extensions you choose to use.
.RE
.SH AVAILABLE FEATURES
The following WGSL language extensions are defined at \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#language-extension
WGSL language extensions
.UE \c
\ in the WGSL specification.
Bear in mind that the exact set of features available will vary across
implementations and physical devices, and may change over time.
.TP
\f[B]packed_4x8_integer_dot_product\f[R]
Allows \f[B]DP4a\f[R] (Dot Product of 4 Elements and Accumulate) GPU
instructions to be used via your WGSL code.
These efficiently perform 8\-bit integer dot products to accelerate
computation, saving memory and network bandwidth and improving
performance compared with the equivalent \f[CR]f32\f[R] versions.
They are commonly used in machine learning models in inferencing, within
AI frameworks.
.RS
.PP
Specifically, when \f[CR]packed_4x8_integer_dot_product\f[R] is
available, WGSL code can use:
.IP \(bu 2
32\-bit integer scalars packing 4\-component vectors of 8\-bit integers
to be used as inputs to dot product instructions (via the
\f[CR]dot4U8Packed()\f[R] and \f[CR]dot4I8Packed()\f[R] built\-in
functions).
.IP \(bu 2
Packing and unpacking instructions with packed 4\-component vectors of
8\-bit integers (via built\-in functions such as \f[CR]pack4xI8()\f[R]
and \f[CR]pack4xI8Clamp()\f[R]).
.RE
.TP
\f[B]readonly_and_readwrite_storage_textures\f[R]
When available, allows the \f[CR]\(dqread\-only\(dq\f[R] and
\f[CR]\(dqread\-write\(dq\f[R] \f[CR]storageTexture.access\f[R] values
to be set when specifying storage texture bind group entry types in a
bind group layout.
These enable WGSL code to read storage textures, and read/write storage
textures, respectively.
.TP
\f[B]unrestricted_pointer_parameters\f[R]
Loosens restrictions on pointers being passed to WGSL functions.
When available, the following are allowed:
.RS
.IP \(bu 2
Parameter pointers to storage, uniform, and workgroup address spaces
being passed to user\-declared functions.
.IP \(bu 2
Pointers to structure members and array elements being passed to
user\-declared functions.
.RS 2
.PP
See \c
.UR https://google.github.io/tour-of-wgsl/types/pointers/passing_pointers/
Pointers As Function Parameters
.UE \c
\ for more details.
.RE
.RE
.SH INSTANCE PROPERTIES
The following property is available to all read\-only setlike objects:
.TP
\f[B]size\f[R]
Returns the number of values in the set.
.SH INSTANCE METHODS
The following methods are available to all read\-only setlike objects:
.TP
\f[B]has()\f[R]
Returns a boolean asserting whether or not an element with the given
value is present in the set.
.TP
\f[B]values()\f[R]
Returns a new iterator object that yields \f[B]values\f[R] for each
element in the set in insertion order.
.TP
\f[B]keys()\f[R]
An alias for \f[CR]values()\f[R].
.TP
\f[B]entries()\f[R]
Returns a new iterator object that contains \f[B]an array of
\f[CB][value, value]\f[B]\f[R] for each element in the set in insertion
order.
.TP
\f[B]forEach()\f[R]
Calls the provided callback function once for each value present in the
set in insertion order.
.SH EXAMPLES
.SS Check whether an extension is available
.IP
.EX
\f[B]if\f[R] (
  navigator.gpu.wgslLanguageFeatures.has(
    \(dqreadonly_and_readwrite_storage_textures\(dq,
  )
) {
  console.log(\(dqRead\-only and read\-write storage textures are available\(dq);
}
.EE
.SS Return set size and iterate through values
.IP
.EX
\f[B]const\f[R] wgslFeatures = navigator.gpu.wgslLanguageFeatures;

\f[I]// Return the size of the set\f[R]
console.log(wgslFeatures.size);

\f[I]// Iterate through all the set values using values()\f[R]
\f[B]const\f[R] valueIterator = wgslFeatures.values();
\f[B]for\f[R] (\f[B]const\f[R] value \f[B]of\f[R] valueIterator) {
  console.log(value);
}

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
WebGPU API
