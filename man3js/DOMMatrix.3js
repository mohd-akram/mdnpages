'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "DOMMatrix" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMMatrix \- DOMMatrix (WebKitCSSMatrix)
.SH SYNOPSIS
The \f[B]\f[CB]DOMMatrix\f[B]\f[R] interface represents 4×4 matrices,
suitable for 2D and 3D operations including rotation and translation.
It is a mutable version of the \f[CR]DOMMatrixReadOnly\f[R] interface.
.PP
\f[B]\f[CB]WebKitCSSMatrix\f[B]\f[R] and \f[B]\f[CB]SVGMatrix\f[B]\f[R]
are aliases to \f[B]\f[CB]DOMMatrix\f[B]\f[R].
.PP
This interface should be available inside web workers, though some
implementations don\[cq]t allow it yet.
.SH CONSTRUCTOR
.TP
\f[B]DOMMatrix()\f[R]
Creates and returns a new \f[CR]DOMMatrix\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]This interface inherits properties from
\f[CI]DOMMatrixReadOnly\f[I], though some of these properties are
altered to be mutable.\f[R]
.TP
\f[B]is2D\f[R] \f[I](read\-only)\f[R]
A Boolean flag whose value is \f[CR]true\f[R] if the matrix was
initialized as a 2D matrix.
If \f[CR]false\f[R], the matrix is 3D.
.TP
\f[B]isIdentity\f[R] \f[I](read\-only)\f[R]
A Boolean whose value is \f[CR]true\f[R] if the matrix is the \c
.UR https://en.wikipedia.org/wiki/Identity_matrix
identity matrix
.UE \c
\&.
The identity matrix is one in which every value is \f[CR]0\f[R]
\f[I]except\f[R] those on the main diagonal from top\-left to
bottom\-right corner (in other words, where the offsets in each
direction are equal).
.TP
\f[B]m11\f[R], \f[B]m12\f[R], \f[B]m13\f[R], \f[B]m14\f[R], \f[B]m21\f[R], \f[B]m22\f[R], \f[B]m23\f[R], \f[B]m24\f[R], \f[B]m31\f[R], \f[B]m32\f[R], \f[B]m33\f[R], \f[B]m34\f[R], \f[B]m41\f[R], \f[B]m42\f[R], \f[B]m43\f[R], \f[B]m44\f[R]
Double\-precision floating\-point values representing each component of
a 4×4 matrix, where \f[CR]m11\f[R] through \f[CR]m14\f[R] are the first
column, \f[CR]m21\f[R] through \f[CR]m24\f[R] are the second column, and
so forth.
.TP
\f[B]a\f[R], \f[B]b\f[R], \f[B]c\f[R], \f[B]d\f[R], \f[B]e\f[R], \f[B]f\f[R]
Double\-precision floating\-point values representing the components of
a 4×4 matrix which are required in order to perform 2D rotations and
translations.
These are aliases for specific components of a 4×4 matrix, as shown
below.
.RS
.PP
.TS
tab(@);
l l.
T{
\f[CR]2D\f[R]
T}@T{
\f[CR]3D equivalent\f[R]
T}
_
T{
\f[CR]a\f[R]
T}@T{
\f[CR]m11\f[R]
T}
T{
\f[CR]b\f[R]
T}@T{
\f[CR]m12\f[R]
T}
T{
\f[CR]c\f[R]
T}@T{
\f[CR]m21\f[R]
T}
T{
\f[CR]d\f[R]
T}@T{
\f[CR]m22\f[R]
T}
T{
\f[CR]e\f[R]
T}@T{
\f[CR]m41\f[R]
T}
T{
\f[CR]f\f[R]
T}@T{
\f[CR]m42\f[R]
T}
.TE
.RE
.SH INSTANCE METHODS
\f[I]This interface includes the following methods, as well as the
methods it inherits from \f[CI]DOMMatrixReadOnly\f[I].\f[R]
.TP
\f[B]DOMMatrix.invertSelf()\f[R]
Modifies the matrix by inverting it.
If the matrix can\[cq]t be inverted, its components are all set to
\f[CR]NaN\f[R], and \f[CR]is2D\f[R] returns \f[CR]false\f[R].
.TP
\f[B]DOMMatrix.multiplySelf()\f[R]
Modifies the matrix by post\-multiplying it with the specified
\f[CR]DOMMatrix\f[R].
This is equivalent to the dot product \f[CR]A⋅B\f[R], where matrix
\f[CR]A\f[R] is the source matrix and \f[CR]B\f[R] is the matrix given
as an input to the method.
Returns itself.
.TP
\f[B]DOMMatrix.preMultiplySelf()\f[R]
Modifies the matrix by pre\-multiplying it with the specified
\f[CR]DOMMatrix\f[R].
This is equivalent to the dot product \f[CR]B⋅A\f[R], where matrix
\f[CR]A\f[R] is the source matrix and \f[CR]B\f[R] is the matrix given
as an input to the method.
Returns itself.
.TP
\f[B]DOMMatrix.translateSelf()\f[R]
Modifies the matrix by applying the specified vector.
The default vector is \f[CR][0, 0, 0]\f[R].
Returns itself.
.TP
\f[B]DOMMatrix.scaleNonUniformSelf()\f[R] \f[I](deprecated)\f[R]
Modifies the matrix by applying the specified scaling on the X, Y, and Z
axes, centered at the given origin.
By default, the Y and Z axes\[cq] scaling factors are both \f[CR]1\f[R],
but the scaling factor for X must be specified.
The default origin is \f[CR](0, 0, 0)\f[R].
Returns itself.
.TP
\f[B]DOMMatrix.scaleSelf()\f[R]
Modifies the matrix by applying the specified scaling factors, with the
center located at the specified origin.
Also returns itself.
By default, the scaling factor is \f[CR]1\f[R] for all three axes, and
the origin is \f[CR](0, 0, 0)\f[R].
Returns itself.
.TP
\f[B]DOMMatrix.scale3dSelf()\f[R]
Modifies the matrix by applying the specified scaling factor to all
three axes, centered on the given origin.
Returns itself.
.TP
\f[B]DOMMatrix.rotateSelf()\f[R]
Modifies the matrix by rotating itself around each axis by the specified
number of degrees.
Returns itself.
.TP
\f[B]DOMMatrix.rotateAxisAngleSelf()\f[R]
Modifies the matrix by rotating it by the specified angle around the
given vector.
Returns itself.
.TP
\f[B]DOMMatrix.rotateFromVectorSelf()\f[R]
Modifies the matrix by rotating it by the angle between the specified
vector and \f[CR](1, 0)\f[R].
Returns itself.
.TP
\f[B]DOMMatrix.setMatrixValue()\f[R]
Replaces the contents of the matrix with the matrix described by the
specified transform or transforms.
Returns itself.
.TP
\f[B]DOMMatrix.skewXSelf()\f[R]
Modifies the matrix by applying the specified skew transformation along
the X\-axis.
Returns itself.
.TP
\f[B]DOMMatrix.skewYSelf()\f[R]
Modifies the matrix by applying the specified skew transformation along
the Y\-axis.
Returns itself.
.SH STATIC METHODS
\f[I]This interface inherits methods from
\f[CI]DOMMatrixReadOnly\f[I].\f[R]
.TP
\f[B]fromFloat32Array()\f[R]
Creates a new mutable \f[CR]DOMMatrix\f[R] object given an array of
single\-precision (32\-bit) floating\-point values.
If the array has six values, the result is a 2D matrix; if the array has
16 values, the result is a 3D matrix.
Otherwise, a \f[CR]TypeError\f[R] exception is thrown.
.TP
\f[B]fromFloat64Array()\f[R]
Creates a new mutable \f[CR]DOMMatrix\f[R] object given an array of
double\-precision (64\-bit) floating\-point values.
If the array has six values, the result is a 2D matrix; if the array has
16 values, the result is a 3D matrix.
Otherwise, a \f[CR]TypeError\f[R] exception is thrown.
.TP
\f[B]fromMatrix()\f[R]
Creates a new mutable \f[CR]DOMMatrix\f[R] object given an existing
matrix or an object which provides the values for its properties.
.SH USAGE NOTES
The matrix defined by the \f[CR]DOMMatrix\f[R] interface is comprised of
four rows of four columns each.
While it\[cq]s beyond the scope of this article to explain the
mathematics involved, this 4×4 size is enough to describe any
transformation you might apply to either 2D or 3D geometries.
.PP
Here are the positions of the 16 elements (m_11 through m_44) which
comprise the 4×4 abstract matrix:
.PP
\ [m11m21m31m41m12m22m32m42m13m23m33m43m14m24m34m44] 
.PP
The \f[CR]DOMMatrix\f[R] interface is designed with the intent that it
will be used for all matrices within markup.
.SH SEE ALSO
.IP \[bu] 2
Its non\-modifiable counterpart, \f[CR]DOMMatrixReadOnly\f[R]
