.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "HighlightRegistry.entries" "JS" "December 2, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HighlightRegistry.entries \- HighlightRegistry: entries() method
.SH SYNOPSIS
The \f[B]\f[CB]entries()\f[B]\f[R] method of the
\f[CR]HighlightRegistry\f[R] interface returns a new Iterator object
that contains the \f[CR][name, highlight]\f[R] pairs for each element in
the \f[CR]HighlightRegistry\f[R] object, in insertion order.
.PP
\f[CR]HighlightRegistry\f[R] is a \f[CR]Map\f[R]\-like object, so this
is similar to using \f[CR]Map.entries()\f[R].
.SH SYNTAX
.IP
.EX
entries()
.EE
.SS Return value
A new iterator object that contains an array of
\f[CR][name, highlight]\f[R] for each \f[CR]Highlight\f[R] object in the
\f[CR]HighlightRegistry\f[R], in insertion order.
.SH EXAMPLES
The code snippet below creates and registers two new highlights, and
then logs the highlights and their names by using the iterator returned
by the \f[CR]entries()\f[R] method:
.IP
.EX
\f[B]const\f[R] myHighlight1 = \f[B]new\f[R] Highlight();
\f[B]const\f[R] myHighlight2 = \f[B]new\f[R] Highlight();

CSS.highlights.set(\[dq]first\-highlight\[dq], myHighlight1);
CSS.highlights.set(\[dq]second\-highlight\[dq], myHighlight2);

\f[B]const\f[R] iter = CSS.highlights.entries();

console.log(iter.next().value); \f[I]// [\[aq]first\-highlight\[aq], Highlight]\f[R]
console.log(iter.next().value); \f[I]// [\[aq]second\-highlight\[aq], Highlight]\f[R]
.EE
.PP
The following code example shows how to iterate over the highlights in
the registry by using a \f[CR]for...of\f[R] loop:
.IP
.EX
\f[B]const\f[R] myHighlight1 = \f[B]new\f[R] Highlight();
\f[B]const\f[R] myHighlight2 = \f[B]new\f[R] Highlight();

CSS.highlights.set(\[dq]first\-highlight\[dq], myHighlight1);
CSS.highlights.set(\[dq]second\-highlight\[dq], myHighlight2);

\f[B]for\f[R] (\f[B]const\f[R] [name, highlight] \f[B]of\f[R] CSS.highlights.entries()) {
  console.log(\[ga]Highlight ${name}\[ga], highlight);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
The CSS Custom Highlight API
.IP \[bu] 2
\c
.UR https://css-tricks.com/css-custom-highlight-api-early-look/
CSS Custom Highlight API: The Future of Highlighting Text Ranges on the
Web
.UE \c
