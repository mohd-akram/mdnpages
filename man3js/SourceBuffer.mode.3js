.\" Automatically generated by Pandoc 3.4
.\"
.TH "SourceBuffer.mode" "JS" "September 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SourceBuffer.mode \- SourceBuffer: mode property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]mode\f[B]\f[R] property of the \f[CR]SourceBuffer\f[R]
interface controls whether media segments can be appended to the
\f[CR]SourceBuffer\f[R] in any order, or in a strict sequence.
.PP
The two available values are:
.IP \[bu] 2
\f[CR]segments\f[R]: The media segment timestamps determine the order in
which the segments are played.
The segments can be appended to the \f[CR]SourceBuffer\f[R] in any
order.
.IP \[bu] 2
\f[CR]sequence\f[R]: The order in which the segments are appended to the
\f[CR]SourceBuffer\f[R] determines the order in which they are played.
Segment timestamps are generated automatically for the segments that
observe this order.
.PP
The mode value is initially set when the \f[CR]SourceBuffer\f[R] is
created using \f[CR]MediaSource.addSourceBuffer()\f[R].
If timestamps already exist for the media segments, then the value will
be set to \f[CR]segments\f[R]; if they don\[cq]t, then the value will be
set to \f[CR]sequence\f[R].
.PP
If you try to set the \f[CR]mode\f[R] property value to
\f[CR]segments\f[R] when the initial value is \f[CR]sequence\f[R], an
exception will be thrown.
The existing segment order must be maintained in \f[CR]sequence\f[R]
mode.
You can, however, change the value from \f[CR]segments\f[R] to
\f[CR]sequence\f[R].
It just means the play order will be fixed, and new timestamps generated
to reflect this.
.PP
This property cannot be changed during while the \f[CR]SourceBuffer\f[R]
is processing either an \f[CR]appendBuffer()\f[R] or \f[CR]remove()\f[R]
call.
.SH VALUE
A string.
.SS Exceptions
The following exceptions may be thrown when setting a new value for this
property:
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Thrown if an attempt was made to set the value to \f[CR]segments\f[R]
when the initial value is \f[CR]sequence\f[R].
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]SourceBuffer\f[R] object is being updated (i.e.
its \f[CR]SourceBuffer.updating\f[R] property is currently
\f[CR]true\f[R]), the last media segment appended to this
\f[CR]SourceBuffer\f[R] is incomplete, or this \f[CR]SourceBuffer\f[R]
has been removed from the \f[CR]MediaSource\f[R].
.SH EXAMPLES
This snippet sets the \f[CR]sourceBuffer\f[R] mode to
\f[CR]\[aq]sequence\[aq]\f[R] if it is currently set to
\f[CR]\[aq]segments\[aq]\f[R], thus setting the play order to the
sequence in which media segments are appended.
.IP
.EX
\f[B]const\f[R] curMode = sourceBuffer.mode;
\f[B]if\f[R] (curMode === \[dq]segments\[dq]) {
  sourceBuffer.mode = \[dq]sequence\[dq];
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]MediaSource\f[R]
.IP \[bu] 2
\f[CR]SourceBufferList\f[R]
