.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAYBUFFER.RESIZABLE" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ArrayBuffer.resizable \- ArrayBuffer.prototype.resizable
.SH SYNOPSIS
The \f[B]\f[CB]resizable\f[B]\f[R] accessor property of
\f[CR]ArrayBuffer\f[R] instances returns whether this array buffer can
be resized or not.
.IP
.EX
\f[B]const\f[R] buffer1 = \f[B]new\f[R] ArrayBuffer(8, { maxByteLength: 16 });
\f[B]const\f[R] buffer2 = \f[B]new\f[R] ArrayBuffer(8);

console.log(buffer1.resizable);
\f[I]// Expected output: true\f[R]

console.log(buffer2.resizable);
\f[I]// Expected output: false\f[R]
.EE
.SH DESCRIPTION
The \f[CR]resizable\f[R] property is an accessor property whose set
accessor function is \f[CR]undefined\f[R], meaning that you can only
read this property.
The value is established when the array is constructed.
If the \f[CR]maxByteLength\f[R] option was set in the constructor,
\f[CR]resizable\f[R] will return \f[CR]true\f[R]; if not, it will return
\f[CR]false\f[R].
.SH EXAMPLES
.SS Using resizable
In this example, we create a 8\-byte buffer that is resizable to a max
length of 16 bytes, then check its \f[CR]resizable\f[R] property,
resizing it if \f[CR]resizable\f[R] returns \f[CR]true\f[R]:
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8, { maxByteLength: 16 });

\f[B]if\f[R] (buffer.resizable) {
  console.log(\(dqBuffer is resizable!\(dq);
  buffer.resize(12);
}
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]ArrayBuffer\f[R]
.IP \(bu 2
\f[CR]ArrayBuffer.prototype.maxByteLength\f[R]
.IP \(bu 2
\f[CR]ArrayBuffer.prototype.resize()\f[R]
