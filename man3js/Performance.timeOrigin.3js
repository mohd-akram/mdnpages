.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Performance.timeOrigin" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Performance.timeOrigin \- Performance: timeOrigin property
.SH SYNOPSIS
The \f[B]\f[CB]timeOrigin\f[B]\f[R] read\-only property of the
\f[CR]Performance\f[R] interface returns the high resolution timestamp
that is used as the baseline for performance\-related timestamps.
.PP
In Window contexts, this value represents the time when navigation has
started.
In \f[CR]Worker\f[R] and \f[CR]ServiceWorker\f[R] contexts, this value
represents the time when the worker is run.
You can use this property to synchronize the time origins between the
contexts (see example below).
.RS
.PP
\f[B]Note:\f[R] The value of \f[CR]performance.timeOrigin\f[R] may
differ from the value returned by \f[CR]Date.now()\f[R] executed at the
time origin, because \f[CR]Date.now()\f[R] may have been impacted by
system and user clock adjustments, clock skew, etc.
The \f[CR]timeOrigin\f[R] property is a \c
.UR https://w3c.github.io/hr-time/#dfn-monotonic-clock
monotonic clock
.UE \c
\ which current time never decreases and which isn\[cq]t subject to
these adjustments.
.RE
.SH VALUE
A high resolution timestamp which considered to be the beginning of the
current document\[cq]s lifetime.
It\[cq]s calculated like this:
.IP \[bu] 2
If the script\[cq]s global object is a \f[CR]Window\f[R], the time
origin is determined as follows:
.RS 2
.IP \[bu] 2
If the current \f[CR]Document\f[R] is the first one loaded in the
\f[CR]Window\f[R], the time origin is the time at which the browser
context was created.
.IP \[bu] 2
If during the process of unloading the previous document which was
loaded in the window, a confirmation dialog was displayed to let the
user confirm whether or not to leave the previous page, the time origin
is the time at which the user confirmed that navigating to the new page
was acceptable.
.IP \[bu] 2
If neither of the above determines the time origin, then the time origin
is the time at which the navigation responsible for creating the
window\[cq]s current \f[CR]Document\f[R] took place.
.RE
.IP \[bu] 2
If the script\[cq]s global object is a \f[CR]WorkerGlobalScope\f[R]
(that is, the script is running as a web worker), the time origin is the
moment at which the worker was created.
.IP \[bu] 2
In all other cases, the time origin is undefined.
.SH EXAMPLES
.SS Synchronizing time between contexts
To account for the different time origins in window and worker contexts,
you can translate the timestamps coming from worker scripts with the
help of the \f[CR]timeOrigin\f[R] property, so the timings synchronize
for the entire application.
.PP
In worker.js
.IP
.EX
self.addEventListener(\[dq]connect\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] port = event.ports[0];

  port.onmessage = \f[B]function\f[R] (event) {
    \f[B]const\f[R] workerTaskStart = performance.now();
    \f[I]// doSomeWork()\f[R]
    \f[B]const\f[R] workerTaskEnd = performance.now();
  };

  \f[I]// Convert worker\-relative timestamps to absolute timestamps, then send to the window\f[R]
  port.postMessage({
    startTime: workerTaskStart + performance.timeOrigin,
    endTime: workerTaskEnd + performance.timeOrigin,
  });
});
.EE
.PP
In main.js
.IP
.EX
\f[B]const\f[R] worker = \f[B]new\f[R] SharedWorker(\[dq]worker.js\[dq]);
worker.port.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  \f[I]// Convert absolute timestamps into window\-relative timestamps\f[R]
  \f[B]const\f[R] workerTaskStart = event.data.startTime \- performance.timeOrigin;
  \f[B]const\f[R] workerTaskEnd = event.data.endTime \- performance.timeOrigin;

  console.log(\[dq]Worker task start: \[dq], workerTaskStart);
  console.log(\[dq]Worker task end: \[dq], workerTaskEnd);
});
.EE
