.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Text.wholeText" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Text.wholeText \- Text: wholeText property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]wholeText\f[B]\f[R] property of the
\f[CR]Text\f[R] interface returns the full text of all \f[CR]Text\f[R]
nodes logically adjacent to the node.
The text is concatenated in document order.
This allows specifying any text node and obtaining all adjacent text as
a single string.
.RS
.PP
\f[B]Note:\f[R] This is similar to call \f[CR]Node.normalize()\f[R]
followed by reading the text value, but without modifying the tree.
.RE
.SH VALUE
A string with the concatenated text.
.SH EXAMPLE
Suppose you have the following simple paragraph within your webpage:
.IP
.EX
<\f[B]p\f[R]>
  Through\-hiking is great!
  <\f[B]strong\f[R]>No insipid election coverage!</\f[B]strong\f[R]> However,
  <\f[B]a\f[R] href=\[dq]https://en.wikipedia.org/wiki/Absentee_ballot\[dq]>casting a ballot</\f[B]a\f[R]>
  is tricky.
</\f[B]p\f[R]>
.EE
.PP
You decide you don\[cq]t like the middle sentence, so you remove it:
.IP
.EX
\f[B]const\f[R] paragraph = document.querySelector(\[dq]p\[dq]); \f[I]// Reads the paragraph\f[R]
paragraph.removeChild(paragraph.childNodes[1]); \f[I]// Delete the strong element\f[R]
.EE
.PP
Now you end up with \f[I]\[lq]Through\-hiking is great!
However, casting a ballot is tricky.\[rq]\f[R], with two nodes before
the hyperlink:
.IP "1." 3
A \f[CR]Text\f[R] containing the string
\f[CR]\[dq]Through\-hiking is great!\[dq]\f[R]
.IP "2." 3
A second \f[CR]Text\f[R] node containing the string
\f[CR]\[dq] However, \[dq]\f[R]
.PP
To get those two nodes at once, you would call
\f[CR]paragraph.childNodes[0].wholeText\f[R]:
.IP
.EX
console.log(\[ga]\[aq]${paragraph.childNodes[0].wholeText}\[aq]\[ga]); \f[I]// \[aq]Through\-hiking is great!   However, \[aq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
The \f[CR]Text\f[R] interface it belongs to.
