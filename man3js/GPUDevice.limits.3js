.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.LIMITS" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.limits \- GPUDevice: limits property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]limits\f[B]\f[R] read\-only property of the
\f[CR]GPUDevice\f[R] interface returns a \f[CR]GPUSupportedLimits\f[R]
object that describes the limits supported by the device.
All limit values will be included, and the limits requested during the
creation of the device (i.e., when \f[CR]GPUAdapter.requestDevice()\f[R]
is called) will be reflected in those values.
.RS
.PP
\f[B]Note:\f[R] Not all limits will be reported as expected, even if
they are supported by the underlying hardware.
See \f[CR]GPUAdapter.limits\f[R] for more details.
.RE
.SH VALUE
A \f[CR]GPUSupportedLimits\f[R] object instance.
.SH EXAMPLES
In the following code we query the \f[CR]GPUAdapter.limits\f[R] value of
\f[CR]maxBindGroups\f[R] to see if it is equal to or greater than 6.
Our theoretical example app ideally needs 6 bind groups, so if the
returned value is >= 6, we add a maximum limit of 6 to the
\f[CR]requiredLimits\f[R] object.
.PP
We then check that the expected limit has been set on the resulting
device by logging its value to the console.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();
  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[B]const\f[R] requiredLimits = {};

  \f[I]// App ideally needs 6 bind groups, so we\(aqll try to request what the app needs\f[R]
  \f[B]if\f[R] (adapter.limits.maxBindGroups >= 6) {
    requiredLimits.maxBindGroups = 6;
  }

  \f[B]const\f[R] device = \f[B]await\f[R] adapter.requestDevice({
    requiredLimits,
  });

  console.log(device.limits.maxBindGroups);

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
