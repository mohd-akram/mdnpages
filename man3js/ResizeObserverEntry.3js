.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RESIZEOBSERVERENTRY" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ResizeObserverEntry \- ResizeObserverEntry
.SH SYNOPSIS
The \f[B]\f[CB]ResizeObserverEntry\f[B]\f[R] interface represents the
object passed to the \f[CR]ResizeObserver()\f[R] constructor\(cqs
callback function, which allows you to access the new dimensions of the
\f[CR]Element\f[R] or \f[CR]SVGElement\f[R] being observed.
.SH INSTANCE PROPERTIES
.TP
\f[B]ResizeObserverEntry.borderBoxSize\f[R] \f[I](read\-only)\f[R]
An array of objects containing the new border box size of the observed
element when the callback is run.
.TP
\f[B]ResizeObserverEntry.contentBoxSize\f[R] \f[I](read\-only)\f[R]
An array of objects containing the new content box size of the observed
element when the callback is run.
.TP
\f[B]ResizeObserverEntry.devicePixelContentBoxSize\f[R] \f[I](read\-only)\f[R]
An array of objects containing the new content box size in device pixels
of the observed element when the callback is run.
.TP
\f[B]ResizeObserverEntry.contentRect\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMRectReadOnly\f[R] object containing the new size of the
observed element when the callback is run.
Note that this is now a legacy property that is retained in the spec for
backward\-compatibility reasons only.
.TP
\f[B]ResizeObserverEntry.target\f[R] \f[I](read\-only)\f[R]
A reference to the \f[CR]Element\f[R] or \f[CR]SVGElement\f[R] being
observed.
.RS
.PP
\f[B]Note:\f[R] The content box is the box in which content can be
placed, meaning the border box minus the padding and border width.
The border box encompasses the content, padding, and border.
See The box model for further explanation.
.RE
.SH INSTANCE METHODS
None.
.SH EXAMPLES
The following snippet is taken from the \c
.UR https://mdn.github.io/dom-examples/resize-observer/resize-observer-text.html
resize\-observer\-text.html
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/blob/main/resize-observer/resize-observer-text.html
see source
.UE \c
) example.
.PP
Note that the code covers three different compatibility cases:
.IP \(bu 2
Some old browsers may support \f[CR]contentRect\f[R] but not
\f[CR]contentBoxSize\f[R].
.IP \(bu 2
Old versions of Firefox support \f[CR]contentBoxSize\f[R], but
incorrectly implemented it as a single object rather than an array.
.IP \(bu 2
Modern browsers support \f[CR]contentBoxSize\f[R] as an array of
objects, to enable them to report box sizes for fragmented elements (for
example, in a multi\-column scenario).
.IP
.EX
\f[B]const\f[R] resizeObserver = \f[B]new\f[R] ResizeObserver((entries) \f[B]=>\f[R] {
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] entries) {
    \f[B]if\f[R] (entry.contentBoxSize) {
      \f[I]// The standard makes contentBoxSize an array...\f[R]
      \f[B]if\f[R] (entry.contentBoxSize[0]) {
        h1Elem.style.fontSize =
          Math.max(1.5, entry.contentBoxSize[0].inlineSize / 200) + \(dqrem\(dq;
        pElem.style.fontSize =
          Math.max(1, entry.contentBoxSize[0].inlineSize / 600) + \(dqrem\(dq;
      } \f[B]else\f[R] {
        \f[I]// \&... but old versions of Firefox treat it as a single item\f[R]
        h1Elem.style.fontSize =
          Math.max(1.5, entry.contentBoxSize.inlineSize / 200) + \(dqrem\(dq;
        pElem.style.fontSize =
          Math.max(1, entry.contentBoxSize.inlineSize / 600) + \(dqrem\(dq;
      }
    } \f[B]else\f[R] {
      h1Elem.style.fontSize =
        Math.max(1.5, entry.contentRect.width / 200) + \(dqrem\(dq;
      pElem.style.fontSize = Math.max(1, entry.contentRect.width / 600) + \(dqrem\(dq;
    }
  }
  console.log(\(dqSize changed\(dq);
});

resizeObserver.observe(divElem);
.EE
