.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ServiceWorkerRegistration.unregister" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerRegistration.unregister \- ServiceWorkerRegistration:
unregister() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]unregister()\f[B]\f[R] method of the
\f[CR]ServiceWorkerRegistration\f[R] interface unregisters the service
worker registration and returns a \f[CR]Promise\f[R].
The promise will resolve to \f[CR]false\f[R] if no registration was
found, otherwise it resolves to \f[CR]true\f[R] irrespective of whether
unregistration happened or not (it may not unregister if someone else
just called \f[CR]ServiceWorkerContainer.register()\f[R] with the same
scope.)
The service worker will finish any ongoing operations before it is
unregistered.
.SH SYNTAX
.IP
.EX
unregister()
.EE
.SS Parameters
None.
.SS Return value
\f[CR]Promise\f[R] resolves with a boolean indicating whether the
service worker has unregistered or not.
.SH EXAMPLES
The following simple example registers a service worker example, but
then immediately unregisters it again:
.IP
.EX
\f[B]if\f[R] (\[dq]serviceWorker\[dq] \f[B]in\f[R] navigator) {
  navigator.serviceWorker
    .register(\[dq]/sw.js\[dq], { scope: \[dq]/\[dq] })
    .then((registration) \f[B]=>\f[R] {
      \f[I]// registration worked\f[R]
      console.log(\[dq]Registration succeeded.\[dq]);
      registration.unregister().then((boolean) \f[B]=>\f[R] {
        \f[I]// if boolean = true, unregister is successful\f[R]
      });
    })
    .catch((error) \f[B]=>\f[R] {
      \f[I]// registration failed\f[R]
      console.error(\[ga]Registration failed with ${error}\[ga]);
    });
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \[bu] 2
Using web workers
