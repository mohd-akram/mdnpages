.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "CSPViolationReportBody" "JS" "August 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSPViolationReportBody \- CSPViolationReportBody
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[CR]CSPViolationReportBody\f[R] interface is an extension of the
Reporting API that represents the body of a Content Security Policy
(CSP) violation report.
.PP
CSP violations are thrown when the webpage attempts to load a resource
that violates the policy set by the \f[CR]Content\-Security\-Policy\f[R]
HTTP header.
.PP
CSP violation reports are returned in the reports parameter of
\f[CR]ReportingObserver\f[R] callbacks that have a \f[CR]type\f[R] of
\f[CR]\[dq]csp\-violation\[dq]\f[R].
The \f[CR]body\f[R] property of those reports is an instance of
\f[CR]CSPViolationReportBody\f[R].
.PP
CSP violation reports may also be sent as JSON objects to the endpoint
specified in the \f[CR]report\-to\f[R] policy directive of the
\f[CR]Content\-Security\-Policy\f[R] header.
These reports similarly have a \f[CR]type\f[R] of
\f[CR]\[dq]csp\-violation\[dq]\f[R], and a \f[CR]body\f[R] property
containing a serialization of an instance of this interface.
.RS
.PP
\f[B]Note:\f[R] CSP violation reports sent by the Reporting API, when an
endpoint is specified using the CSP \f[CR]report\-to\f[R] directive, are
similar (but not identical) to the \[lq]CSP report\[rq] JSON objects
sent when endpoints are specified using the \f[CR]report\-uri\f[R]
directive.
The Reporting API and \f[CR]report\-to\f[R] directive are intended to
replace the older report format and the \f[CR]report\-uri\f[R]
directive.
.RE
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]ReportBody\f[I].\f[R]
.TP
\f[B]CSPViolationReportBody.blockedURL\f[R] \f[I](read\-only)\f[R]
A string representing the URL of the resource that was blocked because
it violates the CSP.
.TP
\f[B]CSPViolationReportBody.columnNumber\f[R] \f[I](read\-only)\f[R]
The column number in the script at which the violation occurred.
.TP
\f[B]CSPViolationReportBody.disposition\f[R] \f[I](read\-only)\f[R]
Indicates how the violated policy is configured to be treated by the
user agent.
This will be \f[CR]\[dq]enforce\[dq]\f[R] or
\f[CR]\[dq]report\[dq]\f[R].
.TP
\f[B]CSPViolationReportBody.documentURL\f[R] \f[I](read\-only)\f[R]
A string representing the URL of the document or worker in which the
violation was found.
.TP
\f[B]CSPViolationReportBody.effectiveDirective\f[R] \f[I](read\-only)\f[R]
A string representing the directive whose enforcement uncovered the
violation.
.TP
\f[B]CSPViolationReportBody.lineNumber\f[R] \f[I](read\-only)\f[R]
The line number in the script at which the violation occurred.
.TP
\f[B]CSPViolationReportBody.originalPolicy\f[R] \f[I](read\-only)\f[R]
A string containing the policy whose enforcement uncovered the
violation.
.TP
\f[B]CSPViolationReportBody.referrer\f[R] \f[I](read\-only)\f[R]
A string representing the URL for the referrer of the resources whose
policy was violated, or \f[CR]null\f[R].
.TP
\f[B]CSPViolationReportBody.sample\f[R] \f[I](read\-only)\f[R]
A string representing a sample of the resource that caused the
violation, usually the first 40 characters.
This will only be populated if the resource is an inline script, event
handler, or style \[em] external resources causing a violation will not
generate a sample.
.TP
\f[B]CSPViolationReportBody.sourceFile\f[R] \f[I](read\-only)\f[R]
If the violation occurred as a result of a script, this will be the URL
of the script; otherwise, it will be \f[CR]null\f[R].
Both \f[CR]columnNumber\f[R] and \f[CR]lineNumber\f[R] should have
non\-null values if this property is not \f[CR]null\f[R].
.TP
\f[B]CSPViolationReportBody.statusCode\f[R] \f[I](read\-only)\f[R]
A number representing the HTTP status code of the document or worker in
which the violation occurred.
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]ReportBody\f[I].\f[R]
.TP
\f[B]CSPViolationReportBody.toJSON()\f[R]
A \f[I]serializer\f[R] which returns a JSON representation of the
\f[CR]CSPViolationReportBody\f[R] object.
.SH EXAMPLES
.SS Obtaining a \f[CR]CSPViolationReportBody\f[R] object
To obtain a \f[CR]CSPViolationReportBody\f[R] object, you must configure
your page so that a CSP violation will occur.
In this example, we will set our CSP to only allow content from the
site\[cq]s own origin, and then attempt to load a script from
\f[CR]apis.google.com\f[R], which is an external origin.
.PP
First, we will set our \f[CR]Content\-Security\-Policy\f[R] header:
.IP
.EX
Content\-Security\-Policy: default\-src \[aq]self\[aq];
.EE
.PP
Then, we will attempt to load an external script:
.IP
.EX
\f[I]<!\-\- This should generate a CSP violation \-\->\f[R]
<\f[B]script\f[R] src=\[dq]https://apis.google.com/js/platform.js\[dq]></\f[B]script\f[R]>
.EE
.PP
Finally, we will create a new \f[CR]ReportingObserver\f[R] object to
listen for CSP violations (this will need to be loaded from the same
location, before the script that causes the violation).
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver(
  (reports, observer) \f[B]=>\f[R] {
    \f[B]const\f[R] cspViolation = reports[0];
  },
  {
    types: [\[dq]csp\-violation\[dq]],
    buffered: \f[B]true\f[R],
  },
);

observer.observe();
.EE
.PP
If we were to log the violation report object, it would look similar to
the object below.
Note that the \f[CR]body\f[R] is an instance of the
\f[CR]CSPViolationReportBody\f[R] and the \f[CR]type\f[R] is
\f[CR]\[dq]csp\-violation\[dq]\f[R].
.IP
.EX
{
    \[dq]type\[dq]: \[dq]csp\-violation\[dq],
    \[dq]url\[dq]: \[dq]http://127.0.0.1:9999/\[dq],
    \[dq]body\[dq]: {
        \[dq]sourceFile\[dq]: \f[B]null\f[R],
        \[dq]lineNumber\[dq]: \f[B]null\f[R],
        \[dq]columnNumber\[dq]: \f[B]null\f[R],
        \[dq]documentURL\[dq]: \[dq]http://127.0.0.1:9999/\[dq],
        \[dq]referrer\[dq]: \[dq]\[dq],
        \[dq]blockedURL\[dq]: \[dq]https://apis.google.com/js/platform.js\[dq],
        \[dq]effectiveDirective\[dq]: \[dq]script\-src\-elem\[dq],
        \[dq]originalPolicy\[dq]: \[dq]default\-src \[aq]self\[aq];\[dq],
        \[dq]sample\[dq]: \[dq]\[dq],
        \[dq]disposition\[dq]: \[dq]enforce\[dq],
        \[dq]statusCode\[dq]: 200
    }
}
.EE
.SS Sending a CSP violation report
Configuring a web page to send a CSP violation report is similar to the
previous example.
As before, you need to configure your page so that there is a violation.
.PP
In addition, you also need to specify the endpoint(s) where the report
will be sent.
A server specifies endpoints using the \f[CR]Reporting\-Endpoints\f[R]
response header: these must be secure URLs (HTTPS).
The CSP \f[CR]report\-to\f[R] directive is then used to specify that a
particular endpoint is used for reporting CSP violations:
.IP
.EX
Reporting\-Endpoints: csp\-endpoint=\[dq]https://example.com/csp\-report\-to\[dq]
Content\-Security\-Policy: default\-src \[aq]self\[aq]; report\-to csp\-endpoint
.EE
.PP
As before, we can trigger the violation by loading an external script
from a location that is not allowed by our CSP header:
.IP
.EX
\f[I]<!\-\- This should generate a CSP violation \-\->\f[R]
<\f[B]script\f[R] src=\[dq]https://apis.google.com/js/platform.js\[dq]></\f[B]script\f[R]>
.EE
.PP
The violation report will then be sent to the indicated endpoint as a
JSON file.
As you can see from the example below, the \f[CR]type\f[R] is
\f[CR]\[dq]csp\-violation\[dq]\f[R] and the \f[CR]body\f[R] property is
a serialization of the \f[CR]CSPViolationReportBody\f[R] object:
.IP
.EX
[
  {
    \[dq]age\[dq]: 53531,
    \[dq]body\[dq]: {
      \[dq]blockedURL\[dq]: \[dq]inline\[dq],
      \[dq]columnNumber\[dq]: 59,
      \[dq]disposition\[dq]: \[dq]enforce\[dq],
      \[dq]documentURL\[dq]: \[dq]https://example.com/csp\-report\-to\[dq],
      \[dq]effectiveDirective\[dq]: \[dq]script\-src\-elem\[dq],
      \[dq]lineNumber\[dq]: 1441,
      \[dq]originalPolicy\[dq]: \[dq]default\-src \[aq]self\[aq]; report\-to csp\-endpoint\[dq],
      \[dq]referrer\[dq]: \[dq]https://www.google.com/\[dq],
      \[dq]sample\[dq]: \[dq]console.log(\[rs]\[dq]lo\[rs]\[dq])\[dq],
      \[dq]sourceFile\[dq]: \[dq]https://example.com/csp\-report\-to\[dq],
      \[dq]statusCode\[dq]: 200
    },
    \[dq]type\[dq]: \[dq]csp\-violation\[dq],
    \[dq]url\[dq]: \[dq]https://example.com/csp\-report\-to\[dq],
    \[dq]user_agent\[dq]: \[dq]Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\[dq]
  }
]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ReportBody\f[R]
.IP \[bu] 2
\f[CR]ReportingObserver\f[R]
.IP \[bu] 2
\f[CR]Content\-Security\-Policy\f[R]
.IP \[bu] 2
\f[CR]SecurityPolicyViolationEvent\f[R]
