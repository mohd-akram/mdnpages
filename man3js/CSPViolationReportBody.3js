.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CSPViolationReportBody" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSPViolationReportBody \- CSPViolationReportBody
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[CR]CSPViolationReportBody\f[R] interface contains the report data
for a Content Security Policy (CSP) violation.
CSP violations are thrown when the webpage attempts to load a resource
that violates the CSP set by the \f[CR]Content\-Security\-Policy\f[R]
HTTP header.
.RS
.PP
\f[B]Note:\f[R] this interface is similar, but not identical to, the
JSON objects sent back to the \f[CR]report\-uri\f[R] or
\f[CR]report\-to\f[R] policy directive of the
\f[CR]Content\-Security\-Policy\f[R] header.
.RE
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]ReportBody\f[I].\f[R]
.TP
\f[B]CSPViolationReportBody.blockedURL\f[R] \f[I](read\-only)\f[R]
A string representing the URL of the resource that was blocked because
it violates the CSP.
.TP
\f[B]CSPViolationReportBody.columnNumber\f[R] \f[I](read\-only)\f[R]
The column number in the script at which the violation occurred.
.TP
\f[B]CSPViolationReportBody.disposition\f[R] \f[I](read\-only)\f[R]
Indicates how the violated policy is configured to be treated by the
user agent.
This will be \f[CR]\[dq]enforce\[dq]\f[R] or
\f[CR]\[dq]report\[dq]\f[R].
.TP
\f[B]CSPViolationReportBody.documentURL\f[R] \f[I](read\-only)\f[R]
A string representing the URL of the document or worker in which the
violation was found.
.TP
\f[B]CSPViolationReportBody.effectiveDirective\f[R] \f[I](read\-only)\f[R]
A string representing the directive whose enforcement uncovered the
violation.
.TP
\f[B]CSPViolationReportBody.lineNumber\f[R] \f[I](read\-only)\f[R]
The line number in the script at which the violation occurred.
.TP
\f[B]CSPViolationReportBody.originalPolicy\f[R] \f[I](read\-only)\f[R]
A string containing the policy whose enforcement uncovered the
violation.
.TP
\f[B]CSPViolationReportBody.referrer\f[R] \f[I](read\-only)\f[R]
A string representing the URL for the referrer of the resources whose
policy was violated, or \f[CR]null\f[R].
.TP
\f[B]CSPViolationReportBody.sample\f[R] \f[I](read\-only)\f[R]
A string representing a sample of the resource that caused the
violation, usually the first 40 characters.
This will only be populated if the resource is an inline script, event
handler, or style \[em] external resources causing a violation will not
generate a sample.
.TP
\f[B]CSPViolationReportBody.sourceFile\f[R] \f[I](read\-only)\f[R]
If the violation occurred as a result of a script, this will be the URL
of the script; otherwise, it will be \f[CR]null\f[R].
Both \f[CR]columnNumber\f[R] and \f[CR]lineNumber\f[R] should have
non\-null values if this property is not \f[CR]null\f[R].
.TP
\f[B]CSPViolationReportBody.statusCode\f[R] \f[I](read\-only)\f[R]
A number representing the HTTP status code of the document or worker in
which the violation occurred.
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]ReportBody\f[I].\f[R]
.TP
\f[B]CSPViolationReportBody.toJSON()\f[R]
A \f[I]serializer\f[R] which returns a JSON representation of the
\f[CR]CSPViolationReportBody\f[R] object.
.SH EXAMPLES
.SS Obtaining a \f[CR]CSPViolationReportBody\f[R] object
To obtain a \f[CR]CSPViolationReportBody\f[R] object, you must configure
your page so that a CSP violation will occur.
In this example, we will set our CSP to only allow content from the
site\[cq]s own origin, and then attempt to load a script from
\f[CR]apis.google.com\f[R], which is an external origin.
.PP
First, we will set our \f[CR]Content\-Security\-Policy\f[R] header:
.IP
.EX
Content\-Security\-Policy: default\-src \[aq]self\[aq];
.EE
.PP
Then, we will attempt to load an external script:
.IP
.EX
\f[I]<!\-\- This should generate a CSP violation \-\->\f[R]
<\f[B]script\f[R] src=\[dq]https://apis.google.com/js/platform.js\[dq]></\f[B]script\f[R]>
.EE
.PP
Finally, we will create a new \f[CR]ReportingObserver\f[R] object to
listen for CSP violations.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver(
  (reports, observer) \f[B]=>\f[R] {
    \f[B]const\f[R] cspViolation = reports[0].body;
  },
  {
    types: [\[dq]csp\-violation\[dq]],
    buffered: \f[B]true\f[R],
  },
);

observer.observe();
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ReportBody\f[R]
.IP \[bu] 2
\f[CR]ReportingObserver\f[R]
.IP \[bu] 2
\f[CR]Content\-Security\-Policy\f[R]
.IP \[bu] 2
\f[CR]SecurityPolicyViolationEvent\f[R]
