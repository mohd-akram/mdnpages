.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CSPVIOLATIONREPORTBODY" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSPViolationReportBody \- CSPViolationReportBody
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[CR]CSPViolationReportBody\f[R] interface is an extension of the
Reporting API that represents the body of a Content Security Policy
(CSP) violation report.
.PP
CSP violations are thrown when the webpage attempts to load a resource
that violates the policy set by the \f[CR]Content\-Security\-Policy\f[R]
HTTP header.
.PP
CSP violation reports are returned in the reports parameter of
\f[CR]ReportingObserver\f[R] callbacks that have a \f[CR]type\f[R] of
\f[CR]\(dqcsp\-violation\(dq\f[R].
The \f[CR]body\f[R] property of those reports is an instance of
\f[CR]CSPViolationReportBody\f[R].
.PP
CSP violation reports may also be sent as JSON objects to the endpoint
specified in the \f[CR]report\-to\f[R] policy directive of the
\f[CR]Content\-Security\-Policy\f[R] header.
These reports similarly have a \f[CR]type\f[R] of
\f[CR]\(dqcsp\-violation\(dq\f[R], and a \f[CR]body\f[R] property
containing a serialization of an instance of this interface.
.RS
.PP
\f[B]Note:\f[R] CSP violation reports sent by the Reporting API, when an
endpoint is specified using the CSP \f[CR]report\-to\f[R] directive, are
similar (but not identical) to the \(lqCSP report\(rq JSON objects sent
when endpoints are specified using the \f[CR]report\-uri\f[R] directive.
The Reporting API and \f[CR]report\-to\f[R] directive are intended to
replace the older report format and the \f[CR]report\-uri\f[R]
directive.
.RE
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]ReportBody\f[I].\f[R]
.TP
\f[B]CSPViolationReportBody.blockedURL\f[R] \f[I](read\-only)\f[R]
A string representing either the type or the URL of the resource that
was blocked because it violates the CSP.
.TP
\f[B]CSPViolationReportBody.columnNumber\f[R] \f[I](read\-only)\f[R]
The column number in the script at which the violation occurred.
.TP
\f[B]CSPViolationReportBody.disposition\f[R] \f[I](read\-only)\f[R]
Indicates how the violated policy is configured to be treated by the
user agent.
This will be \f[CR]\(dqenforce\(dq\f[R] or \f[CR]\(dqreport\(dq\f[R].
.TP
\f[B]CSPViolationReportBody.documentURL\f[R] \f[I](read\-only)\f[R]
A string representing the URL of the document or worker in which the
violation was found.
.TP
\f[B]CSPViolationReportBody.effectiveDirective\f[R] \f[I](read\-only)\f[R]
A string representing the directive whose enforcement uncovered the
violation.
.TP
\f[B]CSPViolationReportBody.lineNumber\f[R] \f[I](read\-only)\f[R]
The line number in the script at which the violation occurred.
.TP
\f[B]CSPViolationReportBody.originalPolicy\f[R] \f[I](read\-only)\f[R]
A string containing the policy whose enforcement uncovered the
violation.
.TP
\f[B]CSPViolationReportBody.referrer\f[R] \f[I](read\-only)\f[R]
A string representing the URL for the referrer of the resources whose
policy was violated, or \f[CR]null\f[R].
.TP
\f[B]CSPViolationReportBody.sample\f[R] \f[I](read\-only)\f[R]
A string representing a sample of the resource that caused the
violation, usually the first 40 characters.
This will only be populated if the resource is an inline script, event
handler, or style \(em external resources causing a violation will not
generate a sample.
.TP
\f[B]CSPViolationReportBody.sourceFile\f[R] \f[I](read\-only)\f[R]
If the violation occurred as a result of a script, this will be the URL
of the script; otherwise, it will be \f[CR]null\f[R].
Both \f[CR]columnNumber\f[R] and \f[CR]lineNumber\f[R] should have
non\-null values if this property is not \f[CR]null\f[R].
.TP
\f[B]CSPViolationReportBody.statusCode\f[R] \f[I](read\-only)\f[R]
A number representing the HTTP status code of the document or worker in
which the violation occurred.
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]ReportBody\f[I].\f[R]
.TP
\f[B]CSPViolationReportBody.toJSON()\f[R]
A \f[I]serializer\f[R] which returns a JSON representation of the
\f[CR]CSPViolationReportBody\f[R] object.
.SH EXAMPLES
.SS Obtaining a \f[CR]CSPViolationReportBody\f[R] object
To obtain a \f[CR]CSPViolationReportBody\f[R] object, you must configure
your page so that a CSP violation will occur.
In this example, we will set our CSP to only allow content from the
site\(cqs own origin, and then attempt to load a script from
\f[CR]apis.google.com\f[R], which is an external origin.
.PP
First, we will set our \f[CR]Content\-Security\-Policy\f[R] header in
the HTTP response:
.IP
.EX
Content\-Security\-Policy: default\-src \(aqself\(aq;
.EE
.PP
or in the HTML \f[CR]<meta>\f[R] element:
.IP
.EX
<\f[B]meta\f[R] http\-equiv=\(dqContent\-Security\-Policy\(dq content=\(dqdefault\-src \(aqself\(aq\(dq />
.EE
.PP
Then, we will attempt to load an external script:
.IP
.EX
\f[I]<!\-\- This should generate a CSP violation \-\->\f[R]
<\f[B]script\f[R] src=\(dqhttps://apis.google.com/js/platform.js\(dq></\f[B]script\f[R]>
.EE
.PP
Finally, we will create a new \f[CR]ReportingObserver\f[R] object to
listen for CSP violations (this will need to be loaded from the same
location, before the script that causes the violation).
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver(
  (reports, observer) \f[B]=>\f[R] {
    reports.forEach((violation) \f[B]=>\f[R] {
      console.log(violation);
      console.log(JSON.stringify(violation));
    });
  },
  {
    types: [\(dqcsp\-violation\(dq],
    buffered: \f[B]true\f[R],
  },
);

observer.observe();
.EE
.PP
Above we log the each violation report object and a JSON\-string version
of the object, which might look similar to the object below.
Note that the \f[CR]body\f[R] is an instance of the
\f[CR]CSPViolationReportBody\f[R] and the \f[CR]type\f[R] is
\f[CR]\(dqcsp\-violation\(dq\f[R].
.IP
.EX
{
  \(dqtype\(dq: \(dqcsp\-violation\(dq,
  \(dqurl\(dq: \(dqhttp://127.0.0.1:9999/\(dq,
  \(dqbody\(dq: {
    \(dqsourceFile\(dq: \f[B]null\f[R],
    \(dqlineNumber\(dq: \f[B]null\f[R],
    \(dqcolumnNumber\(dq: \f[B]null\f[R],
    \(dqdocumentURL\(dq: \(dqhttp://127.0.0.1:9999/\(dq,
    \(dqreferrer\(dq: \(dq\(dq,
    \(dqblockedURL\(dq: \(dqhttps://apis.google.com/js/platform.js\(dq,
    \(dqeffectiveDirective\(dq: \(dqscript\-src\-elem\(dq,
    \(dqoriginalPolicy\(dq: \(dqdefault\-src \(aqself\(aq;\(dq,
    \(dqsample\(dq: \(dq\(dq,
    \(dqdisposition\(dq: \(dqenforce\(dq,
    \(dqstatusCode\(dq: 200
  }
}
.EE
.SS Sending a CSP violation report
Configuring a web page to send a CSP violation report is similar to the
previous example.
As before, you need to configure your page so that there is a violation.
.PP
In addition, you also need to specify the endpoint(s) where the report
will be sent.
A server specifies endpoints using the \f[CR]Reporting\-Endpoints\f[R]
response header: these must be secure URLs (HTTPS).
The CSP \f[CR]report\-to\f[R] directive is then used to specify that a
particular endpoint is used for reporting CSP violations:
.IP
.EX
Reporting\-Endpoints: csp\-endpoint=\(dqhttps://example.com/csp\-report\-to\(dq
Content\-Security\-Policy: default\-src \(aqself\(aq; report\-to csp\-endpoint
.EE
.PP
As before, we can trigger a violation by loading an external script from
a location that is not allowed by our CSP header:
.IP
.EX
\f[I]<!\-\- This should generate a CSP violation \-\->\f[R]
<\f[B]script\f[R] src=\(dqhttps://apis.google.com/js/platform.js\(dq></\f[B]script\f[R]>
.EE
.PP
The violation report will then be sent to the indicated endpoint as a
JSON file.
As you can see from the example below, the \f[CR]type\f[R] is
\f[CR]\(dqcsp\-violation\(dq\f[R] and the \f[CR]body\f[R] property is a
serialization of the \f[CR]CSPViolationReportBody\f[R] object:
.IP
.EX
[
  {
    \(dqage\(dq: 53531,
    \(dqbody\(dq: {
      \(dqblockedURL\(dq: \(dqinline\(dq,
      \(dqcolumnNumber\(dq: 59,
      \(dqdisposition\(dq: \(dqenforce\(dq,
      \(dqdocumentURL\(dq: \(dqhttps://example.com/csp\-report\-to\(dq,
      \(dqeffectiveDirective\(dq: \(dqscript\-src\-elem\(dq,
      \(dqlineNumber\(dq: 1441,
      \(dqoriginalPolicy\(dq: \(dqdefault\-src \(aqself\(aq; report\-to csp\-endpoint\(dq,
      \(dqreferrer\(dq: \(dqhttps://www.google.com/\(dq,
      \(dqsample\(dq: \(dq\(dq,
      \(dqsourceFile\(dq: \(dqhttps://example.com/csp\-report\-to\(dq,
      \(dqstatusCode\(dq: 200
    },
    \(dqtype\(dq: \(dqcsp\-violation\(dq,
    \(dqurl\(dq: \(dqhttps://example.com/csp\-report\-to\(dq,
    \(dquser_agent\(dq: \(dqMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\(dq
  }
]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]ReportBody\f[R]
.IP \(bu 2
\f[CR]ReportingObserver\f[R]
.IP \(bu 2
\f[CR]Content\-Security\-Policy\f[R]
.IP \(bu 2
\f[CR]SecurityPolicyViolationEvent\f[R]
