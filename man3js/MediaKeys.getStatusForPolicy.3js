.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "MediaKeys.getStatusForPolicy" "JS" "September 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaKeys.getStatusForPolicy \- MediaKeys: getStatusForPolicy() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[CR]getStatusForPolicy()\f[R] method of the \f[CR]MediaKeys\f[R]
interface is used to check whether the Content Decryption Module (CDM)
would allow the presentation of encrypted media data using the keys,
based on the specified policy requirements.
.PP
The method returns a \f[CR]Promise\f[R] that resolves with a string that
indicates the status of the key with respect to all the specified policy
requirements.
If the value resolves to \f[CR]\[dq]usable\[dq]\f[R] then the content
can be decrypted and presented at the ideal quality.
Other values indicate reasons why the keys cannot be used for presenting
the content; in some cases they hint at fallback options, such as
playing the content at a lower quality.
.PP
The policy restrictions currently only include a restriction on the
minimum supported HDCP version.
.PP
Note that the method checks a \[lq]hypothetical key\[rq] against the
restrictions.
The application does not need to first create a real key and fetch a
real license using \f[CR]MediaKeySession\f[R], and the
\f[CR]MediaKeys\f[R] doesn\[cq]t even have to be attached to audio or
video elements.
.SH SYNTAX
.IP
.EX
getStatusForPolicy(policy)
.EE
.SS Parameters
.TP
\f[B]policy\f[R] \f[I](optional)\f[R]
An object with the following optional properties:
.RS
.TP
\f[B]minHdcpVersion\f[R] \f[I](optional)\f[R]
A string indicating the semantic version of the minimum HDCP version to
check for usability, such as \f[CR]1.0\f[R], \f[CR]1.4\f[R],
\f[CR]2.2\f[R], \f[CR]2.3\f[R].
.RE
.RS
.PP
\f[B]Note:\f[R] At least one policy restriction must be specified, so
\f[CR]minHdcpVersion\f[R] is only \[lq]technically\[rq] optional.
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with a string indicating whether the
key can be used for decryption given the specified policy.
.PP
The string can have one of the following values:
.TP
\f[B]usable\f[R]
The key is currently usable for decryption.
.TP
\f[B]expired\f[R]
The key is no longer usable for decryption because its expiration time
has passed.
.TP
\f[B]released\f[R]
The key has been released and is no longer available to the CDM.
However information about the key is available, such as a record of
license destruction.
.TP
\f[B]output\-restricted\f[R]
There are output restrictions associated with the key based on the
specified policy.
Media data decrypted with this key may be blocked from presentation.
The status indicates that the connection between the source and output
(for example, your computer and an external display), is not trusted.
This might indicate that there are HDCP version mismatches between the
source, intermediate devices, and output, or that intermediate
connecting devices such as HDMI cables or video splitters are damaged or
non\-compliant.
An application might opt to use a higher HDCP version, content that does
not require such a high version.
You should also check that intermediate devices and cables support HDCP,
are connected firmly, and are not damaged.
.TP
\f[B]output\-downscaled\f[R]
There are output restrictions associated with the key based on the
specified policy, however these restrictions might be relaxed if the
content is played at a lower quality.
If this value is returned an application might play the content at a
lower resolution, or it could choose to use a higher HDCP version, or
use other content that does not require such a high HDCP version.
.TP
\f[B]usable\-in\-future\f[R]
The key will become usable for decryption in future, once its start time
is reached.
.TP
\f[B]status\-pending\f[R]
The status of the key is not yet known and is being determined.
.TP
\f[B]internal\-error\f[R]
The key is not currently usable for decryption because of an error in
the CDM.
The application can\[cq]t do anything to handle this case.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The \f[CR]policy\f[R] has no defined properties (policy restrictions),
or a property key is not valid.
.TP
\f[B]NotSupportedError\f[R]
The CDM cannot determine the status for any or all of the policy
restrictions.
.SH EXAMPLES
.SS Check if keys are usable with HDCP restriction
This example checks if keys are usable for decrypting a particular video
format when using a minimum HDCP version of \f[CR]2.2\f[R].
.RS
.PP
\f[B]Note:\f[R] A status of \f[CR]output\-restricted\f[R] when
you\[cq]re using an external display can be caused by hardware HDCP
incompatibility issues.
If using a laptop, you may be able to \[lq]fix\[rq] this by
disconnecting the external display.
.RE
.SS HTML
.IP
.EX
<\f[B]pre\f[R] id=\[dq]log\[dq]></\f[B]pre\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] config = [
  {
    videoCapabilities: [
      {
        contentType: \[aq]video/mp4; codecs=\[dq]avc1.640028\[dq]\[aq],
        encryptionScheme: \[dq]cenc\[dq],
        robustness: \[dq]SW_SECURE_DECODE\[dq], \f[I]// Widevine L3\f[R]
      },
    ],
  },
];

getMediaStatus(config);

\f[B]async\f[R] \f[B]function\f[R] getMediaStatus(config) {
  \f[B]try\f[R] {
    \f[B]const\f[R] mediaKeySystemAccess = \f[B]await\f[R] navigator.requestMediaKeySystemAccess(
      \[dq]com.widevine.alpha\[dq],
      config,
    );
    \f[B]const\f[R] mediaKeys = \f[B]await\f[R] mediaKeySystemAccess.createMediaKeys();
    \f[B]const\f[R] mediaStatus = \f[B]await\f[R] mediaKeys.getStatusForPolicy({
      minHdcpVersion: \[dq]2.2\[dq],
    });
    log(mediaStatus);

    \f[I]// Get the content or fallback to an alternative if the\f[R]
    \f[I]// keys are not usable\f[R]
    \f[B]if\f[R] (mediaStatus === \[dq]usable\[dq]) {
      console.log(\[dq]HDCP 2.2 can be enforced.\[dq]);
      \f[I]// Fetch the high resolution protected content\f[R]
    } \f[B]else\f[R] {
      log(\[dq]HDCP 2.2 cannot be enforced\[dq]);
      \f[I]// Fallback other content, get license, etc.\f[R]
    }
  } \f[B]catch\f[R] (error) {
    log(error);
  }
}
.EE
.SS Results
.SH SEE ALSO
.IP \[bu] 2
\f[CR]MediaKeyStatusMap.get()\f[R]
