.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.SCROLLLEFT" "3JS" "April 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.scrollLeft \- Element: scrollLeft property
.SH SYNOPSIS
The \f[B]\f[CB]scrollLeft\f[B]\f[R] property of the \f[CR]Element\f[R]
interface gets or sets the number of pixels by which an element\(cqs
content is scrolled from its left edge.
This value is subpixel precise in modern browsers, meaning that it
isn\(cqt necessarily a whole number.
.SH VALUE
A double\-precision floating\-point value indicating the number of
pixels by which the element is currently scrolled horizontally from the
origin, where a positive value means the element is scrolled to the
right (to reveal more content to the right).
If the element isn\(cqt scrolled at all left or right, then
\f[CR]scrollLeft\f[R] is 0.
If the document is not the active document, the returned value is 0.
If the document is rendered on a subpixel\-precise device, then the
returned value is also subpixel\-precise and may contain a decimal
component.
.PP
It\(cqs possible for \f[CR]scrollLeft\f[R] to be negative if the element
can be scrolled to the left from the initial containing block.
For example, if the element\(cqs \f[CR]direction\f[R] is \f[CR]rtl\f[R]
(right\-to\-left) and content grows to the left, then
\f[CR]scrollLeft\f[R] is \f[CR]0\f[R] when the scrollbar is at its
rightmost position (at the start of the scrolled content), and then
increasingly negative as you scroll towards the end of the content.
.PP
Safari responds to overscrolling by updating \f[CR]scrollLeft\f[R]
beyond the maximum scroll position (unless the default \(lqbounce\(rq
effect is disabled, such as by setting \f[CR]overscroll\-behavior\f[R]
to \f[CR]none\f[R]), while Chrome and Firefox do not.
.PP
The \f[CR]scrollLeft\f[R] property can be set, which causes the element
to scroll to the specified horizontal position, in the same way as using
\f[CR]Element.scroll()\f[R] with \f[CR]behavior: \(dqauto\(dq\f[R].
.SH EXAMPLES
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\(dqcontainer\(dq>
  <\f[B]div\f[R] id=\(dqcontent\(dq>Click the button to slide right!</\f[B]div\f[R]>
</\f[B]div\f[R]>

<\f[B]button\f[R] id=\(dqslide\(dq type=\(dqbutton\(dq>Slide right</\f[B]button\f[R]>
.EE
.SS CSS
.IP
.EX
container {
  \f[B]width\f[R]: 100px;
  \f[B]height\f[R]: 100px;
  \f[B]border\f[R]: 1px solid #ccc;
  \f[B]overflow\-x\f[R]: scroll;
}

content {
  \f[B]width\f[R]: 250px;
  \f[B]background\-color\f[R]: #ccc;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] button = document.getElementById(\(dqslide\(dq);

button.onclick = () \f[B]=>\f[R] {
  document.getElementById(\(dqcontainer\(dq).scrollLeft += 20;
};
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
Determining the dimensions of elements
.IP \(bu 2
\f[CR]HTMLElement.offsetLeft\f[R]
.IP \(bu 2
\f[CR]Element.clientLeft\f[R]
.IP \(bu 2
\f[CR]Element.scrollHeight\f[R]
.IP \(bu 2
\f[CR]Element.scrollWidth\f[R]
.IP \(bu 2
\f[CR]Element.scrollTop\f[R]
.IP \(bu 2
\f[CR]Element.getBoundingClientRect()\f[R]
.IP \(bu 2
\f[CR]Element.scrollTo()\f[R]
