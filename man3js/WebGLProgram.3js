.\" Automatically generated by Pandoc 3.4
.\"
.TH "WebGLProgram" "JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLProgram \- WebGLProgram
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGLProgram\f[B]\f[R] is part of the WebGL API and is a
combination of two compiled \f[CR]WebGLShader\f[R]s consisting of a
vertex shader and a fragment shader (both written in GLSL).
.PP
To create a \f[CR]WebGLProgram\f[R], call the GL context\[cq]s
\f[CR]createProgram()\f[R] function.
After attaching the shader programs using \f[CR]attachShader()\f[R], you
link them into a usable program.
This is shown in the code below.
.IP
.EX
\f[B]const\f[R] program = gl.createProgram();

\f[I]// Attach pre\-existing shaders\f[R]
gl.attachShader(program, vertexShader);
gl.attachShader(program, fragmentShader);

gl.linkProgram(program);

\f[B]if\f[R] (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
  \f[B]const\f[R] info = gl.getProgramInfoLog(program);
  \f[B]throw\f[R] \[ga]Could not compile WebGL program. \[rs]n\[rs]n${info}\[ga];
}
.EE
.PP
See \f[CR]WebGLShader\f[R] for information on creating the
\f[CR]vertexShader\f[R] and \f[CR]fragmentShader\f[R] in the above
example.
.SH EXAMPLES
.SS Using the program
The steps to actually do some work with the program involve telling the
GPU to use the program, bind the appropriate data and configuration
options, and finally draw something to the screen.
.IP
.EX
\f[I]// Use the program\f[R]
gl.useProgram(program);

\f[I]// Bind existing attribute data\f[R]
gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
gl.enableVertexAttribArray(attributeLocation);
gl.vertexAttribPointer(attributeLocation, 3, gl.FLOAT, \f[B]false\f[R], 0, 0);

\f[I]// Draw a single triangle\f[R]
gl.drawArrays(gl.TRIANGLES, 0, 3);
.EE
.SS Deleting the program
If there is an error linking the program or you wish to delete an
existing program, then it is as simple as running
\f[CR]WebGLRenderingContext.deleteProgram()\f[R].
This frees the memory of the linked program.
.IP
.EX
gl.deleteProgram(program);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLShader\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.attachShader()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.compileShader()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.createProgram()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.createShader()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.deleteProgram()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.deleteShader()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.detachShader()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getAttachedShaders()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getProgramParameter()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getProgramInfoLog()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getShaderParameter()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getShaderPrecisionFormat()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getShaderInfoLog()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getShaderSource()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.isProgram()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.isShader()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.linkProgram()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.shaderSource()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.useProgram()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.validateProgram()\f[R]
