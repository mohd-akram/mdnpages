.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "BYTELENGTHQUEUINGSTRATEGY.BYTELENGTHQUEUINGSTRATEGY" "3JS" "July 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ByteLengthQueuingStrategy.ByteLengthQueuingStrategy \-
ByteLengthQueuingStrategy: ByteLengthQueuingStrategy() constructor
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]ByteLengthQueuingStrategy()\f[B]\f[R] constructor creates
and returns a \f[CR]ByteLengthQueuingStrategy\f[R] object instance.
.SH SYNTAX
.IP
.EX
new ByteLengthQueuingStrategy(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R]
An object with the following property:
.RS
.TP
\f[B]highWaterMark\f[R]
The total number of bytes that can be contained in the internal queue
before backpressure is applied.
.RS
.PP
Unlike \f[CR]CountQueuingStrategy()\f[R] where \f[CR]highWaterMark\f[R]
specifies a simple count of the number of chunks, with
\f[CR]ByteLengthQueuingStrategy()\f[R], \f[CR]highWaterMark\f[R]
specifies a number of \f[I]bytes\f[R] \(em specifically, given a stream
of chunks, how many bytes worth of those chunks (rather than a count of
how many of those chunks) can be contained in the internal queue before
backpressure is applied.
.RE
.RE
.SS Return value
An instance of the \f[CR]ByteLengthQueuingStrategy\f[R] object.
.SS Exceptions
None.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] queuingStrategy = \f[B]new\f[R] ByteLengthQueuingStrategy({
  highWaterMark: 1 * 1024,
});

\f[B]const\f[R] readableStream = \f[B]new\f[R] ReadableStream(
  {
    start(controller) {
      \f[I]// \&...\f[R]
    },
    pull(controller) {
      \f[I]// \&...\f[R]
    },
    cancel(err) {
      console.log(\(dqstream error:\(dq, err);
    },
  },
  queuingStrategy,
);

\f[B]const\f[R] size = queuingStrategy.size(chunk);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]ByteLengthQueuingStrategy\f[R] interface
