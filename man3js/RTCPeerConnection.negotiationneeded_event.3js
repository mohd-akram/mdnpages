.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCPeerConnection.negotiationneeded_event" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.negotiationneeded_event \- RTCPeerConnection:
negotiationneeded event
.SH SYNOPSIS
A \f[B]\f[CB]negotiationneeded\f[B]\f[R] event is sent to the
\f[CR]RTCPeerConnection\f[R] when negotiation of the connection through
the signaling channel is required.
This occurs both during the initial setup of the connection as well as
any time a change to the communication environment requires
reconfiguring the connection.
.PP
The \f[CR]negotiationneeded\f[R] event is first dispatched to the
\f[CR]RTCPeerConnection\f[R] when media is first added to the
connection.
This starts the process of ICE negotiation by instructing your code to
begin exchanging ICE candidates through the signaling server.
See Signaling transaction flow for a description of the signaling
process that begins with a \f[CR]negotiationneeded\f[R] event.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]negotiationneeded\[dq], (event) \f[B]=>\f[R] {});

onnegotiationneeded = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
In this example, we use \f[CR]addEventListener()\f[R] to create an event
handler for \f[CR]negotiationneeded\f[R].
Its role is to create an SDP offer and send it through the signaling
channel to the remote peer.
.IP
.EX
pc.addEventListener(
  \[dq]negotiationneeded\[dq],
  (ev) \f[B]=>\f[R] {
    pc.createOffer()
      .then((offer) \f[B]=>\f[R] pc.setLocalDescription(offer))
      .then(() \f[B]=>\f[R]
        sendSignalingMessage({
          type: \[dq]video\-offer\[dq],
          sdp: pc.localDescription,
        }),
      )
      .catch((err) \f[B]=>\f[R] {
        \f[I]// handle error\f[R]
      });
  },
  \f[B]false\f[R],
);
.EE
.PP
After creating the offer, the local end is configured by calling
\f[CR]RTCPeerConnection.setLocalDescription()\f[R]; then a signaling
message is created and sent to the remote peer through the signaling
server, to share that offer with the other peer.
The other peer should recognize this message and follow up by creating
its own \f[CR]RTCPeerConnection\f[R], setting the remote description
with \f[CR]setRemoteDescription()\f[R], and then creating an answer to
send back to the offering peer.
.PP
You can also set an event handler for the \f[CR]negotiationneeded\f[R]
event by assigning the event handler function to the
\f[CR]onnegotiationneeded\f[R] property:
.IP
.EX
pc.onnegotiationneeded = (ev) \f[B]=>\f[R] {
  pc.createOffer()
    .then((offer) \f[B]=>\f[R] pc.setLocalDescription(offer))
    .then(() \f[B]=>\f[R]
      sendSignalingMessage({
        type: \[dq]video\-offer\[dq],
        sdp: pc.localDescription,
      }),
    )
    .catch((err) \f[B]=>\f[R] {
      \f[I]// handle error\f[R]
    });
};
.EE
.PP
For a more detailed example, see Starting negotiation.
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
Signaling and video calling
.IP \[bu] 2
Lifetime of a WebRTC session
.IP \[bu] 2
WebRTC connectivity
.IP \[bu] 2
Introduction to WebRTC protocols
