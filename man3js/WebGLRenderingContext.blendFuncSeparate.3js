.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "WebGLRenderingContext.blendFuncSeparate" "JS" "April 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.blendFuncSeparate \- WebGLRenderingContext:
blendFuncSeparate() method
.SH SYNOPSIS
The \f[B]\f[CB]WebGLRenderingContext.blendFuncSeparate()\f[B]\f[R]
method of the WebGL API defines which function is used for blending
pixel arithmetic for RGB and alpha components separately.
.SH SYNTAX
.IP
.EX
blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha)
.EE
.SS Parameters
.TP
\f[B]srcRGB\f[R]
A \f[CR]WebGL_API.Types\f[R] specifying a multiplier for the red, green
and blue (RGB) source blending factors.
The default value is \f[CR]gl.ONE\f[R].
For possible values, see below.
.TP
\f[B]dstRGB\f[R]
A \f[CR]WebGL_API.Types\f[R] specifying a multiplier for the red, green
and blue (RGB) destination blending factors.
The default value is \f[CR]gl.ZERO\f[R].
For possible values, see below.
.TP
\f[B]srcAlpha\f[R]
A \f[CR]WebGL_API.Types\f[R] specifying a multiplier for the alpha
source blending factor.
The default value is \f[CR]gl.ONE\f[R].
For possible values, see below.
.TP
\f[B]dstAlpha\f[R]
A \f[CR]WebGL_API.Types\f[R] specifying a multiplier for the alpha
destination blending factor.
The default value is \f[CR]gl.ZERO\f[R].
For possible values, see below.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.IP \[bu] 2
If \f[I]srcRGB\f[R], \f[I]dstRGB\f[R], \f[I]srcAlpha\f[R], or
\f[I]dstAlpha\f[R] is not one of the listed possible values, a
\f[CR]gl.INVALID_ENUM\f[R] error is thrown.
.IP \[bu] 2
If a constant color and a constant alpha value are used together as
source (\f[CR]srcRGB\f[R]) and destination (\f[CR]dstRGB\f[R]) factors,
a \f[CR]gl.INVALID_ENUM\f[R] error is thrown.
.SH CONSTANTS
The following constants can be used for \f[I]srcRGB\f[R],
\f[I]dstRGB\f[R], \f[I]srcAlpha\f[R], and \f[I]dstAlpha\f[R]
.PP
The formulas for the blending factors can be described like this (all
RGBA values are between 0 and 1):
.IP \[bu] 2
color(RGB) = (sourceColor * \f[I]srcRGB\f[R]) + (destinationColor *
\f[I]dstRGB\f[R])
.IP \[bu] 2
color(A) = (sourceAlpha * \f[I]srcAlpha\f[R]) + (destinationAlpha *
\f[I]dstAlpha\f[R])
.PP
In the following table, R_S, G_S, B_S, A_S represent respectively the
\f[I]red\f[R], \f[I]green\f[R], \f[I]blue\f[R] and \f[I]alpha\f[R]
component of the source, while R_D, G_D, B_D, A_D represent respectively
the \f[I]red\f[R], \f[I]green\f[R], \f[I]blue\f[R] and \f[I]alpha\f[R]
component of the destination.
Similarly, R_C, G_C, B_C, A_C represent respectively the \f[I]red\f[R],
\f[I]green\f[R], \f[I]blue\f[R] and \f[I]alpha\f[R] component of a
constant color.
They are all values between 0 and 1, included.
Constant
RGB factor
Alpha factor
Description
gl.ZERO
0,0,0
0
Multiplies all colors by 0.
gl.ONE
1,1,1,1
1
Multiplies all colors by 1.
gl.SRC_COLOR
R_S, G_S, B_S
A_S
Multiplies all colors by the source colors.
gl.ONE_MINUS_SRC_COLOR
1\-R_S, 1\-G_S, 1\-B_S
1\-A_S
Multiplies all colors by 1 minus each source color.
gl.DST_COLOR
R_D, G_D, B_D
A_D
Multiplies all colors by the destination color.
gl.ONE_MINUS_DST_COLOR
1\-R_D, 1\-G_D, 1\-B_D
1\-A_D
Multiplies all colors by 1 minus each destination color.
gl.SRC_ALPHA
A_S, A_S, A_S
A_S
Multiplies all colors by the source alpha color.
gl.ONE_MINUS_SRC_ALPHA
1\-A_S, 1\-A_S, 1\-A_S
1\-A_S
Multiplies all colors by 1 minus the source alpha color.
gl.DST_ALPHA
A_D, A_D, A_D
A_D
Multiplies all colors by the destination alpha color.
gl.ONE_MINUS_DST_ALPHA
1\-A_D, 1\-A_D, 1\-A_D
1\-A_D
Multiplies all colors by 1 minus the destination alpha color.
gl.CONSTANT_COLOR
R_C, G_C, B_C
A_C
Multiplies all colors by a constant color.
gl.ONE_MINUS_CONSTANT_COLOR
1\-R_C, 1\-G_C, 1\-B_C
1\-A_C
Multiplies all colors by 1 minus a constant color.
gl.CONSTANT_ALPHA
A_C, A_C, A_C
A_C
Multiplies all colors by a constant alpha value.
gl.ONE_MINUS_CONSTANT_ALPHA
1\-A_C, 1\-A_C, 1\-A_C
1\-A_C
Multiplies all colors by 1 minus a constant alpha value.
gl.SRC_ALPHA_SATURATE
min(A_S, 1 \- A_D), min(A_S, 1 \- A_D), min(A_S, 1 \- A_D)
1
Multiplies the RGB colors by the smaller of either the source alpha
color or the value of 1 minus the destination alpha color.
The alpha value is multiplied by 1.
.SH EXAMPLES
To use the blend function, you first have to activate blending with
\f[CR]WebGLRenderingContext.enable()\f[R] with the argument
\f[CR]gl.BLEND\f[R].
.IP
.EX
gl.enable(gl.BLEND);
gl.blendFuncSeparate(gl.SRC_COLOR, gl.DST_COLOR, gl.ONE, gl.ZERO);
.EE
.PP
To get the current blend function, query the \f[CR]BLEND_SRC_RGB\f[R],
\f[CR]BLEND_SRC_ALPHA\f[R], \f[CR]BLEND_DST_RGB\f[R], and
\f[CR]BLEND_DST_ALPHA\f[R] constants which return one of the blend
function constants.
.IP
.EX
gl.enable(gl.BLEND);
gl.blendFuncSeparate(gl.SRC_COLOR, gl.DST_COLOR, gl.ONE, gl.ZERO);
gl.getParameter(gl.BLEND_SRC_RGB) === gl.SRC_COLOR;
\f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.blendColor()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.blendEquation()\f[R]
