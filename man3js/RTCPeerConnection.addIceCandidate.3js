.\" Automatically generated by Pandoc 3.4
.\"
.TH "RTCPeerConnection.addIceCandidate" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.addIceCandidate \- RTCPeerConnection:
addIceCandidate() method
.SH SYNOPSIS
The \f[B]\f[CB]addIceCandidate()\f[B]\f[R] method of the
\f[CR]RTCPeerConnection\f[R] interface adds a new remote candidate to
the connection\[cq]s remote description, which describes the state of
the remote end of the connection.
.PP
When a website or app using \f[CR]RTCPeerConnection\f[R] receives a new
ICE candidate from the remote peer over its signaling channel, it
delivers the newly\-received candidate to the browser\[cq]s ICE agent by
calling \f[B]\f[CB]RTCPeerConnection.addIceCandidate()\f[B]\f[R].
This adds this new remote candidate to the
\f[CR]RTCPeerConnection\f[R]\[cq]s remote description, which describes
the state of the remote end of the connection.
.PP
If the \f[CR]candidate\f[R] parameter is missing or a value of
\f[CR]null\f[R] is given when calling \f[CR]addIceCandidate()\f[R], the
added ICE candidate is an \[lq]end\-of\-candidates\[rq] indicator.
The same is the case if the value of the specified object\[cq]s
\f[CR]candidate\f[R] is either missing or an empty string
(\f[CR]\[dq]\[dq]\f[R]), it signals that all remote candidates have been
delivered.
.PP
The end\-of\-candidates notification is transmitted to the remote peer
using a candidate with an a\-line value of
\f[CR]end\-of\-candidates\f[R].
.PP
During negotiation, your app will likely receive many candidates which
you\[cq]ll deliver to the ICE agent in this way, allowing it to build up
a list of potential connection methods.
This is covered in more detail in the articles WebRTC connectivity and
Signaling and video calling.
.SH SYNTAX
.IP
.EX
addIceCandidate(candidate)

addIceCandidate(candidate, successCallback) // deprecated
addIceCandidate(candidate, successCallback, failureCallback) // deprecated
.EE
.SS Parameters
.TP
\f[B]candidate\f[R] \f[I](optional)\f[R]
An \f[CR]RTCIceCandidate\f[R] object, or an object that has the
following properties:
.RS
.TP
\f[B]candidate\f[R] \f[I](optional)\f[R]
A string describing the properties of the candidate, taken directly from
the SDP attribute \f[CR]\[dq]candidate\[dq]\f[R].
The candidate string specifies the network connectivity information for
the candidate.
If the \f[CR]candidate\f[R] is an empty string (\f[CR]\[dq]\[dq]\f[R]),
the end of the candidate list has been reached; this candidate is known
as the \[lq]end\-of\-candidates\[rq] marker.
.RS
.PP
The syntax of the candidate string is described in RFC 5245, section
15.1.
For an a\-line (attribute line) that looks like this:
.IP
.EX
a=candidate:4234997325 1 udp 2043278322 192.0.2.172 44323 typ host
.EE
.PP
the corresponding \f[CR]candidate\f[R] string\[cq]s value will be:
.IP
.EX
\[dq]candidate:4234997325 1 udp 2043278322 192.0.2.172 44323 typ host\[dq]\[ga]
.EE
.PP
The user agent always prefers candidates with the highest
\f[CR]priority\f[R], all else being equal.
In the example above, the priority is \f[CR]2043278322\f[R].
The attributes are all separated by a single space character, and are in
a specific order.
The complete list of attributes for this example candidate is:
.IP \[bu] 2
\f[CR]foundation\f[R] = 4234997325
.IP \[bu] 2
\f[CR]component\f[R] = \f[CR]\[dq]rtp\[dq]\f[R] (the number 1 is encoded
to this string; 2 becomes \f[CR]\[dq]rtcp\[dq]\f[R])
.IP \[bu] 2
\f[CR]protocol\f[R] = \f[CR]\[dq]udp\[dq]\f[R]
.IP \[bu] 2
\f[CR]priority\f[R] = 2043278322
.IP \[bu] 2
\f[CR]ip\f[R] = \f[CR]\[dq]192.0.2.172\[dq]\f[R]
.IP \[bu] 2
\f[CR]port\f[R] = 44323
.IP \[bu] 2
\f[CR]type\f[R] = \f[CR]\[dq]host\[dq]\f[R]
.PP
Additional information can be found in
\f[CR]RTCIceCandidate.candidate\f[R].
.RS
.PP
\f[B]Note:\f[R] For backward compatibility with older versions of the
WebRTC specification, the constructor also accepts this string directly
as an argument.
.RE
.RE
.TP
\f[B]sdpMid\f[R] \f[I](optional)\f[R]
A string containing the identification tag of the media stream with
which the candidate is associated, or \f[CR]null\f[R] if there is no
associated media stream.
The default is \f[CR]null\f[R].
.RS
.PP
Additional information can be found in
\f[CR]RTCIceCandidate.sdpMid\f[R].
.RE
.TP
\f[B]sdpMLineIndex\f[R] \f[I](optional)\f[R]
A number property containing the zero\-based index of the m\-line with
which the candidate is associated, within the SDP of the media
description, or \f[CR]null\f[R] if no such associated exists.
The default is \f[CR]null\f[R].
.RS
.PP
Additional information can be found in
\f[CR]RTCIceCandidate.sdpMLineIndex\f[R].
.RE
.TP
\f[B]usernameFragment\f[R] \f[I](optional)\f[R]
A string containing the username fragment (usually referred to in
shorthand as \[lq]ufrag\[rq] or \[lq]ice\-ufrag\[rq]).
This fragment, along with the ICE password (\[lq]ice\-pwd\[rq]),
uniquely identifies a single ongoing ICE interaction (including for any
communication with the STUN server).
.RS
.PP
The string is generated by WebRTC at the beginning of the session.
It may be up to 256 characters long, and at least 24 bits must contain
random data.
It has no default value and is not present unless set explicitly.
.PP
Additional information can be found in
\f[CR]RTCIceCandidate.usernameFragment\f[R].
.RE
.PP
The method will throw a \f[CR]TypeError\f[R] exception if both
\f[CR]sdpMid\f[R] and \f[CR]sdpMLineIndex\f[R] are \f[CR]null\f[R].
.PP
The contents of the object should be constructed from a message received
over the signaling channel, describing a newly received ICE candidate
that\[cq]s ready to be delivered to the local ICE agent.
.PP
If no \f[CR]candidate\f[R] object is specified, or its value is
\f[CR]null\f[R], an end\-of\-candidates signal is sent to the remote
peer using the \f[CR]end\-of\-candidates\f[R] a\-line, formatted like
this:
.IP
.EX
a=end\-of\-candidates
.EE
.RE
.SS Deprecated parameters
In older code and documentation, you may see a callback\-based version
of this function.
This has been deprecated and its use is \f[B]strongly\f[R] discouraged.
You should update any existing code to use the \f[CR]Promise\f[R]\-based
version of \f[CR]addIceCandidate()\f[R] instead.
The parameters for the older form of \f[CR]addIceCandidate()\f[R] are
described below, to aid in updating existing code.
.TP
\f[B]successCallback\f[R] \f[I](deprecated)\f[R]
A function to be called when the ICE candidate has been successfully
added.
This function receives no input parameters and doesn\[cq]t return a
value.
.TP
\f[B]failureCallback\f[R] \f[I](deprecated)\f[R]
A function to be called if attempting to add the ICE candidate fails.
Receives as input a \f[CR]DOMException\f[R] object describing why
failure occurred.
.SS Return value
A \f[CR]Promise\f[R] that is fulfilled when the candidate has been
successfully added to the remote peer\[cq]s description by the ICE
agent.
The promise does not receive any input parameters.
.SS Exceptions
When an error occurs while attempting to add the ICE candidate, the
\f[CR]Promise\f[R] returned by this method is rejected, returning one of
the errors below as the \f[CR]name\f[R] attribute in the specified
\f[CR]DOMException\f[R] object passed to the rejection handler.
.TP
\f[B]TypeError\f[R]
Returned if the specified candidate\[cq]s \f[CR]sdpMid\f[R] and
\f[CR]sdpMLineIndex\f[R] are both \f[CR]null\f[R].
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Returned if the \f[CR]RTCPeerConnection\f[R] currently has no remote
peer established (\f[CR]remoteDescription\f[R] is \f[CR]null\f[R]).
.TP
\f[B]OperationError\f[R] \f[B]DOMException\f[R]
Returned in one of the following situations:
.RS
.IP \[bu] 2
The value specified for \f[CR]sdpMid\f[R] is non\-\f[CR]null\f[R] and
doesn\[cq]t match the media description ID of any media description
included within the \f[CR]remoteDescription\f[R].
.IP \[bu] 2
The specified value of \f[CR]sdpMLineIndex\f[R] is greater than or equal
to the number of media descriptions included in the remote description.
.IP \[bu] 2
The specified \f[CR]ufrag\f[R] doesn\[cq]t match the \f[CR]ufrag\f[R]
field in any of the remote descriptions being considered.
.IP \[bu] 2
One or more of the values in the \f[CR]candidate\f[R] string are invalid
or could not be parsed.
.IP \[bu] 2
Attempting to add the candidate fails for any reason.
.RE
.SH EXAMPLES
This code snippet shows how to signal ICE candidates across an arbitrary
signaling channel.
.IP
.EX
\f[I]// This example assumes that the other peer is using a signaling channel as follows:\f[R]
\f[I]//\f[R]
\f[I]// pc.onicecandidate = (event) => {\f[R]
\f[I]//   if (event.candidate) {\f[R]
\f[I]//     signalingChannel.send(JSON.stringify({ice: event.candidate})); // \[dq]ice\[dq] is arbitrary\f[R]
\f[I]//   } else {\f[R]
\f[I]//     // All ICE candidates have been sent\f[R]
\f[I]//   }\f[R]
\f[I]// }\f[R]

signalingChannel.onmessage = (receivedString) \f[B]=>\f[R] {
  \f[B]const\f[R] message = JSON.parse(receivedString);
  \f[B]if\f[R] (message.ice) {
    \f[I]// A typical value of ice here might look something like this:\f[R]
    \f[I]//\f[R]
    \f[I]// {candidate: \[dq]candidate:0 1 UDP 2122154243 192.0.2.43 53421 typ host\[dq], sdpMid: \[dq]0\[dq], \&...}\f[R]
    \f[I]//\f[R]
    \f[I]// Pass the whole thing to addIceCandidate:\f[R]

    pc.addIceCandidate(message.ice).catch((e) \f[B]=>\f[R] {
      console.log(\[ga]Failure during addIceCandidate(): ${e.name}\[ga]);
    });
  } \f[B]else\f[R] {
    \f[I]// handle other things you might be signaling, like sdp\f[R]
  }
};
.EE
.PP
The last candidate to be signaled this way by the remote peer will be a
special candidate denoting end\-of\-candidates.
Out of interest, end\-of\-candidates may be manually indicated as
follows:
.IP
.EX
pc.addIceCandidate({ candidate: \[dq]\[dq] });
.EE
.PP
However, in most cases you won\[cq]t need to look for this explicitly,
since the events driving the \f[CR]RTCPeerConnection\f[R] will deal with
it for you, sending the appropriate events.
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
Signaling and video calling
.IP \[bu] 2
Introduction to WebRTC protocols
.IP \[bu] 2
WebRTC connectivity
.IP \[bu] 2
Lifetime of a WebRTC session
