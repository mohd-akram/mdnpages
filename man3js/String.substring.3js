.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.SUBSTRING" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.substring \- String.prototype.substring()
.SH SYNOPSIS
The \f[B]\f[CB]substring()\f[B]\f[R] method of \f[CR]String\f[R] values
returns the part of this string from the start index up to and excluding
the end index, or to the end of the string if no end index is supplied.
.IP
.EX
\f[B]const\f[R] str = \(dqMozilla\(dq;

console.log(str.substring(1, 3));
\f[I]// Expected output: \(dqoz\(dq\f[R]

console.log(str.substring(2));
\f[I]// Expected output: \(dqzilla\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
substring(indexStart)
substring(indexStart, indexEnd)
.EE
.SS Parameters
.TP
\f[B]indexStart\f[R]
The index of the first character to include in the returned substring.
.TP
\f[B]indexEnd\f[R] \f[I](optional)\f[R]
The index of the first character to exclude from the returned substring.
.SS Return value
A new string containing the specified part of the given string.
.SH DESCRIPTION
\f[CR]substring()\f[R] extracts characters from \f[CR]indexStart\f[R] up
to \f[I]but not including\f[R] \f[CR]indexEnd\f[R].
In particular:
.IP \(bu 2
If \f[CR]indexEnd\f[R] is omitted or \f[CR]undefined\f[R],
\f[CR]substring()\f[R] extracts characters to the end of the string.
.IP \(bu 2
If \f[CR]indexStart\f[R] is equal to \f[CR]indexEnd\f[R],
\f[CR]substring()\f[R] returns an empty string.
.IP \(bu 2
If \f[CR]indexStart\f[R] is greater than \f[CR]indexEnd\f[R], then the
effect of \f[CR]substring()\f[R] is as if the two arguments were
swapped; see example below.
.PP
Any argument value that is less than \f[CR]0\f[R] or greater than
\f[CR]str.length\f[R] is treated as if it were \f[CR]0\f[R] and
\f[CR]str.length\f[R], respectively.
.PP
Any argument value that is \f[CR]NaN\f[R] is treated as if it were
\f[CR]0\f[R].
.SH EXAMPLES
.SS Using substring()
The following example uses \f[CR]substring()\f[R] to display characters
from the string \f[CR]\(dqMozilla\(dq\f[R]:
.IP
.EX
\f[B]const\f[R] anyString = \(dqMozilla\(dq;

console.log(anyString.substring(0, 1)); \f[I]// \(dqM\(dq\f[R]
console.log(anyString.substring(1, 0)); \f[I]// \(dqM\(dq\f[R]

console.log(anyString.substring(0, 6)); \f[I]// \(dqMozill\(dq\f[R]

console.log(anyString.substring(4)); \f[I]// \(dqlla\(dq\f[R]
console.log(anyString.substring(4, 7)); \f[I]// \(dqlla\(dq\f[R]
console.log(anyString.substring(7, 4)); \f[I]// \(dqlla\(dq\f[R]

console.log(anyString.substring(0, 7)); \f[I]// \(dqMozilla\(dq\f[R]
console.log(anyString.substring(0, 10)); \f[I]// \(dqMozilla\(dq\f[R]
.EE
.SS Using substring() with length property
The following example uses the \f[CR]substring()\f[R] method and
\f[CR]length\f[R] property to extract the last characters of a
particular string.
This method may be easier to remember, given that you don\(cqt need to
know the starting and ending indices as you would in the above examples.
.IP
.EX
\f[B]const\f[R] text = \(dqMozilla\(dq;

\f[I]// Takes 4 last characters of string\f[R]
console.log(text.substring(text.length \- 4)); \f[I]// prints \(dqilla\(dq\f[R]

\f[I]// Takes 5 last characters of string\f[R]
console.log(text.substring(text.length \- 5)); \f[I]// prints \(dqzilla\(dq\f[R]
.EE
.SS The difference between substring() and substr()
There are subtle differences between the \f[CR]substring()\f[R] and
\f[CR]substr()\f[R] methods, so you should be careful not to get them
confused.
.IP \(bu 2
The two parameters of \f[CR]substr()\f[R] are \f[CR]start\f[R] and
\f[CR]length\f[R], while for \f[CR]substring()\f[R], they are
\f[CR]start\f[R] and \f[CR]end\f[R].
.IP \(bu 2
\f[CR]substr()\f[R]\(cqs \f[CR]start\f[R] index will wrap to the end of
the string if it is negative, while \f[CR]substring()\f[R] will clamp it
to \f[CR]0\f[R].
.IP \(bu 2
Negative lengths in \f[CR]substr()\f[R] are treated as zero, while
\f[CR]substring()\f[R] will swap the two indexes if \f[CR]end\f[R] is
less than \f[CR]start\f[R].
.PP
Furthermore, \f[CR]substr()\f[R] is considered a \f[I]legacy feature in
ECMAScript\f[R], so it is best to avoid using it if possible.
.IP
.EX
\f[B]const\f[R] text = \(dqMozilla\(dq;
console.log(text.substring(2, 5)); \f[I]// \(dqzil\(dq\f[R]
console.log(text.substr(2, 3)); \f[I]// \(dqzil\(dq\f[R]
.EE
.SS Differences between substring() and slice()
The \f[CR]substring()\f[R] and \f[CR]slice()\f[R] methods are almost
identical, but there are a couple of subtle differences between the two,
especially in the way negative arguments are dealt with.
.PP
The \f[CR]substring()\f[R] method swaps its two arguments if
\f[CR]indexStart\f[R] is greater than \f[CR]indexEnd\f[R], meaning that
a string is still returned.
The \f[CR]slice()\f[R] method returns an empty string if this is the
case.
.IP
.EX
\f[B]const\f[R] text = \(dqMozilla\(dq;
console.log(text.substring(5, 2)); \f[I]// \(dqzil\(dq\f[R]
console.log(text.slice(5, 2)); \f[I]// \(dq\(dq\f[R]
.EE
.PP
If either or both of the arguments are negative or \f[CR]NaN\f[R], the
\f[CR]substring()\f[R] method treats them as if they were \f[CR]0\f[R].
.IP
.EX
console.log(text.substring(\-5, 2)); \f[I]// \(dqMo\(dq\f[R]
console.log(text.substring(\-5, \-2)); \f[I]// \(dq\(dq\f[R]
.EE
.PP
\f[CR]slice()\f[R] also treats \f[CR]NaN\f[R] arguments as \f[CR]0\f[R],
but when it is given negative values it counts backwards from the end of
the string to find the indexes.
.IP
.EX
console.log(text.slice(\-5, 2)); \f[I]// \(dq\(dq\f[R]
console.log(text.slice(\-5, \-2)); \f[I]// \(dqzil\(dq\f[R]
.EE
.PP
See the \f[CR]slice()\f[R] page for more examples with negative numbers.
.SS Replacing a substring within a string
The following example replaces a substring within a string.
It will replace both individual characters and substrings.
The function call at the end of the example creates a string
\f[CR]Brave New Web\f[R] from the original string
\f[CR]Brave New World\f[R].
.IP
.EX
\f[I]// Replaces oldS with newS in the string fullS\f[R]
\f[B]function\f[R] replaceString(oldS, newS, fullS) {
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < fullS.length; ++i) {
    \f[B]if\f[R] (fullS.substring(i, i + oldS.length) === oldS) {
      fullS =
        fullS.substring(0, i) +
        newS +
        fullS.substring(i + oldS.length, fullS.length);
    }
  }
  \f[B]return\f[R] fullS;
}

replaceString(\(dqWorld\(dq, \(dqWeb\(dq, \(dqBrave New World\(dq);
.EE
.PP
Note that this can result in an infinite loop if \f[CR]oldS\f[R] is
itself a substring of \f[CR]newS\f[R] \(em for example, if you attempted
to replace \f[CR]\(dqWorld\(dq\f[R] with \f[CR]\(dqOtherWorld\(dq\f[R]
here.
.PP
A better method for replacing strings is as follows:
.IP
.EX
\f[B]function\f[R] replaceString(oldS, newS, fullS) {
  \f[B]return\f[R] fullS.split(oldS).join(newS);
}
.EE
.PP
The code above serves as an example for substring operations.
If you need to replace substrings, most of the time you will want to use
\f[CR]String.prototype.replace()\f[R].
.SH SEE ALSO
.IP \(bu 2
\f[CR]String.prototype.substr()\f[R]
.IP \(bu 2
\f[CR]String.prototype.slice()\f[R]
