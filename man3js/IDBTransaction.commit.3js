.\" Automatically generated by Pandoc 3.4
.\"
.TH "IDBTransaction.commit" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBTransaction.commit \- IDBTransaction: commit() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]commit()\f[B]\f[R] method of the
\f[CR]IDBTransaction\f[R] interface commits the transaction if it is
called on an active transaction.
.PP
Note that \f[CR]commit()\f[R] doesn\[cq]t normally \f[I]have\f[R] to be
called \[em] a transaction will automatically commit when all
outstanding requests have been satisfied and no new requests have been
made.
\f[CR]commit()\f[R] can be used to start the commit process without
waiting for events from outstanding requests to be dispatched.
.PP
If it is called on a transaction that is not active, it throws an
\f[CR]InvalidStateError\f[R] \f[CR]DOMException\f[R].
.SH SYNTAX
.IP
.EX
commit()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the transaction state is not active.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] note = document.getElementById(\[dq]notifications\[dq]);

\f[I]// open a read/write db transaction, ready for adding the data\f[R]
\f[B]const\f[R] transaction = db.transaction([\[dq]myDB\[dq]], \[dq]readwrite\[dq]);

\f[I]// report on the success of opening the transaction\f[R]
transaction.oncomplete = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Transaction completed: database modification finished.\[dq];
};

transaction.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Transaction not opened due to error. Duplicate items not allowed.\[dq];
};

\f[I]// create an object store on the transaction\f[R]
\f[B]const\f[R] objectStore = transaction.objectStore(\[dq]myObjStore\[dq]);

\f[I]// add our newItem object to the object store\f[R]
\f[B]const\f[R] objectStoreRequest = objectStore.add(newItem[0]);

objectStoreRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[I]// report the success of the request (this does not mean the item\f[R]
  \f[I]// has been stored successfully in the DB \- for that you need transaction.onsuccess)\f[R]
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Request successful.\[dq];
};

\f[I]// Force the changes to be committed to the database asap\f[R]
transaction.commit();
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
