.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "SubmitEvent" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SubmitEvent \- SubmitEvent
.SH SYNOPSIS
The \f[B]\f[CB]SubmitEvent\f[B]\f[R] interface defines the object used
to represent an HTML form\[cq]s \f[CR]submit\f[R] event.
This event is fired at the \f[CR]<form>\f[R] when the form\[cq]s submit
action is invoked.
.SH CONSTRUCTOR
.TP
\f[B]SubmitEvent()\f[R]
Creates and returns a new \f[CR]SubmitEvent\f[R] object whose
\f[CR]type\f[R] and other options are configured as specified.
Note that currently the only valid \f[CR]type\f[R] for a
\f[CR]SubmitEvent\f[R] is \f[CR]submit\f[R].
.SH INSTANCE PROPERTIES
\f[I]In addition to the properties listed below, this interface inherits
the properties of its parent interface, \f[CI]Event\f[I].\f[R]
.TP
\f[B]submitter\f[R] \f[I](read\-only)\f[R]
An \f[CR]HTMLElement\f[R] object which identifies the button or other
element which was invoked to trigger the form being submitted.
.SH INSTANCE METHODS
\f[I]While \f[CI]SubmitEvent\f[I] offers no methods of its own, it
inherits any specified by its parent interface, \f[CI]Event\f[I].\f[R]
.SH EXAMPLES
In this example, a shopping cart may have an assortment of different
submit buttons depending on factors such as the user\[cq]s settings, the
shop\[cq]s settings, and any minimum or maximum shopping card totals
established by the payment processors.
Each of the submit elements\[cq] \f[CR]id\f[R] is used to identify which
payment processor the button corresponds to.
.IP
.EX
\f[B]let\f[R] form = document.querySelector(\[dq]form\[dq]);
form.addEventListener(\[dq]submit\[dq], (event) \f[B]=>\f[R] {
  \f[B]let\f[R] submitter = event.submitter;
  \f[B]let\f[R] handler = submitter.id;

  \f[B]if\f[R] (handler) {
    processOrder(form, handler);
  } \f[B]else\f[R] {
    showAlertMessage(
      \[dq]An unknown or unaccepted payment type was selected. Please try again.\[dq],
      \[dq]OK\[dq],
    );
  }
});
.EE
.PP
The handler ID is obtained by using the \f[CR]submit\f[R] event\[cq]s
\f[CR]submitter\f[R] property to get the submit button, from which we
then get the ID.
With that in hand, we can call a \f[CR]processOrder()\f[R] function to
handle the order, passing along the form and the handler ID.
