.\" Automatically generated by Pandoc 3.4
.\"
.TH "MediaSource.addSourceBuffer" "JS" "November 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaSource.addSourceBuffer \- MediaSource: addSourceBuffer() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]addSourceBuffer()\f[B]\f[R] method of the
\f[CR]MediaSource\f[R] interface creates a new \f[CR]SourceBuffer\f[R]
of the given MIME type and adds it to the \f[CR]MediaSource\f[R]\[cq]s
\f[CR]sourceBuffers\f[R] list.
The new \f[CR]SourceBuffer\f[R] is also returned.
.SH SYNTAX
.IP
.EX
addSourceBuffer(mimeType)
.EE
.SS Parameters
.TP
\f[B]mimeType\f[R]
A string specifying the MIME type of the \f[CR]SourceBuffer\f[R] to
create and add to the \f[CR]MediaSource\f[R].
.SS Return value
A \f[CR]SourceBuffer\f[R] object representing the new source buffer that
has been created and added to the media source.
.SS Exceptions
.TP
\f[B]InvalidAccessError\f[R] \f[B]DOMException\f[R]
Thrown if the value specified for \f[CR]mimeType\f[R] is an empty string
rather than a valid MIME type.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]MediaSource\f[R] is not in the
\f[CR]\[dq]open\[dq]\f[R] \f[CR]readyState\f[R].
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if the specified \f[CR]mimeType\f[R] isn\[cq]t supported by the
user agent, or is not compatible with the MIME types of other
\f[CR]SourceBuffer\f[R] objects that are already included in the media
source\[cq]s \f[CR]sourceBuffers\f[R] list.
.TP
\f[B]QuotaExceededError\f[R] \f[B]DOMException\f[R]
Thrown if the user agent can\[cq]t handle any more
\f[CR]SourceBuffer\f[R] objects, or creating a new
\f[CR]SourceBuffer\f[R] using the given \f[CR]mimeType\f[R] would result
in an \c
.UR https://w3c.github.io/media-source/#sourcebuffer-configuration
unsupported configuration of \f[CR]SourceBuffer\f[R]s
.UE \c
\&.
.SH EXAMPLES
The following snippet is from an example written by Nick Desaulniers (\c
.UR https://nickdesaulniers.github.io/netfix/demo/bufferAll.html
view the full demo live
.UE \c
, or \c
.UR https://github.com/nickdesaulniers/netfix/blob/gh-pages/demo/bufferAll.html
download the source
.UE \c
\ for further investigation).
The function \f[CR]getMediaSource()\f[R], which is not defined here,
returns a \f[CR]MediaSource\f[R].
.IP
.EX
\f[B]const\f[R] assetURL = \[dq]frag_bunny.mp4\[dq];
\f[I]// Need to be specific for Blink regarding codecs\f[R]
\f[I]// ./mp4info frag_bunny.mp4 | grep Codec\f[R]
\f[B]const\f[R] mimeCodec = \[aq]video/mp4; codecs=\[dq]avc1.42E01E, mp4a.40.2\[dq]\[aq];
\f[B]const\f[R] mediaSource = getMediaSource();

\f[B]if\f[R] (\[dq]MediaSource\[dq] \f[B]in\f[R] window && MediaSource.isTypeSupported(mimeCodec)) {
  console.log(mediaSource.readyState); \f[I]// closed\f[R]
  mediaSource.addEventListener(\[dq]sourceopen\[dq], sourceOpen);
  video.src = URL.createObjectURL(mediaSource);
} \f[B]else\f[R] {
  console.error(\[dq]Unsupported MIME type or codec: \[dq], mimeCodec);
}

\f[B]function\f[R] sourceOpen() {
  console.log(\f[B]this\f[R].readyState); \f[I]// open\f[R]
  \f[B]const\f[R] sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);
  fetchAB(assetURL, (buf) \f[B]=>\f[R] {
    sourceBuffer.addEventListener(\[dq]updateend\[dq], () \f[B]=>\f[R] {
      mediaSource.endOfStream();
      video.play();
      console.log(mediaSource.readyState); \f[I]// ended\f[R]
    });
    sourceBuffer.appendBuffer(buf);
  });
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]SourceBuffer\f[R]
.IP \[bu] 2
\f[CR]SourceBufferList\f[R]
