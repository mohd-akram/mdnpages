.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "AudioParam.value" "JS" "November 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioParam.value \- AudioParam: value property
.SH SYNOPSIS
The \f[B]\f[CB]value\f[B]\f[R] property of the \f[CR]AudioParam\f[R]
interface gets or sets the value of this \f[CR]AudioParam\f[R] at the
current time.
Initially, the value is set to \f[CR]AudioParam.defaultValue\f[R].
.PP
Setting \f[CR]value\f[R] has the same effect as calling
\f[CR]AudioParam.setValueAtTime\f[R] with the time returned by the
\f[CR]AudioContext\f[R]\[cq]s \f[CR]currentTime\f[R] property.
.SH VALUE
A floating\-point \f[CR]Number\f[R] indicating the parameter\[cq]s value
as of the current time.
This value will be between the values specified by the
\f[CR]minValue\f[R] and \f[CR]maxValue\f[R] properties.
.SH DESCRIPTION
.SS Value precision and variation
The data type used internally to store \f[CR]value\f[R] is a
single\-precision (32\-bit) floating point number, while JavaScript uses
64\-bit double\-precision floating point numbers.
As a result, the value you read from the \f[CR]value\f[R] property may
not always exactly equal what you set it to.
.PP
Consider this example:
.IP
.EX
\f[B]const\f[R] source = \f[B]new\f[R] AudioBufferSourceNode(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] rate = 5.3;
source.playbackRate.value = rate;
console.log(source.playbackRate.value === rate);
.EE
.PP
The log output will be \f[CR]false\f[R], because the playback rate
parameter, \f[CR]rate\f[R], was converted to the 32\-bit floating\-point
number closest to 5.3, which yields 5.300000190734863.
One solution is to use the \f[CR]Math.fround()\f[R] method, which
returns the single\-precision value equivalent to the 64\-bit JavaScript
value specified\[em]when setting \f[CR]value\f[R], like this:
.IP
.EX
\f[B]const\f[R] source = \f[B]new\f[R] AudioBufferSourceNode(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] rate = Math.fround(5.3);
source.playbackRate.value = rate;
console.log(source.playbackRate.value === rate);
.EE
.PP
In this case, the log output will be \f[CR]true\f[R].
.SS Value of a property which is changing over time
The \f[CR]value\f[R] of an \f[CR]AudioParam\f[R] can either be fixed or
can vary over time.
This is reflected by the \f[CR]value\f[R] getter, which returns the
value of the parameter as of the audio rendering engine\[cq]s most
recent \f[B]render quantum\f[R], or moment at which audio buffers are
processed and updated.
In addition to processing audio buffers, each render quantum updates the
\f[CR]value\f[R] of each \f[CR]AudioParam\f[R] as needed given the
current time and any established time\-based parameter value changes.
.PP
Upon first creating the parameter, its value is set to its default
value, given by \f[CR]AudioParam.defaultValue\f[R].
This is the parameter\[cq]s value at a time of 0.0 seconds, and will
remain the parameter\[cq]s value until the first render quantum in which
the value is altered.
.PP
During each render quantum, the browser does the following things
related to managing the value of a parameter:
.IP \[bu] 2
If the \f[CR]value\f[R] setter has been used, the parameter\[cq]s value
is changed to the value given.
.IP \[bu] 2
If the current time equals or exceeds the time specified by a previous
call to \f[CR]setValueAtTime()\f[R], the \f[CR]value\f[R] is changed to
the value passed into \f[CR]setValueAtTime()\f[R].
.IP \[bu] 2
If any graduated or ramped value changing methods have been called and
the current time is within the time range over which the graduated
change should occur, the value is updated based on the appropriate
algorithm.
These ramped or graduated value\-changing methods include
\f[CR]linearRampToValueAtTime()\f[R], \f[CR]setTargetAtTime()\f[R], and
\f[CR]setValueCurveAtTime()\f[R].
.PP
Thus, the \f[CR]value\f[R] of a parameter is maintained to accurately
reflect the state of the parameter over time.
.SH EXAMPLES
This example instantly changes the volume of a \f[CR]GainNode\f[R] to
40%.
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();
\f[B]const\f[R] gainNode = audioCtx.createGain();
gainNode.gain.value = 0.4;
\f[I]// which is identical to:\f[R]
gainNode.gain.setValueAtTime(0.4, audioCtx.currentTime);
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
