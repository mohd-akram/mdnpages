.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "CanvasRenderingContext2D.strokeStyle" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.strokeStyle \- CanvasRenderingContext2D:
strokeStyle property
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.strokeStyle\f[B]\f[R] property
of the Canvas 2D API specifies the color, gradient, or pattern to use
for the strokes (outlines) around shapes.
The default is \f[CR]#000\f[R] (black).
.RS
.PP
\f[B]Note:\f[R] For more examples of stroke and fill styles, see
Applying styles and color in the Canvas tutorial.
.RE
.SH VALUE
One of the following:
.TP
\f[B]color\f[R]
A string parsed as CSS \f[CR]&lt;color&gt;\f[R] value.
.TP
\f[B]gradient\f[R]
A \f[CR]CanvasGradient\f[R] object (a linear or radial gradient).
.TP
\f[B]pattern\f[R]
A \f[CR]CanvasPattern\f[R] object (a repeating image).
.SH EXAMPLES
.SS Changing the stroke color of a shape
This example applies a blue stroke color to a rectangle.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

ctx.strokeStyle = \[dq]blue\[dq];
ctx.strokeRect(10, 10, 100, 100);
.EE
.SS Result
.SS Creating multiple stroke colors using loops
In this example, we use two \f[CR]for\f[R] loops and the
\f[CR]arc()\f[R] method to draw a grid of circles, each having a
different stroke color.
To achieve this, we use the two variables \f[CR]i\f[R] and \f[CR]j\f[R]
to generate a unique RGB color for each circle, and only modify the
green and blue values.
(The red channel has a fixed value.)
.IP
.EX
\f[B]const\f[R] ctx = document.getElementById(\[dq]canvas\[dq]).getContext(\[dq]2d\[dq]);

\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < 6; i++) {
  \f[B]for\f[R] (\f[B]let\f[R] j = 0; j < 6; j++) {
    ctx.strokeStyle = \[ga]rgb(
        0
        ${Math.floor(255 \- 42.5 * i)}
        ${Math.floor(255 \- 42.5 * j)})\[ga];
    ctx.beginPath();
    ctx.arc(12.5 + j * 25, 12.5 + i * 25, 10, 0, Math.PI * 2, \f[B]true\f[R]);
    ctx.stroke();
  }
}
.EE
.PP
The result looks like this:
.SS WebKit/Blink\-specific note
In WebKit\- and Blink\-based browsers, the non\-standard and deprecated
method \f[CR]ctx.setStrokeColor()\f[R] is implemented in addition to
this property.
.IP
.EX
setStrokeColor(color);
setStrokeColor(color, alpha);
setStrokeColor(grayLevel);
setStrokeColor(grayLevel, alpha);
setStrokeColor(r, g, b, a);
setStrokeColor(c, m, y, k, a);
.EE
.SH SEE ALSO
.IP \[bu] 2
The interface defining this property:
\f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]CanvasGradient\f[R]
.IP \[bu] 2
\f[CR]CanvasPattern\f[R]
