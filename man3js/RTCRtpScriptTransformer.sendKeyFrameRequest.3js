.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCRtpScriptTransformer.sendKeyFrameRequest" "JS" "November 11, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpScriptTransformer.sendKeyFrameRequest \- RTCRtpScriptTransformer:
sendKeyFrameRequest()
.SH SYNOPSIS
The \f[B]\f[CB]sendKeyFrameRequest()\f[B]\f[R] method of the
\f[CR]RTCRtpScriptTransformer\f[R] interface may be called by a WebRTC
Encoded Transform that is processing incoming encoded video frames, in
order to request a key frame from the sender.
.PP
The method may only be called when receiving \f[I]video\f[R] (not audio)
frames and if, for whatever reason, a recipient will not be able to
decode the video without a new key frame.
Note that the user agent can decide that the request for a key frame is
not necessary, in which case the returned promise will fulfill even
though the request was not actually sent.
.RS
.PP
\f[B]Note:\f[R] It might be called, for example, if a new user joins a
WebRTC conference, in order to reduce the time before they receive a key
frame and can hence start displaying video.
For more information see Triggering a key frame in Using WebRTC Encoded
Transforms.
.RE
.SH SYNTAX
.IP
.EX
sendKeyFrameRequest()
.EE
.SS Parameters
None
.SS Return value
A \f[CR]Promise\f[R] that fulfills with \f[CR]undefined\f[R] once the
request is sent, or the user agent decides that it does not need to.
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R]
The de\-packetizer is not processing video packets, or is
\f[CR]undefined\f[R].
.SH EXAMPLES
The example below shows how the main thread of a WebRTC application that
is receiving encoded video might pass a decryption key to a receiver
transform, and request the sender emit a key frame.
.PP
Note that the main thread doesn\[cq]t have direct access to the
\f[CR]RTCRtpScriptTransformer\f[R] object, so it needs to pass the key
to the worker.
Here we do that with a \f[CR]MessageChannel\f[R], transferring the
second port to the transformer code running in the worker.
The code assumes there is already a peer connection, and
\f[CR]videoReceiver\f[R] is an \f[CR]RTCRtpReceiver\f[R].
.IP
.EX
\f[B]const\f[R] worker = \f[B]new\f[R] Worker(\[dq]worker.js\[dq]);
\f[B]const\f[R] channel = \f[B]new\f[R] MessageChannel();

videoReceiver.transform = \f[B]new\f[R] RTCRtpScriptTransform(
  worker,
  { name: \[dq]receiverTransform\[dq], port: channel.port2 },
  [channel.port2],
);

\f[I]// Post new key to the receiver\f[R]
channel.port1.start();
channel.port1.postMessage({
  key: \[dq]93ae0927a4f8e527f1gce6d10bc6ab6c\[dq],
});
.EE
.PP
The \f[CR]rtctransform\f[R] event handler in the worker gets the port as
\f[CR]event.transformer.options.port\f[R].
The code snippet below shows how that is used to listen for
\f[CR]message\f[R] events on the channel.
If an event is received the handler gets the \f[CR]key\f[R], and then
calls \f[CR]sendKeyFrameRequest()\f[R] on the transformer.
.IP
.EX
event.transformer.options.port.onmessage = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] { key } = event.data;
  \f[I]// key is used by the transformer to decrypt frames (not shown)\f[R]

  \f[I]// Request sender to emit a key frame.\f[R]
  \f[I]// Here \[aq]rcevent\[aq] is the rtctransform event.\f[R]
  rcevent.transformer.sendKeyFrameRequest();
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using WebRTC Encoded Transforms
.IP \[bu] 2
\f[CR]RTCRtpScriptTransformer\f[R]
