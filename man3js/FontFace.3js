.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "FontFace" "JS" "August 1, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FontFace \- FontFace
.SH SYNOPSIS
The \f[B]\f[CB]FontFace\f[B]\f[R] interface of the CSS Font Loading API
represents a single usable font face.
.PP
This interface defines the source of a font face, either a URL to an
external resource or a buffer, and font properties such as
\f[CR]style\f[R], \f[CR]weight\f[R], and so on.
For URL font sources it allows authors to trigger when the remote font
is fetched and loaded, and to track loading status.
.SH CONSTRUCTOR
.TP
\f[B]FontFace()\f[R]
Constructs and returns a new \f[CR]FontFace\f[R] object, built from an
external resource described by a URL or from an \f[CR]ArrayBuffer\f[R].
.SH INSTANCE PROPERTIES
.TP
\f[B]FontFace.ascentOverride\f[R]
A string that retrieves or sets the \f[I]ascent metric\f[R] of the font.
It is equivalent to the \f[CR]ascent\-override\f[R] descriptor.
.TP
\f[B]FontFace.descentOverride\f[R]
A string that retrieves or sets the \f[I]descent metric\f[R] of the
font.
It is equivalent to the \f[CR]descent\-override\f[R] descriptor.
.TP
\f[B]FontFace.display\f[R]
A string that determines how a font face is displayed based on whether
and when it is downloaded and ready to use.
.TP
\f[B]FontFace.family\f[R]
A string that retrieves or sets the \f[I]family\f[R] of the font.
It is equivalent to the \f[CR]font\-family\f[R] descriptor.
.TP
\f[B]FontFace.featureSettings\f[R]
A string that retrieves or sets infrequently used font features that are
not available from a font\[cq]s variant properties.
It is equivalent to the CSS \f[CR]font\-feature\-settings\f[R] property.
.TP
\f[B]FontFace.lineGapOverride\f[R]
A string that retrieves or sets the \f[I]line\-gap metric\f[R] of the
font.
It is equivalent to the \f[CR]line\-gap\-override\f[R] descriptor.
.TP
\f[B]FontFace.loaded\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Promise\f[R] that resolves with the current
\f[CR]FontFace\f[R] object when the font specified in the object\[cq]s
constructor is done loading or rejects with a \f[CR]SyntaxError\f[R]
\f[CR]DOMException\f[R].
.TP
\f[B]FontFace.status\f[R] \f[I](read\-only)\f[R]
Returns an enumerated value indicating the status of the font, one of
\f[CR]\[dq]unloaded\[dq]\f[R], \f[CR]\[dq]loading\[dq]\f[R],
\f[CR]\[dq]loaded\[dq]\f[R], or \f[CR]\[dq]error\[dq]\f[R].
.TP
\f[B]FontFace.stretch\f[R]
A string that retrieves or sets how the font \f[I]stretches\f[R].
It is equivalent to the \f[CR]font\-stretch\f[R] descriptor.
.TP
\f[B]FontFace.style\f[R]
A string that retrieves or sets the \f[I]style\f[R] of the font.
It is equivalent to the \f[CR]font\-style\f[R] descriptor.
.TP
\f[B]FontFace.unicodeRange\f[R]
A string that retrieves or sets the \f[I]range of unicode code
points\f[R] encompassing the font.
It is equivalent to the \f[CR]unicode\-range\f[R] descriptor.
.TP
\f[B]FontFace.variant\f[R] \f[I](non\-standard)\f[R]
A string that retrieves or sets the \f[I]variant\f[R] of the font.
.TP
\f[B]FontFace.variationSettings\f[R] \f[I](experimental)\f[R]
A string that retrieves or sets the \f[I]variation settings\f[R] of the
font.
It is equivalent to the \f[CR]font\-variation\-settings\f[R] descriptor.
.TP
\f[B]FontFace.weight\f[R]
A string that contains the \f[I]weight\f[R] of the font.
It is equivalent to the \f[CR]font\-weight\f[R] descriptor.
.TP
\f[B]FontFace.load()\f[R]
Loads a font based on current object\[cq]s constructor\-passed
requirements, including a location or source buffer, and returns a
\f[CR]Promise\f[R] that resolves with the current FontFace object.
.SH EXAMPLES
The code below defines a font face using data at the URL
\[lq]myfont.woff\[rq] with a few font descriptors.
Just to show how it works, we then define the \f[CR]stretch\f[R]
descriptor using a property.
.IP
.EX
\f[I]//Define a FontFace\f[R]
\f[B]const\f[R] font = \f[B]new\f[R] FontFace(\[dq]myfont\[dq], \[dq]url(myfont.woff)\[dq], {
  style: \[dq]italic\[dq],
  weight: \[dq]400\[dq],
});

font.stretch = \[dq]condensed\[dq];
.EE
.PP
Next we load the font using \f[CR]FontFace.load()\f[R] and use the
returned promise to track completion or report an error.
.IP
.EX
\f[I]//Load the font\f[R]
font.load().then(
  () \f[B]=>\f[R] {
    \f[I]// Resolved \- add font to document.fonts\f[R]
  },
  (err) \f[B]=>\f[R] {
    console.error(err);
  },
);
.EE
.PP
To actually \f[I]use\f[R] the font we will need to add it to a
\f[CR]FontFaceSet\f[R].
We could do that before or after loading the font.
.PP
For additional examples see CSS Font Loading API > Examples.
.SH SEE ALSO
.IP \[bu] 2
\[at]font\-face
