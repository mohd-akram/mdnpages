.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCPeerConnection.canTrickleIceCandidates" "JS" "March 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.canTrickleIceCandidates \- RTCPeerConnection:
canTrickleIceCandidates property
.SH SYNOPSIS
The \f[B]\f[CB]canTrickleIceCandidates\f[B]\f[R] read\-only property of
the \f[CR]RTCPeerConnection\f[R] interface returns a boolean value which
indicates whether or not the remote peer can accept \c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-mmusic-trickle-ice
trickled ICE candidates
.UE \c
\&.
.PP
\f[B]ICE trickling\f[R] is the process of continuing to send candidates
after the initial offer or answer has already been sent to the other
peer.
.PP
This property is only set after having called
\f[CR]RTCPeerConnection.setRemoteDescription()\f[R].
Ideally, your signaling protocol provides a way to detect trickling
support, so that you don\[cq]t need to rely on this property.
A WebRTC browser will always support trickle ICE.
If trickling isn\[cq]t supported, or you aren\[cq]t able to tell, you
can check for a falsy value for this property and then wait until the
value of \f[CR]iceGatheringState\f[R] changes to
\f[CR]\[dq]completed\[dq]\f[R] before creating and sending the initial
offer.
That way, the offer contains all of the candidates.
.SH VALUE
A boolean value that is \f[CR]true\f[R] if the remote peer can accept
trickled ICE candidates and \f[CR]false\f[R] if it cannot.
If no remote peer has been established, this value is \f[CR]null\f[R].
.RS
.PP
\f[B]Note:\f[R] This property\[cq]s value is determined once the local
peer has called \f[CR]RTCPeerConnection.setRemoteDescription()\f[R]; the
provided description is used by the ICE agent to determine whether or
not the remote peer supports trickled ICE candidates.
.RE
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] pc = \f[B]new\f[R] RTCPeerConnection();

\f[B]function\f[R] waitToCompleteIceGathering(pc) {
  \f[B]return\f[R] \f[B]new\f[R] Promise((resolve) \f[B]=>\f[R] {
    pc.addEventListener(
      \[dq]icegatheringstatechange\[dq],
      (e) \f[B]=>\f[R]
        e.target.iceGatheringState === \[dq]complete\[dq] &&
        resolve(pc.localDescription),
    );
  });
}

\f[I]// The following code might be used to handle an offer from a peer when\f[R]
\f[I]// it isn\[aq]t known whether it supports trickle ICE.\f[R]
\f[B]async\f[R] \f[B]function\f[R] newPeer(remoteOffer) {
  \f[B]await\f[R] pc.setRemoteDescription(remoteOffer);
  \f[B]const\f[R] offer = \f[B]await\f[R] pc.createOffer();
  \f[B]await\f[R] pc.setLocalDescription(offer);
  \f[B]if\f[R] (pc.canTrickleIceCandidates) \f[B]return\f[R] pc.localDescription;
  \f[B]const\f[R] answer = \f[B]await\f[R] waitToCompleteIceGathering(pc);
  sendAnswerToPeer(answer); \f[I]//To peer via signaling channel\f[R]
}
\f[I]// Handle error with try/catch\f[R]

pc.addEventListener(
  \[dq]icecandidate\[dq],
  (e) \f[B]=>\f[R] pc.canTrickleIceCandidates && sendCandidateToPeer(e.candidate),
);
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC
.IP \[bu] 2
\f[CR]RTCPeerConnection.addIceCandidate()\f[R]
.IP \[bu] 2
Lifetime of a WebRTC session
