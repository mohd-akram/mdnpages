.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PROGRESSEVENT.PROGRESSEVENT" "3JS" "June 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ProgressEvent.ProgressEvent \- ProgressEvent: ProgressEvent()
constructor
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]ProgressEvent()\f[B]\f[R] constructor returns a new
\f[CR]ProgressEvent\f[R] object, representing the current completion of
a long process.
.SH SYNTAX
.IP
.EX
new ProgressEvent(type)
new ProgressEvent(type, options)
.EE
.SS Parameters
.TP
\f[B]type\f[R]
A string with the name of the event.
It is case\-sensitive and browsers set it to \f[CR]loadstart\f[R],
\f[CR]progress\f[R], \f[CR]abort\f[R], \f[CR]error\f[R],
\f[CR]load\f[R], \f[CR]timeout\f[R], or \f[CR]loadend\f[R].
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that, \f[I]in addition of the properties defined in
\f[CI]Event()\f[I]\f[R], can have the following properties:
.RS
.TP
\f[B]lengthComputable\f[R] \f[I](optional)\f[R]
A boolean value indicating if the total work to be done, and the amount
of work already done, by the underlying process is calculable.
In other words, it tells if the progress is measurable or not.
It defaults to \f[CR]false\f[R].
.TP
\f[B]loaded\f[R] \f[I](optional)\f[R]
A number representing the amount of work already performed by the
underlying process.
For a \f[CR]ProgressEvent\f[R] dispatched by the browser in HTTP
messages, the value refers to the size, in bytes, of the message body,
excluding headers and other overhead.
In a \f[CR]ProgressEvent\f[R] you create yourself, you can assign any
numeric value to \f[CR]loaded\f[R] that represents the amount of work
completed relative to the \f[CR]total\f[R] value.
It defaults to \f[CR]0\f[R].
.TP
\f[B]total\f[R] \f[I](optional)\f[R]
A number indicating the total size of the data being transmitted or
processed.
For \f[CR]ProgressEvent\f[R]s dispatched by the browser in HTTP
messages, the value refers to the size, in bytes, of a resource and is
derived from the \f[CR]Content\-Length\f[R] response header.
In a \f[CR]ProgressEvent\f[R] you create yourself, you may wish to
normalize \f[CR]total\f[R] to a value such as \f[CR]100\f[R] or
\f[CR]1\f[R] if revealing the precise amount of bytes of a resource is a
concern.
If using \f[CR]1\f[R] as a total, for example, then \f[CR]loaded\f[R]
should be a decimal value between \f[CR]0\f[R] and \f[CR]1\f[R].
It defaults to \f[CR]0\f[R].
.RE
.SS Return value
A new \f[CR]ProgressEvent\f[R] object.
.SH EXAMPLE
.SS File upload
The example demonstrates how a \f[CR]ProgressEvent\f[R] is built using a
constructor.
This is particularly useful for tracking the progress of processes like
file uploads, downloads, or any long\-running tasks.
.IP
.EX
\f[B]function\f[R] updateProgress(loaded, total) {
  \f[B]const\f[R] progressEvent = \f[B]new\f[R] ProgressEvent(\(dqprogress\(dq, {
    lengthComputable: \f[B]true\f[R],
    loaded,
    total,
  });

  document.dispatchEvent(progressEvent);
}

document.addEventListener(\(dqprogress\(dq, (event) \f[B]=>\f[R] {
  console.log(\(gaProgress: ${event.loaded}/${event.total}\(ga);
});

updateProgress(50, 100);
.EE
.SS Using fractions in a ProgressEvent
The total number of bytes of a resource may reveal too much information
about a download, so a number between 0 and 1 may be used instead:
.IP
.EX
\f[B]function\f[R] updateProgress(loaded, total) {
  \f[B]const\f[R] progressEvent = \f[B]new\f[R] ProgressEvent(\(dqprogress\(dq, {
    lengthComputable: \f[B]true\f[R],
    loaded,
    total,
  });

  document.dispatchEvent(progressEvent);
}

document.addEventListener(\(dqprogress\(dq, (event) \f[B]=>\f[R] {
  console.log(\(gaProgress: ${event.loaded}/${event.total}\(ga);
});

updateProgress(0.123456, 1);
.EE
.SH SEE ALSO
.IP \(bu 2
The \f[CR]ProgressEvent\f[R] interface it belongs to.
