.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ProgressEvent.ProgressEvent" "JS" "January 20, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ProgressEvent.ProgressEvent \- ProgressEvent: ProgressEvent()
constructor
.SH SYNOPSIS
The \f[B]\f[CB]ProgressEvent()\f[B]\f[R] constructor returns a new
\f[CR]ProgressEvent\f[R] object, representing the current completion of
a long process.
.SH SYNTAX
.IP
.EX
new ProgressEvent(type)
new ProgressEvent(type, options)
.EE
.SS Parameters
.TP
\f[B]type\f[R]
A string with the name of the event.
It is case\-sensitive and browsers set it to \f[CR]loadstart\f[R],
\f[CR]progress\f[R], \f[CR]abort\f[R], \f[CR]error\f[R],
\f[CR]load\f[R], \f[CR]timeout\f[R], or \f[CR]loadend\f[R].
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that, \f[I]in addition of the properties defined in
\f[CI]Event()\f[I]\f[R], can have the following properties:
.RS
.TP
\f[B]lengthComputable\f[R] \f[I](optional)\f[R]
A boolean value indicating if the total work to be done, and the amount
of work already done, by the underlying process is calculable.
In other words, it tells if the progress is measurable or not.
It defaults to \f[CR]false\f[R].
.TP
\f[B]loaded\f[R] \f[I](optional)\f[R]
A number representing the amount of work already performed by the
underlying process.
The ratio of work done can be calculated with the property and
\f[CR]ProgressEvent.total\f[R].
When downloading a resource using HTTP, this only represent the part of
the content itself, not headers and other overhead.
It defaults to \f[CR]0\f[R].
.TP
\f[B]total\f[R] \f[I](optional)\f[R]
A number representing the total amount of work that the underlying
process is in the progress of performing.
When downloading a resource using HTTP, this only represent the content
itself, not headers and other overhead.
It defaults to \f[CR]0\f[R].
.RE
.SS Return value
A new \f[CR]ProgressEvent\f[R] object.
.SH EXAMPLE
The example demonstrates how a \f[CR]ProgressEvent\f[R] is built using a
constructor.
This is particularly useful for tracking the progress of processes like
file uploads, downloads, or any long\-running tasks.
.IP
.EX
\f[B]function\f[R] updateProgress(loaded, total) {
  \f[B]const\f[R] progressEvent = \f[B]new\f[R] ProgressEvent(\[dq]progress\[dq], {
    lengthComputable: \f[B]true\f[R],
    loaded: loaded,
    total: total,
  });

  document.dispatchEvent(progressEvent);
}

document.addEventListener(\[dq]progress\[dq], (event) \f[B]=>\f[R] {
  console.log(\[ga]Progress: ${event.loaded}/${event.total}\[ga]);
});

updateProgress(50, 100);
.EE
.SH SEE ALSO
.IP \[bu] 2
The \f[CR]ProgressEvent\f[R] interface it belongs to.
