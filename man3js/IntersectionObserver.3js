.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "INTERSECTIONOBSERVER" "3JS" "February 28, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IntersectionObserver \- IntersectionObserver
.SH SYNOPSIS
The \f[B]\f[CB]IntersectionObserver\f[B]\f[R] interface of the
Intersection Observer API provides a way to asynchronously observe
changes in the intersection of a target element with an ancestor element
or with a top\-level document\(cqs viewport.
The ancestor element or viewport is referred to as the root.
.PP
When an \f[CR]IntersectionObserver\f[R] is created, it\(cqs configured
to watch for given ratios of visibility within the root.
The configuration cannot be changed once the
\f[CR]IntersectionObserver\f[R] is created, so a given observer object
is only useful for watching for specific changes in degree of
visibility; however, you can watch multiple target elements with the
same observer.
.SH CONSTRUCTOR
.TP
\f[B]IntersectionObserver()\f[R]
Creates a new \f[CR]IntersectionObserver\f[R] object which will execute
a specified callback function when it detects that a target element\(cqs
visibility has crossed one or more thresholds.
.SH INSTANCE PROPERTIES
.TP
\f[B]IntersectionObserver.root\f[R] \f[I](read\-only)\f[R]
The \f[CR]Element\f[R] or \f[CR]Document\f[R] whose bounds are used as
the bounding box when testing for intersection.
If no \f[CR]root\f[R] value was passed to the constructor or its value
is \f[CR]null\f[R], the top\-level document\(cqs viewport is used.
.TP
\f[B]IntersectionObserver.rootMargin\f[R] \f[I](read\-only)\f[R]
An offset rectangle applied to the root\(cqs bounding box when
calculating intersections, effectively shrinking or growing the root for
calculation purposes.
The value returned by this property may not be the same as the one
specified when calling the constructor as it may be changed to match
internal requirements.
Each offset can be expressed in pixels (\f[CR]px\f[R]) or as a
percentage (\f[CR]%\f[R]).
The default is \(lq0px 0px 0px 0px\(rq.
.TP
\f[B]IntersectionObserver.thresholds\f[R] \f[I](read\-only)\f[R]
A list of thresholds, sorted in increasing numeric order, where each
threshold is a ratio of intersection area to bounding box area of an
observed target.
Notifications for a target are generated when any of the thresholds are
crossed for that target.
If no value was passed to the constructor, 0 is used.
.SH INSTANCE METHODS
.TP
\f[B]IntersectionObserver.disconnect()\f[R]
Stops the \f[CR]IntersectionObserver\f[R] object from observing any
target.
.TP
\f[B]IntersectionObserver.observe()\f[R]
Tells the \f[CR]IntersectionObserver\f[R] a target element to observe.
.TP
\f[B]IntersectionObserver.takeRecords()\f[R]
Returns an array of \f[CR]IntersectionObserverEntry\f[R] objects for all
observed targets.
.TP
\f[B]IntersectionObserver.unobserve()\f[R]
Tells the \f[CR]IntersectionObserver\f[R] to stop observing a particular
target element.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] intersectionObserver = \f[B]new\f[R] IntersectionObserver((entries) \f[B]=>\f[R] {
  \f[I]// If intersectionRatio is 0, the target is out of view\f[R]
  \f[I]// and we do not need to do anything.\f[R]
  \f[B]if\f[R] (entries[0].intersectionRatio <= 0) \f[B]return\f[R];

  loadItems(10);
  console.log(\(dqLoaded new items\(dq);
});
\f[I]// start observing\f[R]
intersectionObserver.observe(document.querySelector(\(dq.scrollerFooter\(dq));
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]MutationObserver\f[R]
.IP \(bu 2
\f[CR]PerformanceObserver\f[R]
.IP \(bu 2
\f[CR]ResizeObserver\f[R]
