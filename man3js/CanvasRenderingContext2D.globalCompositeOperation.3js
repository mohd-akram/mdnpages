.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CANVASRENDERINGCONTEXT2D.GLOBALCOMPOSITEOPERATION" "3JS" "May 23, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.globalCompositeOperation \-
CanvasRenderingContext2D: globalCompositeOperation property
.SH SYNOPSIS
The
\f[B]\f[CB]CanvasRenderingContext2D.globalCompositeOperation\f[B]\f[R]
property of the Canvas 2D API sets the type of compositing operation to
apply when drawing new shapes.
.PP
See also Compositing and clipping in the Canvas Tutorial.
.SH VALUE
A string identifying which of the compositing or blending mode
operations to use.
This may be any of the following values:
.TP
\f[B]\(dqsource\-over\(dq\f[R]
This is the default setting and draws new shapes on top of the existing
canvas content.
.TP
\f[B]\(dqsource\-in\(dq\f[R]
The new shape is drawn only where both the new shape and the destination
canvas overlap.
Everything else is made transparent.
.TP
\f[B]\(dqsource\-out\(dq\f[R]
The new shape is drawn where it doesn\(cqt overlap the existing canvas
content.
.TP
\f[B]\(dqsource\-atop\(dq\f[R]
The new shape is only drawn where it overlaps the existing canvas
content.
.TP
\f[B]\(dqdestination\-over\(dq\f[R]
New shapes are drawn behind the existing canvas content.
.TP
\f[B]\(dqdestination\-in\(dq\f[R]
The existing canvas content is kept where both the new shape and
existing canvas content overlap.
Everything else is made transparent.
.TP
\f[B]\(dqdestination\-out\(dq\f[R]
The existing content is kept where it doesn\(cqt overlap the new shape.
.TP
\f[B]\(dqdestination\-atop\(dq\f[R]
The existing canvas is only kept where it overlaps the new shape.
The new shape is drawn behind the canvas content.
.TP
\f[B]\(dqlighter\(dq\f[R]
Where both shapes overlap, the color is determined by adding color
values.
.TP
\f[B]\(dqcopy\(dq\f[R]
Only the new shape is shown.
.TP
\f[B]\(dqxor\(dq\f[R]
Shapes are made transparent where both overlap and drawn normal
everywhere else.
.TP
\f[B]\(dqmultiply\(dq\f[R]
The pixels of the top layer are multiplied with the corresponding pixels
of the bottom layer.
A darker picture is the result.
.TP
\f[B]\(dqscreen\(dq\f[R]
The pixels are inverted, multiplied, and inverted again.
A lighter picture is the result (opposite of \f[CR]multiply\f[R])
.TP
\f[B]\(dqoverlay\(dq\f[R]
A combination of \f[CR]multiply\f[R] and \f[CR]screen\f[R].
Dark parts on the base layer become darker, and light parts become
lighter.
.TP
\f[B]\(dqdarken\(dq\f[R]
Retains the darkest pixels of both layers.
.TP
\f[B]\(dqlighten\(dq\f[R]
Retains the lightest pixels of both layers.
.TP
\f[B]\(dqcolor\-dodge\(dq\f[R]
Divides the bottom layer by the inverted top layer.
.TP
\f[B]\(dqcolor\-burn\(dq\f[R]
Divides the inverted bottom layer by the top layer, and then inverts the
result.
.TP
\f[B]\(dqhard\-light\(dq\f[R]
Like \f[CR]overlay\f[R], a combination of \f[CR]multiply\f[R] and
\f[CR]screen\f[R] \(em but instead with the top layer and bottom layer
swapped.
.TP
\f[B]\(dqsoft\-light\(dq\f[R]
A softer version of \f[CR]hard\-light\f[R].
Pure black or white does not result in pure black or white.
.TP
\f[B]\(dqdifference\(dq\f[R]
Subtracts the bottom layer from the top layer \(em or the other way
round \(em to always get a positive value.
.TP
\f[B]\(dqexclusion\(dq\f[R]
Like \f[CR]difference\f[R], but with lower contrast.
.TP
\f[B]\(dqhue\(dq\f[R]
Preserves the luma and chroma of the bottom layer, while adopting the
hue of the top layer.
.TP
\f[B]\(dqsaturation\(dq\f[R]
Preserves the luma and hue of the bottom layer, while adopting the
chroma of the top layer.
.TP
\f[B]\(dqcolor\(dq\f[R]
Preserves the luma of the bottom layer, while adopting the hue and
chroma of the top layer.
.TP
\f[B]\(dqluminosity\(dq\f[R]
Preserves the hue and chroma of the bottom layer, while adopting the
luma of the top layer.
.SH EXAMPLES
.SS Changing the composite operation
This example uses the \f[CR]globalCompositeOperation\f[R] property to
draw two rectangles that exclude themselves where they overlap.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

ctx.globalCompositeOperation = \(dqxor\(dq;

ctx.fillStyle = \(dqblue\(dq;
ctx.fillRect(10, 10, 100, 100);

ctx.fillStyle = \(dqred\(dq;
ctx.fillRect(50, 50, 100, 100);
.EE
.SS Result
.SS Demonstration of all values
.SS Global values
This code sets up the global values used by the rest of the program.
.IP
.EX
\f[B]const\f[R] canvas1 = document.createElement(\(dqcanvas\(dq);
\f[B]const\f[R] canvas2 = document.createElement(\(dqcanvas\(dq);
\f[B]const\f[R] gco = [
  \(dqsource\-over\(dq,
  \(dqsource\-in\(dq,
  \(dqsource\-out\(dq,
  \(dqsource\-atop\(dq,
  \(dqdestination\-over\(dq,
  \(dqdestination\-in\(dq,
  \(dqdestination\-out\(dq,
  \(dqdestination\-atop\(dq,
  \(dqlighter\(dq,
  \(dqcopy\(dq,
  \(dqxor\(dq,
  \(dqmultiply\(dq,
  \(dqscreen\(dq,
  \(dqoverlay\(dq,
  \(dqdarken\(dq,
  \(dqlighten\(dq,
  \(dqcolor\-dodge\(dq,
  \(dqcolor\-burn\(dq,
  \(dqhard\-light\(dq,
  \(dqsoft\-light\(dq,
  \(dqdifference\(dq,
  \(dqexclusion\(dq,
  \(dqhue\(dq,
  \(dqsaturation\(dq,
  \(dqcolor\(dq,
  \(dqluminosity\(dq,
].reverse();
\f[B]const\f[R] gcoText = [
  \(dqThis is the default setting and draws new shapes on top of the existing canvas content.\(dq,
  \(dqThe new shape is drawn only where both the new shape and the destination canvas overlap. Everything else is made transparent.\(dq,
  \(dqThe new shape is drawn where it doesn\(aqt overlap the existing canvas content.\(dq,
  \(dqThe new shape is only drawn where it overlaps the existing canvas content.\(dq,
  \(dqNew shapes are drawn behind the existing canvas content.\(dq,
  \(dqThe existing canvas content is kept where both the new shape and existing canvas content overlap. Everything else is made transparent.\(dq,
  \(dqThe existing content is kept where it doesn\(aqt overlap the new shape.\(dq,
  \(dqThe existing canvas is only kept where it overlaps the new shape. The new shape is drawn behind the canvas content.\(dq,
  \(dqWhere both shapes overlap the color is determined by adding color values.\(dq,
  \(dqOnly the new shape is shown.\(dq,
  \(dqShapes are made transparent where both overlap and drawn normal everywhere else.\(dq,
  \(dqThe pixels of the top layer are multiplied with the corresponding pixel of the bottom layer. A darker picture is the result.\(dq,
  \(dqThe pixels are inverted, multiplied, and inverted again. A lighter picture is the result (opposite of multiply)\(dq,
  \(dqA combination of multiply and screen. Dark parts on the base layer become darker, and light parts become lighter.\(dq,
  \(dqRetains the darkest pixels of both layers.\(dq,
  \(dqRetains the lightest pixels of both layers.\(dq,
  \(dqDivides the bottom layer by the inverted top layer.\(dq,
  \(dqDivides the inverted bottom layer by the top layer, and then inverts the result.\(dq,
  \(dqA combination of multiply and screen like overlay, but with top and bottom layer swapped.\(dq,
  \(dqA softer version of hard\-light. Pure black or white does not result in pure black or white.\(dq,
  \(dqSubtracts the bottom layer from the top layer or the other way round to always get a positive value.\(dq,
  \(dqLike difference, but with lower contrast.\(dq,
  \(dqPreserves the luma and chroma of the bottom layer, while adopting the hue of the top layer.\(dq,
  \(dqPreserves the luma and hue of the bottom layer, while adopting the chroma of the top layer.\(dq,
  \(dqPreserves the luma of the bottom layer, while adopting the hue and chroma of the top layer.\(dq,
  \(dqPreserves the hue and chroma of the bottom layer, while adopting the luma of the top layer.\(dq,
].reverse();
\f[B]const\f[R] width = 320;
\f[B]const\f[R] height = 340;
.EE
.SS Main program
When the page loads, this code runs to set up and run the example:
.IP
.EX
window.onload = () \f[B]=>\f[R] {
  \f[I]// lum in sRGB\f[R]
  \f[B]const\f[R] lum = {
    r: 0.33,
    g: 0.33,
    b: 0.33,
  };
  \f[I]// resize canvas\f[R]
  canvas1.width = width;
  canvas1.height = height;
  canvas2.width = width;
  canvas2.height = height;
  lightMix();
  colorSphere();
  runComposite();
};
.EE
.PP
And this code, \f[CR]runComposite()\f[R], handles the bulk of the work,
relying on a number of utility functions to do the hard parts.
.IP
.EX
\f[B]function\f[R] createCanvas() {
  \f[B]const\f[R] canvas = document.createElement(\(dqcanvas\(dq);
  canvas.style.background = \(gaurl(${op_8x8.data})\(ga;
  canvas.style.border = \(dq1px solid #000\(dq;
  canvas.style.margin = \(dq5px\(dq;
  canvas.width = width / 2;
  canvas.height = height / 2;
  \f[B]return\f[R] canvas;
}

\f[B]function\f[R] runComposite() {
  \f[B]const\f[R] dl = document.createElement(\(dqdl\(dq);
  document.body.appendChild(dl);
  \f[B]while\f[R] (gco.length) {
    \f[B]const\f[R] pop = gco.pop();
    \f[B]const\f[R] dt = document.createElement(\(dqdt\(dq);
    dt.textContent = pop;
    dl.appendChild(dt);
    \f[B]const\f[R] dd = document.createElement(\(dqdd\(dq);
    \f[B]const\f[R] p = document.createElement(\(dqp\(dq);
    p.textContent = gcoText.pop();
    dd.appendChild(p);

    \f[B]const\f[R] canvasToDrawOn = createCanvas();
    \f[B]const\f[R] canvasToDrawFrom = createCanvas();
    \f[B]const\f[R] canvasToDrawResult = createCanvas();

    \f[B]let\f[R] ctx = canvasToDrawResult.getContext(\(dq2d\(dq);
    ctx.clearRect(0, 0, width, height);
    ctx.save();
    ctx.drawImage(canvas1, 0, 0, width / 2, height / 2);
    ctx.globalCompositeOperation = pop;
    ctx.drawImage(canvas2, 0, 0, width / 2, height / 2);
    ctx.globalCompositeOperation = \(dqsource\-over\(dq;
    ctx.fillStyle = \(dqrgb(0 0 0 / 80%)\(dq;
    ctx.fillRect(0, height / 2 \- 20, width / 2, 20);
    ctx.fillStyle = \(dq#FFF\(dq;
    ctx.font = \(dq14px arial\(dq;
    ctx.fillText(pop, 5, height / 2 \- 5);
    ctx.restore();

    ctx = canvasToDrawOn.getContext(\(dq2d\(dq);
    ctx.clearRect(0, 0, width, height);
    ctx.save();
    ctx.drawImage(canvas1, 0, 0, width / 2, height / 2);
    ctx.fillStyle = \(dqrgb(0 0 0 / 80%)\(dq;
    ctx.fillRect(0, height / 2 \- 20, width / 2, 20);
    ctx.fillStyle = \(dq#FFF\(dq;
    ctx.font = \(dq14px arial\(dq;
    ctx.fillText(\(dqexisting content\(dq, 5, height / 2 \- 5);
    ctx.restore();

    ctx = canvasToDrawFrom.getContext(\(dq2d\(dq);
    ctx.clearRect(0, 0, width, height);
    ctx.save();
    ctx.drawImage(canvas2, 0, 0, width / 2, height / 2);
    ctx.fillStyle = \(dqrgb(0 0 0 / 80%)\(dq;
    ctx.fillRect(0, height / 2 \- 20, width / 2, 20);
    ctx.fillStyle = \(dq#FFF\(dq;
    ctx.font = \(dq14px arial\(dq;
    ctx.fillText(\(dqnew content\(dq, 5, height / 2 \- 5);
    ctx.restore();

    dd.appendChild(canvasToDrawOn);
    dd.appendChild(canvasToDrawFrom);
    dd.appendChild(canvasToDrawResult);

    dl.appendChild(dd);
  }
}
.EE
.SS Utility functions
The program relies on a number of utility functions.
.IP
.EX
\f[B]const\f[R] lightMix = () \f[B]=>\f[R] {
  \f[B]const\f[R] ctx = canvas2.getContext(\(dq2d\(dq);
  ctx.save();
  ctx.globalCompositeOperation = \(dqlighter\(dq;
  ctx.beginPath();
  ctx.fillStyle = \(dqrgb(255 0 0 / 100%)\(dq;
  ctx.arc(100, 200, 100, Math.PI * 2, 0, \f[B]false\f[R]);
  ctx.fill();
  ctx.beginPath();
  ctx.fillStyle = \(dqrgb(0 0 255 / 100%)\(dq;
  ctx.arc(220, 200, 100, Math.PI * 2, 0, \f[B]false\f[R]);
  ctx.fill();
  ctx.beginPath();
  ctx.fillStyle = \(dqrgb(0 255 0 / 100%)\(dq;
  ctx.arc(160, 100, 100, Math.PI * 2, 0, \f[B]false\f[R]);
  ctx.fill();
  ctx.restore();
  ctx.beginPath();
  ctx.fillStyle = \(dq#f00\(dq;
  ctx.fillRect(0, 0, 30, 30);
  ctx.fill();
};
.EE
.IP
.EX
\f[B]const\f[R] colorSphere = (element) \f[B]=>\f[R] {
  \f[B]const\f[R] ctx = canvas1.getContext(\(dq2d\(dq);
  \f[B]const\f[R] width = 360;
  \f[B]const\f[R] halfWidth = width / 2;
  \f[B]const\f[R] rotate = (1 / 360) * Math.PI * 2; \f[I]// per degree\f[R]
  \f[B]const\f[R] offset = 0; \f[I]// scrollbar offset\f[R]
  \f[B]const\f[R] oLeft = \-20;
  \f[B]const\f[R] oTop = \-20;
  \f[B]for\f[R] (\f[B]let\f[R] n = 0; n <= 359; n++) {
    \f[B]const\f[R] gradient = ctx.createLinearGradient(
      oLeft + halfWidth,
      oTop,
      oLeft + halfWidth,
      oTop + halfWidth,
    );
    \f[B]const\f[R] color = Color.HSV_RGB({ H: (n + 300) % 360, S: 100, V: 100 });
    gradient.addColorStop(0, \(dqrgb(0 0 0 / 0%)\(dq);
    gradient.addColorStop(0.7, \(gargb(${color.R} ${color.G} ${color.B} / 100%)\(ga);
    gradient.addColorStop(1, \(dqrgb(255 255 255 / 100%)\(dq);
    ctx.beginPath();
    ctx.moveTo(oLeft + halfWidth, oTop);
    ctx.lineTo(oLeft + halfWidth, oTop + halfWidth);
    ctx.lineTo(oLeft + halfWidth + 6, oTop);
    ctx.fillStyle = gradient;
    ctx.fill();
    ctx.translate(oLeft + halfWidth, oTop + halfWidth);
    ctx.rotate(rotate);
    ctx.translate(\-(oLeft + halfWidth), \-(oTop + halfWidth));
  }
  ctx.beginPath();
  ctx.fillStyle = \(dq#00f\(dq;
  ctx.fillRect(15, 15, 30, 30);
  ctx.fill();
  \f[B]return\f[R] ctx.canvas;
};
.EE
.IP
.EX
\f[I]// HSV (1978) = H: Hue / S: Saturation / V: Value\f[R]
Color = {};
Color.HSV_RGB = (o) \f[B]=>\f[R] {
  \f[B]const\f[R] S = o.S / 100;
  \f[B]let\f[R] H = o.H / 360,
    V = o.V / 100;
  \f[B]let\f[R] R, G;
  \f[B]let\f[R] A, B, C, D;
  \f[B]if\f[R] (S === 0) {
    R = G = B = Math.round(V * 255);
  } \f[B]else\f[R] {
    \f[B]if\f[R] (H >= 1) H = 0;
    H *= 6;
    D = H \- Math.floor(H);
    A = Math.round(255 * V * (1 \- S));
    B = Math.round(255 * V * (1 \- S * D));
    C = Math.round(255 * V * (1 \- S * (1 \- D)));
    V = Math.round(255 * V);
    \f[B]switch\f[R] (Math.floor(H)) {
      \f[B]case\f[R] 0:
        R = V;
        G = C;
        B = A;
        \f[B]break\f[R];
      \f[B]case\f[R] 1:
        R = B;
        G = V;
        B = A;
        \f[B]break\f[R];
      \f[B]case\f[R] 2:
        R = A;
        G = V;
        B = C;
        \f[B]break\f[R];
      \f[B]case\f[R] 3:
        R = A;
        G = B;
        B = V;
        \f[B]break\f[R];
      \f[B]case\f[R] 4:
        R = C;
        G = A;
        B = V;
        \f[B]break\f[R];
      \f[B]case\f[R] 5:
        R = V;
        G = A;
        \f[I]// B remains unchanged\f[R]
        \f[B]break\f[R];
    }
  }
  \f[B]return\f[R] { R, G, B };
};

\f[B]const\f[R] createInterlace = (size, color1, color2) \f[B]=>\f[R] {
  \f[B]const\f[R] proto = document.createElement(\(dqcanvas\(dq).getContext(\(dq2d\(dq);
  proto.canvas.width = size * 2;
  proto.canvas.height = size * 2;
  proto.fillStyle = color1; \f[I]// top\-left\f[R]
  proto.fillRect(0, 0, size, size);
  proto.fillStyle = color2; \f[I]// top\-right\f[R]
  proto.fillRect(size, 0, size, size);
  proto.fillStyle = color2; \f[I]// bottom\-left\f[R]
  proto.fillRect(0, size, size, size);
  proto.fillStyle = color1; \f[I]// bottom\-right\f[R]
  proto.fillRect(size, size, size, size);
  \f[B]const\f[R] pattern = proto.createPattern(proto.canvas, \(dqrepeat\(dq);
  pattern.data = proto.canvas.toDataURL();
  \f[B]return\f[R] pattern;
};

\f[B]const\f[R] op_8x8 = createInterlace(8, \(dq#FFF\(dq, \(dq#eee\(dq);
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
The interface defining this property:
\f[CR]CanvasRenderingContext2D\f[R]
.IP \(bu 2
\f[CR]CanvasRenderingContext2D.globalAlpha\f[R]
