.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REFLECT.DELETEPROPERTY" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.deleteProperty \- Reflect.deleteProperty()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.deleteProperty()\f[B]\f[R] static method is like
the \f[CR]delete\f[R] operator, but as a function.
It deletes a property from an object.
.IP
.EX
\f[B]const\f[R] object1 = {
  property1: 42,
};

Reflect.deleteProperty(object1, \(dqproperty1\(dq);

console.log(object1.property1);
\f[I]// Expected output: undefined\f[R]

\f[B]const\f[R] array1 = [1, 2, 3, 4, 5];
Reflect.deleteProperty(array1, \(dq3\(dq);

console.log(array1);
\f[I]// Expected output: Array [1, 2, 3, <1 empty slot>, 5]\f[R]
.EE
.SH SYNTAX
.IP
.EX
Reflect.deleteProperty(target, propertyKey)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target object on which to delete the property.
.TP
\f[B]propertyKey\f[R]
The name of the property to be deleted.
.SS Return value
A boolean indicating whether or not the property was successfully
deleted.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] is not an object.
.SH DESCRIPTION
\f[CR]Reflect.deleteProperty()\f[R] provides the reflective semantic of
the \f[CR]delete\f[R] operator.
That is, \f[CR]Reflect.deleteProperty(target, propertyKey)\f[R] is
semantically equivalent to:
.IP
.EX
\f[B]delete\f[R] target.propertyKey;
.EE
.PP
At the very low level, deleting a property returns a boolean (as is the
case with the proxy handler).
\f[CR]Reflect.deleteProperty()\f[R] directly returns the status, while
\f[CR]delete\f[R] would throw a \f[CR]TypeError\f[R] in strict mode if
the status is \f[CR]false\f[R].
In non\-strict mode, \f[CR]delete\f[R] and
\f[CR]Reflect.deleteProperty()\f[R] have the same behavior.
.PP
\f[CR]Reflect.deleteProperty()\f[R] invokes the \f[CR][[Delete]]\f[R]
object internal method of \f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.deleteProperty()
.IP
.EX
\f[B]const\f[R] obj = { x: 1, y: 2 };
Reflect.deleteProperty(obj, \(dqx\(dq); \f[I]// true\f[R]
console.log(obj); \f[I]// { y: 2 }\f[R]

\f[B]const\f[R] arr = [1, 2, 3, 4, 5];
Reflect.deleteProperty(arr, \(dq3\(dq); \f[I]// true\f[R]
console.log(arr); \f[I]// [1, 2, 3, <1 empty slot>, 5]\f[R]

\f[I]// Returns true if no such property exists\f[R]
Reflect.deleteProperty({}, \(dqfoo\(dq); \f[I]// true\f[R]

\f[I]// Returns false if a property is unconfigurable\f[R]
Reflect.deleteProperty(Object.freeze({ foo: 1 }), \(dqfoo\(dq); \f[I]// false\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-reflect
Polyfill of \f[CR]Reflect.deleteProperty\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]Reflect\f[R]
.IP \(bu 2
\f[CR]delete\f[R]
.IP \(bu 2
\f[CR]handler.deleteProperty()\f[R]
