.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ResizeObserver.unobserve" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ResizeObserver.unobserve \- ResizeObserver: unobserve() method
.SH SYNOPSIS
The \f[B]\f[CB]unobserve()\f[B]\f[R] method of the
\f[CR]ResizeObserver\f[R] interface ends the observing of a specified
\f[CR]Element\f[R] or \f[CR]SVGElement\f[R].
.SH SYNTAX
.IP
.EX
unobserve(target)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A reference to an \f[CR]Element\f[R] or \f[CR]SVGElement\f[R] to be
unobserved.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
None.
.SH EXAMPLES
The following snippet is taken from the \c
.UR https://mdn.github.io/dom-examples/resize-observer/resize-observer-text.html
resize\-observer\-text.html
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/blob/main/resize-observer/resize-observer-text.html
see source
.UE \c
) example:
.IP
.EX
\f[B]const\f[R] resizeObserver = \f[B]new\f[R] ResizeObserver((entries) \f[B]=>\f[R] {
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] entries) {
    \f[B]if\f[R] (entry.contentBoxSize) {
      \f[I]// Checking for chrome as using a non\-standard array\f[R]
      \f[B]if\f[R] (entry.contentBoxSize[0]) {
        h1Elem.style.fontSize = \[ga]${Math.max(
          1.5,
          entry.contentBoxSize[0].inlineSize / 200,
        )}rem\[ga];
        pElem.style.fontSize = \[ga]${Math.max(
          1,
          entry.contentBoxSize[0].inlineSize / 600,
        )}rem\[ga];
      } \f[B]else\f[R] {
        h1Elem.style.fontSize = \[ga]${Math.max(
          1.5,
          entry.contentBoxSize.inlineSize / 200,
        )}rem\[ga];
        pElem.style.fontSize = \[ga]${Math.max(
          1,
          entry.contentBoxSize.inlineSize / 600,
        )}rem\[ga];
      }
    } \f[B]else\f[R] {
      h1Elem.style.fontSize = \[ga]${Math.max(
        1.5,
        entry.contentRect.width / 200,
      )}rem\[ga];
      pElem.style.fontSize = \[ga]${Math.max(1, entry.contentRect.width / 600)}rem\[ga];
    }
  }
  console.log(\[dq]Size changed\[dq]);
});

resizeObserver.observe(divElem);

checkbox.addEventListener(\[dq]change\[dq], () \f[B]=>\f[R] {
  \f[B]if\f[R] (checkbox.checked) {
    resizeObserver.observe(divElem);
  } \f[B]else\f[R] {
    resizeObserver.unobserve(divElem);
  }
});
.EE
