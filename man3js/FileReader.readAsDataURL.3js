.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "FILEREADER.READASDATAURL" "3JS" "June 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileReader.readAsDataURL \- FileReader: readAsDataURL() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]readAsDataURL()\f[B]\f[R] method of the
\f[CR]FileReader\f[R] interface is used to read the contents of the
specified \f[CR]Blob\f[R] or \f[CR]File\f[R].
When the read operation is finished, the \f[CR]readyState\f[R] property
becomes \f[CR]DONE\f[R], and the \f[CR]loadend\f[R] event is triggered.
At that time, the \f[CR]result\f[R] attribute contains the data as a
data: URL representing the file\(cqs data as a base64 encoded string.
.RS
.PP
\f[B]Note:\f[R] The blob\(cqs \f[CR]result\f[R] cannot be directly
decoded as Base64 without first removing the Data\-URL declaration
preceding the Base64\-encoded data.
To retrieve only the Base64 encoded string, first remove
\f[CR]data:*/*;base64,\f[R] from the result.
.RE
.SH SYNTAX
.IP
.EX
readAsDataURL(blob)
.EE
.SS Parameters
.TP
\f[B]blob\f[R]
The \f[CR]Blob\f[R] or \f[CR]File\f[R] from which to read.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Reading a single file
.SS HTML
.IP
.EX
<\f[B]input\f[R] type=\(dqfile\(dq /><\f[B]br\f[R] />
<\f[B]img\f[R] src=\(dq\(dq height=\(dq200\(dq alt=\(dqImage preview\(dq />
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] preview = document.querySelector(\(dqimg\(dq);
\f[B]const\f[R] fileInput = document.querySelector(\(dqinput[type=file]\(dq);

fileInput.addEventListener(\(dqchange\(dq, previewFile);

\f[B]function\f[R] previewFile() {
  \f[B]const\f[R] file = fileInput.files[0];
  \f[B]const\f[R] reader = \f[B]new\f[R] FileReader();

  reader.addEventListener(
    \(dqload\(dq,
    () \f[B]=>\f[R] {
      \f[I]// convert image file to base64 string\f[R]
      preview.src = reader.result;
    },
    \f[B]false\f[R],
  );

  \f[B]if\f[R] (file) {
    reader.readAsDataURL(file);
  }
}
.EE
.SS Result
.SS Reading multiple files
.SS HTML
.IP
.EX
<\f[B]input\f[R] id=\(dqbrowse\(dq type=\(dqfile\(dq multiple />
<\f[B]div\f[R] id=\(dqpreview\(dq></\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]function\f[R] previewFiles() {
  \f[B]const\f[R] preview = document.querySelector(\(dq#preview\(dq);
  \f[B]const\f[R] files = document.querySelector(\(dqinput[type=file]\(dq).files;

  \f[B]function\f[R] readAndPreview(file) {
    \f[I]// Make sure \(gafile.name\(ga matches our extensions criteria\f[R]
    \f[B]if\f[R] (/\(rs.(?:jpe?g|png|gif)$/i.test(file.name)) {
      \f[B]const\f[R] reader = \f[B]new\f[R] FileReader();

      reader.addEventListener(
        \(dqload\(dq,
        () \f[B]=>\f[R] {
          \f[B]const\f[R] image = \f[B]new\f[R] Image();
          image.height = 100;
          image.title = file.name;
          image.src = reader.result;
          preview.appendChild(image);
        },
        \f[B]false\f[R],
      );

      reader.readAsDataURL(file);
    }
  }

  \f[B]if\f[R] (files) {
    Array.prototype.forEach.call(files, readAndPreview);
  }
}

\f[B]const\f[R] picker = document.querySelector(\(dq#browse\(dq);
picker.addEventListener(\(dqchange\(dq, previewFiles);
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
\f[CR]FileReader\f[R]
.IP \(bu 2
\f[CR]URL.createObjectURL()\f[R]
