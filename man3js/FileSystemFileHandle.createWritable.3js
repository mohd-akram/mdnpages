.\" Automatically generated by Pandoc 3.4
.\"
.TH "FileSystemFileHandle.createWritable" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemFileHandle.createWritable \- FileSystemFileHandle:
createWritable() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createWritable()\f[B]\f[R] method of the
\f[CR]FileSystemFileHandle\f[R] interface creates a
\f[CR]FileSystemWritableFileStream\f[R] that can be used to write to a
file.
The method returns a \f[CR]Promise\f[R] which resolves to this created
stream.
.PP
Any changes made through the stream won\[cq]t be reflected in the file
represented by the file handle until the stream has been closed.
This is typically implemented by writing data to a temporary file, and
only replacing the file represented by file handle with the temporary
file when the writable file stream is closed.
.SH SYNTAX
.IP
.EX
createWritable()
createWritable(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object with the following properties:
.RS
.TP
\f[B]keepExistingData\f[R] \f[I](optional)\f[R]
A \f[CR]Boolean\f[R].
Default \f[CR]false\f[R].
When set to \f[CR]true\f[R] if the file exists, the existing file is
first copied to the temporary file.
Otherwise the temporary file starts out empty.
.TP
\f[B]mode\f[R] \f[I](optional)\f[R] \f[I](non\-standard)\f[R]
A string specifying the locking mode for the writable file stream.
The default value is \f[CR]\[dq]siloed\[dq]\f[R].
Possible values are:
.RS
.TP
\f[B]\[dq]exclusive\[dq]\f[R]
Only one \f[CR]FileSystemWritableFileStream\f[R] writer can be opened.
Attempting to open subsequent writers before the first writer is closed
results in a \f[CR]NoModificationAllowedError\f[R] exception being
thrown.
.TP
\f[B]\[dq]siloed\[dq]\f[R]
Multiple \f[CR]FileSystemWritableFileStream\f[R] writers can be opened
at the same time, each with its own swap file, for example when using
the same app in multiple tabs.
The last writer opened has its data written, as the data gets flushed
when each writer is closed.
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] which resolves to a
\f[CR]FileSystemWritableFileStream\f[R] object.
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]PermissionStatus.state\f[R] for the handle is not
\f[CR]\[aq]granted\[aq]\f[R] in \f[CR]readwrite\f[R] mode.
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if current entry is not found.
.TP
\f[B]NoModificationAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if the browser is not able to acquire a lock on the file
associated with the file handle.
This could be because \f[CR]mode\f[R] is set to \f[CR]exclusive\f[R] and
an attempt is made to open multiple writers simultaneously.
.TP
\f[B]AbortError\f[R] \f[B]DOMException\f[R]
Thrown if implementation\-defined malware scans and safe\-browsing
checks fails.
.SH EXAMPLES
.SS Basic usage
The following asynchronous function writes the given contents to the
file handle, and thus to disk.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] writeFile(fileHandle, contents) {
  \f[I]// Create a FileSystemWritableFileStream to write to.\f[R]
  \f[B]const\f[R] writable = \f[B]await\f[R] fileHandle.createWritable();

  \f[I]// Write the contents of the file to the stream.\f[R]
  \f[B]await\f[R] writable.write(contents);

  \f[I]// Close the file and write the contents to disk.\f[R]
  \f[B]await\f[R] writable.close();
}
.EE
.SS Expanded usage with options
Our \c
.UR https://createwritable-mode-test.glitch.me/
\f[CR]createWritable()\f[R] mode test
.UE \c
\ example provides a \f[CR]<button>\f[R] to select a file to write to, a
text \f[CR]<input>\f[R] field into which you can enter some text to
write to the file, and a second \f[CR]<button>\f[R] to write the text to
the file.
.PP
In the demo above, try selecting a text file on your file system (or
entering a new file name), entering some text into the input field, and
writing the text to the file.
Open the file on your file system to check whether the write was
successful.
.PP
Also, try opening the page in two browser tabs simultaneously.
Select a file to write to in the first tab, and then immediately try
selecting the same file to write to in the second tab.
You should get an error message because we set
\f[CR]mode: \[dq]exclusive\[dq]\f[R] in the \f[CR]createWritable()\f[R]
call.
.PP
Below we\[cq]ll explore the code.
.SS HTML
The two \f[CR]<button>\f[R] elements and text \f[CR]<input>\f[R] field
look like this:
.IP
.EX
<\f[B]ol\f[R]>
  <\f[B]li\f[R]>
    Select a file to write to: <\f[B]button\f[R] class=\[dq]select\[dq]>Select file</\f[B]button\f[R]>
  </\f[B]li\f[R]>
  <\f[B]li\f[R]>
    <\f[B]label\f[R] for=\[dq]file\-text\[dq]>Enter text to write to the file:</\f[B]label\f[R]>
    <\f[B]input\f[R] type=\[dq]text\[dq] id=\[dq]file\-text\[dq] name=\[dq]file\-text\[dq] disabled />
  </\f[B]li\f[R]>
  <\f[B]li\f[R]>
    Write your text to the file:
    <\f[B]button\f[R] class=\[dq]write\[dq] disabled>Write text</\f[B]button\f[R]>
  </\f[B]li\f[R]>
</\f[B]ol\f[R]>
.EE
.PP
The text input field and the write text button are set to be disabled
initially via the \f[CR]disabled\f[R] attribute \[em] they shouldn\[cq]t
be used until the user has selected a file to write to.
.SS JavaScript
We start by grabbing references to the select file button, the write
text button, and the text input field.
We also declare a global variable \f[CR]writableStream\f[R], which will
store a reference to the writeable stream for writing the text to the
file, once created.
We initially set it to \f[CR]null\f[R].
.IP
.EX
\f[B]const\f[R] selectBtn = document.querySelector(\[dq].select\[dq]);
\f[B]const\f[R] writeBtn = document.querySelector(\[dq].write\[dq]);
\f[B]const\f[R] fileText = document.querySelector(\[dq]#file\-text\[dq]);

\f[B]let\f[R] writableStream = \f[B]null\f[R];
.EE
.PP
Next, we create an async function called \f[CR]selectFile()\f[R], which
we\[cq]ll invoke when the select button is pressed.
This uses the \f[CR]Window.showSaveFilePicker()\f[R] method to show the
user a file picker dialog and create a file handle to the file they
choose.
On that handle, we invoke the \f[CR]createWritable()\f[R] method to
create a stream to write the text to the selected file.
If the call fails, we log an error to the console.
.PP
We pass \f[CR]createWritable()\f[R] an options object containing the
following options:
.IP \[bu] 2
\f[CR]keepExistingData: true\f[R]: If the selected file already exists,
and data contained within it is copied to the temporary file before
writing commences.
.IP \[bu] 2
\f[CR]mode: \[dq]exclusive\[dq]\f[R]: States that only one writer can be
open on the file handle simultaneously.
If a second user loads the example and tries to select a file, they will
get an error.
.PP
Last of all, we enable the input field and the write text button, as
they are needed for the next step, and disable the select file button
(this is not currently needed).
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] selectFile() {
  \f[I]// Create a new handle\f[R]
  \f[B]const\f[R] handle = \f[B]await\f[R] window.showSaveFilePicker();

  \f[I]// Create a FileSystemWritableFileStream to write to\f[R]
  \f[B]try\f[R] {
    writableStream = \f[B]await\f[R] handle.createWritable({
      keepExistingData: \f[B]true\f[R],
      mode: \[dq]exclusive\[dq],
    });
  } \f[B]catch\f[R] (e) {
    \f[B]if\f[R] (e.name === \[dq]NoModificationAllowedError\[dq]) {
      console.log(
        \[ga]You can\[aq]t access that file right now; someone else is trying to modify it. Try again later.\[ga],
      );
    } \f[B]else\f[R] {
      console.log(e.message);
    }
  }

  \f[I]// Enable text field and write button, disable select button\f[R]
  fileText.disabled = \f[B]false\f[R];
  writeBtn.disabled = \f[B]false\f[R];
  selectBtn.disabled = \f[B]true\f[R];
}
.EE
.PP
Our next function, \f[CR]writeFile()\f[R], writes the text entered into
the input field to the chosen file using
\f[CR]FileSystemWritableFileStream.write()\f[R], then empties the input
field.
We then close the writable stream using
\f[CR]WritableStream.close()\f[R], and reset the demo so it can be run
again \[em] the \f[CR]disabled\f[R] states of the controls are toggled
back to their original states, and the \f[CR]writableStream\f[R]
variable is set back to \f[CR]null\f[R].
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] writeFile() {
  \f[I]// Write text to our file and empty out the text field\f[R]
  \f[B]await\f[R] writableStream.write(fileText.value);
  fileText.value = \[dq]\[dq];

  \f[I]// Close the file and write the contents to disk.\f[R]
  \f[B]await\f[R] writableStream.close();

  \f[I]// Disable text field and write button, enable select button\f[R]
  fileText.disabled = \f[B]true\f[R];
  writeBtn.disabled = \f[B]true\f[R];
  selectBtn.disabled = \f[B]false\f[R];

  \f[I]// Set writableStream back to null\f[R]
  writableStream = \f[B]null\f[R];
}
.EE
.PP
To get the demo running, we set event listeners on the buttons so that
the relevant function is run when each one is clicked.
.IP
.EX
selectBtn.addEventListener(\[dq]click\[dq], selectFile);
writeBtn.addEventListener(\[dq]click\[dq], writeFile);
.EE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
