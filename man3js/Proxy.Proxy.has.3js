.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Proxy.Proxy.has" "JS" "July 11, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Proxy.Proxy.has \- handler.has()
.SH SYNOPSIS
The \f[B]\f[CB]handler.has()\f[B]\f[R] method is a trap for the
\f[CR][[HasProperty]]\f[R] object internal method, which is used by
operations such as the \f[CR]in\f[R] operator.
.SH SYNTAX
.IP
.EX
new Proxy(target, {
  has(target, property) {
  }
})
.EE
.SS Parameters
The following parameters are passed to \f[CR]has()\f[R] method.
\f[CR]this\f[R] is bound to the handler.
.TP
\f[B]target\f[R]
The target object.
.TP
\f[B]property\f[R]
A string or \f[CR]Symbol\f[R] representing the property name.
.SS Return value
The \f[CR]has()\f[R] method must return a \f[CR]Boolean\f[R] indicating
whether or not the property exists.
Other values are coerced to booleans.
.SH DESCRIPTION
.SS Interceptions
This trap can intercept these operations:
.IP \[bu] 2
The \f[CR]in\f[R] operator: \f[CR]foo in proxy\f[R]
.IP \[bu] 2
\f[CR]with\f[R] check: \f[CR]with(proxy) { (foo); }\f[R]
.IP \[bu] 2
\f[CR]Reflect.has()\f[R]
.PP
Or any other operation that invokes the \f[CR][[HasProperty]]\f[R]
internal method.
.SS Invariants
The proxy\[cq]s \f[CR][[HasProperty]]\f[R] internal method throws a
\f[CR]TypeError\f[R] if the handler definition violates one of the
following invariants:
.IP \[bu] 2
A property cannot be reported as non\-existent, if it exists as a
non\-configurable own property of the target object.
That is, if \f[CR]Reflect.getOwnPropertyDescriptor()\f[R] returns
\f[CR]configurable: false\f[R] for the property on \f[CR]target\f[R],
the trap must return \f[CR]true\f[R].
.IP \[bu] 2
A property cannot be reported as non\-existent, if it exists as an own
property of the target object and the target object is not extensible.
That is, if \f[CR]Reflect.isExtensible()\f[R] returns \f[CR]false\f[R]
on \f[CR]target\f[R], and \f[CR]Reflect.getOwnPropertyDescriptor()\f[R]
returns a property descriptor for the property on \f[CR]target\f[R], the
trap must return \f[CR]true\f[R].
.SH EXAMPLES
.SS Trapping the in operator
The following code traps the \f[CR]in\f[R] operator.
.IP
.EX
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(
  {},
  {
    has(target, prop) {
      console.log(\[ga]called: ${prop}\[ga]);
      \f[B]return\f[R] \f[B]true\f[R];
    },
  },
);

console.log(\[dq]a\[dq] \f[B]in\f[R] p);
\f[I]// \[dq]called: a\[dq]\f[R]
\f[I]// true\f[R]
.EE
.PP
The following code violates an invariant.
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] obj = { a: 10 };
Object.preventExtensions(obj);

\f[B]const\f[R] p = \f[B]new\f[R] Proxy(obj, {
  has(target, prop) {
    \f[B]return\f[R] \f[B]false\f[R];
  },
});

\[dq]a\[dq] \f[B]in\f[R] p; \f[I]// TypeError is thrown\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Proxy\f[R]
.IP \[bu] 2
\f[CR]Proxy()\f[R] constructor
.IP \[bu] 2
\f[CR]in\f[R]
.IP \[bu] 2
\f[CR]Reflect.has()\f[R]
