.\" Automatically generated by Pandoc 3.4
.\"
.TH "ImageData.ImageData" "JS" "July 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ImageData.ImageData \- ImageData: ImageData() constructor
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]ImageData()\f[B]\f[R] constructor returns a newly
instantiated \f[CR]ImageData\f[R] object built from the typed array
given and having the specified width and height.
.PP
This constructor is the preferred way of creating such an object in a
\f[CR]Worker\f[R].
.SH SYNTAX
.IP
.EX
new ImageData(width, height)
new ImageData(width, height, settings)

new ImageData(dataArray, width)
new ImageData(dataArray, width, height)
new ImageData(dataArray, width, height, settings)
.EE
.SS Parameters
.TP
\f[B]width\f[R]
An unsigned long representing the width of the image.
.TP
\f[B]height\f[R]
An unsigned long representing the height of the image.
This value is optional if an array is given: the height will be inferred
from the array\[cq]s size and the given width.
.TP
\f[B]settings\f[R] \f[I](optional)\f[R]
An object with the following properties:
.RS
.IP \[bu] 2
\f[CR]colorSpace\f[R]: Specifies the color space of the image data.
Can be set to \f[CR]\[dq]srgb\[dq]\f[R] for the \c
.UR https://en.wikipedia.org/wiki/SRGB
sRGB color space
.UE \c
\ or \f[CR]\[dq]display\-p3\[dq]\f[R] for the \c
.UR https://en.wikipedia.org/wiki/DCI-P3
display\-p3 color space
.UE \c
\&.
.RE
.TP
\f[B]dataArray\f[R]
A \f[CR]Uint8ClampedArray\f[R] containing the underlying pixel
representation of the image.
If no such array is given, an image with a transparent black rectangle
of the specified \f[CR]width\f[R] and \f[CR]height\f[R] will be created.
.SS Return value
A new \f[CR]ImageData\f[R] object.
.SS Exceptions
.TP
\f[B]IndexSizeError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]array\f[R] is specified, but its length is not a
multiple of \f[CR](4 * width)\f[R] or \f[CR](4 * width * height)\f[R].
.SH EXAMPLES
.SS Creating a blank ImageData object
This example creates an \f[CR]ImageData\f[R] object that is 200 pixels
wide and 100 pixels tall, containing a total of 20,000 pixels.
.IP
.EX
\f[B]let\f[R] imageData = \f[B]new\f[R] ImageData(200, 100);
\f[I]// ImageData { width: 200, height: 100, data: Uint8ClampedArray[80000] }\f[R]
.EE
.SS ImageData using the display\-p3 color space
This example creates an \f[CR]ImageData\f[R] object with the \c
.UR https://en.wikipedia.org/wiki/DCI-P3
display\-p3 color space
.UE \c
\&.
.IP
.EX
\f[B]let\f[R] imageData = \f[B]new\f[R] ImageData(200, 100, { colorSpace: \[dq]display\-p3\[dq] });
.EE
.SS Initializing ImageData with an array
This example instantiates an \f[CR]ImageData\f[R] object with pixel
colors defined by an array.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
The array (\f[CR]arr\f[R]) has a length of \f[CR]40000\f[R]: it consists
of 10,000 pixels, each of which is defined by 4 values.
The \f[CR]ImageData\f[R] constructor specifies a \f[CR]width\f[R] of
\f[CR]200\f[R] for the new object, so its \f[CR]height\f[R] defaults to
10,000 divided by 200, which is \f[CR]50\f[R].
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
\f[B]const\f[R] arr = \f[B]new\f[R] Uint8ClampedArray(40_000);

\f[I]// Fill the array with the same RGBA values\f[R]
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < arr.length; i += 4) {
  arr[i + 0] = 0; \f[I]// R value\f[R]
  arr[i + 1] = 190; \f[I]// G value\f[R]
  arr[i + 2] = 0; \f[I]// B value\f[R]
  arr[i + 3] = 255; \f[I]// A value\f[R]
}

\f[I]// Initialize a new ImageData object\f[R]
\f[B]let\f[R] imageData = \f[B]new\f[R] ImageData(arr, 200);

\f[I]// Draw image data to the canvas\f[R]
ctx.putImageData(imageData, 20, 20);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.createImageData()\f[R], the creator
method that can be used outside workers.
