.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Math.imul" "JS" "August 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Math.imul \- Math.imul()
.SH SYNOPSIS
The \f[B]\f[CB]Math.imul()\f[B]\f[R] static method returns the result of
the C\-like 32\-bit multiplication of the two parameters.
.SH SYNTAX
.IP
.EX
Math.imul(a, b)
.EE
.SS Parameters
.TP
\f[B]a\f[R]
First number.
.TP
\f[B]b\f[R]
Second number.
.SS Return value
The result of the C\-like 32\-bit multiplication of the given arguments.
.SH DESCRIPTION
\f[CR]Math.imul()\f[R] allows for 32\-bit integer multiplication with
C\-like semantics.
This feature is useful for projects like \c
.UR https://en.wikipedia.org/wiki/Emscripten
Emscripten
.UE \c
\&.
.PP
Because \f[CR]imul()\f[R] is a static method of \f[CR]Math\f[R], you
always use it as \f[CR]Math.imul()\f[R], rather than as a method of a
\f[CR]Math\f[R] object you created (\f[CR]Math\f[R] is not a
constructor).
.PP
If you use normal JavaScript floating point numbers in
\f[CR]imul()\f[R], you will experience a degrade in performance.
This is because of the costly conversion from a floating point to an
integer for multiplication, and then converting the multiplied integer
back into a floating point.
However, with asm.js, which allows JIT\-optimizers to more confidently
use integers in JavaScript, multiplying two numbers stored internally as
integers (which is only possible with asm.js) with \f[CR]imul()\f[R]
could be potentially more performant.
.SH EXAMPLES
.SS Using Math.imul()
.IP
.EX
Math.imul(2, 4); \f[I]// 8\f[R]
Math.imul(\-1, 8); \f[I]// \-8\f[R]
Math.imul(\-2, \-2); \f[I]// 4\f[R]
Math.imul(0xffffffff, 5); \f[I]// \-5\f[R]
Math.imul(0xfffffffe, 5); \f[I]// \-10\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-math
Polyfill of \f[CR]Math.imul\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://en.wikipedia.org/wiki/Emscripten
Emscripten
.UE \c
\ on Wikipedia
