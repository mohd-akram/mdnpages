.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Element.mouseenter_event" "JS" "December 22, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.mouseenter_event \- Element: mouseenter event
.SH SYNOPSIS
The \f[B]\f[CB]mouseenter\f[B]\f[R] event is fired at an
\f[CR]Element\f[R] when a pointing device (usually a mouse) is initially
moved so that its hotspot is within the element at which the event was
fired.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]mouseenter\[dq], (event) \f[B]=>\f[R] {});

onmouseenter = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MouseEvent\f[R].
Inherits from \f[CR]UIEvent\f[R] and \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]MouseEvent.altKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the alt key was down when the mouse event was
fired.
.TP
\f[B]MouseEvent.button\f[R] \f[I](read\-only)\f[R]
The button number that was pressed (if applicable) when the mouse event
was fired.
.TP
\f[B]MouseEvent.buttons\f[R] \f[I](read\-only)\f[R]
The buttons being pressed (if any) when the mouse event was fired.
.TP
\f[B]MouseEvent.clientX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.clientY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.ctrlKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the control key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.layerX\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the horizontal coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.layerY\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the vertical coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.metaKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the meta key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.movementX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.movementY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.offsetX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.offsetY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.pageX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.pageY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.relatedTarget\f[R] \f[I](read\-only)\f[R]
The secondary target for the event, if there is one.
.TP
\f[B]MouseEvent.screenX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.screenY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.shiftKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the shift key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.mozInputSource\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The type of device that generated the event (one of the
\f[CR]MOZ_SOURCE_*\f[R] constants).
This lets you, for example, determine whether a mouse event was
generated by an actual mouse or by a touch event (which might affect the
degree of accuracy with which you interpret the coordinates associated
with the event).
.TP
\f[B]MouseEvent.webkitForce\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The amount of pressure applied when clicking.
.TP
\f[B]MouseEvent.x\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientX\f[R].
.TP
\f[B]MouseEvent.y\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientY\f[R].
.SH USAGE NOTES
Though similar to \f[CR]mouseover\f[R], \f[CR]mouseenter\f[R] differs in
that it doesn\[cq]t bubble and it isn\[cq]t sent to any descendants when
the pointer is moved from one of its descendants\[cq] physical space to
its own physical space.
.SS Behavior of \f[CR]mouseenter\f[R] events
[IMAGE: Mouseenter behavior diagram] One \f[CR]mouseenter\f[R] event is
sent to each element of the hierarchy when entering them.
Here 4 events are sent to the four elements of the hierarchy when the
pointer reaches the text.
.SS Behavior of \f[CR]mouseover\f[R] events
[IMAGE: Mouseover behavior diagram] A single \f[CR]mouseover\f[R] event
is sent to the deepest element of the DOM tree, then it bubbles up the
hierarchy until it is canceled by a handler or reaches the root.
.PP
With deep hierarchies, the number of \f[CR]mouseover\f[R] events sent
can be quite huge and cause significant performance problems.
In such cases, it is better to listen for \f[CR]mouseenter\f[R] events.
.PP
Combined with the corresponding \f[CR]mouseleave\f[R] (which is fired at
the element when the mouse exits its content area), the
\f[CR]mouseenter\f[R] event acts in a very similar way to the CSS
\f[CR]:hover\f[R] pseudo\-class.
.SH EXAMPLES
The \f[CR]mouseover\f[R] documentation has an example illustrating the
difference between \f[CR]mouseover\f[R] and \f[CR]mouseenter\f[R].
.SS mouseenter
The following trivial example uses the \f[CR]mouseenter\f[R] event to
change the border on the \f[CR]div\f[R] when the mouse enters the space
allotted to it.
It then adds an item to the list with the number of the
\f[CR]mouseenter\f[R] or \f[CR]mouseleave\f[R] event.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]mouseTarget\[dq]>
  <\f[B]ul\f[R] id=\[dq]unorderedList\[dq]>
    <\f[B]li\f[R]>No events yet!</\f[B]li\f[R]>
  </\f[B]ul\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
Styling the \f[CR]div\f[R] to make it more visible.
.IP
.EX
mouseTarget {
  \f[B]box\-sizing\f[R]: border\-box;
  \f[B]width\f[R]: 15rem;
  \f[B]border\f[R]: 1px solid #333;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]let\f[R] enterEventCount = 0;
\f[B]let\f[R] leaveEventCount = 0;
\f[B]const\f[R] mouseTarget = document.getElementById(\[dq]mouseTarget\[dq]);
\f[B]const\f[R] unorderedList = document.getElementById(\[dq]unorderedList\[dq]);

mouseTarget.addEventListener(\[dq]mouseenter\[dq], (e) \f[B]=>\f[R] {
  mouseTarget.style.border = \[dq]5px dotted orange\[dq];
  enterEventCount++;
  addListItem(\[ga]This is mouseenter event ${enterEventCount}.\[ga]);
});

mouseTarget.addEventListener(\[dq]mouseleave\[dq], (e) \f[B]=>\f[R] {
  mouseTarget.style.border = \[dq]1px solid #333\[dq];
  leaveEventCount++;
  addListItem(\[ga]This is mouseleave event ${leaveEventCount}.\[ga]);
});

\f[B]function\f[R] addListItem(text) {
  \f[I]// Create a new text node using the supplied text\f[R]
  \f[B]const\f[R] newTextNode = document.createTextNode(text);

  \f[I]// Create a new li element\f[R]
  \f[B]const\f[R] newListItem = document.createElement(\[dq]li\[dq]);

  \f[I]// Add the text node to the li element\f[R]
  newListItem.appendChild(newTextNode);

  \f[I]// Add the newly created list item to list\f[R]
  unorderedList.appendChild(newListItem);
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
Introduction to events
.IP \[bu] 2
\f[CR]mousedown\f[R]
.IP \[bu] 2
\f[CR]mouseup\f[R]
.IP \[bu] 2
\f[CR]mousemove\f[R]
.IP \[bu] 2
\f[CR]click\f[R]
.IP \[bu] 2
\f[CR]dblclick\f[R]
.IP \[bu] 2
\f[CR]mouseover\f[R]
.IP \[bu] 2
\f[CR]mouseout\f[R]
.IP \[bu] 2
\f[CR]mouseenter\f[R]
.IP \[bu] 2
\f[CR]mouseleave\f[R]
.IP \[bu] 2
\f[CR]contextmenu\f[R]
