.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ConstantSourceNode" "JS" "February 19, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ConstantSourceNode \- ConstantSourceNode
.SH SYNOPSIS
The \f[CR]ConstantSourceNode\f[R] interface\[em]part of the Web Audio
API\[em]represents an audio source (based upon
\f[CR]AudioScheduledSourceNode\f[R]) whose output is single unchanging
value.
This makes it useful for cases in which you need a constant value coming
in from an audio source.
In addition, it can be used like a constructible \f[CR]AudioParam\f[R]
by automating the value of its \f[CR]offset\f[R] or by connecting
another node to it; see Controlling multiple parameters with
ConstantSourceNode.
.PP
A \f[CR]ConstantSourceNode\f[R] has no inputs and exactly one monaural
(one\-channel) output.
The output\[cq]s value is always the same as the value of the
\f[CR]offset\f[R] parameter.
Number of inputs
0
Number of outputs
1
.SH CONSTRUCTOR
.TP
\f[B]ConstantSourceNode()\f[R]
Creates and returns a new \f[CR]ConstantSourceNode\f[R] instance,
optionally specifying an object which establishes initial values for the
object\[cq]s properties.
As an alternative, you can use the
\f[CR]BaseAudioContext.createConstantSource()\f[R] factory method; see
Creating an AudioNode.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent interface,
\f[CI]AudioScheduledSourceNode\f[I], and adds the following
properties:\f[R]
.TP
\f[B]offset\f[R]
An \f[CR]AudioParam\f[R] which specifies the value that this source
continuously outputs.
The default value is 1.0.
.SS Events
\f[I]Inherits events from its parent interface,
\f[CI]AudioScheduledSourceNode\f[I].\f[R]
.RS
.PP
\f[B]Note:\f[R] Some browsers\[cq] implementations of these events are
part of the \f[CR]AudioScheduledSourceNode\f[R] interface.
.RE
.TP
\f[B]ended\f[R]
Fired whenever the \f[CR]ConstantSourceNode\f[R] data has stopped
playing.
.SH INSTANCE METHODS
\f[I]Inherits methods from its parent interface,
\f[CI]AudioScheduledSourceNode\f[I].\f[R]
.RS
.PP
\f[B]Note:\f[R] Some browsers\[cq] implementations of these methods are
part of the \f[CR]AudioScheduledSourceNode\f[R] interface.
.RE
.TP
\f[B]start()\f[R]
Schedules a sound to playback at an exact time.
.TP
\f[B]stop()\f[R]
Schedules a sound to stop playback at an exact time.
.SH EXAMPLE
In the article Controlling multiple parameters with ConstantSourceNode,
a \f[CR]ConstantSourceNode\f[R] is created to allow one slider control
to change the gain on two \f[CR]GainNode\f[R]s.
The three nodes are set up like this:
.IP
.EX
gainNode2 = context.createGain();
gainNode3 = context.createGain();
gainNode2.gain.value = gainNode3.gain.value = 0.5;
volumeSliderControl.value = gainNode2.gain.value;

constantNode = context.createConstantSource();
constantNode.connect(gainNode2.gain);
constantNode.connect(gainNode3.gain);
constantNode.start();

gainNode2.connect(context.destination);
gainNode3.connect(context.destination);
.EE
.PP
This code starts by creating the gain nodes and setting them and the
volume control that will adjust their value all to 0.5.
Then the \f[CR]ConstantSourceNode\f[R] is created by calling
\f[CR]AudioContext.createConstantSource()\f[R], and the gain parameters
of each of the two gain nodes are connected to the
\f[CR]ConstantSourceNode\f[R].
After starting the constant source by calling its \f[CR]start()\f[R]
method.
Finally, the two gain nodes are connected to the audio destination
(typically speakers or headphones).
.PP
Now, whenever the value of \f[CR]constantNode.offset\f[R] changes, the
gain on both \f[CR]gainNode2\f[R] and \f[CR]gainNode3\f[R] will change
to have that same value.
.PP
To see this example in action, as well as to read the rest of the code
from which these snippets were derived, see Controlling multiple
parameters with ConstantSourceNode.
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
.IP \[bu] 2
\f[CR]AudioScheduledSourceNode\f[R]
.IP \[bu] 2
\f[CR]AudioNode\f[R]
