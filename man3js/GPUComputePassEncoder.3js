.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMPUTEPASSENCODER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUComputePassEncoder \- GPUComputePassEncoder
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUComputePassEncoder\f[B]\f[R] interface of the WebGPU
API encodes commands related to controlling the compute shader stage, as
issued by a \f[CR]GPUComputePipeline\f[R].
It forms part of the overall encoding activity of a
\f[CR]GPUCommandEncoder\f[R].
.PP
A compute pipeline contains a single compute stage in which a compute
shader takes general data, processes it in parallel across a specified
number of workgroups, then returns the result in one or more buffers.
.PP
A \f[CR]GPUComputePassEncoder\f[R] object instance is created via the
\f[CR]GPUCommandEncoder.beginComputePass()\f[R] property.
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH INSTANCE METHODS
.TP
\f[B]dispatchWorkgroups()\f[R]
Dispatches a specific grid of workgroups to perform the work being done
by the current \f[CR]GPUComputePipeline\f[R].
.TP
\f[B]dispatchWorkgroupsIndirect()\f[R]
Dispatches a grid of workgroups, defined by the parameters of a
\f[CR]GPUBuffer\f[R], to perform the work being done by the current
\f[CR]GPUComputePipeline\f[R].
.TP
\f[B]end()\f[R]
Completes recording of the current compute pass command sequence.
.TP
\f[B]insertDebugMarker()\f[R]
Marks a specific point in a series of encoded commands with a label.
.TP
\f[B]popDebugGroup()\f[R]
Ends a debug group, which is begun with a \f[CR]pushDebugGroup()\f[R]
call.
.TP
\f[B]pushDebugGroup()\f[R]
Begins a debug group, which is marked with a specified label, and will
contain all subsequent encoded commands up until a
\f[CR]popDebugGroup()\f[R] method is invoked.
.TP
\f[B]setBindGroup()\f[R]
Sets the \f[CR]GPUBindGroup\f[R] to use for subsequent compute commands,
for a given index.
.TP
\f[B]setPipeline()\f[R]
Sets the \f[CR]GPUComputePipeline\f[R] to use for this compute pass.
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
, several commands are recorded via a \f[CR]GPUCommandEncoder\f[R].
Most of these commands originate from the
\f[CR]GPUComputePassEncoder\f[R] created via
\f[CR]GPUCommandEncoder.beginComputePass()\f[R].
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create GPUCommandEncoder to encode commands to issue to the GPU\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Create GPUComputePassEncoder to initiate compute pass\f[R]
\f[B]const\f[R] passEncoder = commandEncoder.beginComputePass();

\f[I]// Issue commands\f[R]
passEncoder.setPipeline(computePipeline);
passEncoder.setBindGroup(0, bindGroup);
passEncoder.dispatchWorkgroups(Math.ceil(BUFFER_SIZE / 64));

\f[I]// End the compute pass\f[R]
passEncoder.end();

\f[I]// Copy output buffer to staging buffer\f[R]
commandEncoder.copyBufferToBuffer(
  output,
  0, \f[I]// Source offset\f[R]
  stagingBuffer,
  0, \f[I]// Destination offset\f[R]
  BUFFER_SIZE,
);

\f[I]// End frame by passing array of command buffers to command queue for execution\f[R]
device.queue.submit([commandEncoder.finish()]);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
