.\" Automatically generated by Pandoc 3.4
.\"
.TH "Node.compareDocumentPosition" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Node.compareDocumentPosition \- Node: compareDocumentPosition() method
.SH SYNOPSIS
The \f[B]\f[CB]compareDocumentPosition()\f[B]\f[R] method of the
\f[CR]Node\f[R] interface reports the position of its argument node
relative to the node on which it is called.
.SH SYNTAX
.IP
.EX
compareDocumentPosition(otherNode)
.EE
.SS Parameters
.TP
\f[B]otherNode\f[R]
The \f[CR]Node\f[R] for which position should be reported, relative to
the node.
.SS Return value
An integer value representing \f[CR]otherNode\f[R]\[cq]s position
relative to \f[CR]node\f[R] as a \c
.UR https://en.wikipedia.org/wiki/Mask_(computing)
bitmask
.UE \c
\ combining the following constant properties of \f[CR]Node\f[R]:
.TP
\f[B]Node.DOCUMENT_POSITION_DISCONNECTED\f[R] (\f[B]1\f[R])
Both nodes are in different documents or different trees in the same
document.
.TP
\f[B]Node.DOCUMENT_POSITION_PRECEDING\f[R] (\f[B]2\f[R])
\f[CR]otherNode\f[R] precedes the node in either a \c
.UR https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR
pre\-order depth\-first traversal
.UE \c
\ of a tree containing both (e.g., as an ancestor or previous sibling or
a descendant of a previous sibling or previous sibling of an ancestor)
or (if they are disconnected) in an arbitrary but consistent ordering.
.TP
\f[B]Node.DOCUMENT_POSITION_FOLLOWING\f[R] (\f[B]4\f[R])
\f[CR]otherNode\f[R] follows the node in either a \c
.UR https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR
pre\-order depth\-first traversal
.UE \c
\ of a tree containing both (e.g., as a descendant or following sibling
or a descendant of a following sibling or following sibling of an
ancestor) or (if they are disconnected) in an arbitrary but consistent
ordering.
.TP
\f[B]Node.DOCUMENT_POSITION_CONTAINS\f[R] (\f[B]8\f[R])
\f[CR]otherNode\f[R] is an ancestor of the node.
.TP
\f[B]Node.DOCUMENT_POSITION_CONTAINED_BY\f[R] (\f[B]16\f[R])
\f[CR]otherNode\f[R] is a descendant of the node.
.TP
\f[B]Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\f[R] (\f[B]32\f[R])
The result relies upon arbitrary and/or implementation\-specific
behavior and is not guaranteed to be portable.
.PP
Zero or more bits can be set, depending on which scenarios apply.
For example, if \f[CR]otherNode\f[R] is located earlier in the document
\f[B]\f[BI]and\f[B]\f[R] contains the node on which
\f[CR]compareDocumentPosition()\f[R] was called, then both the
\f[CR]DOCUMENT_POSITION_CONTAINS\f[R] and
\f[CR]DOCUMENT_POSITION_PRECEDING\f[R] bits would be set, producing a
value of \f[CR]10\f[R] (\f[CR]0x0A\f[R]).
.SH EXAMPLE
.IP
.EX
\f[B]const\f[R] head = document.head;
\f[B]const\f[R] body = document.body;

\f[B]if\f[R] (head.compareDocumentPosition(body) & Node.DOCUMENT_POSITION_FOLLOWING) {
  console.log(\[dq]Well\-formed document\[dq]);
} \f[B]else\f[R] {
  console.error(\[dq]<head> is not before <body>\[dq]);
}
.EE
.RS
.PP
\f[B]Note:\f[R] Because the result returned by
\f[CR]compareDocumentPosition()\f[R] is a bitmask, the bitwise AND
operator must be used for meaningful results.
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Node.contains()\f[R]
