.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REGEXP.SYMBOL.MATCH" "3JS" "April 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.Symbol.match \- RegExp.prototypeSymbol.match
.SH SYNOPSIS
The \f[B]\f[CB][Symbol.match]()\f[B]\f[R] method of \f[CR]RegExp\f[R]
instances specifies how \f[CR]String.prototype.match()\f[R] should
behave.
In addition, its presence (or absence) can influence whether an object
is regarded as a regular expression.
.IP
.EX
\f[B]class\f[R] RegExp1 \f[B]extends\f[R] RegExp {
  [Symbol.match](str) {
    \f[B]const\f[R] result = RegExp.prototype[Symbol.match].call(\f[B]this\f[R], str);
    \f[B]if\f[R] (result) {
      \f[B]return\f[R] \(dqVALID\(dq;
    }
    \f[B]return\f[R] \(dqINVALID\(dq;
  }
}

console.log(\(dq2012\-07\-02\(dq.match(\f[B]new\f[R] RegExp1(\(dq([0\-9]+)\-([0\-9]+)\-([0\-9]+)\(dq)));
\f[I]// Expected output: \(dqVALID\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
regexp[Symbol.match](str)
.EE
.SS Parameters
.TP
\f[B]str\f[R]
A \f[CR]String\f[R] that is a target of the match.
.SS Return value
An \f[CR]Array\f[R] whose contents depend on the presence or absence of
the global (\f[CR]g\f[R]) flag, or \f[CR]null\f[R] if no matches are
found.
.IP \(bu 2
If the \f[CR]g\f[R] flag is used, all results matching the complete
regular expression will be returned, but capturing groups are not
included.
.IP \(bu 2
If the \f[CR]g\f[R] flag is not used, only the first complete match and
its related capturing groups are returned.
In this case, \f[CR]match()\f[R] will return the same result as
\f[CR]RegExp.prototype.exec()\f[R] (an array with some extra
properties).
.SH DESCRIPTION
This method is called internally in \f[CR]String.prototype.match()\f[R].
.PP
For example, the following two examples return same result.
.IP
.EX
\(dqabc\(dq.match(/a/);

/a/[Symbol.match](\(dqabc\(dq);
.EE
.PP
If the regex is global (with the \f[CR]g\f[R] flag), the regex\(cqs
\f[CR]exec()\f[R] method will be repeatedly called until
\f[CR]exec()\f[R] returns \f[CR]null\f[R].
Otherwise, \f[CR]exec()\f[R] would only be called once and its result
becomes the return value of \f[CR][Symbol.match]()\f[R].
.PP
Because \f[CR][Symbol.match]()\f[R] would keep calling \f[CR]exec()\f[R]
until it returns \f[CR]null\f[R], and \f[CR]exec()\f[R] would
automatically reset the regex\(cqs \f[CR]lastIndex\f[R] to 0 when the
last match fails, \f[CR][Symbol.match]()\f[R] would typically not have
side effects when it exits.
However, when the regex is sticky but not global, \f[CR]lastIndex\f[R]
would not be reset.
In this case, each call to \f[CR]match()\f[R] may return a different
result.
.IP
.EX
\f[B]const\f[R] re = /[abc]/y;
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < 5; i++) {
  console.log(\(dqabc\(dq.match(re), re.lastIndex);
}
\f[I]// [ \(aqa\(aq ] 1\f[R]
\f[I]// [ \(aqb\(aq ] 2\f[R]
\f[I]// [ \(aqc\(aq ] 3\f[R]
\f[I]// null 0\f[R]
\f[I]// [ \(aqa\(aq ] 1\f[R]
.EE
.PP
When the regex is sticky and global, it would still perform sticky
matches \(em i.e., it would fail to match any occurrences beyond the
\f[CR]lastIndex\f[R].
.IP
.EX
console.log(\(dqab\-c\(dq.match(/[abc]/gy)); \f[I]// [ \(aqa\(aq, \(aqb\(aq ]\f[R]
.EE
.PP
If the current match is an empty string, the \f[CR]lastIndex\f[R] would
still be advanced \(em if the regex is Unicode\-aware, it would advance
by one Unicode code point; otherwise, it advances by one UTF\-16 code
unit.
.IP
.EX
console.log(\(dqðŸ˜„\(dq.match(/(?:)/g)); \f[I]// [ \(aq\(aq, \(aq\(aq, \(aq\(aq ]\f[R]
console.log(\(dqðŸ˜„\(dq.match(/(?:)/gu)); \f[I]// [ \(aq\(aq, \(aq\(aq ]\f[R]
.EE
.PP
This method exists for customizing match behavior within
\f[CR]RegExp\f[R] subclasses.
.PP
In addition, the \f[CR][Symbol.match]\f[R] property is used to check
whether an object is a regular expression.
.SH EXAMPLES
.SS Direct call
This method can be used in \f[I]almost\f[R] the same way as
\f[CR]String.prototype.match()\f[R], except the different
\f[CR]this\f[R] and the different arguments order.
.IP
.EX
\f[B]const\f[R] re = /[0\-9]+/g;
\f[B]const\f[R] str = \(dq2016\-01\-02\(dq;
\f[B]const\f[R] result = re[Symbol.match](str);
console.log(result); \f[I]// [\(dq2016\(dq, \(dq01\(dq, \(dq02\(dq]\f[R]
.EE
.SS Using \f[CR][Symbol.match]()\f[R] in subclasses
Subclasses of \f[CR]RegExp\f[R] can override the
\f[CR][Symbol.match]()\f[R] method to modify the default behavior.
.IP
.EX
\f[B]class\f[R] MyRegExp \f[B]extends\f[R] RegExp {
  [Symbol.match](str) {
    \f[B]const\f[R] result = RegExp.prototype[Symbol.match].call(\f[B]this\f[R], str);
    \f[B]if\f[R] (!result) \f[B]return\f[R] \f[B]null\f[R];
    \f[B]return\f[R] {
      group(n) {
        \f[B]return\f[R] result[n];
      },
    };
  }
}

\f[B]const\f[R] re = \f[B]new\f[R] MyRegExp(\(dq([0\-9]+)\-([0\-9]+)\-([0\-9]+)\(dq);
\f[B]const\f[R] str = \(dq2016\-01\-02\(dq;
\f[B]const\f[R] result = str.match(re); \f[I]// String.prototype.match calls re[Symbol.match]().\f[R]
console.log(result.group(1)); \f[I]// 2016\f[R]
console.log(result.group(2)); \f[I]// 01\f[R]
console.log(result.group(3)); \f[I]// 02\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]RegExp.prototype[Symbol.match]\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]String.prototype.match()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.matchAll]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.replace]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.search]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.split]()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.exec()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.test()\f[R]
.IP \(bu 2
\f[CR]Symbol.match\f[R]
