.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "WebGL2RenderingContext.getBufferSubData" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGL2RenderingContext.getBufferSubData \- WebGL2RenderingContext:
getBufferSubData() method
.SH SYNOPSIS
The \f[B]\f[CB]WebGL2RenderingContext.getBufferSubData()\f[B]\f[R]
method of the WebGL 2 API reads data from a buffer binding point and
writes them to an \f[CR]ArrayBuffer\f[R] or
\f[CR]SharedArrayBuffer\f[R].
.SH SYNTAX
.IP
.EX
getBufferSubData(target, srcByteOffset, dstData)
getBufferSubData(target, srcByteOffset, dstData, dstOffset)
getBufferSubData(target, srcByteOffset, dstData, dstOffset, length)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A \f[CR]GLenum\f[R] specifying the binding point (target).
Possible values:
.RS
.TP
\f[B]gl.ARRAY_BUFFER\f[R]
Buffer containing vertex attributes, such as vertex coordinates, texture
coordinate data, or vertex color data.
.TP
\f[B]gl.ELEMENT_ARRAY_BUFFER\f[R]
Buffer used for element indices.
.TP
\f[B]gl.COPY_READ_BUFFER\f[R]
Buffer for copying from one buffer object to another.
.TP
\f[B]gl.COPY_WRITE_BUFFER\f[R]
Buffer for copying from one buffer object to another.
.TP
\f[B]gl.TRANSFORM_FEEDBACK_BUFFER\f[R]
Buffer for transform feedback operations.
.TP
\f[B]gl.UNIFORM_BUFFER\f[R]
Buffer used for storing uniform blocks.
.TP
\f[B]gl.PIXEL_PACK_BUFFER\f[R]
Buffer used for pixel transfer operations.
.TP
\f[B]gl.PIXEL_UNPACK_BUFFER\f[R]
Buffer used for pixel transfer operations.
.RE
.TP
\f[B]srcByteOffset\f[R]
A \f[CR]GLintptr\f[R] specifying the byte offset from which to start
reading from the buffer.
.TP
\f[B]dstData\f[R]
A \f[CR]TypedArray\f[R] or a \f[CR]DataView\f[R] object to copy the data
to.
If \f[CR]dstData\f[R] is a \f[CR]DataView\f[R] then \f[CR]dstOffset\f[R]
and \f[CR]length\f[R] are interpreted in bytes, otherwise
\f[CR]dstData\f[R]\[cq]s element type is used.
.TP
\f[B]dstOffset\f[R] \f[I](optional)\f[R]
A \f[CR]GLuint\f[R] specifying the element index offset to start writing
in \f[CR]dstData\f[R].
.TP
\f[B]length\f[R] \f[I](optional)\f[R]
A \f[CR]GLuint\f[R] specifying the number of elements to copy.
If this is 0 or not specified, \f[CR]getBufferSubData\f[R] will copy
until the end of \f[CR]dstData\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
An \f[CR]INVALID_VALUE\f[R] error is generated if:
.IP \[bu] 2
\f[CR]offset\f[R] + \f[CR]returnedData.byteLength\f[R] would extend
beyond the end of the buffer
.IP \[bu] 2
\f[CR]returnedData\f[R] is \f[CR]null\f[R]
.IP \[bu] 2
\f[CR]offset\f[R] is less than zero.
.PP
An \f[CR]INVALID_OPERATION\f[R] error is generated if:
.IP \[bu] 2
zero is bound to \f[CR]target\f[R]
.IP \[bu] 2
\f[CR]target\f[R] is \f[CR]TRANSFORM_FEEDBACK_BUFFER\f[R], and any
transform feedback object is currently active.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] buffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
gl.bufferData(gl.ARRAY_BUFFER, \f[B]new\f[R] Float32Array(vertices), gl.STATIC_DRAW);

\f[B]const\f[R] arrBuffer = \f[B]new\f[R] ArrayBuffer(
  vertices.length * Float32Array.BYTES_PER_ELEMENT,
);
gl.getBufferSubData(gl.ARRAY_BUFFER, 0, \f[B]new\f[R] Float32Array(arrBuffer));
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.bufferData()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.bufferSubData()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getBufferParameter()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.copyBufferSubData()\f[R]
