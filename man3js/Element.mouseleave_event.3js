.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.MOUSELEAVE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.mouseleave_event \- Element: mouseleave event
.SH SYNOPSIS
The \f[B]\f[CB]mouseleave\f[B]\f[R] event is fired at an
\f[CR]Element\f[R] when the cursor of a pointing device (usually a
mouse) is moved out of it.
.PP
\f[CR]mouseleave\f[R] and \f[CR]mouseout\f[R] are similar but differ in
that \f[CR]mouseleave\f[R] does not bubble and \f[CR]mouseout\f[R] does.
This means that \f[CR]mouseleave\f[R] is fired when the pointer has
exited the element \f[I]and\f[R] all of its descendants, whereas
\f[CR]mouseout\f[R] is fired when the pointer leaves the element
\f[I]or\f[R] leaves one of the element\(cqs descendants, because of
bubbling (even if the pointer is still within the element).
Other than that, leave and out events for the same situation are
dispatched at the same time, if appropriate.
.PP
The \f[CR]mouseleave\f[R] and \f[CR]mouseout\f[R] events will not be
triggered when the element is replaced or removed from the DOM.
.PP
Note that \(lqmoving out of an element\(rq refers to the element\(cqs
position in the DOM tree, not to its visual position.
For example, if two sibling elements are positioned so one is placed
inside the other, then moving from the outer element into the inner
element will trigger \f[CR]mouseleave\f[R] on the outer element, even
though the pointer is still in the bounds of the outer element.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqmouseleave\(dq, (event) => { })

onmouseleave = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]MouseEvent\f[R].
Inherits from \f[CR]UIEvent\f[R] and \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties of its parents,
\f[CI]UIEvent\f[I] and \f[CI]Event\f[I].\f[R]
.TP
\f[B]MouseEvent.altKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the alt key was down when the mouse event was
fired.
.TP
\f[B]MouseEvent.button\f[R] \f[I](read\-only)\f[R]
The button number that was pressed (if applicable) when the mouse event
was fired.
.TP
\f[B]MouseEvent.buttons\f[R] \f[I](read\-only)\f[R]
The buttons being pressed (if any) when the mouse event was fired.
.TP
\f[B]MouseEvent.clientX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.clientY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in viewport coordinates.
.TP
\f[B]MouseEvent.ctrlKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the control key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.layerX\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the horizontal coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.layerY\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns the vertical coordinate of the event relative to the current
layer.
.TP
\f[B]MouseEvent.metaKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the meta key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.movementX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.movementY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
last \f[CR]mousemove\f[R] event.
.TP
\f[B]MouseEvent.offsetX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.offsetY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the position of the
padding edge of the target node.
.TP
\f[B]MouseEvent.pageX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.pageY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer relative to the whole document.
.TP
\f[B]MouseEvent.relatedTarget\f[R] \f[I](read\-only)\f[R]
The secondary target for the event, if there is one.
.TP
\f[B]MouseEvent.screenX\f[R] \f[I](read\-only)\f[R]
The X coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.screenY\f[R] \f[I](read\-only)\f[R]
The Y coordinate of the mouse pointer in screen coordinates.
.TP
\f[B]MouseEvent.shiftKey\f[R] \f[I](read\-only)\f[R]
Returns \f[CR]true\f[R] if the shift key was down when the mouse event
was fired.
.TP
\f[B]MouseEvent.mozInputSource\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The type of device that generated the event (one of the
\f[CR]MOZ_SOURCE_*\f[R] constants).
This lets you, for example, determine whether a mouse event was
generated by an actual mouse or by a touch event (which might affect the
degree of accuracy with which you interpret the coordinates associated
with the event).
.TP
\f[B]MouseEvent.webkitForce\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
The amount of pressure applied when clicking.
.TP
\f[B]MouseEvent.x\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientX\f[R].
.TP
\f[B]MouseEvent.y\f[R] \f[I](read\-only)\f[R]
Alias for \f[CR]MouseEvent.clientY\f[R].
.SS Behavior of \f[CR]mouseleave\f[R] events
[IMAGE: mouseleave behavior diagram]
mouseleave behavior diagram
.PP
One \f[CR]mouseleave\f[R] event is sent to each element of the hierarchy
when leaving them.
Here four events are sent to the four elements of the hierarchy when the
pointer moves from the text to an area outside of the most outer div
represented here.
.SS Behavior of \f[CR]mouseout\f[R] events
[IMAGE: mouseout behavior diagram]
mouseout behavior diagram
.PP
One single \f[CR]mouseout\f[R] event is sent to the deepest element of
the DOM tree, then it bubbles up the hierarchy until it is canceled by a
handler or reaches the root.
.SH EXAMPLES
The \f[CR]mouseout\f[R] documentation has an example illustrating the
difference between \f[CR]mouseout\f[R] and \f[CR]mouseleave\f[R].
.SS mouseleave
The following trivial example uses the \f[CR]mouseenter\f[R] event to
change the border on the \f[CR]<div>\f[R] when the mouse enters the
space allotted to it.
It then adds an item to the list with the number of the
\f[CR]mouseenter\f[R] or \f[CR]mouseleave\f[R] event.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\(dqmouseTarget\(dq>
  <\f[B]ul\f[R] id=\(dqunorderedList\(dq>
    <\f[B]li\f[R]>No events yet!</\f[B]li\f[R]>
  </\f[B]ul\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
Styling the \f[CR]<div>\f[R] to make it more visible.
.IP
.EX
mouseTarget {
  \f[B]box\-sizing\f[R]: border\-box;
  \f[B]width\f[R]: 15rem;
  \f[B]border\f[R]: 1px solid #333;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]let\f[R] enterEventCount = 0;
\f[B]let\f[R] leaveEventCount = 0;
\f[B]const\f[R] mouseTarget = document.getElementById(\(dqmouseTarget\(dq);
\f[B]const\f[R] unorderedList = document.getElementById(\(dqunorderedList\(dq);

mouseTarget.addEventListener(\(dqmouseenter\(dq, (e) \f[B]=>\f[R] {
  mouseTarget.style.border = \(dq5px dotted orange\(dq;
  enterEventCount++;
  addListItem(\(gaThis is mouseenter event ${enterEventCount}.\(ga);
});

mouseTarget.addEventListener(\(dqmouseleave\(dq, (e) \f[B]=>\f[R] {
  mouseTarget.style.border = \(dq1px solid #333\(dq;
  leaveEventCount++;
  addListItem(\(gaThis is mouseleave event ${leaveEventCount}.\(ga);
});

\f[B]function\f[R] addListItem(text) {
  \f[I]// Create a new text node using the supplied text\f[R]
  \f[B]const\f[R] newTextNode = document.createTextNode(text);

  \f[I]// Create a new li element\f[R]
  \f[B]const\f[R] newListItem = document.createElement(\(dqli\(dq);

  \f[I]// Add the text node to the li element\f[R]
  newListItem.appendChild(newTextNode);

  \f[I]// Add the newly created list item to list\f[R]
  unorderedList.appendChild(newListItem);
}
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
Learn: Introduction to events
.IP \(bu 2
\f[CR]mousedown\f[R]
.IP \(bu 2
\f[CR]mouseup\f[R]
.IP \(bu 2
\f[CR]mousemove\f[R]
.IP \(bu 2
\f[CR]click\f[R]
.IP \(bu 2
\f[CR]dblclick\f[R]
.IP \(bu 2
\f[CR]mouseover\f[R]
.IP \(bu 2
\f[CR]mouseout\f[R]
.IP \(bu 2
\f[CR]mouseenter\f[R]
.IP \(bu 2
\f[CR]contextmenu\f[R]
.IP \(bu 2
\f[CR]pointerleave\f[R]
