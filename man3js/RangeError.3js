.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RangeError" "JS" "February 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RangeError \- RangeError
.SH SYNOPSIS
The \f[B]\f[CB]RangeError\f[B]\f[R] object indicates an error when a
value is not in the set or range of allowed values.
.SH DESCRIPTION
A \f[CR]RangeError\f[R] is thrown when trying to pass a value as an
argument to a function that does not allow a range that includes the
value.
.PP
This can be encountered when:
.IP \[bu] 2
passing a value that is not one of the allowed string values to
\f[CR]String.prototype.normalize()\f[R], or
.IP \[bu] 2
when attempting to create an array of an illegal length with the
\f[CR]Array\f[R] constructor, or
.IP \[bu] 2
when passing bad values to the numeric methods
\f[CR]Number.prototype.toExponential()\f[R],
\f[CR]Number.prototype.toFixed()\f[R] or
\f[CR]Number.prototype.toPrecision()\f[R].
.PP
\f[CR]RangeError\f[R] is a serializable object, so it can be cloned with
\f[CR]structuredClone()\f[R] or copied between Workers using
\f[CR]postMessage()\f[R].
.PP
\f[CR]RangeError\f[R] is a subclass of \f[CR]Error\f[R].
.SH CONSTRUCTOR
.TP
\f[B]RangeError()\f[R]
Creates a new \f[CR]RangeError\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]Also inherits instance properties from its parent
\f[CI]Error\f[I]\f[R].
.PP
These properties are defined on \f[CR]RangeError.prototype\f[R] and
shared by all \f[CR]RangeError\f[R] instances.
.TP
\f[B]RangeError.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]RangeError\f[R] instances, the initial value is the
\f[CR]RangeError\f[R] constructor.
.TP
\f[B]RangeError.prototype.name\f[R]
Represents the name for the type of error.
For \f[CR]RangeError.prototype.name\f[R], the initial value is
\f[CR]\[dq]RangeError\[dq]\f[R].
.SH INSTANCE METHODS
\f[I]Inherits instance methods from its parent \f[CI]Error\f[I]\f[R].
.SH EXAMPLES
.SS Using RangeError (for numeric values)
.IP
.EX
\f[B]function\f[R] check(n) {
  \f[B]if\f[R] (!(n >= \-500 && n <= 500)) {
    \f[B]throw\f[R] \f[B]new\f[R] RangeError(\[dq]The argument must be between \-500 and 500.\[dq]);
  }
}

\f[B]try\f[R] {
  check(2000);
} \f[B]catch\f[R] (error) {
  \f[B]if\f[R] (error \f[B]instanceof\f[R] RangeError) {
    \f[I]// Handle the error\f[R]
  }
}
.EE
.SS Using RangeError (for non\-numeric values)
.IP
.EX
\f[B]function\f[R] check(value) {
  \f[B]if\f[R] (![\[dq]apple\[dq], \[dq]banana\[dq], \[dq]carrot\[dq]].includes(value)) {
    \f[B]throw\f[R] \f[B]new\f[R] RangeError(
      \[aq]The argument must be an \[dq]apple\[dq], \[dq]banana\[dq], or \[dq]carrot\[dq].\[aq],
    );
  }
}

\f[B]try\f[R] {
  check(\[dq]cabbage\[dq]);
} \f[B]catch\f[R] (error) {
  \f[B]if\f[R] (error \f[B]instanceof\f[R] RangeError) {
    \f[I]// Handle the error\f[R]
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Error\f[R]
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toExponential()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toFixed()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toPrecision()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.normalize()\f[R]
