.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "DedicatedWorkerGlobalScope.rtctransform_event" "JS" "April 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DedicatedWorkerGlobalScope.rtctransform_event \-
DedicatedWorkerGlobalScope: rtctransform event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]rtctransform\f[B]\f[R] event is fired at a worker\[cq]s
\f[CR]DedicatedWorkerGlobalScope\f[R] object when an encoded video or
audio frame has been queued for processing by a WebRTC Encoded
Transform.
.PP
The event\[cq]s \f[CR]transformer\f[R] property returns a
\f[CR]RTCRtpScriptTransformer\f[R] that exposes the
\f[CR]ReadableStream\f[R] on which the frame is queued, and a
\f[CR]WritableStream\f[R] where the frame can be written to inject it
back into the WebRTC pipeline.
.PP
This event is not cancellable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]rtctransform\[dq], (event) \f[B]=>\f[R] {});

onrtctransform = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]RTCTransformEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]RTCTransformEvent.transformer\f[R] \f[I](read\-only)\f[R]
Returns the \f[CR]RTCRtpScriptTransformer\f[R] associated with the
event.
.SH EXAMPLE
The following code snippet shows a handler for the
\f[CR]rtctransform\f[R] event in the worker, added to the global scope
using \f[CR]addEventListener()\f[R].
The \f[CR]event.transformer\f[R] is a
\f[CR]RTCRtpScriptTransformer\f[R], the worker side counterpart to
\f[CR]RTCRtpScriptTransform\f[R].
.IP
.EX
addEventListener(\[dq]rtctransform\[dq], (event) \f[B]=>\f[R] {
  \f[B]let\f[R] transform;
  \f[I]// Select a transform based on passed options\f[R]
  \f[B]if\f[R] (event.transformer.options.name == \[dq]senderTransform\[dq])
    transform = createSenderTransform(); \f[I]// A TransformStream\f[R]
  \f[B]else\f[R] \f[B]if\f[R] (event.transformer.options.name == \[dq]receiverTransform\[dq])
    transform = createReceiverTransform(); \f[I]// A TransformStream\f[R]
  \f[B]else\f[R] \f[B]return\f[R];

  \f[I]//Pipe frames from the readable to writeable through TransformStream\f[R]
  event.transformer.readable
    .pipeThrough(transform)
    .pipeTo(event.transformer.writable);
});
.EE
.PP
The \f[CR]rtctransform\f[R] event is fired when an encoded frame is
enqueued on the \f[CR]RTCRtpScriptTransformer\f[R] and just once when
the transformer\[cq]s corresponding \f[CR]RTCRtpScriptTransformer\f[R]
is constructed.
The code first determines what transform to apply using \f[CR]name\f[R]
value passed in the options (this allows
\f[CR]RTCRtpScriptTransform\f[R] instances added to the incoming and
outgoing WebRTC pipelines to share a single worker).
Encoded frames are then piped from the readable, through the selected
transform \f[CR]TransformStream\f[R], to a writeable.
The actual tranforming code is not shown.
.PP
Note that this code is part of a more complete example provided in Using
WebRTC Encoded Transforms.
.SH SEE ALSO
.IP \[bu] 2
Using WebRTC Encoded Transforms
