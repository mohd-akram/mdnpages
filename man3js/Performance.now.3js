'\" t
.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Performance.now" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Performance.now \- Performance: now() method
.SH SYNOPSIS
The \f[B]\f[CB]performance.now()\f[B]\f[R] method returns a high
resolution timestamp in milliseconds.
It represents the time elapsed since \f[CR]Performance.timeOrigin\f[R]
(the time when navigation has started in window contexts, or the time
when the worker is run in \f[CR]Worker\f[R] and \f[CR]ServiceWorker\f[R]
contexts).
.SH SYNTAX
.IP
.EX
now()
.EE
.SS Parameters
None.
.SS Return value
Returns a \f[CR]DOMHighResTimeStamp\f[R] measured in milliseconds.
.SH DESCRIPTION
.SS \f[CR]Performance.now\f[R] vs.\ \f[CR]Date.now\f[R]
Unlike \f[CR]Date.now\f[R], the timestamps returned by
\f[CR]performance.now()\f[R] are not limited to one\-millisecond
resolution.
Instead, they represent times as floating\-point numbers with up to
microsecond precision.
.PP
Also, \f[CR]Date.now()\f[R] may have been impacted by system and user
clock adjustments, clock skew, etc.
as it is relative to the Unix epoch (1970\-01\-01T00:00:00Z) and
dependent on the system clock.
The \f[CR]performance.now()\f[R] method on the other hand is relative to
the \f[CR]timeOrigin\f[R] property which is a \c
.UR https://w3c.github.io/hr-time/#dfn-monotonic-clock
monotonic clock
.UE \c
: its current time never decreases and isn\[cq]t subject to adjustments.
.SS \f[CR]performance.now\f[R] specification changes
The semantics of the \f[CR]performance.now()\f[R] method changed between
High Resolution Time Level 1 and Level 2.
.PP
.TS
tab(@);
lw(5.5n) lw(24.2n) lw(40.3n).
T{
Changes
T}@T{
Level 1
T}@T{
Level 2
T}
_
T{
Relative to
T}@T{
\f[CR]performance.timing.navigationStart\f[R]
T}@T{
\f[CR]Performance.timeOrigin\f[R]
T}
T{
Triggering conditions
T}@T{
Document fetch or unload prompt (if any).
T}@T{
Creation of the browsing context (if no prior document), unload prompt
(if any), or start of the navigation (as defined in HTML, a few steps
before fetch).
T}
.TE
.PP
The \f[CR]performance.now()\f[R] method used to be relative to
\f[CR]performance.timing.navigationStart\f[R] property from the
Navigation Timing specification.
This changed and \f[CR]performance.now()\f[R] is now relative to
\f[CR]Performance.timeOrigin\f[R] which avoids clock change risks when
comparing timestamps across webpages.
.IP
.EX
\f[I]// Level 1 (clock change risks)\f[R]
currentTime = performance.timing.navigationStart + performance.now();

\f[I]// Level 2 (no clock change risks)\f[R]
currentTime = performance.timeOrigin + performance.now();
.EE
.SS Ticking during sleep
The specification (Level 2) requires that \f[CR]performance.now()\f[R]
should tick during sleep.
It appears that only Firefox on Windows, and Chromiums on Windows keep
ticking during sleep.
Relevant browser bugs for other operating systems:
.IP \[bu] 2
Chrome/Chromium (\c
.UR https://bugs.chromium.org/p/chromium/issues/detail?id=1206450
bug
.UE \c
)
.IP \[bu] 2
Firefox (\c
.UR https://bugzilla.mozilla.org/show_bug.cgi?id=1709767
bug
.UE \c
)
.IP \[bu] 2
Safari/WebKit (\c
.UR https://bugs.webkit.org/show_bug.cgi?id=225610
bug
.UE \c
)
.PP
More details can also be found in the specification issue \c
.UR https://github.com/w3c/hr-time/issues/115
hr\-time#115
.UE \c
\&.
.SH EXAMPLES
.SS Using \f[CR]performance.now()\f[R]
To determine how much time has elapsed since a particular point in your
code, you can do something like this:
.IP
.EX
\f[B]const\f[R] t0 = performance.now();
doSomething();
\f[B]const\f[R] t1 = performance.now();
console.log(\[ga]Call to doSomething took ${t1 \- t0} milliseconds.\[ga]);
.EE
.SH SECURITY REQUIREMENTS
To offer protection against timing attacks and fingerprinting,
\f[CR]performance.now()\f[R] is coarsened based on site isolation
status.
.IP \[bu] 2
Resolution in isolated contexts: 5 microseconds
.IP \[bu] 2
Resolution in non\-isolated contexts: 100 microseconds
.PP
Cross\-origin isolate your site using the
\f[CR]Cross\-Origin\-Opener\-Policy\f[R] and
\f[CR]Cross\-Origin\-Embedder\-Policy\f[R] headers:
.IP
.EX
Cross\-Origin\-Opener\-Policy: same\-origin
Cross\-Origin\-Embedder\-Policy: require\-corp
.EE
.PP
These headers ensure a top\-level document does not share a browsing
context group with cross\-origin documents.
COOP process\-isolates your document and potential attackers can\[cq]t
access to your global object if they were opening it in a popup,
preventing a set of cross\-origin attacks dubbed \c
.UR https://github.com/xsleaks/xsleaks
XS\-Leaks
.UE \c
\&.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Performance.timeOrigin\f[R]
