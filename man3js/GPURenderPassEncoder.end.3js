.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERPASSENCODER.END" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderPassEncoder.end \- GPURenderPassEncoder: end() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]end()\f[B]\f[R] method of the
\f[CR]GPURenderPassEncoder\f[R] interface completes recording of the
current render pass command sequence.
.SH SYNTAX
.IP
.EX
end()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]end()\f[B]\f[R], otherwise a \f[CR]GPUValidationError\f[R] is
generated and the \f[CR]GPURenderPassEncoder\f[R] becomes invalid:
.IP \(bu 2
The \f[CR]GPURenderPassEncoder\f[R] is open (i.e., not already ended via
an \f[CR]end()\f[R] call).
.IP \(bu 2
There is no occlusion query (i.e., started via
\f[CR]beginOcclusionQuery()\f[R]) active on the current render pass.
.IP \(bu 2
The debug stack for the current render pass is empty (i.e., no render
pass debug group is currently open, as opened by
\f[CR]pushDebugGroup()\f[R]).
.IP \(bu 2
The number of draw commands encoded in this render pass is less than or
equal to the \f[CR]maxDrawCount\f[R] property set in the
\f[CR]GPUCommandEncoder.beginRenderPass()\f[R] descriptor.
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, several commands are recorded via a \f[CR]GPUCommandEncoder\f[R].
Most of these commands originate from the
\f[CR]GPURenderPassEncoder\f[R] created via
\f[CR]GPUCommandEncoder.beginRenderPass()\f[R].
\f[CR]end()\f[R] is called in an appropriate place to end the render
pass.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] renderPipeline = device.createRenderPipeline(pipelineDescriptor);

\f[I]// Create GPUCommandEncoder to issue commands to the GPU\f[R]
\f[I]// Note: render pass descriptor, command encoder, etc. are destroyed after use, fresh one needed for each frame.\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Create GPURenderPassDescriptor to tell WebGPU which texture to draw into, then initiate render pass\f[R]
\f[B]const\f[R] renderPassDescriptor = {
  colorAttachments: [
    {
      clearValue: clearColor,
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
      view: context.getCurrentTexture().createView(),
    },
  ],
};

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// Draw the triangle\f[R]
passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.draw(3);

\f[I]// End the render pass\f[R]
passEncoder.end();

\f[I]// End frame by passing array of command buffers to command queue for execution\f[R]
device.queue.submit([commandEncoder.finish()]);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
