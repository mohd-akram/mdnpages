.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CLIPBOARD.READ" "3JS" "May 16, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clipboard.read \- Clipboard: read() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]read()\f[B]\f[R] method of the \f[CR]Clipboard\f[R]
interface requests a copy of the clipboard\(cqs contents, fulfilling the
returned \f[CR]Promise\f[R] with the data.
.PP
The method can in theory return arbitrary data (unlike
\f[CR]readText()\f[R], which can only return text).
Browsers commonly support reading text, HTML, and PNG image data.
.SH SYNTAX
.IP
.EX
read()
read(formats)
.EE
.SS Parameters
.TP
\f[B]formats\f[R] \f[I](optional)\f[R]
An optional object with the following properties:
.RS
.TP
\f[B]unsanitized\f[R] \f[I](optional)\f[R]
An \f[CR]Array\f[R] of strings containing MIME types of data formats
that should not be sanitized when reading from the clipboard.
.RS
.PP
Certain browsers may sanitize the clipboard data when it is read, to
prevent malicious content from being pasted into the document.
For example, Chrome (and other Chromium\-based browsers) sanitizes HTML
data by stripping \f[CR]<script>\f[R] tags and other potentially
dangerous content.
Use the \f[CR]unsanitized\f[R] array to specify a list of MIME types
that should not be sanitized.
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with an array of
\f[CR]ClipboardItem\f[R] objects containing the clipboard\(cqs contents.
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if the reading from the clipboard is not allowed.
.SH SECURITY CONSIDERATIONS
Reading from the clipboard can only be done in a secure context.
.PP
Additional security requirements are covered in the Security
consideration section of the API overview topic.
.SH EXAMPLES
.SS Reading image data from clipboard
This example uses the \f[CR]read()\f[R] method to read image data from
the clipboard and paste it into an \f[CR]<img>\f[R] element.
.SS HTML
.IP
.EX
<\f[B]img\f[R] id=\(dqsource\(dq src=\(dqbutterfly.jpg\(dq alt=\(dqA butterfly\(dq />
<\f[B]img\f[R] id=\(dqdestination\(dq />
<\f[B]button\f[R] id=\(dqreload\(dq type=\(dqbutton\(dq>Reload</\f[B]button\f[R]>
<\f[B]p\f[R] id=\(dqlog\(dq></\f[B]p\f[R]>
.EE
.SS CSS
.IP
.EX
img {
  \f[B]height\f[R]: 100px;
  \f[B]width\f[R]: 100px;
  \f[B]margin\f[R]: 0 1rem;
  \f[B]border\f[R]: 1px solid black;
}
reload {
  \f[B]display\f[R]: block;
  \f[B]margin\f[R]: 0 1rem;
}
.EE
.SS JavaScript
This code provides a mechanism to log any errors to the element with id
\f[CR]log\f[R].
.IP
.EX
\f[B]const\f[R] logElement = document.querySelector(\(dq#log\(dq);
\f[B]function\f[R] log(text) {
  logElement.innerText = \(gaError: ${text}\(ga;
}
.EE
.PP
We also add code to reload and clear the example when the \(lqReload\(rq
button is pressed.
.IP
.EX
\f[B]const\f[R] reload = document.querySelector(\(dq#reload\(dq);

reload.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  window.location.reload(\f[B]true\f[R]);
});
.EE
.PP
The remaining code reads the clipboard when the destination element is
clicked and copies the image data into the \f[CR]destinationImage\f[R]
element.
It logs an error if it is unable to use the \f[CR]read()\f[R] method, or
if the clipboard does not contain data in PNG format.
.IP
.EX
\f[B]const\f[R] destinationImage = document.querySelector(\(dq#destination\(dq);
destinationImage.addEventListener(\(dqclick\(dq, pasteImage);

\f[B]async\f[R] \f[B]function\f[R] pasteImage() {
  \f[B]try\f[R] {
    \f[B]const\f[R] clipboardContents = \f[B]await\f[R] navigator.clipboard.read();
    \f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] clipboardContents) {
      \f[B]if\f[R] (!item.types.includes(\(dqimage/png\(dq)) {
        \f[B]throw\f[R] \f[B]new\f[R] Error(\(dqClipboard does not contain PNG image data.\(dq);
      }
      \f[B]const\f[R] blob = \f[B]await\f[R] item.getType(\(dqimage/png\(dq);
      destinationImage.src = URL.createObjectURL(blob);
    }
  } \f[B]catch\f[R] (error) {
    log(error.message);
  }
}
.EE
.SS Result
Copy the butterfly image on the left by right\-clicking the image and
selecting \(lqCopy image\(rq from the context menu.
Then click on the empty frame on the right.
The example will fetch the image data from the clipboard and display the
image in the empty frame.
.RS
.PP
\f[B]Note:\f[R] If prompted, grant permission in order to paste the
image.
.RE
.SS Reading data from the clipboard
This example uses the \f[CR]read()\f[R] method to read data from the
clipboard and log whatever data is stored in the clipboard.
.PP
This differs from the previous version in that it will display text,
HTML, and image \f[CR]ClipboardItem\f[R] objects (rather than just
images).
.SS HTML
.IP
.EX
<\f[B]img\f[R] id=\(dqsource_jpg\(dq src=\(dqbutterfly.jpg\(dq alt=\(dqJPG butterfly image\(dq />
<\f[B]div\f[R] id=\(dqdestination\(dq>Click here to copy clipboard data.</\f[B]div\f[R]>
<\f[B]button\f[R] id=\(dqreload\(dq type=\(dqbutton\(dq>Reload</\f[B]button\f[R]>
<\f[B]p\f[R] id=\(dqlog\(dq></\f[B]p\f[R]>
.EE
.SS CSS
.IP
.EX
img {
  \f[B]height\f[R]: 100px;
  \f[B]width\f[R]: 100px;
  \f[B]margin\f[R]: 0 1rem;
  \f[B]border\f[R]: 1px solid black;
}

destination {
  \f[B]min\-height\f[R]: 300px;
  \f[B]min\-width\f[R]: 90%;
  \f[B]margin\f[R]: 0 1rem;
  \f[B]border\f[R]: 1px solid black;
}

reload {
  \f[B]display\f[R]: block;
  \f[B]margin\f[R]: 0 1rem;
}
.EE
.SS JavaScript
This code provides a mechanism to log any errors to the element with id
\f[CR]log\f[R].
.IP
.EX
\f[B]const\f[R] logElement = document.querySelector(\(dq#log\(dq);
\f[B]function\f[R] log(text) {
  logElement.innerText = \(gaError: ${text}\(ga;
}
.EE
.PP
We also add code to reload and clear the example when the \(lqReload\(rq
button is pressed.
.IP
.EX
\f[B]const\f[R] reload = document.querySelector(\(dq#reload\(dq);

reload.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  window.location.reload(\f[B]true\f[R]);
});
.EE
.PP
The remaining code reads the clipboard when the destination element is
clicked and displays each \f[CR]ClipboardItem\f[R] element along with
its MIME type.
It logs an error it is unable to use the \f[CR]read()\f[R] method, or if
the clipboard contains any other MIME type.
.IP
.EX
\f[B]const\f[R] destinationDiv = document.querySelector(\(dq#destination\(dq);
destinationDiv.addEventListener(\(dqclick\(dq, pasteData);

\f[B]async\f[R] \f[B]function\f[R] pasteData() {
  destinationDiv.innerText = \(dq\(dq; \f[I]// Clear inner text\f[R]
  \f[B]try\f[R] {
    \f[B]const\f[R] clipboardContents = \f[B]await\f[R] navigator.clipboard.read();
    \f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] clipboardContents) {
      \f[B]for\f[R] (\f[B]const\f[R] mimeType \f[B]of\f[R] item.types) {
        \f[B]const\f[R] mimeTypeElement = document.createElement(\(dqp\(dq);
        mimeTypeElement.innerText = \(gaMIME type: ${mimeType}\(ga;
        destinationDiv.appendChild(mimeTypeElement);
        \f[B]if\f[R] (mimeType === \(dqimage/png\(dq) {
          \f[B]const\f[R] pngImage = \f[B]new\f[R] Image();
          pngImage.alt = \(dqPNG image from clipboard\(dq;
          \f[B]const\f[R] blob = \f[B]await\f[R] item.getType(\(dqimage/png\(dq);
          pngImage.src = URL.createObjectURL(blob);
          destinationDiv.appendChild(pngImage);
        } \f[B]else\f[R] \f[B]if\f[R] (mimeType === \(dqtext/html\(dq) {
          \f[B]const\f[R] blob = \f[B]await\f[R] item.getType(\(dqtext/html\(dq);
          \f[B]const\f[R] blobText = \f[B]await\f[R] blob.text();
          \f[B]const\f[R] clipHTML = document.createElement(\(dqpre\(dq);
          clipHTML.innerText = blobText;
          destinationDiv.appendChild(clipHTML);
        } \f[B]else\f[R] \f[B]if\f[R] (mimeType === \(dqtext/plain\(dq) {
          \f[B]const\f[R] blob = \f[B]await\f[R] item.getType(\(dqtext/plain\(dq);
          \f[B]const\f[R] blobText = \f[B]await\f[R] blob.text();
          \f[B]const\f[R] clipPlain = document.createElement(\(dqpre\(dq);
          clipPlain.innerText = blobText;
          destinationDiv.appendChild(clipPlain);
        } \f[B]else\f[R] {
          \f[B]throw\f[R] \f[B]new\f[R] Error(\(ga${mimeType} not supported.\(ga);
        }
      }
    }
  } \f[B]catch\f[R] (error) {
    log(error.message);
  }
}
.EE
.SS Result
Copy some text or the butterfly (JPG) image below (to copy images
right\-click on them and then select \(lqCopy image\(rq from the context
menu).
Select the indicated frame below to paste this information from the
clipboard into the frame.
.PP
Notes:
.IP \(bu 2
Even though the butterfly image is a JPG file, when read from the
clipboard it is a PNG.
.IP \(bu 2
If prompted, you will need to grant permission in order to paste the
image.
.IP \(bu 2
This may not work on chromium browsers as the sample frame is not
granted the Permissions\-Policy \f[CR]clipboard\-read\f[R] and
\f[CR]clipboard\-write\f[R] permissions (required by Chromium browsers).
.SS Reading unsanitized HTML from the clipboard
This example uses the \f[CR]formats\f[R] parameter to read HTML data
from the clipboard and get the code in its original form, without the
browser sanitizing it first.
.SS HTML
.IP
.EX
<\f[B]textarea\f[R] id=\(dqsource\(dq rows=\(dq5\(dq>
  <\f[B]style\f[R]>h1 {\f[B]color\f[R]: red;} p {\f[B]color\f[R]: blue;}</\f[B]style\f[R]>
  <\f[B]h1\f[R]>Hello world!</\f[B]h1\f[R]>
  <\f[B]p\f[R]>This is a test.</\f[B]p\f[R]>
  <\f[B]script\f[R]>alert(\(aqHello world!\(aq);</\f[B]script\f[R]>
</\f[B]textarea\f[R]>
<\f[B]button\f[R] id=\(dqcopy\(dq>Copy HTML</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqpaste_normal\(dq>Paste HTML</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqpaste_unsanitized\(dq>Paste unsanitized HTML</\f[B]button\f[R]>
<\f[B]textarea\f[R] id=\(dqdestination\(dq rows=\(dq5\(dq></\f[B]textarea\f[R]>
.EE
.SS CSS
.IP
.EX
body {
  \f[B]display\f[R]: grid;
  \f[B]grid\-template\-columns\f[R]: repeat(3, 1fr);
  \f[B]gap\f[R]: 5px;
}

textarea {
  \f[B]grid\-column\f[R]: 1 / span 3;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] copyButton = document.getElementById(\(dqcopy\(dq);
\f[B]const\f[R] pasteButton = document.getElementById(\(dqpaste_normal\(dq);
\f[B]const\f[R] pasteUnsanitizedButton = document.getElementById(\(dqpaste_unsanitized\(dq);
\f[B]const\f[R] sourceTextarea = document.getElementById(\(dqsource\(dq);
\f[B]const\f[R] destinationTextarea = document.getElementById(\(dqdestination\(dq);

copyButton.addEventListener(\(dqclick\(dq, \f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]const\f[R] text = sourceTextarea.value;
  \f[B]const\f[R] type = \(dqtext/html\(dq;
  \f[B]const\f[R] blob = \f[B]new\f[R] Blob([text], { type });
  \f[B]const\f[R] data = [\f[B]new\f[R] ClipboardItem({ [type]: blob })];

  \f[B]try\f[R] {
    \f[B]await\f[R] navigator.clipboard.write(data);
  } \f[B]catch\f[R] (error) {
    destinationTextarea.value = \(gaClipboard write failed: ${error}\(ga;
  }
});

\f[B]async\f[R] \f[B]function\f[R] getHTMLFromClipboardContents(clipboardContents) {
  \f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] clipboardContents) {
    \f[B]if\f[R] (item.types.includes(\(dqtext/html\(dq)) {
      \f[B]const\f[R] blob = \f[B]await\f[R] item.getType(\(dqtext/html\(dq);
      \f[B]const\f[R] blobText = \f[B]await\f[R] blob.text();
      \f[B]return\f[R] blobText;
    }
  }

  \f[B]return\f[R] \f[B]null\f[R];
}

pasteButton.addEventListener(\(dqclick\(dq, \f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]try\f[R] {
    \f[B]const\f[R] clipboardContents = \f[B]await\f[R] navigator.clipboard.read();
    \f[B]const\f[R] html = \f[B]await\f[R] getHTMLFromClipboardContents(clipboardContents);
    destinationTextarea.value =
      html || \(dqCould not find HTML data in the clipboard.\(dq;
  } \f[B]catch\f[R] (error) {
    destinationTextarea.value = \(gaClipboard read failed: ${error}\(ga;
  }
});

pasteUnsanitizedButton.addEventListener(\(dqclick\(dq, \f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]try\f[R] {
    \f[B]const\f[R] clipboardContents = \f[B]await\f[R] navigator.clipboard.read({
      unsanitized: [\(dqtext/html\(dq],
    });
    \f[B]const\f[R] html = \f[B]await\f[R] getHTMLFromClipboardContents(clipboardContents);
    destinationTextarea.value =
      html || \(dqCould not find HTML data in the clipboard.\(dq;
  } \f[B]catch\f[R] (error) {
    destinationTextarea.value = \(gaClipboard read failed: ${error}\(ga;
  }
});
.EE
.SS Result
First click the \(lqCopy HTML\(rq button to write the HTML code from the
first textarea to the clipboard.
Then either click the \(lqPaste HTML\(rq button or the \(lqPaste
unsanitized HTML\(rq button to paste the sanitized or unsanitized HTML
code into the second textarea.
.SH SEE ALSO
.IP \(bu 2
Clipboard API
.IP \(bu 2
\c
.UR https://web.dev/articles/async-clipboard
Unblocking clipboard access
.UE \c
\ on web.dev
.IP \(bu 2
\c
.UR https://developer.chrome.com/docs/web-platform/unsanitized-html-async-clipboard
Unsanitized HTML in the Async Clipboard API
.UE \c
\ on developer.chrome.com
.IP \(bu 2
\f[CR]Clipboard.readText()\f[R]
.IP \(bu 2
\f[CR]Clipboard.writeText()\f[R]
.IP \(bu 2
\f[CR]Clipboard.write()\f[R]
