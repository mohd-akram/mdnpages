.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "CanvasRenderingContext2D.filter" "JS" "September 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.filter \- CanvasRenderingContext2D: filter
property
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.filter\f[B]\f[R] property of the
Canvas 2D API provides filter effects such as blurring and grayscaling.
It is similar to the CSS \f[CR]filter\f[R] property and accepts the same
values.
.SH VALUE
The \f[CR]filter\f[R] property accepts a value of
\f[CR]\[dq]none\[dq]\f[R] or one or more of the following filter
functions in a string.
.TP
\f[B]url()\f[R]
A CSS \f[CR]url()\f[R].
Takes any URL that resolves to SVG filter element.
This can be the ID of an element, a path to external XML file, or even a
data encoded SVG value.
.TP
\f[B]blur()\f[R]
A CSS \f[CR]&lt;length&gt;\f[R].
Applies a Gaussian blur to the drawing.
It defines the value of the standard deviation to the Gaussian function,
i.e., how many pixels on the screen blend into each other; thus, a
larger value will create more blur.
A value of \f[CR]0\f[R] leaves the input unchanged.
.TP
\f[B]brightness()\f[R]
A CSS \f[CR]&lt;percentage&gt;\f[R].
Applies a linear multiplier to the drawing, making it appear brighter or
darker.
A value under \f[CR]100%\f[R] darkens the image, while a value over
\f[CR]100%\f[R] brightens it.
A value of \f[CR]0%\f[R] will create an image that is completely black,
while a value of \f[CR]100%\f[R] leaves the input unchanged.
.TP
\f[B]contrast()\f[R]
A CSS \f[CR]&lt;percentage&gt;\f[R].
Adjusts the contrast of the drawing.
A value of \f[CR]0%\f[R] will create a drawing that is completely black.
A value of \f[CR]100%\f[R] leaves the drawing unchanged.
.TP
\f[B]drop\-shadow()\f[R]
Applies a drop shadow effect to the drawing.
A drop shadow is effectively a blurred, offset version of the
drawing\[cq]s alpha mask drawn in a particular color, composited below
the drawing.
This function takes up to five arguments:
.RS
.TP
\f[B]<offset\-x>\f[R]
See \f[CR]&lt;length&gt;\f[R] for possible units.
Specifies the horizontal distance of the shadow.
.TP
\f[B]<offset\-y>\f[R]
See \f[CR]&lt;length&gt;\f[R] for possible units.
Specifies the vertical distance of the shadow.
.TP
\f[B]<blur\-radius>\f[R]
The larger this value, the bigger the blur, so the shadow becomes bigger
and lighter.
Negative values are not allowed.
.TP
\f[B]<color>\f[R]
See \f[CR]&lt;color&gt;\f[R] values for possible keywords and notations.
.RE
.TP
\f[B]grayscale()\f[R]
A CSS \f[CR]&lt;percentage&gt;\f[R].
Converts the drawing to grayscale.
A value of \f[CR]100%\f[R] is completely grayscale.
A value of \f[CR]0%\f[R] leaves the drawing unchanged.
.TP
\f[B]hue\-rotate()\f[R]
A CSS \f[CR]&lt;angle&gt;\f[R].
Applies a hue rotation on the drawing.
A value of \f[CR]0deg\f[R] leaves the input unchanged.
.TP
\f[B]invert()\f[R]
A CSS \f[CR]&lt;percentage&gt;\f[R].
Inverts the drawing.
A value of \f[CR]100%\f[R] means complete inversion.
A value of \f[CR]0%\f[R] leaves the drawing unchanged.
.TP
\f[B]opacity()\f[R]
A CSS \f[CR]&lt;percentage&gt;\f[R].
Applies transparency to the drawing.
A value of \f[CR]0%\f[R] means completely transparent.
A value of \f[CR]100%\f[R] leaves the drawing unchanged.
.TP
\f[B]saturate()\f[R]
A CSS \f[CR]&lt;percentage&gt;\f[R].
Saturates the drawing.
A value of \f[CR]0%\f[R] means completely un\-saturated.
A value of \f[CR]100%\f[R] leaves the drawing unchanged.
.TP
\f[B]sepia()\f[R]
A CSS \f[CR]&lt;percentage&gt;\f[R].
Converts the drawing to sepia.
A value of \f[CR]100%\f[R] means completely sepia.
A value of \f[CR]0%\f[R] leaves the drawing unchanged.
.TP
\f[B]none\f[R]
No filter is applied.
Initial value.
.SH EXAMPLES
To view these examples, make sure to use a browser that supports this
feature; see the compatibility table below.
.SS Applying a blur
This example blurs a piece of text using the \f[CR]filter\f[R] property.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

ctx.filter = \[dq]blur(4px)\[dq];
ctx.font = \[dq]48px serif\[dq];
ctx.fillText(\[dq]Hello world\[dq], 50, 100);
.EE
.SS Result
.SS Applying multiple filters
You can combine as many filters as you like.
This example applies the \f[CR]contrast\f[R], \f[CR]sepia\f[R], and
\f[CR]drop\-shadow\f[R] filters to a photo of a rhino.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq] width=\[dq]400\[dq] height=\[dq]150\[dq]></\f[B]canvas\f[R]>
<\f[B]div\f[R] style=\[dq]display:none;\[dq]>
  <\f[B]img\f[R]
    id=\[dq]source\[dq]
    src=\[dq]https://mdn.github.io/shared\-assets/images/examples/rhino.jpg\[dq] />
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
\f[B]const\f[R] image = document.getElementById(\[dq]source\[dq]);

image.addEventListener(\[dq]load\[dq], (e) \f[B]=>\f[R] {
  \f[I]// Draw unfiltered image\f[R]
  ctx.drawImage(image, 0, 0, image.width * 0.6, image.height * 0.6);

  \f[I]// Draw image with filter\f[R]
  ctx.filter = \[dq]contrast(1.4) sepia(1) drop\-shadow(\-9px 9px 3px #e81)\[dq];
  ctx.drawImage(image, 400, 0, \-image.width * 0.6, image.height * 0.6);
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this property:
\f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
CSS \f[CR]filter\f[R]
.IP \[bu] 2
CSS \f[CR]&lt;filter\-function&gt;\f[R]
