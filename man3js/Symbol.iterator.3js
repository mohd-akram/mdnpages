'\" t
.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Symbol.iterator" "JS" "April 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.iterator \- Symbol.iterator
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.iterator\f[B]\f[R] static data property represents
the well\-known symbol \f[CR]\[at]\[at]iterator\f[R].
The iterable protocol looks up this symbol for the method that returns
the iterator for an object.
In order for an object to be iterable, it must have an
\f[CR]\[at]\[at]iterator\f[R] key.
.SH VALUE
The well\-known symbol \f[CR]\[at]\[at]iterator\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
Whenever an object needs to be iterated (such as at the beginning of a
\f[CR]for...of\f[R] loop), its \f[CR]\[at]\[at]iterator\f[R] method is
called with no arguments, and the returned \f[B]iterator\f[R] is used to
obtain the values to be iterated.
.PP
Some built\-in types have a default iteration behavior, while other
types (such as \f[CR]Object\f[R]) do not.
Some built\-in types with a \f[CR]\[at]\[at]iterator\f[R] method are:
.IP \[bu] 2
\f[CR]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]String.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype[\[at]\[at]iterator]()\f[R]
.PP
See also Iteration protocols for more information.
.SH EXAMPLES
.SS User\-defined iterables
We can make our own iterables like this:
.IP
.EX
\f[B]const\f[R] myIterable = {};
myIterable[Symbol.iterator] = \f[B]function\f[R]* () {
  \f[B]yield\f[R] 1;
  \f[B]yield\f[R] 2;
  \f[B]yield\f[R] 3;
};
[...myIterable]; \f[I]// [1, 2, 3]\f[R]
.EE
.PP
Or iterables can be defined directly inside a class or object using a
computed property:
.IP
.EX
\f[B]class\f[R] Foo {
  *[Symbol.iterator]() {
    \f[B]yield\f[R] 1;
    \f[B]yield\f[R] 2;
    \f[B]yield\f[R] 3;
  }
}

\f[B]const\f[R] someObj = {
  *[Symbol.iterator]() {
    \f[B]yield\f[R] \[dq]a\[dq];
    \f[B]yield\f[R] \[dq]b\[dq];
  },
};

console.log(...\f[B]new\f[R] Foo()); \f[I]// 1, 2, 3\f[R]
console.log(...someObj); \f[I]// \[aq]a\[aq], \[aq]b\[aq]\f[R]
.EE
.SS Non\-well\-formed iterables
If an iterable\[cq]s \f[CR]\[at]\[at]iterator\f[R] method does not
return an iterator object, then it is a non\-well\-formed iterable.
Using it as such is likely to result in runtime exceptions or buggy
behavior:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] nonWellFormedIterable = {};
nonWellFormedIterable[Symbol.iterator] = () \f[B]=>\f[R] 1;
[...nonWellFormedIterable]; \f[I]// TypeError: [Symbol.iterator]() returned a non\-object value\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-symbol
Polyfill of \f[CR]Symbol.iterator\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Iteration protocols
.IP \[bu] 2
\f[CR]Array.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]String.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]arguments[\[at]\[at]iterator]()\f[R]
.IP \[bu] 2
\f[CR]Segments.prototype[\[at]\[at]iterator]()\f[R]
