.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "NOTIFICATION" "3JS" "June 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Notification \- Notification
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]Notification\f[B]\f[R] interface of the Notifications API
is used to configure and display desktop notifications to the user.
.PP
These notifications\(cq appearance and specific functionality vary
across platforms but generally they provide a way to asynchronously
provide information to the user.
.SH CONSTRUCTOR
.TP
\f[B]Notification()\f[R]
Creates a new instance of the \f[CR]Notification\f[R] object.
.SH STATIC PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]EventTarget\f[I]\f[R].
.TP
\f[B]Notification.permission\f[R] \f[I](read\-only)\f[R]
A string representing the current permission to display notifications.
Possible values are:
.RS
.IP \(bu 2
\f[CR]denied\f[R] \(em The user refuses to have notifications displayed.
.IP \(bu 2
\f[CR]granted\f[R] \(em The user accepts having notifications displayed.
.IP \(bu 2
\f[CR]default\f[R] \(em The user choice is unknown and therefore the
browser will act as if the value were denied.
.RE
.TP
\f[B]Notification.maxActions\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
The maximum number of actions supported by the device and the User
Agent.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent interface,
\f[CI]EventTarget\f[I]\f[R].
.TP
\f[B]Notification.actions\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
The actions array of the notification as specified in the
constructor\(cqs \f[CR]options\f[R] parameter.
.TP
\f[B]Notification.badge\f[R] \f[I](read\-only)\f[R]
A string containing the URL of an image to represent the notification
when there is not enough space to display the notification itself such
as for example, the Android Notification Bar.
On Android devices, the badge should accommodate devices up to 4x
resolution, about 96 by 96 px, and the image will be automatically
masked.
.TP
\f[B]Notification.body\f[R] \f[I](read\-only)\f[R]
The body string of the notification as specified in the constructor\(cqs
\f[CR]options\f[R] parameter.
.TP
\f[B]Notification.data\f[R] \f[I](read\-only)\f[R]
Returns a structured clone of the notification\(cqs data.
.TP
\f[B]Notification.dir\f[R] \f[I](read\-only)\f[R]
The text direction of the notification as specified in the
constructor\(cqs \f[CR]options\f[R] parameter.
.TP
\f[B]Notification.icon\f[R] \f[I](read\-only)\f[R]
The URL of the image used as an icon of the notification as specified in
the constructor\(cqs \f[CR]options\f[R] parameter.
.TP
\f[B]Notification.image\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
The URL of an image to be displayed as part of the notification, as
specified in the constructor\(cqs \f[CR]options\f[R] parameter.
.TP
\f[B]Notification.lang\f[R] \f[I](read\-only)\f[R]
The language code of the notification as specified in the
constructor\(cqs \f[CR]options\f[R] parameter.
.TP
\f[B]Notification.renotify\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Specifies whether the user should be notified after a new notification
replaces an old one.
.TP
\f[B]Notification.requireInteraction\f[R] \f[I](read\-only)\f[R]
A boolean value indicating that a notification should remain active
until the user clicks or dismisses it, rather than closing
automatically.
.TP
\f[B]Notification.silent\f[R] \f[I](read\-only)\f[R]
Specifies whether the notification should be silent \(em i.e., no sounds
or vibrations should be issued regardless of the device settings.
.TP
\f[B]Notification.tag\f[R] \f[I](read\-only)\f[R]
The ID of the notification (if any) as specified in the constructor\(cqs
\f[CR]options\f[R] parameter.
.TP
\f[B]Notification.timestamp\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Specifies the time at which a notification is created or applicable
(past, present, or future).
.TP
\f[B]Notification.title\f[R] \f[I](read\-only)\f[R]
The title of the notification as specified in the first parameter of the
constructor.
.TP
\f[B]Notification.vibrate\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Specifies a vibration pattern for devices with vibration hardware to
emit.
.SH STATIC METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]EventTarget\f[I]\f[R].
.TP
\f[B]Notification.requestPermission()\f[R]
Requests permission from the user to display notifications.
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent interface,
\f[CI]EventTarget\f[I]\f[R].
.TP
\f[B]Notification.close()\f[R]
Programmatically closes a notification instance.
.SH EVENTS
\f[I]Also inherits events from its parent interface,
\f[CI]EventTarget\f[I]\f[R].
.TP
\f[B]click\f[R]
Fires when the user clicks the notification.
.TP
\f[B]close\f[R]
Fires when the user closes the notification.
.TP
\f[B]error\f[R]
Fires when the notification encounters an error.
.TP
\f[B]show\f[R]
Fires when the notification is displayed.
.SH EXAMPLES
Assume this basic HTML:
.IP
.EX
<\f[B]button\f[R]>Notify me!</\f[B]button\f[R]>
.EE
.PP
It\(cqs possible to send a notification as follows \(em here we present
a fairly verbose and complete set of code you could use if you wanted to
first check whether notifications are supported, then check if
permission has been granted for the current origin to send
notifications, then request permission if required, before then sending
a notification.
.IP
.EX
document.querySelector(\(dqbutton\(dq).addEventListener(\(dqclick\(dq, notifyMe);

\f[B]function\f[R] notifyMe() {
  \f[B]if\f[R] (!(\(dqNotification\(dq \f[B]in\f[R] window)) {
    \f[I]// Check if the browser supports notifications\f[R]
    alert(\(dqThis browser does not support desktop notification\(dq);
  } \f[B]else\f[R] \f[B]if\f[R] (Notification.permission === \(dqgranted\(dq) {
    \f[I]// Check whether notification permissions have already been granted;\f[R]
    \f[I]// if so, create a notification\f[R]
    \f[B]const\f[R] notification = \f[B]new\f[R] Notification(\(dqHi there!\(dq);
    \f[I]// \&...\f[R]
  } \f[B]else\f[R] \f[B]if\f[R] (Notification.permission !== \(dqdenied\(dq) {
    \f[I]// We need to ask the user for permission\f[R]
    Notification.requestPermission().then((permission) \f[B]=>\f[R] {
      \f[I]// If the user accepts, let\(aqs create a notification\f[R]
      \f[B]if\f[R] (permission === \(dqgranted\(dq) {
        \f[B]const\f[R] notification = \f[B]new\f[R] Notification(\(dqHi there!\(dq);
        \f[I]// \&...\f[R]
      }
    });
  }

  \f[I]// At last, if the user has denied notifications, and you\f[R]
  \f[I]// want to be respectful there is no need to bother them anymore.\f[R]
}
.EE
.PP
We no longer show a live sample on this page, as Chrome and Firefox no
longer allow notification permissions to be requested from cross\-origin
\f[CR]<iframe>\f[R]s, with other browsers to follow.
To see an example in action, check out our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do list example
.UE \c
\ (also see \c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
the app running live
.UE \c
).
.RS
.PP
\f[B]Note:\f[R] In the above example we spawn notifications in response
to a user gesture (clicking a button).
This is not only best practice \(em you should not be spamming users
with notifications they didn\(cqt agree to \(em but going forward
browsers will explicitly disallow notifications not triggered in
response to a user gesture.
Firefox is already doing this from version 72, for example.
.RE
.SH SEE ALSO
.IP \(bu 2
Using the Notifications API
