.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMMANDENCODER.COPYBUFFERTOBUFFER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUCommandEncoder.copyBufferToBuffer \- GPUCommandEncoder:
copyBufferToBuffer() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]copyBufferToBuffer()\f[B]\f[R] method of the
\f[CR]GPUCommandEncoder\f[R] interface encodes a command that copies
data from one \f[CR]GPUBuffer\f[R] to another.
.SH SYNTAX
.IP
.EX
copyBufferToBuffer(source, destination)
copyBufferToBuffer(source, destination, size)
copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size)
.EE
.SS Parameters
.TP
\f[B]source\f[R]
The \f[CR]GPUBuffer\f[R] to copy from.
.TP
\f[B]sourceOffset\f[R] \f[I](optional)\f[R]
The offset, in bytes, into the \f[CR]source\f[R] to begin copying from.
.TP
\f[B]destination\f[R]
The \f[CR]GPUBuffer\f[R] to copy to.
.TP
\f[B]destinationOffset\f[R] \f[I](optional)\f[R]
The offset, in bytes, into the \f[CR]destination\f[R] to begin copying
to.
.TP
\f[B]size\f[R] \f[I](optional)\f[R]
The number of bytes to copy.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]sourceOffset\f[R] and
\f[CR]destinationOffset\f[R] can be omitted if you are copying part of
the source buffer at a \f[CR]0\f[R] offset in both the source and
destination buffers.
The \f[CR]sourceOffset\f[R], \f[CR]destinationOffset\f[R], and
\f[CR]size\f[R] can be omitted if you are copying the entire source
buffer to the destination buffer.
.RE
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]copyBufferToBuffer()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the
\f[CR]GPUCommandEncoder\f[R] becomes invalid:
.IP \(bu 2
The \f[CR]source\f[R]\(cqs \f[CR]GPUBuffer.usage\f[R] includes the
\f[CR]GPUBufferUsage.COPY_SRC\f[R] flag.
.IP \(bu 2
The \f[CR]destination\f[R]\(cqs \f[CR]GPUBuffer.usage\f[R] includes the
\f[CR]GPUBufferUsage.COPY_DST\f[R] flag.
.IP \(bu 2
\f[CR]size\f[R], \f[CR]sourceOffset\f[R], and
\f[CR]destinationOffset\f[R] are all multiples of 4.
.IP \(bu 2
The \f[CR]source\f[R]\(cqs \f[CR]GPUBuffer.size\f[R] is greater than or
equal to \f[CR]sourceOffset\f[R] + \f[CR]size\f[R].
.IP \(bu 2
The \f[CR]destination\f[R]\(cqs \f[CR]GPUBuffer.size\f[R] is greater
than or equal to \f[CR]destinationOffset\f[R] + \f[CR]size\f[R].
.IP \(bu 2
\f[CR]source\f[R] and \f[CR]destination\f[R] are different
\f[CR]GPUBuffer\f[R]s (you can\(cqt copy from and to the same buffer).
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
, we use \f[CR]copyBufferToBuffer()\f[R] to copy the contents of our
\f[CR]outputBuffer\f[R] to the \f[CR]stagingBuffer\f[R].
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create an output buffer to read GPU calculations to, and a staging buffer to be mapped for JavaScript access\f[R]

\f[B]const\f[R] outputBuffer = device.createBuffer({
  size: BUFFER_SIZE,
  usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,
});

\f[B]const\f[R] stagingBuffer = device.createBuffer({
  size: BUFFER_SIZE,
  usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,
});

\f[I]// \&...\f[R]

\f[I]// Create GPUCommandEncoder to encode commands to issue to the GPU\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// \&...\f[R]

\f[I]// Copy output buffer to staging buffer\f[R]
commandEncoder.copyBufferToBuffer(
  outputBuffer,
  0, \f[I]// Source offset\f[R]
  stagingBuffer,
  0, \f[I]// Destination offset\f[R]
  BUFFER_SIZE,
);

\f[I]// Since we are copying the entire buffer, this can be shortened to\f[R]
\f[I]// commandEncoder.copyBufferToBuffer(outputBuffer, stagingBuffer);\f[R]

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
