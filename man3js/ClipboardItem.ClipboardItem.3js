.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ClipboardItem.ClipboardItem" "JS" "January 9, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ClipboardItem.ClipboardItem \- ClipboardItem: ClipboardItem()
constructor
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]ClipboardItem()\f[B]\f[R] constructor creates a new
\f[CR]ClipboardItem\f[R] object, which represents data to be stored or
retrieved via the Clipboard API \f[CR]clipboard.write()\f[R] and
\f[CR]clipboard.read()\f[R] methods, respectively.
.RS
.PP
\f[B]Note:\f[R] Image format support varies by browser.
See the browser compatibility table for the \f[CR]Clipboard\f[R]
interface.
.RE
.SH SYNTAX
.IP
.EX
new ClipboardItem(data)
new ClipboardItem(data, options)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
An \f[CR]Object\f[R] with the MIME type as the key and data as the
value.
The data can be represented as a \f[CR]Blob\f[R], a \f[CR]String\f[R] or
a \f[CR]Promise\f[R] which resolves to either a blob or string.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object with the following properties:
.RS
.TP
\f[B]presentationStyle\f[R] \f[I](optional)\f[R]
One of the three strings: \f[CR]unspecified\f[R], \f[CR]inline\f[R] or
\f[CR]attachment\f[R].
The default is \f[CR]unspecified\f[R].
.RE
.RS
.PP
\f[B]Note:\f[R] You can also work with text via the
\f[CR]Clipboard.readText()\f[R] and \f[CR]Clipboard.writeText()\f[R]
methods of the \f[CR]Clipboard\f[R] interface.
.RE
.SH EXAMPLES
The below example requests a PNG image using the \f[CR]Fetch API\f[R],
and in turn, the \f[CR]responses\[aq] blob()\f[R] method, to create a
new \f[CR]ClipboardItem\f[R].
This item is then written to the clipboard, using the
\f[CR]Clipboard.write()\f[R] method.
.RS
.PP
\f[B]Note:\f[R] You can only pass in one clipboard item at a time.
.RE
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] writeClipImg() {
  \f[B]try\f[R] {
    \f[B]const\f[R] imgURL = \[dq]/myimage.png\[dq];
    \f[B]const\f[R] data = \f[B]await\f[R] fetch(imgURL);
    \f[B]const\f[R] blob = \f[B]await\f[R] data.blob();

    \f[B]await\f[R] navigator.clipboard.write([
      \f[B]new\f[R] ClipboardItem({
        [blob.type]: blob,
      }),
    ]);
    console.log(\[dq]Fetched image copied.\[dq]);
  } \f[B]catch\f[R] (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
