.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CLIPBOARDITEM.CLIPBOARDITEM" "3JS" "January 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ClipboardItem.ClipboardItem \- ClipboardItem: ClipboardItem()
constructor
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]ClipboardItem()\f[B]\f[R] constructor creates a new
\f[CR]ClipboardItem\f[R] object, which represents data to be stored or
retrieved via the Clipboard API \f[CR]clipboard.write()\f[R] and
\f[CR]clipboard.read()\f[R] methods, respectively.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]read()\f[R] and \f[CR]write()\f[R] methods can
be used to work with text strings and arbitrary data items represented
by \f[CR]Blob\f[R] instances.
However, if you are solely working with text, it is more convenient to
use the \f[CR]Clipboard.readText()\f[R] and
\f[CR]Clipboard.writeText()\f[R] methods.
.RE
.RS
.PP
\f[B]Note:\f[R] Image format support varies by browser.
See the browser compatibility table for the \f[CR]Clipboard\f[R]
interface.
.RE
.SH SYNTAX
.IP
.EX
new ClipboardItem(data)
new ClipboardItem(data, options)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
An \f[CR]Object\f[R] with the MIME type as the key and data as the
value.
The data can be represented as one of the following:
.RS
.IP \(bu 2
a \f[CR]Blob\f[R]
.IP \(bu 2
a string
.IP \(bu 2
a \f[CR]Promise\f[R] that resolves to either a \f[CR]Blob\f[R] or
string.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object with the following properties:
.RS
.TP
\f[B]presentationStyle\f[R] \f[I](optional)\f[R]
One of the three strings: \f[CR]unspecified\f[R], \f[CR]inline\f[R] or
\f[CR]attachment\f[R].
The default is \f[CR]unspecified\f[R].
.RS
.PP
\f[CR]inline\f[R] signifies to apps that receive the paste that the
\f[CR]ClipboardItem\f[R] should be inserted inline at the point of
paste.
\f[CR]attachment\f[R] signifies to apps that receive the paste that the
\f[CR]ClipboardItem\f[R] should be added as an attachment.
\f[CR]unspecified\f[R] doesn\(cqt signify any information to apps that
receive the paste.
.RE
.RE
.SH EXAMPLES
The below example requests a PNG image using \f[CR]fetch()\f[R], and in
turn, the \f[CR]Response.blob()\f[R] method, to create a new
\f[CR]ClipboardItem\f[R].
This item is then written to the clipboard, using the
\f[CR]Clipboard.write()\f[R] method.
.RS
.PP
\f[B]Note:\f[R] You can only pass in one clipboard item at a time.
.RE
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] writeClipImg() {
  \f[B]try\f[R] {
    \f[B]if\f[R] (ClipboardItem.supports(\(dqimage/png\(dq)) {
      \f[B]const\f[R] imgURL = \(dq/my\-image.png\(dq;
      \f[B]const\f[R] data = \f[B]await\f[R] fetch(imgURL);
      \f[B]const\f[R] blob = \f[B]await\f[R] data.blob();
      \f[B]await\f[R] navigator.clipboard.write([
        \f[B]new\f[R] ClipboardItem({
          [blob.type]: blob,
        }),
      ]);
      console.log(\(dqFetched image copied.\(dq);
    } \f[B]else\f[R] {
      console.log(\(dqimage png is not supported\(dq);
    }
  } \f[B]catch\f[R] (err) {
    console.error(err.name, err.message);
  }
}
.EE
.SH SEE ALSO
.IP \(bu 2
Clipboard API
.IP \(bu 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
