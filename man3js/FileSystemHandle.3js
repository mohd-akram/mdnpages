.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "FileSystemHandle" "JS" "July 18, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileSystemHandle \- FileSystemHandle
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]FileSystemHandle\f[B]\f[R] interface of the File System
API is an object which represents a file or directory entry.
Multiple handles can represent the same entry.
For the most part you do not work with \f[CR]FileSystemHandle\f[R]
directly but rather its child interfaces \f[CR]FileSystemFileHandle\f[R]
and \f[CR]FileSystemDirectoryHandle\f[R].
.SH INTERFACES BASED ON FILESYSTEMHANDLE
Below is a list of interfaces based on the \f[CR]FileSystemHandle\f[R]
interface.
.TP
\f[B]FileSystemFileHandle\f[R]
Represents a handle to a file entry.
.TP
\f[B]FileSystemDirectoryHandle\f[R]
Provides a handle to a directory entry.
.SH INSTANCE PROPERTIES
.TP
\f[B]kind\f[R] \f[I](read\-only)\f[R]
Returns the type of entry.
This is \f[CR]\[aq]file\[aq]\f[R] if the associated entry is a file or
\f[CR]\[aq]directory\[aq]\f[R].
.TP
\f[B]name\f[R] \f[I](read\-only)\f[R]
Returns the name of the associated entry.
.SH INSTANCE METHODS
.TP
\f[B]isSameEntry()\f[R]
Compares two handles to see if the associated entries (either a file or
directory) match.
.TP
\f[B]queryPermission()\f[R] \f[I](experimental)\f[R]
Queries the current permission state of the current handle.
.TP
\f[B]remove()\f[R] \f[I](experimental)\f[R] \f[I](non\-standard)\f[R]
Requests removal of the entry represented by the handle from the
underlying file system.
.TP
\f[B]requestPermission()\f[R] \f[I](experimental)\f[R]
Requests read or readwrite permissions for the file handle.
.SH EXAMPLES
.SS Checking Type
The below code allows the user to choose a file from the file picker and
then tests to see whether the handle returned is a file or directory
.IP
.EX
\f[I]// store a reference to our file handle\f[R]
\f[B]let\f[R] fileHandle;

\f[B]async\f[R] \f[B]function\f[R] getFile() {
  \f[I]// open file picker\f[R]
  [fileHandle] = \f[B]await\f[R] window.showOpenFilePicker();

  \f[B]if\f[R] (fileHandle.kind === \[dq]file\[dq]) {
    \f[I]// run file code\f[R]
  } \f[B]else\f[R] \f[B]if\f[R] (fileHandle.kind === \[dq]directory\[dq]) {
    \f[I]// run directory code\f[R]
  }
}
.EE
.SS Query/Request Permissions
The following asynchronous function returns true if user has granted
read or readwrite permissions to the file handle.
Permission is requested if not.
.IP
.EX
\f[I]// fileHandle is a FileSystemFileHandle\f[R]
\f[I]// withWrite is a boolean set to true if write\f[R]

\f[B]async\f[R] \f[B]function\f[R] verifyPermission(fileHandle, withWrite) {
  \f[B]const\f[R] opts = {};
  \f[B]if\f[R] (withWrite) {
    opts.mode = \[dq]readwrite\[dq];
  }

  \f[I]// Check if we already have permission, if so, return true.\f[R]
  \f[B]if\f[R] ((\f[B]await\f[R] fileHandle.queryPermission(opts)) === \[dq]granted\[dq]) {
    \f[B]return\f[R] \f[B]true\f[R];
  }

  \f[I]// Request permission to the file, if the user grants permission, return true.\f[R]
  \f[B]if\f[R] ((\f[B]await\f[R] fileHandle.requestPermission(opts)) === \[dq]granted\[dq]) {
    \f[B]return\f[R] \f[B]true\f[R];
  }

  \f[I]// The user did not grant permission, return false.\f[R]
  \f[B]return\f[R] \f[B]false\f[R];
}
.EE
.SS Comparing Entries
The following function compares a single entry with an array of entries,
and returns a new array with any matching entries removed.
.IP
.EX
\f[B]function\f[R] removeMatches(fileEntry, entriesArr) {
  \f[B]const\f[R] newArr = entriesArr.filter((entry) \f[B]=>\f[R] !fileEntry.isSameEntry(entry));

  \f[B]return\f[R] newArr;
}
.EE
.SH SEE ALSO
.IP \[bu] 2
File System API
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/file-system-access
The File System Access API: simplifying access to local files
.UE \c
