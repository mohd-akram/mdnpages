.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Map.\[at]\[at]iterator" "JS" "August 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Map.\[at]\[at]iterator \- Map.prototype\[at]\[at]iterator
.SH SYNOPSIS
The \f[B]\f[CB][\[at]\[at]iterator]()\f[B]\f[R] method of \f[CR]Map\f[R]
instances implements the iterable protocol and allows \f[CR]Map\f[R]
objects to be consumed by most syntaxes expecting iterables, such as the
spread syntax and \f[CR]for...of\f[R] loops.
It returns a map iterator object that yields the key\-value pairs of the
map in insertion order.
.PP
The initial value of this property is the same function object as the
initial value of the \f[CR]Map.prototype.entries\f[R] property.
.SH SYNTAX
.IP
.EX
map[Symbol.iterator]()
.EE
.SS Parameters
None.
.SS Return value
The same return value as \f[CR]Map.prototype.entries()\f[R]: a new
iterable iterator object that yields the key\-value pairs of the map.
.SH EXAMPLES
.SS Iteration using for\&...of loop
Note that you seldom need to call this method directly.
The existence of the \f[CR]\[at]\[at]iterator\f[R] method makes
\f[CR]Map\f[R] objects iterable, and iterating syntaxes like the
\f[CR]for...of\f[R] loop automatically call this method to obtain the
iterator to loop over.
.IP
.EX
\f[B]const\f[R] myMap = \f[B]new\f[R] Map();
myMap.set(\[dq]0\[dq], \[dq]foo\[dq]);
myMap.set(1, \[dq]bar\[dq]);
myMap.set({}, \[dq]baz\[dq]);

\f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] myMap) {
  console.log(entry);
}
\f[I]// [\[dq]0\[dq], \[dq]foo\[dq]]\f[R]
\f[I]// [1, \[dq]bar\[dq]]\f[R]
\f[I]// [{}, \[dq]baz\[dq]]\f[R]

\f[B]for\f[R] (\f[B]const\f[R] [key, value] \f[B]of\f[R] myMap) {
  console.log(\[ga]${key}: ${value}\[ga]);
}
\f[I]// 0: foo\f[R]
\f[I]// 1: bar\f[R]
\f[I]// [Object]: baz\f[R]
.EE
.SS Manually hand\-rolling the iterator
You may still manually call the \f[CR]next()\f[R] method of the returned
iterator object to achieve maximum control over the iteration process.
.IP
.EX
\f[B]const\f[R] myMap = \f[B]new\f[R] Map();
myMap.set(\[dq]0\[dq], \[dq]foo\[dq]);
myMap.set(1, \[dq]bar\[dq]);
myMap.set({}, \[dq]baz\[dq]);

\f[B]const\f[R] mapIter = myMap[Symbol.iterator]();

console.log(mapIter.next().value); \f[I]// [\[dq]0\[dq], \[dq]foo\[dq]]\f[R]
console.log(mapIter.next().value); \f[I]// [1, \[dq]bar\[dq]]\f[R]
console.log(mapIter.next().value); \f[I]// [Object, \[dq]baz\[dq]]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Map\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.entries()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.keys()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.values()\f[R]
.IP \[bu] 2
\f[CR]Symbol.iterator\f[R]
.IP \[bu] 2
Iteration protocols
