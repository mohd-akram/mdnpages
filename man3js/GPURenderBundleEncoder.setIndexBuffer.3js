.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERBUNDLEENCODER.SETINDEXBUFFER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderBundleEncoder.setIndexBuffer \- GPURenderBundleEncoder:
setIndexBuffer() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]setIndexBuffer()\f[B]\f[R] method of the
\f[CR]GPURenderBundleEncoder\f[R] interface sets the current
\f[CR]GPUBuffer\f[R] that will provide index data for subsequent drawing
commands.
.RS
.PP
\f[B]Note:\f[R] This method is functionally identical to its equivalent
on \f[CR]GPURenderPassEncoder\f[R] \(em \f[CR]setIndexBuffer()\f[R].
.RE
.SH SYNTAX
.IP
.EX
setIndexBuffer(buffer, indexFormat, offset, size)
.EE
.SS Parameters
.TP
\f[B]buffer\f[R]
A \f[CR]GPUBuffer\f[R] representing the buffer containing the index data
to use for subsequent drawing commands.
.TP
\f[B]indexFormat\f[R]
An enumerated value that defines the format of the index data contained
in \f[CR]buffer\f[R].
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dquint16\(dq\f[R]
.IP \(bu 2
\f[CR]\(dquint32\(dq\f[R]
.RE
.TP
\f[B]offset\f[R] \f[I](optional)\f[R]
A number representing the offset, in bytes, into \f[CR]buffer\f[R] where
the index data begins.
If omitted, \f[CR]offset\f[R] defaults to 0.
.TP
\f[B]size\f[R] \f[I](optional)\f[R]
A number representing the size, in bytes, of the index data contained in
\f[CR]buffer\f[R].
If omitted, \f[CR]size\f[R] defaults to the \f[CR]buffer\f[R]\(cqs
\f[CR]GPUBuffer.size\f[R] \- \f[CR]offset\f[R].
.SS Note on indexFormat
\f[CR]indexFormat\f[R] determines both the data type of index values in
a buffer and, when used with a pipeline that specifies a strip primitive
topology (\f[CR]\(dqline\-strip\(dq\f[R] or
\f[CR]\(dqtriangle\-strip\(dq\f[R]), also determines the primitive
restart value.
The primitive restart value is an index value indicating that a new
primitive should be started rather than continuing to construct the
strip with the prior indexed vertices.
The value is \f[CR]0xFFFF\f[R] for \f[CR]\(dquint16\(dq\f[R], or
\f[CR]0xFFFFFFFF\f[R] for \f[CR]\(dquint32\(dq\f[R].
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]setIndexBuffer()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the
\f[CR]GPURenderBundleEncoder\f[R] becomes invalid:
.IP \(bu 2
\f[CR]buffer\f[R]\(cqs \f[CR]GPUBuffer.usage\f[R] contains the
\f[CR]GPUBufferUsage.INDEX\f[R] flag.
.IP \(bu 2
\f[CR]offset\f[R] + \f[CR]size\f[R] is less than or equal to the
\f[CR]buffer\f[R]\(cqs \f[CR]GPUBuffer.size\f[R].
.IP \(bu 2
\f[CR]offset\f[R] is a multiple of \f[CR]indexFormat\f[R]\(cqs byte size
(2 for \f[CR]\(dquint16\(dq\f[R], 4 for \f[CR]\(dquint32\(dq\f[R]).
.SH EXAMPLES
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] bundleEncoder = device.createRenderBundleEncoder(descriptor);

bundleEncoder.setPipeline(pipeline);
bundleEncoder.setBindGroup(0, sceneBindGroupForRender);
bundleEncoder.setBindGroup(1, modelBindGroup);
bundleEncoder.setVertexBuffer(0, vertexBuffer);
bundleEncoder.setIndexBuffer(indexBuffer, \(dquint16\(dq);
bundleEncoder.drawIndexed(indexCount);

\f[B]const\f[R] renderBundle = bundleEncoder.finish();

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
