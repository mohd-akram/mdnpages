.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "XRInputSourcesChangeEvent" "JS" "July 18, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRInputSourcesChangeEvent \- XRInputSourcesChangeEvent
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The WebXR Device API interface
\f[B]\f[CB]XRInputSourcesChangeEvent\f[B]\f[R] is used to represent the
\f[CR]inputsourceschange\f[R] event sent to an \f[CR]XRSession\f[R] when
the set of available WebXR input controllers changes.
.SH CONSTRUCTOR
.TP
\f[B]XRInputSourcesChangeEvent()\f[R]
Creates and returns a new \f[CR]XRInputSourcesChangeEvent\f[R] object.
The specified type must be \f[CR]inputsourceschange\f[R], which is the
only event that uses this interface.
.SH INSTANCE PROPERTIES
.TP
\f[B]added\f[R] \f[I](read\-only)\f[R]
An array of zero or more \f[CR]XRInputSource\f[R] objects, each
representing an input device which has been newly connected or enabled
for use.
.TP
\f[B]removed\f[R] \f[I](read\-only)\f[R]
An array of zero or more \f[CR]XRInputSource\f[R] objects representing
the input devices newly connected or enabled for use.
.TP
\f[B]session\f[R] \f[I](read\-only)\f[R]
The \f[CR]XRSession\f[R] to which this input source change event is
being directed.
.SH INSTANCE METHODS
\f[I]While \f[CI]XRInputSourcesChangeEvent\f[I] defines no methods of
its own, it inherits methods from its parent interface,
\f[CI]Event\f[I].\f[R]
.SH EVENT TYPES
.TP
\f[B]inputsourceschange\f[R]
Delivered to the \f[CR]XRSession\f[R] when the set of input devices
available to it changes.
.SH EXAMPLES
The following example shows how to set up an event handler which uses
\f[CR]inputsourceschange\f[R] events to detect newly\-available pointing
devices and to load their models in preparation to display them in the
next animation frame.
.IP
.EX
xrSession.addEventListener(\[dq]inputsourceschange\[dq], onInputSourcesChange);

\f[B]function\f[R] onInputSourcesChange(event) {
  \f[B]for\f[R] (\f[B]const\f[R] input \f[B]of\f[R] event.added) {
    \f[B]if\f[R] (input.targetRayMode === \[dq]tracked\-pointer\[dq]) {
      loadControllerMesh(input);
    }
  }
}
.EE
.PP
You can also add a handler for \f[CR]inputsourceschange\f[R] events by
setting the \f[CR]oninputsourceschange\f[R] event handler:
.IP
.EX
xrSession.oninputsourceschange = onInputSourcesChange;
.EE
