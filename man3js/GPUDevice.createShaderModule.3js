.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATESHADERMODULE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createShaderModule \- GPUDevice: createShaderModule() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createShaderModule()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPUShaderModule\f[R] from
a string of \c
.UR https://gpuweb.github.io/gpuweb/wgsl/
WGSL
.UE \c
\ source code.
.SH SYNTAX
.IP
.EX
createShaderModule(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]code\f[R]
A string representing the WGSL source code for the shader module.
.TP
\f[B]hints\f[R] \f[I](optional)\f[R]
A sequence of record types, with the structure
\f[CR](\(dqstring\(dq, compilationHint)\f[R].
These behave like ordered maps.
In each case, the \f[CR]\(dqstring\(dq\f[R] is a key used to identify or
select the record, and the \f[CR]compilationHint\f[R] is either a
\f[CR]GPUPipelineLayout\f[R] object instance or an enumerated value of
\f[CR]\(dqauto\(dq\f[R].
.RS
.PP
The point of \f[CR]hints\f[R] is to provide information about the
pipeline layout as early as possible to improve performance.
The idea is to maximize the amount of compilation that can be done once
by \f[CR]createShaderModule()\f[R], rather than multiple times in
multiple calls to \f[CR]GPUDevice.createComputePipeline()\f[R] and
\f[CR]GPUDevice.createRenderPipeline()\f[R].
.RS
.PP
\f[B]Note:\f[R] Different implementations may handle \f[CR]hints\f[R] in
different ways, including possibly ignoring them entirely.
Providing hints does not guarantee improved shader compilation
performance on all browsers/systems.
.RE
.RE
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]sourceMap\f[R] \f[I](optional)\f[R]
A source map definition to provide developer tool integration such as
source\-language debugging.
WGSL names (identifiers) in source maps should follow the rules defined
in \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#identifier-comparison
WGSL identifier comparison
.UE \c
\&.
If defined, the source map may be interpreted as a \c
.UR https://sourcemaps.info/spec.html
source\-map\-v3 format
.UE \c
\&.
.RS
.RS
.PP
\f[B]Note:\f[R] Different implementations may handle
\f[CR]sourceMap\f[R]s in different ways, including possibly ignoring
them entirely.
.RE
.RE
.RE
.SS Return value
A \f[CR]GPUShaderModule\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createShaderModule()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPUShaderModule\f[R] object is returned:
.IP \(bu 2
If your shader\(cqs WGSL code uses the half\-precision floating\-point
type \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#extension-f16
\f[CR]f16\f[R]
.UE \c
, it includes \f[CR]enable f16;\f[R] at the top, and the associated
\f[CR]GPUDevice\f[R] is created with the \f[CR]shader\-f16\f[R] feature
enabled.
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, our shader module is created using the following code:
.IP
.EX
\f[B]const\f[R] shaders = \(ga
struct VertexOut {
  \(atbuiltin(position) position : vec4f,
  \(atlocation(0) color : vec4f
}

\(atvertex
fn vertex_main(\(atlocation(0) position: vec4f,
               \(atlocation(1) color: vec4f) \-> VertexOut
{
  var output : VertexOut;
  output.position = position;
  output.color = color;
  return output;
}

\(atfragment
fn fragment_main(fragData: VertexOut) \-> \(atlocation(0) vec4f
{
  return fragData.color;
}
\(ga;

\f[B]async\f[R] \f[B]function\f[R] init() {
  \f[B]if\f[R] (!navigator.gpu) {
    \f[B]throw\f[R] Error(\(dqWebGPU not supported.\(dq);
  }

  \f[B]const\f[R] adapter = \f[B]await\f[R] navigator.gpu.requestAdapter();
  \f[B]if\f[R] (!adapter) {
    \f[B]throw\f[R] Error(\(dqCouldn\(aqt request WebGPU adapter.\(dq);
  }

  \f[B]const\f[R] device = \f[B]await\f[R] adapter.requestDevice();

  \f[I]// \&...\f[R]
  \f[I]// later on\f[R]

  \f[B]const\f[R] shaderModule = device.createShaderModule({
    code: shaders,
  });

  \f[I]// \&...\f[R]
}
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
.IP \(bu 2
The \c
.UR https://gpuweb.github.io/gpuweb/wgsl/
WebGPU Shading Language specification
.UE \c
