.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "TYPEDARRAY.BUFFER" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.buffer \- TypedArray.prototype.buffer
.SH SYNOPSIS
The \f[B]\f[CB]buffer\f[B]\f[R] accessor property of
\f[CR]TypedArray\f[R] instances returns the \f[CR]ArrayBuffer\f[R] or
\f[CR]SharedArrayBuffer\f[R] referenced by this typed array at
construction time.
.IP
.EX
\f[I]// Create an ArrayBuffer with a size in bytes\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8);
\f[B]const\f[R] uint16 = \f[B]new\f[R] Uint16Array(buffer);

console.log(uint16.buffer.byteLength);
\f[I]// Expected output: 8\f[R]
.EE
.SH DESCRIPTION
The \f[CR]buffer\f[R] property is an accessor property whose set
accessor function is \f[CR]undefined\f[R], meaning that you can only
read this property.
The value is established when the \f[I]TypedArray\f[R] is constructed
and cannot be changed.
\f[I]TypedArray\f[R] is one of the TypedArray objects.
.PP
Because a typed array is a \f[I]view\f[R] of a buffer, the underlying
buffer may be longer than the typed array itself.
.SH EXAMPLES
.SS Using the buffer property
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8);
\f[B]const\f[R] uint16 = \f[B]new\f[R] Uint16Array(buffer);
uint16.buffer; \f[I]// ArrayBuffer { byteLength: 8 }\f[R]
.EE
.SS Accessing the underlying buffer from a sliced array view
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(1024);
\f[B]const\f[R] arr = \f[B]new\f[R] Uint8Array(buffer, 64, 128);
console.log(arr.byteLength); \f[I]// 128\f[R]
console.log(arr.buffer.byteLength); \f[I]// 1024\f[R]
console.log(arr.buffer === buffer); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
JavaScript typed arrays guide
.IP \(bu 2
\f[CR]TypedArray\f[R]
