.\" Automatically generated by Pandoc 3.4
.\"
.TH "WebGLRenderingContext.bufferSubData" "JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.bufferSubData \- WebGLRenderingContext:
bufferSubData() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGLRenderingContext.bufferSubData()\f[B]\f[R] method of
the WebGL API updates a subset of a buffer object\[cq]s data store.
.SH SYNTAX
.IP
.EX
bufferSubData(target, offset)
bufferSubData(target, offset, srcData)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
A \f[CR]GLenum\f[R] specifying the binding point (target).
Possible values:
.RS
.TP
\f[B]gl.ARRAY_BUFFER\f[R]
Buffer containing vertex attributes, such as vertex coordinates, texture
coordinate data, or vertex color data.
.TP
\f[B]gl.ELEMENT_ARRAY_BUFFER\f[R]
Buffer used for element indices.
.PP
When using a WebGL 2 context, the following values are available
additionally:
.TP
\f[B]gl.COPY_READ_BUFFER\f[R]
Buffer for copying from one buffer object to another.
.TP
\f[B]gl.COPY_WRITE_BUFFER\f[R]
Buffer for copying from one buffer object to another.
.TP
\f[B]gl.TRANSFORM_FEEDBACK_BUFFER\f[R]
Buffer for transform feedback operations.
.TP
\f[B]gl.UNIFORM_BUFFER\f[R]
Buffer used for storing uniform blocks.
.TP
\f[B]gl.PIXEL_PACK_BUFFER\f[R]
Buffer used for pixel transfer operations.
.TP
\f[B]gl.PIXEL_UNPACK_BUFFER\f[R]
Buffer used for pixel transfer operations.
.RE
.TP
\f[B]dstByteOffset\f[R]
A \f[CR]GLintptr\f[R] specifying an offset in bytes where the data
replacement will start.
.TP
\f[B]srcData\f[R] \f[I](optional)\f[R]
An \f[CR]ArrayBuffer\f[R], \f[CR]SharedArrayBuffer\f[R], a
\f[CR]DataView\f[R], or a \f[CR]TypedArray\f[R] that will be copied into
the data store.
.TP
\f[B]srcOffset\f[R]
A \f[CR]GLuint\f[R] specifying the element index offset where to start
reading the buffer.
.TP
\f[B]length\f[R] \f[I](optional)\f[R]
A \f[CR]GLuint\f[R] defaulting to 0.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.IP \[bu] 2
A \f[CR]gl.INVALID_VALUE\f[R] error is thrown if the data would be
written past the end of the buffer or if \f[CR]data\f[R] is
\f[CR]null\f[R].
.IP \[bu] 2
A \f[CR]gl.INVALID_ENUM\f[R] error is thrown if \f[CR]target\f[R] is not
one of the allowed enums.
.SH EXAMPLES
.SS Using \f[CR]bufferSubData\f[R]
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] gl = canvas.getContext(\[dq]webgl\[dq]);
\f[B]const\f[R] buffer = gl.createBuffer();
\f[B]const\f[R] data = \f[B]new\f[R] Float32Array([1, 2, 3, 4]);
gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
gl.bufferData(gl.ARRAY_BUFFER, 1024, gl.STATIC_DRAW);
gl.bufferSubData(gl.ARRAY_BUFFER, 512, data);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.bufferSubData()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.createBuffer()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.bufferData()\f[R]
.IP \[bu] 2
Other buffers: \f[CR]WebGLFramebuffer\f[R], \f[CR]WebGLRenderbuffer\f[R]
