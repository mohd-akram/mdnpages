.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "HTMLElement" "JS" "January 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLElement \- HTMLElement
.SH SYNOPSIS
The \f[B]\f[CB]HTMLElement\f[B]\f[R] interface represents any HTML
element.
Some elements directly implement this interface, while others implement
it via an interface that inherits it.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent, \f[CI]Element\f[I].\f[R]
.TP
\f[B]HTMLElement.accessKey\f[R]
A string representing the access key assigned to the element.
.TP
\f[B]HTMLElement.accessKeyLabel\f[R] \f[I](read\-only)\f[R]
Returns a string containing the element\[cq]s assigned access key.
.TP
\f[B]HTMLElement.attributeStyleMap\f[R] \f[I](read\-only)\f[R]
A \f[CR]StylePropertyMap\f[R] representing the declarations of the
element\[cq]s \f[CR]style\f[R] attribute.
.TP
\f[B]HTMLElement.autofocus\f[R]
A boolean value reflecting the \f[CR]autofocus\f[R] HTML global
attribute, which indicates whether the control should be focused when
the page loads, or when dialog or popover become shown if specified in
an element inside \f[CR]<dialog>\f[R] elements or elements whose popover
attribute is set.
.TP
\f[B]HTMLElement.contentEditable\f[R]
A string, where a value of \f[CR]true\f[R] means the element is editable
and a value of \f[CR]false\f[R] means it isn\[cq]t.
.TP
\f[B]HTMLElement.dataset\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]DOMStringMap\f[R] with which script can read and write
the element\[cq]s custom data attributes (\f[CR]data\-*\f[R]) .
.TP
\f[B]HTMLElement.dir\f[R]
A string, reflecting the \f[CR]dir\f[R] global attribute, representing
the directionality of the element.
Possible values are \f[CR]\[dq]ltr\[dq]\f[R], \f[CR]\[dq]rtl\[dq]\f[R],
and \f[CR]\[dq]auto\[dq]\f[R].
.TP
\f[B]HTMLElement.draggable\f[R]
A boolean value indicating if the element can be dragged.
.TP
\f[B]HTMLElement.editContext\f[R] \f[I](experimental)\f[R]
Returns the \f[CR]EditContext\f[R] associated with the element, or
\f[CR]null\f[R] if there isn\[cq]t one.
.TP
\f[B]HTMLElement.enterKeyHint\f[R]
A string defining what action label (or icon) to present for the enter
key on virtual keyboards.
.TP
\f[B]HTMLElement.hidden\f[R]
A string or boolean value reflecting the value of the element\[cq]s
\f[CR]hidden\f[R] attribute.
.TP
\f[B]HTMLElement.inert\f[R]
A boolean value indicating whether the user agent must act as though the
given node is absent for the purposes of user interaction events,
in\-page text searches (\[lq]find in page\[rq]), and text selection.
.TP
\f[B]HTMLElement.innerText\f[R]
Represents the rendered text content of a node and its descendants.
As a getter, it approximates the text the user would get if they
highlighted the contents of the element with the cursor and then copied
it to the clipboard.
As a setter, it replaces the content inside the selected element,
converting any line breaks into \f[CR]<br>\f[R] elements.
.TP
\f[B]HTMLElement.inputMode\f[R]
A string value reflecting the value of the element\[cq]s
\f[CR]inputmode\f[R] attribute.
.TP
\f[B]HTMLElement.isContentEditable\f[R] \f[I](read\-only)\f[R]
Returns a boolean value indicating whether or not the content of the
element can be edited.
.TP
\f[B]HTMLElement.lang\f[R]
A string representing the language of an element\[cq]s attributes, text,
and element contents.
.TP
\f[B]HTMLElement.nonce\f[R]
Returns the cryptographic number used once that is used by Content
Security Policy to determine whether a given fetch will be allowed to
proceed.
.TP
\f[B]HTMLElement.offsetHeight\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]double\f[R] containing the height of an element,
relative to the layout.
.TP
\f[B]HTMLElement.offsetLeft\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]double\f[R], the distance from this element\[cq]s left
border to its \f[CR]offsetParent\f[R]\[cq]s left border.
.TP
\f[B]HTMLElement.offsetParent\f[R] \f[I](read\-only)\f[R]
An \f[CR]Element\f[R] that is the element from which all offset
calculations are currently computed.
.TP
\f[B]HTMLElement.offsetTop\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]double\f[R], the distance from this element\[cq]s top
border to its \f[CR]offsetParent\f[R]\[cq]s top border.
.TP
\f[B]HTMLElement.offsetWidth\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]double\f[R] containing the width of an element, relative
to the layout.
.TP
\f[B]HTMLElement.outerText\f[R]
Represents the rendered text content of a node and its descendants.
As a getter, it is the same as \f[CR]HTMLElement.innerText\f[R] (it
represents the rendered text content of an element and its descendants).
As a setter, it replaces the selected node and its contents with the
given value, converting any line breaks into \f[CR]<br>\f[R] elements.
.TP
\f[B]HTMLElement.popover\f[R]
Gets and sets an element\[cq]s popover state via JavaScript
(\f[CR]\[dq]auto\[dq]\f[R] or \f[CR]\[dq]manual\[dq]\f[R]), and can be
used for feature detection.
Reflects the value of the \f[CR]popover\f[R] global HTML attribute.
.TP
\f[B]HTMLElement.spellcheck\f[R]
A boolean value that controls the spell\-checking hint.
It is available on all HTML elements, though it doesn\[cq]t affect all
of them.
.TP
\f[B]HTMLElement.style\f[R]
A \f[CR]CSSStyleDeclaration\f[R] representing the declarations of the
element\[cq]s \f[CR]style\f[R] attribute.
.TP
\f[B]HTMLElement.tabIndex\f[R]
A \f[CR]long\f[R] representing the position of the element in the
tabbing order.
.TP
\f[B]HTMLElement.title\f[R]
A string containing the text that appears in a popup box when mouse is
over the element.
.TP
\f[B]HTMLElement.translate\f[R]
A boolean value representing the translation.
.TP
\f[B]HTMLElement.virtualKeyboardPolicy\f[R] \f[I](experimental)\f[R]
A string indicating the on\-screen virtual keyboard behavior on devices
such as tablets, mobile phones, or other devices where a hardware
keyboard may not be available, if the element\[cq]s content is editable
(for example, it is an \f[CR]<input>\f[R] or \f[CR]<textarea>\f[R]
element, or an element with the \f[CR]contenteditable\f[R] attribute
set).
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent, \f[CI]Element\f[I].\f[R]
.TP
\f[B]HTMLElement.attachInternals()\f[R]
Returns an \f[CR]ElementInternals\f[R] object, and enables a custom
element to participate in HTML forms.
.TP
\f[B]HTMLElement.blur()\f[R]
Removes keyboard focus from the currently focused element.
.TP
\f[B]HTMLElement.click()\f[R]
Sends a mouse click event to the element.
.TP
\f[B]HTMLElement.focus()\f[R]
Makes the element the current keyboard focus.
.TP
\f[B]HTMLElement.hidePopover()\f[R]
Hides a popover element by removing it from the top layer and styling it
with \f[CR]display: none\f[R].
.TP
\f[B]HTMLElement.showPopover()\f[R]
Shows a popover element by adding it to the top layer and removing
\f[CR]display: none;\f[R] from its styles.
.TP
\f[B]HTMLElement.togglePopover()\f[R]
Toggles a popover element between the hidden and showing states.
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.PP
\f[I]Also, inherits events from its parent, \f[CI]Element\f[I].\f[R]
.TP
\f[B]cancel\f[R]
Fired for \f[CR]<input>\f[R] and \f[CR]<dialog>\f[R] elements when the
user cancels the currently open dialog by closing it with the Esc key.
.TP
\f[B]change\f[R]
Fired when the \f[CR]value\f[R] of an \f[CR]<input>\f[R],
\f[CR]<select>\f[R], or \f[CR]<textarea>\f[R] element has been changed
and committed by the user.
Unlike the \f[CR]input\f[R] event, the \f[CR]change\f[R] event is not
necessarily fired for each alteration to an element\[cq]s
\f[CR]value\f[R].
.TP
\f[B]error\f[R]
Fired when a resource failed to load, or can\[cq]t be used.
.TP
\f[B]load\f[R]
Fires for elements containing a resource when the resource has
successfully loaded.
.SS Clipboard events
.TP
\f[B]copy\f[R]
Fired when the user initiates a copy action through the browser\[cq]s
user interface.
.TP
\f[B]cut\f[R]
Fired when the user initiates a cut action through the browser\[cq]s
user interface.
.TP
\f[B]paste\f[R]
Fired when the user initiates a paste action through the browser\[cq]s
user interface.
.SS Drag & drop events
.TP
\f[B]drag\f[R]
This event is fired when an element or text selection is being dragged.
.TP
\f[B]dragend\f[R]
This event is fired when a drag operation is being ended (by releasing a
mouse button or hitting the escape key).
.TP
\f[B]dragenter\f[R]
This event is fired when a dragged element or text selection enters a
valid drop target.
.TP
\f[B]dragleave\f[R]
This event is fired when a dragged element or text selection leaves a
valid drop target.
.TP
\f[B]dragover\f[R]
This event is fired continuously when an element or text selection is
being dragged and the mouse pointer is over a valid drop target (every
50 ms WHEN mouse is not moving ELSE much faster between 5 ms (slow
movement) and 1ms (fast movement) approximately.
This firing pattern is different than \f[CR]mouseover\f[R] ).
.TP
\f[B]dragstart\f[R]
This event is fired when the user starts dragging an element or text
selection.
.TP
\f[B]drop\f[R]
This event is fired when an element or text selection is dropped on a
valid drop target.
.SS Popover events
.TP
\f[B]beforetoggle\f[R]
Fired when the element is a popover, before it is hidden or shown.
.TP
\f[B]toggle\f[R]
Fired when the element is a popover, just after it is hidden or shown.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Element\f[R]
