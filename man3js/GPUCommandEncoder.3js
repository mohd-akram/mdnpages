.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMMANDENCODER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUCommandEncoder \- GPUCommandEncoder
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUCommandEncoder\f[B]\f[R] interface of the WebGPU API
represents a command encoder, used to encode commands to be issued to
the GPU.
.PP
A \f[CR]GPUCommandEncoder\f[R] object instance is created via the
\f[CR]GPUDevice.createCommandEncoder()\f[R] property.
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH INSTANCE METHODS
.TP
\f[B]beginComputePass()\f[R]
Starts encoding a compute pass, returning a
\f[CR]GPUComputePassEncoder\f[R] that can be used to control
computation.
.TP
\f[B]beginRenderPass()\f[R]
Starts encoding a render pass, returning a
\f[CR]GPURenderPassEncoder\f[R] that can be used to control rendering.
.TP
\f[B]clearBuffer()\f[R]
Encodes a command that fills a region of a \f[CR]GPUBuffer\f[R] with
zeroes.
.TP
\f[B]copyBufferToBuffer()\f[R]
Encodes a command that copies data from one \f[CR]GPUBuffer\f[R] to
another.
.TP
\f[B]copyBufferToTexture()\f[R]
Encodes a command that copies data from a \f[CR]GPUBuffer\f[R] to a
\f[CR]GPUTexture\f[R].
.TP
\f[B]copyTextureToBuffer()\f[R]
Encodes a command that copies data from a \f[CR]GPUTexture\f[R] to a
\f[CR]GPUBuffer\f[R].
.TP
\f[B]copyTextureToTexture()\f[R]
Encodes a command that copies data from one \f[CR]GPUTexture\f[R] to
another.
.TP
\f[B]finish()\f[R]
Completes recording of the command sequence encoded on this
\f[CR]GPUCommandEncoder\f[R], returning a corresponding
\f[CR]GPUCommandBuffer\f[R].
.TP
\f[B]insertDebugMarker()\f[R]
Marks a specific point in a series of encoded commands with a label.
.TP
\f[B]popDebugGroup()\f[R]
Ends a debug group, which is begun with a \f[CR]pushDebugGroup()\f[R]
call.
.TP
\f[B]pushDebugGroup()\f[R]
Begins a debug group, which is marked with a specified label, and will
contain all subsequent encoded commands up until a
\f[CR]popDebugGroup()\f[R] method is invoked.
.TP
\f[B]resolveQuerySet()\f[R]
Encodes a command that resolves a \f[CR]GPUQuerySet\f[R], copying the
results into a specified \f[CR]GPUBuffer\f[R].
.TP
\f[B]writeTimestamp()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Encodes a command that writes a timestamp into a \f[CR]GPUQuerySet\f[R]
once the previous commands recorded into the same queued
\f[CR]GPUCommandBuffer\f[R] have been executed by the GPU.
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, several commands are recorded via a \f[CR]GPUCommandEncoder\f[R]:
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create GPUCommandEncoder\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Create GPURenderPassDescriptor to tell WebGPU which texture to draw into, then initiate render pass\f[R]

\f[B]const\f[R] renderPassDescriptor = {
  colorAttachments: [
    {
      clearValue: clearColor,
      loadOp: \(dqclear\(dq,
      storeOp: \(dqstore\(dq,
      view: context.getCurrentTexture().createView(),
    },
  ],
};

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

\f[I]// Draw a triangle\f[R]

passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.draw(3);

\f[I]// End the render pass\f[R]

passEncoder.end();

\f[I]// \&...\f[R]
.EE
.PP
The commands encoded by the \f[CR]GPUCommandEncoder\f[R] are recoded
into a \f[CR]GPUCommandBuffer\f[R] using the
\f[CR]GPUCommandEncoder.finish()\f[R] method.
The command buffer is then passed into the queue via a
\f[CR]submit()\f[R] call, ready to be processed by the GPU.
.IP
.EX
device.queue.submit([commandEncoder.finish()]);
.EE
.RS
.PP
\f[B]Note:\f[R] Study the \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ to find more command encoding examples.
.RE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
