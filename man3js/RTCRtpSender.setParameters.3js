.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RTCRTPSENDER.SETPARAMETERS" "3JS" "February 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpSender.setParameters \- RTCRtpSender: setParameters() method
.SH SYNOPSIS
The \f[B]\f[CB]setParameters()\f[B]\f[R] method of the
\f[CR]RTCRtpSender\f[R] interface applies changes the configuration of
sender\(cqs \f[CR]track\f[R], which is the \f[CR]MediaStreamTrack\f[R]
for which the \f[CR]RTCRtpSender\f[R] is responsible.
.PP
In other words, \f[CR]setParameters()\f[R] updates the configuration of
the RTP transmission as well as the encoding configuration for a
specific outgoing media track on the WebRTC connection.
.SH SYNTAX
.IP
.EX
setParameters(parameters)
.EE
.SS Parameters
.TP
\f[B]parameters\f[R]
A parameters object previously obtained by calling the same sender\(cqs
\f[CR]getParameters()\f[R] method, with the desired changes to the
sender\(cqs configuration parameters.
These parameters include potential codecs that could be use for encoding
the sender\(cqs \f[CR]track\f[R].
The available parameters are:
.RS
.TP
\f[B]encodings\f[R]
An array of objects, each specifying the parameters for a single codec
that could be used to encode the track\(cqs media.
The properties of the objects include:
.RS
.TP
\f[B]active\f[R]
Setting this value \f[CR]true\f[R] (the default) causes this encoding to
be sent, while \f[CR]false\f[R] stops it from being sent and used (but
does not cause the SSRC to be removed).
.TP
\f[B]dtx\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Only used for an \f[CR]RTCRtpSender\f[R] whose \f[CR]kind\f[R] is
\f[CR]audio\f[R], this property indicates whether or not to use
discontinuous transmission (a feature by which a phone is turned off or
the microphone muted automatically in the absence of voice activity).
The value is taken either \f[CR]enabled\f[R] or \f[CR]disabled\f[R].
.TP
\f[B]maxBitrate\f[R]
A positive integer indicating the maximum number of bits per second that
the user agent is allowed to grant to tracks encoded with this encoding.
Other parameters may further constrain the bit rate, such as the value
of \f[CR]maxFramerate\f[R], or the bandwidth available for the transport
or physical network.
.RS
.PP
The value is computed using the standard Transport Independent
Application Specific Maximum (TIAS) bandwidth as defined by RFC 3890,
section 6.2.2); this is the maximum bandwidth needed without considering
protocol overheads from IP, TCP or UDP, and so forth.
.PP
Note that the bitrate can be achieved in a number of ways, depending on
the media and encoding.
For example, for video a low bit rate might be achieved by dropping
frames (a bitrate of zero might allow just one frame to be sent), while
for audio the track might have to stop playing if the bitrate is too low
for it to be sent.
.RE
.TP
\f[B]maxFramerate\f[R]
A value specifying the maximum number of frames per second to allow for
this encoding.
.TP
\f[B]priority\f[R]
A string indicating the priority of the \f[CR]RTCRtpSender\f[R], which
may determine how the user agent allocates bandwidth between senders.
Allowed values are \f[CR]very\-low\f[R], \f[CR]low\f[R] (default),
\f[CR]medium\f[R], \f[CR]high\f[R].
.TP
\f[B]rid\f[R]
A string which, if set, specifies an \f[I]RTP stream ID\f[R]
(\f[I]RID\f[R]) to be sent using the RID header extension.
This parameter cannot be modified using \f[CR]setParameters()\f[R].
Its value can only be set when the transceiver is first created.
.TP
\f[B]scaleResolutionDownBy\f[R]
Only used for senders whose track\(cqs \f[CR]kind\f[R] is
\f[CR]video\f[R], this is a floating\-point value specifying a factor by
which to scale down the video during encoding.
The default value, 1.0, means that the video will be encoded at its
original size.
A value of 2.0 scales the video frames down by a factor of 2 in each
dimension, resulting in a video 1/4 the size of the original.
The value must not be less than 1.0 (attempting to scale the video to a
larger size will throw a \f[CR]RangeError\f[R]).
.RE
.TP
\f[B]transactionId\f[R]
A string containing a unique ID.
This ID is set in the previous \f[CR]getParameters()\f[R] call, and
ensures that the parameters originated from a previous call to
\f[CR]getParameters()\f[R].
.TP
\f[B]codecs\f[R]
An array of objects describing the media codecs from which the sender
will choose.
This parameter cannot be changed once initially set.
.RS
.PP
Each codec object in the array may have the following properties:
.TP
\f[B]channels\f[R] \f[I](optional)\f[R]
A positive integer indicating the number of channels supported by the
codec.
For example, for audio codecs a value of 1 specifies monaural sound,
while 2 indicates stereo.
.TP
\f[B]clockRate\f[R]
A positive integer specifying the codec\(cqs clock rate in Hertz (Hz).
The clock rate is the rate at which the codec\(cqs RTP timestamp
advances.
Most codecs have specific values or ranges of values they permit.
The IANA maintains a \c
.UR https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-1
list of codecs and their parameters
.UE \c
, including their clock rates.
.TP
\f[B]mimeType\f[R]
A string indicating the codec\(cqs MIME media type and subtype,
specified as a string of the form \f[CR]\(dqtype/subtype\(dq\f[R].
The MIME type strings used by RTP differ from those used elsewhere.
IANA maintains a \c
.UR https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-2
registry of valid MIME types
.UE \c
\&.
Also see Codecs used by WebRTC for details about potential codecs that
might be referenced here.
.TP
\f[B]payloadType\f[R]
The \c
.UR https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-1
RTP payload type
.UE \c
\ used to identify this codec.
.TP
\f[B]sdpFmtpLine\f[R] \f[I](optional)\f[R]
A string giving the format specific parameters provided by the local
description.
.RE
.TP
\f[B]headerExtensions\f[R]
An array of zero or more RTP header extensions, each identifying an
extension supported by the sender.
Header extensions are described in RFC 3550, section 5.3.1).
This parameter cannot be changed.
.TP
\f[B]rtcp\f[R]
An \f[CR]RTCRtcpParameters\f[R] object providing the configuration
parameters used for RTCP on the sender.
This parameter cannot be changed.
.TP
\f[B]degradationPreference\f[R] \f[I](deprecated)\f[R]
Specifies the preferred way the WebRTC layer should handle optimizing
bandwidth against quality in constrained\-bandwidth situations.
The possible values are \f[CR]maintain\-framerate\f[R],
\f[CR]maintain\-resolution\f[R], or \f[CR]balanced\f[R].
The default value is \f[CR]balanced\f[R].
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves when the
\f[CR]RTCRtpSender.track\f[R] property is updated with the given
parameters.
.SS Exceptions
If an error occurs, the returned promise is rejected with the
appropriate exception from the list below.
.TP
\f[B]InvalidModificationError\f[R] \f[B]DOMException\f[R]
Returned if one of the following problems is detected:
.RS
.IP \(bu 2
The number of encodings specified in the \f[CR]parameters\f[R]
object\(cqs \f[CR]encodings\f[R] property does not match the number of
encodings currently listed for the \f[CR]RTCRtpSender\f[R].
You cannot change the number of encoding options after the sender has
been created.
.IP \(bu 2
The order of the specified \f[CR]encodings\f[R] has changed from the
current list\(cqs order.
.IP \(bu 2
An attempt has been made to alter a property that cannot be changed
after the sender is first created.
.RE
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Returned if the transceiver, of which the \f[CR]RTCRtpSender\f[R] is a
part, is not running or has no parameters to set.
.TP
\f[B]OperationError\f[R] \f[B]DOMException\f[R]
Returned if an error occurs that does not match the ones specified here.
.TP
\f[B]RangeError\f[R]
Returned if the value specified for \f[CR]scaleResolutionDownBy\f[R]
option is less than 1.0 \(em which would result in scaling up rather
than down, which is not allowed; or if one or more of the specified
\f[CR]encodings\f[R] \f[CR]maxFramerate\f[R] values is less than 0.0.
.PP
In addition, if a WebRTC error occurs while configuring or accessing the
media, an \f[CR]RTCError\f[R] is thrown with its \f[CR]errorDetail\f[R]
set to \f[CR]hardware\-encoder\-error\f[R].
.SH DESCRIPTION
It\(cqs important to keep in mind that you can\(cqt create the
\f[CR]parameters\f[R] object yourself and expect it to work.
Instead, you \f[I]must\f[R] first call \f[CR]getParameters()\f[R],
modify the received parameters object, then pass that object into
\f[CR]setParameters()\f[R].
WebRTC uses the parameters object\(cqs \f[CR]transactionId\f[R] property
to ensure that when you set parameters, your changes are based on the
most recent parameters rather than an out of date configuration.
.SH EXAMPLES
One use case for \f[CR]setParameters()\f[R] is to try to reduce network
bandwidth used in constrained environments by altering the resolution
and/or bit rate of the media being transmitted by the
\f[CR]RTCRtpSender\f[R].
.PP
Currently, some browsers have limitations on their implementations that
may cause issues.
For that reason, two examples are given here.
The first shows how to use \f[CR]setParameters()\f[R] when all browsers
fully support the parameters being used, while the second example
demonstrates workarounds to help solve limitations in browsers with
incomplete support for the \f[CR]maxBitrate\f[R] and
\f[CR]scaleResolutionDownBy\f[R] parameters.
.SS By the specification
Once all browsers implement the spec fully, this implementation of
\f[CR]setVideoParams()\f[R] will do the job.
This demonstrates how everything \f[I]should\f[R] work.
You should probably use the second example, below, for now.
But this is a clearer demonstration of the basic concept of first
fetching the parameters, then altering them, then setting them.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] setVideoParams(sender, height, bitrate) {
  \f[B]const\f[R] scaleRatio = sender.track.getSettings().height / height;
  \f[B]const\f[R] params = sender.getParameters();

  params.encodings[0].scaleResolutionDownBy = Math.max(scaleRatio, 1);
  params.encodings[0].maxBitrate = bitrate;
  \f[B]await\f[R] sender.setParameters(params);
}
.EE
.PP
In calling this function, you specify a sender, as well as the height
you wish to scale the sender\(cqs video to, as well as a maximum bitrate
to permit the sender to transmit.
A scaling factor for the size of the video, \f[CR]scaleRatio\f[R], is
computed.
Then the sender\(cqs current parameters are fetched using
\f[CR]getParameters()\f[R].
.PP
The parameters are then altered by changing the first
\f[CR]encodings\f[R] object\(cqs \f[CR]scaleResolutionDownBy\f[R] and
\f[CR]maxBitrate\f[R] to the calculated scaling factor and the specified
maximum \f[CR]bitrate\f[R].
.PP
The changed parameters are then saved by calling the sender\(cqs
\f[CR]setParameters()\f[R] method.
.SS Currently compatible implementation
As mentioned above, the previous example shows how things are meant to
work.
Unfortunately, there are implementation issues preventing this in many
browsers right now.
For that reason, if you want to be compatible with iPhone and other
devices running Safari, and with Firefox, use code more like this:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] setVideoParams(sender, height, bitrate) {
  \f[B]const\f[R] scaleRatio = sender.track.getSettings().height / height;
  \f[B]const\f[R] params = sender.getParameters();

  \f[I]// If encodings is null, create it\f[R]

  \f[B]if\f[R] (!params.encodings) {
    params.encodings = [{}];
  }

  params.encodings[0].scaleResolutionDownBy = Math.max(scaleRatio, 1);
  params.encodings[0].maxBitrate = bitrate;
  \f[B]await\f[R] sender.setParameters(params);

  \f[I]// If the newly changed value of scaleResolutionDownBy is 1,\f[R]
  \f[I]// use applyConstraints() to be sure the height is constrained,\f[R]
  \f[I]// since scaleResolutionDownBy may not be implemented\f[R]

  \f[B]if\f[R] (sender.getParameters().encodings[0].scaleResolutionDownBy === 1) {
    \f[B]await\f[R] sender.track.applyConstraints({ height });
  }
}
.EE
.PP
The differences here:
.IP \(bu 2
If \f[CR]encodings\f[R] is \f[CR]null\f[R], we create it, in order to
ensure that we can then set the parameters successfully without
crashing.
.IP \(bu 2
If, after setting the parameters, the value of
\f[CR]scaleResolutionDownBy\f[R] is still 1, we call the sender\(cqs
track\(cqs \f[CR]applyConstraints()\f[R] method to constrain the
track\(cqs height to \f[CR]height\f[R].
This compensates for an unimplemented \f[CR]scaleResolutionDownBy\f[R]
(as is the case in Safari as of this writing).
.PP
This code will cleanly fall back and work the normal way if the browser
fully implements the used features.
.SH SEE ALSO
.IP \(bu 2
WebRTC API
.IP \(bu 2
Codecs used by WebRTC
.IP \(bu 2
Web media technologies
