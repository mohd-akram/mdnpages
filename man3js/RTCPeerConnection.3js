.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RTCPeerConnection" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection \- RTCPeerConnection
.SH SYNOPSIS
The \f[B]\f[CB]RTCPeerConnection\f[B]\f[R] interface represents a WebRTC
connection between the local computer and a remote peer.
It provides methods to connect to a remote peer, maintain and monitor
the connection, and close the connection once it\[cq]s no longer needed.
.SH CONSTRUCTOR
.TP
\f[B]RTCPeerConnection()\f[R]
Returns a new \f[CR]RTCPeerConnection\f[R], representing a connection
between the local device and a remote peer.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]canTrickleIceCandidates\f[R] \f[I](read\-only)\f[R]
Returns a boolean value which indicates whether or not the remote peer
can accept \c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-mmusic-trickle-ice
trickled ICE candidates
.UE \c
\&.
.TP
\f[B]connectionState\f[R] \f[I](read\-only)\f[R]
Indicates the current state of the peer connection by returning one of
the strings: \f[CR]new\f[R], \f[CR]connecting\f[R],
\f[CR]connected\f[R], \f[CR]disconnected\f[R], \f[CR]failed\f[R], or
\f[CR]closed\f[R].
.TP
\f[B]currentLocalDescription\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]RTCSessionDescription\f[R] object describing the local
end of the connection as it was most recently successfully negotiated
since the last time this \f[CR]RTCPeerConnection\f[R] finished
negotiating and connecting to a remote peer.
Also included is a list of any ICE candidates that may already have been
generated by the ICE agent since the offer or answer represented by the
description was first instantiated.
.TP
\f[B]currentRemoteDescription\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]RTCSessionDescription\f[R] object describing the remote
end of the connection as it was most recently successfully negotiated
since the last time this \f[CR]RTCPeerConnection\f[R] finished
negotiating and connecting to a remote peer.
Also included is a list of any ICE candidates that may already have been
generated by the ICE agent since the offer or answer represented by the
description was first instantiated.
.TP
\f[B]iceConnectionState\f[R] \f[I](read\-only)\f[R]
Returns a string which state of the ICE agent associated with this
RTCPeerConnection.
It can be one of the following values: \f[CR]new\f[R],
\f[CR]checking\f[R], \f[CR]connected\f[R], \f[CR]completed\f[R],
\f[CR]failed\f[R], \f[CR]disconnected\f[R], or \f[CR]closed\f[R].
.TP
\f[B]iceGatheringState\f[R] \f[I](read\-only)\f[R]
Returns a string that describes connection\[cq]s ICE gathering state.
This lets you detect, for example, when collection of ICE candidates has
finished.
Possible values are: \f[CR]new\f[R], \f[CR]gathering\f[R], or
\f[CR]complete\f[R].
.TP
\f[B]localDescription\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]RTCSessionDescription\f[R] describing the session for
the local end of the connection.
If it has not yet been set, returns \f[CR]null\f[R].
.TP
\f[B]peerIdentity\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Promise\f[R] that resolves to an
\f[CR]RTCIdentityAssertion\f[R] which contains a string identifying the
remote peer.
Once this promise resolves successfully, the resulting identity is the
target peer identity and will not change for the duration of the
connection.
.TP
\f[B]pendingLocalDescription\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]RTCSessionDescription\f[R] object describing a pending
configuration change for the local end of the connection.
This does not describe the connection as it currently stands, but as it
may exist in the near future.
.TP
\f[B]pendingRemoteDescription\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]RTCSessionDescription\f[R] object describing a pending
configuration change for the remote end of the connection.
This does not describe the connection as it currently stands, but as it
may exist in the near future.
.TP
\f[B]remoteDescription\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]RTCSessionDescription\f[R] object describing the
session, including configuration and media information, for the remote
end of the connection.
If this hasn\[cq]t been set yet, this returns \f[CR]null\f[R].
.TP
\f[B]sctp\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]RTCSctpTransport\f[R] object describing the SCTP
transport layer over which SCTP data is being sent and received.
If SCTP hasn\[cq]t been negotiated, this value is \f[CR]null\f[R].
.TP
\f[B]signalingState\f[R] \f[I](read\-only)\f[R]
Returns a string describing the state of the signaling process on the
local end of the connection while connecting or reconnecting to another
peer.
It is one of the following values: \f[CR]stable\f[R],
\f[CR]have\-local\-offer\f[R], \f[CR]have\-remote\-offer\f[R],
\f[CR]have\-local\-pranswer\f[R], \f[CR]have\-remote\-pranswer\f[R], or
\f[CR]closed\f[R].
.SH STATIC METHODS
.TP
\f[B]RTCPeerConnection.generateCertificate()\f[R]
Creates an X.509 certificate and its corresponding private key,
returning a \f[CR]Promise\f[R] that resolves with the new
\f[CR]RTCCertificate\f[R] once it is generated.
.SH INSTANCE METHODS
\f[I]Also inherits methods from \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]addIceCandidate()\f[R]
Adds a new remote candidate to the \f[CR]RTCPeerConnection\f[R]\[cq]s
remote description, which describes the state of the remote end of the
connection.
.TP
\f[B]addTrack()\f[R]
Adds a new \f[CR]MediaStreamTrack\f[R] to the set of tracks which will
be transmitted to the other peer.
.TP
\f[B]addTransceiver()\f[R]
Creates a new \f[CR]RTCRtpTransceiver\f[R] and adds it to the set of
transceivers associated with the connection.
Each transceiver represents a bidirectional stream, with both an
\f[CR]RTCRtpSender\f[R] and an \f[CR]RTCRtpReceiver\f[R] associated with
it.
.TP
\f[B]close()\f[R]
Closes the current peer connection.
.TP
\f[B]createAnswer()\f[R]
Initiates the creation of an SDP answer to an offer received from a
remote peer during the offer/answer negotiation of a WebRTC connection.
The answer contains information about any media already attached to the
session, codecs and options supported by the browser, and any ICE
candidates already gathered.
.TP
\f[B]createDataChannel()\f[R]
Initiates the creation a new channel linked with the remote peer, over
which any kind of data may be transmitted.
This can be useful for back\-channel content, such as images, file
transfer, text chat, game update packets, and so forth.
.TP
\f[B]createOffer()\f[R]
Initiates the creation of an SDP offer for the purpose of starting a new
WebRTC connection to a remote peer.
The SDP offer includes information about any \f[CR]MediaStreamTrack\f[R]
objects already attached to the WebRTC session, codec, and options
supported by the browser, as well as any candidates already gathered by
the ICE agent, for the purpose of being sent over the signaling channel
to a potential peer to request a connection or to update the
configuration of an existing connection.
.TP
\f[B]getConfiguration()\f[R]
Returns an object which indicates the current configuration of the
connection.
.TP
\f[B]getIdentityAssertion()\f[R]
Initiates the gathering of an identity assertion and returns a
\f[CR]Promise\f[R] which resolves to an identity assertion encoded as a
string.
This has an effect only if \f[CR]signalingState\f[R] is not
\f[CR]closed\f[R].
.TP
\f[B]getReceivers()\f[R]
Returns an array of \f[CR]RTCRtpReceiver\f[R] objects, each of which
represents one RTP receiver.
.TP
\f[B]getSenders()\f[R]
Returns an array of \f[CR]RTCRtpSender\f[R] objects, each of which
represents the RTP sender responsible for transmitting one track\[cq]s
data.
.TP
\f[B]getStats()\f[R]
Returns a \f[CR]Promise\f[R] which resolves with data providing
statistics about either the overall connection or about the specified
\f[CR]MediaStreamTrack\f[R].
.TP
\f[B]getTransceivers()\f[R]
Returns a list of all the \f[CR]RTCRtpTransceiver\f[R] objects being
used to send and receive data on the connection.
.TP
\f[B]removeTrack()\f[R]
Tells the local end of the connection to stop sending media from the
specified track, without actually removing the corresponding
\f[CR]RTCRtpSender\f[R] from the list of senders as reported by
\f[CR]getSenders()\f[R].
If the track is already stopped, or is not in the connection\[cq]s
senders list, this method has no effect.
.TP
\f[B]restartIce()\f[R]
Allows to easily request that ICE candidate gathering be redone on both
ends of the connection.
This simplifies the process by allowing the same method to be used by
either the caller or the receiver to trigger an ICE restart.
.TP
\f[B]setConfiguration()\f[R]
Sets the current configuration of the connection based on the values
included in the specified object.
This lets you change the ICE servers used by the connection and which
transport policies to use.
.TP
\f[B]setIdentityProvider()\f[R]
Sets the Identity Provider (IdP) to the triplet given in parameter: its
name, the protocol used to communicate with it and an username.
The protocol and the username are optional.
.TP
\f[B]setLocalDescription()\f[R]
Changes the local description associated with the connection.
This description specifies the properties of the local end of the
connection, including the media format.
It returns a \f[CR]Promise\f[R] which is fulfilled once the description
has been changed, asynchronously.
.TP
\f[B]setRemoteDescription()\f[R]
Sets the specified session description as the remote peer\[cq]s current
offer or answer.
The description specifies the properties of the remote end of the
connection, including the media format.
It returns a \f[CR]Promise\f[R] which is fulfilled once the description
has been changed, asynchronously.
.SS Obsolete methods
.TP
\f[B]addStream()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Adds a \f[CR]MediaStream\f[R] as a local source of audio or video.
Instead of using this obsolete method, you should instead use
\f[CR]addTrack()\f[R] once for each track you wish to send to the remote
peer.
.TP
\f[B]createDTMFSender()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Creates a new \f[CR]RTCDTMFSender\f[R], associated to a specific
\f[CR]MediaStreamTrack\f[R], that will be able to send DTMF phone
signaling over the connection.
.TP
\f[B]removeStream()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Removes a \f[CR]MediaStream\f[R] as a local source of audio or video.
Because this method is obsolete, you should instead use
\f[CR]removeTrack()\f[R].
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]connectionstatechange\f[R]
Sent when the overall connectivity status of the
\f[CR]RTCPeerConnection\f[R] changes.
.TP
\f[B]datachannel\f[R]
Sent when the remote peer adds an \f[CR]RTCDataChannel\f[R] to the
connection.
.TP
\f[B]icecandidate\f[R]
Sent to request that the specified candidate be transmitted to the
remote peer.
.TP
\f[B]icecandidateerror\f[R]
Sent to the connection if an error occurred during ICE candidate
gathering.
The event describes the error.
.TP
\f[B]iceconnectionstatechange\f[R]
Sent when the state of the ICE connection changes, such as when it
disconnects.
.TP
\f[B]icegatheringstatechange\f[R]
Sent when the ICE layer\[cq]s gathering state, reflected by
\f[CR]iceGatheringState\f[R], changes.
This indicates whether ICE negotiation has not yet begun
(\f[CR]new\f[R]), has begun gathering candidates (\f[CR]gathering\f[R]),
or has completed (\f[CR]complete\f[R]).
.TP
\f[B]negotiationneeded\f[R]
Sent when negotiation or renegotiation of the ICE connection needs to be
performed; this can happen both when first opening a connection as well
as when it is necessary to adapt to changing network conditions.
The receiver should respond by creating an offer and sending it to the
other peer.
.TP
\f[B]signalingstatechange\f[R]
Sent when the connection\[cq]s ICE signaling state changes.
.TP
\f[B]track\f[R]
Sent after a new track has been added to one of the
\f[CR]RTCRtpReceiver\f[R] instances which comprise the connection.
.SS Obsolete events
.TP
\f[B]addstream\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Sent when a new \f[CR]MediaStream\f[R] has been added to the connection.
Instead of listening for this obsolete event, you should listen for
\f[CR]track\f[R] events; one is sent for each
\f[CR]MediaStreamTrack\f[R] added to the connection.
.TP
\f[B]removestream\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Sent when a \f[CR]MediaStream\f[R] is removed from the connection.
Instead of listening for this obsolete event, you should listen for
\f[CR]removetrack\f[R] events on each stream.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/jesup/nightly-gupshup/blob/master/static/js/chat.js
.UE \c
.IP \[bu] 2
\c
.UR https://web.dev/articles/webrtc-basics
Get started with WebRTC
.UE \c
.IP \[bu] 2
\c
.UR https://github.com/chrisjohndigital/TutorRoom
TutorRoom
.UE \c
: Node.js HTML video capture, peer\-to\-peer video and file sharing
application (\c
.UR https://github.com/chrisjohndigital/TutorRoom
source on GitHub
.UE \c
)
