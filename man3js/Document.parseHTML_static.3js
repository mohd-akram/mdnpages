.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DOCUMENT.PARSEHTML_STATIC" "3JS" "June 8, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.parseHTML_static \- Document: parseHTML() static method
.SH SYNOPSIS
The \f[B]\f[CB]parseHTML()\f[B]\f[R] static method of the
\f[CR]Document\f[R] object provides an XSS\-safe method to parse and
sanitize a string of HTML in order to create a new \f[CR]Document\f[R]
instance.
.SH SYNTAX
.IP
.EX
Document.parseHTML(input)
Document.parseHTML(input, options)
.EE
.SS Parameters
.TP
\f[B]input\f[R]
A string defining HTML to be sanitized and injected into the shadow
root.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An options object with the following optional parameters:
.RS
.TP
\f[B]sanitizer\f[R]
A \f[CR]Sanitizer\f[R] or \f[CR]SanitizerConfig\f[R] object which
defines what elements of the input will be allowed or removed, or the
string \f[CR]\(dqdefault\(dq\f[R] for the default sanitizer
configuration.
Note that generally a \f[CR]\(dqSanitizer\f[R] is expected to be more
efficient than a \f[CR]SanitizerConfig\f[R] if the configuration is to
reused.
If not specified, the XSS\-safe default sanitizer configuration is used.
.RE
.SS Return value
A \f[CR]Document\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
This is thrown if \f[CR]options.sanitizer\f[R] is passed a:
.RS
.IP \(bu 2
non\-normalized \f[CR]SanitizerConfig\f[R] (one that includes both
\(lqallowed\(rq and \(lqremoved\(rq configuration settings).
.IP \(bu 2
string that does not have the value \f[CR]\(dqdefault\(dq\f[R].
.IP \(bu 2
value that is not a \f[CR]Sanitizer\f[R], \f[CR]SanitizerConfig\f[R], or
string.
.RE
.SH DESCRIPTION
The \f[B]\f[CB]parseHTML()\f[B]\f[R] method parses and sanitize a string
of HTML in order to create a new \f[CR]Document\f[R] instance that is
XSS\-safe.
The resulting \f[CR]Document\f[R] will have a content type of
\(lqtext/html\(rq, a character set of UTF\-8, and a URL of
\(lqabout:blank\(rq.
.PP
If no sanitizer configuration is specified in the
\f[CR]options.sanitizer\f[R] parameter, \f[CR]parseHTML()\f[R] is used
with the default \f[CR]Sanitizer\f[R] configuration.
This configuration allows all elements and attributes that are
considered XSS\-safe, thereby disallowing entities that are considered
unsafe.
A custom sanitizer or sanitizer configuration can be specified to choose
which elements, attributes, and comments are allowed or removed.
Note that even if unsafe options are allowed by the sanitizer
configuration, they will still be removed when using this method (which
implicitly calls \f[CR]Sanitizer.removeUnsafe()\f[R]).
.PP
The input HTML may include declarative shadow roots.
If the string of HTML defines more than one declarative shadow root in a
particular shadow host then only the first \f[CR]ShadowRoot\f[R] is
created \(em subsequent declarations are parsed as \f[CR]<template>\f[R]
elements within that shadow root.
.PP
\f[CR]parseHTML()\f[R] should be used instead of
\f[CR]Document.parseHTMLUnsafe()\f[R], unless there is a specific need
to allow unsafe elements and attributes.
If the HTML to be parsed doesn\(cqt need to contain unsafe HTML
entities, then you should use \f[CR]Document.parseHTML()\f[R].
.PP
Note that since this method always sanitizes input strings of
XSS\-unsafe entities, it is not secured or validated using the Trusted
Types API.
.SH SEE ALSO
.IP \(bu 2
\f[CR]Document.parseHTMLUnsafe()\f[R]
.IP \(bu 2
\f[CR]Element.setHTML()\f[R] and \f[CR]Element.setHTMLUnsafe()\f[R]
.IP \(bu 2
\f[CR]ShadowRoot.setHTML()\f[R] and
\f[CR]ShadowRoot.setHTMLUnsafe()\f[R]
.IP \(bu 2
\f[CR]DOMParser.parseFromString()\f[R] for parsing HTML or XML into a
DOM tree
.IP \(bu 2
HTML Sanitizer API
