'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SUBTLECRYPTO.DIGEST" "3JS" "March 31, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SubtleCrypto.digest \- SubtleCrypto: digest() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]digest()\f[B]\f[R] method of the \f[CR]SubtleCrypto\f[R]
interface generates a \f[I]digest\f[R] of the given data, using the
specified hash function.
A digest is a short fixed\-length value derived from some
variable\-length input.
Cryptographic digests should exhibit collision\-resistance, meaning that
it\(cqs hard to come up with two different inputs that have the same
digest value.
.PP
It takes as its arguments an identifier for the digest algorithm to use
and the data to digest.
It returns a \f[CR]Promise\f[R] which will be fulfilled with the digest.
.PP
Note that this API does not support streaming input: you must read the
entire input into memory before passing it into the digest function.
.SH SYNTAX
.IP
.EX
digest(algorithm, data)
.EE
.SS Parameters
.TP
\f[B]algorithm\f[R]
This may be a string or an object with a single property \f[CR]name\f[R]
that is a string.
The string names the hash function to use.
Supported values are:
.RS
.IP \(bu 2
\f[CR]\(dqSHA\-1\(dq\f[R] (but don\(cqt use this in cryptographic
applications)
.IP \(bu 2
\f[CR]\(dqSHA\-256\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqSHA\-384\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqSHA\-512\(dq\f[R].
.RE
.TP
\f[B]data\f[R]
An \f[CR]ArrayBuffer\f[R], a \f[CR]TypedArray\f[R] or a
\f[CR]DataView\f[R] object containing the data to be digested.
.SS Return value
A \f[CR]Promise\f[R] that fulfills with an \f[CR]ArrayBuffer\f[R]
containing the digest.
.SH SUPPORTED ALGORITHMS
Digest algorithms, also known as hash functions, transform an
arbitrarily large block of data into a fixed\-size output, usually much
shorter than the input.
They have a variety of applications in cryptography.
.PP
.TS
tab(@);
l l l l.
T{
Algorithm
T}@T{
Output length (bits)
T}@T{
Block size (bits)
T}@T{
Specification
T}
T{
SHA\-1
T}@T{
160
T}@T{
512
T}@T{
\c
.UR https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
FIPS 180\-4
.UE \c
, section 6.1
T}
T{
SHA\-256
T}@T{
256
T}@T{
512
T}@T{
\c
.UR https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
FIPS 180\-4
.UE \c
, section 6.2
T}
T{
SHA\-384
T}@T{
384
T}@T{
1024
T}@T{
\c
.UR https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
FIPS 180\-4
.UE \c
, section 6.5
T}
T{
SHA\-512
T}@T{
512
T}@T{
1024
T}@T{
\c
.UR https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
FIPS 180\-4
.UE \c
, section 6.4
T}
.TE
.RS
.PP
\f[B]Warning:\f[R] SHA\-1 is now considered vulnerable and should not be
used for cryptographic applications.
.RE
.RS
.PP
\f[B]Note:\f[R] If you are looking here for how to create a keyed\-hash
message authentication code (HMAC), you need to use the
SubtleCrypto.sign() instead.
.RE
.SH EXAMPLES
For more examples of using the \f[CR]digest()\f[R] API, see
Non\-cryptographic uses of SubtleCrypto.
.SS Basic example
This example encodes a message, then calculates its SHA\-256 digest and
logs the digest length:
.IP
.EX
\f[B]const\f[R] text =
  \(dqAn obscure body in the S\-K System, your majesty. The inhabitants refer to it as the planet Earth.\(dq;

\f[B]async\f[R] \f[B]function\f[R] digestMessage(message) {
  \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
  \f[B]const\f[R] data = encoder.encode(message);
  \f[B]const\f[R] hash = \f[B]await\f[R] window.crypto.subtle.digest(\(dqSHA\-256\(dq, data);
  \f[B]return\f[R] hash;
}

digestMessage(text).then((digestBuffer) \f[B]=>\f[R]
  console.log(digestBuffer.byteLength),
);
.EE
.SS Converting a digest to a hex string
The digest is returned as an \f[CR]ArrayBuffer\f[R], but for comparison
and display digests are often represented as hex strings.
This example calculates a digest, then converts the
\f[CR]ArrayBuffer\f[R] to a hex string:
.IP
.EX
\f[B]const\f[R] text =
  \(dqAn obscure body in the S\-K System, your majesty. The inhabitants refer to it as the planet Earth.\(dq;

\f[B]async\f[R] \f[B]function\f[R] digestMessage(message) {
  \f[B]const\f[R] msgUint8 = \f[B]new\f[R] TextEncoder().encode(message); \f[I]// encode as (utf\-8) Uint8Array\f[R]
  \f[B]const\f[R] hashBuffer = \f[B]await\f[R] window.crypto.subtle.digest(\(dqSHA\-256\(dq, msgUint8); \f[I]// hash the message\f[R]
  \f[B]const\f[R] hashArray = Array.from(\f[B]new\f[R] Uint8Array(hashBuffer)); \f[I]// convert buffer to byte array\f[R]
  \f[B]const\f[R] hashHex = hashArray
    .map((b) \f[B]=>\f[R] b.toString(16).padStart(2, \(dq0\(dq))
    .join(\(dq\(dq); \f[I]// convert bytes to hex string\f[R]
  \f[B]return\f[R] hashHex;
}

digestMessage(text).then((digestHex) \f[B]=>\f[R] console.log(digestHex));
.EE
.SH SEE ALSO
.IP \(bu 2
Non\-cryptographic uses of SubtleCrypto
.IP \(bu 2
\c
.UR https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features/
Chromium secure origins specification
.UE \c
.IP \(bu 2
\c
.UR https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
FIPS 180\-4
.UE \c
\ specifies the SHA family of digest algorithms.
