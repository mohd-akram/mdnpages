.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "TouchEvent.touches" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TouchEvent.touches \- TouchEvent: touches property
.SH SYNOPSIS
\f[B]\f[CB]touches\f[B]\f[R] is a read\-only \f[CR]TouchList\f[R]
listing all the \f[CR]Touch\f[R] objects for touch points that are
currently in contact with the touch surface, regardless of whether or
not they\[cq]ve changed or what their target element was at
\f[CR]touchstart\f[R] time.
.PP
You can think of it as how many separate fingers are able to be
identified as touching the screen.
.RS
.PP
\f[B]Note:\f[R] Touches inside the array are not necessarily ordered by
order of occurrences (the i\-th element in the array being the i\-th
touch that happened).
You cannot assume a specific order.
To determine the order of occurrences of the touches, use the
\f[CR]touch\f[R] object IDs.
.RE
.SH VALUE
A \f[CR]TouchList\f[R] listing all the \f[CR]Touch\f[R] objects for
touch points that are still in contact with the touch surface,
regardless of whether or not they\[cq]ve changed or what their target
element was at \f[CR]touchstart\f[R] time.
.SH EXAMPLES
This example illustrates the \f[CR]TouchEvent\f[R] object\[cq]s
\f[CR]TouchEvent.touches\f[R] property.
The \f[CR]TouchEvent.touches\f[R] property is a \f[CR]TouchList\f[R]
object and containing a list of \f[CR]Touch\f[R] objects for every point
of contact currently touching the surface.
.PP
In following code snippet, the \f[CR]touchstart\f[R] event handler
checks the length of the \f[CR]TouchEvent.touches\f[R] list to determine
the number of touch points that were activated and then invokes
different handlers depending on the number of touch points.
.IP
.EX
someElement.addEventListener(
  \[dq]touchstart\[dq],
  (e) \f[B]=>\f[R] {
    \f[I]// Invoke the appropriate handler depending on the\f[R]
    \f[I]// number of touch points.\f[R]
    \f[B]switch\f[R] (e.touches.length) {
      \f[B]case\f[R] 1:
        handle_one_touch(e);
        \f[B]break\f[R];
      \f[B]case\f[R] 2:
        handle_two_touches(e);
        \f[B]break\f[R];
      \f[B]case\f[R] 3:
        handle_three_touches(e);
        \f[B]break\f[R];
      \f[B]default\f[R]:
        console.log(\[dq]Not supported\[dq]);
        \f[B]break\f[R];
    }
  },
  \f[B]false\f[R],
);
.EE
