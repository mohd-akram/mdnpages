.\" Automatically generated by Pandoc 3.4
.\"
.TH "WebGLRenderingContext.getActiveUniform" "JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.getActiveUniform \- WebGLRenderingContext:
getActiveUniform() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebGLRenderingContext.getActiveUniform()\f[B]\f[R] method
of the WebGL API returns a \f[CR]WebGLActiveInfo\f[R] object containing
size, type, and name of a uniform attribute.
It is generally used when querying unknown uniforms either for debugging
or generic library creation.
.SH SYNTAX
.IP
.EX
getActiveUniform(program, index)
.EE
.SS Parameters
.TP
\f[B]program\f[R]
A \f[CR]WebGLProgram\f[R] specifying the WebGL shader program from which
to obtain the uniform variable\[cq]s information.
.TP
\f[B]index\f[R]
A \f[CR]GLuint\f[R] specifying the index of the uniform attribute to
get.
This value is an index 0 to N \- 1 as returned by
\f[CR]gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\f[R].
.SS Return value
A \f[CR]WebGLActiveInfo\f[R] object describing the uniform.
.PP
The \f[CR]type\f[R] attribute of the return value will be one of the
following:
.IP \[bu] 2
\f[CR]gl.FLOAT\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_VEC2\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_VEC3\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_VEC4\f[R]
.IP \[bu] 2
\f[CR]gl.INT\f[R]
.IP \[bu] 2
\f[CR]gl.INT_VEC2\f[R]
.IP \[bu] 2
\f[CR]gl.INT_VEC3\f[R]
.IP \[bu] 2
\f[CR]gl.INT_VEC4\f[R]
.IP \[bu] 2
\f[CR]gl.BOOL\f[R]
.IP \[bu] 2
\f[CR]gl.BOOL_VEC2\f[R]
.IP \[bu] 2
\f[CR]gl.BOOL_VEC3\f[R]
.IP \[bu] 2
\f[CR]gl.BOOL_VEC4\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT2\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT3\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT4\f[R]
.IP \[bu] 2
\f[CR]gl.SAMPLER_2D\f[R]
.IP \[bu] 2
\f[CR]gl.SAMPLER_CUBE\f[R]
.IP \[bu] 2
When using a WebGL 2 context, the following values are possible
additionally:
.RS 2
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_VEC2\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_VEC3\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_VEC4\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT2x3\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT2x4\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT3x2\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT3x4\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT4x2\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT_MAT4x3\f[R]
.IP \[bu] 2
\f[CR]gl.SAMPLER_3D\f[R]
.IP \[bu] 2
\f[CR]gl.SAMPLER_2D_SHADOW\f[R]
.IP \[bu] 2
\f[CR]gl.SAMPLER_2D_ARRAY\f[R]
.IP \[bu] 2
\f[CR]gl.SAMPLER_2D_ARRAY_SHADOW\f[R]
.IP \[bu] 2
\f[CR]gl.SAMPLER_CUBE_SHADOW\f[R]
.IP \[bu] 2
\f[CR]gl.INT_SAMPLER_2D\f[R]
.IP \[bu] 2
\f[CR]gl.INT_SAMPLER_3D\f[R]
.IP \[bu] 2
\f[CR]gl.INT_SAMPLER_CUBE\f[R]
.IP \[bu] 2
\f[CR]gl.INT_SAMPLER_2D_ARRAY\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_SAMPLER_2D\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_SAMPLER_3D\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_SAMPLER_CUBE\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_SAMPLER_2D_ARRAY\f[R]
.RE
.PP
When \f[CR]gl.linkProgram\f[R] is called, WebGL creates a list of active
uniforms.
These are possible values of the \f[CR]name\f[R] attribute of return
values of \f[CR]getActiveUniform\f[R].
WebGL generates one or more entries in the list depending on the
declared type of the uniform in the shader:
.IP \[bu] 2
Single basic type: one entry with the name of the uniform.
E.g.
\f[CR]uniform vec4 a;\f[R] will result in \f[CR]a\f[R].
.IP \[bu] 2
Array of basic type: one entry with the name of the uniform suffixed
with \f[CR][0]\f[R].
E.g.
\f[CR]uniform vec4 b[];\f[R] will result in \f[CR]b[0]\f[R].
.IP \[bu] 2
Struct type: one entry for each member of the struct.
E.g.
\f[CR]uniform struct { float foo; vec4 bar; } c;\f[R] will result in
\f[CR]c.foo\f[R] and \f[CR]c.bar\f[R].
.IP \[bu] 2
Arrays of structs or arrays: each entry of the array will generate its
own entries.
E.g.
\f[CR]uniform struct { float foo; vec4 bar; } d[2];\f[R] will result in:
.RS 2
.IP \[bu] 2
\f[CR]d[0].foo\f[R]
.IP \[bu] 2
\f[CR]d[0].bar\f[R]
.IP \[bu] 2
\f[CR]d[1].foo\f[R]
.IP \[bu] 2
\f[CR]d[1].bar\f[R]
.RE
.IP \[bu] 2
Uniform blocks: one entry for each member.
If the uniform block has an instance name, the block name is prefixed.
E.g.
\f[CR]uniform Block { float foo; };\f[R] will result in \f[CR]foo\f[R],
and \f[CR]uniform Block { float bar; } e;\f[R] will result in
\f[CR]e.bar\f[R].
.PP
The \f[CR]size\f[R] attribute of the return value corresponds to the
length of the array for uniforms declared as arrays.
Otherwise, it is 1 (this includes interface blocks instanced with
arrays).
.SS Exceptions
.IP \[bu] 2
\f[CR]gl.INVALID_VALUE\f[R] is generated if the program
\f[CR]WebGLProgram\f[R] is invalid (not linked, deleted, etc.).
.IP \[bu] 2
\f[CR]gl.INVALID_VALUE\f[R] is generated if index is not in the range
[0, \f[CR]gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS)\f[R] \-
1].
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < numUniforms; ++i) {
  \f[B]const\f[R] info = gl.getActiveUniform(program, i);
  console.log(\[dq]name:\[dq], info.name, \[dq]type:\[dq], info.type, \[dq]size:\[dq], info.size);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLActiveInfo\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getUniformLocation()\f[R]
