.\" Automatically generated by Pandoc 3.4
.\"
.TH "Clipboard.readText" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clipboard.readText \- Clipboard: readText() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]readText()\f[B]\f[R] method of the \f[CR]Clipboard\f[R]
interface returns a \f[CR]Promise\f[R] which fulfils with a copy of the
textual contents of the system clipboard.
.RS
.PP
\f[B]Note:\f[R] To read non\-text contents from the clipboard, use the
\f[CR]read()\f[R] method instead.
You can write text to the clipboard using \f[CR]writeText()\f[R].
.RE
.SH SYNTAX
.IP
.EX
readText()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that resolves with a string containing the textual
contents of the clipboard.
.PP
Returns an empty string if the clipboard is empty, does not contain
text, or does not include a textual representation among the objects
representing the clipboard\[cq]s contents.
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if the access to read the clipboard is not allowed.
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if the clipboard indicates that it contains data that can be
represented as a text but is unable to provide a textual representation.
.SH SECURITY CONSIDERATIONS
Reading from the clipboard can only be done in a secure context.
.PP
Additional security requirements are covered in the Security
consideration section of the API overview topic.
.SH EXAMPLES
This example retrieves the textual contents of the clipboard and inserts
the returned text into a selected element\[cq]s contents.
.IP
.EX
\f[B]const\f[R] destination = document.getElementById(\[dq]outbox\[dq]);
destinationImage.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  navigator.clipboard
    .readText()
    .then((clipText) \f[B]=>\f[R] (destination.innerText = clipText));
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
.IP \[bu] 2
\f[CR]Clipboard.read()\f[R]
.IP \[bu] 2
\f[CR]Clipboard.writeText()\f[R]
.IP \[bu] 2
\f[CR]Clipboard.write()\f[R]
