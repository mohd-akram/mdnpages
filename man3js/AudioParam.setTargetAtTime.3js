'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "AUDIOPARAM.SETTARGETATTIME" "3JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioParam.setTargetAtTime \- AudioParam: setTargetAtTime() method
.SH SYNOPSIS
The \f[CR]setTargetAtTime()\f[R] method of the \f[CR]AudioParam\f[R]
interface schedules the start of a gradual change to the
\f[CR]AudioParam\f[R] value.
This is useful for decay or release portions of ADSR envelopes.
.SH SYNTAX
.IP
.EX
setTargetAtTime(target, startTime, timeConstant)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The value the parameter will start to transition towards at the given
start time.
.TP
\f[B]startTime\f[R]
The time that the exponential transition will begin, in the same time
coordinate system as \f[CR]AudioContext.currentTime\f[R].
If it is less than or equal to \f[CR]AudioContext.currentTime\f[R], the
parameter will start changing immediately.
.TP
\f[B]timeConstant\f[R]
The time\-constant value, given in seconds, of an exponential approach
to the target value.
The larger this value is, the slower the transition will be.
.SS Return value
A reference to this \f[CR]AudioParam\f[R] object.
Some older browser implementations of this interface return
\f[CR]undefined\f[R].
.SH DESCRIPTION
The change starts at the time specified in \f[CR]startTime\f[R] and
exponentially moves towards the value given by the \f[CR]target\f[R]
parameter.
The decay rate as defined by the \f[CR]timeConstant\f[R] parameter is
exponential; therefore the value will never reach \f[CR]target\f[R]
completely, but after each timestep of length \f[CR]timeConstant\f[R],
the value will have approached \f[CR]target\f[R] by another
1\-e\-1â‰ˆ63.2%1 \- e\(ha{\-1} %.
For the complete formula (which uses a first\-order linear continuous
time\-invariant system), check the \c
.UR https://webaudio.github.io/web-audio-api/#dom-audioparam-settargetattime
Web Audio specification
.UE \c
\&.
.PP
If you absolutely need to reach the target value by a specific time, you
can use \f[CR]AudioParam.exponentialRampToValueAtTime()\f[R].
However, for mathematical reasons, that method does not work if the
current value or the target value is \f[CR]0\f[R].
.SS Choosing a good \f[CR]timeConstant\f[R]
As mentioned above, the value changes exponentially, with each
\f[CR]timeConstant\f[R] bringing you another 63.2% toward the target
value.
You don\(cqt have to worry about reaching the target value; once you are
close enough, any further changes will be imperceptible to a human
listener.
.PP
Depending on your use case, getting 95% toward the target value may
already be enough; in that case, you could set \f[CR]timeConstant\f[R]
to one third of the desired duration.
.PP
For more details, check the following table on how the value changes
from 0% to 100% as the time progresses.
.PP
.TS
tab(@);
lw(19.0n) lw(51.0n).
T{
Time since \f[CR]startTime\f[R]
T}@T{
Value
T}
_
T{
\f[CR]0 * timeConstant\f[R]
T}@T{
0%
T}
T{
\f[CR]0.5 * timeConstant\f[R]
T}@T{
39.3%
T}
T{
\f[CR]1 * timeConstant\f[R]
T}@T{
63.2%
T}
T{
\f[CR]2 * timeConstant\f[R]
T}@T{
86.5%
T}
T{
\f[CR]3 * timeConstant\f[R]
T}@T{
95.0%
T}
T{
\f[CR]4 * timeConstant\f[R]
T}@T{
98.2%
T}
T{
\f[CR]5 * timeConstant\f[R]
T}@T{
99.3%
T}
T{
\f[CR]n * timeConstant\f[R]
T}@T{
1
T}
.TE
.PP
\ 1\-e\-n1 \- e\(ha{\-n} 
.SH EXAMPLES
In this example, we have a media source with two control buttons (see
the \c
.UR https://github.com/mdn/webaudio-examples/blob/main/audio-param/index.html
webaudio\-examples repo
.UE \c
\ for the source code, or \c
.UR https://mdn.github.io/webaudio-examples/audio-param/
view the example live
.UE \c
\&.)
When these buttons are pressed, \f[CR]setTargetAtTime()\f[R] is used to
fade the gain value up to 1.0, and down to 0, respectively, with the
effect starting after 1 second, and the length of time the effect lasts
being controlled by the timeConstant.
.IP
.EX
\f[I]// create audio context\f[R]
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[I]// set basic variables for example\f[R]
\f[B]const\f[R] myAudio = document.querySelector(\(dqaudio\(dq);

\f[B]const\f[R] atTimePlus = document.querySelector(\(dq.at\-time\-plus\(dq);
\f[B]const\f[R] atTimeMinus = document.querySelector(\(dq.at\-time\-minus\(dq);

\f[I]// Create a MediaElementAudioSourceNode\f[R]
\f[I]// Feed the HTMLMediaElement into it\f[R]
\f[B]const\f[R] source = audioCtx.createMediaElementSource(myAudio);

\f[I]// Create a gain node and set its gain value to 0.5\f[R]
\f[B]const\f[R] gainNode = audioCtx.createGain();
gainNode.gain.value = 0.5;
\f[B]let\f[R] currGain = gainNode.gain.value;

\f[I]// connect the AudioBufferSourceNode to the gainNode\f[R]
\f[I]// and the gainNode to the destination\f[R]
source.connect(gainNode);
gainNode.connect(audioCtx.destination);

\f[I]// set buttons to do something onclick\f[R]
atTimePlus.onclick = () \f[B]=>\f[R] {
  currGain = 1.0;
  gainNode.gain.setTargetAtTime(1.0, audioCtx.currentTime + 1, 0.5);
};

atTimeMinus.onclick = () \f[B]=>\f[R] {
  currGain = 0;
  gainNode.gain.setTargetAtTime(0, audioCtx.currentTime + 1, 0.5);
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
