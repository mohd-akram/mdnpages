.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "MediaSource.endOfStream" "JS" "November 9, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaSource.endOfStream \- MediaSource: endOfStream() method
.SH SYNOPSIS
The \f[B]\f[CB]endOfStream()\f[B]\f[R] method of the
\f[CR]MediaSource\f[R] interface signals the end of the stream.
.SH SYNTAX
.IP
.EX
endOfStream()
endOfStream(endOfStreamError)
.EE
.SS Parameters
.TP
\f[B]endOfStreamError\f[R] \f[I](optional)\f[R]
A string representing an error to throw when the end of the stream is
reached.
The possible values are:
.RS
.TP
\f[B]network\f[R]
Terminates playback and signals that a network error has occurred.
This can be used create a custom error handler related to media streams.
For example, you might have a function that handles media chunk
requests, separate from other network requests.
When you make a \f[CR]fetch()\f[R] request for a media chunk and receive
a network error, you might want to call
\f[CR]endOfStream(\[aq]network\[aq])\f[R], display a descriptive message
in the UI, and maybe retry the network request immediately or wait until
the network is back up (via some kind of polling.)
.TP
\f[B]decode\f[R]
Terminates playback and signals that a decoding error has occurred.
This can be used to indicate that a parsing error has occurred while
fetching media data; maybe the data is corrupt, or is encoded using a
codec that the browser doesn\[cq]t know how to decode.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]MediaSource.readyState\f[R] is not equal to
\f[CR]open\f[R], or one or more of the \f[CR]SourceBuffer\f[R] objects
in \f[CR]MediaSource.sourceBuffers\f[R] are being updated (i.e.\ their
\f[CR]SourceBuffer.updating\f[R] property is \f[CR]true\f[R].)
.SH EXAMPLES
The following snippet is from a simple example written by Nick
Desaulniers (\c
.UR https://nickdesaulniers.github.io/netfix/demo/bufferAll.html
view the full demo live
.UE \c
, or \c
.UR https://github.com/nickdesaulniers/netfix/blob/gh-pages/demo/bufferAll.html
download the source
.UE \c
\ for further investigation).
The function \f[CR]getMediaSource()\f[R], which is not defined here,
returns a \f[CR]MediaSource\f[R].
.IP
.EX
\f[B]const\f[R] assetURL = \[dq]frag_bunny.mp4\[dq];
\f[I]// Need to be specific for Blink regarding codecs\f[R]
\f[I]// ./mp4info frag_bunny.mp4 | grep Codec\f[R]
\f[B]const\f[R] mimeCodec = \[aq]video/mp4; codecs=\[dq]avc1.42E01E, mp4a.40.2\[dq]\[aq];

\f[B]let\f[R] mediaSource;

\f[B]if\f[R] (\[dq]MediaSource\[dq] \f[B]in\f[R] window && MediaSource.isTypeSupported(mimeCodec)) {
  mediaSource = getMediaSource();
  console.log(mediaSource.readyState); \f[I]// closed\f[R]
  video.src = URL.createObjectURL(mediaSource);
  mediaSource.addEventListener(\[dq]sourceopen\[dq], sourceOpen);
} \f[B]else\f[R] {
  console.error(\[dq]Unsupported MIME type or codec: \[dq], mimeCodec);
}

\f[B]function\f[R] sourceOpen() {
  console.log(\f[B]this\f[R].readyState); \f[I]// open\f[R]
  \f[B]const\f[R] sourceBuffer = mediaSource.addSourceBuffer(mimeCodec);
  fetchAB(assetURL, (buf) \f[B]=>\f[R] {
    sourceBuffer.addEventListener(\[dq]updateend\[dq], () \f[B]=>\f[R] {
      mediaSource.endOfStream();
      video.play();
      console.log(mediaSource.readyState); \f[I]// ended\f[R]
    });
    sourceBuffer.appendBuffer(buf);
  });
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]SourceBuffer\f[R]
.IP \[bu] 2
\f[CR]SourceBufferList\f[R]
