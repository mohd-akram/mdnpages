.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "OffscreenCanvasRenderingContext2D" "JS" "February 8, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OffscreenCanvasRenderingContext2D \- OffscreenCanvasRenderingContext2D
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]OffscreenCanvasRenderingContext2D\f[B]\f[R] interface is
a \f[CR]CanvasRenderingContext2D\f[R] rendering context for drawing to
the bitmap of an \f[CR]OffscreenCanvas\f[R] object.
It is similar to the \f[CR]CanvasRenderingContext2D\f[R] object, with
the following differences:
.IP \[bu] 2
there is no support for user\-interface features
(\f[CR]drawFocusIfNeeded\f[R])
.IP \[bu] 2
its \f[CR]canvas\f[R] attribute refers to an \f[CR]OffscreenCanvas\f[R]
object rather than a \f[CR]<canvas>\f[R] element
.IP \[bu] 2
the bitmap for the placeholder \f[CR]<canvas>\f[R] element belonging to
the \f[CR]OffscreenCanvas\f[R] object is updated during the rendering
update of the \f[CR]Window\f[R] or \f[CR]Worker\f[R] that owns the
\f[CR]OffscreenCanvas\f[R]
.SH EXAMPLE
The following code snippet creates a \f[CR]Worker\f[R] object using the
\f[CR]Worker()\f[R] constructor.
The \f[CR]transferControlToOffscreen()\f[R] method is used to get an
\f[CR]OffscreenCanvas\f[R] object from the \f[CR]<canvas>\f[R] element
so it can be transferred to the worker:
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] offscreen = canvas.transferControlToOffscreen();
\f[B]const\f[R] worker = \f[B]new\f[R] Worker(\[dq]worker.js\[dq]);
worker.postMessage({ canvas: offscreen }, [offscreen]);
.EE
.PP
In the worker thread, we can use the
\f[CR]OffscreenCanvasRenderingContext2D\f[R] to draw to the bitmap of
the \f[CR]OffscreenCanvas\f[R] object:
.IP
.EX
onmessage = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] canvas = event.data.canvas;
  \f[B]const\f[R] offCtx = canvas.getContext(\[dq]2d\[dq]);
  \f[I]// draw to the offscreen canvas context\f[R]
  offCtx.fillStyle = \[dq]red\[dq];
  offCtx.fillRect(0, 0, 100, 100);
};
.EE
.PP
For a full example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/web-workers/offscreen-canvas-worker
OffscreenCanvas worker example
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/web-workers/offscreen-canvas-worker/
run OffscreenCanvas worker
.UE \c
).
.SH ADDITIONAL METHODS
The following method is new to the
\f[CR]OffscreenCanvasRenderingContext2D\f[R] interface and does not
exist in the \f[CR]CanvasRenderingContext2D\f[R] interface:
.TP
\f[B]commit()\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Pushes the rendered image to the context\[cq]s
\f[CR]OffscreenCanvas\f[R] object\[cq]s placeholder \f[CR]<canvas>\f[R]
element.
.SH UNSUPPORTED FEATURES
The following user interface method is \f[B]not supported\f[R] by the
\f[CR]OffscreenCanvasRenderingContext2D\f[R] interface:
.TP
\f[B]CanvasRenderingContext2D.drawFocusIfNeeded()\f[R]
If a given element is focused, this method draws a focus ring around the
current path.
.SH INHERITED PROPERTIES AND METHODS
\f[I]The following properties and methods are inherited from
\f[CI]CanvasRenderingContext2D\f[I].
They have the same usage as in \f[CI]CanvasRenderingContext2D\f[I]\f[R]
.SS Context
.TP
\f[B]CanvasRenderingContext2D.isContextLost()\f[R]
Returns \f[CR]true\f[R] if the rendering context was lost.
.SS Drawing rectangles
.TP
\f[B]CanvasRenderingContext2D.clearRect()\f[R]
Sets all pixels in the rectangle defined by starting point \f[I](x,
y)\f[R] and size \f[I](width, height)\f[R] to transparent black, erasing
any previously drawn content.
.TP
\f[B]CanvasRenderingContext2D.fillRect()\f[R]
Draws a filled rectangle at \f[I](x, y)\f[R] position whose size is
determined by \f[I]width\f[R] and \f[I]height\f[R].
.TP
\f[B]CanvasRenderingContext2D.strokeRect()\f[R]
Paints a rectangle which has a starting point at \f[I](x, y)\f[R] and
has a \f[I]w\f[R] width and an \f[I]h\f[R] height onto the canvas, using
the current stroke style.
.SS Drawing text
The following methods and properties control drawing text.
See also the \f[CR]TextMetrics\f[R] object for text properties.
.TP
\f[B]CanvasRenderingContext2D.fillText()\f[R]
Draws (fills) a given text at the given (x, y) position.
.TP
\f[B]CanvasRenderingContext2D.strokeText()\f[R]
Draws (strokes) a given text at the given (x, y) position.
.TP
\f[B]CanvasRenderingContext2D.measureText()\f[R]
Returns a \f[CR]TextMetrics\f[R] object.
.TP
\f[B]CanvasRenderingContext2D.textRendering\f[R]
Text rendering.
Possible values: \f[CR]auto\f[R] (default), \f[CR]optimizeSpeed\f[R],
\f[CR]optimizeLegibility\f[R],
.SS Line styles
The following methods and properties control how lines are drawn.
.TP
\f[B]CanvasRenderingContext2D.lineWidth\f[R]
Width of lines.
Default \f[CR]1.0\f[R].
.TP
\f[B]CanvasRenderingContext2D.lineCap\f[R]
Type of endings on the end of lines.
Possible values: \f[CR]butt\f[R] (default), \f[CR]round\f[R],
\f[CR]square\f[R].
.TP
\f[B]CanvasRenderingContext2D.lineJoin\f[R]
Defines the type of corners where two lines meet.
Possible values: \f[CR]round\f[R], \f[CR]bevel\f[R], \f[CR]miter\f[R]
(default).
.TP
\f[B]CanvasRenderingContext2D.miterLimit\f[R]
Miter limit ratio.
Default \f[CR]10\f[R].
.TP
\f[B]CanvasRenderingContext2D.getLineDash()\f[R]
Returns the current line dash pattern array containing an even number of
non\-negative numbers.
.TP
\f[B]CanvasRenderingContext2D.setLineDash()\f[R]
Sets the current line dash pattern.
.TP
\f[B]CanvasRenderingContext2D.lineDashOffset\f[R]
Specifies where to start a dash array on a line.
.SS Text styles
The following properties control how text is laid out.
.TP
\f[B]CanvasRenderingContext2D.font\f[R]
Font setting.
Default value \f[CR]10px sans\-serif\f[R].
.TP
\f[B]CanvasRenderingContext2D.textAlign\f[R]
Text alignment setting.
Possible values: \f[CR]start\f[R] (default), \f[CR]end\f[R],
\f[CR]left\f[R], \f[CR]right\f[R], \f[CR]center\f[R].
.TP
\f[B]CanvasRenderingContext2D.textBaseline\f[R]
Baseline alignment setting.
Possible values: \f[CR]top\f[R], \f[CR]hanging\f[R], \f[CR]middle\f[R],
\f[CR]alphabetic\f[R] (default), \f[CR]ideographic\f[R],
\f[CR]bottom\f[R].
.TP
\f[B]CanvasRenderingContext2D.direction\f[R]
Directionality.
Possible values: \f[CR]ltr\f[R], \f[CR]rtl\f[R], \f[CR]inherit\f[R]
(default).
.TP
\f[B]CanvasRenderingContext2D.letterSpacing\f[R]
Letter spacing.
Default: \f[CR]0px\f[R].
.TP
\f[B]CanvasRenderingContext2D.fontKerning\f[R]
Font kerning.
Possible values: \f[CR]auto\f[R] (default), \f[CR]normal\f[R],
\f[CR]none\f[R].
.TP
\f[B]CanvasRenderingContext2D.fontStretch\f[R]
Font stretch.
Possible values: \f[CR]ultra\-condensed\f[R],
\f[CR]extra\-condensed\f[R], \f[CR]condensed\f[R],
\f[CR]semi\-condensed\f[R], \f[CR]normal\f[R] (default),
\f[CR]semi\-expanded\f[R], \f[CR]expanded\f[R],
\f[CR]extra\-expanded\f[R], \f[CR]ultra\-expanded\f[R].
.TP
\f[B]CanvasRenderingContext2D.fontVariantCaps\f[R]
Font variant caps.
Possible values: \f[CR]normal\f[R] (default), \f[CR]small\-caps\f[R],
\f[CR]all\-small\-caps\f[R], \f[CR]petite\-caps\f[R],
\f[CR]all\-petite\-caps\f[R], \f[CR]unicase\f[R],
\f[CR]titling\-caps\f[R].
.TP
\f[B]CanvasRenderingContext2D.textRendering\f[R] \f[I](experimental)\f[R]
Text rendering.
Possible values: \f[CR]auto\f[R] (default), \f[CR]optimizeSpeed\f[R],
\f[CR]optimizeLegibility\f[R], \f[CR]geometricPrecision\f[R].
.TP
\f[B]CanvasRenderingContext2D.wordSpacing\f[R]
Word spacing.
Default value: \f[CR]0px\f[R]
.SS Fill and stroke styles
Fill styling is used for colors and styles inside shapes and stroke
styling is used for the lines around shapes.
.TP
\f[B]CanvasRenderingContext2D.fillStyle\f[R]
Color or style to use inside shapes.
Default \f[CR]#000\f[R] (black).
.TP
\f[B]CanvasRenderingContext2D.strokeStyle\f[R]
Color or style to use for the lines around shapes.
Default \f[CR]#000\f[R] (black).
.SS Gradients and patterns
.TP
\f[B]CanvasRenderingContext2D.createConicGradient()\f[R]
Creates a conic gradient around a point given by coordinates represented
by the parameters.
.TP
\f[B]CanvasRenderingContext2D.createLinearGradient()\f[R]
Creates a linear gradient along the line given by the coordinates
represented by the parameters.
.TP
\f[B]CanvasRenderingContext2D.createRadialGradient()\f[R]
Creates a radial gradient given by the coordinates of the two circles
represented by the parameters.
.TP
\f[B]CanvasRenderingContext2D.createPattern()\f[R]
Creates a pattern using the specified image.
It repeats the source in the directions specified by the repetition
argument.
This method returns a \f[CR]CanvasPattern\f[R].
.SS Shadows
.TP
\f[B]CanvasRenderingContext2D.shadowBlur\f[R]
Specifies the blurring effect.
Default: \f[CR]0\f[R].
.TP
\f[B]CanvasRenderingContext2D.shadowColor\f[R]
Color of the shadow.
Default: fully\-transparent black.
.TP
\f[B]CanvasRenderingContext2D.shadowOffsetX\f[R]
Horizontal distance the shadow will be offset.
Default: \f[CR]0\f[R].
.TP
\f[B]CanvasRenderingContext2D.shadowOffsetY\f[R]
Vertical distance the shadow will be offset.
Default: \f[CR]0\f[R].
.SS Paths
The following methods can be used to manipulate paths of objects.
.TP
\f[B]CanvasRenderingContext2D.beginPath()\f[R]
Starts a new path by emptying the list of sub\-paths.
Call this method when you want to create a new path.
.TP
\f[B]CanvasRenderingContext2D.closePath()\f[R]
Causes the point of the pen to move back to the start of the current
sub\-path.
It tries to draw a straight line from the current point to the start.
If the shape has already been closed or has only one point, this
function does nothing.
.TP
\f[B]CanvasRenderingContext2D.moveTo()\f[R]
Moves the starting point of a new sub\-path to the (x, y) coordinates.
.TP
\f[B]CanvasRenderingContext2D.lineTo()\f[R]
Connects the last point in the current sub\-path to the specified (x, y)
coordinates with a straight line.
.TP
\f[B]CanvasRenderingContext2D.bezierCurveTo()\f[R]
Adds a cubic BÃ©zier curve to the current path.
.TP
\f[B]CanvasRenderingContext2D.quadraticCurveTo()\f[R]
Adds a quadratic BÃ©zier curve to the current path.
.TP
\f[B]CanvasRenderingContext2D.arc()\f[R]
Adds a circular arc to the current path.
.TP
\f[B]CanvasRenderingContext2D.arcTo()\f[R]
Adds an arc to the current path with the given control points and
radius, connected to the previous point by a straight line.
.TP
\f[B]CanvasRenderingContext2D.ellipse()\f[R]
Adds an elliptical arc to the current path.
.TP
\f[B]CanvasRenderingContext2D.rect()\f[R]
Creates a path for a rectangle at position (x, y) with a size that is
determined by \f[I]width\f[R] and \f[I]height\f[R].
.TP
\f[B]CanvasRenderingContext2D.roundRect()\f[R]
Creates a path for a rectangle with rounded corners at position (x, y)
with a size that is determined by \f[I]width\f[R] and \f[I]height\f[R]
and radii determined by \f[I]radii\f[R].
.SS Drawing paths
.TP
\f[B]CanvasRenderingContext2D.fill()\f[R]
Fills the current sub\-paths with the current fill style.
.TP
\f[B]CanvasRenderingContext2D.stroke()\f[R]
Strokes the current sub\-paths with the current stroke style.
.TP
\f[B]CanvasRenderingContext2D.clip()\f[R]
Creates a clipping path from the current sub\-paths.
Everything drawn after \f[CR]clip()\f[R] is called appears inside the
clipping path only.
For an example, see Clipping paths in the Canvas tutorial.
.TP
\f[B]CanvasRenderingContext2D.isPointInPath()\f[R]
Reports whether or not the specified point is contained in the current
path.
.TP
\f[B]CanvasRenderingContext2D.isPointInStroke()\f[R]
Reports whether or not the specified point is inside the area contained
by the stroking of a path.
.SS Transformations
Objects in the \f[CR]CanvasRenderingContext2D\f[R] rendering context
have a current transformation matrix and methods to manipulate it.
The transformation matrix is applied when creating the current default
path, painting text, shapes and \f[CR]Path2D\f[R] objects.
The methods listed below remain for historical and compatibility reasons
as \f[CR]DOMMatrix\f[R] objects are used in most parts of the API
nowadays and will be used in the future instead.
.TP
\f[B]CanvasRenderingContext2D.getTransform()\f[R]
Retrieves the current transformation matrix being applied to the
context.
.TP
\f[B]CanvasRenderingContext2D.rotate()\f[R]
Adds a rotation to the transformation matrix.
The angle argument represents a clockwise rotation angle and is
expressed in radians.
.TP
\f[B]CanvasRenderingContext2D.scale()\f[R]
Adds a scaling transformation to the canvas units by x horizontally and
by y vertically.
.TP
\f[B]CanvasRenderingContext2D.translate()\f[R]
Adds a translation transformation by moving the canvas and its origin x
horizontally and y vertically on the grid.
.TP
\f[B]CanvasRenderingContext2D.transform()\f[R]
Multiplies the current transformation matrix with the matrix described
by its arguments.
.TP
\f[B]CanvasRenderingContext2D.setTransform()\f[R]
Resets the current transform to the identity matrix, and then invokes
the \f[CR]transform()\f[R] method with the same arguments.
.TP
\f[B]CanvasRenderingContext2D.resetTransform()\f[R]
Resets the current transform by the identity matrix.
.SS Compositing
.TP
\f[B]CanvasRenderingContext2D.globalAlpha\f[R]
Alpha value that is applied to shapes and images before they are
composited onto the canvas.
Default \f[CR]1.0\f[R] (opaque).
.TP
\f[B]CanvasRenderingContext2D.globalCompositeOperation\f[R]
With \f[CR]globalAlpha\f[R] applied this sets how shapes and images are
drawn onto the existing bitmap.
.SS Drawing images
.TP
\f[B]CanvasRenderingContext2D.drawImage()\f[R]
Draws the specified image.
This method is available in multiple formats, providing a great deal of
flexibility in its use.
.SS Pixel manipulation
See also the \f[CR]ImageData\f[R] object.
.TP
\f[B]CanvasRenderingContext2D.createImageData()\f[R]
Creates a new, blank \f[CR]ImageData\f[R] object with the specified
dimensions.
All of the pixels in the new object are transparent black.
.TP
\f[B]CanvasRenderingContext2D.getImageData()\f[R]
Returns an \f[CR]ImageData\f[R] object representing the underlying pixel
data for the area of the canvas denoted by the rectangle which starts at
\f[I](sx, sy)\f[R] and has an \f[I]sw\f[R] width and \f[I]sh\f[R]
height.
.TP
\f[B]CanvasRenderingContext2D.putImageData()\f[R]
Paints data from the given \f[CR]ImageData\f[R] object onto the bitmap.
If a dirty rectangle is provided, only the pixels from that rectangle
are painted.
.SS Image smoothing
.TP
\f[B]CanvasRenderingContext2D.imageSmoothingEnabled\f[R]
Image smoothing mode; if disabled, images will not be smoothed if
scaled.
.TP
\f[B]CanvasRenderingContext2D.imageSmoothingQuality\f[R]
Allows you to set the quality of image smoothing.
.SS The canvas state
The \f[CR]CanvasRenderingContext2D\f[R] rendering context contains a
variety of drawing style states (attributes for line styles, fill
styles, shadow styles, text styles).
The following methods help you to work with that state:
.TP
\f[B]CanvasRenderingContext2D.save()\f[R]
Saves the current drawing style state using a stack so you can revert
any change you make to it using \f[CR]restore()\f[R].
.TP
\f[B]CanvasRenderingContext2D.restore()\f[R]
Restores the drawing style state to the last element on the `state
stack' saved by \f[CR]save()\f[R].
.TP
\f[B]CanvasRenderingContext2D.canvas\f[R]
A read\-only reference to an \f[CR]OffscreenCanvas\f[R] object.
.TP
\f[B]CanvasRenderingContext2D.getContextAttributes()\f[R] \f[I](experimental)\f[R]
Returns an object containing the actual context attributes.
Context attributes can be requested with
\f[CR]HTMLCanvasElement.getContext()\f[R].
.TP
\f[B]CanvasRenderingContext2D.reset()\f[R]
Resets the current drawing style state to the default values.
.SS Filters
.TP
\f[B]CanvasRenderingContext2D.filter\f[R]
Applies a CSS or SVG filter to the canvas; e.g., to change its
brightness or blurriness.
.SH UNSUPPORTED PROPERTIES AND METHODS
The following method is \f[B]not supported\f[R] in the
\f[CR]OffscreenCanvasRenderingContext2D\f[R] interface:
.TP
\f[B]CanvasRenderingContext2D.drawFocusIfNeeded()\f[R]
If a given element is focused, this method draws a focus ring around the
current path.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]HTMLCanvasElement\f[R]
.IP \[bu] 2
\f[CR]<canvas>\f[R]
