.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CanvasRenderingContext2D.drawFocusIfNeeded" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.drawFocusIfNeeded \- CanvasRenderingContext2D:
drawFocusIfNeeded() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.drawFocusIfNeeded()\f[B]\f[R]
method of the Canvas 2D API draws a focus ring around the current or
given path, if the specified element is focused.
.SH SYNTAX
.IP
.EX
drawFocusIfNeeded(element)
drawFocusIfNeeded(path, element)
.EE
.SS Parameters
.TP
\f[B]element\f[R]
The element to check whether it is focused or not.
.TP
\f[B]path\f[R]
A \f[CR]Path2D\f[R] path to use.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Managing button focus
This example draws two buttons on a canvas.
The \f[CR]drawFocusIfNeeded()\f[R] method is used to draw a focus ring
when appropriate.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]>
  <\f[B]button\f[R] id=\[dq]button1\[dq]>Continue</\f[B]button\f[R]>
  <\f[B]button\f[R] id=\[dq]button2\[dq]>Quit</\f[B]button\f[R]>
</\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
\f[B]const\f[R] button1 = document.getElementById(\[dq]button1\[dq]);
\f[B]const\f[R] button2 = document.getElementById(\[dq]button2\[dq]);

document.addEventListener(\[dq]focus\[dq], redraw, \f[B]true\f[R]);
document.addEventListener(\[dq]blur\[dq], redraw, \f[B]true\f[R]);
canvas.addEventListener(\[dq]click\[dq], handleClick, \f[B]false\f[R]);
redraw();

\f[B]function\f[R] redraw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawButton(button1, 20, 20);
  drawButton(button2, 20, 80);
}

\f[B]function\f[R] handleClick(e) {
  \f[I]// Calculate click coordinates\f[R]
  \f[B]const\f[R] x = e.clientX \- canvas.offsetLeft;
  \f[B]const\f[R] y = e.clientY \- canvas.offsetTop;

  \f[I]// Focus button1, if appropriate\f[R]
  drawButton(button1, 20, 20);
  \f[B]if\f[R] (ctx.isPointInPath(x, y)) {
    button1.focus();
  }

  \f[I]// Focus button2, if appropriate\f[R]
  drawButton(button2, 20, 80);
  \f[B]if\f[R] (ctx.isPointInPath(x, y)) {
    button2.focus();
  }
}

\f[B]function\f[R] drawButton(el, x, y) {
  \f[B]const\f[R] active = document.activeElement === el;
  \f[B]const\f[R] width = 150;
  \f[B]const\f[R] height = 40;

  \f[I]// Button background\f[R]
  ctx.fillStyle = active ? \[dq]pink\[dq] : \[dq]lightgray\[dq];
  ctx.fillRect(x, y, width, height);

  \f[I]// Button text\f[R]
  ctx.font = \[dq]15px sans\-serif\[dq];
  ctx.textAlign = \[dq]center\[dq];
  ctx.textBaseline = \[dq]middle\[dq];
  ctx.fillStyle = active ? \[dq]blue\[dq] : \[dq]black\[dq];
  ctx.fillText(el.textContent, x + width / 2, y + height / 2);

  \f[I]// Define clickable area\f[R]
  ctx.beginPath();
  ctx.rect(x, y, width, height);

  \f[I]// Draw focus ring, if appropriate\f[R]
  ctx.drawFocusIfNeeded(el);
}
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
