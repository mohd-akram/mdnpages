.\" Automatically generated by Pandoc 3.4
.\"
.TH "Iterator.forEach" "JS" "November 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Iterator.forEach \- Iterator.prototype.forEach()
.SH SYNOPSIS
The \f[B]\f[CB]forEach()\f[B]\f[R] method of \f[CR]Iterator\f[R]
instances is similar to \f[CR]Array.prototype.forEach()\f[R]: it
executes a provided function once for each element produced by the
iterator.
.SH SYNTAX
.IP
.EX
forEach(callbackFn)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element produced by the iterator.
Its return value is discarded.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed.
.TP
\f[B]index\f[R]
The index of the current element being processed.
.RE
.SS Return value
\f[CR]undefined\f[R].
.SH DESCRIPTION
\f[CR]forEach()\f[R] iterates the iterator and invokes the
\f[CR]callbackFn\f[R] function once for each element.
Unlike most other iterator helper methods, it does not work with
infinite iterators, because it is not lazy.
.SH EXAMPLES
.SS Using forEach()
.IP
.EX
\f[B]new\f[R] Set([1, 2, 3]).values().forEach((v) \f[B]=>\f[R] console.log(v));

\f[I]// Logs:\f[R]
\f[I]// 1\f[R]
\f[I]// 2\f[R]
\f[I]// 3\f[R]
.EE
.PP
This is equivalent to:
.IP
.EX
\f[B]for\f[R] (\f[B]const\f[R] v \f[B]of\f[R] \f[B]new\f[R] Set([1, 2, 3]).values()) {
  console.log(v);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#iterator-helpers
Polyfill of \f[CR]Iterator.prototype.forEach\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Iterator\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.map()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.filter()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.every()\f[R]
.IP \[bu] 2
\f[CR]Iterator.prototype.some()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.forEach()\f[R]
