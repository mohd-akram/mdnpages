.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Math.sign" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Math.sign \- Math.sign()
.SH SYNOPSIS
The \f[B]\f[CB]Math.sign()\f[B]\f[R] static method returns 1 or \-1,
indicating the sign of the number passed as argument.
If the input is 0 or \-0, it will be returned as\-is.
.IP
.EX
console.log(Math.sign(3));
\f[I]// Expected output: 1\f[R]

console.log(Math.sign(\-3));
\f[I]// Expected output: \-1\f[R]

console.log(Math.sign(0));
\f[I]// Expected output: 0\f[R]

console.log(Math.sign(\[dq]\-3\[dq]));
\f[I]// Expected output: \-1\f[R]
.EE
.SH SYNTAX
.IP
.EX
Math.sign(x)
.EE
.SS Parameters
.TP
\f[B]x\f[R]
A number.
.SS Return value
A number representing the sign of \f[CR]x\f[R]:
.IP \[bu] 2
If \f[CR]x\f[R] is positive, returns \f[CR]1\f[R].
.IP \[bu] 2
If \f[CR]x\f[R] is negative, returns \f[CR]\-1\f[R].
.IP \[bu] 2
If \f[CR]x\f[R] is positive zero, returns \f[CR]0\f[R].
.IP \[bu] 2
If \f[CR]x\f[R] is negative zero, returns \f[CR]\-0\f[R].
.IP \[bu] 2
Otherwise, returns \f[CR]NaN\f[R].
.SH DESCRIPTION
Because \f[CR]sign()\f[R] is a static method of \f[CR]Math\f[R], you
always use it as \f[CR]Math.sign()\f[R], rather than as a method of a
\f[CR]Math\f[R] object you created (\f[CR]Math\f[R] is not a
constructor).
.SH EXAMPLES
.SS Using Math.sign()
.IP
.EX
Math.sign(3); \f[I]// 1\f[R]
Math.sign(\-3); \f[I]// \-1\f[R]
Math.sign(\[dq]\-3\[dq]); \f[I]// \-1\f[R]
Math.sign(0); \f[I]// 0\f[R]
Math.sign(\-0); \f[I]// \-0\f[R]
Math.sign(\f[B]NaN\f[R]); \f[I]// NaN\f[R]
Math.sign(\[dq]foo\[dq]); \f[I]// NaN\f[R]
Math.sign(); \f[I]// NaN\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-math
Polyfill of \f[CR]Math.sign\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Math.abs()\f[R]
.IP \[bu] 2
\f[CR]Math.ceil()\f[R]
.IP \[bu] 2
\f[CR]Math.floor()\f[R]
.IP \[bu] 2
\f[CR]Math.round()\f[R]
.IP \[bu] 2
\f[CR]Math.trunc()\f[R]
