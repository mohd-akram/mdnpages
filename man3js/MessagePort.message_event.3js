.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MessagePort.message_event" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MessagePort.message_event \- MessagePort: message event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]message\f[B]\f[R] event is fired on a
\f[CR]MessagePort\f[R] object when a message arrives on that channel.
.PP
This event is not cancellable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {});

onmessage = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
Suppose a script creates a \f[CR]MessageChannel\f[R] and sends one of
the ports to a different browsing context, such as another
\f[CR]<iframe>\f[R], using code like this:
.IP
.EX
\f[B]const\f[R] channel = \f[B]new\f[R] MessageChannel();
\f[B]const\f[R] myPort = channel.port1;
\f[B]const\f[R] targetFrame = window.top.frames[1];
\f[B]const\f[R] targetOrigin = \[dq]https://example.org\[dq];

\f[B]const\f[R] messageControl = document.querySelector(\[dq]#message\[dq]);
\f[B]const\f[R] channelMessageButton = document.querySelector(\[dq]#channel\-message\[dq]);

channelMessageButton.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  myPort.postMessage(messageControl.value);
});

targetFrame.postMessage(\[dq]init\[dq], targetOrigin, [channel.port2]);
.EE
.PP
The target can receive the port and start listening for messages on it
using code like this:
.IP
.EX
window.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] myPort = event.ports[0];

  myPort.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
    received.textContent = event.data;
  });

  myPort.start();
});
.EE
.PP
Note that the listener must call \f[CR]MessagePort.start()\f[R] before
any messages will be delivered to this port.
This is only needed when using the \f[CR]addEventListener()\f[R] method:
if the receiver uses \f[CR]onmessage\f[R] instead, \f[CR]start()\f[R] is
called implicitly:
.IP
.EX
window.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] myPort = event.ports[0];

  myPort.onmessage = (event) \f[B]=>\f[R] {
    received.textContent = event.data;
  };
});
.EE
.SH SEE ALSO
.IP \[bu] 2
Related events: \f[CR]messageerror\f[R].
.IP \[bu] 2
Using channel messaging
