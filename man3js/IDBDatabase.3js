.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "IDBDatabase" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBDatabase \- IDBDatabase
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]IDBDatabase\f[B]\f[R] interface of the IndexedDB API
provides a connection to a database; you can use an
\f[CR]IDBDatabase\f[R] object to open a transaction on your database
then create, manipulate, and delete objects (data) in that database.
The interface provides the only way to get and manage versions of the
database.
.RS
.PP
\f[B]Note:\f[R] Everything you do in IndexedDB always happens in the
context of a transaction, representing interactions with data in the
database.
All objects in IndexedDB \[em] including object stores, indexes, and
cursors \[em] are tied to a particular transaction.
Thus, you cannot execute commands, access data, or open anything outside
of a transaction.
.RE
.SH INSTANCE PROPERTIES
.TP
\f[B]IDBDatabase.name\f[R] \f[I](read\-only)\f[R]
A string that contains the name of the connected database.
.TP
\f[B]IDBDatabase.version\f[R] \f[I](read\-only)\f[R]
A 64\-bit integer that contains the version of the connected database.
When a database is first created, this attribute is an empty string.
.TP
\f[B]IDBDatabase.objectStoreNames\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMStringList\f[R] that contains a list of the names of the
object stores currently in the connected database.
.SH INSTANCE METHODS
Inherits from: EventTarget
.TP
\f[B]IDBDatabase.close()\f[R]
Returns immediately and closes the connection to a database in a
separate thread.
.TP
\f[B]IDBDatabase.createObjectStore()\f[R]
Creates and returns a new object store or index.
.TP
\f[B]IDBDatabase.deleteObjectStore()\f[R]
Destroys the object store with the given name in the connected database,
along with any indexes that reference it.
.TP
\f[B]IDBDatabase.transaction()\f[R]
Immediately returns a transaction object (\f[CR]IDBTransaction\f[R])
containing the \f[CR]IDBTransaction.objectStore\f[R] method, which you
can use to access your object store.
Runs in a separate thread.
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]close\f[R]
An event fired when the database connection is unexpectedly closed.
.TP
\f[B]versionchange\f[R]
An event fired when a database structure change was requested.
.PP
The following events are available to \f[CR]IDBDatabase\f[R] via event
bubbling from \f[CR]IDBTransaction\f[R]:
.TP
\f[B]IDBTransaction\f[R] \f[B]abort\f[R]
An event fired when a transaction is aborted.
.TP
\f[B]IDBTransaction\f[R] \f[B]error\f[R]
An event fired when a request returns an error and the event bubbles up
to the connection object.
.SH EXAMPLE
In the following code snippet, we open a database asynchronously
(\f[CR]IDBFactory\f[R]), handle success and error cases, and create a
new object store in the case that an upgrade is needed
(\f[CR]IDBDatabase\f[R]).
For a complete working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

\f[I]// these two event handlers act on the IDBDatabase object,\f[R]
\f[I]// when the database is opened successfully, or not\f[R]
DBOpenRequest.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Error loading database.\[dq];
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  node.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db\f[R]
  \f[I]// variable. This is used a lot later on\f[R]
  db = DBOpenRequest.result;

  \f[I]// Run the displayData() function to populate the task\f[R]
  \f[I]// list with all the to\-do list data already in the IDB\f[R]
  displayData();
};

\f[I]// This event handles the event whereby a new version of\f[R]
\f[I]// the database needs to be created Either one has not\f[R]
\f[I]// been created before, or a new version number has been\f[R]
\f[I]// submitted via the window.indexedDB.open line above\f[R]

DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Error loading database.\[dq];
  };

  \f[I]// Create an objectStore for this database using\f[R]
  \f[I]// IDBDatabase.createObjectStore\f[R]

  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]

  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });

  objectStore.createIndex(\[dq]notified\[dq], \[dq]notified\[dq], { unique: \f[B]false\f[R] });

  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Object store created.\[dq];
};
.EE
.PP
This next line opens up a transaction on the Database, then opens an
object store that we can then manipulate the data inside of.
.IP
.EX
\f[B]const\f[R] objectStore = db
  .transaction(\[dq]toDoList\[dq], \[dq]readwrite\[dq])
  .objectStore(\[dq]toDoList\[dq]);
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
