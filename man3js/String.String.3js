.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.STRING" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.String \- String() constructor
.SH SYNOPSIS
The \f[B]\f[CB]String()\f[B]\f[R] constructor creates \f[CR]String\f[R]
objects.
When called as a function, it returns primitive values of type String.
.SH SYNTAX
.IP
.EX
new String(thing)
String(thing)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]String()\f[R] can be called with or without
\f[CR]new\f[R], but with different effects.
See Return value.
.RE
.SS Parameters
.TP
\f[B]thing\f[R]
Anything to be converted to a string.
.SS Return value
When \f[CR]String()\f[R] is called as a function (without
\f[CR]new\f[R]), it returns \f[CR]value\f[R] coerced to a string
primitive.
Specially, Symbol values are converted to
\f[CR]\(dqSymbol(description)\(dq\f[R], where \f[CR]description\f[R] is
the description of the Symbol, instead of throwing.
.PP
When \f[CR]String()\f[R] is called as a constructor (with
\f[CR]new\f[R]), it coerces \f[CR]value\f[R] to a string primitive
(without special symbol handling) and returns a wrapping
\f[CR]String\f[R] object, which is \f[B]not\f[R] a primitive.
.RS
.PP
\f[B]Warning:\f[R] You should rarely find yourself using
\f[CR]String\f[R] as a constructor.
.RE
.SH EXAMPLES
.SS String constructor and String function
String function and String constructor produce different results:
.IP
.EX
\f[B]const\f[R] a = \f[B]new\f[R] String(\(dqHello world\(dq); \f[I]// a === \(dqHello world\(dq is false\f[R]
\f[B]const\f[R] b = String(\(dqHello world\(dq); \f[I]// b === \(dqHello world\(dq is true\f[R]
a \f[B]instanceof\f[R] String; \f[I]// is true\f[R]
b \f[B]instanceof\f[R] String; \f[I]// is false\f[R]
\f[B]typeof\f[R] a; \f[I]// \(dqobject\(dq\f[R]
\f[B]typeof\f[R] b; \f[I]// \(dqstring\(dq\f[R]
.EE
.PP
Here, the function produces a string (the primitive type) as promised.
However, the constructor produces an instance of the type String (an
object wrapper) and that\(cqs why you rarely want to use the String
constructor at all.
.SS Using String() to stringify a symbol
\f[CR]String()\f[R] is the only case where a symbol can be converted to
a string without throwing, because it\(cqs very explicit.
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] sym = Symbol(\(dqexample\(dq);
\(ga${sym}\(ga; \f[I]// TypeError: Cannot convert a Symbol value to a string\f[R]
\(dq\(dq + sym; \f[I]// TypeError: Cannot convert a Symbol value to a string\f[R]
\(dq\(dq.concat(sym); \f[I]// TypeError: Cannot convert a Symbol value to a string\f[R]
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] sym = Symbol(\(dqexample\(dq);
String(sym); \f[I]// \(dqSymbol(example)\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
Numbers and strings guide
