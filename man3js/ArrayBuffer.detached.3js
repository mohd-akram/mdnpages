.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAYBUFFER.DETACHED" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ArrayBuffer.detached \- ArrayBuffer.prototype.detached
.SH SYNOPSIS
The \f[B]\f[CB]detached\f[B]\f[R] accessor property of
\f[CR]ArrayBuffer\f[R] instances returns a boolean indicating whether or
not this buffer has been detached (transferred).
.SH DESCRIPTION
The \f[CR]detached\f[R] property is an accessor property whose set
accessor function is \f[CR]undefined\f[R], meaning that you can only
read this property.
The value is \f[CR]false\f[R] when the \f[CR]ArrayBuffer\f[R] is first
created.
The value becomes \f[CR]true\f[R] if the \f[CR]ArrayBuffer\f[R] is
transferred, which detaches the instance from its underlying memory.
Once a buffer becomes detached, it is no longer usable.
.SH EXAMPLES
.SS Using detached
.IP
.EX
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(8);
console.log(buffer.detached); \f[I]// false\f[R]
\f[B]const\f[R] newBuffer = buffer.transfer();
console.log(buffer.detached); \f[I]// true\f[R]
console.log(newBuffer.detached); \f[I]// false\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#arraybufferprototypetransfer-and-friends
Polyfill of \f[CR]ArrayBuffer.prototype.detached\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/arraybuffer.prototype.detached
es\-shims polyfill of \f[CR]ArrayBuffer.prototype.detached\f[R]
.UE \c
.IP \(bu 2
\f[CR]ArrayBuffer\f[R]
.IP \(bu 2
\f[CR]ArrayBuffer.prototype.transfer()\f[R]
.IP \(bu 2
\f[CR]ArrayBuffer.prototype.transferToFixedLength()\f[R]
