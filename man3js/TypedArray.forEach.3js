.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "TypedArray.forEach" "JS" "September 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.forEach \- TypedArray.prototype.forEach()
.SH SYNOPSIS
The \f[B]\f[CB]forEach()\f[B]\f[R] method of \f[CR]TypedArray\f[R]
instances executes a provided function once for each typed array
element.
This method has the same algorithm as
\f[CR]Array.prototype.forEach()\f[R].
.SH SYNTAX
.IP
.EX
forEach(callbackFn)
forEach(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the typed array.
Its return value is discarded.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the typed array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the typed array.
.TP
\f[B]array\f[R]
The typed array \f[CR]forEach()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH DESCRIPTION
See \f[CR]Array.prototype.forEach()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Logging the contents of a typed array
The following code logs a line for each element in a typed array:
.IP
.EX
\f[B]function\f[R] logArrayElements(element, index, array) {
  console.log(\[ga]a[${index}] = ${element}\[ga]);
}

\f[B]new\f[R] Uint8Array([0, 1, 2, 3]).forEach(logArrayElements);
\f[I]// Logs:\f[R]
\f[I]// a[0] = 0\f[R]
\f[I]// a[1] = 1\f[R]
\f[I]// a[2] = 2\f[R]
\f[I]// a[3] = 3\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]TypedArray.prototype.forEach\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.map()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.filter()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.every()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.some()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.forEach()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.forEach()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.forEach()\f[R]
