.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "WritableStreamDefaultWriter.ready" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WritableStreamDefaultWriter.ready \- WritableStreamDefaultWriter: ready
property
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The \f[B]\f[CB]ready\f[B]\f[R] read\-only property of the
\f[CR]WritableStreamDefaultWriter\f[R] interface returns a
\f[CR]Promise\f[R] that resolves when the desired size of the
stream\[cq]s internal queue transitions from non\-positive to positive,
signaling that it is no longer applying backpressure.
.SH VALUE
A \f[CR]Promise\f[R].
.SH EXAMPLES
The following example shows two uses of the \f[CR]ready\f[R] property.
The first uses \f[CR]ready\f[R] to ensure that the
\f[CR]WritableStream\f[R] is done writing and thus able to receive data
before sending a binary chunk.
The second also checks whether the \f[CR]WritableStream\f[R] is done
writing, but this time because the writing must be finished before the
writer can be closed.
.IP
.EX
\f[B]function\f[R] sendMessage(message, writableStream) {
  \f[I]// defaultWriter is of type WritableStreamDefaultWriter\f[R]
  \f[B]const\f[R] defaultWriter = writableStream.getWriter();
  \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
  \f[B]const\f[R] encoded = encoder.encode(message);
  encoded.forEach((chunk) \f[B]=>\f[R] {
    \f[I]// Make sure the stream and its writer are able to\f[R]
    \f[I]//   receive data.\f[R]
    defaultWriter.ready
      .then(() \f[B]=>\f[R] defaultWriter.write(chunk))
      .then(() \f[B]=>\f[R] {
        console.log(\[dq]Chunk written to sink.\[dq]);
      })
      .catch((err) \f[B]=>\f[R] {
        console.error(\[ga]Chunk error: ${err}\[ga]);
      });
    \f[I]// Call ready again to ensure that all chunks are written\f[R]
    \f[I]//   before closing the writer.\f[R]
    defaultWriter.ready
      .then(() \f[B]=>\f[R] defaultWriter.close())
      .then(() \f[B]=>\f[R] {
        console.log(\[dq]All chunks written\[dq]);
      })
      .catch((err) \f[B]=>\f[R] {
        console.error(\[ga]Stream error: ${err}\[ga]);
      });
  });
}
.EE
