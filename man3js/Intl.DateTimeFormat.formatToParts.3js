.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Intl.DateTimeFormat.formatToParts" "JS" "November 3, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.DateTimeFormat.formatToParts \-
Intl.DateTimeFormat.prototype.formatToParts()
.SH SYNOPSIS
The \f[B]\f[CB]formatToParts()\f[B]\f[R] method of
\f[CR]Intl.DateTimeFormat\f[R] instances allows locale\-aware formatting
of strings produced by this \f[CR]Intl.DateTimeFormat\f[R] object.
.SH SYNTAX
.IP
.EX
formatToParts(date)
.EE
.SS Parameters
.TP
\f[B]date\f[R] \f[I](optional)\f[R]
The date to format.
.SS Return value
An \f[CR]Array\f[R] of objects containing the formatted date in parts.
.SH DESCRIPTION
The \f[CR]formatToParts()\f[R] method is useful for custom formatting of
date strings.
It returns an \f[CR]Array\f[R] of objects containing the
locale\-specific tokens from which it possible to build custom strings
while preserving the locale\-specific parts.
The structure the \f[CR]formatToParts()\f[R] method returns, looks like
this:
.IP
.EX
[
  { type: \[dq]day\[dq], value: \[dq]17\[dq] },
  { type: \[dq]weekday\[dq], value: \[dq]Monday\[dq] },
];
.EE
.PP
Possible types are the following:
.TP
\f[B]day\f[R]
The string used for the day, for example \f[CR]\[dq]17\[dq]\f[R].
.TP
\f[B]dayPeriod\f[R]
The string used for the day period, for example,
\f[CR]\[dq]AM\[dq]\f[R], \f[CR]\[dq]PM\[dq]\f[R],
\f[CR]\[dq]in the morning\[dq]\f[R], or \f[CR]\[dq]noon\[dq]\f[R]
.TP
\f[B]era\f[R]
The string used for the era, for example \f[CR]\[dq]BC\[dq]\f[R] or
\f[CR]\[dq]AD\[dq]\f[R].
.TP
\f[B]fractionalSecond\f[R]
The string used for the fractional seconds, for example
\f[CR]\[dq]0\[dq]\f[R] or \f[CR]\[dq]00\[dq]\f[R] or
\f[CR]\[dq]000\[dq]\f[R].
.TP
\f[B]hour\f[R]
The string used for the hour, for example \f[CR]\[dq]3\[dq]\f[R] or
\f[CR]\[dq]03\[dq]\f[R].
.TP
\f[B]literal\f[R]
The string used for separating date and time values, for example
\f[CR]\[dq]/\[dq]\f[R], \f[CR]\[dq],\[dq]\f[R],
\f[CR]\[dq]o\[aq]clock\[dq]\f[R], \f[CR]\[dq]de\[dq]\f[R], etc.
.TP
\f[B]minute\f[R]
The string used for the minute, for example \f[CR]\[dq]00\[dq]\f[R].
.TP
\f[B]month\f[R]
The string used for the month, for example \f[CR]\[dq]12\[dq]\f[R].
.TP
\f[B]relatedYear\f[R]
The string used for the related 4\-digit Gregorian year, in the event
that the calendar\[cq]s representation would be a yearName instead of a
year, for example \f[CR]\[dq]2019\[dq]\f[R].
.TP
\f[B]second\f[R]
The string used for the second, for example \f[CR]\[dq]07\[dq]\f[R] or
\f[CR]\[dq]42\[dq]\f[R].
.TP
\f[B]timeZone\f[R]
The string used for the name of the time zone, for example
\f[CR]\[dq]UTC\[dq]\f[R].
Default is the timezone of the current environment.
.TP
\f[B]weekday\f[R]
The string used for the weekday, for example \f[CR]\[dq]M\[dq]\f[R],
\f[CR]\[dq]Monday\[dq]\f[R], or \f[CR]\[dq]Montag\[dq]\f[R].
.TP
\f[B]year\f[R]
The string used for the year, for example \f[CR]\[dq]2012\[dq]\f[R] or
\f[CR]\[dq]96\[dq]\f[R].
.TP
\f[B]yearName\f[R]
The string used for the yearName in relevant contexts, for example
\f[CR]\[dq]geng\-zi\[dq]\f[R]
.SH EXAMPLES
\f[CR]DateTimeFormat\f[R] outputs localized, opaque strings that cannot
be manipulated directly:
.IP
.EX
\f[B]const\f[R] date = Date.UTC(2012, 11, 17, 3, 0, 42);

\f[B]const\f[R] formatter = \f[B]new\f[R] Intl.DateTimeFormat(\[dq]en\-us\[dq], {
  weekday: \[dq]long\[dq],
  year: \[dq]numeric\[dq],
  month: \[dq]numeric\[dq],
  day: \[dq]numeric\[dq],
  hour: \[dq]numeric\[dq],
  minute: \[dq]numeric\[dq],
  second: \[dq]numeric\[dq],
  fractionalSecondDigits: 3,
  hour12: \f[B]true\f[R],
  timeZone: \[dq]UTC\[dq],
});

formatter.format(date);
\f[I]// \[dq]Monday, 12/17/2012, 3:00:42.000 AM\[dq]\f[R]
.EE
.PP
However, in many User Interfaces there is a desire to customize the
formatting of this string.
The \f[CR]formatToParts\f[R] method enables locale\-aware formatting of
strings produced by \f[CR]DateTimeFormat\f[R] formatters by providing
you the string in parts:
.IP
.EX
formatter.formatToParts(date);

\f[I]// return value:\f[R]
[
  { type: \[dq]weekday\[dq], value: \[dq]Monday\[dq] },
  { type: \[dq]literal\[dq], value: \[dq], \[dq] },
  { type: \[dq]month\[dq], value: \[dq]12\[dq] },
  { type: \[dq]literal\[dq], value: \[dq]/\[dq] },
  { type: \[dq]day\[dq], value: \[dq]17\[dq] },
  { type: \[dq]literal\[dq], value: \[dq]/\[dq] },
  { type: \[dq]year\[dq], value: \[dq]2012\[dq] },
  { type: \[dq]literal\[dq], value: \[dq], \[dq] },
  { type: \[dq]hour\[dq], value: \[dq]3\[dq] },
  { type: \[dq]literal\[dq], value: \[dq]:\[dq] },
  { type: \[dq]minute\[dq], value: \[dq]00\[dq] },
  { type: \[dq]literal\[dq], value: \[dq]:\[dq] },
  { type: \[dq]second\[dq], value: \[dq]42\[dq] },
  { type: \[dq]fractionalSecond\[dq], value: \[dq]000\[dq] },
  { type: \[dq]literal\[dq], value: \[dq] \[dq] },
  { type: \[dq]dayPeriod\[dq], value: \[dq]AM\[dq] },
];
.EE
.PP
Now the information is available separately and it can be formatted and
concatenated again in a customized way.
For example by using \f[CR]Array.prototype.map()\f[R], arrow functions,
a switch statement, template literals, and
\f[CR]Array.prototype.join()\f[R].
.IP
.EX
\f[B]const\f[R] dateString = formatter
  .formatToParts(date)
  .map(({ type, value }) \f[B]=>\f[R] {
    \f[B]switch\f[R] (type) {
      \f[B]case\f[R] \[dq]dayPeriod\[dq]:
        \f[B]return\f[R] \[ga]<em>${value}</em>\[ga];
      \f[B]default\f[R]:
        \f[B]return\f[R] value;
    }
  })
  .join(\[dq]\[dq]);
.EE
.PP
This will emphasize the day period when using the
\f[CR]formatToParts()\f[R] method.
.IP
.EX
console.log(formatter.format(date));
\f[I]// \[dq]Monday, 12/17/2012, 3:00:42.000 AM\[dq]\f[R]

console.log(dateString);
\f[I]// \[dq]Monday, 12/17/2012, 3:00:42.000 <em>AM</em>\[dq]\f[R]
.EE
.SS Named Years and Mixed calendars
In some cases, calendars use named years.
Chinese and Tibetan calendars, for example, use a 60\-year \c
.UR https://en.wikipedia.org/wiki/Sexagenary_cycle
sexagenary cycle
.UE \c
\ of named years.
These years are disambiguated by relationship to corresponding years on
the Gregorian calendar.
When this is the case, the result of \f[CR]formatToParts()\f[R] will
contain an entry for \f[CR]relatedYear\f[R] when a year would normally
be present, containing the 4\-digit Gregorian year, instead of an entry
for \f[CR]year\f[R].
Setting an entry in the bag for \f[CR]year\f[R] (with any value) will
yield both the and the \f[CR]yearName\f[R] Gregorian
\f[CR]relatedYear\f[R]:
.IP
.EX
\f[B]const\f[R] opts = { year: \[dq]numeric\[dq], month: \[dq]numeric\[dq], day: \[dq]numeric\[dq] };
\f[B]const\f[R] df = \f[B]new\f[R] Intl.DateTimeFormat(\[dq]zh\-u\-ca\-chinese\[dq], opts);
df.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42));

\f[I]// return value\f[R]
[
  { type: \[dq]relatedYear\[dq], value: \[dq]2012\[dq] },
  { type: \[dq]literal\[dq], value: \[dq]年\[dq] },
  { type: \[dq]month\[dq], value: \[dq]十一月\[dq] },
  { type: \[dq]day\[dq], value: \[dq]4\[dq] },
];
.EE
.PP
If the \f[CR]year\f[R] option is not set in the bag (to any value), the
result will include only the \f[CR]relatedYear\f[R]:
.IP
.EX
\f[B]const\f[R] df = \f[B]new\f[R] Intl.DateTimeFormat(\[dq]zh\-u\-ca\-chinese\[dq]);
df.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42));

\f[I]// return value\f[R]
[
  { type: \[dq]relatedYear\[dq], value: \[dq]2012\[dq] },
  { type: \[dq]literal\[dq], value: \[dq]年\[dq] },
  { type: \[dq]month\[dq], value: \[dq]十一月\[dq] },
  { type: \[dq]day\[dq], value: \[dq]4\[dq] },
];
.EE
.PP
In cases where the \f[CR]year\f[R] would be output, \f[CR].format()\f[R]
may commonly present these side\-by\-side:
.IP
.EX
\f[B]const\f[R] df = \f[B]new\f[R] Intl.DateTimeFormat(\[dq]zh\-u\-ca\-chinese\[dq], { year: \[dq]numeric\[dq] });
df.format(Date.UTC(2012, 11, 17, 3, 0, 42)); \f[I]// 2012壬辰年\f[R]
.EE
.PP
This also makes it possible to mix locale and calendar in both
\f[CR]format\f[R]:
.IP
.EX
\f[B]const\f[R] df = \f[B]new\f[R] Intl.DateTimeFormat(\[dq]en\-u\-ca\-chinese\[dq], { year: \[dq]numeric\[dq] });
\f[B]const\f[R] date = Date.UTC(2012, 11, 17, 3, 0, 42);
df.format(date); \f[I]// 2012(ren\-chen)\f[R]
.EE
.PP
And \f[CR]formatToParts\f[R]:
.IP
.EX
\f[B]const\f[R] opts = { month: \[dq]numeric\[dq], day: \[dq]numeric\[dq], year: \[dq]numeric\[dq] };
\f[B]const\f[R] df = \f[B]new\f[R] Intl.DateTimeFormat(\[dq]en\-u\-ca\-chinese\[dq], opts);
\f[B]const\f[R] date = Date.UTC(2012, 11, 17, 3);
df.formatToParts(date);
\f[I]// [\f[R]
\f[I]//   { type: \[aq]month\[aq], value: \[aq]11\[aq] },\f[R]
\f[I]//   { type: \[aq]literal\[aq], value: \[aq]/\[aq] },\f[R]
\f[I]//   { type: \[aq]day\[aq], value: \[aq]4\[aq] },\f[R]
\f[I]//   { type: \[aq]literal\[aq], value: \[aq]/\[aq] },\f[R]
\f[I]//   { type: \[aq]relatedYear\[aq], value: \[aq]2012\[aq] }\f[R]
\f[I]// ]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Intl.DateTimeFormat\f[R]
.IP \[bu] 2
\f[CR]Intl.DateTimeFormat.prototype.format()\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.toLocaleString()\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.toLocaleDateString()\f[R]
.IP \[bu] 2
\f[CR]Date.prototype.toLocaleTimeString()\f[R]
