.\" Automatically generated by Pandoc 3.4
.\"
.TH "OES_vertex_array_object" "JS" "September 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OES_vertex_array_object \- OES_vertex_array_object extension
.SH SYNOPSIS
The \f[B]OES_vertex_array_object\f[R] extension is part of the WebGL API
and provides vertex array objects (VAOs) which encapsulate vertex array
states.
These objects keep pointers to vertex data and provide names for
different sets of vertex data.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] This extension is only available to WebGL1 contexts.
In WebGL2, the functionality of this extension is available on the
WebGL2 context by default and the constants and methods are available
without the \f[CR]OES_\f[R] suffix.
.RE
.SH CONSTANTS
This extension exposes one new constant, which can be used in the
\f[CR]gl.getParameter()\f[R] method:
.TP
\f[B]ext.VERTEX_ARRAY_BINDING_OES\f[R]
Returns a \f[CR]WebGLVertexArrayObject\f[R] object when used in the
\f[CR]gl.getParameter()\f[R] method as the \f[CR]pname\f[R] parameter.
.SH INSTANCE METHODS
This extension exposes four new methods.
.TP
\f[B]ext.createVertexArrayOES()\f[R]
Creates a new \f[CR]WebGLVertexArrayObject\f[R].
.TP
\f[B]ext.deleteVertexArrayOES()\f[R]
Deletes a given \f[CR]WebGLVertexArrayObject\f[R].
.TP
\f[B]ext.isVertexArrayOES()\f[R]
Returns \f[CR]true\f[R] if a given object is a
\f[CR]WebGLVertexArrayObject\f[R].
.TP
\f[B]ext.bindVertexArrayOES()\f[R]
Binds a given \f[CR]WebGLVertexArrayObject\f[R] to the buffer.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] oes_vao_ext = gl.getExtension(\[dq]OES_vertex_array_object\[dq]);
\f[B]const\f[R] vao = oes_vao_ext.createVertexArrayOES();
oes_vao_ext.bindVertexArrayOES(vao);

\f[I]// \&...\f[R]
\f[I]// calls to bindBuffer or vertexAttribPointer\f[R]
\f[I]// which will be \[dq]recorded\[dq] in the VAO\f[R]
\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.vertexAttribPointer()\f[R]
.IP \[bu] 2
WebGL2 equivalent methods:
.RS 2
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.createVertexArray()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.deleteVertexArray()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.isVertexArray()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.bindVertexArray()\f[R]
.RE
