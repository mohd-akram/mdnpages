.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Element" "JS" "April 11, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element \- Element
.SH SYNOPSIS
\f[B]\f[CB]Element\f[B]\f[R] is the most general base class from which
all element objects (i.e.\ objects that represent elements) in a
\f[CR]Document\f[R] inherit.
It only has methods and properties common to all kinds of elements.
More specific classes inherit from \f[CR]Element\f[R].
.PP
For example, the \f[CR]HTMLElement\f[R] interface is the base interface
for HTML elements.
Similarly, the \f[CR]SVGElement\f[R] interface is the basis for all SVG
elements, and the \f[CR]MathMLElement\f[R] interface is the base
interface for MathML elements.
Most functionality is specified further down the class hierarchy.
.PP
Languages outside the realm of the Web platform, like XUL through the
\f[CR]XULElement\f[R] interface, also implement \f[CR]Element\f[R].
.SH INSTANCE PROPERTIES
\f[I]\f[CI]Element\f[I] inherits properties from its parent interface,
\f[CI]Node\f[I], and by extension that interface\[cq]s parent,
\f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]Element.assignedSlot\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]HTMLSlotElement\f[R] representing the \f[CR]<slot>\f[R]
the node is inserted in.
.TP
\f[B]Element.attributes\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]NamedNodeMap\f[R] object containing the assigned
attributes of the corresponding HTML element.
.TP
\f[B]Element.childElementCount\f[R] \f[I](read\-only)\f[R]
Returns the number of child elements of this element.
.TP
\f[B]Element.children\f[R] \f[I](read\-only)\f[R]
Returns the child elements of this element.
.TP
\f[B]Element.classList\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]DOMTokenList\f[R] containing the list of class
attributes.
.TP
\f[B]Element.className\f[R]
A string representing the class of the element.
.TP
\f[B]Element.clientHeight\f[R] \f[I](read\-only)\f[R]
Returns a number representing the inner height of the element.
.TP
\f[B]Element.clientLeft\f[R] \f[I](read\-only)\f[R]
Returns a number representing the width of the left border of the
element.
.TP
\f[B]Element.clientTop\f[R] \f[I](read\-only)\f[R]
Returns a number representing the width of the top border of the
element.
.TP
\f[B]Element.clientWidth\f[R] \f[I](read\-only)\f[R]
Returns a number representing the inner width of the element.
.TP
\f[B]Element.elementTiming\f[R] \f[I](experimental)\f[R]
A string reflecting the \f[CR]elementtiming\f[R] attribute which marks
an element for observation in the \f[CR]PerformanceElementTiming\f[R]
API.
.TP
\f[B]Element.firstElementChild\f[R] \f[I](read\-only)\f[R]
Returns the first child element of this element.
.TP
\f[B]Element.id\f[R]
A string representing the id of the element.
.TP
\f[B]Element.innerHTML\f[R]
A string representing the markup of the element\[cq]s content.
.TP
\f[B]Element.lastElementChild\f[R] \f[I](read\-only)\f[R]
Returns the last child element of this element.
.TP
\f[B]Element.localName\f[R] \f[I](read\-only)\f[R]
A string representing the local part of the qualified name of the
element.
.TP
\f[B]Element.namespaceURI\f[R] \f[I](read\-only)\f[R]
The namespace URI of the element, or \f[CR]null\f[R] if it is no
namespace.
.RS
.RS
.PP
\f[B]Note:\f[R] In Firefox 3.5 and earlier, HTML elements are in no
namespace.
In later versions, HTML elements are in the \c
.UR https://www.w3.org/1999/xhtml/
\f[CR]http://www.w3.org/1999/xhtml\f[R]
.UE \c
\ namespace in both HTML and XML trees.
.RE
.RE
.TP
\f[B]Element.nextElementSibling\f[R] \f[I](read\-only)\f[R]
An \f[CR]Element\f[R], the element immediately following the given one
in the tree, or \f[CR]null\f[R] if there\[cq]s no sibling node.
.TP
\f[B]Element.outerHTML\f[R]
A string representing the markup of the element including its content.
When used as a setter, replaces the element with nodes parsed from the
given string.
.TP
\f[B]Element.part\f[R]
Represents the part identifier(s) of the element (i.e.\ set using the
\f[CR]part\f[R] attribute), returned as a \f[CR]DOMTokenList\f[R].
.TP
\f[B]Element.prefix\f[R] \f[I](read\-only)\f[R]
A string representing the namespace prefix of the element, or
\f[CR]null\f[R] if no prefix is specified.
.TP
\f[B]Element.previousElementSibling\f[R] \f[I](read\-only)\f[R]
An \f[CR]Element\f[R], the element immediately preceding the given one
in the tree, or \f[CR]null\f[R] if there is no sibling element.
.TP
\f[B]Element.scrollHeight\f[R] \f[I](read\-only)\f[R]
Returns a number representing the scroll view height of an element.
.TP
\f[B]Element.scrollLeft\f[R]
A number representing the left scroll offset of the element.
.TP
\f[B]Element.scrollLeftMax\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns a number representing the maximum left scroll offset possible
for the element.
.TP
\f[B]Element.scrollTop\f[R]
A number representing number of pixels the top of the element is
scrolled vertically.
.TP
\f[B]Element.scrollTopMax\f[R] \f[I](non\-standard)\f[R] \f[I](read\-only)\f[R]
Returns a number representing the maximum top scroll offset possible for
the element.
.TP
\f[B]Element.scrollWidth\f[R] \f[I](read\-only)\f[R]
Returns a number representing the scroll view width of the element.
.TP
\f[B]Element.shadowRoot\f[R] \f[I](read\-only)\f[R]
Returns the open shadow root that is hosted by the element, or null if
no open shadow root is present.
.TP
\f[B]Element.slot\f[R]
Returns the name of the shadow DOM slot the element is inserted in.
.TP
\f[B]Element.tagName\f[R] \f[I](read\-only)\f[R]
Returns a string with the name of the tag for the given element.
.SS Instance properties included from ARIA
\f[I]The \f[CI]Element\f[I] interface also includes the following
properties.\f[R]
.TP
\f[B]Element.ariaAtomic\f[R]
A string reflecting the \f[CR]aria\-atomic\f[R] attribute, which
indicates whether assistive technologies will present all, or only parts
of, the changed region based on the change notifications defined by the
\f[CR]aria\-relevant\f[R] attribute.
.TP
\f[B]Element.ariaAutoComplete\f[R]
A string reflecting the \f[CR]aria\-autocomplete\f[R] attribute, which
indicates whether inputting text could trigger display of one or more
predictions of the user\[cq]s intended value for a combobox, searchbox,
or textbox and specifies how predictions would be presented if they were
made.
.TP
\f[B]Element.ariaBrailleLabel\f[R]
A string reflecting the \f[CR]aria\-braillelabel\f[R] attribute, which
defines the braille label of the element.
.TP
\f[B]Element.ariaBrailleRoleDescription\f[R]
A string reflecting the \f[CR]aria\-brailleroledescription\f[R]
attribute, which defines the ARIA braille role description of the
element.
.TP
\f[B]Element.ariaBusy\f[R]
A string reflecting the \f[CR]aria\-busy\f[R] attribute, which indicates
whether an element is being modified, as assistive technologies may want
to wait until the modifications are complete before exposing them to the
user.
.TP
\f[B]Element.ariaChecked\f[R]
A string reflecting the \f[CR]aria\-checked\f[R] attribute, which
indicates the current \[lq]checked\[rq] state of checkboxes, radio
buttons, and other widgets that have a checked state.
.TP
\f[B]Element.ariaColCount\f[R]
A string reflecting the \f[CR]aria\-colcount\f[R] attribute, which
defines the number of columns in a table, grid, or treegrid.
.TP
\f[B]Element.ariaColIndex\f[R]
A string reflecting the \f[CR]aria\-colindex\f[R] attribute, which
defines an element\[cq]s column index or position with respect to the
total number of columns within a table, grid, or treegrid.
.TP
\f[B]Element.ariaColIndexText\f[R] \f[I](experimental)\f[R]
A string reflecting the \f[CR]aria\-colindextext\f[R] attribute, which
defines a human readable text alternative of aria\-colindex.
.TP
\f[B]Element.ariaColSpan\f[R]
A string reflecting the \f[CR]aria\-colspan\f[R] attribute, which
defines the number of columns spanned by a cell or gridcell within a
table, grid, or treegrid.
.TP
\f[B]Element.ariaCurrent\f[R]
A string reflecting the \f[CR]aria\-current\f[R] attribute, which
indicates the element that represents the current item within a
container or set of related elements.
.TP
\f[B]Element.ariaDescription\f[R]
A string reflecting the \f[CR]aria\-description\f[R] attribute, which
defines a string value that describes or annotates the current element.
.TP
\f[B]Element.ariaDisabled\f[R]
A string reflecting the \f[CR]aria\-disabled\f[R] attribute, which
indicates that the element is perceivable but disabled, so it is not
editable or otherwise operable.
.TP
\f[B]Element.ariaExpanded\f[R]
A string reflecting the \f[CR]aria\-expanded\f[R] attribute, which
indicates whether a grouping element owned or controlled by this element
is expanded or collapsed.
.TP
\f[B]Element.ariaHasPopup\f[R]
A string reflecting the \f[CR]aria\-haspopup\f[R] attribute, which
indicates the availability and type of interactive popup element, such
as menu or dialog, that can be triggered by an element.
.TP
\f[B]Element.ariaHidden\f[R]
A string reflecting the \f[CR]aria\-hidden\f[R] attribute, which
indicates whether the element is exposed to an accessibility API.
.TP
\f[B]Element.ariaKeyShortcuts\f[R]
A string reflecting the \f[CR]aria\-keyshortcuts\f[R] attribute, which
indicates keyboard shortcuts that an author has implemented to activate
or give focus to an element.
.TP
\f[B]Element.ariaLabel\f[R]
A string reflecting the \f[CR]aria\-label\f[R] attribute, which defines
a string value that labels the current element.
.TP
\f[B]Element.ariaLevel\f[R]
A string reflecting the \f[CR]aria\-level\f[R] attribute, which defines
the hierarchical level of an element within a structure.
.TP
\f[B]Element.ariaLive\f[R]
A string reflecting the \f[CR]aria\-live\f[R] attribute, which indicates
that an element will be updated, and describes the types of updates the
user agents, assistive technologies, and user can expect from the live
region.
.TP
\f[B]Element.ariaModal\f[R]
A string reflecting the \f[CR]aria\-modal\f[R] attribute, which
indicates whether an element is modal when displayed.
.TP
\f[B]Element.ariaMultiline\f[R]
A string reflecting the \f[CR]aria\-multiline\f[R] attribute, which
indicates whether a text box accepts multiple lines of input or only a
single line.
.TP
\f[B]Element.ariaMultiSelectable\f[R]
A string reflecting the \f[CR]aria\-multiselectable\f[R] attribute,
which indicates that the user may select more than one item from the
current selectable descendants.
.TP
\f[B]Element.ariaOrientation\f[R]
A string reflecting the \f[CR]aria\-orientation\f[R] attribute, which
indicates whether the element\[cq]s orientation is horizontal, vertical,
or unknown/ambiguous.
.TP
\f[B]Element.ariaPlaceholder\f[R]
A string reflecting the \f[CR]aria\-placeholder\f[R] attribute, which
defines a short hint intended to aid the user with data entry when the
control has no value.
.TP
\f[B]Element.ariaPosInSet\f[R]
A string reflecting the \f[CR]aria\-posinset\f[R] attribute, which
defines an element\[cq]s number or position in the current set of
listitems or treeitems.
.TP
\f[B]Element.ariaPressed\f[R]
A string reflecting the \f[CR]aria\-pressed\f[R] attribute, which
indicates the current \[lq]pressed\[rq] state of toggle buttons.
.TP
\f[B]Element.ariaReadOnly\f[R]
A string reflecting the \f[CR]aria\-readonly\f[R] attribute, which
indicates that the element is not editable, but is otherwise operable.
.TP
\f[B]Element.ariaRelevant\f[R] \f[I](non\-standard)\f[R]
A string reflecting the \f[CR]aria\-relevant\f[R] attribute, which
indicates what notifications the user agent will trigger when the
accessibility tree within a live region is modified.
This is used to describe what changes in an \f[CR]aria\-live\f[R] region
are relevant and should be announced.
.TP
\f[B]Element.ariaRequired\f[R]
A string reflecting the \f[CR]aria\-required\f[R] attribute, which
indicates that user input is required on the element before a form may
be submitted.
.TP
\f[B]Element.ariaRoleDescription\f[R]
A string reflecting the \f[CR]aria\-roledescription\f[R] attribute,
which defines a human\-readable, author\-localized description for the
role of an element.
.TP
\f[B]Element.ariaRowCount\f[R]
A string reflecting the \f[CR]aria\-rowcount\f[R] attribute, which
defines the total number of rows in a table, grid, or treegrid.
.TP
\f[B]Element.ariaRowIndex\f[R]
A string reflecting the \f[CR]aria\-rowindex\f[R] attribute, which
defines an element\[cq]s row index or position with respect to the total
number of rows within a table, grid, or treegrid.
.TP
\f[B]Element.ariaRowIndexText\f[R] \f[I](experimental)\f[R]
A string reflecting the \f[CR]aria\-rowindextext\f[R] attribute, which
defines a human readable text alternative of aria\-rowindex.
.TP
\f[B]Element.ariaRowSpan\f[R]
A string reflecting the \f[CR]aria\-rowspan\f[R] attribute, which
defines the number of rows spanned by a cell or gridcell within a table,
grid, or treegrid.
.TP
\f[B]Element.ariaSelected\f[R]
A string reflecting the \f[CR]aria\-selected\f[R] attribute, which
indicates the current \[lq]selected\[rq] state of elements that have a
selected state.
.TP
\f[B]Element.ariaSetSize\f[R]
A string reflecting the \f[CR]aria\-setsize\f[R] attribute, which
defines the number of items in the current set of listitems or
treeitems.
.TP
\f[B]Element.ariaSort\f[R]
A string reflecting the \f[CR]aria\-sort\f[R] attribute, which indicates
if items in a table or grid are sorted in ascending or descending order.
.TP
\f[B]Element.ariaValueMax\f[R]
A string reflecting the \f[CR]aria\-valueMax\f[R] attribute, which
defines the maximum allowed value for a range widget.
.TP
\f[B]Element.ariaValueMin\f[R]
A string reflecting the \f[CR]aria\-valueMin\f[R] attribute, which
defines the minimum allowed value for a range widget.
.TP
\f[B]Element.ariaValueNow\f[R]
A string reflecting the \f[CR]aria\-valueNow\f[R] attribute, which
defines the current value for a range widget.
.TP
\f[B]Element.ariaValueText\f[R]
A string reflecting the \f[CR]aria\-valuetext\f[R] attribute, which
defines the human\-readable text alternative of aria\-valuenow for a
range widget.
.SH INSTANCE METHODS
\f[I]\f[CI]Element\f[I] inherits methods from its parents
\f[CI]Node\f[I], and its own parent, \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]Element.after()\f[R]
Inserts a set of \f[CR]Node\f[R] objects or strings in the children list
of the \f[CR]Element\f[R]\[cq]s parent, just after the
\f[CR]Element\f[R].
.TP
\f[B]Element.animate()\f[R]
A shortcut method to create and run an animation on an element.
Returns the created Animation object instance.
.TP
\f[B]Element.append()\f[R]
Inserts a set of \f[CR]Node\f[R] objects or strings after the last child
of the element.
.TP
\f[B]Element.attachShadow()\f[R]
Attaches a shadow DOM tree to the specified element and returns a
reference to its \f[CR]ShadowRoot\f[R].
.TP
\f[B]Element.before()\f[R]
Inserts a set of \f[CR]Node\f[R] objects or strings in the children list
of the \f[CR]Element\f[R]\[cq]s parent, just before the
\f[CR]Element\f[R].
.TP
\f[B]Element.checkVisibility()\f[R]
Returns whether an element is expected to be visible or not based on
configurable checks.
.TP
\f[B]Element.closest()\f[R]
Returns the \f[CR]Element\f[R] which is the closest ancestor of the
current element (or the current element itself) which matches the
selectors given in parameter.
.TP
\f[B]Element.computedStyleMap()\f[R]
Returns a \f[CR]StylePropertyMapReadOnly\f[R] interface which provides a
read\-only representation of a CSS declaration block that is an
alternative to \f[CR]CSSStyleDeclaration\f[R].
.TP
\f[B]Element.getAnimations()\f[R]
Returns an array of Animation objects currently active on the element.
.TP
\f[B]Element.getAttribute()\f[R]
Retrieves the value of the named attribute from the current node and
returns it as a string.
.TP
\f[B]Element.getAttributeNames()\f[R]
Returns an array of attribute names from the current element.
.TP
\f[B]Element.getAttributeNode()\f[R]
Retrieves the node representation of the named attribute from the
current node and returns it as an \f[CR]Attr\f[R].
.TP
\f[B]Element.getAttributeNodeNS()\f[R]
Retrieves the node representation of the attribute with the specified
name and namespace, from the current node and returns it as an
\f[CR]Attr\f[R].
.TP
\f[B]Element.getAttributeNS()\f[R]
Retrieves the value of the attribute with the specified namespace and
name from the current node and returns it as a string.
.TP
\f[B]Element.getBoundingClientRect()\f[R]
Returns the size of an element and its position relative to the
viewport.
.TP
\f[B]Element.getBoxQuads()\f[R] \f[I](experimental)\f[R]
Returns a list of \f[CR]DOMQuad\f[R] objects representing the CSS
fragments of the node.
.TP
\f[B]Element.getClientRects()\f[R]
Returns a collection of rectangles that indicate the bounding rectangles
for each line of text in a client.
.TP
\f[B]Element.getElementsByClassName()\f[R]
Returns a live \f[CR]HTMLCollection\f[R] that contains all descendants
of the current element that possess the list of classes given in the
parameter.
.TP
\f[B]Element.getElementsByTagName()\f[R]
Returns a live \f[CR]HTMLCollection\f[R] containing all descendant
elements, of a particular tag name, from the current element.
.TP
\f[B]Element.getElementsByTagNameNS()\f[R]
Returns a live \f[CR]HTMLCollection\f[R] containing all descendant
elements, of a particular tag name and namespace, from the current
element.
.TP
\f[B]Element.hasAttribute()\f[R]
Returns a boolean value indicating if the element has the specified
attribute or not.
.TP
\f[B]Element.hasAttributeNS()\f[R]
Returns a boolean value indicating if the element has the specified
attribute, in the specified namespace, or not.
.TP
\f[B]Element.hasAttributes()\f[R]
Returns a boolean value indicating if the element has one or more HTML
attributes present.
.TP
\f[B]Element.hasPointerCapture()\f[R]
Indicates whether the element on which it is invoked has pointer capture
for the pointer identified by the given pointer ID.
.TP
\f[B]Element.insertAdjacentElement()\f[R]
Inserts a given element node at a given position relative to the element
it is invoked upon.
.TP
\f[B]Element.insertAdjacentHTML()\f[R]
Parses the text as HTML or XML and inserts the resulting nodes into the
tree in the position given.
.TP
\f[B]Element.insertAdjacentText()\f[R]
Inserts a given text node at a given position relative to the element it
is invoked upon.
.TP
\f[B]Element.matches()\f[R]
Returns a boolean value indicating whether or not the element would be
selected by the specified selector string.
.TP
\f[B]Element.prepend()\f[R]
Inserts a set of \f[CR]Node\f[R] objects or strings before the first
child of the element.
.TP
\f[B]Element.querySelector()\f[R]
Returns the first \f[CR]Node\f[R] which matches the specified selector
string relative to the element.
.TP
\f[B]Element.querySelectorAll()\f[R]
Returns a \f[CR]NodeList\f[R] of nodes which match the specified
selector string relative to the element.
.TP
\f[B]Element.releasePointerCapture()\f[R]
Releases (stops) pointer capture that was previously set for a specific
\f[CR]pointer event\f[R].
.TP
\f[B]Element.remove()\f[R]
Removes the element from the children list of its parent.
.TP
\f[B]Element.removeAttribute()\f[R]
Removes the named attribute from the current node.
.TP
\f[B]Element.removeAttributeNode()\f[R]
Removes the node representation of the named attribute from the current
node.
.TP
\f[B]Element.removeAttributeNS()\f[R]
Removes the attribute with the specified name and namespace, from the
current node.
.TP
\f[B]Element.replaceChildren()\f[R]
Replaces the existing children of a \f[CR]Node\f[R] with a specified new
set of children.
.TP
\f[B]Element.replaceWith()\f[R]
Replaces the element in the children list of its parent with a set of
\f[CR]Node\f[R] objects or strings.
.TP
\f[B]Element.requestFullscreen()\f[R]
Asynchronously asks the browser to make the element fullscreen.
.TP
\f[B]Element.requestPointerLock()\f[R]
Allows to asynchronously ask for the pointer to be locked on the given
element.
.TP
\f[B]Element.scroll()\f[R]
Scrolls to a particular set of coordinates inside a given element.
.TP
\f[B]Element.scrollBy()\f[R]
Scrolls an element by the given amount.
.TP
\f[B]Element.scrollIntoView()\f[R]
Scrolls the page until the element gets into the view.
.TP
\f[B]Element.scrollIntoViewIfNeeded()\f[R] \f[I](non\-standard)\f[R]
Scrolls the current element into the visible area of the browser window
if it\[cq]s not already within the visible area of the browser window.
\f[B]Use the standard \f[CB]Element.scrollIntoView()\f[B] instead.\f[R]
.TP
\f[B]Element.scrollTo()\f[R]
Scrolls to a particular set of coordinates inside a given element.
.TP
\f[B]Element.setAttribute()\f[R]
Sets the value of a named attribute of the current node.
.TP
\f[B]Element.setAttributeNode()\f[R]
Sets the node representation of the named attribute from the current
node.
.TP
\f[B]Element.setAttributeNodeNS()\f[R]
Sets the node representation of the attribute with the specified name
and namespace, from the current node.
.TP
\f[B]Element.setAttributeNS()\f[R]
Sets the value of the attribute with the specified name and namespace,
from the current node.
.TP
\f[B]Element.setCapture()\f[R] \f[I](non\-standard)\f[R] \f[I](deprecated)\f[R]
Sets up mouse event capture, redirecting all mouse events to this
element.
.TP
\f[B]Element.setHTML()\f[R] \f[I](experimental)\f[R] \f[I](secure context)\f[R]
Parses and sanitizes a string of HTML and inserts into the DOM as a
subtree of the element.
.TP
\f[B]Element.setPointerCapture()\f[R]
Designates a specific element as the capture target of future pointer
events.
.TP
\f[B]Element.toggleAttribute()\f[R]
Toggles a boolean attribute, removing it if it is present and adding it
if it is not present, on the specified element.
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]afterscriptexecute\f[R] \f[I](non\-standard)\f[R]
Fired when a script has been executed.
.TP
\f[B]beforematch\f[R] \f[I](experimental)\f[R]
Fires on an element that is in the \f[I]hidden until found\f[R] state,
when the browser is about to reveal its content because the user has
found the content through the \[lq]find in page\[rq] feature or through
fragment navigation.
.TP
\f[B]beforescriptexecute\f[R] \f[I](non\-standard)\f[R]
Fired when a script is about to be executed.
.TP
\f[B]contentvisibilityautostatechange\f[R]
Fires on any element with \f[CR]content\-visibility: auto\f[R] set on it
when it starts or stops being relevant to the user and skipping its
contents.
.TP
\f[B]scroll\f[R]
Fired when the document view or an element has been scrolled.
.TP
\f[B]scrollend\f[R]
Fires when the document view has completed scrolling.
.TP
\f[B]securitypolicyviolation\f[R]
Fired when a Content Security Policy is violated.
.TP
\f[B]wheel\f[R]
Fired when the user rotates a wheel button on a pointing device
(typically a mouse).
.SS Animation events
.TP
\f[B]animationcancel\f[R]
Fired when an animation unexpectedly aborts.
.TP
\f[B]animationend\f[R]
Fired when an animation has completed normally.
.TP
\f[B]animationiteration\f[R]
Fired when an animation iteration has completed.
.TP
\f[B]animationstart\f[R]
Fired when an animation starts.
.SS Clipboard events
.TP
\f[B]copy\f[R]
Fired when the user initiates a copy action through the browser\[cq]s
user interface.
.TP
\f[B]cut\f[R]
Fired when the user initiates a cut action through the browser\[cq]s
user interface.
.TP
\f[B]paste\f[R]
Fired when the user initiates a paste action through the browser\[cq]s
user interface.
.SS Composition events
.TP
\f[B]compositionend\f[R]
Fired when a text composition system such as an input method editor
completes or cancels the current composition session.
.TP
\f[B]compositionstart\f[R]
Fired when a text composition system such as an input method editor
starts a new composition session.
.TP
\f[B]compositionupdate\f[R]
Fired when a new character is received in the context of a text
composition session controlled by a text composition system such as an
input method editor.
.SS Focus events
.TP
\f[B]blur\f[R]
Fired when an element has lost focus.
.TP
\f[B]focus\f[R]
Fired when an element has gained focus.
.TP
\f[B]focusin\f[R]
Fired when an element has gained focus, after \f[CR]focus\f[R].
.TP
\f[B]focusout\f[R]
Fired when an element has lost focus, after \f[CR]blur\f[R].
.SS Fullscreen events
.TP
\f[B]fullscreenchange\f[R]
Sent to an \f[CR]Element\f[R] when it transitions into or out of
fullscreen mode.
.TP
\f[B]fullscreenerror\f[R]
Sent to an \f[CR]Element\f[R] if an error occurs while attempting to
switch it into or out of fullscreen mode.
.SS Keyboard events
.TP
\f[B]keydown\f[R]
Fired when a key is pressed.
.TP
\f[B]keypress\f[R] \f[I](deprecated)\f[R]
Fired when a key that produces a character value is pressed down.
.TP
\f[B]keyup\f[R]
Fired when a key is released.
.SS Mouse events
.TP
\f[B]auxclick\f[R]
Fired when a non\-primary pointing device button (e.g., any mouse button
other than the left button) has been pressed and released on an element.
.TP
\f[B]click\f[R]
Fired when a pointing device button (e.g., a mouse\[cq]s primary button)
is pressed and released on a single element.
.TP
\f[B]contextmenu\f[R]
Fired when the user attempts to open a context menu.
.TP
\f[B]dblclick\f[R]
Fired when a pointing device button (e.g., a mouse\[cq]s primary button)
is clicked twice on a single element.
.TP
\f[B]DOMActivate\f[R] \f[I](deprecated)\f[R]
Occurs when an element is activated, for instance, through a mouse click
or a keypress.
.TP
\f[B]DOMMouseScroll\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Occurs when mouse wheel or similar device is operated and the
accumulated scroll amount is over 1 line or 1 page since last event.
.TP
\f[B]mousedown\f[R]
Fired when a pointing device button is pressed on an element.
.TP
\f[B]mouseenter\f[R]
Fired when a pointing device (usually a mouse) is moved over the element
that has the listener attached.
.TP
\f[B]mouseleave\f[R]
Fired when the pointer of a pointing device (usually a mouse) is moved
out of an element that has the listener attached to it.
.TP
\f[B]mousemove\f[R]
Fired when a pointing device (usually a mouse) is moved while over an
element.
.TP
\f[B]mouseout\f[R]
Fired when a pointing device (usually a mouse) is moved off the element
to which the listener is attached or off one of its children.
.TP
\f[B]mouseover\f[R]
Fired when a pointing device is moved onto the element to which the
listener is attached or onto one of its children.
.TP
\f[B]mouseup\f[R]
Fired when a pointing device button is released on an element.
.TP
\f[B]mousewheel\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Fired when a mouse wheel or similar device is operated.
.TP
\f[B]MozMousePixelScroll\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Fired when a mouse wheel or similar device is operated.
.TP
\f[B]webkitmouseforcechanged\f[R] \f[I](non\-standard)\f[R]
Fired each time the amount of pressure changes on the
trackpadtouchscreen.
.TP
\f[B]webkitmouseforcedown\f[R] \f[I](non\-standard)\f[R]
Fired after the mousedown event as soon as sufficient pressure has been
applied to qualify as a \[lq]force click\[rq].
.TP
\f[B]webkitmouseforcewillbegin\f[R] \f[I](non\-standard)\f[R]
Fired before the \f[CR]mousedown\f[R] event.
.TP
\f[B]webkitmouseforceup\f[R] \f[I](non\-standard)\f[R]
Fired after the \f[CR]webkitmouseforcedown\f[R] event as soon as the
pressure has been reduced sufficiently to end the \[lq]force click\[rq].
.SS Pointer events
.TP
\f[B]gotpointercapture\f[R]
Fired when an element captures a pointer using
\f[CR]setPointerCapture()\f[R].
.TP
\f[B]lostpointercapture\f[R]
Fired when a captured pointer is released.
.TP
\f[B]pointercancel\f[R]
Fired when a pointer event is canceled.
.TP
\f[B]pointerdown\f[R]
Fired when a pointer becomes active.
.TP
\f[B]pointerenter\f[R]
Fired when a pointer is moved into the hit test boundaries of an element
or one of its descendants.
.TP
\f[B]pointerleave\f[R]
Fired when a pointer is moved out of the hit test boundaries of an
element.
.TP
\f[B]pointermove\f[R]
Fired when a pointer changes coordinates.
.TP
\f[B]pointerout\f[R]
Fired when a pointer is moved out of the \f[I]hit test\f[R] boundaries
of an element (among other reasons).
.TP
\f[B]pointerover\f[R]
Fired when a pointer is moved into an element\[cq]s hit test boundaries.
.TP
\f[B]pointerrawupdate\f[R] \f[I](experimental)\f[R]
Fired when a pointer changes any properties that don\[cq]t fire
\f[CR]pointerdown\f[R] or \f[CR]pointerup\f[R] events.
.TP
\f[B]pointerup\f[R]
Fired when a pointer is no longer active.
.SS Touch events
.TP
\f[B]gesturechange\f[R] \f[I](non\-standard)\f[R]
Fired when digits move during a touch gesture.
.TP
\f[B]gestureend\f[R] \f[I](non\-standard)\f[R]
Fired when there are no longer multiple fingers contacting the touch
surface, thus ending the gesture.
.TP
\f[B]gesturestart\f[R] \f[I](non\-standard)\f[R]
Fired when multiple fingers contact the touch surface, thus starting a
new gesture.
.TP
\f[B]touchcancel\f[R]
Fired when one or more touch points have been disrupted in an
implementation\-specific manner (for example, too many touch points are
created).
.TP
\f[B]touchend\f[R]
Fired when one or more touch points are removed from the touch surface.
.TP
\f[B]touchmove\f[R]
Fired when one or more touch points are moved along the touch surface.
.TP
\f[B]touchstart\f[R]
Fired when one or more touch points are placed on the touch surface.
.SS Transition events
.TP
\f[B]transitioncancel\f[R]
An \f[CR]Event\f[R] fired when a CSS transition has been cancelled.
.TP
\f[B]transitionend\f[R]
An \f[CR]Event\f[R] fired when a CSS transition has finished playing.
.TP
\f[B]transitionrun\f[R]
An \f[CR]Event\f[R] fired when a CSS transition is created (i.e., when
it is added to a set of running transitions), though not necessarily
started.
.TP
\f[B]transitionstart\f[R]
An \f[CR]Event\f[R] fired when a CSS transition has started
transitioning.
