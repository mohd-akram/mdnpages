.\" Automatically generated by Pandoc 3.4
.\"
.TH "FinalizationRegistry.unregister" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FinalizationRegistry.unregister \-
FinalizationRegistry.prototype.unregister()
.SH SYNOPSIS
The \f[B]\f[CB]unregister()\f[B]\f[R] method of
\f[CR]FinalizationRegistry\f[R] instances unregisters a target value
from this \f[CR]FinalizationRegistry\f[R].
.SH SYNTAX
.IP
.EX
unregister(unregisterToken)
.EE
.SS Parameters
.TP
\f[B]unregisterToken\f[R]
The token used with the \f[CR]register()\f[R] method when registering
the target value.
Multiple cells registered with the same \f[CR]unregisterToken\f[R] will
be unregistered together.
.SS Return value
A boolean value that is \f[CR]true\f[R] if at least one cell was
unregistered and \f[CR]false\f[R] if no cell was unregistered.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]unregisterToken\f[R] is not an object or a
non\-registered symbol.
.SH DESCRIPTION
When a target value has been reclaimed, it is no longer registered in
the registry.
There is no need to call \f[CR]unregister\f[R] in your cleanup callback.
Only call \f[CR]unregister\f[R] if you haven\[cq]t received a cleanup
callback and no longer need to receive one.
.SH EXAMPLES
.SS Using unregister
This example shows registering a target object using that same object as
the unregister token, then later unregistering it via
\f[CR]unregister\f[R]:
.IP
.EX
\f[B]class\f[R] Thingy {
  \f[B]static\f[R] #cleanup = (label) \f[B]=>\f[R] {
    \f[I]//               \[ha]\[ha]\[ha]\[ha]\[ha]−−−−− held value\f[R]
    console.error(
      \[ga]The \[dq]release\[dq] method was never called for the object with the label \[dq]${label}\[dq]\[ga],
    );
  };
  #registry = \f[B]new\f[R] FinalizationRegistry(Thingy.#cleanup);

  \f[I]/**\f[R]
\f[I]   * Constructs a \[ga]Thingy\[ga] instance.\f[R]
\f[I]   * Be sure to call \[ga]release\[ga] when you\[aq]re done with it.\f[R]
\f[I]   *\f[R]
\f[I]   * \f[R]\f[BI]\[at]param\f[R]\f[I] \f[R]\f[BI]label\f[R]\f[I] A label for the \[ga]Thingy\[ga].\f[R]
\f[I]   */\f[R]
  constructor(label) {
    \f[I]//                            vvvvv−−−−− held value\f[R]
    \f[B]this\f[R].#registry.register(\f[B]this\f[R], label, \f[B]this\f[R]);
    \f[I]//          target −−−−−\[ha]\[ha]\[ha]\[ha]         \[ha]\[ha]\[ha]\[ha]−−−−− unregister token\f[R]
  }

  \f[I]/**\f[R]
\f[I]   * Releases resources held by this \[ga]Thingy\[ga] instance.\f[R]
\f[I]   */\f[R]
  release() {
    \f[B]this\f[R].#registry.unregister(\f[B]this\f[R]);
    \f[I]//                        \[ha]\[ha]\[ha]\[ha]−−−−− unregister token\f[R]
  }
}
.EE
.PP
This example shows registering a target object using a different object
as its unregister token:
.IP
.EX
\f[B]class\f[R] Thingy {
  \f[B]static\f[R] #cleanup = (file) \f[B]=>\f[R] {
    \f[I]//               \[ha]\[ha]\[ha]\[ha]−−−−− held value\f[R]
    console.error(
      \[ga]The \[dq]release\[dq] method was never called for the \[dq]Thingy\[dq] for the file \[dq]${file.name}\[dq]\[ga],
    );
  };
  #registry = \f[B]new\f[R] FinalizationRegistry(Thingy.#cleanup);
  #file;

  \f[I]/**\f[R]
\f[I]   * Constructs a \[ga]Thingy\[ga] instance for the given file.\f[R]
\f[I]   * Be sure to call \[ga]release\[ga] when you\[aq]re done with it.\f[R]
\f[I]   *\f[R]
\f[I]   * \f[R]\f[BI]\[at]param\f[R]\f[I] \f[R]\f[BI]filename\f[R]\f[I] The name of the file.\f[R]
\f[I]   */\f[R]
  constructor(filename) {
    \f[B]this\f[R].#file = File.open(filename);
    \f[I]//                            vvvvv−−−−− held value\f[R]
    \f[B]this\f[R].#registry.register(\f[B]this\f[R], label, \f[B]this\f[R].#file);
    \f[I]//          target −−−−−\[ha]\[ha]\[ha]\[ha]         \[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]−−−−− unregister token\f[R]
  }

  \f[I]/**\f[R]
\f[I]   * Releases resources held by this \[ga]Thingy\[ga] instance.\f[R]
\f[I]   */\f[R]
  release() {
    \f[B]if\f[R] (\f[B]this\f[R].#file) {
      \f[B]this\f[R].#registry.unregister(\f[B]this\f[R].#file);
      \f[I]//                        \[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]\[ha]−−−−− unregister token\f[R]
      File.close(\f[B]this\f[R].#file);
      \f[B]this\f[R].#file = \f[B]null\f[R];
    }
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]FinalizationRegistry\f[R]
