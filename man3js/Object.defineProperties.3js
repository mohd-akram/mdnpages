.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Object.defineProperties" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.defineProperties \- Object.defineProperties()
.SH SYNOPSIS
The \f[B]\f[CB]Object.defineProperties()\f[B]\f[R] static method defines
new or modifies existing properties directly on an object, returning the
object.
.SH SYNTAX
.IP
.EX
Object.defineProperties(obj, props)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object on which to define or modify properties.
.TP
\f[B]props\f[R]
An object whose keys represent the names of properties to be defined or
modified and whose values are objects describing those properties.
Each value in \f[CR]props\f[R] must be either a data descriptor or an
accessor descriptor; it cannot be both (see
\f[CR]Object.defineProperty()\f[R] for more details).
.RS
.PP
Data descriptors and accessor descriptors may optionally contain the
following keys:
.TP
\f[B]configurable\f[R]
\f[CR]true\f[R] if and only if the type of this property descriptor may
be changed and if the property may be deleted from the corresponding
object.
\f[B]Defaults to \f[CB]false\f[B].\f[R]
.TP
\f[B]enumerable\f[R]
\f[CR]true\f[R] if and only if this property shows up during enumeration
of the properties on the corresponding object.
\f[B]Defaults to \f[CB]false\f[B].\f[R]
.PP
A data descriptor also has the following optional keys:
.TP
\f[B]value\f[R]
The value associated with the property.
Can be any valid JavaScript value (number, object, function, etc.).
\f[B]Defaults to \f[CB]undefined\f[B].\f[R]
.TP
\f[B]writable\f[R]
\f[CR]true\f[R] if and only if the value associated with the property
may be changed with an assignment operator.
\f[B]Defaults to \f[CB]false\f[B].\f[R]
.PP
An accessor descriptor also has the following optional keys:
.TP
\f[B]get\f[R]
A function which serves as a getter for the property, or
\f[CR]undefined\f[R] if there is no getter.
The function\[cq]s return value will be used as the value of the
property.
\f[B]Defaults to \f[CB]undefined\f[B].\f[R]
.TP
\f[B]set\f[R]
A function which serves as a setter for the property, or
\f[CR]undefined\f[R] if there is no setter.
The function will receive as its only argument the new value being
assigned to the property.
\f[B]Defaults to \f[CB]undefined\f[B].\f[R]
.PP
If a descriptor has neither of \f[CR]value\f[R], \f[CR]writable\f[R],
\f[CR]get\f[R] and \f[CR]set\f[R] keys, it is treated as a data
descriptor.
If a descriptor has both \f[CR]value\f[R] or \f[CR]writable\f[R] and
\f[CR]get\f[R] or \f[CR]set\f[R] keys, an exception is thrown.
.RE
.SS Return value
The object that was passed to the function.
.SH EXAMPLES
.SS Using Object.defineProperties
.IP
.EX
\f[B]const\f[R] obj = {};
Object.defineProperties(obj, {
  property1: {
    value: \f[B]true\f[R],
    writable: \f[B]true\f[R],
  },
  property2: {
    value: \[dq]Hello\[dq],
    writable: \f[B]false\f[R],
  },
  \f[I]// etc. etc.\f[R]
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-object
Polyfill of \f[CR]Object.defineProperties\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Object.defineProperty()\f[R]
.IP \[bu] 2
\f[CR]Object.keys()\f[R]
.IP \[bu] 2
Enumerability and ownership of properties
