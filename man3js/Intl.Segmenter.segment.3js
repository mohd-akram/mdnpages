.\" Automatically generated by Pandoc 3.4
.\"
.TH "Intl.Segmenter.segment" "JS" "April 28, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.Segmenter.segment \- Intl.Segmenter.prototype.segment()
.SH SYNOPSIS
The \f[B]\f[CB]segment()\f[B]\f[R] method of \f[CR]Intl.Segmenter\f[R]
instances segments a string according to the locale and granularity of
this \f[CR]Intl.Segmenter\f[R] object.
.SH SYNTAX
.IP
.EX
segment(input)
.EE
.SS Parameters
.TP
\f[B]input\f[R]
The text to be segmented as a string.
.SS Return value
A new iterable \f[CR]Segments\f[R] object containing the segments of the
input string, using the segmenter\[cq]s locale and granularity.
.SH EXAMPLES
.IP
.EX
\f[I]// Create a locale\-specific word segmenter\f[R]
\f[B]const\f[R] segmenter = \f[B]new\f[R] Intl.Segmenter(\[dq]fr\[dq], { granularity: \[dq]word\[dq] });

\f[I]// Use it to get an iterator over the segments of a string\f[R]
\f[B]const\f[R] input = \[dq]Moi ? N\[aq]est\-ce pas ?\[dq];
\f[B]const\f[R] segments = segmenter.segment(input);

\f[I]// Use that for segmentation\f[R]
\f[B]for\f[R] (\f[B]const\f[R] { segment, index, isWordLike } \f[B]of\f[R] segments) {
  console.log(
    \[dq]segment at code units [%d, %d]: «%s»%s\[dq],
    index,
    index + segment.length,
    segment,
    isWordLike ? \[dq] (word\-like)\[dq] : \[dq]\[dq],
  );
}
\f[I]// segment at code units [0, 3]: «Moi» (word\-like)\f[R]
\f[I]// segment at code units [3, 4]: « »\f[R]
\f[I]// segment at code units [4, 5]: «?»\f[R]
\f[I]// segment at code units [5, 6]: « »\f[R]
\f[I]// segment at code units [6, 11]: «N\[aq]est» (word\-like)\f[R]
\f[I]// segment at code units [11, 12]: «\-»\f[R]
\f[I]// segment at code units [12, 14]: «ce» (word\-like)\f[R]
\f[I]// segment at code units [14, 15]: « »\f[R]
\f[I]// segment at code units [15, 18]: «pas» (word\-like)\f[R]
\f[I]// segment at code units [18, 19]: « »\f[R]
\f[I]// segment at code units [19, 20]: «?»\f[R]
.EE
