.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RTCIceTransport.getRemoteCandidates" "JS" "March 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCIceTransport.getRemoteCandidates \- RTCIceTransport:
getRemoteCandidates() method
.SH SYNOPSIS
The \f[B]\f[CB]getRemoteCandidates()\f[B]\f[R] method of the
\f[CR]RTCIceTransport\f[R] interface returns an array that contains one
\f[CR]RTCIceCandidate\f[R] for each of the candidates that have been
received from the remote peer so far during the current ICE gathering
session.
.PP
Each time your signaling code calls
\f[CR]RTCPeerConnection.addIceCandidate()\f[R] to add a received
candidate to the ICE session, the ICE agent places it in the list
returned by this function.
.SH SYNTAX
.IP
.EX
getRemoteCandidates()
.EE
.SS Parameters
None.
.SS Return value
An array containing one \f[CR]RTCIceCandidate\f[R] object for each
candidate that has been received so far from the remote peer during the
current ICE candidate gathering session.
.PP
It\[cq]s important to keep in mind that there\[cq]s no way to correlate
these remote candidates with compatible local candidates.
To find the best match found so far, call
\f[CR]RTCIceTransport.getSelectedCandidatePair()\f[R].
.SH EXAMPLE
This simple example gets the remote candidate list from the
\f[CR]RTCIceTransport\f[R] for the first \f[CR]RTCRtpSender\f[R] on the
\f[CR]RTCPeerConnection\f[R], then outputs to the console all of the
candidates in the list.
.IP
.EX
\f[B]const\f[R] remoteCandidates = pc
  .getSenders()[0]
  .transport.transport.getRemoteCandidates();

remoteCandidates.forEach((candidate, index) \f[B]=>\f[R] {
  console.log(\[ga]Candidate ${index}: ${candidate.candidate}\[ga]);
});
.EE
