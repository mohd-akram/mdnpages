'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "OSCILLATORNODE" "3JS" "July 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
OscillatorNode \- OscillatorNode
.SH SYNOPSIS
The \f[B]\f[CB]OscillatorNode\f[B]\f[R] interface represents a periodic
waveform, such as a sine wave.
It is an \f[CR]AudioScheduledSourceNode\f[R] audio\-processing module
that causes a specified frequency of a given wave to be created\(emin
effect, a constant tone.
.PP
.TS
tab(@);
l l.
T{
Number of inputs
T}@T{
\f[CR]0\f[R]
T}
T{
Number of outputs
T}@T{
\f[CR]1\f[R]
T}
T{
Channel count mode
T}@T{
\f[CR]max\f[R]
T}
T{
Channel count
T}@T{
\f[CR]2\f[R] (not used in the default count mode)
T}
T{
Channel interpretation
T}@T{
\f[CR]speakers\f[R]
T}
.TE
.SH CONSTRUCTOR
.TP
\f[B]OscillatorNode()\f[R]
Creates a new instance of an \f[CR]OscillatorNode\f[R] object,
optionally providing an object specifying default values for the
node\(cqs properties.
As an alternative, you can use the
\f[CR]BaseAudioContext.createOscillator()\f[R] factory method; see
Creating an AudioNode.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parent,
\f[CI]AudioScheduledSourceNode\f[I].\f[R]
.TP
\f[B]OscillatorNode.frequency\f[R]
An a\-rate \f[CR]AudioParam\f[R] representing the frequency of
oscillation in hertz (though the \f[CR]AudioParam\f[R] returned is
read\-only, the value it represents is not).
The default value is 440 Hz (a standard middle\-A note).
.TP
\f[B]OscillatorNode.detune\f[R]
An a\-rate \f[CR]AudioParam\f[R] representing detuning of oscillation in
cents (though the \f[CR]AudioParam\f[R] returned is read\-only, the
value it represents is not).
The default value is 0.
.TP
\f[B]OscillatorNode.type\f[R]
A string which specifies the shape of waveform to play; this can be one
of a number of standard values, or \f[CR]custom\f[R] to use a
\f[CR]PeriodicWave\f[R] to describe a custom waveform.
Different waves will produce different tones.
Standard values are \f[CR]\(dqsine\(dq\f[R], \f[CR]\(dqsquare\(dq\f[R],
\f[CR]\(dqsawtooth\(dq\f[R], \f[CR]\(dqtriangle\(dq\f[R] and
\f[CR]\(dqcustom\(dq\f[R].
The default is \f[CR]\(dqsine\(dq\f[R].
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent,
\f[CI]AudioScheduledSourceNode\f[I].\f[R]
.TP
\f[B]OscillatorNode.setPeriodicWave()\f[R]
Sets a \f[CR]PeriodicWave\f[R] which describes a periodic waveform to be
used instead of one of the standard waveforms; calling this sets the
\f[CR]type\f[R] to \f[CR]custom\f[R].
.TP
\f[B]AudioScheduledSourceNode.start()\f[R]
Specifies the exact time to start playing the tone.
.TP
\f[B]AudioScheduledSourceNode.stop()\f[R]
Specifies the time to stop playing the tone.
.SH EVENTS
\f[I]Also inherits events from its parent,
\f[CI]AudioScheduledSourceNode\f[I].\f[R]
.SH EXAMPLES
The following example shows basic usage of an \f[CR]AudioContext\f[R] to
create an oscillator node and to start playing a tone on it.
For an applied example, check out our \c
.UR https://mdn.github.io/webaudio-examples/violent-theremin/
Violent Theremin demo
.UE \c
\ (\c
.UR https://github.com/mdn/webaudio-examples/blob/main/violent-theremin/scripts/app.js
see app.js
.UE \c
\ for relevant code).
.IP
.EX
\f[I]// create web audio api context\f[R]
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[I]// create Oscillator node\f[R]
\f[B]const\f[R] oscillator = audioCtx.createOscillator();

oscillator.type = \(dqsquare\(dq;
oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); \f[I]// value in hertz\f[R]
oscillator.connect(audioCtx.destination);
oscillator.start();
.EE
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
