.\" Automatically generated by Pandoc 3.4
.\"
.TH "RegExp.hasIndices" "JS" "September 12, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.hasIndices \- RegExp.prototype.hasIndices
.SH SYNOPSIS
The \f[B]\f[CB]hasIndices\f[B]\f[R] accessor property of
\f[CR]RegExp\f[R] instances returns whether or not the \f[CR]d\f[R] flag
is used with this regular expression.
.SH DESCRIPTION
\f[CR]RegExp.prototype.hasIndices\f[R] has the value \f[CR]true\f[R] if
the \f[CR]d\f[R] flag was used; otherwise, \f[CR]false\f[R].
The \f[CR]d\f[R] flag indicates that the result of a regular expression
match should contain the start and end indices of the substrings of each
capture group.
It does not change the regex\[cq]s interpretation or matching behavior
in any way, but only provides additional information in the matching
result.
.PP
This flag primarily affects the return value of \f[CR]exec()\f[R].
If the \f[CR]d\f[R] flag is present, the array returned by
\f[CR]exec()\f[R] has an additional \f[CR]indices\f[R] property as
described in the \f[CR]exec()\f[R] method\[cq]s return value.
Because all other regex\-related methods (such as
\f[CR]String.prototype.match()\f[R]) call \f[CR]exec()\f[R] internally,
they will also return the indices if the regex has the \f[CR]d\f[R]
flag.
.PP
The set accessor of \f[CR]hasIndices\f[R] is \f[CR]undefined\f[R].
You cannot change this property directly.
.SH EXAMPLES
There\[cq]s a more detailed usage example at Groups and backreferences >
Using groups and match indices.
.SS Using hasIndices
.IP
.EX
\f[B]const\f[R] str1 = \[dq]foo bar foo\[dq];

\f[B]const\f[R] regex1 = /foo/dg;

console.log(regex1.hasIndices); \f[I]// true\f[R]

console.log(regex1.exec(str1).indices[0]); \f[I]// [0, 3]\f[R]
console.log(regex1.exec(str1).indices[0]); \f[I]// [8, 11]\f[R]

\f[B]const\f[R] str2 = \[dq]foo bar foo\[dq];

\f[B]const\f[R] regex2 = /foo/;

console.log(regex2.hasIndices); \f[I]// false\f[R]

console.log(regex2.exec(str2).indices); \f[I]// undefined\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]RegExp.prototype.lastIndex\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.exec()\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.dotAll\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.global\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.ignoreCase\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.multiline\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.source\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.sticky\f[R]
.IP \[bu] 2
\f[CR]RegExp.prototype.unicode\f[R]
