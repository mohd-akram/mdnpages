.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MEDIADEVICES.ENUMERATEDEVICES" "3JS" "March 13, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaDevices.enumerateDevices \- MediaDevices: enumerateDevices() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]enumerateDevices()\f[B]\f[R] method of the
\f[CR]MediaDevices\f[R] interface requests a list of the currently
available media input and output devices, such as microphones, cameras,
headsets, and so forth.
The returned \f[CR]Promise\f[R] is resolved with an array of
\f[CR]MediaDeviceInfo\f[R] objects describing the devices.
.PP
The returned list will omit any devices that are blocked by the document
Permission Policy: \f[CR]microphone\f[R], \f[CR]camera\f[R],
\f[CR]speaker\-selection\f[R] (for output devices), and so on.
Access to particular non\-default devices is also gated by the
Permissions API, and the list will omit devices for which the user has
not granted explicit permission.
.SH SYNTAX
.IP
.EX
enumerateDevices()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that is fulfilled with an array of
\f[CR]MediaDeviceInfo\f[R] objects.
Each object in the array describes one of the available media input and
output devices.
The order is significant \(em the default capture devices will be listed
first.
.PP
Other than default devices, only devices for which permission has been
granted are \(lqavailable\(rq.
.PP
If the media device is an input device, an \f[CR]InputDeviceInfo\f[R]
object will be returned instead.
.PP
If enumeration fails, the promise is rejected.
.SH SECURITY REQUIREMENTS
Access to the API is subject to the following constraints:
.IP \(bu 2
The method must be called in a secure context.
.IP \(bu 2
The document must be fully active and its visibility must be
\(lqvisible\(rq.
.SH EXAMPLES
Here\(cqs an example of using \f[CR]enumerateDevices()\f[R].
It outputs a list of the device IDs, with their labels if available.
.IP
.EX
\f[B]if\f[R] (!navigator.mediaDevices?.enumerateDevices) {
  console.log(\(dqenumerateDevices() not supported.\(dq);
} \f[B]else\f[R] {
  \f[I]// List cameras and microphones.\f[R]
  navigator.mediaDevices
    .enumerateDevices()
    .then((devices) \f[B]=>\f[R] {
      devices.forEach((device) \f[B]=>\f[R] {
        console.log(\(ga${device.kind}: ${device.label} id = ${device.deviceId}\(ga);
      });
    })
    .catch((err) \f[B]=>\f[R] {
      console.error(\(ga${err.name}: ${err.message}\(ga);
    });
}
.EE
.PP
This might produce:
.IP
.EX
videoinput: id = csO9c0YpAf274OuCPUA53CNE0YHlIr2yXCi+SqfBZZ8=
audioinput: id = RKxXByjnabbADGQNNZqLVLdmXlS0YkETYCIbg+XxnvM=
audioinput: id = r2/xw1xUPIyZunfV1lGrKOma5wTOvCkWfZ368XCndm0=
.EE
.PP
or if one or more \f[CR]MediaStream\f[R]s are active or persistent
permissions are granted:
.IP
.EX
videoinput: FaceTime HD Camera (Built\-in) id=csO9c0YpAf274OuCPUA53CNE0YHlIr2yXCi+SqfBZZ8=
audioinput: default (Built\-in Microphone) id=RKxXByjnabbADGQNNZqLVLdmXlS0YkETYCIbg+XxnvM=
audioinput: Built\-in Microphone id=r2/xw1xUPIyZunfV1lGrKOma5wTOvCkWfZ368XCndm0=
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]MediaDevices.getUserMedia\f[R]
.IP \(bu 2
WebRTC \- the introductory page to the API
.IP \(bu 2
Media Capture and Streams API \- the API for the media stream objects
.IP \(bu 2
Taking webcam photos \- a tutorial on using \f[CR]getUserMedia()\f[R]
for taking photos rather than video.
