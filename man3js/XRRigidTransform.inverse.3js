.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "XRRigidTransform.inverse" "JS" "February 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRRigidTransform.inverse \- XRRigidTransform: inverse property
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The read\-only \f[B]\f[CB]inverse\f[B]\f[R] property of the
\f[CR]XRRigidTransform\f[R] interface returns another
\f[CR]XRRigidTransform\f[R] object which is the inverse of its owning
transform.
That is, you can always get the inverse of any
\f[CR]XRRigidTransform\f[R] using its \f[CR]inverse\f[R] property,
instead of having to explicitly generate it.
.SH VALUE
An \f[CR]XRRigidTransform\f[R] which contains the inverse of the
\f[CR]XRRigidTransform\f[R] on which it\[cq]s accessed.
.PP
Applying the inverse of a transform to any object previously transformed
by the parent \f[CR]XRRigidTransform\f[R] always undoes the
transformation, resulting in the object returning to its previous pose.
In other words, its position and orientation both return to their prior
configurations.
.SH EXAMPLES
In this example, the model view matrix for an object is computed by
taking the view matrix and multiplying it by the object\[cq]s pose
matrix.
.IP
.EX
\f[B]const\f[R] modelViewMatrix = mat4.create();

\f[B]for\f[R] (\f[B]const\f[R] view \f[B]of\f[R] pose.view) {
  \f[B]const\f[R] viewport = glLayer.getViewport(view);
  gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);

  \f[I]// \&...\f[R]

  mat4.multiply(modelViewMatrix, view.transform.inverse.matrix, objectMatrix);
  gl.uniformMatrix4fv(
    programInfo.uniformLocations.modelViewMatrix,
    \f[B]false\f[R],
    modelViewMatrix,
  );

  \f[I]// \&...\f[R]
}
.EE
.PP
This outline of a renderer\[cq]s core code shows how the pose\[cq]s view
gets represented by taking its transform\[cq]s inverse\[cq]s matrix as
the model view matrix used to transform objects based on the
viewer\[cq]s position and orientation.
The inverse\[cq]s matrix is multiplied by the object\[cq]s matrix to get
the model view matrix, which is then passed into the shader program by
setting a uniform to contain that information.
