.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HTMLCANVASELEMENT.CONTEXTLOST_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLCanvasElement.contextlost_event \- HTMLCanvasElement: contextlost
event
.SH SYNOPSIS
The \f[B]\f[CB]contextlost\f[B]\f[R] event of the Canvas API is fired if
the user agent detects that the backing storage associated with a
\f[CR]CanvasRenderingContext2D\f[R] context is lost.
Contexts can be lost for several reasons like driver crashes or the
application runs out of memory, etc.
.PP
By default the user agent will attempt to restore the context and then
fire the \f[CR]contextrestored\f[R] event.
User code can prevent the context from being restored by calling
\f[CR]Event.preventDefault()\f[R] during event handling.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqcontextlost\(dq, (event) => { })

oncontextlost = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLE
The code fragment below detects the \f[CR]contextlost\f[R] event.
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);

canvas.addEventListener(\(dqcontextlost\(dq, (event) \f[B]=>\f[R] {
  console.log(event);
});
.EE
.PP
To prevent the context from being restored the code might instead look
like this:
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);

canvas.addEventListener(\(dqcontextlost\(dq, (event) \f[B]=>\f[R] {
  event.preventDefault();
});
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]HTMLCanvasElement: contextrestored\f[R] event
.IP \(bu 2
\f[CR]CanvasRenderingContext2D.isContextLost()\f[R]
.IP \(bu 2
\f[CR]OffscreenCanvas: contextlost\f[R] event
