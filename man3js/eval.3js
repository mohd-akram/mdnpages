.\" Automatically generated by Pandoc 3.4
.\"
.TH "eval" "JS" "October 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
eval \- eval()
.SH SYNOPSIS
.RS
.PP
\f[B]Warning:\f[R] Executing JavaScript from a string is an enormous
security risk.
It is far too easy for a bad actor to run arbitrary code when you use
\f[CR]eval()\f[R].
See Never use direct eval()!, below.
.RE
.PP
The \f[B]\f[CB]eval()\f[B]\f[R] function evaluates JavaScript code
represented as a string and returns its completion value.
The source is parsed as a script.
.SH SYNTAX
.IP
.EX
eval(script)
.EE
.SS Parameters
.TP
\f[B]script\f[R]
A string representing a JavaScript expression, statement, or sequence of
statements.
The expression can include variables and properties of existing objects.
It will be parsed as a script, so \f[CR]import\f[R] declarations (which
can only exist in modules) are not allowed.
.SS Return value
The completion value of evaluating the given code.
If the completion value is empty, \f[CR]undefined\f[R] is returned.
If \f[CR]script\f[R] is not a string primitive, \f[CR]eval()\f[R]
returns the argument unchanged.
.SS Exceptions
Throws any exception that occurs during evaluation of the code,
including \f[CR]SyntaxError\f[R] if \f[CR]script\f[R] fails to be parsed
as a script.
.SH DESCRIPTION
\f[CR]eval()\f[R] is a function property of the global object.
.PP
The argument of the \f[CR]eval()\f[R] function is a string.
It will evaluate the source string as a script body, which means both
statements and expressions are allowed.
It returns the completion value of the code.
For expressions, it\[cq]s the value the expression evaluates to.
Many statements and declarations have completion values as well, but the
result may be surprising (for example, the completion value of an
assignment is the assigned value, but the completion value of
\f[CR]let\f[R] is undefined), so it\[cq]s recommended to not rely on
statements\[cq] completion values.
.PP
In strict mode, declaring a variable named \f[CR]eval\f[R] or
re\-assigning \f[CR]eval\f[R] is a \f[CR]SyntaxError\f[R].
.PP
\f[B]Bad\f[R]
.IP
.EX
\[dq]use strict\[dq];

const eval = 1; // SyntaxError: Unexpected eval or arguments in strict mode
.EE
.PP
If the argument of \f[CR]eval()\f[R] is not a string, \f[CR]eval()\f[R]
returns the argument unchanged.
In the following example, passing a \f[CR]String\f[R] object instead of
a primitive causes \f[CR]eval()\f[R] to return the \f[CR]String\f[R]
object rather than evaluating the string.
.IP
.EX
eval(\f[B]new\f[R] String(\[dq]2 + 2\[dq])); \f[I]// returns a String object containing \[dq]2 + 2\[dq]\f[R]
eval(\[dq]2 + 2\[dq]); \f[I]// returns 4\f[R]
.EE
.PP
To work around the issue in a generic fashion, you can coerce the
argument to a string yourself before passing it to \f[CR]eval()\f[R].
.IP
.EX
\f[B]const\f[R] expression = \f[B]new\f[R] String(\[dq]2 + 2\[dq]);
eval(String(expression)); \f[I]// returns 4\f[R]
.EE
.SS Direct and indirect eval
There are two modes of \f[CR]eval()\f[R] calls: \f[I]direct\f[R] eval
and \f[I]indirect\f[R] eval.
Direct eval, as the name implies, refers to \f[I]directly\f[R] calling
the global \f[CR]eval\f[R] function with \f[CR]eval(...)\f[R].
Everything else, including invoking it via an aliased variable, via a
member access or other expression, or through the optional chaining
\f[CR]?.\f[R] operator, is indirect.
.IP
.EX
\f[I]// Direct call\f[R]
eval(\[dq]x + y\[dq]);

\f[I]// Indirect call using the comma operator to return eval\f[R]
(0, eval)(\[dq]x + y\[dq]);

\f[I]// Indirect call through optional chaining\f[R]
eval?.(\[dq]x + y\[dq]);

\f[I]// Indirect call using a variable to store and return eval\f[R]
\f[B]const\f[R] myEval = eval;
myEval(\[dq]x + y\[dq]);

\f[I]// Indirect call through member access\f[R]
\f[B]const\f[R] obj = { eval };
obj.eval(\[dq]x + y\[dq]);
.EE
.PP
Indirect eval can be seen as if the code is evaluated within a separate
\f[CR]<script>\f[R] tag.
This means:
.IP \[bu] 2
Indirect eval works in the global scope rather than the local scope, and
the code being evaluated doesn\[cq]t have access to local variables
within the scope where it\[cq]s being called.
.RS 2
.IP
.EX
\f[B]function\f[R] test() {
  \f[B]const\f[R] x = 2;
  \f[B]const\f[R] y = 4;
  \f[I]// Direct call, uses local scope\f[R]
  console.log(eval(\[dq]x + y\[dq])); \f[I]// Result is 6\f[R]
  \f[I]// Indirect call, uses global scope\f[R]
  console.log(eval?.(\[dq]x + y\[dq])); \f[I]// Throws because x is not defined in global scope\f[R]
}
.EE
.RE
.IP \[bu] 2
Indirect \f[CR]eval\f[R] does not inherit the strictness of the
surrounding context, and is only in strict mode if the source string
itself has a \f[CR]\[dq]use strict\[dq]\f[R] directive.
.RS 2
.IP
.EX
\f[B]function\f[R] nonStrictContext() {
  eval?.(\[ga]with (Math) console.log(PI);\[ga]);
}
\f[B]function\f[R] strictContext() {
  \[dq]use strict\[dq];
  eval?.(\[ga]with (Math) console.log(PI);\[ga]);
}
\f[B]function\f[R] strictContextStrictEval() {
  \[dq]use strict\[dq];
  eval?.(\[ga]\[dq]use strict\[dq]; with (Math) console.log(PI);\[ga]);
}
nonStrictContext(); \f[I]// Logs 3.141592653589793\f[R]
strictContext(); \f[I]// Logs 3.141592653589793\f[R]
strictContextStrictEval(); \f[I]// Uncaught SyntaxError: Strict mode code may not include a with statement\f[R]
.EE
.PP
On the other hand, direct eval inherits the strictness of the invoking
context.
.IP
.EX
\f[B]function\f[R] nonStrictContext() {
  eval(\[ga]with (Math) console.log(PI);\[ga]);
}
\f[B]function\f[R] strictContext() {
  \[dq]use strict\[dq];
  eval(\[ga]with (Math) console.log(PI);\[ga]);
}
\f[B]function\f[R] strictContextStrictEval() {
  \[dq]use strict\[dq];
  eval(\[ga]\[dq]use strict\[dq]; with (Math) console.log(PI);\[ga]);
}
nonStrictContext(); \f[I]// Logs 3.141592653589793\f[R]
strictContext(); \f[I]// Uncaught SyntaxError: Strict mode code may not include a with statement\f[R]
strictContextStrictEval(); \f[I]// Uncaught SyntaxError: Strict mode code may not include a with statement\f[R]
.EE
.RE
.IP \[bu] 2
\f[CR]var\f[R]\-declared variables and function declarations would go
into the surrounding scope if the source string is not interpreted in
strict mode \[em] for indirect eval, they become global variables.
If it\[cq]s a direct eval in a strict mode context, or if the
\f[CR]eval\f[R] source string itself is in strict mode, then
\f[CR]var\f[R] and function declarations do not \[lq]leak\[rq] into the
surrounding scope.
.RS 2
.IP
.EX
\f[I]// Neither context nor source string is strict,\f[R]
\f[I]// so var creates a variable in the surrounding scope\f[R]
eval(\[dq]var a = 1;\[dq]);
console.log(a); \f[I]// 1\f[R]
\f[I]// Context is not strict, but eval source is strict,\f[R]
\f[I]// so b is scoped to the evaluated script\f[R]
eval(\[dq]\[aq]use strict\[aq]; var b = 1;\[dq]);
console.log(b); \f[I]// ReferenceError: b is not defined\f[R]

\f[B]function\f[R] strictContext() {
  \[dq]use strict\[dq];
  \f[I]// Context is strict, but this is indirect and the source\f[R]
  \f[I]// string is not strict, so c is still global\f[R]
  eval?.(\[dq]var c = 1;\[dq]);
  \f[I]// Direct eval in a strict context, so d is scoped\f[R]
  eval(\[dq]var d = 1;\[dq]);
}
strictContext();
console.log(c); \f[I]// 1\f[R]
console.log(d); \f[I]// ReferenceError: d is not defined\f[R]
.EE
.PP
\f[CR]let\f[R] and \f[CR]const\f[R] declarations within the evaluated
string are always scoped to that script.
.RE
.IP \[bu] 2
Direct eval may have access to additional contextual expressions.
For example, in a function\[cq]s body, one can use
\f[CR]new.target\f[R]:
.RS 2
.IP
.EX
\f[B]function\f[R] Ctor() {
  eval(\[dq]console.log(new.target)\[dq]);
}
\f[B]new\f[R] Ctor(); \f[I]// [Function: Ctor]\f[R]
.EE
.RE
.SS Never use direct eval()!
Using direct \f[CR]eval()\f[R] suffers from multiple problems:
.IP \[bu] 2
\f[CR]eval()\f[R] executes the code it\[cq]s passed with the privileges
of the caller.
If you run \f[CR]eval()\f[R] with a string that could be affected by a
malicious party, you may end up running malicious code on the user\[cq]s
machine with the permissions of your webpage / extension.
More importantly, allowing third\-party code to access the scope in
which \f[CR]eval()\f[R] was invoked (if it\[cq]s a direct eval) can lead
to possible attacks that reads or changes local variables.
.IP \[bu] 2
\f[CR]eval()\f[R] is slower than the alternatives, since it has to
invoke the JavaScript interpreter, while many other constructs are
optimized by modern JS engines.
.IP \[bu] 2
Modern JavaScript interpreters convert JavaScript to machine code.
This means that any concept of variable naming gets obliterated.
Thus, any use of \f[CR]eval()\f[R] will force the browser to do long
expensive variable name lookups to figure out where the variable exists
in the machine code and set its value.
Additionally, new things can be introduced to that variable through
\f[CR]eval()\f[R], such as changing the type of that variable, forcing
the browser to re\-evaluate all of the generated machine code to
compensate.
.IP \[bu] 2
Minifiers give up on any minification if the scope is transitively
depended on by \f[CR]eval()\f[R], because otherwise \f[CR]eval()\f[R]
cannot read the correct variable at runtime.
.PP
There are many cases where the use of \f[CR]eval()\f[R] or related
methods can be optimized or avoided altogether.
.SS Using indirect eval()
Consider this code:
.IP
.EX
\f[B]function\f[R] looseJsonParse(obj) {
  \f[B]return\f[R] eval(\[ga](${obj})\[ga]);
}
console.log(looseJsonParse(\[dq]{ a: 4 \- 1, b: function () {}, c: new Date() }\[dq]));
.EE
.PP
Simply using indirect eval and forcing strict mode can make the code
much better:
.IP
.EX
\f[B]function\f[R] looseJsonParse(obj) {
  \f[B]return\f[R] eval?.(\[ga]\[dq]use strict\[dq];(${obj})\[ga]);
}
console.log(looseJsonParse(\[dq]{ a: 4 \- 1, b: function () {}, c: new Date() }\[dq]));
.EE
.PP
The two code snippets above may seem to work the same way, but they do
not; the first one using direct eval suffers from multiple problems.
.IP \[bu] 2
It is a great deal slower, due to more scope inspections.
Notice \f[CR]c: new Date()\f[R] in the evaluated string.
In the indirect eval version, the object is being evaluated in the
global scope, so it is safe for the interpreter to assume that
\f[CR]Date\f[R] refers to the global \f[CR]Date()\f[R] constructor
instead of a local variable called \f[CR]Date\f[R].
However, in the code using direct eval, the interpreter cannot assume
this.
For example, in the following code, \f[CR]Date\f[R] in the evaluated
string doesn\[cq]t refer to \f[CR]window.Date()\f[R].
.RS 2
.IP
.EX
\f[B]function\f[R] looseJsonParse(obj) {
  \f[B]function\f[R] Date() {}
  \f[B]return\f[R] eval(\[ga](${obj})\[ga]);
}
console.log(looseJsonParse(\[ga]{ a: 4 \- 1, b: function () {}, c: new Date() }\[ga]));
.EE
.PP
Thus, in the \f[CR]eval()\f[R] version of the code, the browser is
forced to make the expensive lookup call to check to see if there are
any local variables called \f[CR]Date()\f[R].
.RE
.IP \[bu] 2
If not using strict mode, \f[CR]var\f[R] declarations within the
\f[CR]eval()\f[R] source becomes variables in the surrounding scope.
This leads to hard\-to\-debug issues if the string is acquired from
external input, especially if there\[cq]s an existing variable with the
same name.
.IP \[bu] 2
Direct eval can read and mutate bindings in the surrounding scope, which
may lead to external input corrupting local data.
.IP \[bu] 2
When using direct \f[CR]eval\f[R], especially when the eval source
cannot be proven to be in strict mode, the engine \[em] and build tools
\[em] have to disable all optimizations related to inlining, because the
\f[CR]eval()\f[R] source can depend on any variable name in its
surrounding scope.
.PP
However, using indirect \f[CR]eval()\f[R] does not allow passing extra
bindings other than existing global variables for the evaluated source
to read.
If you need to specify additional variables that the evaluated source
should have access to, consider using the \f[CR]Function()\f[R]
constructor.
.SS Using the Function() constructor
The \f[CR]Function()\f[R] constructor is very similar to the indirect
eval example above: it also evaluates the JavaScript source passed to it
in the global scope without reading or mutating any local bindings, and
therefore allows engines to do more optimizations than direct
\f[CR]eval()\f[R].
.PP
The difference between \f[CR]eval()\f[R] and \f[CR]Function()\f[R] is
that the source string passed to \f[CR]Function()\f[R] is parsed as a
function body, not as a script.
There are a few nuances \[em] for example, you can use \f[CR]return\f[R]
statements at the top level of a function body, but not in a script.
.PP
The \f[CR]Function()\f[R] constructor is useful if you wish to create
local bindings within your eval source, by passing the variables as
parameter bindings.
.IP
.EX
\f[B]function\f[R] Date(n) {
  \f[B]return\f[R] [
    \[dq]Monday\[dq],
    \[dq]Tuesday\[dq],
    \[dq]Wednesday\[dq],
    \[dq]Thursday\[dq],
    \[dq]Friday\[dq],
    \[dq]Saturday\[dq],
    \[dq]Sunday\[dq],
  ][n % 7 || 0];
}
\f[B]function\f[R] runCodeWithDateFunction(obj) {
  \f[B]return\f[R] Function(\[dq]Date\[dq], \[ga]\[dq]use strict\[dq];return (${obj});\[ga])(Date);
}
console.log(runCodeWithDateFunction(\[dq]Date(5)\[dq])); \f[I]// Saturday\f[R]
.EE
.PP
Both \f[CR]eval()\f[R] and \f[CR]Function()\f[R] implicitly evaluate
arbitrary code, and are forbidden in strict CSP settings.
There are also additional safer (and faster!)
alternatives to \f[CR]eval()\f[R] or \f[CR]Function()\f[R] for common
use\-cases.
.SS Using bracket accessors
You should not use \f[CR]eval()\f[R] to access properties dynamically.
Consider the following example where the property of the object to be
accessed is not known until the code is executed.
This can be done with \f[CR]eval()\f[R]:
.IP
.EX
\f[B]const\f[R] obj = { a: 20, b: 30 };
\f[B]const\f[R] propName = getPropName(); \f[I]// returns \[dq]a\[dq] or \[dq]b\[dq]\f[R]

\f[B]const\f[R] result = eval(\[ga]obj.${propName}\[ga]);
.EE
.PP
However, \f[CR]eval()\f[R] is not necessary here \[em] in fact, it\[cq]s
more error\-prone, because if \f[CR]propName\f[R] is not a valid
identifier, it leads to a syntax error.
Moreover, if \f[CR]getPropName\f[R] is not a function you control, this
may lead to execution of arbitrary code.
Instead, use the property accessors, which are much faster and safer:
.IP
.EX
\f[B]const\f[R] obj = { a: 20, b: 30 };
\f[B]const\f[R] propName = getPropName(); \f[I]// returns \[dq]a\[dq] or \[dq]b\[dq]\f[R]
\f[B]const\f[R] result = obj[propName]; \f[I]// obj[\[dq]a\[dq]] is the same as obj.a\f[R]
.EE
.PP
You can even use this method to access descendant properties.
Using \f[CR]eval()\f[R], this would look like:
.IP
.EX
\f[B]const\f[R] obj = { a: { b: { c: 0 } } };
\f[B]const\f[R] propPath = getPropPath(); \f[I]// suppose it returns \[dq]a.b.c\[dq]\f[R]

\f[B]const\f[R] result = eval(\[ga]obj.${propPath}\[ga]); \f[I]// 0\f[R]
.EE
.PP
Avoiding \f[CR]eval()\f[R] here could be done by splitting the property
path and looping through the different properties:
.IP
.EX
\f[B]function\f[R] getDescendantProp(obj, desc) {
  \f[B]const\f[R] arr = desc.split(\[dq].\[dq]);
  \f[B]while\f[R] (arr.length) {
    obj = obj[arr.shift()];
  }
  \f[B]return\f[R] obj;
}

\f[B]const\f[R] obj = { a: { b: { c: 0 } } };
\f[B]const\f[R] propPath = getPropPath(); \f[I]// suppose it returns \[dq]a.b.c\[dq]\f[R]
\f[B]const\f[R] result = getDescendantProp(obj, propPath); \f[I]// 0\f[R]
.EE
.PP
Setting a property that way works similarly:
.IP
.EX
\f[B]function\f[R] setDescendantProp(obj, desc, value) {
  \f[B]const\f[R] arr = desc.split(\[dq].\[dq]);
  \f[B]while\f[R] (arr.length > 1) {
    obj = obj[arr.shift()];
  }
  \f[B]return\f[R] (obj[arr[0]] = value);
}

\f[B]const\f[R] obj = { a: { b: { c: 0 } } };
\f[B]const\f[R] propPath = getPropPath(); \f[I]// suppose it returns \[dq]a.b.c\[dq]\f[R]
\f[B]const\f[R] result = setDescendantProp(obj, propPath, 1); \f[I]// obj.a.b.c is now 1\f[R]
.EE
.PP
However, beware that using bracket accessors with unconstrained input is
not safe either \[em] it may lead to \c
.UR https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md
object injection attacks
.UE \c
\&.
.SS Using callbacks
JavaScript has first\-class functions, which means you can pass
functions as arguments to other APIs, store them in variables and
objects\[cq] properties, and so on.
Many DOM APIs are designed with this in mind, so you can (and should)
write:
.IP
.EX
\f[I]// Instead of setTimeout(\[dq]\&...\[dq], 1000) use:\f[R]
setTimeout(() \f[B]=>\f[R] {
  \f[I]// \&...\f[R]
}, 1000);

\f[I]// Instead of elt.setAttribute(\[dq]onclick\[dq], \[dq]\&...\[dq]) use:\f[R]
elt.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  \f[I]// \&...\f[R]
});
.EE
.PP
Closures are also helpful as a way to create parameterized functions
without concatenating strings.
.SS Using JSON
If the string you\[cq]re calling \f[CR]eval()\f[R] on contains data (for
example, an array: \f[CR]\[dq][1, 2, 3]\[dq]\f[R]), as opposed to code,
you should consider switching to JSON, which allows the string to use a
subset of JavaScript syntax to represent data.
.PP
Note that since JSON syntax is limited compared to JavaScript syntax,
many valid JavaScript literals will not parse as JSON.
For example, trailing commas are not allowed in JSON, and property names
(keys) in object literals must be enclosed in quotes.
Be sure to use a JSON serializer to generate strings that will be later
parsed as JSON.
.PP
Passing carefully constrained data instead of arbitrary code is a good
idea in general.
For example, an extension designed to scrape contents of web\-pages
could have the scraping rules defined in XPath instead of JavaScript
code.
.SH EXAMPLES
.SS Using eval()
In the following code, both of the statements containing
\f[CR]eval()\f[R] return 42.
The first evaluates the string \f[CR]\[dq]x + y + 1\[dq]\f[R]; the
second evaluates the string \f[CR]\[dq]42\[dq]\f[R].
.IP
.EX
\f[B]const\f[R] x = 2;
\f[B]const\f[R] y = 39;
\f[B]const\f[R] z = \[dq]42\[dq];
eval(\[dq]x + y + 1\[dq]); \f[I]// 42\f[R]
eval(z); \f[I]// 42\f[R]
.EE
.SS eval() returns the completion value of statements
\f[CR]eval()\f[R] returns the completion value of statements.
For \f[CR]if\f[R], it would be the last expression or statement
evaluated.
.IP
.EX
\f[B]const\f[R] str = \[dq]if (a) { 1 + 1 } else { 1 + 2 }\[dq];
\f[B]let\f[R] a = \f[B]true\f[R];
\f[B]let\f[R] b = eval(str);

console.log(\[ga]b is: ${b}\[ga]); \f[I]// b is: 2\f[R]

a = \f[B]false\f[R];
b = eval(str);

console.log(\[ga]b is: ${b}\[ga]); \f[I]// b is: 3\f[R]
.EE
.PP
The following example uses \f[CR]eval()\f[R] to evaluate the string
\f[CR]str\f[R].
This string consists of JavaScript statements that assign \f[CR]z\f[R] a
value of 42 if \f[CR]x\f[R] is five, and assign 0 to \f[CR]z\f[R]
otherwise.
When the second statement is executed, \f[CR]eval()\f[R] will cause
these statements to be performed, and it will also evaluate the set of
statements and return the value that is assigned to \f[CR]z\f[R],
because the completion value of an assignment is the assigned value.
.IP
.EX
\f[B]const\f[R] x = 5;
\f[B]const\f[R] str = \[ga]if (x === 5) {
  console.log(\[dq]z is 42\[dq]);
  z = 42;
} else {
  z = 0;
}\[ga];

console.log(\[dq]z is \[dq], eval(str)); \f[I]// z is 42  z is 42\f[R]
.EE
.PP
If you assign multiple values then the last value is returned.
.IP
.EX
\f[B]let\f[R] x = 5;
\f[B]const\f[R] str = \[ga]if (x === 5) {
  console.log(\[dq]z is 42\[dq]);
  z = 42;
  x = 420;
} else {
  z = 0;
}\[ga];

console.log(\[dq]x is\[dq], eval(str)); \f[I]// z is 42  x is 420\f[R]
.EE
.SS eval() as a string defining function requires \[lq](\[rq] and \[lq])\[rq] as prefix and suffix
.IP
.EX
\f[I]// This is a function declaration\f[R]
\f[B]const\f[R] fctStr1 = \[dq]function a() {}\[dq];
\f[I]// This is a function expression\f[R]
\f[B]const\f[R] fctStr2 = \[dq](function b() {})\[dq];
\f[B]const\f[R] fct1 = eval(fctStr1); \f[I]// return undefined, but \[ga]a\[ga] is available as a global function now\f[R]
\f[B]const\f[R] fct2 = eval(fctStr2); \f[I]// return the function \[ga]b\[ga]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
Property accessors
.IP \[bu] 2
WebExtensions: Using eval in content scripts
