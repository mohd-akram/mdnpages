.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "ImageDecoder" "JS" "October 31, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ImageDecoder \- ImageDecoder
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]ImageDecoder\f[B]\f[R] interface of the WebCodecs API
provides a way to unpack and decode encoded image data.
.SH CONSTRUCTOR
.TP
\f[B]ImageDecoder()\f[R]
Creates a new \f[CR]ImageDecoder\f[R] object.
.SH INSTANCE PROPERTIES
.TP
\f[B]ImageDecoder.complete\f[R] \f[I](read\-only)\f[R]
Returns a boolean value indicating whether encoded data is completely
buffered.
.TP
\f[B]ImageDecoder.completed\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]Promise\f[R] that resolves once \f[CR]complete\f[R] is
true.
.TP
\f[B]ImageDecoder.tracks\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]ImageTrackList\f[R] object listing the available tracks
and providing a method for selecting a track to decode.
.TP
\f[B]ImageDecoder.type\f[R] \f[I](read\-only)\f[R]
Returns a string reflecting the MIME type configured during
construction.
.SH STATIC METHODS
.TP
\f[B]ImageDecoder.isTypeSupported()\f[R]
Indicates if the provided MIME type is supported for unpacking and
decoding.
.SH INSTANCE METHODS
.TP
\f[B]ImageDecoder.close()\f[R]
Ends all pending work and releases system resources.
.TP
\f[B]ImageDecoder.decode()\f[R]
Enqueues a control message to decode the frame of an image.
.TP
\f[B]ImageDecoder.reset()\f[R]
Aborts all pending \f[CR]decode()\f[R] operations.
.SH EXAMPLES
Given a \f[CR]<canvas>\f[R] element:
.IP
.EX
<\f[B]canvas\f[R]></\f[B]canvas\f[R]>
.EE
.PP
the following code decodes and renders an animated image to that canvas:
.IP
.EX
\f[B]let\f[R] imageDecoder = \f[B]null\f[R];
\f[B]let\f[R] imageIndex = 0;

\f[B]function\f[R] renderImage(result) {
  \f[B]const\f[R] canvas = document.querySelector(\[dq]canvas\[dq]);
  \f[B]const\f[R] canvasContext = canvas.getContext(\[dq]2d\[dq]);

  canvasContext.drawImage(result.image, 0, 0);

  \f[B]const\f[R] track = imageDecoder.tracks.selectedTrack;

  \f[I]// We check complete here since \[ga]frameCount\[ga] won\[aq]t be stable until all\f[R]
  \f[I]// data has been received. This may cause us to receive a RangeError\f[R]
  \f[I]// during the decode() call below which needs to be handled.\f[R]
  \f[B]if\f[R] (imageDecoder.complete) {
    \f[B]if\f[R] (track.frameCount === 1) \f[B]return\f[R];

    \f[B]if\f[R] (imageIndex + 1 >= track.frameCount) imageIndex = 0;
  }

  \f[I]// Decode the next frame ahead of display so it\[aq]s ready in time.\f[R]
  imageDecoder
    .decode({ frameIndex: ++imageIndex })
    .then((nextResult) \f[B]=>\f[R]
      setTimeout(() \f[B]=>\f[R] {
        renderImage(nextResult);
      }, result.image.duration / 1000.0),
    )
    .catch((e) \f[B]=>\f[R] {
      \f[I]// We can end up requesting an imageIndex past the end since\f[R]
      \f[I]// we\[aq]re using a ReadableStream from fetch(), when this happens\f[R]
      \f[I]// just wrap around.\f[R]
      \f[B]if\f[R] (e \f[B]instanceof\f[R] RangeError) {
        imageIndex = 0;
        imageDecoder.decode({ frameIndex: imageIndex }).then(renderImage);
      } \f[B]else\f[R] {
        \f[B]throw\f[R] e;
      }
    });
}

\f[B]function\f[R] decodeImage(imageByteStream) {
  imageDecoder = \f[B]new\f[R] ImageDecoder({ data: imageByteStream, type: \[dq]image/gif\[dq] });
  imageDecoder.decode({ frameIndex: imageIndex }).then(renderImage);
}

fetch(\[dq]fancy.gif\[dq]).then((response) \f[B]=>\f[R] decodeImage(response.body));
.EE
