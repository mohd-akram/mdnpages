.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "TRACKEVENT" "3JS" "July 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TrackEvent \- TrackEvent
.SH SYNOPSIS
The \f[B]\f[CB]TrackEvent\f[B]\f[R] interface of the HTML DOM API is
used for events which represent changes to a set of available tracks on
an HTML media element; these events are \f[CR]addtrack\f[R] and
\f[CR]removetrack\f[R].
.PP
It\(cqs important not to confuse \f[CR]TrackEvent\f[R] with the
\f[CR]RTCTrackEvent\f[R] interface, which is used for tracks which are
part of an \f[CR]RTCPeerConnection\f[R].
.PP
Events based on \f[CR]TrackEvent\f[R] are always sent to one of the
media track list types:
.IP \(bu 2
Events involving video tracks are always sent to the
\f[CR]VideoTrackList\f[R] found in
\f[CR]HTMLMediaElement.videoTracks\f[R]
.IP \(bu 2
Events involving audio tracks are always sent to the
\f[CR]AudioTrackList\f[R] specified in
\f[CR]HTMLMediaElement.audioTracks\f[R]
.IP \(bu 2
Events affecting text tracks are sent to the \f[CR]TextTrackList\f[R]
object indicated by \f[CR]HTMLMediaElement.textTracks\f[R].
.SH CONSTRUCTOR
.TP
\f[B]TrackEvent()\f[R]
Creates and initializes a new \f[CR]TrackEvent\f[R] object with the
event type specified, as well as optional additional properties.
.SH INSTANCE PROPERTIES
\f[I]\f[CI]TrackEvent\f[I] is based on \f[CI]Event\f[I], so properties
of \f[CI]Event\f[I] are also available on \f[CI]TrackEvent\f[I]
objects.\f[R]
.TP
\f[B]track\f[R] \f[I](read\-only)\f[R]
The DOM track object the event is in reference to.
If not \f[CR]null\f[R], this is always an object of one of the media
track types: \f[CR]AudioTrack\f[R], \f[CR]VideoTrack\f[R], or
\f[CR]TextTrack\f[R]).
.SH INSTANCE METHODS
\f[I]\f[CI]TrackEvent\f[I] has no methods of its own; however, it is
based on \f[CI]Event\f[I], so it provides the methods available on
\f[CI]Event\f[I] objects.\f[R]
.SH EXAMPLE
This example sets up a function, \f[CR]handleTrackEvent()\f[R], which is
called for any \f[CR]addtrack\f[R] or \f[CR]removetrack\f[R] event on
the first \f[CR]<video>\f[R] element found in the document.
.IP
.EX
\f[B]const\f[R] videoElem = document.querySelector(\(dqvideo\(dq);

videoElem.videoTracks.addEventListener(\(dqaddtrack\(dq, handleTrackEvent, \f[B]false\f[R]);
videoElem.videoTracks.addEventListener(\(dqremovetrack\(dq, handleTrackEvent, \f[B]false\f[R]);
videoElem.audioTracks.addEventListener(\(dqaddtrack\(dq, handleTrackEvent, \f[B]false\f[R]);
videoElem.audioTracks.addEventListener(\(dqremovetrack\(dq, handleTrackEvent, \f[B]false\f[R]);
videoElem.textTracks.addEventListener(\(dqaddtrack\(dq, handleTrackEvent, \f[B]false\f[R]);
videoElem.textTracks.addEventListener(\(dqremovetrack\(dq, handleTrackEvent, \f[B]false\f[R]);

\f[B]function\f[R] handleTrackEvent(event) {
  \f[B]let\f[R] trackKind;

  \f[B]if\f[R] (event.target \f[B]instanceof\f[R] VideoTrackList) {
    trackKind = \(dqvideo\(dq;
  } \f[B]else\f[R] \f[B]if\f[R] (event.target \f[B]instanceof\f[R] AudioTrackList) {
    trackKind = \(dqaudio\(dq;
  } \f[B]else\f[R] \f[B]if\f[R] (event.target \f[B]instanceof\f[R] TextTrackList) {
    trackKind = \(dqtext\(dq;
  } \f[B]else\f[R] {
    trackKind = \(dqunknown\(dq;
  }

  \f[B]switch\f[R] (event.type) {
    \f[B]case\f[R] \(dqaddtrack\(dq:
      console.log(\(gaAdded a ${trackKind} track\(ga);
      \f[B]break\f[R];
    \f[B]case\f[R] \(dqremovetrack\(dq:
      console.log(\(gaRemoved a ${trackKind} track\(ga);
      \f[B]break\f[R];
  }
}
.EE
.PP
The event handler uses the JavaScript \f[CR]instanceof\f[R] operator to
determine which type of track the event occurred on, then outputs to
console a message indicating what kind of track it is and whether
it\(cqs being added to or removed from the element.
