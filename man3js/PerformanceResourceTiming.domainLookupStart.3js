.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "PerformanceResourceTiming.domainLookupStart" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.domainLookupStart \-
PerformanceResourceTiming: domainLookupStart property
.SH SYNOPSIS
The \f[B]\f[CB]domainLookupStart\f[B]\f[R] read\-only property returns
the \f[CR]timestamp\f[R] immediately before the browser starts the
domain name lookup for the resource.
.SH VALUE
The \f[CR]domainLookupStart\f[R] property can have the following values:
.IP \[bu] 2
A \f[CR]DOMHighResTimeStamp\f[R] immediately before the browser starts
the domain name lookup for the resource.
.IP \[bu] 2
\f[CR]0\f[R] if the resource was instantaneously retrieved from a cache.
.IP \[bu] 2
\f[CR]0\f[R] if the resource is a cross\-origin request and no
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header is used.
.SH EXAMPLES
.SS Measuring DNS lookup time
The \f[CR]domainLookupStart\f[R] and \f[CR]domainLookupEnd\f[R]
properties can be used to measure how long it takes for the DNS lookup
to happen.
.IP
.EX
\f[B]const\f[R] dns = entry.domainLookupEnd \- entry.domainLookupStart;
.EE
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]const\f[R] dns = entry.domainLookupEnd \- entry.domainLookupStart;
    \f[B]if\f[R] (dns > 0) {
      console.log(\[ga]${entry.name}: DNS lookup duration: ${dns}ms\[ga]);
    }
  });
});

observer.observe({ type: \[dq]resource\[dq], buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) \f[B]=>\f[R] {
  \f[B]const\f[R] dns = entry.domainLookupEnd \- entry.domainLookupStart;
  \f[B]if\f[R] (dns > 0) {
    console.log(\[ga]${entry.name}: DNS lookup duration: ${dns}ms\[ga]);
  }
});
.EE
.SS Cross\-origin timing information
If the value of the \f[CR]domainLookupStart\f[R] property is
\f[CR]0\f[R], the resource might be a cross\-origin request.
To allow seeing cross\-origin timing information, the
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header needs to be set.
.PP
For example, to allow \f[CR]https://developer.mozilla.org\f[R] to see
timing resources, the cross\-origin resource should send:
.IP
.EX
Timing\-Allow\-Origin: https://developer.mozilla.org
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Timing\-Allow\-Origin\f[R]
