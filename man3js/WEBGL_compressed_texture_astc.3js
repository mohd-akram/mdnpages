'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBGL_COMPRESSED_TEXTURE_ASTC" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WEBGL_compressed_texture_astc \- WEBGL_compressed_texture_astc extension
.SH SYNOPSIS
The \f[B]\f[CB]WEBGL_compressed_texture_astc\f[B]\f[R] extension is part
of the WebGL API and exposes \c
.UR https://en.wikipedia.org/wiki/Adaptive_Scalable_Texture_Compression
Adaptive Scalable Texture Compression
.UE \c
\ (ASTC) compressed texture formats to WebGL.
.PP
For more information, see the article \c
.UR https://developer.nvidia.com/astc-texture-compression-for-game-assets
Using ASTC Texture Compression for Game Assets
.UE \c
\ by NVIDIA.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] ASTC compression is typically available on Mali ARM
GPUs, Intel GPUs, and NVIDIA Tegra chips.
.PP
This extension is available to both, WebGL1 and WebGL2 contexts.
.RE
.SH INSTANCE METHODS
This extension exposes one new methods.
.TP
\f[B]ext.getSupportedProfiles()\f[R]
Returns an array of strings containing the names of the ASTC profiles
supported by the implementation.
.SH CONSTANTS
The compressed texture formats are exposed by 28 constants and can be
used in two functions: \f[CR]compressedTexImage2D()\f[R] and
\f[CR]compressedTexSubImage2D()\f[R].
.PP
.TS
tab(@);
lw(14.0n) lw(14.0n) lw(14.0n) lw(14.0n) lw(14.0n).
T{
Constants
T}@T{
Blocks
T}@T{
Bits per pixel
T}@T{
\(gaArrayBuffer\(ga \f[CR]byteLength\f[R]
T}@T{
bytes if height and width are 512
T}
_
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_4x4_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR\f[R]
T}@T{
4x4
T}@T{
8.00
T}@T{
\f[CR]floor((width + 3) / 4) * floor((height + 3) / 4) * 16\f[R]
T}@T{
262144
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_5x4_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR\f[R]
T}@T{
5x4
T}@T{
6.40
T}@T{
\f[CR]floor((width + 4) / 5) * floor((height + 3) / 4) * 16\f[R]
T}@T{
210944
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_5x5_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR\f[R]
T}@T{
5x5
T}@T{
5.12
T}@T{
\f[CR]floor((width + 4) / 5) * floor((height + 4) / 5) * 16\f[R]
T}@T{
169744
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_6x5_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR\f[R]
T}@T{
6x5
T}@T{
4.27
T}@T{
\f[CR]floor((width + 5) / 6) * floor((height + 4) / 5) * 16\f[R]
T}@T{
141728
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_6x6_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR\f[R]
T}@T{
6x6
T}@T{
3.56
T}@T{
\f[CR]floor((width + 5) / 6) * floor((height + 5) / 6) * 16\f[R]
T}@T{
118336
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_8x5_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR\f[R]
T}@T{
8x5
T}@T{
3.20
T}@T{
\f[CR]floor((width + 7) / 8) * floor((height + 4) / 5) * 16\f[R]
T}@T{
105472
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_8x6_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR\f[R]
T}@T{
8x6
T}@T{
2.67
T}@T{
\f[CR]floor((width + 7) / 8) * floor((height + 5) / 6) * 16\f[R]
T}@T{
88064
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_8x8_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR\f[R]
T}@T{
8x8
T}@T{
2.00
T}@T{
\f[CR]floor((width + 7) / 8) * floor((height + 7) / 8) * 16\f[R]
T}@T{
65536
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_10x5_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR\f[R]
T}@T{
10x5
T}@T{
2.56
T}@T{
\f[CR]floor((width + 9) / 10) * floor((height + 4) / 5) * 16\f[R]
T}@T{
85696
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_10x6_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR\f[R]
T}@T{
10x6
T}@T{
2.13
T}@T{
\f[CR]floor((width + 9) / 10) * floor((height + 5) / 6) * 16\f[R]
T}@T{
71552
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_10x8_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR\f[R]
T}@T{
10x8
T}@T{
1.60
T}@T{
\f[CR]floor((width + 9) / 10) * floor((height + 7) / 8) * 16\f[R]
T}@T{
53248
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_10x10_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR\f[R]
T}@T{
10x10
T}@T{
1.28
T}@T{
\f[CR]floor((width + 9) / 10) * floor((height + 9) / 10) * 16\f[R]
T}@T{
43264
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_12x10_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR\f[R]
T}@T{
12x10
T}@T{
1.07
T}@T{
\f[CR]floor((width + 11) / 12) * floor((height + 9) / 10) * 16\f[R]
T}@T{
35776
T}
T{
\f[CR]ext.COMPRESSED_RGBA_ASTC_12x12_KHR\f[R]
.PD 0
.P
.PD
\f[CR]ext.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR\f[R]
T}@T{
12x12
T}@T{
0.89
T}@T{
\f[CR]floor((width + 11) / 12) * floor((height + 11) / 12) * 16\f[R]
T}@T{
29584
T}
.TE
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] ext = gl.getExtension(\(dqWEBGL_compressed_texture_astc\(dq);

\f[B]const\f[R] texture = gl.createTexture();
gl.bindTexture(gl.TEXTURE_2D, texture);

gl.compressedTexImage2D(
  gl.TEXTURE_2D,
  0,
  ext.COMPRESSED_RGBA_ASTC_12x12_KHR,
  512,
  512,
  0,
  textureData,
);
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://developer.nvidia.com/astc-texture-compression-for-game-assets
Using ASTC Texture Compression for Game Assets
.UE \c
.IP \(bu 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.compressedTexImage2D()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.compressedTexSubImage2D()\f[R]
.IP \(bu 2
\f[CR]WebGLRenderingContext.getParameter()\f[R]
