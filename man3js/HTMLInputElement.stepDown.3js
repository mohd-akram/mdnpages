.\" Automatically generated by Pandoc 3.4
.\"
.TH "HTMLInputElement.stepDown" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLInputElement.stepDown \- HTMLInputElement: stepDown() method
.SH SYNOPSIS
The \f[B]\f[CB]HTMLInputElement.stepDown()\f[B]\f[R] method decrements
the value of a numeric type of \f[CR]<input>\f[R] element by the value
of the \f[CR]step\f[R] attribute or up to \f[CR]n\f[R] multiples of the
step attribute if a number is passed as the parameter.
.PP
The method, when invoked, decrements the \f[CR]value\f[R] by
(\f[CR]step\f[R] * n), where n defaults to 1 if not specified, and
\f[CR]step\f[R] defaults to the default value for \f[CR]step\f[R] if not
specified.
.PP
Valid on all numeric, date, and time input types that support the step
attribute, including \f[CR]date\f[R], \f[CR]month\f[R], \f[CR]week\f[R],
\f[CR]time\f[R], \f[CR]datetime\-local\f[R], \f[CR]number\f[R], and
\f[CR]range\f[R].
.PP
Given
\f[CR]<input id=\[dq]myTime\[dq] type=\[dq]time\[dq] max=\[dq]17:00\[dq] step=\[dq]900\[dq] value=\[dq]17:00\[dq]>\f[R],
invoking \f[CR]myTime.stepDown(3)\f[R] will change the value to 16:15,
decrementing the time by \f[CR]3 * 900\f[R], or 45 minutes.
\f[CR]myTime.stepDown()\f[R], with no parameter, would have resulted in
\f[CR]16:45\f[R], as \f[CR]n\f[R] defaults to \f[CR]1\f[R].
.IP
.EX
\f[I]<!\-\- decrements by intervals of 900 seconds (15 minute) \-\->\f[R]
<\f[B]input\f[R] type=\[dq]time\[dq] max=\[dq]17:00\[dq] step=\[dq]900\[dq] />

\f[I]<!\-\- decrements by intervals of 7 days (one week) \-\->\f[R]
<\f[B]input\f[R] type=\[dq]date\[dq] max=\[dq]2019\-12\-25\[dq] step=\[dq]7\[dq] />

\f[I]<!\-\- decrements by intervals of 12 months (one year) \-\->\f[R]
<\f[B]input\f[R] type=\[dq]month\[dq] max=\[dq]2019\-12\[dq] step=\[dq]12\[dq] />
.EE
.PP
However, calling \f[CR]stepDown\f[R] on
\f[CR]<input type=\[dq]time\[dq] max=\[dq]17:00\[dq] step=\[dq]900\[dq]>\f[R]
would not set the value to \f[CR]17:00\f[R], as one would expect \[em]
and as it does for \f[CR]stepUp\f[R] when the input is
\f[CR]<input type=\[dq]time\[dq] min=\[dq]17:00\[dq] step=\[dq]900\[dq]>\f[R].
Instead, the first call to \f[CR]stepDown\f[R] will set the initial
value to \f[CR]23:45\f[R] even though the \f[CR]max\f[R] attribute is
set.
The second call will set the value to \f[CR]17:00\f[R].
And the third call to will set the value to \f[CR]16:45\f[R].
.IP
.EX
\f[B]let\f[R] input1 = document.createElement(\[dq]input\[dq]);
input1.setAttribute(\[dq]type\[dq], \[dq]time\[dq]);
input1.setAttribute(\[dq]min\[dq], \[dq]17:00\[dq]);
input1.setAttribute(\[dq]step\[dq], 900);
console.log(input1.value); \f[I]// \[dq]\[dq]\f[R]
input1.stepUp();
console.log(input1.value); \f[I]// \[dq]17:00\[dq]\f[R]
\f[I]// However\f[R]
\f[B]let\f[R] input2 = document.createElement(\[dq]input\[dq]);
input2.setAttribute(\[dq]type\[dq], \[dq]time\[dq]);
input2.setAttribute(\[dq]max\[dq], \[dq]17:00\[dq]);
input2.setAttribute(\[dq]step\[dq], 900);
console.log(input2.value); \f[I]// \[dq]\[dq]\f[R]
input2.stepDown();
console.log(input2.value); \f[I]// \[dq]23:45\[dq]\f[R]
input2.stepDown();
console.log(input2.value); \f[I]// \[dq]17:00\[dq]\f[R]
input2.stepDown();
console.log(input2.value); \f[I]// \[dq]16:45\[dq]\f[R]
.EE
.PP
The method, when invoked, changes the form control\[cq]s value by the
value given in the \f[CR]step\f[R] attribute, multiplied by the
parameter, within the constraints set within the form control.
The default value for the parameter, if not is passed, is 1.
The method will not cause the value to go below the \f[CR]min\f[R] value
set or defy the constraints set by the \f[CR]step\f[R] attribute.
A negative value for \f[CR]n\f[R] will increment the value, but will not
increment beyond the \f[CR]max\f[R] value.
.PP
If the value before invoking the \f[CR]stepDown()\f[R] method is
invalid, for example, if it doesn\[cq]t match the constraints set by the
\f[CR]step\f[R] attribute, invoking the \f[CR]stepDown()\f[R] method
will return a value that does match the form controls constraints.
.PP
If the form control is non time, date, or numeric in nature, and
therefore does not support the \f[CR]step\f[R] attribute (see the list
of supported input types above), or if the \f[CR]step\f[R] value is set
to \f[CR]any\f[R], an \f[CR]InvalidStateError\f[R] exception is thrown.
.SH SYNTAX
.IP
.EX
stepDown()
stepDown(stepDecrement)
.EE
.SS Parameters
.TP
\f[B]stepDecrement\f[R] \f[I](optional)\f[R]
A numeric value.
If no parameter is passed, \f[I]stepDecrement\f[R] defaults to 1.
.RS
.PP
If the value is a float, the value will decrement as if
\f[CR]Math.floor(stepDecrement)\f[R] was passed.
If the value is negative, the value will be incremented instead of
decremented.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXCEPTIONS
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown in one of the following cases:
.RS
.IP \[bu] 2
if the method is not applicable to for the current \f[CR]type\f[R]
value,
.IP \[bu] 2
if the element has no \f[CR]step\f[R] value,
.IP \[bu] 2
if the \f[CR]value\f[R] cannot be converted to a number,
.IP \[bu] 2
if the resulting value is above the \f[CR]max\f[R] or below the
\f[CR]min\f[R].
.RE
.SH EXAMPLES
Click the button in this example to decrement the \f[CR]number\f[R]
input type:
.SS HTML
.IP
.EX
<\f[B]p\f[R]>
  <\f[B]label\f[R] for=\[dq]theNumber\[dq]>
    Enter a number between 0 and 400 that is divisible by 5:
  </\f[B]label\f[R]>
  <\f[B]input\f[R] type=\[dq]number\[dq] step=\[dq]5\[dq] id=\[dq]theNumber\[dq] min=\[dq]0\[dq] max=\[dq]400\[dq] />
</\f[B]p\f[R]>
<\f[B]p\f[R]>
  <\f[B]label\f[R] for=\[dq]decrementButton\[dq]>
    Enter how many values of step you would like to decrement by or leave it
    blank:
  </\f[B]label\f[R]>
  <\f[B]input\f[R] type=\[dq]number\[dq] step=\[dq]1\[dq] id=\[dq]decrementInput\[dq] min=\[dq]\-2\[dq] max=\[dq]15\[dq] />
</\f[B]p\f[R]>
<\f[B]input\f[R] type=\[dq]button\[dq] value=\[dq]Decrement\[dq] id=\[dq]theButton\[dq] />
.EE
.SS JavaScript
.IP
.EX
\f[I]/* make the button call the function */\f[R]
\f[B]let\f[R] button = document.getElementById(\[dq]theButton\[dq]);
button.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  stepOnDown();
});

\f[B]function\f[R] stepOnDown() {
  \f[B]let\f[R] input = document.getElementById(\[dq]theNumber\[dq]);
  \f[B]let\f[R] val = document.getElementById(\[dq]decrementInput\[dq]).value;

  \f[B]if\f[R] (val) {
    \f[I]// decrement with a parameter\f[R]
    input.stepDown(val);
  } \f[B]else\f[R] {
    \f[I]// or without a parameter. Try it with 0, 5, \-2, etc.\f[R]
    input.stepDown();
  }
}
.EE
.SS CSS
.IP
.EX
input\f[BI]:invalid\f[R] {
  \f[B]border\f[R]: red solid 3px;
}
.EE
.SS Result
Note if you don\[cq]t pass a parameter to the \f[CR]stepDown()\f[R]
method, it defaults to 1.
Any other value is a multiplier of the \f[CR]step\f[R] attribute value,
which in this case is 5.
If we pass \f[CR]4\f[R] as the \f[CR]stepDecrement\f[R], the input will
\f[CR]stepDown\f[R] by \f[CR]4 * 5\f[R], or \f[CR]20\f[R].
If the parameter is \f[CR]0\f[R], the number will not be decremented.
The \f[CR]stepDown()\f[R] method will not allow the input to go out of
range, in this case stopping when it reaches 0 and rounding down and
floats that are passed as a parameter.
.PP
Try setting the step decrement input to \f[CR]1.2\f[R].
What happens when you invoke the method?
.PP
Try setting the value to \f[CR]44\f[R], which is not valid.
What happens when you invoke the method?
.SH SEE ALSO
.IP \[bu] 2
\f[CR]<input>\f[R]
.IP \[bu] 2
\f[CR]HTMLInputElement\f[R]
.IP \[bu] 2
\f[CR]HTMLInputElement.stepUp()\f[R]
.IP \[bu] 2
\f[CR]step\f[R], \f[CR]min\f[R] and \f[CR]max\f[R] attributes
