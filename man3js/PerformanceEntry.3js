.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "PerformanceEntry" "JS" "April 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceEntry \- PerformanceEntry
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]PerformanceEntry\f[B]\f[R] object encapsulates a single
performance metric that is part of the browser\[cq]s performance
timeline.
.PP
The Performance API offers built\-in metrics which are specialized
subclasses of \f[CR]PerformanceEntry\f[R].
This includes entries for resource loading, event timing, first input
delay (FID), and more.
.PP
A performance entry can also be created by calling the
\f[CR]Performance.mark()\f[R] or \f[CR]Performance.measure()\f[R]
methods at an explicit point in an application.
This allows you to add your own metrics to the performance timeline.
.PP
The \f[CR]PerformanceEntry\f[R] instances will always be one of the
following subclasses:
.IP \[bu] 2
\f[CR]LargestContentfulPaint\f[R]
.IP \[bu] 2
\f[CR]LayoutShift\f[R]
.IP \[bu] 2
\f[CR]PerformanceEventTiming\f[R]
.IP \[bu] 2
\f[CR]PerformanceLongAnimationFrameTiming\f[R]
.IP \[bu] 2
\f[CR]PerformanceLongTaskTiming\f[R]
.IP \[bu] 2
\f[CR]PerformanceMark\f[R]
.IP \[bu] 2
\f[CR]PerformanceMeasure\f[R]
.IP \[bu] 2
\f[CR]PerformanceNavigationTiming\f[R]
.IP \[bu] 2
\f[CR]PerformancePaintTiming\f[R]
.IP \[bu] 2
\f[CR]PerformanceResourceTiming\f[R]
.IP \[bu] 2
\f[CR]PerformanceScriptTiming\f[R]
.IP \[bu] 2
\f[CR]PerformanceServerTiming\f[R]
.IP \[bu] 2
\f[CR]TaskAttributionTiming\f[R]
.IP \[bu] 2
\f[CR]VisibilityStateEntry\f[R]
.SH INSTANCE PROPERTIES
.TP
\f[B]PerformanceEntry.name\f[R] \f[I](read\-only)\f[R]
A string representing the name for a performance entry.
The value depends on the subtype.
.TP
\f[B]PerformanceEntry.entryType\f[R] \f[I](read\-only)\f[R]
A string representing the type of performance metric.
For example, \[lq]\f[CR]mark\f[R]\[rq] when \f[CR]PerformanceMark\f[R]
is used.
.TP
\f[B]PerformanceEntry.startTime\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMHighResTimeStamp\f[R] representing the starting time for the
performance metric.
.TP
\f[B]PerformanceEntry.duration\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMHighResTimeStamp\f[R] representing the duration of the
performance entry.
.SH INSTANCE METHODS
.TP
\f[B]PerformanceEntry.toJSON()\f[R]
Returns a JSON representation of the \f[CR]PerformanceEntry\f[R] object.
.SH EXAMPLE
.SS Working with performance entries
The following example creates \f[CR]PerformanceEntry\f[R] objects that
are of the types \f[CR]PerformanceMark\f[R] and
\f[CR]PerformanceMeasure\f[R].
The \f[CR]PerformanceMark\f[R] and \f[CR]PerformanceMeasure\f[R]
subclasses inherit the \f[CR]duration\f[R], \f[CR]entryType\f[R],
\f[CR]name\f[R], and \f[CR]startTime\f[R] properties from
\f[CR]PerformanceEntry\f[R] and set them to their appropriate values.
.IP
.EX
\f[I]// Place at a location in the code that starts login\f[R]
performance.mark(\[dq]login\-started\[dq]);

\f[I]// Place at a location in the code that finishes login\f[R]
performance.mark(\[dq]login\-finished\[dq]);

\f[I]// Measure login duration\f[R]
performance.measure(\[dq]login\-duration\[dq], \[dq]login\-started\[dq], \[dq]login\-finished\[dq]);

\f[B]function\f[R] perfObserver(list, observer) {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]if\f[R] (entry.entryType === \[dq]mark\[dq]) {
      console.log(\[ga]${entry.name}\[aq]s startTime: ${entry.startTime}\[ga]);
    }
    \f[B]if\f[R] (entry.entryType === \[dq]measure\[dq]) {
      console.log(\[ga]${entry.name}\[aq]s duration: ${entry.duration}\[ga]);
    }
  });
}
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver(perfObserver);
observer.observe({ entryTypes: [\[dq]measure\[dq], \[dq]mark\[dq]] });
.EE
