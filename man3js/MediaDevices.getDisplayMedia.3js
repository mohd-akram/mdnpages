.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MediaDevices.getDisplayMedia" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaDevices.getDisplayMedia \- MediaDevices: getDisplayMedia() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]getDisplayMedia()\f[B]\f[R] method of the
\f[CR]MediaDevices\f[R] interface prompts the user to select and grant
permission to capture the contents of a display or portion thereof (such
as a window) as a \f[CR]MediaStream\f[R].
.PP
The resulting stream can then be recorded using the MediaStream
Recording API or transmitted as part of a WebRTC session.
.PP
See Using the Screen Capture API for more details and an example.
.SH SYNTAX
.IP
.EX
getDisplayMedia()
getDisplayMedia(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An optional object specifying requirements for the returned
\f[CR]MediaStream\f[R].
The options for \f[CR]getDisplayMedia()\f[R] work in the same as the
constraints for the \f[CR]MediaDevices.getUserMedia()\f[R] method,
although in that case only \f[CR]audio\f[R] and \f[CR]video\f[R] can be
specified.
The list of possible option properties for \f[CR]getDisplayMedia()\f[R]
is as follows:
.RS
.TP
\f[B]video\f[R] \f[I](optional)\f[R]
A boolean or a \f[CR]MediaTrackConstraints\f[R] instance; the default
value is \f[CR]true\f[R].
If this option is omitted or set to \f[CR]true\f[R], the stream will
contain a video track A value of \f[CR]true\f[R] indicates that the
returned \f[CR]MediaStream\f[R] will contain a video track.
Since \f[CR]getDisplayMedia()\f[R] requires a video track, if this
option is set to \f[CR]false\f[R] the promise will reject with a
\f[CR]TypeError\f[R].
.TP
\f[B]audio\f[R] \f[I](optional)\f[R]
A boolean or a \f[CR]MediaTrackConstraints\f[R] instance; the default
value is \f[CR]false\f[R].
A value of \f[CR]true\f[R] indicates that the returned
\f[CR]MediaStream\f[R] will contain an audio track, if audio is
supported and available for the display surface chosen by the user.
.TP
\f[B]controller\f[R] \f[I](experimental)\f[R] \f[I](optional)\f[R]
A \f[CR]CaptureController\f[R] object instance containing methods that
can be used to further manipulate the capture session if included.
.TP
\f[B]monitorTypeSurfaces\f[R] \f[I](optional)\f[R]
An enumerated value specifying whether the browser should offer entire
screens in the screen capture options presented to the user alongside
tab and window options.
This option is intended to protect companies from leakage of private
information through employee error when using video conferencing apps.
Possible values are \f[CR]include\f[R], which hints that the browser
should include screen options, and \f[CR]exclude\f[R], which hints that
they should be excluded.
A default value is not mandated by the spec; see the Browser
compatibility section for browser\-specific defaults.
.RS
.RS
.PP
\f[B]Note:\f[R] You cannot set
\f[CR]monitorTypeSurfaces: \[dq]exclude\[dq]\f[R] at the same time as
\f[CR]displaySurface: \[dq]monitor\[dq]\f[R] as the two settings are
contradictory.
Trying to do so will result in the \f[CR]getDisplayMedia()\f[R] call
failing with a \f[CR]TypeError\f[R].
.RE
.RE
.TP
\f[B]preferCurrentTab\f[R] \f[I](non\-standard)\f[R] \f[I](experimental)\f[R] \f[I](optional)\f[R]
A boolean; a value of \f[CR]true\f[R] instructs the browser to offer the
current tab as the most prominent capture source, i.e.\ as a separate
\[lq]This Tab\[rq] option in the \[lq]Choose what to share\[rq] options
presented to the user.
This is useful as many app types generally just want to share the
current tab.
For example, a slide deck app might want to let the user stream the
current tab containing the presentation to a virtual conference.
A default value is not mandated by the spec; see the Browser
compatibility section for browser\-specific defaults.
.TP
\f[B]selfBrowserSurface\f[R] \f[I](experimental)\f[R] \f[I](optional)\f[R]
An enumerated value specifying whether the browser should allow the user
to select the current tab for capture.
This helps to avoid the \[lq]infinite hall of mirrors\[rq] effect
experienced when a video conferencing app inadvertently shares its own
display.
Possible values are \f[CR]include\f[R], which hints that the browser
should include the current tab in the choices offered for capture, and
\f[CR]exclude\f[R], which hints that it should be excluded.
A default value is not mandated by the spec; see the Browser
compatibility section for browser\-specific defaults.
.TP
\f[B]surfaceSwitching\f[R] \f[I](experimental)\f[R] \f[I](optional)\f[R]
An enumerated value specifying whether the browser should display a
control to allow the user to dynamically switch the shared tab during
screen\-sharing.
This is much more convenient than having to go through the whole sharing
process again each time a user wants to switch the shared tab.
Possible values are \f[CR]include\f[R], which hints that the browser
should include the control, and \f[CR]exclude\f[R], which hints that it
should not be shown.
A default value is not mandated by the spec; see the Browser
compatibility section for browser\-specific defaults.
.TP
\f[B]systemAudio\f[R] \f[I](experimental)\f[R] \f[I](optional)\f[R]
An enumerated value specifying whether the browser should include the
system audio among the possible audio sources offered to the user.
Possible values are \f[CR]include\f[R], which hints that the browser
should include the system audio in the list of choices, and
\f[CR]exclude\f[R], which hints that it should be excluded.
A default value is not mandated by the spec; see the Browser
compatibility section for browser\-specific defaults.
.TP
\f[B]monitorTypeSurfaces\f[R] \f[I](experimental)\f[R] \f[I](optional)\f[R]
An enumerated value specifying whether the application would like the
user agent to offer the user the option to choose display surfaces whose
type is monitor.
Possible values are \f[CR]include\f[R], which hints that the browser
should include the display surfaces whose type is monitor, and
\f[CR]exclude\f[R], which hints that it should be excluded.
A default value is not mandated by the spec; see the Browser
compatibility section for browser\-specific defaults.
.RE
.RS
.PP
\f[B]Note:\f[R] See the article Capabilities, constraints, and settings
for a lot more detail on how these options work.
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves to a \f[CR]MediaStream\f[R]
containing a video track whose contents come from a user\-selected
screen area, as well as an optional audio track.
.RS
.PP
\f[B]Note:\f[R] Browser support for audio tracks varies, both in terms
of whether or not they\[cq]re supported at all by the media recorder and
in terms of the audio sources supported.
Check the compatibility table for details for each browser.
.RE
.SS Exceptions
.TP
\f[B]AbortError\f[R] \f[B]DOMException\f[R]
Thrown if an error or failure does not match any of the other exceptions
listed here.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the call to \f[CR]getDisplayMedia()\f[R] was not made from
code running due to a transient activation, such as an event handler.
Or if the browser context is not fully active or does not focused.
Or if the \f[CR]controller\f[R] options has been already used in
creating another \f[CR]MediaStream\f[R].
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if the permission to access a screen area was denied by the user,
or the current browsing instance is not permitted access to screen
sharing (for example by a Permissions Policy).
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if no sources of screen video are available for capture.
.TP
\f[B]NotReadableError\f[R] \f[B]DOMException\f[R]
Thrown if the user selected a screen, window, tab, or another source of
screen data, but a hardware or operating system level error or lockout
occurred, preventing the sharing of the selected source.
.TP
\f[B]OverconstrainedError\f[R] \f[B]DOMException\f[R]
Thrown if, after creating the stream, applying any specified constraints
fails because no compatible stream could be generated.
.TP
\f[B]TypeError\f[R]
Thrown if the specified \f[CR]options\f[R] include values that are not
permitted when calling \f[CR]getDisplayMedia()\f[R], for example a
\f[CR]video\f[R] property set to false, or if any specified
\f[CR]MediaTrackConstraints\f[R] are not permitted.
\f[CR]min\f[R] and \f[CR]exact\f[R] values are not permitted in
constraints used in \f[CR]getDisplayMedia()\f[R] calls.
.SH SECURITY
Because \f[CR]getDisplayMedia()\f[R] could be used in nefarious ways, it
can be a source of significant privacy and security concerns.
For that reason, the specification details measures browsers are
required to take in order to fully support \f[CR]getDisplayMedia()\f[R].
.IP \[bu] 2
The specified options can\[cq]t be used to limit the choices available
to the user.
Instead, they must be applied after the user chooses a source, in order
to generate output that matches the options.
.IP \[bu] 2
The go\-ahead permission to use \f[CR]getDisplayMedia()\f[R] cannot be
persisted for reuse.
The user must be prompted for permission every time.
.IP \[bu] 2
Transient user activation is required.
The user has to interact with the page or a UI element in order for this
feature to work.
.IP \[bu] 2
Browsers are encouraged to provide a warning to users about sharing
displays or windows that contain browsers, and to keep a close eye on
what other content might be getting captured and shown to other users.
.SH EXAMPLES
In the example below a \f[CR]startCapture()\f[R] method is created,
which initiates screen capture given a set of options specified by the
\f[CR]displayMediaOptions\f[R] parameter.
.IP
.EX
\f[B]const\f[R] displayMediaOptions = {
  video: {
    displaySurface: \[dq]browser\[dq],
  },
  audio: {
    suppressLocalAudioPlayback: \f[B]false\f[R],
  },
  preferCurrentTab: \f[B]false\f[R],
  selfBrowserSurface: \[dq]exclude\[dq],
  systemAudio: \[dq]include\[dq],
  surfaceSwitching: \[dq]include\[dq],
  monitorTypeSurfaces: \[dq]include\[dq],
};

\f[B]async\f[R] \f[B]function\f[R] startCapture(displayMediaOptions) {
  \f[B]let\f[R] captureStream;

  \f[B]try\f[R] {
    captureStream =
      \f[B]await\f[R] navigator.mediaDevices.getDisplayMedia(displayMediaOptions);
  } \f[B]catch\f[R] (err) {
    console.error(\[ga]Error: ${err}\[ga]);
  }
  \f[B]return\f[R] captureStream;
}
.EE
.PP
This uses \f[CR]await\f[R] to asynchronously wait for
\f[CR]getDisplayMedia()\f[R] to resolve with a \f[CR]MediaStream\f[R]
which contains the display contents as requested by the specified
options.
The stream is then returned to the caller for use, perhaps for adding to
a WebRTC call using \f[CR]RTCPeerConnection.addTrack()\f[R] to add the
video track from the stream.
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://screen-sharing-controls.glitch.me/
Screen sharing controls
.UE \c
\ demo provides a complete implementation that allows you to create a
screen capture with your choice of \f[CR]getDisplayMedia()\f[R]
constraints and options.
.RE
.SH SEE ALSO
.IP \[bu] 2
Screen Capture API
.IP \[bu] 2
Using the Screen Capture API
.IP \[bu] 2
Media Capture and Streams API
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
\f[CR]getUserMedia()\f[R]: Capturing media from a camera and/or
microphone
