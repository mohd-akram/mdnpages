.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "KeyboardEvent.code" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
KeyboardEvent.code \- KeyboardEvent: code property
.SH SYNOPSIS
The \f[CR]KeyboardEvent.code\f[R] property represents a physical key on
the keyboard (as opposed to the character generated by pressing the
key).
In other words, this property returns a value that isn\[cq]t altered by
keyboard layout or the state of the modifier keys.
.PP
If the input device isn\[cq]t a physical keyboard, but is instead a
virtual keyboard or accessibility device, the returned value will be set
by the browser to match as closely as possible to what would happen with
a physical keyboard, to maximize compatibility between physical and
virtual input devices.
.PP
This property is useful when you want to handle keys based on their
physical positions on the input device rather than the characters
associated with those keys; this is especially common when writing code
to handle input for games that simulate a gamepad\-like environment
using keys on the keyboard.
Be aware, however, that you can\[cq]t use the value reported by
\f[CR]KeyboardEvent.code\f[R] to determine the character generated by
the keystroke, because the keycode\[cq]s name may not match the actual
character that\[cq]s printed on the key or that\[cq]s generated by the
computer when the key is pressed.
.PP
For example, the \f[CR]code\f[R] returned is \[lq]\f[CR]KeyQ\f[R]\[rq]
for the Q key on a QWERTY layout keyboard, but the same \f[CR]code\f[R]
value also represents the \[cq] key on Dvorak keyboards and the A key on
AZERTY keyboards.
That makes it impossible to use the value of \f[CR]code\f[R] to
determine what the name of the key is to users if they\[cq]re not using
an anticipated keyboard layout.
.PP
To determine what character corresponds with the key event, use the
\f[CR]KeyboardEvent.key\f[R] property instead.
.SH VALUE
The code values for Windows, Linux, and macOS are listed on the
KeyboardEvent: code values page.
.SH EXAMPLES
.SS Exercising KeyboardEvent
.SS HTML
.IP
.EX
<\f[B]p\f[R]>
  Press keys on the keyboard to see what the KeyboardEvent\[aq]s key and code values
  are for each one.
</\f[B]p\f[R]>
<\f[B]div\f[R] id=\[dq]output\[dq] tabindex=\[dq]0\[dq]></\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
output {
  \f[B]font\-family\f[R]: Arial, Helvetica, sans\-serif;
  \f[B]border\f[R]: 1px solid black;
  \f[B]width\f[R]: 95%;
  \f[B]margin\f[R]: auto;
}
output\f[BI]:focus\-visible\f[R] {
  \f[B]outline\f[R]: 3px solid dodgerblue;
}
.EE
.SS JavaScript
.IP
.EX
window.addEventListener(
  \[dq]keydown\[dq],
  (event) \f[B]=>\f[R] {
    \f[B]const\f[R] p = document.createElement(\[dq]p\[dq]);
    p.textContent = \[ga]KeyboardEvent: key=\[aq]${event.key}\[aq] | code=\[aq]${event.code}\[aq]\[ga];
    document.getElementById(\[dq]output\[dq]).appendChild(p);
    window.scrollTo(0, document.body.scrollHeight);
  },
  \f[B]true\f[R],
);
.EE
.SS Try it out
To ensure that keystrokes go to the sample, click or focus the output
box below before pressing keys.
.SS Handle keyboard events in a game
This example establishes an event listener for \f[CR]keydown\f[R] events
that handle keyboard input for a game that uses the typical
\[lq]WASD\[rq] keyboard layout for steering forward, left, backward, and
right.
This will use the same four keys physically regardless of what the
actual corresponding characters are, such as if the user is using an
AZERTY keyboard.
.SS HTML
.IP
.EX
<\f[B]p\f[R]>Use the WASD (ZQSD on AZERTY) keys to move and steer.</\f[B]p\f[R]>
<\f[B]svg\f[R]
  xmlns=\[dq]http://www.w3.org/2000/svg\[dq]
  version=\[dq]1.1\[dq]
  class=\[dq]world\[dq]
  tabindex=\[dq]0\[dq]>
  <\f[B]polygon\f[R] id=\[dq]spaceship\[dq] points=\[dq]15,0 0,30 30,30\[dq] />
</\f[B]svg\f[R]>
.EE
.SS CSS
.IP
.EX
\&.world {
  \f[B]margin\f[R]: 0px;
  \f[B]padding\f[R]: 0px;
  \f[B]background\-color\f[R]: black;
  \f[B]width\f[R]: 400px;
  \f[B]height\f[R]: 400px;
}
\&.world\f[BI]:focus\-visible\f[R] {
  \f[B]outline\f[R]: 5px solid dodgerblue;
}
spaceship {
  \f[B]fill\f[R]: orange;
  \f[B]stroke\f[R]: red;
  stroke\-width: 2px;
}
.EE
.SS JavaScript
The first section of the JavaScript code establishes some variables
we\[cq]ll be using.
\f[CR]shipSize\f[R] contains the size of the ship the player is moving
around, for convenience.
\f[CR]position\f[R] is used to track the position of the ship within the
play field.
\f[CR]moveRate\f[R] is the number of pixels each keystroke moves the
ship forward and backward, and \f[CR]turnRate\f[R] is how many degrees
of rotation the left and right steering controls apply per keystroke.
\f[CR]angle\f[R] is the current amount of rotation applied to the ship
in degrees; it starts at 0Â° (pointing straight up).
Finally, \f[CR]spaceship\f[R] is set to refer to the element with the ID
\f[CR]\[dq]spaceship\[dq]\f[R], which is the SVG polygon representing
the ship the player controls.
.IP
.EX
\f[B]let\f[R] shipSize = {
  width: 30,
  height: 30,
};

\f[B]let\f[R] position = {
  x: 200,
  y: 200,
};

\f[B]let\f[R] moveRate = 9;
\f[B]let\f[R] turnRate = 5;

\f[B]let\f[R] angle = 0;

\f[B]let\f[R] spaceship = document.getElementById(\[dq]spaceship\[dq]);
.EE
.PP
Next comes the function \f[CR]updatePosition()\f[R].
This function takes as input the distance the ship is to be moved, where
positive is a forward movement and negative is a backward movement.
This function computes the new position of the ship given the distance
moved and the current direction the ship is facing.
It also handles ensuring that the ship wraps across the boundaries of
the play field instead of vanishing.
.IP
.EX
\f[B]function\f[R] updatePosition(offset) {
  \f[B]let\f[R] rad = angle * (Math.PI / 180);
  position.x += Math.sin(rad) * offset;
  position.y \-= Math.cos(rad) * offset;

  \f[B]if\f[R] (position.x < 0) {
    position.x = 399;
  } \f[B]else\f[R] \f[B]if\f[R] (position.x > 399) {
    position.x = 0;
  }

  \f[B]if\f[R] (position.y < 0) {
    position.y = 399;
  } \f[B]else\f[R] \f[B]if\f[R] (position.y > 399) {
    position.y = 0;
  }
}
.EE
.PP
The \f[CR]refresh()\f[R] function handles applying the rotation and
position by using an SVG transform.
.IP
.EX
\f[B]function\f[R] refresh() {
  \f[B]let\f[R] x = position.x \- shipSize.width / 2;
  \f[B]let\f[R] y = position.y \- shipSize.height / 2;
  \f[B]let\f[R] transform = \[ga]translate(${x} ${y}) rotate(${angle} 15 15) \[ga];

  spaceship.setAttribute(\[dq]transform\[dq], transform);
}
refresh();
.EE
.PP
Finally, the \f[CR]addEventListener()\f[R] method is used to start
listening for \f[CR]keydown\f[R] events, acting on each key by updating
the ship position and rotation angle, then calling \f[CR]refresh()\f[R]
to draw the ship at its new position and angle.
.IP
.EX
window.addEventListener(
  \[dq]keydown\[dq],
  (event) \f[B]=>\f[R] {
    \f[B]if\f[R] (event.defaultPrevented) {
      \f[B]return\f[R]; \f[I]// Do nothing if event already handled\f[R]
    }

    \f[B]switch\f[R] (event.code) {
      \f[B]case\f[R] \[dq]KeyS\[dq]:
      \f[B]case\f[R] \[dq]ArrowDown\[dq]:
        \f[I]// Handle \[dq]back\[dq]\f[R]
        updatePosition(\-moveRate);
        \f[B]break\f[R];
      \f[B]case\f[R] \[dq]KeyW\[dq]:
      \f[B]case\f[R] \[dq]ArrowUp\[dq]:
        \f[I]// Handle \[dq]forward\[dq]\f[R]
        updatePosition(moveRate);
        \f[B]break\f[R];
      \f[B]case\f[R] \[dq]KeyA\[dq]:
      \f[B]case\f[R] \[dq]ArrowLeft\[dq]:
        \f[I]// Handle \[dq]turn left\[dq]\f[R]
        angle \-= turnRate;
        \f[B]break\f[R];
      \f[B]case\f[R] \[dq]KeyD\[dq]:
      \f[B]case\f[R] \[dq]ArrowRight\[dq]:
        \f[I]// Handle \[dq]turn right\[dq]\f[R]
        angle += turnRate;
        \f[B]break\f[R];
    }

    refresh();

    \f[B]if\f[R] (event.code !== \[dq]Tab\[dq]) {
      \f[I]// Consume the event so it doesn\[aq]t get handled twice,\f[R]
      \f[I]// as long as the user isn\[aq]t trying to move focus away\f[R]
      event.preventDefault();
    }
  },
  \f[B]true\f[R],
);
.EE
.SS Try it out
To ensure that keystrokes go to the sample code, click or focus the
black game play field below before pressing keys.
.PP
There are several ways this code can be made better.
Most real games would watch for \f[CR]keydown\f[R] events, start motion
when that happens, and stop the motion when the corresponding
\f[CR]keyup\f[R] occurs, instead of relying on key repeats.
That would allow both smoother and faster movement, but would also allow
the player to be moving and steering at the same time.
Transitions or animations could be used to make the ship\[cq]s movement
smoother, too.
