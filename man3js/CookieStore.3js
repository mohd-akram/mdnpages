.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "COOKIESTORE" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CookieStore \- CookieStore
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Service Workers.
.PP
The \f[B]\f[CB]CookieStore\f[B]\f[R] interface of the Cookie Store API
provides methods for getting and setting cookies asynchronously from
either a page or a service worker.
.PP
The \f[CR]CookieStore\f[R] is accessed via attributes in the global
scope in a \f[CR]Window\f[R] or \f[CR]ServiceWorkerGlobalScope\f[R]
context.
Therefore there is no constructor.
.SH INSTANCE METHODS
.TP
\f[B]CookieStore.delete()\f[R]
The \f[CR]delete()\f[R] method deletes a cookie with the given
\f[CR]name\f[R] or \f[CR]options\f[R] object.
It returns a \f[CR]Promise\f[R] that resolves when the deletion
completes or if no cookies are matched.
.TP
\f[B]CookieStore.get()\f[R]
The \f[CR]get()\f[R] method gets a single cookie with the given
\f[CR]name\f[R] or \f[CR]options\f[R] object.
It returns a \f[CR]Promise\f[R] that resolves with details of a single
cookie.
.TP
\f[B]CookieStore.getAll()\f[R]
The \f[CR]getAll()\f[R] method gets all matching cookies.
It returns a \f[CR]Promise\f[R] that resolves with a list of cookies.
.TP
\f[B]CookieStore.set()\f[R]
The \f[CR]set()\f[R] method sets a cookie with the given \f[CR]name\f[R]
and \f[CR]value\f[R] or \f[CR]options\f[R] object.
It returns a \f[CR]Promise\f[R] that resolves when the cookie is set.
.SH EVENTS
.TP
\f[B]change\f[R]
The \f[CR]change\f[R] event fires when a change is made to any cookie.
.SH EXAMPLES
The examples below can be tested by copying the code into a test harness
and running it with a local server, or deploying it to a website site
such as GitHub pages.
.SS Setting cookies
This example shows how to set cookies by passing a \f[CR]name\f[R] and
\f[CR]value\f[R], and by setting an \f[CR]options\f[R] value.
.PP
The \f[CR]cookieTest()\f[R] method sets one cookie with \f[CR]name\f[R]
and \f[CR]value\f[R] properties and another with \f[CR]name\f[R],
\f[CR]value\f[R], and \f[CR]expires\f[R] properties.
We then use the \f[CR]CookieStore.get()\f[R] method to get each of the
cookies, which are then logged.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] cookieTest() {
  \f[I]// Set cookie: passing name and value\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set(\(dqcookie1\(dq, \(dqcookie1\-value\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie1: ${error}\(ga);
  }

  \f[I]// Set cookie: passing options\f[R]
  \f[B]const\f[R] day = 24 * 60 * 60 * 1000;

  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set({
      name: \(dqcookie2\(dq,
      value: \(dqcookie2\-value\(dq,
      expires: Date.now() + day,
      partitioned: \f[B]true\f[R],
    });
  } \f[B]catch\f[R] (error) {
    log(\(gaError setting cookie2: ${error}\(ga);
  }

  \f[I]// Get named cookies and log their properties\f[R]
  \f[B]const\f[R] cookie1 = \f[B]await\f[R] cookieStore.get(\(dqcookie1\(dq);
  console.log(cookie1);

  \f[B]const\f[R] cookie2 = \f[B]await\f[R] cookieStore.get(\(dqcookie2\(dq);
  console.log(cookie2);
}

cookieTest();
.EE
.SS Getting cookies
This example shows how you can get a particular cookie using
\f[CR]CookieStore.get()\f[R] or all cookies using
\f[CR]CookieStore.getAll()\f[R].
.PP
The example code first sets three cookies that we\(cqll use for
demonstrating the get methods.
First it creates \f[CR]cookie1\f[R] and \f[CR]cookie2\f[R] using the
\f[CR]CookieStore.set()\f[R] method.
Then it creates a third cookie using the older synchronous
\f[CR]Document.cookie\f[R] property (just so we can show that these are
also fetched using the \f[CR]get()\f[R] and \f[CR]getAll()\f[R]
methods).
.PP
The code then uses \f[CR]CookieStore.get()\f[R] to fetch \(lqcookie1\(rq
and log its properties, and \f[CR]CookieStore.getAll()\f[R] (without
arguments) to fetch all cookies in the current context.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] cookieTest() {
  \f[I]// Set a cookie passing name and value\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set(\(dqcookie1\(dq, \(dqcookie1\-value\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie1: ${error}\(ga);
  }

  \f[I]// Set a cookie passing an options object\f[R]
  \f[B]const\f[R] day = 24 * 60 * 60 * 1000;
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set({
      name: \(dqcookie2\(dq,
      value: \(gacookie2\-value\(ga,
      expires: Date.now() + day,
      partitioned: \f[B]true\f[R],
    });
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie2: ${error}\(ga);
  }

  \f[I]// Set cookie using document.cookie\f[R]
  \f[I]// (to demonstrate these are are fetched too)\f[R]
  document.cookie = \(dqfavorite_food=tripe; SameSite=None; Secure\(dq;

  \f[I]// Get named cookie and log properties\f[R]
  \f[B]const\f[R] cookie1 = \f[B]await\f[R] cookieStore.get(\(dqcookie1\(dq);
  console.log(cookie1);

  \f[I]// Get all cookies and log each\f[R]
  \f[B]const\f[R] cookies = \f[B]await\f[R] cookieStore.getAll();
  \f[B]if\f[R] (cookies.length > 0) {
    console.log(\(gagetAll(): ${cookies.length}:\(ga);
    cookies.forEach((cookie) \f[B]=>\f[R] console.log(cookie));
  } \f[B]else\f[R] {
    console.log(\(dqCookies not found\(dq);
  }
}

cookieTest();
.EE
.PP
The example should log \(lqcookie1\(rq and all three cookies separately.
One thing to note is that the cookie created using
\f[CR]Document.cookie\f[R] may have a different path than those created
using \f[CR]set()\f[R] (which defaults to \f[CR]/\f[R]).
.SS Delete a named cookie
This example shows how to delete a named cookie using the
\f[CR]delete()\f[R] method.
.PP
The code first sets two cookies and logs them to the console.
We then delete one of the cookies, and then list all cookies again.
The deleted cookie (\(lqcookie1\(rq) is present in the first log array,
and not in the second.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] cookieTest() {
  \f[I]// Set two cookies\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set(\(dqcookie1\(dq, \(dqcookie1\-value\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie1: ${error}\(ga);
  }

  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set(\(dqcookie2\(dq, \(dqcookie2\-value\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie2: ${error}\(ga);
  }

  \f[I]// Log cookie names\f[R]
  \f[B]let\f[R] cookieNames = (\f[B]await\f[R] cookieStore.getAll())
    .map((cookie) \f[B]=>\f[R] cookie.name)
    .join(\(dq \(dq);
  console.log(\(gaInitial cookies: ${cookieNames}\(ga);

  \f[I]// Delete cookie1\f[R]
  \f[B]await\f[R] cookieStore.delete(\(dqcookie1\(dq);

  \f[I]// Log cookies again (to show cookie1 deleted)\f[R]
  cookieNames = (\f[B]await\f[R] cookieStore.getAll())
    .map((cookie) \f[B]=>\f[R] cookie.name)
    .join(\(dq \(dq);
  console.log(
    \(gaCookies remaining after attempted deletions (cookie1 should be deleted): ${cookieNames}\(ga,
  );
}

cookieTest();
.EE
