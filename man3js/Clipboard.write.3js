.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Clipboard.write" "JS" "March 31, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clipboard.write \- Clipboard: write() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]write()\f[B]\f[R] method of the \f[CR]Clipboard\f[R]
interface writes arbitrary data to the clipboard, such as images,
fulfilling the returned \f[CR]Promise\f[R] on completion.
This can be used to implement cut and copy functionality.
.PP
The method can in theory write arbitrary data (unlike
\f[CR]writeText()\f[R], which can only write text).
Browsers commonly support writing text, HTML, and PNG image data \[em]
see browser compatibility for more information.
.SH SYNTAX
.IP
.EX
write(data)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
An array of \f[CR]ClipboardItem\f[R] objects containing data to be
written to the clipboard.
.SS Return value
A \f[CR]Promise\f[R] which is resolved when the data has been written to
the clipboard.
Note that if the underlying OS does not support multiple native
clipboard items on the system clipboard, then only the first
\f[CR]ClipboardItem\f[R] in the array is written.
.PP
The promise is rejected if the clipboard is unable to write to the
clipboard.
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if writing to the clipboard is not allowed.
.SH SECURITY CONSIDERATIONS
Writing to the clipboard can only be done in a secure context.
.PP
Additional security requirements are covered in the Security
consideration section of the API overview topic.
.SH EXAMPLES
.SS Write text to the clipboard
This example function replaces the current contents of the clipboard
with a specified string when a button is pressed.
Note that for this particular case, you could just as readily use
\f[CR]Clipboard.writeText()\f[R].
.IP
.EX
button.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] setClipboard(\[dq]<empty clipboard>\[dq]));

\f[B]async\f[R] \f[B]function\f[R] setClipboard(text) {
  \f[B]const\f[R] type = \[dq]text/plain\[dq];
  \f[B]const\f[R] blob = \f[B]new\f[R] Blob([text], { type });
  \f[B]const\f[R] data = [\f[B]new\f[R] ClipboardItem({ [type]: blob })];
  \f[B]await\f[R] navigator.clipboard.write(data);
}
.EE
.PP
The \f[CR]setClipboard()\f[R] method begins by creating a new a
\f[CR]Blob\f[R] object.
This object is required to construct a \f[CR]ClipboardItem\f[R] object
which is sent to the clipboard.
The \f[CR]Blob\f[R] constructor takes in the content we want to copy and
its type.
This \f[CR]Blob\f[R] object can be derived from many sources; for
example, a canvas.
.PP
Next, we create a new \f[CR]ClipboardItem\f[R] object into which the
blob will be placed for sending to the clipboard.
The key of the object passed to the \f[CR]ClipboardItem\f[R] constructor
indicates the content type, the value indicates the content.
Then \f[CR]write()\f[R] is called with \f[CR]await\f[R].
A \f[CR]try..catch\f[R] block could be used to catch any errors writing
the data.
.SS Write canvas contents to the clipboard
This example writes the canvas to a blob, using the default MIME type of
\f[CR]image/png\f[R], and then writes the blob to the clipboard.
.IP
.EX
\f[I]// Get canvas can add an event handler for the click event.\f[R]
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
canvas.addEventListener(\[dq]click\[dq], copyCanvasContentsToClipboard);

\f[B]async\f[R] \f[B]function\f[R] copyCanvasContentsToClipboard() {
  \f[I]// Copy canvas to blob\f[R]
  \f[B]const\f[R] blob = \f[B]await\f[R] canvas.toBlob();
  \f[I]// Create ClipboardItem with blob and it\[aq]s type, and add to an array\f[R]
  \f[B]const\f[R] data = [\f[B]new\f[R] ClipboardItem({ [blob.type]: blob })];
  \f[I]// Write the data to the clipboard\f[R]
  \f[B]await\f[R] navigator.clipboard.write(data);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
.IP \[bu] 2
\f[CR]Clipboard.writeText()\f[R]
.IP \[bu] 2
\f[CR]Clipboard.read()\f[R]
.IP \[bu] 2
\f[CR]Clipboard.readText()\f[R]
