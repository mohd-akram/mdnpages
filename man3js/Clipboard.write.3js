.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Clipboard.write" "JS" "January 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Clipboard.write \- Clipboard: write() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]write()\f[B]\f[R] method of the \f[CR]Clipboard\f[R]
interface writes arbitrary \f[CR]ClipboardItem\f[R] data such as images
and text to the clipboard, fulfilling the returned \f[CR]Promise\f[R] on
completion.
This can be used to implement cut and copy functionality.
.PP
The method can in theory write arbitrary data (unlike
\f[CR]writeText()\f[R], which can only write text).
Browsers commonly support writing text, HTML, and PNG image data.
.SH SYNTAX
.IP
.EX
write(data)
.EE
.SS Parameters
.TP
\f[B]data\f[R]
An array of \f[CR]ClipboardItem\f[R] objects containing data to be
written to the clipboard.
.SS Return value
A \f[CR]Promise\f[R] which is resolved when the data has been written to
the clipboard.
Note that if the underlying OS does not support multiple native
clipboard items on the system clipboard, then only the first
\f[CR]ClipboardItem\f[R] in the array is written.
.PP
The promise is rejected if the clipboard is unable to write to the
clipboard.
.SS Exceptions
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if writing to the clipboard is not allowed.
.SH SECURITY CONSIDERATIONS
Writing to the clipboard can only be done in a secure context.
.PP
Additional security requirements are covered in the Security
consideration section of the API overview topic.
.SH EXAMPLES
.SS Write text to the clipboard
This example function replaces the current contents of the clipboard
with a specified string when a button is pressed.
Note that for this particular case, you could just as readily use
\f[CR]Clipboard.writeText()\f[R].
.IP
.EX
button.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] setClipboard(\[dq]<empty clipboard>\[dq]));

\f[B]async\f[R] \f[B]function\f[R] setClipboard(text) {
  \f[B]const\f[R] type = \[dq]text/plain\[dq];
  \f[B]const\f[R] clipboardItemData = {
    [type]: text,
  };
  \f[B]const\f[R] clipboardItem = \f[B]new\f[R] ClipboardItem(clipboardItemData);
  \f[B]await\f[R] navigator.clipboard.write([clipboardItem]);
}
.EE
.PP
The \f[CR]setClipboard()\f[R] function specifies a
\f[CR]\[dq]text/plain\[dq]\f[R] MIME type in the \f[CR]type\f[R]
constant, then specifies a \f[CR]clipboardItemData\f[R] object with a
single property \[em] its key is the MIME type, and its value is the
passed in text that we want to write to the clipboard.
We then construct a new \f[CR]ClipboardItem\f[R] object into which the
\f[CR]clipboardItemData\f[R] object is passed.
.PP
Finally, \f[CR]write()\f[R] is called with \f[CR]await\f[R] to write the
data to the clipboard.
.SS Write canvas contents to the clipboard
This example draws a blue rectangle to the canvas.
You can click the rectangle to copy the content of the canvas into the
clipboard as an image, and then select another element and paste in the
content from the clipboard.
.SS HTML
The HTML just defines our \f[CR]<canvas>\f[R] element and the
\f[CR]<div>\f[R] element with id \f[CR]target\f[R] where the canvas
image will be pasted.
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq] width=\[dq]100\[dq] height=\[dq]100\[dq]></\f[B]canvas\f[R]>

<\f[B]div\f[R] id=\[dq]target\[dq]>Paste here.</\f[B]div\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] logElement = document.querySelector(\[dq]#log\[dq]);
\f[B]function\f[R] log(text) {
  logElement.innerText = \[ga]${logElement.innerText}${text}\[rs]n\[ga];
  logElement.scrollTop = logElement.scrollHeight;
}
.EE
.SS JavaScript
First we define an \f[CR]async\f[R] function to copy a canvas to a blob.
This wraps the old callback\-style \f[CR]HTMLCanvasElement.toBlob()\f[R]
method into the more intuitive \f[CR]Promise\f[R] based function.
.IP
.EX
\f[I]// Async/await method replacing toBlob() callback\f[R]
\f[B]async\f[R] \f[B]function\f[R] getBlobFromCanvas(canvas) {
  \f[B]return\f[R] \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
    canvas.toBlob((blob) \f[B]=>\f[R] {
      \f[B]if\f[R] (blob) {
        resolve(blob);
      } \f[B]else\f[R] {
        reject(\f[B]new\f[R] Error(\[dq]Canvas toBlob failed\[dq]));
      }
    });
  });
}
.EE
.PP
Next we set up our canvas and add an event listener for the
\f[CR]click\f[R] event.
.PP
When you click the blue rectangle the code first checks if the clipboard
supports data of type \f[CR]\[dq]image/png\[dq]\f[R].
If so, the canvas displaying the rectangle is copied into a blob, and
then the blob is added to a \f[CR]ClipboardItem\f[R] and then written to
the clipboard.
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);

\f[I]// Set up canvas\f[R]
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
ctx.fillStyle = \[dq]cornflowerblue\[dq];
ctx.fillRect(0, 0, 100, 100);

canvas.addEventListener(\[dq]click\[dq], copyCanvasContentsToClipboard);
\f[B]const\f[R] target = document.getElementById(\[dq]target\[dq]);

\f[B]async\f[R] \f[B]function\f[R] copyCanvasContentsToClipboard() {
  \f[B]if\f[R] (ClipboardItem.supports(\[dq]image/png\[dq])) {
    \f[I]// Copy canvas to blob\f[R]
    \f[B]try\f[R] {
      \f[B]const\f[R] blob = \f[B]await\f[R] getBlobFromCanvas(canvas);
      \f[I]// Create ClipboardItem with blob and it\[aq]s type, and add to an array\f[R]
      \f[B]const\f[R] data = [\f[B]new\f[R] ClipboardItem({ [blob.type]: blob })];
      \f[I]// Write the data to the clipboard\f[R]
      \f[B]await\f[R] navigator.clipboard.write(data);
      log(\[dq]Copied\[dq]);
    } \f[B]catch\f[R] (error) {
      log(error);
    }
  } \f[B]else\f[R] {
    log(\[dq]image/png is not supported\[dq]);
  }
}
.EE
.PP
Note that clipboard support for PNG files is a mandatory part of the
specification, so we don\[cq]t actually need the check using
\f[CR]ClipboardItem.supports()\f[R] above (it always returns
\f[CR]true\f[R]).
The check would be more useful in cases where we\[cq]re fetching an
optional file type, or a resource where we don\[cq]t know the type in
advance.
.PP
We then define an event listener for \f[CR]paste\f[R] events on then
element where we want to display the clipboard contents as an image.
The FileReader API allows us to read the blob using the
\f[CR]readAsDataUrl\f[R] method and create an \f[CR]<img>\f[R] element
with the canvas contents:
.IP
.EX
target.addEventListener(\[dq]paste\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] items = (event.clipboardData || window.clipboardData).items;
  \f[B]const\f[R] blob = items[0].getAsFile();
  \f[B]const\f[R] reader = \f[B]new\f[R] FileReader();

  reader.addEventListener(\[dq]load\[dq], (event) \f[B]=>\f[R] {
    \f[B]const\f[R] img = \f[B]new\f[R] Image();
    img.src = event.target.result;
    target.appendChild(img);
  });

  reader.readAsDataURL(blob);
});
.EE
.SS Result
The result is shown below.
First click on the blue square, and then select the text \[lq]Paste
here\[rq] and use your OS\-specific keyboard combinations to paste from
the clipboard (such as \f[CR]Ctrl+V\f[R] on Windows).
.SH SEE ALSO
.IP \[bu] 2
Clipboard API
.IP \[bu] 2
\c
.UR https://web.dev/articles/async-clipboard
Image support for Async Clipboard article
.UE \c
.IP \[bu] 2
\f[CR]Clipboard.writeText()\f[R]
.IP \[bu] 2
\f[CR]Clipboard.read()\f[R]
.IP \[bu] 2
\f[CR]Clipboard.readText()\f[R]
