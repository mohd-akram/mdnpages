.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "DOMMatrixReadOnly.scale" "JS" "May 19, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMMatrixReadOnly.scale \- DOMMatrixReadOnly: scale() method
.SH SYNOPSIS
The \f[B]\f[CB]scale()\f[B]\f[R] method of the
\f[CR]DOMMatrixReadOnly\f[R] interface creates a new matrix being the
result of the original matrix with a scale transform applied.
.SH SYNTAX
The \f[CR]scale()\f[R] method is specified with either one or six
values.
.IP
.EX
DOMMatrixReadOnly.scale(scaleX);
DOMMatrixReadOnly.scale(scaleX, scaleY);
DOMMatrixReadOnly.scale(scaleX, scaleY, scaleZ);
DOMMatrixReadOnly.scale(scaleX, scaleY, scaleZ, originX);
DOMMatrixReadOnly.scale(scaleX, scaleY, scaleZ, originX, originY);
DOMMatrixReadOnly.scale(scaleX, scaleY, scaleZ, originX, originY, originZ);
.EE
.SS Parameters
.TP
\f[B]scaleX\f[R]
A multiplier for the scale value on the x\-axis.
.TP
\f[B]scaleY\f[R] \f[I](optional)\f[R]
A multiplier for the scale value on the y\-axis.
If not supplied, this defaults to the value of \f[CR]scaleX\f[R].
.TP
\f[B]scaleZ\f[R] \f[I](optional)\f[R]
A multiplier for the scale value on the z\-axis.
If this value is anything other than 1, the resulting matrix will be 3D.
.TP
\f[B]originX\f[R] \f[I](optional)\f[R]
An x\-coordinate for the origin of the transformation.
If no origin is supplied, this defaults to 0.
.TP
\f[B]originY\f[R] \f[I](optional)\f[R]
A y\-coordinate for the origin of the transformation.
If no origin is supplied, this defaults to 0.
.TP
\f[B]originZ\f[R] \f[I](optional)\f[R]
A z\-coordinate for the origin of the transformation.
If no origin is supplied, this defaults to 0.
If this value is anything other than 0, the resulting matrix will be 3D.
.SS Return value
Returns a \f[CR]DOMMatrix\f[R] containing a new matrix being the result
of the matrix x and y dimensions being scaled by the given factor,
centered on the origin given.
The original matrix is not modified.
.PP
If a scale is applied about the z\-axis, the resulting matrix will be a
4âœ•4 3D matrix.
.SH EXAMPLES
This SVG contains three squares, one red, one blue, and one green, each
positioned at the document origin:
.IP
.EX
<\f[B]svg\f[R] width=\[dq]250\[dq] height=\[dq]250\[dq] viewBox=\[dq]0 0 25 25\[dq]>
  <\f[B]rect\f[R] width=\[dq]25\[dq] height=\[dq]25\[dq] fill=\[dq]red\[dq] />
  <\f[B]rect\f[R] id=\[dq]transformed\[dq] width=\[dq]25\[dq] height=\[dq]25\[dq] fill=\[dq]blue\[dq] />
  <\f[B]rect\f[R] id=\[dq]transformedOrigin\[dq] width=\[dq]25\[dq] height=\[dq]25\[dq] fill=\[dq]green\[dq] />
</\f[B]svg\f[R]>
.EE
.PP
This JavaScript first creates an identity matrix, then uses the
\f[CR]scale()\f[R] method to create a new matrix with a single
parameter.
.PP
We test if the browser supports a six parameter \f[CR]scale()\f[R]
method by creating a new matrix using three parameters and observing its
\f[CR]is2D\f[R] property.
If this is \f[CR]false\f[R] then the third parameter has been accepted
by the browser as a \f[CR]scaleZ\f[R] parameter, making this a 3D
matrix.
.PP
We then create a new matrix scaled about a given origin, using either
three or six parameters depending on the browser support.
.PP
These new matrices are then applied to the blue and green squares as a
\f[CR]transform\f[R], changing their dimensions and position.
The red square is left in place.
.IP
.EX
\f[B]const\f[R] matrix = \f[B]new\f[R] DOMMatrixReadOnly();
\f[B]const\f[R] scaledMatrix = matrix.scale(0.5);

\f[B]let\f[R] scaledMatrixWithOrigin = matrix.scale(0.5, 25, 25);

\f[I]// if the browser has interpreted these parameters as scaleX, scaleY, scaleZ, the resulting matrix is 3D\f[R]
\f[B]const\f[R] browserExpectsSixParamScale = !scaledMatrixWithOrigin.is2D;
\f[B]if\f[R] (browserExpectsSixParamScale) {
  scaledMatrixWithOrigin = matrix.scale(0.5, 0.5, 1, 25, 25, 0);
}

document
  .querySelector(\[dq]#transformed\[dq])
  .setAttribute(\[dq]transform\[dq], scaledMatrix.toString());
document
  .querySelector(\[dq]#transformedOrigin\[dq])
  .setAttribute(\[dq]transform\[dq], scaledMatrixWithOrigin.toString());
.EE
