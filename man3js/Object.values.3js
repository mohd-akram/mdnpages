.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "OBJECT.VALUES" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.values \- Object.values()
.SH SYNOPSIS
The \f[B]\f[CB]Object.values()\f[B]\f[R] static method returns an array
of a given object\(cqs own enumerable string\-keyed property values.
.IP
.EX
\f[B]const\f[R] object1 = {
  a: \(dqsome string\(dq,
  b: 42,
  c: \f[B]false\f[R],
};

console.log(Object.values(object1));
\f[I]// Expected output: Array [\(dqsome string\(dq, 42, false]\f[R]
.EE
.SH SYNTAX
.IP
.EX
Object.values(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
An object.
.SS Return value
An array containing the given object\(cqs own enumerable string\-keyed
property values.
.SH DESCRIPTION
\f[CR]Object.values()\f[R] returns an array whose elements are values of
enumerable string\-keyed properties found directly upon
\f[CR]object\f[R].
This is the same as iterating with a \f[CR]for...in\f[R] loop, except
that a \f[CR]for...in\f[R] loop enumerates properties in the prototype
chain as well.
The order of the array returned by \f[CR]Object.values()\f[R] is the
same as that provided by a \f[CR]for...in\f[R] loop.
.PP
If you need the property keys, use \f[CR]Object.keys()\f[R] instead.
If you need both the property keys and values, use
\f[CR]Object.entries()\f[R] instead.
.SH EXAMPLES
.SS Using Object.values()
.IP
.EX
\f[B]const\f[R] obj = { foo: \(dqbar\(dq, baz: 42 };
console.log(Object.values(obj)); \f[I]// [\(aqbar\(aq, 42]\f[R]

\f[I]// Array\-like object\f[R]
\f[B]const\f[R] arrayLikeObj1 = { 0: \(dqa\(dq, 1: \(dqb\(dq, 2: \(dqc\(dq };
console.log(Object.values(arrayLikeObj1)); \f[I]// [\(aqa\(aq, \(aqb\(aq, \(aqc\(aq]\f[R]

\f[I]// Array\-like object with random key ordering\f[R]
\f[I]// When using numeric keys, the values are returned in the keys\(aq numerical order\f[R]
\f[B]const\f[R] arrayLikeObj2 = { 100: \(dqa\(dq, 2: \(dqb\(dq, 7: \(dqc\(dq };
console.log(Object.values(arrayLikeObj2)); \f[I]// [\(aqb\(aq, \(aqc\(aq, \(aqa\(aq]\f[R]

\f[I]// getFoo is a non\-enumerable property\f[R]
\f[B]const\f[R] myObj = Object.create(
  {},
  {
    getFoo: {
      value() {
        \f[B]return\f[R] \f[B]this\f[R].foo;
      },
    },
  },
);
myObj.foo = \(dqbar\(dq;
console.log(Object.values(myObj)); \f[I]// [\(aqbar\(aq]\f[R]
.EE
.SS Using Object.values() on primitives
Non\-object arguments are coerced to objects.
\f[CR]undefined\f[R] and \f[CR]null\f[R] cannot be coerced to objects
and throw a \f[CR]TypeError\f[R] upfront.
Only strings may have own enumerable properties, while all other
primitives return an empty array.
.IP
.EX
\f[I]// Strings have indices as enumerable own properties\f[R]
console.log(Object.values(\(dqfoo\(dq)); \f[I]// [\(aqf\(aq, \(aqo\(aq, \(aqo\(aq]\f[R]

\f[I]// Other primitives except undefined and null have no own properties\f[R]
console.log(Object.values(100)); \f[I]// []\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-object
Polyfill of \f[CR]Object.values\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/object.values
es\-shims polyfill of \f[CR]Object.values\f[R]
.UE \c
.IP \(bu 2
Enumerability and ownership of properties
.IP \(bu 2
\f[CR]Object.keys()\f[R]
.IP \(bu 2
\f[CR]Object.entries()\f[R]
.IP \(bu 2
\f[CR]Object.prototype.propertyIsEnumerable()\f[R]
.IP \(bu 2
\f[CR]Object.create()\f[R]
.IP \(bu 2
\f[CR]Object.getOwnPropertyNames()\f[R]
.IP \(bu 2
\f[CR]Map.prototype.values()\f[R]
