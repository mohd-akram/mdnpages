.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Object.values" "JS" "November 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.values \- Object.values()
.SH SYNOPSIS
The \f[B]\f[CB]Object.values()\f[B]\f[R] static method returns an array
of a given object\[cq]s own enumerable string\-keyed property values.
.SH SYNTAX
.IP
.EX
Object.values(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
An object.
.SS Return value
An array containing the given object\[cq]s own enumerable string\-keyed
property values.
.SH DESCRIPTION
\f[CR]Object.values()\f[R] returns an array whose elements are values of
enumerable string\-keyed properties found directly upon
\f[CR]object\f[R].
This is the same as iterating with a \f[CR]for...in\f[R] loop, except
that a \f[CR]for...in\f[R] loop enumerates properties in the prototype
chain as well.
The order of the array returned by \f[CR]Object.values()\f[R] is the
same as that provided by a \f[CR]for...in\f[R] loop.
.PP
If you need the property keys, use \f[CR]Object.keys()\f[R] instead.
If you need both the property keys and values, use
\f[CR]Object.entries()\f[R] instead.
.SH EXAMPLES
.SS Using Object.values()
.IP
.EX
\f[B]const\f[R] obj = { foo: \[dq]bar\[dq], baz: 42 };
console.log(Object.values(obj)); \f[I]// [\[aq]bar\[aq], 42]\f[R]

\f[I]// Array\-like object\f[R]
\f[B]const\f[R] arrayLikeObj1 = { 0: \[dq]a\[dq], 1: \[dq]b\[dq], 2: \[dq]c\[dq] };
console.log(Object.values(arrayLikeObj1)); \f[I]// [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq]]\f[R]

\f[I]// Array\-like object with random key ordering\f[R]
\f[I]// When using numeric keys, the values are returned in the keys\[aq] numerical order\f[R]
\f[B]const\f[R] arrayLikeObj2 = { 100: \[dq]a\[dq], 2: \[dq]b\[dq], 7: \[dq]c\[dq] };
console.log(Object.values(arrayLikeObj2)); \f[I]// [\[aq]b\[aq], \[aq]c\[aq], \[aq]a\[aq]]\f[R]

\f[I]// getFoo is a non\-enumerable property\f[R]
\f[B]const\f[R] myObj = Object.create(
  {},
  {
    getFoo: {
      value() {
        \f[B]return\f[R] \f[B]this\f[R].foo;
      },
    },
  },
);
myObj.foo = \[dq]bar\[dq];
console.log(Object.values(myObj)); \f[I]// [\[aq]bar\[aq]]\f[R]
.EE
.SS Using Object.values() on primitives
Non\-object arguments are coerced to objects.
\f[CR]undefined\f[R] and \f[CR]null\f[R] cannot be coerced to objects
and throw a \f[CR]TypeError\f[R] upfront.
Only strings may have own enumerable properties, while all other
primitives return an empty array.
.IP
.EX
\f[I]// Strings have indices as enumerable own properties\f[R]
console.log(Object.values(\[dq]foo\[dq])); \f[I]// [\[aq]f\[aq], \[aq]o\[aq], \[aq]o\[aq]]\f[R]

\f[I]// Other primitives except undefined and null have no own properties\f[R]
console.log(Object.values(100)); \f[I]// []\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-object
Polyfill of \f[CR]Object.values\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Enumerability and ownership of properties
.IP \[bu] 2
\f[CR]Object.keys()\f[R]
.IP \[bu] 2
\f[CR]Object.entries()\f[R]
.IP \[bu] 2
\f[CR]Object.prototype.propertyIsEnumerable()\f[R]
.IP \[bu] 2
\f[CR]Object.create()\f[R]
.IP \[bu] 2
\f[CR]Object.getOwnPropertyNames()\f[R]
.IP \[bu] 2
\f[CR]Map.prototype.values()\f[R]
