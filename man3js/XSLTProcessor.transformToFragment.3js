.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "XSLTPROCESSOR.TRANSFORMTOFRAGMENT" "3JS" "August 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XSLTProcessor.transformToFragment \- XSLTProcessor:
transformToFragment() method
.SH SYNOPSIS
The \f[CR]transformToFragment()\f[R] method of the
\f[CR]XSLTProcessor\f[R] interface transforms a provided \f[CR]Node\f[R]
source to a \f[CR]DocumentFragment\f[R] using the XSLT stylesheet
associated with the \f[CR]XSLTProcessor\f[R].
.SH SYNTAX
.IP
.EX
transformToFragment(source, document)
.EE
.SS Parameters
.TP
\f[B]source\f[R]
The \f[CR]Node\f[R] source to apply the XSLT stylesheet to.
.TP
\f[B]document\f[R]
The \f[CR]Document\f[R] the document fragment will be associated with.
(Any document fragment is associated with a document it can be added
to).
.SS Return value
A \f[CR]DocumentFragment\f[R].
.SH EXAMPLES
.SS Using transformToFragment()
This example demonstrates how to use \f[CR]transformToFragment()\f[R] to
transform XML data into HTML, which can then be directly inserted into
the DOM as a document fragment.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\(dqresult\(dq></\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] xmlString = \(ga
<books>
  <book>
    <title>Book 1</title>
    <author>Author 1</author>
  </book>
  <book>
    <title>Book 2</title>
    <author>Author 2</author>
  </book>
</books>
\(ga;

\f[B]const\f[R] xsltString = \(ga
<xsl:stylesheet version=\(dq1.0\(dq xmlns:xsl=\(dqhttp://www.w3.org/1999/XSL/Transform\(dq>
  <xsl:output method=\(dqhtml\(dq/>
  <xsl:template match=\(dq/\(dq>
    <ul>
      <xsl:for\-each select=\(dqbooks/book\(dq>
        <li>
          <strong><xsl:value\-of select=\(dqtitle\(dq/></strong>
          by <em><xsl:value\-of select=\(dqauthor\(dq/></em>
        </li>
      </xsl:for\-each>
    </ul>
  </xsl:template>
</xsl:stylesheet>
\(ga;

\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();
\f[B]const\f[R] xmlDoc = parser.parseFromString(xmlString, \(dqapplication/xml\(dq);
\f[B]const\f[R] xsltDoc = parser.parseFromString(xsltString, \(dqapplication/xml\(dq);

\f[B]const\f[R] xsltProcessor = \f[B]new\f[R] XSLTProcessor();
xsltProcessor.importStylesheet(xsltDoc);

\f[I]// Perform the transformation, returning the result as a document fragment\f[R]
\f[B]const\f[R] resultFragment = xsltProcessor.transformToFragment(xmlDoc, document);

\f[I]// Insert the result into the page\f[R]
document.getElementById(\(dqresult\(dq).appendChild(resultFragment);
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
\f[CR]XSLTProcessor.transformToDocument()\f[R]
