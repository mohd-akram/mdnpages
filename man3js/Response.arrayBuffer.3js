.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RESPONSE.ARRAYBUFFER" "3JS" "March 13, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Response.arrayBuffer \- Response: arrayBuffer() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]arrayBuffer()\f[B]\f[R] method of the \f[CR]Response\f[R]
interface takes a \f[CR]Response\f[R] stream and reads it to completion.
It returns a promise that resolves with an \f[CR]ArrayBuffer\f[R].
.SH SYNTAX
.IP
.EX
arrayBuffer()
.EE
.SS Parameters
None.
.SS Return value
A promise that resolves with an \f[CR]ArrayBuffer\f[R].
.SS Exceptions
.TP
\f[B]DOMException\f[R] \f[B]AbortError\f[R]
The request was aborted.
.TP
\f[B]TypeError\f[R]
Thrown for one of the following reasons:
.RS
.IP \(bu 2
The response body is disturbed or locked.
.IP \(bu 2
There was an error decoding the body content (for example, because the
\f[CR]Content\-Encoding\f[R] header is incorrect).
.RE
.TP
\f[B]RangeError\f[R]
There was a problem creating the associated \f[CR]ArrayBuffer\f[R].
For example, if the data size is more than
\f[CR]Number.MAX_SAFE_INTEGER\f[R].
.SH EXAMPLES
.SS Playing music
In our \c
.UR https://github.com/mdn/dom-examples/tree/main/fetch/fetch-array-buffer
fetch array buffer live
.UE \c
, we have a Play button.
When pressed, the \f[CR]getData()\f[R] function is run.
Note that before playing full audio file will be downloaded.
If you need to play ogg during downloading (stream it) \- consider
\f[CR]HTMLAudioElement\f[R]:
.IP
.EX
\f[B]new\f[R] Audio(\(dqmusic.ogg\(dq).play();
.EE
.PP
In \f[CR]getData()\f[R] we create a new request using the
\f[CR]Request()\f[R] constructor, then use it to fetch an OGG music
track.
We also use \f[CR]AudioContext.createBufferSource\f[R] to create an
audio buffer source.
When the fetch is successful, we read an \f[CR]ArrayBuffer\f[R] out of
the response using \f[CR]arrayBuffer()\f[R], decode the audio data using
\f[CR]AudioContext.decodeAudioData()\f[R], set the decoded data as the
audio buffer source\(cqs buffer (\f[CR]source.buffer\f[R]), then connect
the source up to the \f[CR]AudioContext.destination\f[R].
.PP
Once \f[CR]getData()\f[R] has finished running, we start the audio
source playing with \f[CR]start(0)\f[R], then disable the play button so
it can\(cqt be clicked again when it is already playing (this would
cause an error.)
.IP
.EX
\f[B]function\f[R] getData() {
  \f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

  \f[B]return\f[R] fetch(\(dqviper.ogg\(dq)
    .then((response) \f[B]=>\f[R] {
      \f[B]if\f[R] (!response.ok) {
        \f[B]throw\f[R] \f[B]new\f[R] Error(\(gaHTTP error, status = ${response.status}\(ga);
      }
      \f[B]return\f[R] response.arrayBuffer();
    })
    .then((buffer) \f[B]=>\f[R] audioCtx.decodeAudioData(buffer))
    .then((decodedData) \f[B]=>\f[R] {
      \f[B]const\f[R] source = \f[B]new\f[R] AudioBufferSourceNode(audioCtx);
      source.buffer = decodedData;
      source.connect(audioCtx.destination);
      \f[B]return\f[R] source;
    });
}

\f[I]// wire up buttons to stop and play audio\f[R]

play.onclick = () \f[B]=>\f[R] {
  getData().then((source) \f[B]=>\f[R] {
    source.start(0);
    play.setAttribute(\(dqdisabled\(dq, \(dqdisabled\(dq);
  });
};
.EE
.SS Reading files
The \f[CR]Response()\f[R] constructor accepts \f[CR]File\f[R]s and
\f[CR]Blob\f[R]s, so it may be used to read a \f[CR]File\f[R] into other
formats.
.IP
.EX
\f[B]function\f[R] readFile(file) {
  \f[B]return\f[R] \f[B]new\f[R] Response(file).arrayBuffer();
}
.EE
.IP
.EX
<\f[B]input\f[R] type=\(dqfile\(dq onchange=\(dqreadFile(this.files[0])\(dq />
.EE
.SH SEE ALSO
.IP \(bu 2
ServiceWorker API
.IP \(bu 2
HTTP access control (CORS)
.IP \(bu 2
HTTP
