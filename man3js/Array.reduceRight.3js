'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAY.REDUCERIGHT" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.reduceRight \- Array.prototype.reduceRight()
.SH SYNOPSIS
The \f[B]\f[CB]reduceRight()\f[B]\f[R] method of \f[CR]Array\f[R]
instances applies a function against an accumulator and each value of
the array (from right\-to\-left) to reduce it to a single value.
.PP
See also \f[CR]Array.prototype.reduce()\f[R] for left\-to\-right.
.IP
.EX
\f[B]const\f[R] array1 = [
  [0, 1],
  [2, 3],
  [4, 5],
];

\f[B]const\f[R] result = array1.reduceRight((accumulator, currentValue) \f[B]=>\f[R]
  accumulator.concat(currentValue),
);

console.log(result);
\f[I]// Expected output: Array [4, 5, 2, 3, 0, 1]\f[R]
.EE
.SH SYNTAX
.IP
.EX
reduceRight(callbackFn)
reduceRight(callbackFn, initialValue)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
Its return value becomes the value of the \f[CR]accumulator\f[R]
parameter on the next invocation of \f[CR]callbackFn\f[R].
For the last invocation, the return value becomes the return value of
\f[CR]reduceRight()\f[R].
The function is called with the following arguments:
.RS
.TP
\f[B]accumulator\f[R]
The value resulting from the previous call to \f[CR]callbackFn\f[R].
On the first call, its value is \f[CR]initialValue\f[R] if the latter is
specified; otherwise its value is the last element of the array.
.TP
\f[B]currentValue\f[R]
The value of the current element.
On the first call, its value is the last element if
\f[CR]initialValue\f[R] is specified; otherwise its value is the
second\-to\-last element.
.TP
\f[B]currentIndex\f[R]
The index position of \f[CR]currentValue\f[R] in the array.
On the first call, its value is \f[CR]array.length \- 1\f[R] if
\f[CR]initialValue\f[R] is specified, otherwise
\f[CR]array.length \- 2\f[R].
.TP
\f[B]array\f[R]
The array \f[CR]reduceRight()\f[R] was called upon.
.RE
.TP
\f[B]initialValue\f[R] \f[I](optional)\f[R]
Value to use as accumulator to the first call of the
\f[CR]callbackFn\f[R].
If no initial value is supplied, the last element in the array will be
used and skipped.
Calling \f[CR]reduceRight()\f[R] on an empty array without an initial
value creates a \f[CR]TypeError\f[R].
.SS Return value
The value that results from the reduction.
.SH DESCRIPTION
The \f[CR]reduceRight()\f[R] method is an iterative method.
It runs a \(lqreducer\(rq callback function over all elements in the
array, in descending\-index order, and accumulates them into a single
value.
Read the iterative methods section for more information about how these
methods work in general.
.PP
\f[CR]callbackFn\f[R] is invoked only for array indexes which have
assigned values.
It is not invoked for empty slots in sparse arrays.
.PP
Unlike other iterative methods, \f[CR]reduceRight()\f[R] does not accept
a \f[CR]thisArg\f[R] argument.
\f[CR]callbackFn\f[R] is always called with \f[CR]undefined\f[R] as
\f[CR]this\f[R], which gets substituted with \f[CR]globalThis\f[R] if
\f[CR]callbackFn\f[R] is non\-strict.
.PP
The \f[CR]reduceRight()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.PP
All caveats about \f[CR]reduce\f[R] discussed in when to not use
reduce() apply to \f[CR]reduceRight\f[R] as well.
Because JavaScript has no lazy evaluation semantics, there is no
performance difference between \f[CR]reduce\f[R] and
\f[CR]reduceRight\f[R].
.SH EXAMPLES
.SS How reduceRight() works without an initial value
The call to the reduceRight \f[CR]callbackFn\f[R] would look something
like this:
.IP
.EX
arr.reduceRight((accumulator, currentValue, index, array) \f[B]=>\f[R] {
  \f[I]// \&...\f[R]
});
.EE
.PP
The first time the function is called, the \f[CR]accumulator\f[R] and
\f[CR]currentValue\f[R] can be one of two values.
If an \f[CR]initialValue\f[R] was provided in the call to
\f[CR]reduceRight\f[R], then \f[CR]accumulator\f[R] will be equal to
\f[CR]initialValue\f[R] and \f[CR]currentValue\f[R] will be equal to the
last value in the array.
If no \f[CR]initialValue\f[R] was provided, then \f[CR]accumulator\f[R]
will be equal to the last value in the array and \f[CR]currentValue\f[R]
will be equal to the second\-to\-last value.
.PP
If the array is empty and no \f[CR]initialValue\f[R] was provided,
\f[CR]TypeError\f[R] would be thrown.
If the array has only one element (regardless of position) and no
\f[CR]initialValue\f[R] was provided, or if \f[CR]initialValue\f[R] is
provided but the array is empty, the solo value would be returned
without calling \f[CR]callbackFn\f[R].
.PP
Some example run\-throughs of the function would look like this:
.IP
.EX
[0, 1, 2, 3, 4].reduceRight(
  (accumulator, currentValue, index, array) \f[B]=>\f[R] accumulator + currentValue,
);
.EE
.PP
The callback would be invoked four times, with the arguments and return
values in each call being as follows:
.PP
.TS
tab(@);
lw(13.5n) lw(16.0n) lw(17.2n) lw(8.6n) lw(14.7n).
T{
T}@T{
\f[CR]accumulator\f[R]
T}@T{
\f[CR]currentValue\f[R]
T}@T{
\f[CR]index\f[R]
T}@T{
Return value
T}
_
T{
First call
T}@T{
\f[CR]4\f[R]
T}@T{
\f[CR]3\f[R]
T}@T{
\f[CR]3\f[R]
T}@T{
\f[CR]7\f[R]
T}
T{
Second call
T}@T{
\f[CR]7\f[R]
T}@T{
\f[CR]2\f[R]
T}@T{
\f[CR]2\f[R]
T}@T{
\f[CR]9\f[R]
T}
T{
Third call
T}@T{
\f[CR]9\f[R]
T}@T{
\f[CR]1\f[R]
T}@T{
\f[CR]1\f[R]
T}@T{
\f[CR]10\f[R]
T}
T{
Fourth call
T}@T{
\f[CR]10\f[R]
T}@T{
\f[CR]0\f[R]
T}@T{
\f[CR]0\f[R]
T}@T{
\f[CR]10\f[R]
T}
.TE
.PP
The \f[CR]array\f[R] parameter never changes through the process \(em
it\(cqs always \f[CR][0, 1, 2, 3, 4]\f[R].
The value returned by \f[CR]reduceRight\f[R] would be that of the last
callback invocation (\f[CR]10\f[R]).
.SS How reduceRight() works with an initial value
Here we reduce the same array using the same algorithm, but with an
\f[CR]initialValue\f[R] of \f[CR]10\f[R] passed as the second argument
to \f[CR]reduceRight()\f[R]:
.IP
.EX
[0, 1, 2, 3, 4].reduceRight(
  (accumulator, currentValue, index, array) \f[B]=>\f[R] accumulator + currentValue,
  10,
);
.EE
.PP
.TS
tab(@);
lw(13.5n) lw(16.0n) lw(17.2n) lw(8.6n) lw(14.7n).
T{
T}@T{
\f[CR]accumulator\f[R]
T}@T{
\f[CR]currentValue\f[R]
T}@T{
\f[CR]index\f[R]
T}@T{
Return value
T}
_
T{
First call
T}@T{
\f[CR]10\f[R]
T}@T{
\f[CR]4\f[R]
T}@T{
\f[CR]4\f[R]
T}@T{
\f[CR]14\f[R]
T}
T{
Second call
T}@T{
\f[CR]14\f[R]
T}@T{
\f[CR]3\f[R]
T}@T{
\f[CR]3\f[R]
T}@T{
\f[CR]17\f[R]
T}
T{
Third call
T}@T{
\f[CR]17\f[R]
T}@T{
\f[CR]2\f[R]
T}@T{
\f[CR]2\f[R]
T}@T{
\f[CR]19\f[R]
T}
T{
Fourth call
T}@T{
\f[CR]19\f[R]
T}@T{
\f[CR]1\f[R]
T}@T{
\f[CR]1\f[R]
T}@T{
\f[CR]20\f[R]
T}
T{
Fifth call
T}@T{
\f[CR]20\f[R]
T}@T{
\f[CR]0\f[R]
T}@T{
\f[CR]0\f[R]
T}@T{
\f[CR]20\f[R]
T}
.TE
.PP
The value returned by \f[CR]reduceRight\f[R] this time would be, of
course, \f[CR]20\f[R].
.SS Sum up all values within an array
.IP
.EX
\f[B]const\f[R] sum = [0, 1, 2, 3].reduceRight((a, b) \f[B]=>\f[R] a + b);
\f[I]// sum is 6\f[R]
.EE
.SS Run a list of asynchronous functions with callbacks in series each passing their results to the next
.IP
.EX
\f[B]const\f[R] waterfall =
  (...functions) \f[B]=>\f[R]
  (callback, ...args) \f[B]=>\f[R]
    functions.reduceRight(
      (composition, fn) \f[B]=>\f[R]
        (...results) \f[B]=>\f[R]
          fn(composition, ...results),
      callback,
    )(...args);

\f[B]const\f[R] randInt = (max) \f[B]=>\f[R] Math.floor(Math.random() * max);

\f[B]const\f[R] add5 = (callback, x) \f[B]=>\f[R] {
  setTimeout(callback, randInt(1000), x + 5);
};
\f[B]const\f[R] mul3 = (callback, x) \f[B]=>\f[R] {
  setTimeout(callback, randInt(1000), x * 3);
};
\f[B]const\f[R] sub2 = (callback, x) \f[B]=>\f[R] {
  setTimeout(callback, randInt(1000), x \- 2);
};
\f[B]const\f[R] split = (callback, x) \f[B]=>\f[R] {
  setTimeout(callback, randInt(1000), x, x);
};
\f[B]const\f[R] add = (callback, x, y) \f[B]=>\f[R] {
  setTimeout(callback, randInt(1000), x + y);
};
\f[B]const\f[R] div4 = (callback, x) \f[B]=>\f[R] {
  setTimeout(callback, randInt(1000), x / 4);
};

\f[B]const\f[R] computation = waterfall(add5, mul3, sub2, split, add, div4);
computation(console.log, 5); \f[I]// Logs 14\f[R]

\f[I]// same as:\f[R]

\f[B]const\f[R] computation2 = (input, callback) \f[B]=>\f[R] {
  \f[B]const\f[R] f6 = (x) \f[B]=>\f[R] div4(callback, x);
  \f[B]const\f[R] f5 = (x, y) \f[B]=>\f[R] add(f6, x, y);
  \f[B]const\f[R] f4 = (x) \f[B]=>\f[R] split(f5, x);
  \f[B]const\f[R] f3 = (x) \f[B]=>\f[R] sub2(f4, x);
  \f[B]const\f[R] f2 = (x) \f[B]=>\f[R] mul3(f3, x);
  add5(f2, input);
};
.EE
.SS Difference between reduce and reduceRight
.IP
.EX
\f[B]const\f[R] a = [\(dq1\(dq, \(dq2\(dq, \(dq3\(dq, \(dq4\(dq, \(dq5\(dq];
\f[B]const\f[R] left = a.reduce((prev, cur) \f[B]=>\f[R] prev + cur);
\f[B]const\f[R] right = a.reduceRight((prev, cur) \f[B]=>\f[R] prev + cur);

console.log(left); \f[I]// \(dq12345\(dq\f[R]
console.log(right); \f[I]// \(dq54321\(dq\f[R]
.EE
.SS Defining composable functions
Function composition is a mechanism for combining functions, in which
the output of each function is passed into the next one, and the output
of the last function is the final result.
In this example we use \f[CR]reduceRight()\f[R] to implement function
composition.
.PP
See also \c
.UR https://en.wikipedia.org/wiki/Function_composition_(computer_science)
Function composition
.UE \c
\ on Wikipedia.
.IP
.EX
\f[B]const\f[R] compose =
  (...args) \f[B]=>\f[R]
  (value) \f[B]=>\f[R]
    args.reduceRight((acc, fn) \f[B]=>\f[R] fn(acc), value);

\f[I]// Increment passed number\f[R]
\f[B]const\f[R] inc = (n) \f[B]=>\f[R] n + 1;

\f[I]// Doubles the passed value\f[R]
\f[B]const\f[R] double = (n) \f[B]=>\f[R] n * 2;

\f[I]// using composition function\f[R]
console.log(compose(double, inc)(2)); \f[I]// 6\f[R]

\f[I]// using composition function\f[R]
console.log(compose(inc, double)(2)); \f[I]// 5\f[R]
.EE
.SS Using reduceRight() with sparse arrays
\f[CR]reduceRight()\f[R] skips missing elements in sparse arrays, but it
does not skip \f[CR]undefined\f[R] values.
.IP
.EX
console.log([1, 2, , 4].reduceRight((a, b) \f[B]=>\f[R] a + b)); \f[I]// 7\f[R]
console.log([1, 2, \f[B]undefined\f[R], 4].reduceRight((a, b) \f[B]=>\f[R] a + b)); \f[I]// NaN\f[R]
.EE
.SS Calling reduceRight() on non\-array objects
The \f[CR]reduceRight()\f[R] method reads the \f[CR]length\f[R] property
of \f[CR]this\f[R] and then accesses each property whose key is a
nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
  3: 99, \f[I]// ignored by reduceRight() since length is 3\f[R]
};
console.log(Array.prototype.reduceRight.call(arrayLike, (x, y) \f[B]=>\f[R] x \- y));
\f[I]// \-1, which is 4 \- 3 \- 2\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.reduceRight\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/array.prototype.reduceright
es\-shims polyfill of \f[CR]Array.prototype.reduceRight\f[R]
.UE \c
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array\f[R]
.IP \(bu 2
\f[CR]Array.prototype.map()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.flat()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.flatMap()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.reduce()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.reduceRight()\f[R]
.IP \(bu 2
\f[CR]Object.groupBy()\f[R]
.IP \(bu 2
\f[CR]Map.groupBy()\f[R]
