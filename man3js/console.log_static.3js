.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "console.log_static" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
console.log_static \- console: log() static method
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The \f[B]\f[CB]console.log()\f[B]\f[R] static method outputs a message
to the console.
The message may be a single string (with optional substitution values),
or it may be any one or more JavaScript objects.
.SH SYNTAX
.IP
.EX
log(obj1)
log(obj1, /* \&..., */ objN)
log(msg)
log(msg, subst1, /* \&..., */ substN)
.EE
.SS Parameters
.TP
\f[B]obj1\f[R] \&... \f[B]objN\f[R]
A list of JavaScript objects to output.
Objects are output in the order listed.
Please be warned that if you log objects in the latest versions of
Chrome and Firefox, what you get logged on the console is a
\f[I]reference to the object\f[R], which is not necessarily the `value'
of the object at the moment in time you call \f[CR]console.log()\f[R],
but it is the value of the object at the moment you open the console.
.TP
\f[B]msg\f[R]
A JavaScript string containing zero or more substitution strings.
.TP
\f[B]subst1\f[R] \&... \f[B]substN\f[R]
JavaScript objects with which to replace substitution strings within
\f[CR]msg\f[R].
This gives you additional control over the format of the output.
.PP
See Outputting text to the console in the documentation of
\f[CR]console\f[R] for details.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH LOGGING OBJECTS
Information about an object is lazily retrieved.
This means that the log message shows the content of an object at the
time when it\[cq]s first viewed, not when it was logged.
For example:
.IP
.EX
\f[B]const\f[R] obj = {};
console.log(obj);
obj.prop = 123;
.EE
.PP
This will output \f[CR]{}\f[R].
However, if you expand the object\[cq]s details, you will see
\f[CR]prop: 123\f[R].
.PP
If you are going to mutate your object and you want to prevent the
logged information from being updated, you can deep\-clone the object
before logging it.
A common way is to \f[CR]JSON.stringify()\f[R] and then
\f[CR]JSON.parse()\f[R] it:
.IP
.EX
console.log(JSON.parse(JSON.stringify(obj)));
.EE
.PP
There are other alternatives that work in browsers, such as
\f[CR]structuredClone()\f[R], which are more effective at cloning
different types of objects.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/console/api#log
Microsoft Edge\[cq]s documentation for \f[CR]console.log()\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://nodejs.org/docs/latest/api/console.html#consolelogdata-args
Node.JS documentation for \f[CR]console.log()\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/devtools/console/api/#log
Google Chrome\[cq]s documentation for \f[CR]console.log()\f[R]
.UE \c
