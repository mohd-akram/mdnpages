.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CANVASRENDERINGCONTEXT2D.GETIMAGEDATA" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.getImageData \- CanvasRenderingContext2D:
getImageData() method
.SH SYNOPSIS
The \f[CR]CanvasRenderingContext2D\f[R] method
\f[B]\f[CB]getImageData()\f[B]\f[R] of the Canvas 2D API returns an
\f[CR]ImageData\f[R] object representing the underlying pixel data for a
specified portion of the canvas.
.PP
This method is not affected by the canvas\(cqs transformation matrix.
If the specified rectangle extends outside the bounds of the canvas, the
pixels outside the canvas are transparent black in the returned
\f[CR]ImageData\f[R] object.
.RS
.PP
\f[B]Note:\f[R] Image data can be painted onto a canvas using the
\f[CR]putImageData()\f[R] method.
.RE
.PP
You can find more information about \f[CR]getImageData()\f[R] and
general manipulation of canvas contents in Pixel manipulation with
canvas.
.SH SYNTAX
.IP
.EX
getImageData(sx, sy, sw, sh)
getImageData(sx, sy, sw, sh, settings)
.EE
.SS Parameters
.TP
\f[B]sx\f[R]
The x\-axis coordinate of the top\-left corner of the rectangle from
which the \f[CR]ImageData\f[R] will be extracted.
.TP
\f[B]sy\f[R]
The y\-axis coordinate of the top\-left corner of the rectangle from
which the \f[CR]ImageData\f[R] will be extracted.
.TP
\f[B]sw\f[R]
The width of the rectangle from which the \f[CR]ImageData\f[R] will be
extracted.
Positive values are to the right, and negative to the left.
.TP
\f[B]sh\f[R]
The height of the rectangle from which the \f[CR]ImageData\f[R] will be
extracted.
Positive values are down, and negative are up.
.TP
\f[B]settings\f[R] \f[I](optional)\f[R]
An object with the following properties:
.RS
.IP \(bu 2
\f[CR]colorSpace\f[R]: Specifies the color space of the image data.
Can be set to \f[CR]\(dqsrgb\(dq\f[R] for the \c
.UR https://en.wikipedia.org/wiki/SRGB
sRGB color space
.UE \c
\ or \f[CR]\(dqdisplay\-p3\(dq\f[R] for the \c
.UR https://en.wikipedia.org/wiki/DCI-P3
display\-p3 color space
.UE \c
\&.
.RE
.SS Return value
An \f[CR]ImageData\f[R] object containing the image data for the
rectangle of the canvas specified.
The coordinates of the rectangle\(cqs top\-left corner are
\f[CR](sx, sy)\f[R], while the coordinates of the bottom corner are
\f[CR](sx + sw \- 1, sy + sh \- 1)\f[R].
.SS Exceptions
.TP
\f[B]IndexSizeError\f[R] \f[B]DOMException\f[R]
Thrown if either \f[CR]sw\f[R] or \f[CR]sh\f[R] are zero.
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
The canvas contains or may contain pixels which were loaded from an
origin other than the one from which the document itself was loaded.
To avoid a \f[CR]SecurityError\f[R] \f[CR]DOMException\f[R] being thrown
in this situation, configure CORS to allow the source image to be used
in this way.
See Allowing cross\-origin use of images and canvas.
.SH EXAMPLES
.SS Getting image data from a canvas
This example draws an image, and then uses \f[CR]getImageData()\f[R] to
grab a portion of the canvas.
.PP
We use \f[CR]getImageData()\f[R] to extract a slice of the image,
starting at \f[CR](10, 20)\f[R], with a width of \f[CR]80\f[R] and a
height of \f[CR]230\f[R].
We then draw this slice three times, positioning the slices
progressively below and to the right of the last slice.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq width=\(dq700\(dq height=\(dq400\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

\f[B]const\f[R] image = \f[B]new\f[R] Image();
image.src = \(dqplumeria.jpg\(dq;
image.addEventListener(\(dqload\(dq, () \f[B]=>\f[R] {
  ctx.drawImage(image, 0, 0, 233, 320);

  \f[B]const\f[R] imageData = ctx.getImageData(10, 20, 80, 230);
  ctx.putImageData(imageData, 260, 0);
  ctx.putImageData(imageData, 380, 50);
  ctx.putImageData(imageData, 500, 100);
});
.EE
.SS Result
.SS Color space conversion
The optional \f[CR]colorSpace\f[R] setting allows you to get image data
in the desired format.
.IP
.EX
\f[B]const\f[R] context = canvas.getContext(\(dq2d\(dq, { colorSpace: \(dqdisplay\-p3\(dq });
context.fillStyle = \(dqcolor(display\-p3 0.5 0 0)\(dq;
context.fillRect(0, 0, 10, 10);

\f[I]// Get ImageData converted to sRGB\f[R]
\f[B]const\f[R] imageData = context.getImageData(0, 0, 1, 1, { colorSpace: \(dqsrgb\(dq });
console.log(imageData.colorSpace); \f[I]// \(dqsrgb\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \(bu 2
\f[CR]ImageData\f[R] object
.IP \(bu 2
\f[CR]CanvasRenderingContext2D.putImageData()\f[R]
.IP \(bu 2
Pixel manipulation with canvas
