.\" Automatically generated by Pandoc 3.4
.\"
.TH "CSSContainerRule.containerName" "JS" "October 8, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSSContainerRule.containerName \- CSSContainerRule: containerName
property
.SH SYNOPSIS
The read\-only \f[B]\f[CB]containerName\f[B]\f[R] property of the
\f[CR]CSSContainerRule\f[R] interface represents the container name of
the associated CSS \f[CR]\[at]container\f[R] at\-rule.
.PP
For example, the value of \f[CR]containerName\f[R] for the
\f[CR]\[at]container\f[R] below is \f[CR]sidebar\f[R]:
.IP
.EX
\f[B]\[at]container\f[R] sidebar (\f[B]min\-width\f[R]: 700px) {
  .card {
    \f[B]font\-size\f[R]: 2em;
  }
}
.EE
.SH VALUE
A string that contains the \f[CR]container\-name\f[R] of the
\f[CR]\[at]container\f[R] associated with this
\f[CR]CSSContainerRule\f[R].
If the \f[CR]\[at]container\f[R] is not named, the function returns the
empty string (\f[CR]\[dq]\[dq]\f[R]).
.SH EXAMPLES
The example below defines a named \f[CR]\[at]container\f[R] rule, and
displays the properties of the associated \f[CR]CSSContainerRule\f[R].
The CSS is very similar to that in the \f[CR]\[at]container\f[R] example
Creating named container contexts.
.PP
First we define the HTML for a \f[CR]card\f[R] (\f[CR]<div>\f[R])
contained within a \f[CR]post\f[R].
.IP
.EX
<\f[B]div\f[R] class=\[dq]post\[dq]>
  <\f[B]div\f[R] class=\[dq]card\[dq]>
    <\f[B]h2\f[R]>Card title</\f[B]h2\f[R]>
    <\f[B]p\f[R]>Card content</\f[B]p\f[R]>
  </\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.PP
The CSS for the container element specifies the type of the container,
and may also specify a name.
The card has a default font size, which is overridden for the
\f[CR]\[at]container\f[R] named \f[CR]sidebar\f[R] if the minimum width
is greater than 700px.
.IP
.EX
<\f[B]style\f[R] id=\[dq]example\-styles\[dq]>
  .post {
    \f[B]container\-type\f[R]: inline\-size;
    \f[B]container\-name\f[R]: sidebar;
  }

  \f[I]/* Default heading styles for the card title */\f[R]
  .card h2 {
    \f[B]font\-size\f[R]: 1em;
  }

  \f[B]\[at]container\f[R] sidebar (\f[B]min\-width\f[R]: 700px) {
    .card {
      \f[B]font\-size\f[R]: 2em;
    }
  }
</\f[B]style\f[R]>
.EE
.PP
The code below gets the \f[CR]HTMLStyleElement\f[R] associated with the
example using its \f[CR]id\f[R], and then uses its \f[CR]sheet\f[R]
property to get the \f[CR]StyleSheet\f[R].
From the \f[CR]StyleSheet\f[R] we get the set of \f[CR]cssRules\f[R]
added to the sheet.
Since we added the \f[CR]\[at]container\f[R] as the third rule above, we
can access the associated \f[CR]CSSContainerRule\f[R] using the third
entry (index \[lq]2\[rq]), in the \f[CR]cssRules\f[R].
Last of all, we log the container name and query properties (the code
that does the logging is not shown).
.IP
.EX
\f[B]const\f[R] exampleStylesheet = document.getElementById(\[dq]example\-styles\[dq]).sheet;
\f[B]const\f[R] exampleRules = exampleStylesheet.cssRules;
\f[B]const\f[R] containerRule = exampleRules[2]; \f[I]// a CSSContainerRule representing the container rule.\f[R]
log(\[ga]CSSContainerRule.containerName: \[dq]${containerRule.containerName}\[dq]\[ga]);
.EE
.PP
The example output is shown below.
The log section lists the container name string.
The title in the card section should double in size as the width of the
page goes over 700px.
.SH SEE ALSO
.IP \[bu] 2
CSS \f[CR]container\f[R] shorthand property
.IP \[bu] 2
CSS containment module
.IP \[bu] 2
Container queries
.IP \[bu] 2
Using container size and style queries
