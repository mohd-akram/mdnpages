.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Worker.messageerror_event" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Worker.messageerror_event \- Worker: messageerror event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers, except for
Service Workers.
.PP
The \f[CR]messageerror\f[R] event is fired on a \f[CR]Worker\f[R] object
when it receives a message that can\[cq]t be deserialized.
.PP
This event is not cancellable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]messageerror\[dq], (event) \f[B]=>\f[R] {});

onmessageerror = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g.\ in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
Create a worker, and listen for \f[CR]message\f[R] and
\f[CR]messageerror\f[R] events using \f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// main.js\f[R]

\f[B]const\f[R] worker = \f[B]new\f[R] Worker(\[dq]static/scripts/worker.js\[dq]);

worker.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  console.error(\[ga]Received message from worker: ${event}\[ga]);
});

worker.addEventListener(\[dq]messageerror\[dq], (event) \f[B]=>\f[R] {
  console.error(\[ga]Error receiving message from worker: ${event}\[ga]);
});
.EE
.PP
The same, but using the \f[CR]onmessageerror\f[R] event handler
property:
.IP
.EX
\f[I]// main.js\f[R]

\f[B]const\f[R] worker = \f[B]new\f[R] Worker(\[dq]static/scripts/worker.js\[dq]);

worker.onmessage = (event) \f[B]=>\f[R] {
  console.error(\[ga]Received message from worker: ${event}\[ga]);
};

worker.onmessageerror = (event) \f[B]=>\f[R] {
  console.error(\[ga]Error receiving message from worker: ${event}\[ga]);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Worker.postMessage()\f[R]
.IP \[bu] 2
Related events: \f[CR]message\f[R]
