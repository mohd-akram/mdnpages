.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "WebGLRenderingContext.readPixels" "JS" "July 18, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.readPixels \- WebGLRenderingContext: readPixels()
method
.SH SYNOPSIS
The \f[B]\f[CB]WebGLRenderingContext.readPixels()\f[B]\f[R] method of
the WebGL API reads a block of pixels from a specified rectangle of the
current color framebuffer into a \f[CR]TypedArray\f[R] or a
\f[CR]DataView\f[R] object.
.SH SYNTAX
.IP
.EX
// WebGL1:
readPixels(x, y, width, height, format, type, pixels)

// WebGL2:
readPixels(x, y, width, height, format, type, offset)
readPixels(x, y, width, height, format, type, pixels)
readPixels(x, y, width, height, format, type, pixels, dstOffset)
.EE
.SS Parameters
.TP
\f[B]x\f[R]
A \f[CR]GLint\f[R] specifying the first horizontal pixel that is read
from the lower left corner of a rectangular block of pixels.
.TP
\f[B]y\f[R]
A \f[CR]GLint\f[R] specifying the first vertical pixel that is read from
the lower left corner of a rectangular block of pixels.
.TP
\f[B]width\f[R]
A \f[CR]GLsizei\f[R] specifying the width of the rectangle.
.TP
\f[B]height\f[R]
A \f[CR]GLsizei\f[R] specifying the height of the rectangle.
.TP
\f[B]format\f[R]
A \f[CR]GLenum\f[R] specifying the format of the pixel data.
Possible values:
.RS
.TP
\f[B]gl.ALPHA\f[R]
Discards the red, green and blue components and reads the alpha
component.
.TP
\f[B]gl.RGB\f[R]
Discards the alpha components and reads the red, green and blue
components.
.TP
\f[B]gl.RGBA\f[R]
Red, green, blue and alpha components are read from the color buffer.
.PP
WebGL2 adds
.IP \[bu] 2
\f[CR]gl.RED\f[R]
.IP \[bu] 2
\f[CR]gl.RG\f[R]
.IP \[bu] 2
\f[CR]gl.RED_INTEGER\f[R]
.IP \[bu] 2
\f[CR]gl.RG_INTEGER\f[R]
.IP \[bu] 2
\f[CR]gl.RGB_INTEGER\f[R]
.IP \[bu] 2
\f[CR]gl.RGBA_INTEGER\f[R]
.RE
.TP
\f[B]type\f[R]
A \f[CR]GLenum\f[R] specifying the data type of the pixel data.
Possible values:
.RS
.IP \[bu] 2
\f[CR]gl.UNSIGNED_BYTE\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_5_6_5\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_4_4_4_4\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT_5_5_5_1\f[R]
.IP \[bu] 2
\f[CR]gl.FLOAT\f[R]
.PP
WebGL2 adds
.IP \[bu] 2
\f[CR]gl.BYTE\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_2_10_10_10_REV\f[R]
.IP \[bu] 2
\f[CR]gl.HALF_FLOAT\f[R]
.IP \[bu] 2
\f[CR]gl.SHORT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT\f[R]
.IP \[bu] 2
\f[CR]gl.INT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_10F_11F_11F_REV\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT_5_9_9_9_REV\f[R]
.RE
.TP
\f[B]pixels\f[R]
An object to read data into.
The array type must match the type of the \f[CR]type\f[R] parameter:
.RS
.IP \[bu] 2
\f[CR]Uint8Array\f[R] for \f[CR]gl.UNSIGNED_BYTE\f[R].
.IP \[bu] 2
\f[CR]Uint16Array\f[R] for \f[CR]gl.UNSIGNED_SHORT_5_6_5\f[R],
\f[CR]gl.UNSIGNED_SHORT_4_4_4_4\f[R], or
\f[CR]gl.UNSIGNED_SHORT_5_5_5_1\f[R].
.IP \[bu] 2
\f[CR]Float32Array\f[R] for \f[CR]gl.FLOAT\f[R].
.RE
.TP
\f[B]dstOffset\f[R] \f[I](optional)\f[R]
Offset.
Defaults to 0.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.IP \[bu] 2
A \f[CR]gl.INVALID_ENUM\f[R] error is thrown if \f[CR]format\f[R] or
\f[CR]type\f[R] is not an accepted value.
.IP \[bu] 2
A \f[CR]gl.INVALID_OPERATION\f[R] error is thrown if
.RS 2
.IP \[bu] 2
\f[CR]type\f[R] is \f[CR]gl.UNSIGNED_SHORT_5_6_5\f[R] and
\f[CR]format\f[R] is not \f[CR]gl.RGB\f[R].
.IP \[bu] 2
\f[CR]type\f[R] is \f[CR]gl.UNSIGNED_SHORT_4_4_4_4\f[R] and
\f[CR]format\f[R] is not \f[CR]gl.RGBA\f[R].
.IP \[bu] 2
\f[CR]type\f[R] does not match the typed array type of
\f[CR]pixels\f[R].
.RE
.IP \[bu] 2
A \f[CR]gl.INVALID_FRAMEBUFFER_OPERATION\f[R] error is thrown if the
currently bound framebuffer is not framebuffer complete.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] gl = canvas.getContext(\[dq]webgl\[dq]);
\f[B]const\f[R] pixels = \f[B]new\f[R] Uint8Array(
  gl.drawingBufferWidth * gl.drawingBufferHeight * 4,
);
gl.readPixels(
  0,
  0,
  gl.drawingBufferWidth,
  gl.drawingBufferHeight,
  gl.RGBA,
  gl.UNSIGNED_BYTE,
  pixels,
);
console.log(pixels); \f[I]// Uint8Array\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
Typed Arrays
