.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.QUERYSELECTOR" "3JS" "April 10, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.querySelector \- Element: querySelector() method
.SH SYNOPSIS
The \f[B]\f[CB]querySelector()\f[B]\f[R] method of the
\f[CR]Element\f[R] interface returns the first element that is a
descendant of the element on which it is invoked that matches the
specified group of selectors.
.SH SYNTAX
.IP
.EX
querySelector(selectors)
.EE
.SS Parameters
.TP
\f[B]selectors\f[R]
A string containing one or more selectors to match.
This string must be a valid CSS selector string; if it isn\(cqt, a
\f[CR]SyntaxError\f[R] exception is thrown.
.RS
.PP
Note that the HTML specification does not require attribute values to be
valid CSS identifiers.
If a \f[CR]class\f[R] or \f[CR]id\f[R] attribute value is not a valid
CSS identifier, then you must escape it before using it in a selector,
either by calling \f[CR]CSS.escape()\f[R] on the value, or using one of
the techniques described in Escaping characters.
See Escaping attribute values for an example.
.RE
.SS Return value
The first descendant element of \f[CR]baseElement\f[R] which matches the
specified group of \f[CR]selectors\f[R].
The entire hierarchy of elements is considered when matching, including
those outside the set of elements including \f[CR]baseElement\f[R] and
its descendants; in other words, \f[CR]selectors\f[R] is first applied
to the whole document, not the \f[CR]baseElement\f[R], to generate an
initial list of potential elements.
The resulting elements are then examined to see if they are descendants
of \f[CR]baseElement\f[R].
The first match of those remaining elements is returned by the
\f[CR]querySelector()\f[R] method.
.PP
If no matches are found, the returned value is \f[CR]null\f[R].
.SS Exceptions
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if the specified \f[CR]selectors\f[R] are invalid.
.SH EXAMPLES
Let\(cqs consider a few examples.
.SS Find a specific element with specific values of an attribute
In this first example, the first \f[CR]<style>\f[R] element which either
has no type or has type \(lqtext/css\(rq in the HTML document body is
returned:
.IP
.EX
\f[B]const\f[R] el = document.body.querySelector(
  \(dqstyle[type=\(aqtext/css\(aq], style:not([type])\(dq,
);
.EE
.SS Get direct descendants using the :scope pseudo\-class
This example uses the \f[CR]:scope\f[R] pseudo\-class to retrieve direct
children of the \f[CR]parentElement\f[R] element.
.SS HTML
.IP
.EX
<\f[B]div\f[R]>
  <\f[B]h6\f[R]>Page Title</\f[B]h6\f[R]>
  <\f[B]div\f[R] id=\(dqparent\(dq>
    <\f[B]span\f[R]>Love is Kind.</\f[B]span\f[R]>
    <\f[B]span\f[R]>
      <\f[B]span\f[R]>Love is Patient.</\f[B]span\f[R]>
    </\f[B]span\f[R]>
    <\f[B]span\f[R]>
      <\f[B]span\f[R]>Love is Selfless.</\f[B]span\f[R]>
    </\f[B]span\f[R]>
  </\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
span {
  \f[B]display\f[R]: block;
  \f[B]margin\-bottom\f[R]: 5px;
}
\&.red span {
  \f[B]background\-color\f[R]: red;
  \f[B]padding\f[R]: 5px;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] parentElement = document.querySelector(\(dq#parent\(dq);
\f[B]let\f[R] allChildren = parentElement.querySelectorAll(\(dq:scope > span\(dq);
allChildren.forEach((item) \f[B]=>\f[R] item.classList.add(\(dqred\(dq));
.EE
.SS Result
.SS The entire hierarchy counts
This example demonstrates that the hierarchy of the entire document is
considered when applying \f[CR]selectors\f[R], so that levels outside
the specified \f[CR]baseElement\f[R] are still considered when locating
matches.
.SS HTML
.IP
.EX
<\f[B]div\f[R]>
  <\f[B]h5\f[R]>Original content</\f[B]h5\f[R]>
  <\f[B]p\f[R]>
    inside paragraph
    <\f[B]span\f[R]>inside span</\f[B]span\f[R]>
    inside paragraph
  </\f[B]p\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R]>
  <\f[B]h5\f[R]>Output</\f[B]h5\f[R]>
  <\f[B]div\f[R] id=\(dqoutput\(dq></\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] baseElement = document.querySelector(\(dqp\(dq);
document.getElementById(\(dqoutput\(dq).textContent =
  baseElement.querySelector(\(dqdiv span\(dq).textContent;
.EE
.SS Result
The result looks like this:
.PP
Notice how the \f[CR]\(dqdiv span\(dq\f[R] selector still successfully
matches the \f[CR]<span>\f[R] element, even though the
\f[CR]baseElement\f[R]\(cqs child nodes do not include the
\f[CR]<div>\f[R] element (it is still part of the specified selector).
.SS Escaping attribute values
This example shows that if an HTML document contains an \f[CR]id\f[R]
which is not a valid CSS identifier, then we must escape the attribute
value before using it in \f[CR]querySelector()\f[R].
.SS HTML
In the following code, a \f[CR]<div>\f[R] element has an \f[CR]id\f[R]
of \f[CR]\(dqthis?element\(dq\f[R], which is not a valid CSS identifier,
because the \f[CR]\(dq?\(dq\f[R] character is not allowed in CSS
identifiers.
.PP
We also have three buttons, and a \f[CR]<pre>\f[R] element for logging
errors.
.IP
.EX
<\f[B]div\f[R] id=\(dqcontainer\(dq>
  <\f[B]div\f[R] id=\(dqthis?element\(dq></\f[B]div\f[R]>
</\f[B]div\f[R]>

<\f[B]button\f[R] id=\(dqno\-escape\(dq>No escape</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqcss\-escape\(dq>CSS.escape()</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqmanual\-escape\(dq>Manual escape</\f[B]button\f[R]>

<\f[B]pre\f[R] id=\(dqlog\(dq></\f[B]pre\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]background\-color\f[R]: blue;
  \f[B]margin\f[R]: 1rem 0;
  \f[B]height\f[R]: 100px;
  \f[B]width\f[R]: 200px;
}
.EE
.SS JavaScript
All three buttons, when clicked, try to select the \f[CR]<div>\f[R], and
then set its background color to a random value.
.IP \(bu 2
The first button uses the \f[CR]\(dqthis?element\(dq\f[R] value
directly.
.IP \(bu 2
The second button escapes the value using \f[CR]CSS.escape()\f[R].
.IP \(bu 2
The third button explicitly escapes the \f[CR]\(dq?\(dq\f[R] character
using a backslash.
Note that we must also escape the backslash itself, using another
backslash, like: \f[CR]\(dq\(rs\(rs?\(dq\f[R].
.IP
.EX
\f[B]const\f[R] container = document.querySelector(\(dq#container\(dq);
\f[B]const\f[R] log = document.querySelector(\(dq#log\(dq);

\f[B]function\f[R] random(number) {
  \f[B]return\f[R] Math.floor(Math.random() * number);
}

\f[B]function\f[R] setBackgroundColor(id) {
  log.textContent = \(dq\(dq;

  \f[B]try\f[R] {
    \f[B]const\f[R] element = container.querySelector(\(ga#${id}\(ga);
    \f[B]const\f[R] randomColor = \(gargb(${random(255)} ${random(255)} ${random(255)})\(ga;
    element.style.backgroundColor = randomColor;
  } \f[B]catch\f[R] (e) {
    log.textContent = e;
  }
}

document.querySelector(\(dq#no\-escape\(dq).addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  setBackgroundColor(\(dqthis?element\(dq);
});

document.querySelector(\(dq#css\-escape\(dq).addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  setBackgroundColor(CSS.escape(\(dqthis?element\(dq));
});

document.querySelector(\(dq#manual\-escape\(dq).addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  setBackgroundColor(\(dqthis\(rs\(rs?element\(dq);
});
.EE
.SS Result
Clicking the first button gives an error, while the second and third
buttons work properly.
.SS More examples
See \f[CR]Document.querySelector()\f[R] for additional examples of the
proper format for the \f[CR]selectors\f[R].
.SH SEE ALSO
.IP \(bu 2
Locating DOM elements using selectors
.IP \(bu 2
Attribute selectors in the CSS Guide
.IP \(bu 2
Attribute selectors in the MDN Learning Area
.IP \(bu 2
\f[CR]Element.querySelectorAll()\f[R]
.IP \(bu 2
\f[CR]Document.querySelector()\f[R] and
\f[CR]Document.querySelectorAll()\f[R]
.IP \(bu 2
\f[CR]DocumentFragment.querySelector()\f[R] and
\f[CR]DocumentFragment.querySelectorAll()\f[R]
.IP \(bu 2
Other methods that take selectors: \f[CR]element.closest()\f[R] and
\f[CR]element.matches()\f[R].
