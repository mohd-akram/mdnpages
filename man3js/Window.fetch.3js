.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WINDOW.FETCH" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.fetch \- Window: fetch() method
.SH SYNOPSIS
The \f[B]\f[CB]fetch()\f[B]\f[R] method of the \f[CR]Window\f[R]
interface starts the process of fetching a resource from the network,
returning a promise that is fulfilled once the response is available.
.PP
The promise resolves to the \f[CR]Response\f[R] object representing the
response to your request.
.PP
A \f[CR]fetch()\f[R] promise only rejects when the request fails, for
example, because of a badly\-formed request URL or a network error.
A \f[CR]fetch()\f[R] promise \f[I]does not\f[R] reject if the server
responds with HTTP status codes that indicate errors (\f[CR]404\f[R],
\f[CR]504\f[R], etc.).
Instead, a \f[CR]then()\f[R] handler must check the
\f[CR]Response.ok\f[R] and/or \f[CR]Response.status\f[R] properties.
.PP
The \f[CR]fetch()\f[R] method is controlled by the
\f[CR]connect\-src\f[R] directive of Content Security Policy rather than
the directive of the resources it\(cqs retrieving.
.RS
.PP
\f[B]Note:\f[R] The \f[CR]fetch()\f[R] method\(cqs parameters are
identical to those of the \f[CR]Request()\f[R] constructor.
.RE
.SH SYNTAX
.IP
.EX
fetch(resource)
fetch(resource, options)
.EE
.SS Parameters
.TP
\f[B]resource\f[R]
This defines the resource that you wish to fetch.
This can either be:
.RS
.IP \(bu 2
A string or any other object with a stringifier \(em including a
\f[CR]URL\f[R] object \(em that provides the URL of the resource you
want to fetch.
The URL may be relative to the base URL, which is the document\(cqs
\f[CR]baseURI\f[R] in a window context, or
\f[CR]WorkerGlobalScope.location\f[R] in a worker context.
.IP \(bu 2
A \f[CR]Request\f[R] object.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
A \f[CR]RequestInit\f[R] object containing any custom settings that you
want to apply to the request.
.SS Return value
A \f[CR]Promise\f[R] that resolves to a \f[CR]Response\f[R] object.
.SS Exceptions
.TP
\f[B]AbortError\f[R] \f[B]DOMException\f[R]
The request was aborted due to a call to the \f[CR]AbortController\f[R]
\f[CR]abort()\f[R] method.
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Thrown if use of the Topics API is specifically disallowed by a
\f[CR]browsing\-topics\f[R] Permissions Policy, and a \f[CR]fetch()\f[R]
request was made with \f[CR]browsingTopics: true\f[R].
.TP
\f[B]TypeError\f[R]
Can occur for the following reasons:
.PP
Reason
.PP
Failing examples
.PP
Blocked by a permissions policy
.PP
Use of the Attribution Reporting API is blocked by a
\f[CR]attribution\-reporting\f[R] \(gaPermissions\-Policy\(ga, and a
\f[CR]fetch()\f[R] request was made with \f[CR]attributionReporting\f[R]
specified.
.PP
Invalid header name.
.IP
.EX
\f[I]// space in \(dqC ontent\-Type\(dq\f[R]
\f[B]const\f[R] headers = {
  \(dqC ontent\-Type\(dq: \(dqtext/xml\(dq,
  \(dqBreaking\-Bad\(dq: \(dq<3\(dq,
};
fetch(\(dqhttps://example.com/\(dq, { headers });
        
.EE
.PP
Invalid header value.
The header object must contain exactly two elements.
.IP
.EX
\f[B]const\f[R] headers = [
  [\(dqContent\-Type\(dq, \(dqtext/html\(dq, \(dqextra\(dq],
  [\(dqAccept\(dq],
];
fetch(\(dqhttps://example.com/\(dq, { headers });
        
.EE
.PP
Invalid URL or scheme, or using a scheme that fetch does not support, or
using a scheme that is not supported for a particular request mode.
.IP
.EX
fetch(\(dqblob://example.com/\(dq, { mode: \(dqcors\(dq });
        
.EE
.PP
URL includes credentials.
.IP
.EX
fetch(\(dqhttps://user:password\(atexample.com/\(dq);
        
.EE
.PP
Invalid referrer URL.
.IP
.EX
fetch(\(dqhttps://example.com/\(dq, { referrer: \(dq./abc\(rsu0000df\(dq });
        
.EE
.PP
Invalid modes (\f[CR]navigate\f[R] and \f[CR]websocket\f[R]).
.IP
.EX
fetch(\(dqhttps://example.com/\(dq, { mode: \(dqnavigate\(dq });
        
.EE
.PP
If the request cache mode is \(dqonly\-if\-cached\(dq and the request
mode is other than \(dqsame\-origin\(dq.
.IP
.EX
fetch(\(dqhttps://example.com/\(dq, {
  cache: \(dqonly\-if\-cached\(dq,
  mode: \(dqno\-cors\(dq,
});
        
.EE
.PP
If the request method is an invalid name token or one of the forbidden
headers (\f[CR]CONNECT\f[R], \f[CR]TRACE\f[R] or \f[CR]TRACK\f[R]).
.IP
.EX
fetch(\(dqhttps://example.com/\(dq, { method: \(dqCONNECT\(dq });
        
.EE
.PP
If the request mode is \(dqno\-cors\(dq and the request method is not a
CORS\-safe\-listed method (\f[CR]GET\f[R], \f[CR]HEAD\f[R], or
\f[CR]POST\f[R]).
.IP
.EX
fetch(\(dqhttps://example.com/\(dq, {
  method: \(dqCONNECT\(dq,
  mode: \(dqno\-cors\(dq,
});
        
.EE
.PP
If the request method is \f[CR]GET\f[R] or \f[CR]HEAD\f[R] and the body
is non\-null or not undefined.
.IP
.EX
fetch(\(dqhttps://example.com/\(dq, {
  method: \(dqGET\(dq,
  body: \f[B]new\f[R] FormData(),
});
        
.EE
.PP
If fetch throws a network error.
.SH EXAMPLES
In our \c
.UR https://github.com/mdn/dom-examples/tree/main/fetch/fetch-request
Fetch Request example
.UE \c
\ (see \c
.UR https://mdn.github.io/dom-examples/fetch/fetch-request/
Fetch Request live
.UE \c
) we create a new \f[CR]Request\f[R] object using the relevant
constructor, then fetch it using a \f[CR]fetch()\f[R] call.
Since we are fetching an image, we run \f[CR]Response.blob()\f[R] on the
response to give it the proper MIME type so it will be handled properly,
then create an Object URL of it and display it in an \f[CR]<img>\f[R]
element.
.IP
.EX
\f[B]const\f[R] myImage = document.querySelector(\(dqimg\(dq);

\f[B]const\f[R] myRequest = \f[B]new\f[R] Request(\(dqflowers.jpg\(dq);

window
  .fetch(myRequest)
  .then((response) \f[B]=>\f[R] {
    \f[B]if\f[R] (!response.ok) {
      \f[B]throw\f[R] \f[B]new\f[R] Error(\(gaHTTP error! Status: ${response.status}\(ga);
    }

    \f[B]return\f[R] response.blob();
  })
  .then((response) \f[B]=>\f[R] {
    myImage.src = URL.createObjectURL(response);
  });
.EE
.PP
In our \c
.UR https://github.com/mdn/dom-examples/tree/main/fetch/fetch-request-with-init
Fetch Request with init example
.UE \c
\ (see \c
.UR https://mdn.github.io/dom-examples/fetch/fetch-request-with-init/
Fetch Request init live
.UE \c
) we do the same thing except that we pass in an \f[I]options\f[R]
object when we invoke \f[CR]fetch()\f[R].
In this case, we can set a \f[CR]Cache\-Control\f[R] value to indicate
what kind of cached responses we\(cqre okay with:
.IP
.EX
\f[B]const\f[R] myImage = document.querySelector(\(dqimg\(dq);
\f[B]const\f[R] reqHeaders = \f[B]new\f[R] Headers();

\f[I]// A cached response is okay unless it\(aqs more than a week old\f[R]
reqHeaders.set(\(dqCache\-Control\(dq, \(dqmax\-age=604800\(dq);

\f[B]const\f[R] options = {
  headers: reqHeaders,
};

\f[I]// Pass init as an \(dqoptions\(dq object with our headers.\f[R]
\f[B]const\f[R] req = \f[B]new\f[R] Request(\(dqflowers.jpg\(dq, options);

fetch(req).then((response) \f[B]=>\f[R] {
  \f[I]// \&...\f[R]
});
.EE
.PP
You could also pass the \f[CR]init\f[R] object in with the
\f[CR]Request\f[R] constructor to get the same effect:
.IP
.EX
\f[B]const\f[R] req = \f[B]new\f[R] Request(\(dqflowers.jpg\(dq, options);
.EE
.PP
You can also use an object literal as \f[CR]headers\f[R] in
\f[CR]init\f[R]:
.IP
.EX
\f[B]const\f[R] options = {
  headers: {
    \(dqCache\-Control\(dq: \(dqmax\-age=60480\(dq,
  },
};

\f[B]const\f[R] req = \f[B]new\f[R] Request(\(dqflowers.jpg\(dq, options);
.EE
.PP
The Using fetch article provides more examples of using
\f[CR]fetch()\f[R].
.SH SEE ALSO
.IP \(bu 2
\f[CR]WorkerGlobalScope.fetch()\f[R]
.IP \(bu 2
Fetch API
.IP \(bu 2
ServiceWorker API
.IP \(bu 2
HTTP access control (CORS)
.IP \(bu 2
HTTP
