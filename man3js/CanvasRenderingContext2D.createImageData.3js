.\" Automatically generated by Pandoc 3.4
.\"
.TH "CanvasRenderingContext2D.createImageData" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.createImageData \- CanvasRenderingContext2D:
createImageData() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.createImageData()\f[B]\f[R]
method of the Canvas 2D API creates a new, blank \f[CR]ImageData\f[R]
object with the specified dimensions.
All of the pixels in the new object are transparent black.
.SH SYNTAX
.IP
.EX
createImageData(width, height)
createImageData(width, height, settings)
createImageData(imagedata)
.EE
.SS Parameters
.TP
\f[B]width\f[R]
The width to give the new \f[CR]ImageData\f[R] object.
A negative value flips the rectangle around the vertical axis.
.TP
\f[B]height\f[R]
The height to give the new \f[CR]ImageData\f[R] object.
A negative value flips the rectangle around the horizontal axis.
.TP
\f[B]settings\f[R] \f[I](optional)\f[R]
An object with the following properties:
.RS
.IP \[bu] 2
\f[CR]colorSpace\f[R]: Specifies the color space of the image data.
Can be set to \f[CR]\[dq]srgb\[dq]\f[R] for the \c
.UR https://en.wikipedia.org/wiki/SRGB
sRGB color space
.UE \c
\ or \f[CR]\[dq]display\-p3\[dq]\f[R] for the \c
.UR https://en.wikipedia.org/wiki/DCI-P3
display\-p3 color space
.UE \c
\&.
.RE
.TP
\f[B]imagedata\f[R]
An existing \f[CR]ImageData\f[R] object from which to copy the width and
height.
The image itself is \f[B]not\f[R] copied.
.SS Return value
A new \f[CR]ImageData\f[R] object with the specified width and height.
The new object is filled with transparent black pixels.
.SS Exceptions
.TP
\f[B]IndexSizeError\f[R] \f[B]DOMException\f[R]
Thrown if either of the \f[CR]width\f[R] or \f[CR]height\f[R] arguments
is zero.
.SH EXAMPLES
.SS Creating a blank ImageData object
This snippet creates a blank \f[CR]ImageData\f[R] object using the
\f[CR]createImageData()\f[R] method.
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.PP
The generated object is 100 pixels wide and 50 pixels tall, making 5,000
pixels in all.
Each pixel within an \f[CR]ImageData\f[R] object consists of four array
values, so the object\[cq]s \f[CR]data\f[R] property has a length of 4 Ã—
5,000, or 20,000.
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

\f[B]const\f[R] imageData = ctx.createImageData(100, 50);
console.log(imageData);
\f[I]// ImageData { width: 100, height: 50, data: Uint8ClampedArray[20000] }\f[R]
.EE
.SS Filling a blank ImageData object
This example creates and fills a new \f[CR]ImageData\f[R] object with
purple pixels.
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.PP
Since each pixel consists of four values, the \f[CR]for\f[R] loop
iterates by multiples of four.
The array values associated with each pixel are R (red), G (green), B
(blue), and A (alpha), in that order.
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
\f[B]const\f[R] imageData = ctx.createImageData(100, 100);

\f[I]// Iterate through every pixel\f[R]
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < imageData.data.length; i += 4) {
  \f[I]// Modify pixel data\f[R]
  imageData.data[i + 0] = 190; \f[I]// R value\f[R]
  imageData.data[i + 1] = 0; \f[I]// G value\f[R]
  imageData.data[i + 2] = 210; \f[I]// B value\f[R]
  imageData.data[i + 3] = 255; \f[I]// A value\f[R]
}

\f[I]// Draw image data to the canvas\f[R]
ctx.putImageData(imageData, 20, 20);
.EE
.SS Result
.SS More examples
For more examples using \f[CR]createImageData()\f[R] and the
\f[CR]ImageData\f[R] object, see Pixel manipulation with canvas and
\f[CR]ImageData.data\f[R].
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]ImageData\f[R]
.IP \[bu] 2
Pixel manipulation with canvas
