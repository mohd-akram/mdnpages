.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "JSON.RAWJSON" "3JS" "March 6, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
JSON.rawJSON \- JSON.rawJSON()
.SH SYNOPSIS
The \f[B]\f[CB]JSON.rawJSON()\f[B]\f[R] static method creates a \(lqraw
JSON\(rq object containing a piece of JSON text.
When serialized to JSON, the raw JSON object is treated as if it is
already a piece of JSON.
This text is required to be valid JSON.
.SH SYNTAX
.IP
.EX
JSON.rawJSON(string)
.EE
.SS Parameters
.TP
\f[B]string\f[R]
The JSON text.
Must be valid JSON \f[B]representing a primitive value\f[R].
.SS Return value
An object that can be used to create JSON text with the exact same
content as the \f[CR]string\f[R] provided, without quotes around the
string itself.
This object has \f[CR]null\f[R] prototype and is frozen (so it never
gets accidentally serialized as a regular object by any kind of
primitive conversion), and the following property:
.TP
\f[B]rawJSON\f[R]
The original JSON \f[CR]string\f[R] provided.
.PP
Furthermore, it has a private property that marks itself as a raw JSON
object.
This allows it to be identified by \f[CR]JSON.stringify()\f[R] and
\f[CR]JSON.isRawJSON()\f[R].
.SS Exceptions
.TP
\f[B]SyntaxError\f[R]
Thrown if the \f[CR]string\f[R] is not valid JSON, or if it represents
an object or array.
.SH DESCRIPTION
A raw JSON object can be seen as an immutable, atomic data structure
like any kind of primitive.
It is not a regular object and it contains no data other than the raw
JSON text.
It is used to \(lqpre\-serialize\(rq data to formats that
\f[CR]JSON.stringify\f[R] itself cannot produce for various reasons.
The most typical use case is the floating point number loss of precision
problem.
For example:
.IP
.EX
JSON.stringify({ value: 12345678901234567890 });
\f[I]// {\(dqvalue\(dq:12345678901234567000}\f[R]
.EE
.PP
The value is not exactly equivalent to the original number any more!
This is because JavaScript uses floating point representation for all
numbers, so it cannot represent all integers exactly.
The number literal \f[CR]12345678901234567890\f[R] itself is already
rounded to the nearest representable number when it is parsed by
JavaScript.
.PP
Without \f[CR]JSON.rawJSON\f[R], there is no way to tell
\f[CR]JSON.stringify\f[R] to produce the number literal
\f[CR]12345678901234567890\f[R], because there is simply no
corresponding JavaScript number value.
With raw JSON, you can directly tell \f[CR]JSON.stringify()\f[R] what a
particular value should be stringified as:
.IP
.EX
\f[B]const\f[R] rawJSON = JSON.rawJSON(\(dq12345678901234567890\(dq);
JSON.stringify({ value: rawJSON });
\f[I]// {\(dqvalue\(dq:12345678901234567890}\f[R]
.EE
.PP
For a more complete example of this, see Lossless number serialization.
.PP
Note that although we passed a string to \f[CR]JSON.rawJSON()\f[R], it
still becomes a number in the final JSON.
This is because the string represents the verbatim JSON text.
If you want to serialize a string, you should use
\f[CR]JSON.rawJSON()\f[R] with a quotes\-enclosed string value:
.IP
.EX
\f[B]const\f[R] rawJSON = JSON.rawJSON(\(aq\(dqHello world\(dq\(aq);
JSON.stringify({ value: rawJSON });
\f[I]// {\(dqvalue\(dq:\(dqHello world\(dq}\f[R]
.EE
.PP
\f[CR]JSON.rawJSON\f[R] allows you to insert arbitrary JSON text, but
does not allow you to create invalid JSON.
Anything that was not permitted by the JSON syntax is not permitted by
\f[CR]JSON.rawJSON()\f[R] either:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] rawJSON = JSON.rawJSON(\(aq\(dqHello\(rsnworld\(dq\(aq); \f[I]// Syntax error, because line breaks are not allowed in JSON strings\f[R]
.EE
.PP
Furthermore, you cannot use \f[CR]JSON.rawJSON()\f[R] to create JSON
objects or arrays.
.SH EXAMPLES
.SS Using JSON.rawJSON() to create JSON expressions of different types
.IP
.EX
\f[B]const\f[R] numJSON = JSON.rawJSON(\(dq123\(dq);
\f[B]const\f[R] strJSON = JSON.rawJSON(\(aq\(dqHello world\(dq\(aq);
\f[B]const\f[R] boolJSON = JSON.rawJSON(\(dqtrue\(dq);
\f[B]const\f[R] nullJSON = JSON.rawJSON(\(dqnull\(dq);

console.log(
  JSON.stringify({
    age: numJSON,
    message: strJSON,
    isActive: boolJSON,
    nothing: nullJSON,
  }),
);

\f[I]// {\(dqage\(dq:123,\(dqmessage\(dq:\(dqHello world\(dq,\(dqisActive\(dq:true,\(dqnothing\(dq:null}\f[R]
.EE
.PP
However, you cannot use \f[CR]JSON.rawJSON()\f[R] to create JSON objects
or arrays:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] arrJSON = JSON.rawJSON(\(dq[1, 2, 3]\(dq);
\f[B]const\f[R] objJSON = JSON.rawJSON(\(aq{\(dqa\(dq: 1, \(dqb\(dq: 2}\(aq);
\f[I]// SyntaxError\f[R]
.EE
.SS Using JSON.rawJSON() to create escaped string literals
Apart from numbers, there is only one other type that does not have a
one\-to\-one correspondence between JavaScript values and JSON text:
strings.
When strings are serialized to JSON, all code points, other than those
that are not legal inside JSON string literals (such as line breaks),
are printed literally:
.IP
.EX
console.log(JSON.stringify({ value: \(dq\(rsud83d\(rsude04\(dq })); \f[I]// {\(dqvalue\(dq:\(dqðŸ˜„\(dq}\f[R]
.EE
.PP
This may not be desirable, because the receiver of this string may
handle Unicode differently.
To improve interoperability, you can explicitly specify the string to be
serialized with escape sequences:
.IP
.EX
\f[B]const\f[R] rawJSON = JSON.rawJSON(\(aq\(dq\(rs\(rsud83d\(rs\(rsude04\(dq\(aq);
\f[B]const\f[R] objStr = JSON.stringify({ value: rawJSON });
console.log(objStr); \f[I]// {\(dqvalue\(dq:\(dq\(rsud83d\(rsude04\(dq}\f[R]
console.log(JSON.parse(objStr).value); \f[I]// ðŸ˜„\f[R]
.EE
.PP
Note that the double backslashes in the \f[CR]rawJSON\f[R] actually
represents a single slash character.
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#jsonparse-source-text-access
Polyfill of \f[CR]JSON.rawJSON\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]JSON\f[R]
.IP \(bu 2
\f[CR]JSON.isRawJSON()\f[R]
.IP \(bu 2
\f[CR]JSON.stringify()\f[R]
