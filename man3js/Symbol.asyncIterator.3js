'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SYMBOL.ASYNCITERATOR" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.asyncIterator \- Symbol.asyncIterator
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.asyncIterator\f[B]\f[R] static data property
represents the well\-known symbol \f[CR]Symbol.asyncIterator\f[R].
The async iterable protocol looks up this symbol for the method that
returns the async iterator for an object.
In order for an object to be async iterable, it must have an
\f[CR][Symbol.asyncIterator]\f[R] key.
.IP
.EX
\f[B]const\f[R] delayedResponses = {
  delays: [500, 1300, 3500],

  wait(delay) {
    \f[B]return\f[R] \f[B]new\f[R] Promise((resolve) \f[B]=>\f[R] {
      setTimeout(resolve, delay);
    });
  },

  \f[B]async\f[R] *[Symbol.asyncIterator]() {
    \f[B]for\f[R] (\f[B]const\f[R] delay \f[B]of\f[R] \f[B]this\f[R].delays) {
      \f[B]await\f[R] \f[B]this\f[R].wait(delay);
      \f[B]yield\f[R] \(gaDelayed response for ${delay} milliseconds\(ga;
    }
  },
};

(\f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]for\f[R] \f[B]await\f[R] (\f[B]const\f[R] response \f[B]of\f[R] delayedResponses) {
    console.log(response);
  }
})();

\f[I]// Expected output: \(dqDelayed response for 500 milliseconds\(dq\f[R]
\f[I]// Expected output: \(dqDelayed response for 1300 milliseconds\(dq\f[R]
\f[I]// Expected output: \(dqDelayed response for 3500 milliseconds\(dq\f[R]
.EE
.SH VALUE
The well\-known symbol \f[CR]Symbol.asyncIterator\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH EXAMPLES
.SS User\-defined async iterables
You can define your own async iterable by setting the
\f[CR][Symbol.asyncIterator]()\f[R] property on an object.
.IP
.EX
\f[B]const\f[R] myAsyncIterable = {
  \f[B]async\f[R] *[Symbol.asyncIterator]() {
    \f[B]yield\f[R] \(dqhello\(dq;
    \f[B]yield\f[R] \(dqasync\(dq;
    \f[B]yield\f[R] \(dqiteration!\(dq;
  },
};

(\f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]for\f[R] \f[B]await\f[R] (\f[B]const\f[R] x \f[B]of\f[R] myAsyncIterable) {
    console.log(x);
  }
})();
\f[I]// Logs:\f[R]
\f[I]// \(dqhello\(dq\f[R]
\f[I]// \(dqasync\(dq\f[R]
\f[I]// \(dqiteration!\(dq\f[R]
.EE
.PP
When creating an API, remember that async iterables are designed to
represent something \f[I]iterable\f[R] \(em like a stream of data or a
list \(em, not to completely replace callbacks and events in most
situations.
.SS Built\-in async iterables
There is no object in the core JavaScript language that is async
iterable.
Some web APIs, such as \f[CR]ReadableStream\f[R], have the
\f[CR]Symbol.asyncIterator\f[R] method set by default.
.SH SEE ALSO
.IP \(bu 2
Iteration protocols
.IP \(bu 2
for await\&...of
