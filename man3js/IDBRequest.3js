.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "IDBRequest" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBRequest \- IDBRequest
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]IDBRequest\f[B]\f[R] interface of the IndexedDB API
provides access to results of asynchronous requests to databases and
database objects using event handler attributes.
Each reading and writing operation on a database is done using a
request.
.PP
The request object does not initially contain any information about the
result of the operation, but once information becomes available, an
event is fired on the request, and the information becomes available
through the properties of the \f[CR]IDBRequest\f[R] instance.
.PP
All asynchronous operations immediately return an \f[CR]IDBRequest\f[R]
instance.
Each request has a \f[CR]readyState\f[R] that is set to the
\f[CR]\[aq]pending\[aq]\f[R] state; this changes to
\f[CR]\[aq]done\[aq]\f[R] when the request is completed or fails.
When the state is set to \f[CR]done\f[R], every request returns a
\f[CR]result\f[R] and an \f[CR]error\f[R], and an event is fired on the
request.
When the state is still \f[CR]pending\f[R], any attempt to access the
\f[CR]result\f[R] or \f[CR]error\f[R] raises an
\f[CR]InvalidStateError\f[R] exception.
.PP
In plain words, all asynchronous methods return a request object.
If the request has been completed successfully, the result is made
available through the \f[CR]result\f[R] property and an event indicating
success is fired at the request (\f[CR]success\f[R]).
If an error occurs while performing the operation, the exception is made
available through the \f[CR]error\f[R] property and an error event is
fired (\f[CR]error\f[R]).
.PP
The interface \f[CR]IDBOpenDBRequest\f[R] is derived from
\f[CR]IDBRequest\f[R].
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]IDBRequest.error\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]DOMException\f[R] in the event of an unsuccessful
request, indicating what went wrong.
.TP
\f[B]IDBRequest.result\f[R] \f[I](read\-only)\f[R]
Returns the result of the request.
If the request is not completed, the result is not available and an
\f[CR]InvalidStateError\f[R] exception is thrown.
.TP
\f[B]IDBRequest.source\f[R] \f[I](read\-only)\f[R]
The source of the request, such as an \f[CR]IDBIndex\f[R] or an
\f[CR]IDBObjectStore\f[R].
If no source exists (such as when calling \f[CR]IDBFactory.open\f[R]),
it returns null.
.TP
\f[B]IDBRequest.readyState\f[R] \f[I](read\-only)\f[R]
The state of the request.
Every request starts in the \f[CR]pending\f[R] state.
The state changes to \f[CR]done\f[R] when the request completes
successfully or when an error occurs.
.TP
\f[B]IDBRequest.transaction\f[R] \f[I](read\-only)\f[R]
The transaction for the request.
This property can be null for certain requests, for example those
returned from \f[CR]IDBFactory.open\f[R] unless an upgrade is needed.
(You\[cq]re just connecting to a database, so there is no transaction to
return).
.SH INSTANCE METHODS
\f[I]No methods, but inherits methods from \f[CI]EventTarget\f[I].\f[R]
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]error\f[R]
Fired when an error caused a request to fail.
.TP
\f[B]success\f[R]
Fired when an \f[CR]IDBRequest\f[R] succeeds.
.SH EXAMPLE
In the following code snippet, we open a database asynchronously and
make a request; \f[CR]onerror\f[R] and \f[CR]onsuccess\f[R] functions
are included to handle the success and error cases.
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
\&.)
.IP
.EX
\f[B]let\f[R] db;

\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

\f[I]// these two event handlers act on the database being\f[R]
\f[I]// opened successfully, or not\f[R]
DBOpenRequest.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Error loading database.\[dq];
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database.\f[R]
  db = DBOpenRequest.result;
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
