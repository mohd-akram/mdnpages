.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "NodeList.forEach" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
NodeList.forEach \- NodeList: forEach() method
.SH SYNOPSIS
The \f[B]\f[CB]forEach()\f[B]\f[R] method of the \f[CR]NodeList\f[R]
interface calls the callback given in parameter once for each value pair
in the list, in insertion order.
.SH SYNTAX
.IP
.EX
forEach(callback)
forEach(callback, thisArg)
.EE
.SS Parameters
.TP
\f[B]callback\f[R]
A function to execute on each element of \f[CR]someNodeList\f[R].
It accepts 3 parameters:
.RS
.TP
\f[B]currentValue\f[R]
The current element being processed in \f[CR]someNodeList\f[R].
.TP
\f[B]currentIndex\f[R] \f[I](optional)\f[R]
The index of the \f[CR]currentValue\f[R] being processed in
\f[CR]someNodeList\f[R].
.TP
\f[B]listObj\f[R] \f[I](optional)\f[R]
The \f[CR]someNodeList\f[R] that \f[CR]forEach()\f[R] is being applied
to.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
Value to use as \f[CR]this\f[R] when executing \f[CR]callback\f[R].
.SS Return value
\f[CR]undefined\f[R].
.SH EXAMPLE
.IP
.EX
\f[B]const\f[R] node = document.createElement(\[dq]div\[dq]);
\f[B]const\f[R] kid1 = document.createElement(\[dq]p\[dq]);
\f[B]const\f[R] kid2 = document.createTextNode(\[dq]hey\[dq]);
\f[B]const\f[R] kid3 = document.createElement(\[dq]span\[dq]);

node.appendChild(kid1);
node.appendChild(kid2);
node.appendChild(kid3);

\f[B]const\f[R] list = node.childNodes;

list.forEach(\f[B]function\f[R] (currentValue, currentIndex, listObj) {
  console.log(\[ga]${currentValue}, ${currentIndex}, ${\f[B]this\f[R]}\[ga]);
}, \[dq]myThisArg\[dq]);
.EE
.PP
The above code results in the following:
.IP
.EX
[object HTMLParagraphElement], 0, myThisArg
[object Text], 1, myThisArg
[object HTMLSpanElement], 2, myThisArg
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#iterable-dom-collections
Polyfill of \f[CR]NodeList.prototype.forEach\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Node\f[R]
.IP \[bu] 2
\f[CR]NodeList\f[R]
