.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CSPVIOLATIONREPORTBODY.BLOCKEDURL" "3JS" "June 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSPViolationReportBody.blockedURL \- CSPViolationReportBody: blockedURL
property
.SH SYNOPSIS
The \f[B]\f[CB]blockedURL\f[B]\f[R] read\-only property of the
\f[CR]CSPViolationReportBody\f[R] interface is a string value that
represents the resource that was blocked because it violates a Content
Security Policy (CSP).
.SH VALUE
An string containing a value or URL that represents the resource that
violated the policy.
.PP
If the value is not the URL of a resource, it must be one of the
following strings:
.TP
\f[B]inline\f[R]
An inline resource.
For example, an inline script that was used when
\f[CR]\(aqunsafe\-inline\(aq\f[R] was not specified in the CSP.
.TP
\f[B]eval\f[R]
An \f[CR]eval()\f[R].
For example, \f[CR]eval()\f[R] was used but
\f[CR]\(aqunsafe\-eval\(aq\f[R] was not specified in the CSP.
.TP
\f[B]wasm\-eval\f[R]
An Wasm evaluation.
For example, \f[CR]eval()\f[R] was used but
\f[CR]\(aqwasm\-unsafe\-eval\(aq\f[R] was not specified in the CSP.
.TP
\f[B]trusted\-types\-policy\f[R]
A resource that violated the \f[CR]trusted\-types\f[R] CSP directive.
For example, a \f[CR]TrustedTypePolicy\f[R] was created using
\f[CR]window.trustedTypes.createPolicy()\f[R] with a name that wasn\(cqt
listed in the CSP \f[CR]trusted\-types\f[R] directive.
.TP
\f[B]trusted\-types\-sink\f[R]
A resource that violated the \f[CR]require\-trusted\-types\-for\f[R] CSP
directive.
For example, the directive was set to \f[CR]script\f[R] but the document
did not use a \f[CR]TrustedTypePolicy\f[R] to sanitize data before
passing it to a sink such as \f[CR]Element.innerHTML\f[R].
.SH EXAMPLES
The following examples show HTML that would result in some of the
\f[CR]blockedURL\f[R] values outlined above.
.PP
The examples assume that you have a JavaScript file named
\f[CR]main.js\f[R] imported into your script from the same domain.
The script, which is shown below, creates a new
\f[CR]ReportingObserver\f[R] to observe content violation reports of
type \f[CR]\(dqcsp\-violation\(dq\f[R].
Each time the callback function is invoked, we log the
\f[CR]blockedURL\f[R] in the first entry of the reports array.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver(
  (reports, observer) \f[B]=>\f[R] {
    console.log(\(gablockedURL: ${reports[0].body.blockedURL}\(ga);
  },
  {
    types: [\(dqcsp\-violation\(dq],
    buffered: \f[B]true\f[R],
  },
);

observer.observe();
.EE
.PP
Note that while there might be multiple reports in the returned array,
for brevity we only log the blocked URL of the first report.
.SS blockedURL for an external resource
The HTML below sets a policy of
\f[CR]Content\-Security\-Policy: default\-src \(aqself\(aq\f[R], which
only allows resources from the same site to be loaded, and then attempts
to load a script from the external site
\f[CR]https://apis.google.com\f[R].
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\(dqen\(dq>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R] http\-equiv=\(dqContent\-Security\-Policy\(dq content=\(dqdefault\-src \(aqself\(aq\(dq />
    <\f[B]script\f[R] src=\(dqmain.js\(dq></\f[B]script\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    \f[I]<!\-\- This should generate a CSP violation \-\->\f[R]
    <\f[B]script\f[R] src=\(dqhttps://apis.google.com/js/platform.js\(dq></\f[B]script\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.PP
The result of logging the \f[CR]blockedURL\f[R] would be:
.IP
.EX
blockedURL: https://apis.google.com/js/platform.js
.EE
.SS blockedURL for unsafe\-inline resources
The HTML below demonstrates the conditions that would result in a
\f[CR]blockedURL\f[R] of \f[CR]inline\f[R].
This sets a policy of
\f[CR]Content\-Security\-Policy: default\-src \(aqself\(aq\f[R], which
does not allow inline scripts to be executed, causing a violation
because the page contains an inline script.
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\(dqen\(dq>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R] http\-equiv=\(dqContent\-Security\-Policy\(dq content=\(dqdefault\-src \(aqself\(aq\(dq />
    <\f[B]script\f[R] src=\(dqmain.js\(dq></\f[B]script\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    <\f[B]script\f[R]>
      \f[B]const\f[R] int = 4;
    </\f[B]script\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.PP
The result of logging the \f[CR]blockedURL\f[R] would be:
.IP
.EX
blockedURL: inline
.EE
.SS blockedURL for trusted\-types\-policy resources
The HTML below demonstrates the conditions that would result in a
\f[CR]blockedURL\f[R] of \f[CR]trusted\-types\-policy\f[R].
First it defines a policy that allows \f[CR]\(aqunsafe\-inline\(aq\f[R]
scripts to be executed, so that we can create a
\f[CR]TrustedTypePolicy\f[R] that will trigger a violation.
The policy also uses the \f[CR]trusted\-types\f[R] directive to specify
that a \f[CR]TrustedTypePolicy\f[R] with the name \f[CR]myPolicy\f[R] is
allowed to be created.
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\(dqen\(dq>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R]
      http\-equiv=\(dqContent\-Security\-Policy\(dq
      content=\(dqdefault\-src \(aqself\(aq \(aqreport\-sample\(aq \(aqunsafe\-inline\(aq; trusted\-types myPolicy\(dq />
    <\f[B]script\f[R] src=\(dqmain.js\(dq></\f[B]script\f[R]>
  </\f[B]head\f[R]>

  <\f[B]body\f[R]></\f[B]body\f[R]>

  <\f[B]script\f[R]>
    \f[B]const\f[R] policy = trustedTypes.createPolicy(\(dqsomePolicy\(dq, {
      \f[I]// Some (insufficient) sanitization code\f[R]
      createHTML: (string) \f[B]=>\f[R] string.replace(/</g, \(dq&lt;\(dq),
    });
  </\f[B]script\f[R]>
</\f[B]html\f[R]>
.EE
.PP
In the script a policy is created with the name \f[CR]somePolicy\f[R].
.RS
.PP
\f[B]Note:\f[R] The particular policy we defined above is not a very
good policy.
The aim of using trusted types is not to enforce a \f[I]particular\f[R]
policy, but to require enforcement of some policy, and ensure that the
sanitization code is in one place and easy to review.
.RE
.PP
Because this is not listed in the \f[CR]trusted\-types\f[R] directive it
is a CSP violation, and we\(cqd see the log output:
.IP
.EX
blockedURL: trusted\-types\-policy
.EE
.PP
If we changed the name of the allowed policy to \f[CR]somePolicy\f[R],
the page would no longer be in violation.
.SS blockedURL for trusted\-types\-sink resources
The HTML below demonstrates the conditions that would result in a
\f[CR]blockedURL\f[R] of \f[CR]trusted\-types\-sink\f[R].
First it defines a policy that allows \f[CR]\(aqunsafe\-inline\(aq\f[R]
scripts to be executed, and as in the previous example it use the
\f[CR]trusted\-types\f[R] directive to specify that a
\f[CR]TrustedTypePolicy\f[R] with the name \f[CR]myPolicy\f[R] is
allowed to be created.
.PP
In addition, it specifies the directive
\f[CR]require\-trusted\-types\-for \(aqscript\(aq\f[R], which enforces
that sinks should only be passed content that has been sanitized using a
trusted type.
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\(dqen\(dq>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R]
      http\-equiv=\(dqContent\-Security\-Policy\(dq
      content=\(dqdefault\-src \(aqself\(aq \(aqreport\-sample\(aq \(aqunsafe\-inline\(aq; trusted\-types \(aqmyPolicy\(aq; require\-trusted\-types\-for \(aqscript\(aq\(dq />
    <\f[B]script\f[R] src=\(dqmain.js\(dq></\f[B]script\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    <\f[B]input\f[R] type=\(dqtext\(dq id=\(dquserInput\(dq />
    <\f[B]button\f[R]>Update Content</\f[B]button\f[R]>
    <\f[B]div\f[R] id=\(dqcontent\(dq></\f[B]div\f[R]>
  </\f[B]body\f[R]>

  <\f[B]script\f[R]>
    \f[B]function\f[R] updateContent() {
      \f[B]const\f[R] userInput = document.getElementById(\(dquserInput\(dq).value;

      \f[I]// Passing unsanitized content \- a violation of the policy\f[R]
      document.getElementById(\(dqcontent\(dq).innerHTML = userInput;
    }

    document.querySelector(\(dqbutton\(dq).addEventListener(\(dqclick\(dq, updateContent);
  </\f[B]script\f[R]>
</\f[B]html\f[R]>
.EE
.PP
The \f[CR]updateContent()\f[R] method passes unsanitized content to the
element\(cqs \f[CR]innerHTML\f[R] property, which will cause a CSP
violation.
We\(cqd see the log output:
.IP
.EX
blockedURL: trusted\-types\-sink
.EE
.PP
In order to avoid the violation we would need to update the script to
define a trusted type policy, and use it to sanitize the input passed to
the element:
.IP
.EX
\f[B]const\f[R] policy = trustedTypes.createPolicy(\(dqmyPolicy\(dq, {
  \f[I]// Some (insufficient) sanitization code\f[R]
  createHTML: (string) \f[B]=>\f[R] string.replace(/</g, \(dq&lt;\(dq),
});

\f[B]function\f[R] updateContent() {
  \f[B]const\f[R] userInput = document.getElementById(\(dquserInput\(dq).value;
  \f[B]const\f[R] sanitizedInput = policy.createHTML(userInput);
  document.getElementById(\(dqcontent\(dq).innerHTML = sanitizedInput;
}
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]SecurityPolicyViolationEvent.blockedURI\f[R]
