.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "TypedArray.sort" "JS" "March 15, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.sort \- TypedArray.prototype.sort()
.SH SYNOPSIS
The \f[B]\f[CB]sort()\f[B]\f[R] method of \f[CR]TypedArray\f[R]
instances sorts the elements of a typed array \f[I]\c
.UR https://en.wikipedia.org/wiki/In-place_algorithm
in place
.UE \c
\f[R] and returns the reference to the same typed array, now sorted.
This method has the same algorithm as \f[CR]Array.prototype.sort()\f[R],
except that it sorts the values numerically instead of as strings by
default.
.SH SYNTAX
.IP
.EX
sort()
sort(compareFn)
.EE
.SS Parameters
.TP
\f[B]compareFn\f[R] \f[I](optional)\f[R]
A function that determines the order of the elements.
The function is called with the following arguments:
.RS
.TP
\f[B]a\f[R]
The first element for comparison.
.TP
\f[B]b\f[R]
The second element for comparison.
.PP
It should return a number where:
.IP \[bu] 2
A negative value indicates that \f[CR]a\f[R] should come before
\f[CR]b\f[R].
.IP \[bu] 2
A positive value indicates that \f[CR]a\f[R] should come after
\f[CR]b\f[R].
.IP \[bu] 2
Zero or \f[CR]NaN\f[R] indicates that \f[CR]a\f[R] and \f[CR]b\f[R] are
considered equal.
.PP
To memorize this, remember that \f[CR](a, b) => a \- b\f[R] sorts
numbers in ascending order.
.PP
If omitted, the typed array elements are sorted according to numeric
value.
.RE
.SS Return value
The reference to the original typed array, now sorted.
Note that the typed array is sorted \f[I]\c
.UR https://en.wikipedia.org/wiki/In-place_algorithm
in place
.UE \c
\f[R], and no copy is made.
.SH DESCRIPTION
See \f[CR]Array.prototype.sort()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Using sort()
For more examples, see also the \f[CR]Array.prototype.sort()\f[R]
method.
.IP
.EX
\f[B]let\f[R] numbers = \f[B]new\f[R] Uint8Array([40, 1, 5, 200]);
numbers.sort();
\f[I]// Uint8Array [ 1, 5, 40, 200 ]\f[R]
\f[I]// Unlike plain Arrays, a compare function is not required\f[R]
\f[I]// to sort the numbers numerically.\f[R]

\f[I]// Regular Arrays require a compare function to sort numerically:\f[R]
numbers = [40, 1, 5, 200];
numbers.sort();
\f[I]// [1, 200, 40, 5]\f[R]

numbers.sort((a, b) \f[B]=>\f[R] a \- b); \f[I]// compare numbers\f[R]
\f[I]// [ 1, 5, 40, 200 ]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]TypedArray.prototype.sort\f[R] with modern behavior
like stable sort in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.reverse()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.toSorted()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.sort()\f[R]
