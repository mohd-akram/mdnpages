.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Element.animationiteration_event" "JS" "July 18, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.animationiteration_event \- Element: animationiteration event
.SH SYNOPSIS
The \f[B]\f[CB]animationiteration\f[B]\f[R] event is fired when an
iteration of a CSS Animation ends, and another one begins.
This event does not occur at the same time as the
\f[CR]animationend\f[R] event, and therefore does not occur for
animations with an \f[CR]animation\-iteration\-count\f[R] of one.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]animationiteration\[dq], (event) \f[B]=>\f[R] {});

onanimationiteration = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
An \f[CR]AnimationEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent \f[CI]Event\f[I]\f[R].
.TP
\f[B]AnimationEvent.animationName\f[R] \f[I](read\-only)\f[R]
A string containing the value of the \f[CR]animation\-name\f[R] that
generated the animation.
.TP
\f[B]AnimationEvent.elapsedTime\f[R] \f[I](read\-only)\f[R]
A \f[CR]float\f[R] giving the amount of time the animation has been
running, in seconds, when this event fired, excluding any time the
animation was paused.
For an \f[CR]animationstart\f[R] event, \f[CR]elapsedTime\f[R] is
\f[CR]0.0\f[R] unless there was a negative value for
\f[CR]animation\-delay\f[R], in which case the event will be fired with
\f[CR]elapsedTime\f[R] containing \f[CR](\-1 * delay)\f[R].
.TP
\f[B]AnimationEvent.pseudoElement\f[R] \f[I](read\-only)\f[R]
A string, starting with \f[CR]\[aq]::\[aq]\f[R], containing the name of
the pseudo\-element the animation runs on.
If the animation doesn\[cq]t run on a pseudo\-element but on the
element, an empty string: \f[CR]\[aq]\[aq]\f[R].
.SH EXAMPLES
This code uses \f[CR]animationiteration\f[R] to keep track of the number
of iterations an animation has completed:
.IP
.EX
\f[B]const\f[R] animated = document.querySelector(\[dq].animated\[dq]);

\f[B]let\f[R] iterationCount = 0;

animated.addEventListener(\[dq]animationiteration\[dq], () \f[B]=>\f[R] {
  iterationCount++;
  console.log(\[ga]Animation iteration count: ${iterationCount}\[ga]);
});
.EE
.PP
The same, but using the \f[CR]onanimationiteration\f[R] event handler
property:
.IP
.EX
\f[B]const\f[R] animated = document.querySelector(\[dq].animated\[dq]);

\f[B]let\f[R] iterationCount = 0;

animated.onanimationiteration = () \f[B]=>\f[R] {
  iterationCount++;
  console.log(\[ga]Animation iteration count: ${iterationCount}\[ga]);
};
.EE
.SS Live example
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\[dq]animation\-example\[dq]>
  <\f[B]div\f[R] class=\[dq]container\[dq]>
    <\f[B]p\f[R] class=\[dq]animation\[dq]>You chose a cold night to visit our planet.</\f[B]p\f[R]>
  </\f[B]div\f[R]>
  <\f[B]button\f[R] class=\[dq]activate\[dq] type=\[dq]button\[dq]>Activate animation</\f[B]button\f[R]>
  <\f[B]div\f[R] class=\[dq]event\-log\[dq]></\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
\&.container {
  \f[B]height\f[R]: 3rem;
}

\&.event\-log {
  \f[B]width\f[R]: 25rem;
  \f[B]height\f[R]: 2rem;
  \f[B]border\f[R]: 1px solid black;
  \f[B]margin\f[R]: 0.2rem;
  \f[B]padding\f[R]: 0.2rem;
}

\&.animation.active {
  \f[B]animation\-duration\f[R]: 2s;
  \f[B]animation\-name\f[R]: slidein;
  \f[B]animation\-iteration\-count\f[R]: 2;
}

\f[B]\[at]keyframes\f[R] slidein {
  from {
    \f[B]transform\f[R]: translateX(100%) scaleX(3);
  }
  to {
    \f[B]transform\f[R]: translateX(0) scaleX(1);
  }
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] animation = document.querySelector(\[dq]p.animation\[dq]);
\f[B]const\f[R] animationEventLog = document.querySelector(
  \[dq].animation\-example>.event\-log\[dq],
);
\f[B]const\f[R] applyAnimation = document.querySelector(
  \[dq].animation\-example>button.activate\[dq],
);
\f[B]let\f[R] iterationCount = 0;

animation.addEventListener(\[dq]animationstart\[dq], () \f[B]=>\f[R] {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation started\[aq] \[ga];
});

animation.addEventListener(\[dq]animationiteration\[dq], () \f[B]=>\f[R] {
  iterationCount++;
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation iterations: ${iterationCount}\[aq] \[ga];
});

animation.addEventListener(\[dq]animationend\[dq], () \f[B]=>\f[R] {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation ended\[aq]\[ga];
  animation.classList.remove(\[dq]active\[dq]);
  applyAnimation.textContent = \[dq]Activate animation\[dq];
});

animation.addEventListener(\[dq]animationcancel\[dq], () \f[B]=>\f[R] {
  animationEventLog.textContent = \[ga]${animationEventLog.textContent}\[aq]animation canceled\[aq]\[ga];
});

applyAnimation.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  animation.classList.toggle(\[dq]active\[dq]);
  animationEventLog.textContent = \[dq]\[dq];
  iterationCount = 0;
  \f[B]const\f[R] active = animation.classList.contains(\[dq]active\[dq]);
  applyAnimation.textContent = active
    ? \[dq]Cancel animation\[dq]
    : \[dq]Activate animation\[dq];
});
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
CSS Animations
.IP \[bu] 2
Using CSS Animations
.IP \[bu] 2
\f[CR]AnimationEvent\f[R]
.IP \[bu] 2
Related events: \f[CR]animationstart\f[R], \f[CR]animationend\f[R],
\f[CR]animationcancel\f[R]
