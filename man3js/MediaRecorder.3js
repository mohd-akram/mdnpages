.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MEDIARECORDER" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaRecorder \- MediaRecorder
.SH SYNOPSIS
The \f[B]\f[CB]MediaRecorder\f[B]\f[R] interface of the MediaStream
Recording API provides functionality to easily record media.
It is created using the \f[CR]MediaRecorder()\f[R] constructor.
.SH CONSTRUCTOR
.TP
\f[B]MediaRecorder()\f[R]
Creates a new \f[CR]MediaRecorder\f[R] object, given a
\f[CR]MediaStream\f[R] to record.
Options are available to do things like set the container\(cqs MIME type
(such as \f[CR]\(dqvideo/webm\(dq\f[R] or \f[CR]\(dqvideo/mp4\(dq\f[R])
and the bit rates of the audio and video tracks or a single overall bit
rate.
.SH INSTANCE PROPERTIES
.TP
\f[B]MediaRecorder.mimeType\f[R] \f[I](read\-only)\f[R]
Returns the MIME type that was selected as the recording container for
the \f[CR]MediaRecorder\f[R] object when it was created.
.TP
\f[B]MediaRecorder.state\f[R] \f[I](read\-only)\f[R]
Returns the current state of the \f[CR]MediaRecorder\f[R] object
(\f[CR]inactive\f[R], \f[CR]recording\f[R], or \f[CR]paused\f[R].)
.TP
\f[B]MediaRecorder.stream\f[R] \f[I](read\-only)\f[R]
Returns the stream that was passed into the constructor when the
\f[CR]MediaRecorder\f[R] was created.
.TP
\f[B]MediaRecorder.videoBitsPerSecond\f[R] \f[I](read\-only)\f[R]
Returns the video encoding bit rate in use.
This may differ from the bit rate specified in the constructor (if it
was provided).
.TP
\f[B]MediaRecorder.audioBitsPerSecond\f[R] \f[I](read\-only)\f[R]
Returns the audio encoding bit rate in use.
This may differ from the bit rate specified in the constructor (if it
was provided).
.TP
\f[B]MediaRecorder.audioBitrateMode\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Returns the bitrate mode used to encode audio tracks.
.SH STATIC METHODS
.TP
\f[B]MediaRecorder.isTypeSupported()\f[R]
A static method which returns a \f[CR]true\f[R] or \f[CR]false\f[R]
value indicating if the given MIME media type is supported by the
current user agent.
.SH INSTANCE METHODS
.TP
\f[B]MediaRecorder.pause()\f[R]
Pauses the recording of media.
.TP
\f[B]MediaRecorder.requestData()\f[R]
Requests a \f[CR]Blob\f[R] containing the saved data received thus far
(or since the last time \f[CR]requestData()\f[R] was called.
After calling this method, recording continues, but in a new
\f[CR]Blob\f[R].
.TP
\f[B]MediaRecorder.resume()\f[R]
Resumes recording of media after having been paused.
.TP
\f[B]MediaRecorder.start()\f[R]
Begins recording media; this method can optionally be passed a
\f[CR]timeslice\f[R] argument with a value in milliseconds.
If this is specified, the media will be captured in separate chunks of
that duration, rather than the default behavior of recording the media
in a single large chunk.
.TP
\f[B]MediaRecorder.stop()\f[R]
Stops recording, at which point a \f[CR]dataavailable\f[R] event
containing the final \f[CR]Blob\f[R] of saved data is fired.
No more recording occurs.
.SH EVENTS
Listen to these events using \f[CR]addEventListener()\f[R] or by
assigning an event listener to the \f[CR]oneventname\f[R] property of
this interface.
.TP
\f[B]dataavailable\f[R]
Fires periodically each time \f[CR]timeslice\f[R] milliseconds of media
have been recorded (or when the entire media has been recorded, if
\f[CR]timeslice\f[R] wasn\(cqt specified).
The event, of type \f[CR]BlobEvent\f[R], contains the recorded media in
its \f[CR]data\f[R] property.
.TP
\f[B]error\f[R]
Fired when there are fatal errors that stop recording.
The received event is based on the \f[CR]MediaRecorderErrorEvent\f[R]
interface, whose \f[CR]error\f[R] property contains a
\f[CR]DOMException\f[R] that describes the actual error that occurred.
.TP
\f[B]pause\f[R]
Fired when media recording is paused.
.TP
\f[B]resume\f[R]
Fired when media recording resumes after being paused.
.TP
\f[B]start\f[R]
Fired when media recording starts.
.TP
\f[B]stop\f[R]
Fired when media recording ends, either when the \f[CR]MediaStream\f[R]
ends, or after the \f[CR]MediaRecorder.stop()\f[R] method is called.
.SH EXAMPLE
.IP
.EX
\f[B]if\f[R] (navigator.mediaDevices) {
  console.log(\(dqgetUserMedia supported.\(dq);

  \f[B]const\f[R] constraints = { audio: \f[B]true\f[R] };
  \f[B]let\f[R] chunks = [];

  navigator.mediaDevices
    .getUserMedia(constraints)
    .then((stream) \f[B]=>\f[R] {
      \f[B]const\f[R] mediaRecorder = \f[B]new\f[R] MediaRecorder(stream);

      record.onclick = () \f[B]=>\f[R] {
        mediaRecorder.start();
        console.log(mediaRecorder.state);
        console.log(\(dqrecorder started\(dq);
        record.style.background = \(dqred\(dq;
        record.style.color = \(dqblack\(dq;
      };

      stop.onclick = () \f[B]=>\f[R] {
        mediaRecorder.stop();
        console.log(mediaRecorder.state);
        console.log(\(dqrecorder stopped\(dq);
        record.style.background = \(dq\(dq;
        record.style.color = \(dq\(dq;
      };

      mediaRecorder.onstop = (e) \f[B]=>\f[R] {
        console.log(\(dqdata available after MediaRecorder.stop() called.\(dq);

        \f[B]const\f[R] clipName = prompt(\(dqEnter a name for your sound clip\(dq);

        \f[B]const\f[R] clipContainer = document.createElement(\(dqarticle\(dq);
        \f[B]const\f[R] clipLabel = document.createElement(\(dqp\(dq);
        \f[B]const\f[R] audio = document.createElement(\(dqaudio\(dq);
        \f[B]const\f[R] deleteButton = document.createElement(\(dqbutton\(dq);
        \f[B]const\f[R] mainContainer = document.querySelector(\(dqbody\(dq);

        clipContainer.classList.add(\(dqclip\(dq);
        audio.setAttribute(\(dqcontrols\(dq, \(dq\(dq);
        deleteButton.textContent = \(dqDelete\(dq;
        clipLabel.textContent = clipName;

        clipContainer.appendChild(audio);
        clipContainer.appendChild(clipLabel);
        clipContainer.appendChild(deleteButton);
        mainContainer.appendChild(clipContainer);

        audio.controls = \f[B]true\f[R];
        \f[B]const\f[R] blob = \f[B]new\f[R] Blob(chunks, { type: \(dqaudio/ogg; codecs=opus\(dq });
        chunks = [];
        \f[B]const\f[R] audioURL = URL.createObjectURL(blob);
        audio.src = audioURL;
        console.log(\(dqrecorder stopped\(dq);

        deleteButton.onclick = (e) \f[B]=>\f[R] {
          \f[B]const\f[R] evtTgt = e.target;
          evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);
        };
      };

      mediaRecorder.ondataavailable = (e) \f[B]=>\f[R] {
        chunks.push(e.data);
      };
    })
    .catch((err) \f[B]=>\f[R] {
      console.error(\(gaThe following error occurred: ${err}\(ga);
    });
}
.EE
.RS
.PP
\f[B]Note:\f[R] This code sample is inspired by the Web Dictaphone demo.
Some lines have been omitted for brevity; \c
.UR https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone
refer to the source
.UE \c
\ for the complete code.
.RE
.SH SEE ALSO
.IP \(bu 2
Using the MediaStream Recording API
.IP \(bu 2
\c
.UR https://mdn.github.io/dom-examples/media/web-dictaphone/
Web Dictaphone
.UE \c
: MediaRecorder + getUserMedia + Web Audio API visualization demo, by \c
.UR https://github.com/chrisdavidmills
Chris Mills
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone
source on GitHub
.UE \c
\&.)
.IP \(bu 2
Recording a media element
.IP \(bu 2
\c
.UR https://simpl.info/mediarecorder/
simpl.info MediaStream Recording demo
.UE \c
, by \c
.UR https://github.com/samdutton
Sam Dutton
.UE \c
\&.
.IP \(bu 2
\f[CR]MediaDevices.getUserMedia()\f[R]
.IP \(bu 2
\c
.UR https://github.com/chrisjohndigital/OpenLang
OpenLang
.UE \c
: HTML video language lab web application using MediaDevices and the
MediaStream Recording API for video recording (\c
.UR https://github.com/chrisjohndigital/OpenLang
source on GitHub
.UE \c
)
