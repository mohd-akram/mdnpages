.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "WebGLRenderingContext.drawElements" "JS" "April 8, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.drawElements \- WebGLRenderingContext:
drawElements() method
.SH SYNOPSIS
The \f[B]\f[CB]WebGLRenderingContext.drawElements()\f[B]\f[R] method of
the WebGL API renders primitives from array data.
.SH SYNTAX
.IP
.EX
drawElements(mode, count, type, offset)
.EE
.SS Parameters
.TP
\f[B]mode\f[R]
A \f[CR]GLenum\f[R] specifying the type primitive to render.
Possible values are:
.RS
.IP \[bu] 2
\f[CR]gl.POINTS\f[R]: Draws a single dot.
.IP \[bu] 2
\f[CR]gl.LINE_STRIP\f[R]: Draws a straight line to the next vertex.
.IP \[bu] 2
\f[CR]gl.LINE_LOOP\f[R]: Draws a straight line to the next vertex, and
connects the last vertex back to the first.
.IP \[bu] 2
\f[CR]gl.LINES\f[R]: Draws a line between a pair of vertices.
.IP \[bu] 2
\c
.UR https://en.wikipedia.org/wiki/Triangle_strip
\f[CR]gl.TRIANGLE_STRIP\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://en.wikipedia.org/wiki/Triangle_fan
\f[CR]gl.TRIANGLE_FAN\f[R]
.UE \c
.IP \[bu] 2
\f[CR]gl.TRIANGLES\f[R]: Draws a triangle for a group of three vertices.
.RE
.TP
\f[B]count\f[R]
A \f[CR]GLsizei\f[R] specifying the number of elements of the bound
element array buffer to be rendered.
For example, to draw a wireframe triangle with \f[CR]gl.LINES\f[R] the
count should be 2 endpoints per line Ã— 3 lines = 6 elements.
However to draw the same wireframe triangle with
\f[CR]gl.LINE_STRIP\f[R] the element array buffer does not repeat the
indices for the end of the first line/start of the second line, and end
of the second line/start of the third line, so \f[CR]count\f[R] will be
four.
To draw the same triangle with \f[CR]gl.LINE_LOOP\f[R] the element array
buffer does not repeat the first/last vertex either so \f[CR]count\f[R]
will be three.
.TP
\f[B]type\f[R]
A \f[CR]GLenum\f[R] specifying the type of the values in the element
array buffer.
Possible values are:
.RS
.IP \[bu] 2
\f[CR]gl.UNSIGNED_BYTE\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT\f[R]
.PP
When using the \f[CR]OES_element_index_uint\f[R] extension:
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT\f[R]
.RE
.TP
\f[B]offset\f[R]
A \f[CR]GLintptr\f[R] specifying a byte offset in the element array
buffer.
Must be a valid multiple of the size of the given \f[CR]type\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.IP \[bu] 2
If \f[CR]mode\f[R] is not one of the accepted values, a
\f[CR]gl.INVALID_ENUM\f[R] error is thrown.
.IP \[bu] 2
If \f[CR]offset\f[R] is not a valid multiple of the size of the given
type, a \f[CR]gl.INVALID_OPERATION\f[R] error is thrown.
.IP \[bu] 2
If \f[CR]count\f[R] is negative, a \f[CR]gl.INVALID_VALUE\f[R] error is
thrown.
.SH EXAMPLES
.IP
.EX
gl.drawElements(gl.POINTS, 8, gl.UNSIGNED_BYTE, 0);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.drawArrays()\f[R]
.IP \[bu] 2
\f[CR]OES_element_index_uint\f[R]
.IP \[bu] 2
\f[CR]WEBGL_multi_draw.multiDrawElementsWEBGL()\f[R]
