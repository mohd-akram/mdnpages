.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "DOMParser.parseFromString" "JS" "June 10, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMParser.parseFromString \- DOMParser: parseFromString() method
.SH SYNOPSIS
The \f[B]\f[CB]parseFromString()\f[B]\f[R] method of the
\f[CR]DOMParser\f[R] interface parses a string containing either HTML or
XML, returning an \f[CR]HTMLDocument\f[R] or an \f[CR]XMLDocument\f[R].
.RS
.PP
\f[B]Note:\f[R] The \f[CR]Document.parseHTMLUnsafe()\f[R] static method
provides an ergonomic alternative for parsing HTML strings into a
\f[CR]Document\f[R].
.RE
.SH SYNTAX
.IP
.EX
parseFromString(string, mimeType)
.EE
.SS Parameters
.TP
\f[B]string\f[R]
The string to be parsed.
It must contain either an HTML, xml, XHTML, or svg document.
.TP
\f[B]mimeType\f[R]
A string.
This string determines whether the XML parser or the HTML parser is used
to parse the string.
Valid values are:
.RS
.IP \[bu] 2
\f[CR]text/html\f[R]
.IP \[bu] 2
\f[CR]text/xml\f[R]
.IP \[bu] 2
\f[CR]application/xml\f[R]
.IP \[bu] 2
\f[CR]application/xhtml+xml\f[R]
.IP \[bu] 2
\f[CR]image/svg+xml\f[R]
.PP
A value of \f[CR]text/html\f[R] will invoke the HTML parser, and the
method will return an \f[CR]HTMLDocument\f[R].
Any \f[CR]<script>\f[R] element gets marked non\-executable, and the
contents of \f[CR]<noscript>\f[R] are parsed as markup.
.PP
The other valid values (\f[CR]text/xml\f[R], \f[CR]application/xml\f[R],
\f[CR]application/xhtml+xml\f[R], and \f[CR]image/svg+xml\f[R]) are
functionally equivalent.
They all invoke the XML parser, and the method will return a
\f[CR]XMLDocument\f[R].
.PP
Any other value is invalid and will cause a \f[CR]TypeError\f[R] to be
thrown.
.RE
.SS Return value
An \f[CR]HTMLDocument\f[R] or an \f[CR]XMLDocument\f[R], depending on
the \f[CR]mimeType\f[R] argument.
.SH EXAMPLES
.SS Parsing XML, SVG, and HTML
Note that a MIME type of \f[CR]text/html\f[R] will invoke the HTML
parser, and any other valid MIME type will invoke the XML parser.
The \f[CR]application/xml\f[R] and \f[CR]image/svg+xml\f[R] MIME types
in the example below are functionally identical \[em] the latter does
not include any SVG\-specific parsing rules.
Distinguishing between the two serves only to clarify the code\[cq]s
intent.
.IP
.EX
\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();

\f[B]const\f[R] xmlString = \[dq]<warning>Beware of the tiger</warning>\[dq];
\f[B]const\f[R] doc1 = parser.parseFromString(xmlString, \[dq]application/xml\[dq]);
\f[I]// XMLDocument\f[R]

\f[B]const\f[R] svgString = \[aq]<circle cx=\[dq]50\[dq] cy=\[dq]50\[dq] r=\[dq]50\[dq]/>\[aq];
\f[B]const\f[R] doc2 = parser.parseFromString(svgString, \[dq]image/svg+xml\[dq]);
\f[I]// XMLDocument\f[R]

\f[B]const\f[R] htmlString = \[dq]<strong>Beware of the leopard</strong>\[dq];
\f[B]const\f[R] doc3 = parser.parseFromString(htmlString, \[dq]text/html\[dq]);
\f[I]// HTMLDocument\f[R]

console.log(doc1.documentElement.textContent);
\f[I]// \[dq]Beware of the tiger\[dq]\f[R]

console.log(doc2.firstChild.tagName);
\f[I]// \[dq]circle\[dq]\f[R]

console.log(doc3.body.firstChild.textContent);
\f[I]// \[dq]Beware of the leopard\[dq]\f[R]
.EE
.SS Error handling
When using the XML parser with a string that doesn\[cq]t represent
well\-formed XML, the \f[CR]XMLDocument\f[R] returned by
\f[CR]parseFromString\f[R] will contain a \f[CR]<parsererror>\f[R] node
describing the nature of the parsing error.
.IP
.EX
\f[B]const\f[R] parser = \f[B]new\f[R] DOMParser();

\f[B]const\f[R] xmlString = \[dq]<warning>Beware of the missing closing tag\[dq];
\f[B]const\f[R] doc = parser.parseFromString(xmlString, \[dq]application/xml\[dq]);
\f[B]const\f[R] errorNode = doc.querySelector(\[dq]parsererror\[dq]);
\f[B]if\f[R] (errorNode) {
  \f[I]// parsing failed\f[R]
} \f[B]else\f[R] {
  \f[I]// parsing succeeded\f[R]
}
.EE
.PP
Additionally, the parsing error may be reported to the browser\[cq]s
JavaScript console.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]XMLSerializer\f[R]
.IP \[bu] 2
\f[CR]JSON.parse()\f[R] \- counterpart for \f[CR]JSON\f[R] documents.
