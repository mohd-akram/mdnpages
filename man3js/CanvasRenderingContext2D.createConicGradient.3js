.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CanvasRenderingContext2D.createConicGradient" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.createConicGradient \-
CanvasRenderingContext2D: createConicGradient() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.createConicGradient()\f[B]\f[R]
method of the Canvas 2D API creates a gradient around a point with given
coordinates.
.PP
This method returns a conic \f[CR]CanvasGradient\f[R].
To be applied to a shape, the gradient must first be assigned to the
\f[CR]fillStyle\f[R] or \f[CR]strokeStyle\f[R] properties.
.RS
.PP
\f[B]Note:\f[R] Gradient coordinates are global, i.e., relative to the
current coordinate space.
When applied to a shape, the coordinates are NOT relative to the
shape\[cq]s coordinates.
.RE
.SH SYNTAX
.IP
.EX
createConicGradient(startAngle, x, y)
.EE
.SS Parameters
.TP
\f[B]startAngle\f[R]
The angle at which to begin the gradient, in radians.
The angle starts from a line going horizontally right from the center,
and proceeds clockwise.
.TP
\f[B]x\f[R]
The x\-axis coordinate of the center of the gradient.
.TP
\f[B]y\f[R]
The y\-axis coordinate of the center of the gradient.
.SS Return value
.TP
\f[B]CanvasGradient\f[R]
A conic \f[CR]CanvasGradient\f[R].
.SH EXAMPLES
.SS Filling a rectangle with a conic gradient
This example initializes a conic gradient using the
\f[CR]createConicGradient()\f[R] method.
Five color stops between around the center coordinate are then created.
Finally, the gradient is assigned to the canvas context, and is rendered
to a filled rectangle.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq] width=\[dq]240\[dq] height=\[dq]240\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

\f[I]// Create a conic gradient\f[R]
\f[I]// The start angle is 0\f[R]
\f[I]// The center position is 100, 100\f[R]
\f[B]const\f[R] gradient = ctx.createConicGradient(0, 100, 100);

\f[I]// Add five color stops\f[R]
gradient.addColorStop(0, \[dq]red\[dq]);
gradient.addColorStop(0.25, \[dq]orange\[dq]);
gradient.addColorStop(0.5, \[dq]yellow\[dq]);
gradient.addColorStop(0.75, \[dq]green\[dq]);
gradient.addColorStop(1, \[dq]blue\[dq]);

\f[I]// Set the fill style and draw a rectangle\f[R]
ctx.fillStyle = gradient;
ctx.fillRect(20, 20, 200, 200);
.EE
.SS Rectangle result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]CanvasGradient\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.createLinearGradient()\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.createRadialGradient()\f[R]
