.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "PushSubscription.getKey" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PushSubscription.getKey \- PushSubscription: getKey() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[CR]getKey()\f[R] method of the \f[CR]PushSubscription\f[R]
interface returns an \f[CR]ArrayBuffer\f[R] representing a client public
key, which can then be sent to a server and used in encrypting push
message data.
.SH SYNTAX
.IP
.EX
getKey(name)
.EE
.SS Parameters
.TP
\f[B]name\f[R]
A string representing the encryption method used to generate a client
key.
The value can be:
.RS
.TP
\f[B]p256dh\f[R]
An \c
.UR https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman
Elliptic curve Diffie\[en]Hellman
.UE \c
\ public key on the P\-256 curve (that is, the NIST secp256r1 elliptic
curve).
The resulting key is an uncompressed point in ANSI X9.62 format.
.TP
\f[B]auth\f[R]
An authentication secret, as described in \c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-webpush-encryption-08
Message Encryption for Web Push
.UE \c
\&.
.RE
.SS Return value
An \f[CR]ArrayBuffer\f[R] or \f[CR]null\f[R] if no public key can be
found.
.SH EXAMPLES
.IP
.EX
reg.pushManager.getSubscription().then((subscription) \f[B]=>\f[R] {
  \f[I]// Enable any UI which subscribes / unsubscribes from\f[R]
  \f[I]// push messages.\f[R]

  subBtn.disabled = \f[B]false\f[R];

  \f[B]if\f[R] (!subscription) {
    console.log(\[dq]Not yet subscribed to Push\[dq]);
    \f[I]// We aren\[aq]t subscribed to push, so set UI\f[R]
    \f[I]// to allow the user to enable push\f[R]
    \f[B]return\f[R];
  }

  \f[I]// Set your UI to show they have subscribed for\f[R]
  \f[I]// push messages\f[R]
  subBtn.textContent = \[dq]Unsubscribe from Push Messaging\[dq];
  isPushEnabled = \f[B]true\f[R];

  \f[I]// initialize status, which includes setting UI elements for subscribed status\f[R]
  \f[I]// and updating Subscribers list via push\f[R]
  \f[B]const\f[R] endpoint = subscription.endpoint;
  \f[B]const\f[R] key = subscription.getKey(\[dq]p256dh\[dq]);
  \f[B]const\f[R] auth = subscription.getKey(\[dq]auth\[dq]);

  \f[I]// ...\f[R]
});
.EE
