.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "XRViewerPose" "JS" "February 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XRViewerPose \- XRViewerPose
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The WebXR Device API interface \f[B]\f[CB]XRViewerPose\f[B]\f[R]
represents the pose (the position and orientation) of a viewer\[cq]s
point of view on the scene.
Each \f[CR]XRViewerPose\f[R] can have multiple views to represent, for
example, the slight separation between the left and right eye.
.PP
This view can represent anything from the point\-of\-view of a
user\[cq]s XR headset to the viewpoint represented by a player\[cq]s
movement of an avatar using mouse and keyboard, presented on the screen,
to a virtual camera capturing the scene for a spectator.
.SH INSTANCE PROPERTIES
\f[I]In addition to the properties inherited from \f[CI]XRPose\f[I],
\f[CI]XRViewerPose\f[I] includes the following:\f[R]
.TP
\f[B]views\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]XRView\f[R] objects, one for each viewpoint on the
scene which is needed to represent the scene to the user.
A typical headset provides a viewer pose with two views whose
\f[CR]eye\f[R] property is either \f[CR]left\f[R] or \f[CR]right\f[R],
indicating which eye that view represents.
Taken together, these views can reproduce the 3D effect when displayed
on the XR device.
.SH USAGE NOTES
The \f[CR]XRViewerPose\f[R] object is used to describe the state of a
viewer of a WebXR scene as it\[cq]s tracked by the user\[cq]s XR
hardware.
The viewer may be the virtual representation of the user, or it may
represent another device or interface which may serve as the source of a
position and orientation that make up a view upon the scene.
For example, every player in a MMORPG might have an instance of
\f[CR]XRViewerPose\f[R] to provide a way to calculate what they can see;
if the game provides a mechanism that tells the player if another player
sees them, or that they see another player, this information becomes
crucial.
.PP
An \f[CR]XRViewerPose\f[R] is always obtained and referenced relative to
an existing \f[CR]XRReferenceSpace\f[R].
This ensures that positions and orientations are reported using the
expected relative coordinate system.
.PP
To render a scene using the \f[CR]XRViewerPose\f[R] representing the
user\[cq]s head, one would iterate over the views in the
\f[CR]views\f[R] array, rendering them one after another.
By calling \f[CR]viewport()\f[R] on the WebGL context, specifying the
\f[CR]XRView\f[R] as input, you can get the viewport to use when
rendering in order to draw the frame for that eye into the correct part
of the drawing surface.
.PP
Also, when rendering the scene for spectators or other players in a
multiplayer game, the \f[CR]transform\f[R] of the
\f[CR]XRViewerPose\f[R] can be used to determine both placement and
facing direction of the other players in the game, so that they can be
drawn in the correct place with the correct facing.
.PP
The viewer\[cq]s pose for the animation frame represented by
\f[CR]XRFrame\f[R] can be obtained by calling the frame\[cq]s
\f[CR]getViewerPose()\f[R] method, specifying the reference space in
which the origin\[cq]s position should be computed.
The returned \f[CR]XRViewerPose\f[R] tells you where the viewer is and
what direction they\[cq]re facing at the time at which the frame takes
place.
.SH EXAMPLES
In this example\[em]part of the code to render an \f[CR]XRFrame\f[R],
\f[CR]getViewerPose()\f[R] is called to get an \f[CR]XRViewerPose\f[R]
using the same reference space the code is using as its base reference
space.
If a valid pose is returned, the frame is rendered by clearing the
backbuffer and then rendering each of the views in the pose; these are
most likely the views for the left and right eyes.
.IP
.EX
\f[B]const\f[R] pose = frame.getViewerPose(xrReferenceSpace);

\f[B]if\f[R] (pose) {
  \f[B]const\f[R] glLayer = xrSession.renderState.baseLayer;

  gl.bindFrameBuffer(gl.FRAMEBUFFER, glLayer.framebuffer);
  gl.clearColor(0, 0, 0, 1);
  gl.clearDepth(1);
  gl.clear(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT);

  \f[B]for\f[R] (\f[B]const\f[R] view \f[B]of\f[R] pose.views) {
    \f[B]const\f[R] viewport = glLayer.getViewport(view);
    gl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);

    \f[I]/* render the scene for the eye view.eye */\f[R]
  }
}
.EE
.PP
Passing each \f[CR]view\f[R] to \f[CR]getViewport()\f[R] returns the
WebGL viewport to apply in order to cause the rendered output to be
positioned correctly in the framebuffer for rendering to the
corresponding eye on the output device.
.PP
This code is derived from Drawing a frame in our \[lq]Movement and
motion\[rq] WebXR example.
You can see more context and see much more on that page.
.SH SEE ALSO
.IP \[bu] 2
WebXR Device API
.IP \[bu] 2
Movement, orientation, and motion
.IP \[bu] 2
\f[CR]XRPose\f[R] and \f[CR]XRView\f[R]
