.\" Automatically generated by Pandoc 3.4
.\"
.TH "Array.map" "JS" "November 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.map \- Array.prototype.map()
.SH SYNOPSIS
The \f[B]\f[CB]map()\f[B]\f[R] method of \f[CR]Array\f[R] instances
creates a new array populated with the results of calling a provided
function on every element in the calling array.
.SH SYNTAX
.IP
.EX
map(callbackFn)
map(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
Its return value is added as a single element in the new array.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[CR]map()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
A new array with each element being the result of the callback function.
.SH DESCRIPTION
The \f[CR]map()\f[R] method is an iterative method.
It calls a provided \f[CR]callbackFn\f[R] function once for each element
in an array and constructs a new array from the results.
Read the iterative methods section for more information about how these
methods work in general.
.PP
\f[CR]callbackFn\f[R] is invoked only for array indexes which have
assigned values.
It is not invoked for empty slots in sparse arrays.
.PP
The \f[CR]map()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.PP
Since \f[CR]map\f[R] builds a new array, calling it without using the
returned array is an anti\-pattern; use \f[CR]forEach\f[R] or
\f[CR]for...of\f[R] instead.
.SH EXAMPLES
.SS Mapping an array of numbers to an array of square roots
The following code takes an array of numbers and creates a new array
containing the square roots of the numbers in the first array.
.IP
.EX
\f[B]const\f[R] numbers = [1, 4, 9];
\f[B]const\f[R] roots = numbers.map((num) \f[B]=>\f[R] Math.sqrt(num));

\f[I]// roots is now     [1, 2, 3]\f[R]
\f[I]// numbers is still [1, 4, 9]\f[R]
.EE
.SS Using map to reformat objects in an array
The following code takes an array of objects and creates a new array
containing the newly reformatted objects.
.IP
.EX
\f[B]const\f[R] kvArray = [
  { key: 1, value: 10 },
  { key: 2, value: 20 },
  { key: 3, value: 30 },
];

\f[B]const\f[R] reformattedArray = kvArray.map(({ key, value }) \f[B]=>\f[R] ({ [key]: value }));

console.log(reformattedArray); \f[I]// [{ 1: 10 }, { 2: 20 }, { 3: 30 }]\f[R]
console.log(kvArray);
\f[I]// [\f[R]
\f[I]//   { key: 1, value: 10 },\f[R]
\f[I]//   { key: 2, value: 20 },\f[R]
\f[I]//   { key: 3, value: 30 }\f[R]
\f[I]// ]\f[R]
.EE
.SS Using parseInt() with map()
It is common to use the callback with one argument (the element being
traversed).
Certain functions are also commonly used with one argument, even though
they take additional optional arguments.
These habits may lead to confusing behaviors.
Consider:
.IP
.EX
[\[dq]1\[dq], \[dq]2\[dq], \[dq]3\[dq]].map(parseInt);
.EE
.PP
While one might expect \f[CR][1, 2, 3]\f[R], the actual result is
\f[CR][1, NaN, NaN]\f[R].
.PP
\f[CR]parseInt\f[R] is often used with one argument, but takes two.
The first is an expression and the second is the radix to the callback
function, \f[CR]Array.prototype.map\f[R] passes 3 arguments: the
element, the index, and the array.
The third argument is ignored by \f[CR]parseInt\f[R] \[em] but
\f[I]not\f[R] the second one!
This is the source of possible confusion.
.PP
Here is a concise example of the iteration steps:
.IP
.EX
\f[I]/* first iteration  (index is 0): */\f[R] parseInt(\[dq]1\[dq], 0); \f[I]// 1\f[R]
\f[I]/* second iteration (index is 1): */\f[R] parseInt(\[dq]2\[dq], 1); \f[I]// NaN\f[R]
\f[I]/* third iteration  (index is 2): */\f[R] parseInt(\[dq]3\[dq], 2); \f[I]// NaN\f[R]
.EE
.PP
To solve this, define another function that only takes one argument:
.IP
.EX
[\[dq]1\[dq], \[dq]2\[dq], \[dq]3\[dq]].map((str) \f[B]=>\f[R] parseInt(str, 10)); \f[I]// [1, 2, 3]\f[R]
.EE
.PP
You can also use the \f[CR]Number\f[R] function, which only takes one
argument:
.IP
.EX
[\[dq]1\[dq], \[dq]2\[dq], \[dq]3\[dq]].map(Number); \f[I]// [1, 2, 3]\f[R]

\f[I]// But unlike parseInt(), Number() will also return a float or (resolved) exponential notation:\f[R]
[\[dq]1.1\[dq], \[dq]2.2e2\[dq], \[dq]3e300\[dq]].map(Number); \f[I]// [1.1, 220, 3e+300]\f[R]

\f[I]// For comparison, if we use parseInt() on the array above:\f[R]
[\[dq]1.1\[dq], \[dq]2.2e2\[dq], \[dq]3e300\[dq]].map((str) \f[B]=>\f[R] parseInt(str, 10)); \f[I]// [1, 2, 3]\f[R]
.EE
.PP
See \c
.UR https://wirfs-brock.com/allen/posts/166
A JavaScript optional argument hazard
.UE \c
\ by Allen Wirfs\-Brock for more discussions.
.SS Mapped array contains undefined
When \f[CR]undefined\f[R] or nothing is returned, the resulting array
contains \f[CR]undefined\f[R].
If you want to delete the element instead, chain a \f[CR]filter()\f[R]
method, or use the \f[CR]flatMap()\f[R] method and return an empty array
to signify deletion.
.IP
.EX
\f[B]const\f[R] numbers = [1, 2, 3, 4];
\f[B]const\f[R] filteredNumbers = numbers.map((num, index) \f[B]=>\f[R] {
  \f[B]if\f[R] (index < 3) {
    \f[B]return\f[R] num;
  }
});

\f[I]// index goes from 0, so the filterNumbers are 1,2,3 and undefined.\f[R]
\f[I]// filteredNumbers is [1, 2, 3, undefined]\f[R]
\f[I]// numbers is still [1, 2, 3, 4]\f[R]
.EE
.SS Side\-effectful mapping
The callback can have side effects.
.IP
.EX
\f[B]const\f[R] cart = [5, 15, 25];
\f[B]let\f[R] total = 0;
\f[B]const\f[R] withTax = cart.map((cost) \f[B]=>\f[R] {
  total += cost;
  \f[B]return\f[R] cost * 1.2;
});
console.log(withTax); \f[I]// [6, 18, 30]\f[R]
console.log(total); \f[I]// 45\f[R]
.EE
.PP
This is not recommended, because copying methods are best used with pure
functions.
In this case, we can choose to iterate the array twice.
.IP
.EX
\f[B]const\f[R] cart = [5, 15, 25];
\f[B]const\f[R] total = cart.reduce((acc, cost) \f[B]=>\f[R] acc + cost, 0);
\f[B]const\f[R] withTax = cart.map((cost) \f[B]=>\f[R] cost * 1.2);
.EE
.PP
Sometimes this pattern goes to its extreme and the \f[I]only\f[R] useful
thing that \f[CR]map()\f[R] does is causing side effects.
.IP
.EX
\f[B]const\f[R] products = [
  { name: \[dq]sports car\[dq] },
  { name: \[dq]laptop\[dq] },
  { name: \[dq]phone\[dq] },
];

products.map((product) \f[B]=>\f[R] {
  product.price = 100;
});
.EE
.PP
As mentioned previously, this is an anti\-pattern.
If you don\[cq]t use the return value of \f[CR]map()\f[R], use
\f[CR]forEach()\f[R] or a \f[CR]for...of\f[R] loop instead.
.IP
.EX
products.forEach((product) \f[B]=>\f[R] {
  product.price = 100;
});
.EE
.PP
Or, if you want to create a new array instead:
.IP
.EX
\f[B]const\f[R] productsWithPrice = products.map((product) \f[B]=>\f[R] {
  \f[B]return\f[R] { ...product, price: 100 };
});
.EE
.SS Using the third argument of callbackFn
The \f[CR]array\f[R] argument is useful if you want to access another
element in the array, especially when you don\[cq]t have an existing
variable that refers to the array.
The following example first uses \f[CR]filter()\f[R] to extract the
positive values and then uses \f[CR]map()\f[R] to create a new array
where each element is the average of its neighbors and itself.
.IP
.EX
\f[B]const\f[R] numbers = [3, \-1, 1, 4, 1, 5, 9, 2, 6];
\f[B]const\f[R] averaged = numbers
  .filter((num) \f[B]=>\f[R] num > 0)
  .map((num, idx, arr) \f[B]=>\f[R] {
    \f[I]// Without the arr argument, there\[aq]s no way to easily access the\f[R]
    \f[I]// intermediate array without saving it to a variable.\f[R]
    \f[B]const\f[R] prev = arr[idx \- 1];
    \f[B]const\f[R] next = arr[idx + 1];
    \f[B]let\f[R] count = 1;
    \f[B]let\f[R] total = num;
    \f[B]if\f[R] (prev !== \f[B]undefined\f[R]) {
      count++;
      total += prev;
    }
    \f[B]if\f[R] (next !== \f[B]undefined\f[R]) {
      count++;
      total += next;
    }
    \f[B]const\f[R] average = total / count;
    \f[I]// Keep two decimal places\f[R]
    \f[B]return\f[R] Math.round(average * 100) / 100;
  });
console.log(averaged); \f[I]// [2, 2.67, 2, 3.33, 5, 5.33, 5.67, 4]\f[R]
.EE
.PP
The \f[CR]array\f[R] argument is \f[I]not\f[R] the array that is being
built \[em] there is no way to access the array being built from the
callback function.
.SS Using map() on sparse arrays
A sparse array remains sparse after \f[CR]map()\f[R].
The indices of empty slots are still empty in the returned array, and
the callback function won\[cq]t be called on them.
.IP
.EX
console.log(
  [1, , 3].map((x, index) \f[B]=>\f[R] {
    console.log(\[ga]Visit ${index}\[ga]);
    \f[B]return\f[R] x * 2;
  }),
);
\f[I]// Visit 0\f[R]
\f[I]// Visit 2\f[R]
\f[I]// [2, empty, 6]\f[R]
.EE
.SS Calling map() on non\-array objects
The \f[CR]map()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each property whose key is a
nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
  3: 5, \f[I]// ignored by map() since length is 3\f[R]
};
console.log(Array.prototype.map.call(arrayLike, (x) \f[B]=>\f[R] x ** 2));
\f[I]// [ 4, 9, 16 ]\f[R]
.EE
.PP
This example shows how to iterate through a collection of objects
collected by \f[CR]querySelectorAll\f[R].
This is because \f[CR]querySelectorAll\f[R] returns a
\f[CR]NodeList\f[R] (which is a collection of objects).
In this case, we return all the selected \f[CR]option\f[R]s\[cq] values
on the screen:
.IP
.EX
\f[B]const\f[R] elems = document.querySelectorAll(\[dq]select option:checked\[dq]);
\f[B]const\f[R] values = Array.prototype.map.call(elems, ({ value }) \f[B]=>\f[R] value);
.EE
.PP
You can also use \f[CR]Array.from()\f[R] to transform \f[CR]elems\f[R]
to an array, and then access the \f[CR]map()\f[R] method.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.map\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.forEach()\f[R]
.IP \[bu] 2
\f[CR]Array.from()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.map()\f[R]
.IP \[bu] 2
\f[CR]Map\f[R]
