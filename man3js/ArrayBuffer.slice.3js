.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAYBUFFER.SLICE" "3JS" "March 26, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ArrayBuffer.slice \- ArrayBuffer.prototype.slice()
.SH SYNOPSIS
The \f[B]\f[CB]slice()\f[B]\f[R] method of \f[CR]ArrayBuffer\f[R]
instances returns a new \f[CR]ArrayBuffer\f[R] whose contents are a copy
of this \f[CR]ArrayBuffer\f[R]\(cqs bytes from \f[CR]start\f[R],
inclusive, up to \f[CR]end\f[R], exclusive.
If either \f[CR]start\f[R] or \f[CR]end\f[R] is negative, it refers to
an index from the end of the array, as opposed to from the beginning.
.IP
.EX
\f[I]// Create an ArrayBuffer with a size in bytes\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(16);
\f[B]const\f[R] int32View = \f[B]new\f[R] Int32Array(buffer);
\f[I]// Produces Int32Array [0, 0, 0, 0]\f[R]

int32View[1] = 42;
\f[B]const\f[R] sliced = \f[B]new\f[R] Int32Array(buffer.slice(4, 12));
\f[I]// Produces Int32Array [42, 0]\f[R]

console.log(sliced[0]);
\f[I]// Expected output: 42\f[R]
.EE
.SH SYNTAX
.IP
.EX
slice()
slice(start)
slice(start, end)
.EE
.SS Parameters
.TP
\f[B]start\f[R] \f[I](optional)\f[R]
Zero\-based index at which to start extraction, converted to an integer.
.RS
.IP \(bu 2
Negative index counts back from the end of the buffer \(em if
\f[CR]\-buffer.length <= start < 0\f[R],
\f[CR]start + buffer.length\f[R] is used.
.IP \(bu 2
If \f[CR]start < \-buffer.length\f[R] or \f[CR]start\f[R] is omitted,
\f[CR]0\f[R] is used.
.IP \(bu 2
If \f[CR]start >= buffer.length\f[R], an empty buffer is returned.
.RE
.TP
\f[B]end\f[R] \f[I](optional)\f[R]
Zero\-based index at which to end extraction, converted to an integer.
\f[CR]slice()\f[R] extracts up to but not including \f[CR]end\f[R].
.RS
.IP \(bu 2
Negative index counts back from the end of the buffer \(em if
\f[CR]\-buffer.length <= end < 0\f[R], \f[CR]end + buffer.length\f[R] is
used.
.IP \(bu 2
If \f[CR]end < \-buffer.length\f[R], \f[CR]0\f[R] is used.
.IP \(bu 2
If \f[CR]end >= buffer.length\f[R] or \f[CR]end\f[R] is omitted is
\f[CR]undefined\f[R], \f[CR]buffer.length\f[R] is used, causing all
elements until the end to be extracted.
.IP \(bu 2
If \f[CR]end\f[R] implies a position before or at the position that
\f[CR]start\f[R] implies, an empty buffer is returned.
.RE
.SS Return value
A new \f[CR]ArrayBuffer\f[R] containing the extracted elements.
It is not resizable, even if the original was.
.SH EXAMPLES
.SS Copying an ArrayBuffer
.IP
.EX
\f[B]const\f[R] buf1 = \f[B]new\f[R] ArrayBuffer(8);
\f[B]const\f[R] buf2 = buf1.slice(0);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]ArrayBuffer\f[R]
.IP \(bu 2
\f[CR]SharedArrayBuffer.prototype.slice()\f[R]
