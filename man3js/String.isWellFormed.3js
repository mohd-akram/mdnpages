.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "String.isWellFormed" "JS" "August 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.isWellFormed \- String.prototype.isWellFormed()
.SH SYNOPSIS
The \f[B]\f[CB]isWellFormed()\f[B]\f[R] method of \f[CR]String\f[R]
values returns a boolean indicating whether this string contains any
lone surrogates.
.SH SYNTAX
.IP
.EX
isWellFormed()
.EE
.SS Parameters
None.
.SS Return value
Returns \f[CR]true\f[R] if this string does not contain any lone
surrogates, \f[CR]false\f[R] otherwise.
.SH DESCRIPTION
Strings in JavaScript are UTF\-16 encoded.
UTF\-16 encoding has the concept of \f[I]surrogate pairs\f[R], which is
introduced in detail in the UTF\-16 characters, Unicode code points, and
grapheme clusters section.
.PP
\f[CR]isWellFormed()\f[R] allows you to test whether a string is
well\-formed (i.e.\ does not contain any lone surrogates).
Compared to a custom implementation, \f[CR]isWellFormed()\f[R] is more
efficient, as engines can directly access the internal representation of
strings.
If you need to convert a string to a well\-formed string, use the
\f[CR]toWellFormed()\f[R] method.
\f[CR]isWellFormed()\f[R] allows you to handle ill\-formed strings
differently from well\-formed strings, such as throwing an error or
marking it as invalid.
.SH EXAMPLES
.SS Using isWellFormed()
.IP
.EX
\f[B]const\f[R] strings = [
  \f[I]// Lone leading surrogate\f[R]
  \[dq]ab\[rs]uD800\[dq],
  \[dq]ab\[rs]uD800c\[dq],
  \f[I]// Lone trailing surrogate\f[R]
  \[dq]\[rs]uDFFFab\[dq],
  \[dq]c\[rs]uDFFFab\[dq],
  \f[I]// Well\-formed\f[R]
  \[dq]abc\[dq],
  \[dq]ab\[rs]uD83D\[rs]uDE04c\[dq],
];

\f[B]for\f[R] (\f[B]const\f[R] str \f[B]of\f[R] strings) {
  console.log(str.isWellFormed());
}
\f[I]// Logs:\f[R]
\f[I]// false\f[R]
\f[I]// false\f[R]
\f[I]// false\f[R]
\f[I]// false\f[R]
\f[I]// true\f[R]
\f[I]// true\f[R]
.EE
.SS Avoiding errors in encodeURI()
\f[CR]encodeURI\f[R] throws an error if the string passed is not
well\-formed.
This can be avoided by using \f[CR]isWellFormed()\f[R] to test the
string before passing it to \f[CR]encodeURI()\f[R].
.IP
.EX
\f[B]const\f[R] illFormed = \[dq]https://example.com/search?q=\[rs]uD800\[dq];

\f[B]try\f[R] {
  encodeURI(illFormed);
} \f[B]catch\f[R] (e) {
  console.log(e); \f[I]// URIError: URI malformed\f[R]
}

\f[B]if\f[R] (illFormed.isWellFormed()) {
  console.log(encodeURI(illFormed));
} \f[B]else\f[R] {
  console.warn(\[dq]Ill\-formed strings encountered.\[dq]); \f[I]// Ill\-formed strings encountered.\f[R]
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#well-formed-unicode-strings
Polyfill of \f[CR]String.prototype.isWellFormed\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]String.prototype.toWellFormed()\f[R]
.IP \[bu] 2
\f[CR]String.prototype.normalize()\f[R]
