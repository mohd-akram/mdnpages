.\" Automatically generated by Pandoc 3.4
.\"
.TH "WebTransportDatagramDuplexStream" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebTransportDatagramDuplexStream \- WebTransportDatagramDuplexStream
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]WebTransportDatagramDuplexStream\f[B]\f[R] interface of
the WebTransport API represents a duplex stream that can be used for
unreliable transport of datagrams between client and server.
Provides access to a \f[CR]ReadableStream\f[R] for reading incoming
datagrams, a \f[CR]WritableStream\f[R] for writing outgoing datagrams,
and various settings and statistics related to the stream.
.PP
This is accessed via the \f[CR]WebTransport.datagrams\f[R] property.
.PP
\[lq]Unreliable\[rq] means that transmission of data is not guaranteed,
nor is arrival in a specific order.
This is fine in some situations and provides very fast delivery.
For example, you might want to transmit regular game state updates where
each message supersedes the last one that arrives, and order is not
important.
.SH INSTANCE PROPERTIES
.TP
\f[B]incomingHighWaterMark\f[R]
Gets or sets the high water mark for incoming chunks of data \[em] this
is the maximum size, in chunks, that the incoming
\f[CR]ReadableStream\f[R]\[cq]s internal queue can reach before it is
considered full.
See Internal queues and queuing strategies for more information.
.TP
\f[B]incomingMaxAge\f[R]
Gets or sets the maximum age for incoming datagrams, in milliseconds.
Returns \f[CR]null\f[R] if no maximum age has been set.
.TP
\f[B]maxDatagramSize\f[R] \f[I](read\-only)\f[R]
Returns the maximum allowable size of outgoing datagrams, in bytes, that
can be written to \f[CR]writable\f[R].
.TP
\f[B]outgoingHighWaterMark\f[R]
Gets or sets the high water mark for outgoing chunks of data \[em] this
is the maximum size, in chunks, that the outgoing
\f[CR]WritableStream\f[R]\[cq]s internal queue can reach before it is
considered full.
See Internal queues and queuing strategies for more information.
.TP
\f[B]outgoingMaxAge\f[R]
Gets or sets the maximum age for outgoing datagrams, in milliseconds.
Returns \f[CR]null\f[R] if no maximum age has been set.
.TP
\f[B]readable\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]ReadableStream\f[R] instance that can be used to read
incoming datagrams from the stream.
.TP
\f[B]writable\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]WritableStream\f[R] instance that can be used to write
outgoing datagrams to the stream.
.SH EXAMPLES
.SS Writing outgoing datagrams
The \f[CR]writable\f[R] property returns a \f[CR]WritableStream\f[R]
object that you can write data to using a writer, for transmission to
the server:
.IP
.EX
\f[B]const\f[R] writer = transport.datagrams.writable.getWriter();
\f[B]const\f[R] data1 = \f[B]new\f[R] Uint8Array([65, 66, 67]);
\f[B]const\f[R] data2 = \f[B]new\f[R] Uint8Array([68, 69, 70]);
writer.write(data1);
writer.write(data2);
.EE
.SS Reading incoming datagrams
The \f[CR]readable\f[R] property returns a \f[CR]ReadableStream\f[R]
object that you can use to receive data from the server:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] readData() {
  \f[B]const\f[R] reader = transport.datagrams.readable.getReader();
  \f[B]while\f[R] (\f[B]true\f[R]) {
    \f[B]const\f[R] { value, done } = \f[B]await\f[R] reader.read();
    \f[B]if\f[R] (done) {
      \f[B]break\f[R];
    }
    \f[I]// value is a Uint8Array.\f[R]
    console.log(value);
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://developer.chrome.com/docs/capabilities/web-apis/webtransport
Using WebTransport
.UE \c
.IP \[bu] 2
WebSockets API
.IP \[bu] 2
Streams API
.IP \[bu] 2
\c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/
WebTransport over HTTP/3
.UE \c
