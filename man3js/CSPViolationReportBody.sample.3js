.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "CSPViolationReportBody.sample" "JS" "September 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSPViolationReportBody.sample \- CSPViolationReportBody: sample property
.SH SYNOPSIS
The \f[B]\f[CB]sample\f[B]\f[R] read\-only property of the
\f[CR]CSPViolationReportBody\f[R] interface is a string that contains a
part of the resource that violated the Content Security Policy (CSP).
.PP
This sample is usually the first 40 characters of the inline script,
event handler, or style that violated a CSP restriction.
If not populated it is the empty string \f[CR]\[dq]\[dq]\f[R].
.PP
Note that this is only populated when attempting to load
\f[I]inline\f[R] scripts, event handlers, or styles that violate CSP
\f[CR]script\-src*\f[R] and \f[CR]style\-src*\f[R] rules \[em] external
resources that violate the CSP will not generate a sample.
In addition, a sample is only included if the
\f[CR]Content\-Security\-Policy\f[R] directive that was violated also
contains the \f[CR]\[aq]report\-sample\[aq]\f[R] keyword.
.RS
.PP
\f[B]Note:\f[R] Violation reports should be considered
attacker\-controlled data.
The content of this field \f[I]in particular\f[R] should be sanitized
before storing or rendering.
.RE
.SH VALUE
A string containing a sample of the inline resource that violated the
CSP, usually the first 40 characters, or the empty string.
.SH EXAMPLES
.SS CSP inline script violation
This example triggers a CSP violation using an inline script, and
reports the violation using a \f[CR]ReportingObserver\f[R].
We also add \f[CR]\[aq]report\-sample\[aq]\f[R] to the CSP in order to
populate a \f[CR]sample\f[R] in the body.
.SS HTML
The HTML file below uses the \f[CR]<meta>\f[R] element to set the
\f[CR]Content\-Security\-Policy\f[R] \f[CR]script\-src\-elem\f[R] to
\f[CR]self\f[R], which allows scripts to be loaded from the same domain,
but does not allow inline scripts to be executed.
We include \f[CR]\[aq]report\-sample\[aq]\f[R] in the directive so that
a sample is generated.
The document also includes an inline script, which should trigger a CSP
violation.
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\[dq]en\[dq]>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R]
      http\-equiv=\[dq]Content\-Security\-Policy\[dq]
      content=\[dq]script\-src\-elem \[aq]self\[aq] \[aq]report\-sample\[aq]\[dq] />
    <\f[B]script\f[R] src=\[dq]main.js\[dq]></\f[B]script\f[R]>
    <\f[B]title\f[R]>CSP: Violation due to inline script</\f[B]title\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    <\f[B]h1\f[R]>CSP: Violation due to inline script</\f[B]h1\f[R]>
    <\f[B]script\f[R]>
      \f[B]const\f[R] int = 4;
    </\f[B]script\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SS JavaScript (main.js)
The document above also loads the external script \f[CR]main.js\f[R],
which is shown below.
Because this is loaded from the same domain as the HTML, it is not
blocked by the CSP.
.PP
The script creates a new \f[CR]ReportingObserver\f[R] to observe content
violation reports of type \f[CR]\[dq]csp\-violation\[dq]\f[R].
Each time the callback function is invoked, we get the body of the first
entry of the reports array, and use it to log the violation
\f[CR]sample\f[R] to the console.
.IP
.EX
\f[I]// main.js\f[R]
\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver(
  (reports, observer) \f[B]=>\f[R] {
    console.log(\[ga]sample: ${reports[0].body.sample}\[ga]);
  },
  {
    types: [\[dq]csp\-violation\[dq]],
    buffered: \f[B]true\f[R],
  },
);

observer.observe();
.EE
.PP
Note that while there might be multiple reports in the returned array,
for brevity we only log the values of the first element.
.SS Results
The console output for the above code is:
.IP
.EX
sample: const int = 4;
.EE
.PP
In this case the sample contains the entire content of the inline
script.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]SecurityPolicyViolationEvent.sample\f[R]
