.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ReadableStream.pipeThrough" "JS" "April 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStream.pipeThrough \- ReadableStream: pipeThrough() method
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The \f[B]\f[CB]pipeThrough()\f[B]\f[R] method of the
\f[CR]ReadableStream\f[R] interface provides a chainable way of piping
the current stream through a transform stream or any other
writable/readable pair.
.PP
Piping a stream will generally lock it for the duration of the pipe,
preventing other readers from locking it.
.SH SYNTAX
.IP
.EX
pipeThrough(transformStream)
pipeThrough(transformStream, options)
.EE
.SS Parameters
.TP
\f[B]transformStream\f[R]
A \f[CR]TransformStream\f[R] (or an object with the structure
\f[CR]{writable, readable}\f[R]) consisting of a readable stream and a
writable stream working together to transform some data from one form to
another.
Data written to the \f[CR]writable\f[R] stream can be read in some
transformed state by the \f[CR]readable\f[R] stream.
For example, a \f[CR]TextDecoder\f[R], has bytes written to it and
strings read from it, while a video decoder has encoded bytes written to
it and uncompressed video frames read from it.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
The options that should be used when piping to the \f[CR]writable\f[R]
stream.
Available options are:
.RS
.TP
\f[B]preventClose\f[R]
If this is set to \f[CR]true\f[R], closing the source
\f[CR]ReadableStream\f[R] will no longer cause the destination
\f[CR]WritableStream\f[R] to be closed.
.TP
\f[B]preventAbort\f[R]
If this is set to \f[CR]true\f[R], errors in the source
\f[CR]ReadableStream\f[R] will no longer abort the destination
\f[CR]WritableStream\f[R].
.TP
\f[B]preventCancel\f[R]
If this is set to \f[CR]true\f[R], errors in the destination
\f[CR]WritableStream\f[R] will no longer cancel the source
\f[CR]ReadableStream\f[R].
.TP
\f[B]signal\f[R]
If set to an \f[CR]AbortSignal\f[R] object, ongoing pipe operations can
then be aborted via the corresponding \f[CR]AbortController\f[R].
.RE
.SS Return value
The \f[CR]readable\f[R] side of the \f[CR]transformStream\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the \f[CR]writable\f[R] and/or \f[CR]readable\f[R] property of
\f[CR]transformStream\f[R] are undefined.
.SH EXAMPLES
In the following example (see \c
.UR https://mdn.github.io/dom-examples/streams/png-transform-stream/
Unpack chunks of a PNG
.UE \c
\ for the full code running live, and \c
.UR https://github.com/mdn/dom-examples/tree/main/streams/png-transform-stream
png\-transform\-stream
.UE \c
\ for the source code), an image is fetched and its body retrieved as a
\f[CR]ReadableStream\f[R].
.PP
Next, we log the contents of the readable stream, use
\f[CR]pipeThrough()\f[R] to send it to a new function that creates a
gray\-scaled version of the stream, then log the new stream\[cq]s
contents too.
.IP
.EX
\f[I]// Fetch the original image\f[R]
fetch(\[dq]png\-logo.png\[dq])
  \f[I]// Retrieve its body as ReadableStream\f[R]
  .then((response) \f[B]=>\f[R] response.body)
  .then((rs) \f[B]=>\f[R] logReadableStream(\[dq]Fetch Response Stream\[dq], rs))
  \f[I]// Create a gray\-scaled PNG stream out of the original\f[R]
  .then((body) \f[B]=>\f[R] body.pipeThrough(\f[B]new\f[R] PNGTransformStream()))
  .then((rs) \f[B]=>\f[R] logReadableStream(\[dq]PNG Chunk Stream\[dq], rs));
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]ReadableStream()\f[R] constructor
.IP \[bu] 2
Pipe chains
