.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "CanvasRenderingContext2D.createRadialGradient" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.createRadialGradient \-
CanvasRenderingContext2D: createRadialGradient() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.createRadialGradient()\f[B]\f[R]
method of the Canvas 2D API creates a radial gradient using the size and
coordinates of two circles.
.PP
This method returns a \f[CR]CanvasGradient\f[R].
To be applied to a shape, the gradient must first be assigned to the
\f[CR]fillStyle\f[R] or \f[CR]strokeStyle\f[R] properties.
.RS
.PP
\f[B]Note:\f[R] Gradient coordinates are global, i.e., relative to the
current coordinate space.
When applied to a shape, the coordinates are NOT relative to the
shape\[cq]s coordinates.
.RE
.SH SYNTAX
.IP
.EX
createRadialGradient(x0, y0, r0, x1, y1, r1)
.EE
.PP
The \f[CR]createRadialGradient()\f[R] method is specified by six
parameters, three defining the gradient\[cq]s start circle, and three
defining the end circle.
.SS Parameters
.TP
\f[B]x0\f[R]
The x\-axis coordinate of the start circle.
.TP
\f[B]y0\f[R]
The y\-axis coordinate of the start circle.
.TP
\f[B]r0\f[R]
The radius of the start circle.
Must be non\-negative and finite.
.TP
\f[B]x1\f[R]
The x\-axis coordinate of the end circle.
.TP
\f[B]y1\f[R]
The y\-axis coordinate of the end circle.
.TP
\f[B]r1\f[R]
The radius of the end circle.
Must be non\-negative and finite.
.SS Return value
A radial \f[CR]CanvasGradient\f[R] initialized with the two specified
circles.
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown when non\-finite values are passed in parameter.
.TP
\f[B]IndexSizeError\f[R] \f[B]DOMException\f[R]
Thrown when a negative radius is passed in parameter.
.SH EXAMPLES
.SS Filling a rectangle with a radial gradient
This example initializes a radial gradient using the
\f[CR]createRadialGradient()\f[R] method.
Three color stops between the gradient\[cq]s two circles are then
created.
Finally, the gradient is assigned to the canvas context, and is rendered
to a filled rectangle.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq] width=\[dq]200\[dq] height=\[dq]200\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

\f[I]// Create a radial gradient\f[R]
\f[I]// The inner circle is at x=110, y=90, with radius=30\f[R]
\f[I]// The outer circle is at x=100, y=100, with radius=70\f[R]
\f[B]const\f[R] gradient = ctx.createRadialGradient(110, 90, 30, 100, 100, 70);

\f[I]// Add three color stops\f[R]
gradient.addColorStop(0, \[dq]pink\[dq]);
gradient.addColorStop(0.9, \[dq]white\[dq]);
gradient.addColorStop(1, \[dq]green\[dq]);

\f[I]// Set the fill style and draw a rectangle\f[R]
ctx.fillStyle = gradient;
ctx.fillRect(20, 20, 160, 160);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.createLinearGradient()\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.createConicGradient()\f[R]
