.\" Automatically generated by Pandoc 3.4
.\"
.TH "SVGTransform.matrix" "JS" "December 31, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SVGTransform.matrix \- SVGTransform: matrix property
.SH SYNOPSIS
The \f[B]\f[CB]matrix\f[B]\f[R] read\-only property of the
\f[CR]SVGTransform\f[R] interface represents the transformation matrix
that corresponds to the transformation \f[CR]type\f[R].
.PP
In case the \f[CR]matrix\f[R] object is changed directly (i.e., without
using the methods on the \f[CR]SVGTransform\f[R] interface itself) then
the \f[CR]type\f[R] of the \f[CR]SVGTransform\f[R] changes to
\f[CR]SVG_TRANSFORM_MATRIX\f[R].
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_MATRIX\f[R], the matrix contains the a, b, c, d,
e, f values supplied by the user.
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_TRANSLATE\f[R], e and f represent the
translation amounts (a=1, b=0, c=0 and d=1).
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_SCALE\f[R], a and d represent the scale amounts
(b=0, c=0, e=0 and f=0).
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_SKEWX\f[R] and \f[CR]SVG_TRANSFORM_SKEWY\f[R],
a, b, c and d represent the matrix which will result in the given skew
(e=0 and f=0).
.IP \[bu] 2
For \f[CR]SVG_TRANSFORM_ROTATE\f[R], a, b, c, d, e and f together
represent the matrix which will result in the given rotation.
When the rotation is around the center point (0, 0), e and f will be
zero.
.SH VALUE
A live \f[CR]DOMMatrix\f[R] object.
.SH EXAMPLES
.SS Accessing and Modifying the Matrix
.IP
.EX
<\f[B]svg\f[R] width=\[dq]200\[dq] height=\[dq]200\[dq] xmlns=\[dq]http://www.w3.org/2000/svg\[dq]>
  <\f[B]rect\f[R] id=\[dq]rect\[dq] x=\[dq]50\[dq] y=\[dq]50\[dq] width=\[dq]100\[dq] height=\[dq]100\[dq] fill=\[dq]red\[dq] />
</\f[B]svg\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] rect = document.getElementById(\[dq]rect\[dq]);
\f[B]const\f[R] transformList = rect.transform.baseVal;

\f[I]// Create and add a rotation transform\f[R]
\f[B]const\f[R] rotateTransform = rect.ownerSVGElement.createSVGTransform();
rotateTransform.setRotate(30, 100, 100); \f[I]// Rotate 30 degrees\f[R]
transformList.appendItem(rotateTransform);

\f[I]// Access the matrix\f[R]
\f[B]const\f[R] matrix = transformList.getItem(0).matrix;
console.log(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);

\f[I]// Modify the matrix directly\f[R]
matrix.a = 2; \f[I]// Double the horizontal scaling\f[R]
console.log(transformList.getItem(0).type); \f[I]// Output: 1 (SVG_TRANSFORM_MATRIX)\f[R]
.EE
.SS Understanding Transformation Types
.IP
.EX
<\f[B]svg\f[R] width=\[dq]200\[dq] height=\[dq]200\[dq] xmlns=\[dq]http://www.w3.org/2000/svg\[dq]>
  <\f[B]rect\f[R] id=\[dq]rect\[dq] x=\[dq]50\[dq] y=\[dq]50\[dq] width=\[dq]100\[dq] height=\[dq]100\[dq] fill=\[dq]blue\[dq] />
</\f[B]svg\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] rect = document.getElementById(\[dq]rect\[dq]);
\f[B]const\f[R] transformList = rect.transform.baseVal;

\f[I]// Apply a translation transform\f[R]
\f[B]const\f[R] translateTransform = rect.ownerSVGElement.createSVGTransform();
translateTransform.setTranslate(20, 30);
transformList.appendItem(translateTransform);

\f[I]// Access the matrix\f[R]
\f[B]const\f[R] matrix = transformList.getItem(0).matrix;
console.log(matrix.e, matrix.f); \f[I]// Output: 20, 30\f[R]
console.log(transformList.getItem(0).type); \f[I]// Output: 2 (SVG_TRANSFORM_TRANSLATE)\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]SVGTransform.type\f[R]
.IP \[bu] 2
\f[CR]DOMMatrix\f[R]
