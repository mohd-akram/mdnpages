.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "AudioWorkletNode" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioWorkletNode \- AudioWorkletNode
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.RS
.PP
\f[B]Note:\f[R] Although the interface is available outside secure
contexts, the \f[CR]BaseAudioContext.audioWorklet\f[R] property is not,
thus custom \f[CR]AudioWorkletProcessor\f[R]s cannot be defined outside
them.
.RE
.PP
The \f[B]\f[CB]AudioWorkletNode\f[B]\f[R] interface of the Web Audio API
represents a base class for a user\-defined \f[CR]AudioNode\f[R], which
can be connected to an audio routing graph along with other nodes.
It has an associated \f[CR]AudioWorkletProcessor\f[R], which does the
actual audio processing in a Web Audio rendering thread.
.SH CONSTRUCTOR
.TP
\f[B]AudioWorkletNode()\f[R]
Creates a new instance of an \f[CR]AudioWorkletNode\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]Also Inherits properties from its parent,
\f[CI]AudioNode\f[I]\f[R].
.TP
\f[B]AudioWorkletNode.port\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]MessagePort\f[R] used for bidirectional communication
between the node and its associated \f[CR]AudioWorkletProcessor\f[R].
The other end is available under the \f[CR]port\f[R] property of the
processor.
.TP
\f[B]AudioWorkletNode.parameters\f[R] \f[I](read\-only)\f[R]
Returns an \f[CR]AudioParamMap\f[R] \[em] a collection of
\f[CR]AudioParam\f[R] objects.
They are instantiated during the creation of the underlying
\f[CR]AudioWorkletProcessor\f[R].
If the \f[CR]AudioWorkletProcessor\f[R] has a static
\f[CR]parameterDescriptors\f[R] getter, the
\f[CR]AudioParamDescriptor\f[R] array returned from it is used to create
\f[CR]AudioParam\f[R] objects on the \f[CR]AudioWorkletNode\f[R].
With this mechanism it is possible to make your own
\f[CR]AudioParam\f[R] objects accessible from your
\f[CR]AudioWorkletNode\f[R].
You can then use their values in the associated
\f[CR]AudioWorkletProcessor\f[R].
.SS Events
.TP
\f[B]processorerror\f[R]
Fired when an error is thrown in associated
\f[CR]AudioWorkletProcessor\f[R].
Once fired, the processor and consequently the node will output silence
throughout its lifetime.
.SH INSTANCE METHODS
\f[I]Also inherits methods from its parent, \f[CI]AudioNode\f[I]\f[R].
.PP
\f[I]The \f[CI]AudioWorkletNode\f[I] interface does not define any
methods of its own.\f[R]
.SH EXAMPLES
In this example we create a custom \f[CR]AudioWorkletNode\f[R] that
outputs random noise.
.PP
First, we need to define a custom \f[CR]AudioWorkletProcessor\f[R],
which will output random noise, and register it.
Note that this should be done in a separate file.
.IP
.EX
\f[I]// random\-noise\-processor.js\f[R]
\f[B]class\f[R] RandomNoiseProcessor \f[B]extends\f[R] AudioWorkletProcessor {
  process(inputs, outputs, parameters) {
    \f[B]const\f[R] output = outputs[0];
    output.forEach((channel) \f[B]=>\f[R] {
      \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < channel.length; i++) {
        channel[i] = Math.random() * 2 \- 1;
      }
    });
    \f[B]return\f[R] \f[B]true\f[R];
  }
}

registerProcessor(\[dq]random\-noise\-processor\[dq], RandomNoiseProcessor);
.EE
.PP
Next, in our main script file we\[cq]ll load the processor, create an
instance of \f[CR]AudioWorkletNode\f[R] passing it the name of the
processor, and connect the node to an audio graph.
.IP
.EX
\f[B]const\f[R] audioContext = \f[B]new\f[R] AudioContext();
\f[B]await\f[R] audioContext.audioWorklet.addModule(\[dq]random\-noise\-processor.js\[dq]);
\f[B]const\f[R] randomNoiseNode = \f[B]new\f[R] AudioWorkletNode(
  audioContext,
  \[dq]random\-noise\-processor\[dq],
);
randomNoiseNode.connect(audioContext.destination);
.EE
.SH SEE ALSO
.IP \[bu] 2
Web Audio API
.IP \[bu] 2
Using the Web Audio API
.IP \[bu] 2
Using AudioWorklet
