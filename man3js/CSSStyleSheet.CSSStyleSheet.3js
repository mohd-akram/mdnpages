.\" Automatically generated by Pandoc 3.4
.\"
.TH "CSSStyleSheet.CSSStyleSheet" "JS" "October 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSSStyleSheet.CSSStyleSheet \- CSSStyleSheet: CSSStyleSheet()
constructor
.SH SYNOPSIS
The \f[B]\f[CB]CSSStyleSheet()\f[B]\f[R] constructor creates a new
\f[CR]CSSStyleSheet\f[R] object which represents a single Stylesheet.
.PP
After constructing a stylesheet the \f[CR]CSSStyleSheet.replace()\f[R],
\f[CR]CSSStyleSheet.replaceSync()\f[R],
\f[CR]CSSStyleSheet.insertRule()\f[R], and
\f[CR]CSSStyleSheet.deleteRule()\f[R] methods can be used to modify the
rules of the new stylesheet.
.PP
A stylesheet created using this method is referred to as a
\[lq]constructed stylesheet\[rq].
A constructed stylesheet can be shared between a document and its shadow
DOM subtrees using \f[CR]ShadowRoot.adoptedStyleSheets\f[R] and
\f[CR]Document.adoptedStyleSheets\f[R].
.SH SYNTAX
.IP
.EX
new CSSStyleSheet()
new CSSStyleSheet(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing the following:
.RS
.TP
\f[B]baseURL\f[R] \f[I](optional)\f[R]
A string containing the \f[CR]baseURL\f[R] used to resolve relative URLs
in the stylesheet.
.TP
\f[B]media\f[R] \f[I](optional)\f[R]
A \f[CR]MediaList\f[R] containing a list of media rules, or a string
containing a single rule.
.TP
\f[B]disabled\f[R] \f[I](optional)\f[R]
A \f[CR]Boolean\f[R] indicating whether the stylesheet is disabled.
False by default.
.RE
.SH EXAMPLES
In the following example, a new \f[CR]CSSStyleSheet\f[R] is constructed
with a media rule of \f[CR]\[dq]print\[dq]\f[R].
Printing \f[CR]StyleSheet.media\f[R] to the console returns a
\f[CR]MediaList\f[R] with a single entry for this print rule.
.IP
.EX
\f[B]let\f[R] stylesheet = \f[B]new\f[R] CSSStyleSheet({ media: \[dq]print\[dq] });
console.log(stylesheet.media);
.EE
.SS Sharing stylesheets with a shadow DOM
The code below shows the sheet being constructed and then
\f[CR]CSSStyleSheet.replaceSync()\f[R] is called to add a rule to the
sheet.
.IP
.EX
\f[I]// Create an empty \[dq]constructed\[dq] stylesheet\f[R]
\f[B]const\f[R] sheet = \f[B]new\f[R] CSSStyleSheet();
\f[I]// Apply a rule to the sheet\f[R]
sheet.replaceSync(\[dq]a { color: red; }\[dq]);
.EE
.PP
We then create a \f[CR]ShadowRoot\f[R] and pass the sheet object to the
\f[CR]ShadowRoot.adoptedStyleSheets\f[R] property inside an array.
.IP
.EX
\f[I]// Create an element in the document and then create a shadow root:\f[R]
\f[B]const\f[R] node = document.createElement(\[dq]div\[dq]);
\f[B]const\f[R] shadow = node.attachShadow({ mode: \[dq]open\[dq] });

\f[I]//Adopt the sheet into the shadow DOM\f[R]
shadow.adoptedStyleSheets = [sheet];
.EE
.PP
We can modify the stylesheets after they have been added to the array.
Below we append a new rule to the same sheet using
\f[CR]CSSStyleSheet.insertRule()\f[R].
.IP
.EX
sheet.insertRule(\[dq]* { background\-color: blue; }\[dq]);
\f[I]// The document will now have blue background.\f[R]
.EE
.PP
The same sheet can be shared with multiple shadow subtrees in the same
document.
For more examples see \f[CR]ShadowRoot.adoptedStyleSheets\f[R].
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://web.dev/articles/constructable-stylesheets
Constructable Stylesheets
.UE \c
\ (web.dev)
.IP \[bu] 2
Using the Shadow DOM
.IP \[bu] 2
\c
.UR https://www.npmjs.com/package/construct-style-sheets-polyfill
construct\-style\-sheets\-polyfill
.UE \c
