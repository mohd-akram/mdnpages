.\" Automatically generated by Pandoc 3.4
.\"
.TH "MediaStreamTrack.applyConstraints" "JS" "May 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaStreamTrack.applyConstraints \- MediaStreamTrack:
applyConstraints() method
.SH SYNOPSIS
The \f[B]\f[CB]applyConstraints()\f[B]\f[R] method of the
\f[CR]MediaStreamTrack\f[R] interface applies a set of constraints to
the track; these constraints let the website or app establish ideal
values and acceptable ranges of values for the constrainable properties
of the track, such as frame rate, dimensions, echo cancellation, and so
forth.
.PP
Constraints can be used to ensure that the media meets certain
guidelines you prefer.
For example, you may prefer high\-density video but require that the
frame rate be a little low to help keep the data rate low enough not
overtax the network.
Constraints can also specify ideal and/or acceptable sizes or ranges of
sizes.
See Applying constraints in Capabilities, constraints, and settings for
more information on how to apply your preferred constraints.
.SH SYNTAX
.IP
.EX
applyConstraints()
applyConstraints(constraints)
.EE
.SS Parameters
.TP
\f[B]constraints\f[R] \f[I](optional)\f[R]
A \f[CR]MediaTrackConstraints\f[R] object listing the constraints to
apply to the track\[cq]s constrainable properties; any existing
constraints are replaced with the new values specified, and any
constrainable properties not included are restored to their default
constraints.
If this parameter is omitted, all currently set custom constraints are
cleared.
This object represents the basic set of constraints that must apply for
the \f[CR]Promise\f[R] to resolve.
The object may contain an advanced property containing an array of
additional \f[CR]MediaTrackConstraints\f[R] objects, which are treated
as exact requires.
.SS Return value
A \f[CR]Promise\f[R] which resolves when the constraints have been
successfully applied.
If the constraints cannot be applied, the promise is rejected with a
\f[CR]OverconstrainedError\f[R] that is a \f[CR]DOMException\f[R] whose
name is \f[CR]OverconstrainedError\f[R] with additional parameters, and,
to indicate that the constraints could not be met.
This can happen if the specified constraints are too strict to find a
match when attempting to configure the track.
.SH EXAMPLES
The following shows how to specify a basic and advanced set of
constraints.
It specifies that the page or web app needs a width between 640 and 1280
and a height between 480 and 720, with the later number in each pair
being preferred.
The advanced property further specifies that an image size of 1920 by
1280 is the preferred or an aspect ratio of 1.333 if that is not
available.
Note that these constraints also illustrate what the spec refers to as a
\f[I]backoff strategy\f[R].
.IP
.EX
\f[B]const\f[R] constraints = {
  width: { min: 640, ideal: 1280 },
  height: { min: 480, ideal: 720 },
  advanced: [{ width: 1920, height: 1280 }, { aspectRatio: 1.333 }],
};

navigator.mediaDevices.getUserMedia({ video: \f[B]true\f[R] }).then((mediaStream) \f[B]=>\f[R] {
  \f[B]const\f[R] track = mediaStream.getVideoTracks()[0];
  track
    .applyConstraints(constraints)
    .then(() \f[B]=>\f[R] {
      \f[I]// Do something with the track such as using the Image Capture API.\f[R]
    })
    .catch((e) \f[B]=>\f[R] {
      \f[I]// The constraints could not be satisfied by the available devices.\f[R]
    });
});
.EE
.SH SEE ALSO
.IP \[bu] 2
MediaStream Image Capture API
