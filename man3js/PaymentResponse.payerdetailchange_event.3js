.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PAYMENTRESPONSE.PAYERDETAILCHANGE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PaymentResponse.payerdetailchange_event \- PaymentResponse:
payerdetailchange event
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
A \f[B]\f[CB]payerdetailchange\f[B]\f[R] event is fired by the Payment
Request API to a \f[CR]PaymentResponse\f[R] object when the user makes
changes to their personal information while filling out a payment
request form.
This can happen when the payer is retrying to submit its details after
an error has been detected.
.PP
The event handler for \f[CR]payerdetailchange\f[R] should check each
value in the form that has changed and ensure that the values are valid.
If any are invalid, appropriate error messages should be configured and
the \f[CR]retry()\f[R] method should be called on the
\f[CR]PaymentResponse\f[R] to ask the user to update the invalid
entries.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqpayerdetailchange\(dq, (event) => { })

onpayerdetailchange = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]PaymentRequestUpdateEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
Although this event type is \f[CR]PaymentRequestUpdateEvent\f[R], it
doesn\(cqt implement any property that is not already on
\f[CR]Event\f[R].
.SH EXAMPLES
In the example below, \f[CR]onpayerdetailchange\f[R] is used to set up a
listener for the \f[CR]payerdetailchange\f[R] event in order to validate
the information entered by the user, requesting that any mistakes be
corrected
.IP
.EX
\f[I]// Options for PaymentRequest(), indicating that shipping address,\f[R]
\f[I]// payer email address, name, and phone number all be collected.\f[R]

\f[B]const\f[R] options = {
  requestShipping: \f[B]true\f[R],
  requestPayerEmail: \f[B]true\f[R],
  requestPayerName: \f[B]true\f[R],
  requestPayerPhone: \f[B]true\f[R],
};
\f[B]const\f[R] request = \f[B]new\f[R] PaymentRequest(methods, details, options);
\f[B]const\f[R] response = request.show();

\f[I]// Get the data from the response\f[R]

\f[B]let\f[R] {
  payerName: oldPayerName,
  payerEmail: oldPayerEmail,
  payerPhone: oldPayerPhone,
} = response;

\f[I]// Set up a handler for payerdetailchange events, to\f[R]
\f[I]// request corrections as needed.\f[R]

response.onpayerdetailchange = \f[B]async\f[R] (ev) \f[B]=>\f[R] {
  \f[B]const\f[R] promisesToValidate = [];
  \f[B]const\f[R] { payerName, payerEmail, payerPhone } = response;

  \f[I]// Validate each value which changed by calling a function\f[R]
  \f[I]// that validates each type of data, returning a promise which\f[R]
  \f[I]// resolves if the data is valid.\f[R]

  \f[B]if\f[R] (oldPayerName !== payerName) {
    promisesToValidate.push(validateName(payerName));
    oldPayerName = payerName;
  }
  \f[B]if\f[R] (oldPayerEmail !== payerEmail) {
    promisesToValidate.push(validateEmail(payerEmail));
    oldPayerEmail = payerEmail;
  }
  \f[B]if\f[R] (oldPayerPhone !== payerPhone) {
    promisesToValidate.push(validatePhone(payerPhone));
    oldPayerPhone = payerPhone;
  }

  \f[I]// As each validation promise resolves, add the results of the\f[R]
  \f[I]// validation to the errors list\f[R]

  \f[B]const\f[R] errors = \f[B]await\f[R] Promise.all(promisesToValidate).then((results) \f[B]=>\f[R]
    results.reduce((errors, result), Object.assign(errors, result)),
  );

  \f[I]// If we found any errors, wait for them to be corrected\f[R]

  \f[B]if\f[R] (Object.getOwnPropertyNames(errors).length) {
    \f[B]await\f[R] response.retry(errors);
  } \f[B]else\f[R] {
    \f[I]// We have a good payment; send the data to the server\f[R]
    \f[B]await\f[R] fetch(\(dq/pay\-for\-things/\(dq, { method: \(dqPOST\(dq, body: response.json() });
    response.complete(\(dqsuccess\(dq);
  }
};

\f[B]await\f[R] response.retry({
  payer: {
    email: \(dqinvalid domain.\(dq,
    phone: \(dqinvalid number.\(dq,
  },
});
.EE
.SS addEventListener equivalent
You could also set up the event handler using the
\f[CR]addEventListener()\f[R] method:
.IP
.EX
response.addEventListener(\(dqpayerdetailchange\(dq, \f[B]async\f[R] (ev) \f[B]=>\f[R] {
  \f[I]// \&...\f[R]
});
.EE
.SH SEE ALSO
.IP \(bu 2
Payment Request API
.IP \(bu 2
Using the Payment Request API
.IP \(bu 2
\f[CR]PaymentResponse\f[R]
.IP \(bu 2
\f[CR]paymentmethodchange\f[R]
.IP \(bu 2
\f[CR]shippingaddresschange\f[R]
.IP \(bu 2
\f[CR]shippingoptionchange\f[R]
