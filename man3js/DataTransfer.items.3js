.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATATRANSFER.ITEMS" "3JS" "June 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.items \- DataTransfer: items property
.SH SYNOPSIS
The read\-only \f[CR]items\f[R] property of the \f[CR]DataTransfer\f[R]
interface is a \f[CR]list\f[R] of the data transfer items in a drag
operation.
The list includes one item for each item in the operation and if the
operation had no items, the list is empty.
.SH VALUE
A \f[CR]DataTransferItemList\f[R] object containing
\f[CR]DataTransferItem\f[R] objects representing the items being dragged
in a drag operation, one list item for each object being dragged.
If the drag operation had no data, the list is empty.
.SH EXAMPLES
.SS Logging dragged items
This example uses \f[CR]items\f[R] to log information about dragged
items.
.SS HTML
.IP
.EX
<\f[B]ul\f[R]>
  <\f[B]li\f[R] id=\(dqsource1\(dq draggable=\(dqtrue\(dq>Drag Item 1 to the Drop Zone</\f[B]li\f[R]>
  <\f[B]li\f[R] id=\(dqsource2\(dq draggable=\(dqtrue\(dq>Drag Item 2 to the Drop Zone</\f[B]li\f[R]>
</\f[B]ul\f[R]>
<\f[B]div\f[R] id=\(dqtarget\(dq>Drop Zone</\f[B]div\f[R]>

<\f[B]button\f[R] id=\(dqreset\(dq>Reset</\f[B]button\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]margin\f[R]: 0em;
  \f[B]padding\f[R]: 2em;
}

target {
  \f[B]border\f[R]: 1px solid black;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]function\f[R] dragstartHandler(ev) {
  console.log(\(gadragstart: target.id = ${ev.target.id}\(ga);
  \f[I]// Add this element\(aqs id to the drag payload so the drop handler will\f[R]
  \f[I]// know which element to add to its tree\f[R]
  ev.dataTransfer.setData(\(dqtext/plain\(dq, ev.target.id);
  ev.dataTransfer.effectAllowed = \(dqmove\(dq;
}

\f[B]function\f[R] dropHandler(ev) {
  ev.preventDefault();
  \f[I]// Get the id of the target and add the moved element to the target\(aqs DOM\f[R]
  \f[B]const\f[R] data = ev.dataTransfer.getData(\(dqtext\(dq);
  ev.target.appendChild(document.getElementById(data));
  \f[I]// Print each item\(aqs \(dqkind\(dq and \(dqtype\(dq\f[R]
  \f[B]if\f[R] (ev.dataTransfer.items) {
    \f[B]for\f[R] (\f[B]const\f[R] item \f[B]of\f[R] ev.dataTransfer.items) {
      console.log(\(gakind = ${item.kind}, type = ${item.type}\(ga);
    }
  }
}

\f[B]function\f[R] dragoverHandler(ev) {
  ev.preventDefault();
  \f[I]// Set the dropEffect to move\f[R]
  ev.dataTransfer.dropEffect = \(dqmove\(dq;
}

\f[B]const\f[R] source1 = document.querySelector(\(dq#source1\(dq);
\f[B]const\f[R] source2 = document.querySelector(\(dq#source2\(dq);
\f[B]const\f[R] target = document.querySelector(\(dq#target\(dq);

source1.addEventListener(\(dqdragstart\(dq, dragstartHandler);
source2.addEventListener(\(dqdragstart\(dq, dragstartHandler);
target.addEventListener(\(dqdragover\(dq, dragoverHandler);
target.addEventListener(\(dqdrop\(dq, dropHandler);

\f[B]const\f[R] reset = document.querySelector(\(dq#reset\(dq);
reset.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] document.location.reload());
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
Drag and drop
.IP \(bu 2
Drag Operations
.IP \(bu 2
Recommended Drag Types
.IP \(bu 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
