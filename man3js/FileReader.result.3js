'\" t
.\" Automatically generated by Pandoc 3.4
.\"
.TH "FileReader.result" "JS" "March 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
FileReader.result \- FileReader: result property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]result\f[B]\f[R] read\-only property of the
\f[CR]FileReader\f[R] interface returns the file\[cq]s contents.
This property is only valid after the read operation is complete, and
the format of the data depends on which of the methods was used to
initiate the read operation.
.SH VALUE
An appropriate string or \f[CR]ArrayBuffer\f[R] based on which of the
reading methods was used to initiate the read operation.
The value is \f[CR]null\f[R] if the reading is not yet complete or was
unsuccessful.
.PP
The result types are described below.
.PP
.TS
tab(@);
l l.
T{
Method
T}@T{
Description
T}
_
T{
\[ga]readAsArrayBuffer()\[ga]
T}@T{
The \f[CR]result\f[R] is a JavaScript \[ga]ArrayBuffer\[ga] containing
binary data.
T}
T{
\[ga]readAsBinaryString()\[ga]
T}@T{
The \f[CR]result\f[R] contains the raw binary data from the file in a
string.
T}
T{
\[ga]readAsDataURL()\[ga]
T}@T{
The \f[CR]result\f[R] is a string with a \f[CR]data:\f[R] URL
representing the file\[aq]s data.
T}
T{
\[ga]readAsText()\[ga]
T}@T{
The \f[CR]result\f[R] is text in a string.
T}
.TE
.SH EXAMPLES
This example presents a function \f[CR]reader()\f[R] which reads a file
from a file input.
It works by creating a \f[CR]FileReader\f[R] object and creating a
listener for \f[CR]load\f[R] events, such that when then file is read,
the \f[CR]result\f[R] is obtained and passed to the callback function
provided to \f[CR]reader()\f[R].
.PP
The content is handled as raw text data.
.IP
.EX
\f[I]// Given this HTMLInputElement of type=\[dq]file\[dq]:\f[R]
\f[I]// <input id=\[dq]image\[dq] type=\[dq]file\[dq] accept=\[dq]image/*\[dq]>\f[R]

\f[B]function\f[R] reader(file, callback) {
  \f[B]const\f[R] fr = \f[B]new\f[R] FileReader();
  fr.onload = () \f[B]=>\f[R] callback(\f[B]null\f[R], fr.result);
  fr.onerror = (err) \f[B]=>\f[R] callback(err);
  fr.readAsDataURL(file);
}

document.querySelector(\[dq]#image\[dq]).addEventListener(\[dq]change\[dq], (evt) \f[B]=>\f[R] {
  \f[I]// No files, do nothing.\f[R]
  \f[B]if\f[R] (!evt.target.files) {
    \f[B]return\f[R];
  }
  reader(evt.target.files[0], (err, res) \f[B]=>\f[R] {
    console.log(res); \f[I]// Base64 \[ga]data:image/...\[ga] String result.\f[R]
  });
});
.EE
.PP
Given the asynchronous nature of \f[CR]FileReader\f[R], you could use a
Promise\-based approach.
Here\[cq]s an example for a file input with attribute
\f[CR]multiple\f[R] that returns a \f[CR]Promise\f[R].
.IP
.EX
\f[I]// Given this HTMLInputElement:\f[R]
\f[I]// <input id=\[dq]images\[dq] type=\[dq]file\[dq] accept=\[dq]image/*\[dq] multiple>\f[R]

\f[B]const\f[R] reader = (file) \f[B]=>\f[R]
  \f[B]new\f[R] Promise((resolve, reject) \f[B]=>\f[R] {
    \f[B]const\f[R] fr = \f[B]new\f[R] FileReader();
    fr.onload = () \f[B]=>\f[R] resolve(fr);
    fr.onerror = (err) \f[B]=>\f[R] reject(err);
    fr.readAsDataURL(file);
  });

\f[B]async\f[R] \f[B]function\f[R] logImagesData(fileList) {
  \f[B]let\f[R] fileResults = [];
  \f[B]const\f[R] frPromises = fileList.map(reader);

  \f[B]try\f[R] {
    fileResults = \f[B]await\f[R] Promise.all(frPromises);
  } \f[B]catch\f[R] (err) {
    \f[I]// In this specific case, Promise.all() might be preferred\f[R]
    \f[I]// over Promise.allSettled(), since it isn\[aq]t trivial to modify\f[R]
    \f[I]// a FileList to a subset of files of what the user initially\f[R]
    \f[I]// selected. Therefore, let\[aq]s just stash the entire operation.\f[R]
    console.error(err);
    \f[B]return\f[R];
  }

  fileResults.forEach((fr) \f[B]=>\f[R] {
    console.log(fr.result); \f[I]// Base64 \[ga]data:image/...\[ga] String result.\f[R]
  });
}

\f[I]// HTMLInputElement type=\[dq]file\[dq] Event handler:\f[R]
document.querySelector(\[dq]#images\[dq]).addEventListener(\[dq]change\[dq], (evt) \f[B]=>\f[R] {
  \f[I]// If no files, do nothing.\f[R]
  \f[B]if\f[R] (!evt.target.files) {
    \f[B]return\f[R];
  }
  logImagesData([...evt.target.files]);
});
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]FileReader\f[R]
