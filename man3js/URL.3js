.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "URL" "JS" "March 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
URL \- URL
.SH SYNOPSIS
This feature is available in Web Workers.
.PP
The \f[B]\f[CB]URL\f[B]\f[R] interface is used to parse, construct,
normalize, and encode URLs.
It works by providing properties which allow you to easily read and
modify the components of a URL.
.PP
You normally create a new \f[CR]URL\f[R] object by specifying the URL as
a string when calling its constructor, or by providing a relative URL
and a base URL.
You can then easily read the parsed components of the URL or make
changes to the URL.
.PP
If a browser doesn\[cq]t yet support the \f[CR]URL()\f[R] constructor,
you can access a URL object using the \f[CR]Window\f[R] interface\[cq]s
\f[CR]URL\f[R] property.
Be sure to check to see if any of your target browsers require this to
be prefixed.
.SH CONSTRUCTOR
.TP
\f[B]URL()\f[R]
Creates and returns a \f[CR]URL\f[R] object referencing the URL
specified using an absolute URL string, or a relative URL string and a
base URL string.
.SH INSTANCE PROPERTIES
.TP
\f[B]hash\f[R]
A string containing a \f[CR]\[aq]#\[aq]\f[R] followed by the fragment
identifier of the URL.
.TP
\f[B]host\f[R]
A string containing the domain (that is the \f[I]hostname\f[R]) followed
by (if a port was specified) a \f[CR]\[aq]:\[aq]\f[R] and the
\f[I]port\f[R] of the URL.
.TP
\f[B]hostname\f[R]
A string containing the domain of the URL.
.TP
\f[B]href\f[R]
A stringifier that returns a string containing the whole URL.
.TP
\f[B]origin\f[R] \f[I](read\-only)\f[R]
Returns a string containing the origin of the URL, that is its scheme,
its domain and its port.
.TP
\f[B]password\f[R]
A string containing the password specified before the domain name.
.TP
\f[B]pathname\f[R]
A string containing an initial \f[CR]\[aq]/\[aq]\f[R] followed by the
path of the URL, not including the query string or fragment.
.TP
\f[B]port\f[R]
A string containing the port number of the URL.
.TP
\f[B]protocol\f[R]
A string containing the protocol scheme of the URL, including the final
\f[CR]\[aq]:\[aq]\f[R].
.TP
\f[B]search\f[R]
A string indicating the URL\[cq]s parameter string; if any parameters
are provided, this string includes all of them, beginning with the
leading \f[CR]?\f[R] character.
.TP
\f[B]searchParams\f[R] \f[I](read\-only)\f[R]
A \f[CR]URLSearchParams\f[R] object which can be used to access the
individual query parameters found in \f[CR]search\f[R].
.TP
\f[B]username\f[R]
A string containing the username specified before the domain name.
.SH STATIC METHODS
.TP
\f[B]canParse()\f[R]
Returns a boolean indicating whether or not a URL defined from a URL
string and optional base URL string is parsable and valid.
.TP
\f[B]createObjectURL()\f[R]
Returns a string containing a unique blob URL, that is a URL with
\f[CR]blob:\f[R] as its scheme, followed by an opaque string uniquely
identifying the object in the browser.
.TP
\f[B]revokeObjectURL()\f[R]
Revokes an object URL previously created using
\f[CR]URL.createObjectURL()\f[R].
.SH INSTANCE METHODS
.TP
\f[B]toString()\f[R]
Returns a string containing the whole URL.
It is a synonym for \f[CR]URL.href\f[R], though it can\[cq]t be used to
modify the value.
.TP
\f[B]toJSON()\f[R]
Returns a string containing the whole URL.
It returns the same string as the \f[CR]href\f[R] property.
.SH USAGE NOTES
The constructor takes a \f[CR]url\f[R] parameter, and an optional
\f[CR]base\f[R] parameter to use as a base if the \f[CR]url\f[R]
parameter is a relative URL:
.IP
.EX
\f[B]const\f[R] url = \f[B]new\f[R] URL(\[dq]../cats\[dq], \[dq]http://www.example.com/dogs\[dq]);
console.log(url.hostname); \f[I]// \[dq]www.example.com\[dq]\f[R]
console.log(url.pathname); \f[I]// \[dq]/cats\[dq]\f[R]
.EE
.PP
The constructor will raise an exception if the URL cannot be parsed to a
valid URL.
You can either call the above code in a \f[CR]try...catch\f[R] block or
use the \f[CR]canParse()\f[R] static method to first check the URL is
valid:
.IP
.EX
\f[B]if\f[R] (URL.canParse(\[dq]../cats\[dq], \[dq]http://www.example.com/dogs\[dq])) {
  \f[B]const\f[R] url = \f[B]new\f[R] URL(\[dq]../cats\[dq], \[dq]http://www.example.com/dogs\[dq]);
  console.log(url.hostname); \f[I]// \[dq]www.example.com\[dq]\f[R]
  console.log(url.pathname); \f[I]// \[dq]/cats\[dq]\f[R]
} \f[B]else\f[R] {
  console.log(\[dq]Invalid URL\[dq]); \f[I]//Invalid URL\f[R]
}
.EE
.PP
URL properties can be set to construct the URL:
.IP
.EX
url.hash = \[dq]tabby\[dq];
console.log(url.href); \f[I]// \[dq]http://www.example.com/cats#tabby\[dq]\f[R]
.EE
.PP
URLs are encoded according to the rules found in RFC 3986.
For instance:
.IP
.EX
url.pathname = \[dq]démonstration.html\[dq];
console.log(url.href); \f[I]// \[dq]http://www.example.com/d%C3%A9monstration.html\[dq]\f[R]
.EE
.PP
The \f[CR]URLSearchParams\f[R] interface can be used to build and
manipulate the URL query string.
.PP
To get the search params from the current window\[cq]s URL, you can do
this:
.IP
.EX
\f[I]// https://some.site/?id=123\f[R]
\f[B]const\f[R] parsedUrl = \f[B]new\f[R] URL(window.location.href);
console.log(parsedUrl.searchParams.get(\[dq]id\[dq])); \f[I]// \[dq]123\[dq]\f[R]
.EE
.PP
The \f[CR]toString()\f[R] method of \f[CR]URL\f[R] just returns the
value of the \f[CR]href\f[R] property, so the constructor can be used to
normalize and encode a URL directly.
.IP
.EX
\f[B]const\f[R] response = \f[B]await\f[R] fetch(
  \f[B]new\f[R] URL(\[dq]http://www.example.com/démonstration.html\[dq]),
);
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#url-and-urlsearchparams
Polyfill of \f[CR]URL\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
URL API
.IP \[bu] 2
What is a URL?
.IP \[bu] 2
Property to obtain a \f[CR]URL\f[R] object: \f[CR]URL\f[R].
.IP \[bu] 2
\f[CR]URLSearchParams\f[R].
