.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "INTL.COLLATOR.COMPARE" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.Collator.compare \- Intl.Collator.prototype.compare()
.SH SYNOPSIS
The \f[B]\f[CB]compare()\f[B]\f[R] method of \f[CR]Intl.Collator\f[R]
instances compares two strings according to the sort order of this
collator object.
.IP
.EX
\f[B]const\f[R] enCollator = \f[B]new\f[R] Intl.Collator(\(dqen\(dq);
\f[B]const\f[R] deCollator = \f[B]new\f[R] Intl.Collator(\(dqde\(dq);
\f[B]const\f[R] svCollator = \f[B]new\f[R] Intl.Collator(\(dqsv\(dq);

console.log(enCollator.compare(\(dqz\(dq, \(dqa\(dq) > 0);
\f[I]// Expected output: true\f[R]

console.log(deCollator.compare(\(dqz\(dq, \(dqä\(dq) > 0);
\f[I]// Expected output: true\f[R]

console.log(svCollator.compare(\(dqz\(dq, \(dqä\(dq) > 0);
\f[I]// Expected output: false\f[R]
.EE
.SH SYNTAX
.IP
.EX
compare(string1, string2)
.EE
.SS Parameters
.TP
\f[B]string1\f[R], \f[B]string2\f[R]
The strings to compare against each other.
.SS Return value
A number indicating how \f[CR]string1\f[R] and \f[CR]string2\f[R]
compare to each other according to the sort order of this
\f[CR]Intl.Collator\f[R] object:
.IP \(bu 2
A negative value if \f[CR]string1\f[R] comes before \f[CR]string2\f[R];
.IP \(bu 2
A positive value if \f[CR]string1\f[R] comes after \f[CR]string2\f[R];
.IP \(bu 2
0 if they are considered equal.
.SH EXAMPLES
.SS Using compare for array sort
Use the \f[CR]compare\f[R] function for sorting arrays.
Note that the function is bound to the collator from which it was
obtained, so it can be passed directly to
\f[CR]Array.prototype.sort()\f[R].
.IP
.EX
\f[B]const\f[R] a = [\(dqOffenbach\(dq, \(dqÖsterreich\(dq, \(dqOdenwald\(dq];
\f[B]const\f[R] collator = \f[B]new\f[R] Intl.Collator(\(dqde\-u\-co\-phonebk\(dq);
a.sort(collator.compare);
console.log(a.join(\(dq, \(dq)); \f[I]// \(dqOdenwald, Österreich, Offenbach\(dq\f[R]
.EE
.SS Using compare for array search
Use the \f[CR]compare\f[R] function for finding matching strings in
arrays:
.IP
.EX
\f[B]const\f[R] a = [\(dqCongrès\(dq, \(dqcongres\(dq, \(dqAssemblée\(dq, \(dqpoisson\(dq];
\f[B]const\f[R] collator = \f[B]new\f[R] Intl.Collator(\(dqfr\(dq, {
  usage: \(dqsearch\(dq,
  sensitivity: \(dqbase\(dq,
});
\f[B]const\f[R] s = \(dqcongres\(dq;
\f[B]const\f[R] matches = a.filter((v) \f[B]=>\f[R] collator.compare(v, s) === 0);
console.log(matches.join(\(dq, \(dq)); \f[I]// \(dqCongrès, congres\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Intl.Collator\f[R]
.IP \(bu 2
\f[CR]String.prototype.localeCompare()\f[R]
