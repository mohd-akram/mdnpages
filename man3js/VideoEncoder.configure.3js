.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "VIDEOENCODER.CONFIGURE" "3JS" "May 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
VideoEncoder.configure \- VideoEncoder: configure() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Dedicated Web Workers.
.PP
The \f[B]\f[CB]configure()\f[B]\f[R] method of the
\f[CR]VideoEncoder\f[R] interface changes the \f[CR]state\f[R] of the
encoder to \(lqconfigured\(rq and asynchronously prepares the encoder to
accept \f[CR]VideoEncoder\f[R]s for encoding with the specified
parameters.
If the encoder doesn\(cqt support the specified parameters or can\(cqt
be initialized for other reasons an error will be reported via the error
callback provided to the \f[CR]VideoEncoder\f[R] constructor.
.PP
If the \f[CR]VideoEncoder\f[R] has been previously configured, the new
configuration will not be applied until all previous tasks have
completed.
.SH SYNTAX
.IP
.EX
configure(config)
.EE
.SS Parameters
.TP
\f[B]config\f[R]
A dictionary object containing the following members:
.RS
.TP
\f[B]codec\f[R]
A string containing a \c
.UR https://w3c.github.io/webcodecs/codec_registry.html#video-codec-registry
valid codec string
.UE \c
\&.
See \(lqcodecs\(rq parameter for details on codec string construction.
.TP
\f[B]width\f[R] \f[I](optional)\f[R]
An integer representing the width of each output
\f[CR]EncodedVideoChunk\f[R] in pixels, before any ratio adjustments.
.TP
\f[B]height\f[R] \f[I](optional)\f[R]
An integer representing the height of each output
\f[CR]EncodedVideoChunk\f[R] in pixels, before any ratio adjustments.
.TP
\f[B]displayWidth\f[R] \f[I](optional)\f[R]
An integer representing the intended display width of each output
\f[CR]EncodedVideoChunk\f[R] in pixels when displayed.
.TP
\f[B]displayHeight\f[R] \f[I](optional)\f[R]
An integer representing the vertical dimension of each output
\f[CR]EncodedVideoChunk\f[R] in pixels when displayed.
.TP
\f[B]hardwareAcceleration\f[R]
A hint that configures the hardware acceleration method of this codec.
One of:
.RS
.IP \(bu 2
\f[CR]\(dqno\-preference\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqprefer\-hardware\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqprefer\-software\(dq\f[R]
.RE
.TP
\f[B]bitrate\f[R]
An integer containing the average bitrate of the encoded video in units
of bits per second.
.TP
\f[B]framerate\f[R]
An integer containing the expected frame rate in frames per second.
.TP
\f[B]alpha\f[R]
A string indicating whether the alpha component of the
\f[CR]VideoFrame\f[R] inputs should be kept or discarded prior to
encoding.
One of:
.RS
.IP \(bu 2
\f[CR]\(dqdiscard\(dq\f[R] (default)
.IP \(bu 2
\f[CR]\(dqkeep\(dq\f[R]
.RE
.TP
\f[B]scalabilityMode\f[R]
A string containing an encoding scalability mode identifier as defined
in \c
.UR https://w3c.github.io/webrtc-svc/#scalabilitymodes*
WebRTC
.UE \c
\&.
.TP
\f[B]bitrateMode\f[R] \f[I](optional)\f[R]
A string containing a bitrate mode.
One of:
.RS
.TP
\f[B]\(dqconstant\(dq\f[R]
The encoder will target constant bitrate.
.TP
\f[B]\(dqvariable\(dq\f[R] (default)
The encoder will target a variable bitrate, allowing more space to be
used for complex signals and less space for less complex signals.
.TP
\f[B]\(dqquantizer\(dq\f[R]
The encoder will disregard the \f[CR]bitrate\f[R] option and instead it
will use codec\-specific quantizer values specified for each frame in
the \f[CR]options\f[R] parameter to \f[CR]VideoEncoder.encode()\f[R].
.RE
.TP
\f[B]latencyMode\f[R] \f[I](optional)\f[R]
A string containing a value that configures the latency behavior of this
codec.
One of:
.RS
.TP
\f[B]\(dqquality\(dq\f[R] (default)
The encoder should optimize for encoding quality.
.TP
\f[B]\(dqrealtime\(dq\f[R]
The encoder should optimize for low latency and may even drop frames to
honor \f[CR]framerate\f[R].
.RE
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the provided \f[CR]config\f[R] is invalid.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]state\f[R] is \f[CR]\(dqclosed\(dq\f[R].
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if the provided \f[CR]config\f[R] is valid but the user agent
cannot provide a codec that can decode this profile.
.SH EXAMPLES
The following example creates a new \f[CR]VideoEncoder\f[R] and
configures it with some of the available options.
.IP
.EX
\f[B]const\f[R] init = {
  output: handleChunk,
  error(e) {
    console.log(e.message);
  },
};

\f[B]let\f[R] config = {
  codec: \(dqvp8\(dq,
  width: 640,
  height: 480,
  bitrate: 2_000_000, \f[I]// 2 Mbps\f[R]
  framerate: 30,
};

\f[B]let\f[R] encoder = \f[B]new\f[R] VideoEncoder(init);
encoder.configure(config);
.EE
