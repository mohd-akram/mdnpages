'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.LENGTH" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.length \- String: length
.SH SYNOPSIS
The \f[B]\f[CB]length\f[B]\f[R] data property of a \f[CR]String\f[R]
value contains the length of the string in UTF\-16 code units.
.IP
.EX
\f[B]const\f[R] str = \(dqLife, the universe and everything. Answer:\(dq;

console.log(\(ga${str} ${str.length}\(ga);
\f[I]// Expected output: \(dqLife, the universe and everything. Answer: 42\(dq\f[R]
.EE
.SH VALUE
A non\-negative integer.
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
This property returns the number of code units in the string.
JavaScript uses UTF\-16 encoding, where each Unicode character may be
encoded as one or two code units, so it\(cqs possible for the value
returned by \f[CR]length\f[R] to not match the actual number of Unicode
characters in the string.
For common scripts like Latin, Cyrillic, wellknown CJK characters, etc.,
this should not be an issue, but if you are working with certain
scripts, such as emojis, \c
.UR https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols
mathematical symbols
.UE \c
, or obscure Chinese characters, you may need to account for the
difference between code units and characters.
.PP
The language specification requires strings to have a maximum length of
2\(ha53 \- 1 elements, which is the upper limit for precise integers.
However, a string with this length needs 16384TiB of storage, which
cannot fit in any reasonable device\(cqs memory, so implementations tend
to lower the threshold, which allows the string\(cqs length to be
conveniently stored in a 32\-bit integer.
.IP \(bu 2
In V8 (used by Chrome and Node), the maximum length is 2\(ha29 \- 24
(\(ti1GiB).
On 32\-bit systems, the maximum length is 2\(ha28 \- 16 (\(ti512MiB).
.IP \(bu 2
In Firefox, the maximum length is 2\(ha30 \- 2 (\(ti2GiB).
Before Firefox 65, the maximum length was 2\(ha28 \- 1 (\(ti512MiB).
.IP \(bu 2
In Safari, the maximum length is 2\(ha31 \- 1 (\(ti4GiB).
.PP
If you are working with large strings in other encodings (such as UTF\-8
files or blobs), note that when you load the data into a JS string, the
encoding always becomes UTF\-16.
The size of the string may be different from the size of the source
file.
.IP
.EX
\f[B]const\f[R] str1 = \(dqa\(dq.repeat(2 ** 29 \- 24); \f[I]// Success\f[R]
\f[B]const\f[R] str2 = \(dqa\(dq.repeat(2 ** 29 \- 23); \f[I]// RangeError: Invalid string length\f[R]

\f[B]const\f[R] buffer = \f[B]new\f[R] Uint8Array(2 ** 29 \- 24).fill(\(dqa\(dq.codePointAt(0)); \f[I]// This buffer is 512MiB in size\f[R]
\f[B]const\f[R] str = \f[B]new\f[R] TextDecoder().decode(buffer); \f[I]// This string is 1GiB in size\f[R]
.EE
.PP
For an empty string, \f[CR]length\f[R] is 0.
.PP
The static property \f[CR]String.length\f[R] is unrelated to the length
of strings.
It\(cqs the arity of the \f[CR]String\f[R] function (loosely, the number
of formal parameters it has), which is 1.
.PP
Since \f[CR]length\f[R] counts code units instead of characters, if you
want to get the number of characters, you can first split the string
with its iterator, which iterates by characters:
.IP
.EX
\f[B]function\f[R] getCharacterLength(str) {
  \f[I]// The string iterator that is used here iterates over characters,\f[R]
  \f[I]// not mere code units\f[R]
  \f[B]return\f[R] [...str].length;
}

console.log(getCharacterLength(\(dqA\(rsuD87E\(rsuDC04Z\(dq)); \f[I]// 3\f[R]
.EE
.PP
If you want to count characters by \f[I]grapheme clusters\f[R], use
\f[CR]Intl.Segmenter\f[R].
You can first pass the string you want to split to the
\f[CR]segment()\f[R] method, and then iterate over the returned
\f[CR]Segments\f[R] object to get the length:
.IP
.EX
\f[B]function\f[R] getGraphemeCount(str) {
  \f[B]const\f[R] segmenter = \f[B]new\f[R] Intl.Segmenter(\(dqen\-US\(dq, { granularity: \(dqgrapheme\(dq });
  \f[I]// The Segments object iterator that is used here iterates over characters in grapheme clusters,\f[R]
  \f[I]// which may consist of multiple Unicode characters\f[R]
  \f[B]return\f[R] [...segmenter.segment(str)].length;
}

console.log(getGraphemeCount(\(dqüë®‚Äçüë©‚Äçüëß‚Äçüëß\(dq)); \f[I]// 1\f[R]
.EE
.SH EXAMPLES
.SS Basic usage
.IP
.EX
\f[B]const\f[R] x = \(dqMozilla\(dq;
\f[B]const\f[R] empty = \(dq\(dq;

console.log(\(ga${x} is ${x.length} code units long\(ga);
\f[I]// Mozilla is 7 code units long\f[R]

console.log(\(gaThe empty string has a length of ${empty.length}\(ga);
\f[I]// The empty string has a length of 0\f[R]
.EE
.SS Strings with length not equal to the number of characters
.IP
.EX
\f[B]const\f[R] emoji = \(dqüòÑ\(dq;
console.log(emoji.length); \f[I]// 2\f[R]
console.log([...emoji].length); \f[I]// 1\f[R]
\f[B]const\f[R] adlam = \(dqû§≤û•ãû§£û§´\(dq;
console.log(adlam.length); \f[I]// 8\f[R]
console.log([...adlam].length); \f[I]// 4\f[R]
\f[B]const\f[R] formula = \(dq‚àÄùë•‚àà‚Ñù,ùë•¬≤‚â•0\(dq;
console.log(formula.length); \f[I]// 11\f[R]
console.log([...formula].length); \f[I]// 9\f[R]
.EE
.SS Assigning to length
Because string is a primitive, attempting to assign a value to a
string\(cqs \f[CR]length\f[R] property has no observable effect, and
will throw in strict mode.
.IP
.EX
\f[B]const\f[R] myString = \(dqbluebells\(dq;

myString.length = 4;
console.log(myString); \f[I]// \(dqbluebells\(dq\f[R]
console.log(myString.length); \f[I]// 9\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Array\f[R]: \f[CR]length\f[R]
