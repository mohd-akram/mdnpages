.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Proxy.Proxy.set" "JS" "April 5, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Proxy.Proxy.set \- handler.set()
.SH SYNOPSIS
The \f[B]\f[CB]handler.set()\f[B]\f[R] method is a trap for the
\f[CR][[Set]]\f[R] object internal method, which is used by operations
such as using property accessors to set a property\[cq]s value.
.SH SYNTAX
.IP
.EX
new Proxy(target, {
  set(target, property, value, receiver) {
  }
});
.EE
.SS Parameters
The following parameters are passed to the \f[CR]set()\f[R] method.
\f[CR]this\f[R] is bound to the handler.
.TP
\f[B]target\f[R]
The target object.
.TP
\f[B]property\f[R]
The name or \f[CR]Symbol\f[R] of the property to set.
.TP
\f[B]value\f[R]
The new value of the property to set.
.TP
\f[B]receiver\f[R]
The object to which the assignment was originally directed.
This is usually the proxy itself.
But a \f[CR]set()\f[R] handler can also be called indirectly, via the
prototype chain or various other ways.
.RS
.PP
For example, suppose a script does \f[CR]obj.name = \[dq]jen\[dq]\f[R],
and \f[CR]obj\f[R] is not a proxy, and has no own property
\f[CR].name\f[R], but it has a proxy on its prototype chain.
That proxy\[cq]s \f[CR]set()\f[R] handler will be called, and
\f[CR]obj\f[R] will be passed as the receiver.
.RE
.SS Return value
The \f[CR]set()\f[R] method should return a boolean value.
.IP \[bu] 2
Return \f[CR]true\f[R] to indicate that assignment succeeded.
.IP \[bu] 2
If the \f[CR]set()\f[R] method returns \f[CR]false\f[R], and the
assignment happened in strict\-mode code, a \f[CR]TypeError\f[R] will be
thrown.
.SH DESCRIPTION
.SS Interceptions
This trap can intercept these operations:
.IP \[bu] 2
Property assignment: \f[CR]proxy[foo] = bar\f[R] and
\f[CR]proxy.foo = bar\f[R]
.IP \[bu] 2
\f[CR]Reflect.set()\f[R]
.PP
Or any other operation that invokes the \f[CR][[Set]]\f[R] internal
method.
.SS Invariants
If the following invariants are violated, the trap throws a
\f[CR]TypeError\f[R] when invoked.
.IP \[bu] 2
Cannot change the value of a property to be different from the value of
the corresponding target object property if the corresponding target
object property is a non\-writable, non\-configurable data property.
.IP \[bu] 2
Cannot set the value of a property if the corresponding target object
property is a non\-configurable accessor property that has
\f[CR]undefined\f[R] as its \f[CR][[Set]]\f[R] attribute.
.IP \[bu] 2
In strict mode, a \f[CR]false\f[R] return value from the
\f[CR]set()\f[R] handler will throw a \f[CR]TypeError\f[R] exception.
.SH EXAMPLES
.SS Trap setting of a property value
The following code traps setting a property value.
.IP
.EX
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(
  {},
  {
    \f[B]set\f[R](target, prop, value, receiver) {
      target[prop] = value;
      console.log(\[ga]property set: ${prop} = ${value}\[ga]);
      \f[B]return\f[R] \f[B]true\f[R];
    },
  },
);

console.log(\[dq]a\[dq] \f[B]in\f[R] p); \f[I]// false\f[R]

p.a = 10; \f[I]// \[dq]property set: a = 10\[dq]\f[R]
console.log(\[dq]a\[dq] \f[B]in\f[R] p); \f[I]// true\f[R]
console.log(p.a); \f[I]// 10\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Proxy\f[R]
.IP \[bu] 2
\f[CR]Proxy()\f[R] constructor
.IP \[bu] 2
\f[CR]Reflect.set()\f[R]
