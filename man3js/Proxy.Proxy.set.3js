.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PROXY.PROXY.SET" "3JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Proxy.Proxy.set \- handler.set()
.SH SYNOPSIS
The \f[B]\f[CB]handler.set()\f[B]\f[R] method is a trap for the
\f[CR][[Set]]\f[R] object internal method, which is used by operations
such as using property accessors to set a property\(cqs value.
.IP
.EX
\f[B]const\f[R] monster1 = { eyeCount: 4 };

\f[B]const\f[R] handler1 = {
  \f[B]set\f[R](obj, prop, value) {
    \f[B]if\f[R] (prop === \(dqeyeCount\(dq && value % 2 !== 0) {
      console.log(\(dqMonsters must have an even number of eyes\(dq);
    } \f[B]else\f[R] {
      \f[B]return\f[R] Reflect.set(...\f[B]arguments\f[R]);
    }
  },
};

\f[B]const\f[R] proxy1 = \f[B]new\f[R] Proxy(monster1, handler1);

proxy1.eyeCount = 1;
\f[I]// Expected output: \(dqMonsters must have an even number of eyes\(dq\f[R]

console.log(proxy1.eyeCount);
\f[I]// Expected output: 4\f[R]

proxy1.eyeCount = 2;
console.log(proxy1.eyeCount);
\f[I]// Expected output: 2\f[R]
.EE
.SH SYNTAX
.IP
.EX
new Proxy(target, {
  set(target, property, value, receiver) {
  }
})
.EE
.SS Parameters
The following parameters are passed to the \f[CR]set()\f[R] method.
\f[CR]this\f[R] is bound to the handler.
.TP
\f[B]target\f[R]
The target object.
.TP
\f[B]property\f[R]
A string or \f[CR]Symbol\f[R] representing the property name.
.TP
\f[B]value\f[R]
The new value of the property to set.
.TP
\f[B]receiver\f[R]
The \f[CR]this\f[R] value for setters; see \f[CR]Reflect.set()\f[R].
This is usually either the proxy itself or an object that inherits from
the proxy.
.SS Return value
The \f[CR]set()\f[R] method must return a \f[CR]Boolean\f[R] indicating
whether or not the assignment succeeded.
Other values are coerced to booleans.
.PP
Many operations, including using property accessors in strict mode,
throw a \f[CR]TypeError\f[R] if the \f[CR][[Set]]\f[R] internal method
returns \f[CR]false\f[R].
.SH DESCRIPTION
.SS Interceptions
This trap can intercept these operations:
.IP \(bu 2
Property assignment: \f[CR]proxy[foo] = bar\f[R] and
\f[CR]proxy.foo = bar\f[R]
.IP \(bu 2
\f[CR]Reflect.set()\f[R]
.PP
Or any other operation that invokes the \f[CR][[Set]]\f[R] internal
method.
.SS Invariants
The proxy\(cqs \f[CR][[Set]]\f[R] internal method throws a
\f[CR]TypeError\f[R] if the handler definition violates one of the
following invariants:
.IP \(bu 2
Cannot change the value of a property to be different from the value of
the corresponding target object property, if the corresponding target
object property is a non\-writable, non\-configurable own data property.
That is, if \f[CR]Reflect.getOwnPropertyDescriptor()\f[R] returns
\f[CR]configurable: false, writable: false\f[R] for the property on
\f[CR]target\f[R], and \f[CR]value\f[R] is different from the
\f[CR]value\f[R] attribute in the \f[CR]target\f[R]\(cqs property
descriptor, then the trap must return a falsy value.
.IP \(bu 2
Cannot set the value of a property if the corresponding target object
property is a non\-configurable own accessor property that has an
undefined setter.
That is, if \f[CR]Reflect.getOwnPropertyDescriptor()\f[R] returns
\f[CR]configurable: false, set: undefined\f[R] for the property on
\f[CR]target\f[R], then the trap must return a falsy value.
.SH EXAMPLES
.SS Trap setting of a property value
The following code traps setting a property value.
.IP
.EX
\f[B]const\f[R] p = \f[B]new\f[R] Proxy(
  {},
  {
    \f[B]set\f[R](target, prop, value, receiver) {
      target[prop] = value;
      console.log(\(gaproperty set: ${prop} = ${value}\(ga);
      \f[B]return\f[R] \f[B]true\f[R];
    },
  },
);

console.log(\(dqa\(dq \f[B]in\f[R] p); \f[I]// false\f[R]

p.a = 10; \f[I]// \(dqproperty set: a = 10\(dq\f[R]
console.log(\(dqa\(dq \f[B]in\f[R] p); \f[I]// true\f[R]
console.log(p.a); \f[I]// 10\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Proxy\f[R]
.IP \(bu 2
\f[CR]Proxy()\f[R] constructor
.IP \(bu 2
\f[CR]Reflect.set()\f[R]
