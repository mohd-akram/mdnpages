.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "TrustedHTML" "JS" "May 13, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TrustedHTML \- TrustedHTML
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]TrustedHTML\f[B]\f[R] interface of the Trusted Types API
represents a string that a developer can insert into an injection sink
that will render it as HTML.
These objects are created via \f[CR]TrustedTypePolicy.createHTML()\f[R]
and therefore have no constructor.
.PP
The value of a \f[CR]TrustedHTML\f[R] object is set when the object is
created and cannot be changed by JavaScript as there is no setter
exposed.
.SH INSTANCE METHODS
.TP
\f[B]TrustedHTML.toJSON()\f[R]
Returns a JSON representation of the stored data.
.TP
\f[B]TrustedHTML.toString()\f[R]
A string containing the sanitized HTML.
.SH EXAMPLES
In the below example we create a policy that will create
\f[CR]TrustedHTML\f[R] objects using
\f[CR]TrustedTypePolicyFactory.createPolicy()\f[R].
We can then use \f[CR]TrustedTypePolicy.createHTML()\f[R] to create a
sanitized HTML string to be inserted into the document.
.PP
The sanitized value can then be used with \f[CR]Element.innerHTML\f[R]
to ensure that no new HTML elements can be injected.
.IP
.EX
<\f[B]div\f[R] id=\[dq]myDiv\[dq]></\f[B]div\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] escapeHTMLPolicy = trustedTypes.createPolicy(\[dq]myEscapePolicy\[dq], {
  createHTML: (string) \f[B]=>\f[R] string.replace(/</g, \[dq]&lt;\[dq]),
});

\f[B]let\f[R] el = document.getElementById(\[dq]myDiv\[dq]);
\f[B]const\f[R] escaped = escapeHTMLPolicy.createHTML(\[dq]<img src=x onerror=alert(1)>\[dq]);
console.log(escaped \f[B]instanceof\f[R] TrustedHTML); \f[I]// true\f[R]
el.innerHTML = escaped;
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://web.dev/articles/trusted-types
Prevent DOM\-based cross\-site scripting vulnerabilities with Trusted
Types
.UE \c
