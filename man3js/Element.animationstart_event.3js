.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.ANIMATIONSTART_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.animationstart_event \- Element: animationstart event
.SH SYNOPSIS
The \f[B]\f[CB]animationstart\f[B]\f[R] event is fired when a CSS
Animation has started.
If there is an \f[CR]animation\-delay\f[R], this event will fire once
the delay period has expired.
A negative delay will cause the event to fire with an
\f[CR]elapsedTime\f[R] equal to the absolute value of the delay (and,
correspondingly, the animation will begin playing at that time index
into the sequence).
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqanimationstart\(dq, (event) => { })

onanimationstart = (event) => { }
.EE
.SH EVENT TYPE
An \f[CR]AnimationEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Also inherits properties from its parent \f[CI]Event\f[I]\f[R].
.TP
\f[B]AnimationEvent.animationName\f[R] \f[I](read\-only)\f[R]
A string containing the value of the \f[CR]animation\-name\f[R] that
generated the animation.
.TP
\f[B]AnimationEvent.elapsedTime\f[R] \f[I](read\-only)\f[R]
A \f[CR]float\f[R] giving the amount of time the animation has been
running, in seconds, when this event fired, excluding any time the
animation was paused.
For an \f[CR]animationstart\f[R] event, \f[CR]elapsedTime\f[R] is
\f[CR]0.0\f[R] unless there was a negative value for
\f[CR]animation\-delay\f[R], in which case the event will be fired with
\f[CR]elapsedTime\f[R] containing \f[CR](\-1 * delay)\f[R].
.TP
\f[B]AnimationEvent.pseudoElement\f[R] \f[I](read\-only)\f[R]
A string, starting with \f[CR]\(aq::\(aq\f[R], containing the name of
the pseudo\-element the animation runs on.
If the animation doesn\(cqt run on a pseudo\-element but on the element,
an empty string: \f[CR]\(aq\(aq\f[R].
.SH EXAMPLES
This listens for the \f[CR]animationstart\f[R] event and logs a message
when it is fired:
.IP
.EX
\f[B]const\f[R] animated = document.querySelector(\(dq.animated\(dq);

animated.addEventListener(\(dqanimationstart\(dq, () \f[B]=>\f[R] {
  console.log(\(dqAnimation started\(dq);
});
.EE
.PP
The same, but using \f[CR]onanimationstart\f[R]:
.IP
.EX
\f[B]const\f[R] animated = document.querySelector(\(dq.animated\(dq);

animated.onanimationstart = () \f[B]=>\f[R] {
  console.log(\(dqAnimation started\(dq);
};
.EE
.SS Live example
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\(dqanimation\-example\(dq>
  <\f[B]div\f[R] class=\(dqcontainer\(dq>
    <\f[B]p\f[R] class=\(dqanimation\(dq>You chose a cold night to visit our planet.</\f[B]p\f[R]>
  </\f[B]div\f[R]>
  <\f[B]button\f[R] class=\(dqactivate\(dq type=\(dqbutton\(dq>Activate animation</\f[B]button\f[R]>
  <\f[B]div\f[R] class=\(dqevent\-log\(dq></\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
.IP
.EX
\&.container {
  \f[B]height\f[R]: 3rem;
}

\&.event\-log {
  \f[B]width\f[R]: 25rem;
  \f[B]height\f[R]: 2rem;
  \f[B]border\f[R]: 1px solid black;
  \f[B]margin\f[R]: 0.2rem;
  \f[B]padding\f[R]: 0.2rem;
}

\&.animation.active {
  \f[B]animation\-duration\f[R]: 2s;
  \f[B]animation\-name\f[R]: slide\-in;
  \f[B]animation\-iteration\-count\f[R]: 2;
}

\f[B]\(atkeyframes\f[R] slide\-in {
  from {
    \f[B]transform\f[R]: translateX(100%) scaleX(3);
  }
  to {
    \f[B]transform\f[R]: translateX(0) scaleX(1);
  }
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] animation = document.querySelector(\(dqp.animation\(dq);
\f[B]const\f[R] animationEventLog = document.querySelector(
  \(dq.animation\-example>.event\-log\(dq,
);
\f[B]const\f[R] applyAnimation = document.querySelector(
  \(dq.animation\-example>button.activate\(dq,
);
\f[B]let\f[R] iterationCount = 0;

animation.addEventListener(\(dqanimationstart\(dq, () \f[B]=>\f[R] {
  animationEventLog.textContent = \(ga${animationEventLog.textContent}\(aqanimation started\(aq \(ga;
});

animation.addEventListener(\(dqanimationiteration\(dq, () \f[B]=>\f[R] {
  iterationCount++;
  animationEventLog.textContent = \(ga${animationEventLog.textContent}\(aqanimation iterations: ${iterationCount}\(aq \(ga;
});

animation.addEventListener(\(dqanimationend\(dq, () \f[B]=>\f[R] {
  animationEventLog.textContent = \(ga${animationEventLog.textContent}\(aqanimation ended\(aq\(ga;
  animation.classList.remove(\(dqactive\(dq);
  applyAnimation.textContent = \(dqActivate animation\(dq;
});

animation.addEventListener(\(dqanimationcancel\(dq, () \f[B]=>\f[R] {
  animationEventLog.textContent = \(ga${animationEventLog.textContent}\(aqanimation canceled\(aq\(ga;
});

applyAnimation.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  animation.classList.toggle(\(dqactive\(dq);
  animationEventLog.textContent = \(dq\(dq;
  iterationCount = 0;
  \f[B]const\f[R] active = animation.classList.contains(\(dqactive\(dq);
  applyAnimation.textContent = active
    ? \(dqCancel animation\(dq
    : \(dqActivate animation\(dq;
});
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
CSS Animations
.IP \(bu 2
Using CSS Animations
.IP \(bu 2
\f[CR]AnimationEvent\f[R]
.IP \(bu 2
Related events: \f[CR]animationend\f[R], \f[CR]animationiteration\f[R],
\f[CR]animationcancel\f[R]
