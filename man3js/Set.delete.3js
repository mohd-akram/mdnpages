.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SET.DELETE" "3JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.delete \- Set.prototype.delete()
.SH SYNOPSIS
The \f[B]\f[CB]delete()\f[B]\f[R] method of \f[CR]Set\f[R] instances
removes a specified value from this set, if it is in the set.
.IP
.EX
\f[B]const\f[R] set1 = \f[B]new\f[R] Set();
set1.add({ x: 10, y: 20 }).add({ x: 20, y: 30 });

\f[I]// Delete any point with \(gax > 10\(ga.\f[R]
set1.forEach((point) \f[B]=>\f[R] {
  \f[B]if\f[R] (point.x > 10) {
    set1.delete(point);
  }
});

console.log(set1.size);
\f[I]// Expected output: 1\f[R]
.EE
.SH SYNTAX
.IP
.EX
setInstance.delete(value)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
The value to remove from \f[CR]Set\f[R].
.SS Return value
Returns \f[CR]true\f[R] if \f[CR]value\f[R] was already in
\f[CR]Set\f[R]; otherwise \f[CR]false\f[R].
.SH EXAMPLES
.SS Using the delete() method
.IP
.EX
\f[B]const\f[R] mySet = \f[B]new\f[R] Set();
mySet.add(\(dqfoo\(dq);

console.log(mySet.delete(\(dqbar\(dq)); \f[I]// false; no \(dqbar\(dq element found to be deleted.\f[R]
console.log(mySet.delete(\(dqfoo\(dq)); \f[I]// true; successfully removed.\f[R]

console.log(mySet.has(\(dqfoo\(dq)); \f[I]// false; the \(dqfoo\(dq element is no longer present.\f[R]
.EE
.SS Deleting an object from a set
Because objects are compared by reference, you have to delete them by
checking individual properties if you don\(cqt have a reference to the
original object.
.IP
.EX
\f[B]const\f[R] setObj = \f[B]new\f[R] Set(); \f[I]// Create a new set.\f[R]

setObj.add({ x: 10, y: 20 }); \f[I]// Add object in the set.\f[R]

setObj.add({ x: 20, y: 30 }); \f[I]// Add object in the set.\f[R]

\f[I]// Delete any point with \(gax > 10\(ga.\f[R]
setObj.forEach((point) \f[B]=>\f[R] {
  \f[B]if\f[R] (point.x > 10) {
    setObj.delete(point);
  }
});
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Set\f[R]
.IP \(bu 2
\f[CR]Set.prototype.clear()\f[R]
