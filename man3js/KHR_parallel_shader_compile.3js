.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "KHR_parallel_shader_compile" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
KHR_parallel_shader_compile \- KHR_parallel_shader_compile extension
.SH SYNOPSIS
The \f[B]\f[CB]KHR_parallel_shader_compile\f[B]\f[R] extension is part
of the WebGL API and enables a non\-blocking poll operation, so that
compile/link status availability (\f[CR]COMPLETION_STATUS_KHR\f[R]) can
be queried without potentially incurring stalls.
In other words you can check the status of your shaders compiling
without blocking the runtime.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.SH CONSTANTS
.TP
\f[B]ext.COMPLETION_STATUS_KHR\f[R]
A GLenum.
.SH EXAMPLES
Enable the extension:
.IP
.EX
\f[B]const\f[R] ext = gl.getExtension(\[dq]KHR_parallel_shader_compile\[dq]);
.EE
.PP
In general, best practice with or without the extension is:
.IP
.EX
\f[I]// Assuming lists of \[ga]shaders\[ga] and \[ga]programs\[ga]:\f[R]
\f[B]for\f[R] (\f[B]const\f[R] x \f[B]of\f[R] shaders) gl.compileShader(x); \f[I]// Never check compile status unless subsequent linking fails.\f[R]
\f[B]for\f[R] (\f[B]const\f[R] x \f[B]of\f[R] programs) gl.linkProgram(x);
.EE
.PP
With the extension, apps would be able to poll whether programs have
linked without janking, but these are likely to take the same total wall
time to link:
.IP
.EX
\f[I]// Generator yielding a progress ratio [0.0, 1.0].\f[R]
\f[I]// Without the extension, this will jank and only check one program per generation.\f[R]
\f[B]function\f[R]* linkingProgress(programs) {
  \f[B]const\f[R] ext = gl.getExtension(\[dq]KHR_parallel_shader_compile\[dq]);
  \f[B]let\f[R] todo = programs.slice();
  \f[B]while\f[R] (todo.length) {
    \f[B]if\f[R] (ext) {
      todo = todo.filter(
        (x) \f[B]=>\f[R] !gl.getProgramParameter(x, ext.COMPLETION_STATUS_KHR),
      );
    } \f[B]else\f[R] {
      \f[B]const\f[R] x = todo.pop();
      gl.getProgramParameter(x, gl.LINK_STATUS);
    }
    \f[B]if\f[R] (!todo.length) \f[B]return\f[R];
    \f[B]yield\f[R] 1.0 \- todo.length / programs.length;
  }
}
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
