.\" Automatically generated by Pandoc 3.4
.\"
.TH "Event.preventDefault" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Event.preventDefault \- Event: preventDefault() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]preventDefault()\f[B]\f[R] method of the \f[CR]Event\f[R]
interface tells the user agent that if the event does not get explicitly
handled, its default action should not be taken as it normally would be.
.PP
The event continues to propagate as usual, unless one of its event
listeners calls \f[CR]stopPropagation()\f[R] or
\f[CR]stopImmediatePropagation()\f[R], either of which terminates
propagation at once.
.PP
As noted below, calling \f[B]\f[CB]preventDefault()\f[B]\f[R] for a
non\-cancelable event, such as one dispatched via
\f[CR]EventTarget.dispatchEvent()\f[R], without specifying
\f[CR]cancelable: true\f[R] has no effect.
.PP
If a passive listener calls \f[CR]preventDefault()\f[R], nothing will
happen and a console warning may be generated.
.SH SYNTAX
.IP
.EX
event.preventDefault()
.EE
.SH EXAMPLES
.SS Blocking default click handling
Toggling a checkbox is the default action of clicking on a checkbox.
This example demonstrates how to prevent that from happening:
.SS JavaScript
.IP
.EX
\f[B]const\f[R] checkbox = document.querySelector(\[dq]#id\-checkbox\[dq]);

checkbox.addEventListener(\[dq]click\[dq], checkboxClick, \f[B]false\f[R]);

\f[B]function\f[R] checkboxClick(event) {
  \f[B]const\f[R] warn = \[dq]preventDefault() won\[aq]t let you check this!\[rs]n\[dq];
  document.getElementById(\[dq]output\-box\[dq]).innerText += warn;
  event.preventDefault();
}
.EE
.SS HTML
.IP
.EX
<\f[B]p\f[R]>Please click on the checkbox control.</\f[B]p\f[R]>

<\f[B]form\f[R]>
  <\f[B]label\f[R] for=\[dq]id\-checkbox\[dq]>Checkbox:</\f[B]label\f[R]>
  <\f[B]input\f[R] type=\[dq]checkbox\[dq] id=\[dq]id\-checkbox\[dq] />
</\f[B]form\f[R]>

<\f[B]div\f[R] id=\[dq]output\-box\[dq]></\f[B]div\f[R]>
.EE
.SS Result
.SS Stopping keystrokes from reaching an edit field
The following example demonstrates how invalid text input can be stopped
from reaching the input field with \f[CR]preventDefault()\f[R].
Nowadays, you should usually use native HTML form validation instead.
.SS HTML
The HTML form below captures user input.
Since we\[cq]re only interested in keystrokes, we\[cq]re disabling
\f[CR]autocomplete\f[R] to prevent the browser from filling in the input
field with cached values.
.IP
.EX
<\f[B]div\f[R] class=\[dq]container\[dq]>
  <\f[B]p\f[R]>Please enter your name using lowercase letters only.</\f[B]p\f[R]>

  <\f[B]form\f[R]>
    <\f[B]input\f[R] type=\[dq]text\[dq] id=\[dq]my\-textbox\[dq] autocomplete=\[dq]off\[dq] />
  </\f[B]form\f[R]>
</\f[B]div\f[R]>
.EE
.SS CSS
We use a little bit of CSS for the warning box we\[cq]ll draw when the
user presses an invalid key:
.IP
.EX
\&.warning {
  \f[B]border\f[R]: 2px solid #f39389;
  \f[B]border\-radius\f[R]: 2px;
  \f[B]padding\f[R]: 10px;
  \f[B]position\f[R]: absolute;
  \f[B]background\-color\f[R]: #fbd8d4;
  \f[B]color\f[R]: #3b3c40;
}
.EE
.SS JavaScript
And here\[cq]s the JavaScript code that does the job.
First, listen for \f[CR]keydown\f[R] events:
.IP
.EX
\f[B]const\f[R] myTextbox = document.getElementById(\[dq]my\-textbox\[dq]);
myTextbox.addEventListener(\[dq]keydown\[dq], checkName, \f[B]false\f[R]);
.EE
.PP
The \f[CR]checkName()\f[R] function, which looks at the pressed key and
decides whether to allow it:
.IP
.EX
\f[B]function\f[R] checkName(evt) {
  \f[B]const\f[R] key = evt.key;
  \f[B]const\f[R] lowerCaseAlphabet = \[dq]abcdefghijklmnopqrstuvwxyz\[dq];
  \f[B]if\f[R] (!lowerCaseAlphabet.includes(key)) {
    evt.preventDefault();
    displayWarning(\[ga]Please use lowercase letters only.\[rs]nKey pressed: ${key}\[rs]n\[ga]);
  }
}
.EE
.PP
The \f[CR]displayWarning()\f[R] function presents a notification of a
problem.
It\[cq]s not an elegant function but does the job for the purposes of
this example:
.IP
.EX
\f[B]let\f[R] warningTimeout;
\f[B]const\f[R] warningBox = document.createElement(\[dq]div\[dq]);
warningBox.className = \[dq]warning\[dq];

\f[B]function\f[R] displayWarning(msg) {
  warningBox.innerText = msg;

  \f[B]if\f[R] (document.body.contains(warningBox)) {
    clearTimeout(warningTimeout);
  } \f[B]else\f[R] {
    \f[I]// insert warningBox after myTextbox\f[R]
    myTextbox.parentNode.insertBefore(warningBox, myTextbox.nextSibling);
  }

  warningTimeout = setTimeout(() \f[B]=>\f[R] {
    warningBox.parentNode.removeChild(warningBox);
    warningTimeout = \-1;
  }, 2000);
}
.EE
.SS Result
.SH NOTES
Calling \f[CR]preventDefault()\f[R] during any stage of event flow
cancels the event, meaning that any default action normally taken by the
implementation as a result of the event will not occur.
.PP
You can use \f[CR]Event.cancelable\f[R] to check if the event is
cancelable.
Calling \f[CR]preventDefault()\f[R] for a non\-cancelable event has no
effect.
