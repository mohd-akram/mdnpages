.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Atomics.compareExchange" "JS" "December 29, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Atomics.compareExchange \- Atomics.compareExchange()
.SH SYNOPSIS
The \f[B]\f[CB]Atomics.compareExchange()\f[B]\f[R] static method
exchanges a given replacement value at a given position in the array, if
a given expected value equals the old value.
It returns the old value at that position whether it was equal to the
expected value or not.
This atomic operation guarantees that no other write happens until the
modified value is written back.
.SH SYNTAX
.IP
.EX
Atomics.compareExchange(typedArray, index, expectedValue, replacementValue)
.EE
.SS Parameters
.TP
\f[B]typedArray\f[R]
An integer typed array.
One of \f[CR]Int8Array\f[R], \f[CR]Uint8Array\f[R],
\f[CR]Int16Array\f[R], \f[CR]Uint16Array\f[R], \f[CR]Int32Array\f[R],
\f[CR]Uint32Array\f[R], \f[CR]BigInt64Array\f[R], or
\f[CR]BigUint64Array\f[R].
.TP
\f[B]index\f[R]
The position in the \f[CR]typedArray\f[R] to exchange a
\f[CR]replacementValue\f[R].
.TP
\f[B]expectedValue\f[R]
The value to check for equality.
.TP
\f[B]replacementValue\f[R]
The number to exchange.
.SS Return value
The old value at the given position (\f[CR]typedArray[index]\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]typedArray\f[R] is not one of the allowed integer types.
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]index\f[R] is out of bounds in the
\f[CR]typedArray\f[R].
.SH EXAMPLES
.SS Using compareExchange()
.IP
.EX
\f[B]const\f[R] sab = \f[B]new\f[R] SharedArrayBuffer(1024);
\f[B]const\f[R] ta = \f[B]new\f[R] Uint8Array(sab);
ta[0] = 7;

Atomics.compareExchange(ta, 0, 7, 12); \f[I]// returns 7, the old value\f[R]
Atomics.load(ta, 0); \f[I]// 12\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Atomics\f[R]
.IP \[bu] 2
\f[CR]Atomics.exchange()\f[R]
