.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "SpeechSynthesis" "JS" "November 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SpeechSynthesis \- SpeechSynthesis
.SH SYNOPSIS
The \f[B]\f[CB]SpeechSynthesis\f[B]\f[R] interface of the Web Speech API
is the controller interface for the speech service; this can be used to
retrieve information about the synthesis voices available on the device,
start and pause speech, and other commands besides.
.SH INSTANCE PROPERTIES
\f[I]\f[CI]SpeechSynthesis\f[I] also inherits properties from its parent
interface, \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]SpeechSynthesis.paused\f[R] \f[I](read\-only)\f[R]
A boolean value that returns \f[CR]true\f[R] if the
\f[CR]SpeechSynthesis\f[R] object is in a paused state.
.TP
\f[B]SpeechSynthesis.pending\f[R] \f[I](read\-only)\f[R]
A boolean value that returns \f[CR]true\f[R] if the utterance queue
contains as\-yet\-unspoken utterances.
.TP
\f[B]SpeechSynthesis.speaking\f[R] \f[I](read\-only)\f[R]
A boolean value that returns \f[CR]true\f[R] if an utterance is
currently in the process of being spoken \[em] even if
\f[CR]SpeechSynthesis\f[R] is in a paused state.
.SH INSTANCE METHODS
\f[I]\f[CI]SpeechSynthesis\f[I] also inherits methods from its parent
interface, \f[CI]EventTarget\f[I].\f[R]
.TP
\f[B]SpeechSynthesis.cancel()\f[R]
Removes all utterances from the utterance queue.
.TP
\f[B]SpeechSynthesis.getVoices()\f[R]
Returns a list of \f[CR]SpeechSynthesisVoice\f[R] objects representing
all the available voices on the current device.
.TP
\f[B]SpeechSynthesis.pause()\f[R]
Puts the \f[CR]SpeechSynthesis\f[R] object into a paused state.
.TP
\f[B]SpeechSynthesis.resume()\f[R]
Puts the \f[CR]SpeechSynthesis\f[R] object into a non\-paused state:
resumes it if it was already paused.
.TP
\f[B]SpeechSynthesis.speak()\f[R]
Adds an \f[CR]utterance\f[R] to the utterance queue; it will be spoken
when any other utterances queued before it have been spoken.
.SH EVENTS
Listen to this event using \f[CR]addEventListener()\f[R] or by assigning
an event listener to the \f[CR]oneventname\f[R] property of this
interface.
.TP
\f[B]voiceschanged\f[R]
Fired when the list of \f[CR]SpeechSynthesisVoice\f[R] objects that
would be returned by the \f[CR]SpeechSynthesis.getVoices()\f[R] method
has changed.
Also available via the \f[CR]onvoiceschanged\f[R] property.
.SH EXAMPLES
First, an example:
.IP
.EX
\f[B]let\f[R] utterance = \f[B]new\f[R] SpeechSynthesisUtterance(\[dq]Hello world!\[dq]);
speechSynthesis.speak(utterance);
.EE
.PP
Now we\[cq]ll look at a more fully\-fledged example.
In our \c
.UR https://github.com/mdn/dom-examples/tree/main/web-speech-api/speak-easy-synthesis
Speech synthesizer demo
.UE \c
, we first grab a reference to the SpeechSynthesis controller using
\f[CR]window.speechSynthesis\f[R].
After defining some necessary variables, we retrieve a list of the
voices available using \f[CR]SpeechSynthesis.getVoices()\f[R] and
populate a select menu with them so the user can choose what voice they
want.
.PP
Inside the \f[CR]inputForm.onsubmit\f[R] handler, we stop the form
submitting with preventDefault(), create a new
\f[CR]SpeechSynthesisUtterance\f[R] instance containing the text from
the text \f[CR]<input>\f[R], set the utterance\[cq]s voice to the voice
selected in the \f[CR]<select>\f[R] element, and start the utterance
speaking via the \f[CR]SpeechSynthesis.speak()\f[R] method.
.IP
.EX
\f[B]const\f[R] synth = window.speechSynthesis;

\f[B]const\f[R] inputForm = document.querySelector(\[dq]form\[dq]);
\f[B]const\f[R] inputTxt = document.querySelector(\[dq].txt\[dq]);
\f[B]const\f[R] voiceSelect = document.querySelector(\[dq]select\[dq]);
\f[B]const\f[R] pitch = document.querySelector(\[dq]#pitch\[dq]);
\f[B]const\f[R] pitchValue = document.querySelector(\[dq].pitch\-value\[dq]);
\f[B]const\f[R] rate = document.querySelector(\[dq]#rate\[dq]);
\f[B]const\f[R] rateValue = document.querySelector(\[dq].rate\-value\[dq]);

\f[B]let\f[R] voices = [];

\f[B]function\f[R] populateVoiceList() {
  voices = synth.getVoices();

  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < voices.length; i++) {
    \f[B]const\f[R] option = document.createElement(\[dq]option\[dq]);
    option.textContent = \[ga]${voices[i].name} (${voices[i].lang})\[ga];

    \f[B]if\f[R] (voices[i].default) {
      option.textContent += \[dq] \[em] DEFAULT\[dq];
    }

    option.setAttribute(\[dq]data\-lang\[dq], voices[i].lang);
    option.setAttribute(\[dq]data\-name\[dq], voices[i].name);
    voiceSelect.appendChild(option);
  }
}

populateVoiceList();
\f[B]if\f[R] (speechSynthesis.onvoiceschanged !== \f[B]undefined\f[R]) {
  speechSynthesis.onvoiceschanged = populateVoiceList;
}

inputForm.onsubmit = (event) \f[B]=>\f[R] {
  event.preventDefault();

  \f[B]const\f[R] utterThis = \f[B]new\f[R] SpeechSynthesisUtterance(inputTxt.value);
  \f[B]const\f[R] selectedOption =
    voiceSelect.selectedOptions[0].getAttribute(\[dq]data\-name\[dq]);
  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < voices.length; i++) {
    \f[B]if\f[R] (voices[i].name === selectedOption) {
      utterThis.voice = voices[i];
    }
  }
  utterThis.pitch = pitch.value;
  utterThis.rate = rate.value;
  synth.speak(utterThis);

  inputTxt.blur();
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Web Speech API
