.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CustomElementRegistry.define" "JS" "October 22, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CustomElementRegistry.define \- CustomElementRegistry: define() method
.SH SYNOPSIS
The \f[B]\f[CB]define()\f[B]\f[R] method of the
\f[CR]CustomElementRegistry\f[R] interface adds a definition for a
custom element to the custom element registry, mapping its name to the
constructor which will be used to create it.
.SH SYNTAX
.IP
.EX
define(name, constructor)
define(name, constructor, options)
.EE
.SS Parameters
.TP
\f[B]name\f[R]
Name for the new custom element.
Must be a valid custom element name.
.TP
\f[B]constructor\f[R]
Constructor for the new custom element.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
Object that controls how the element is defined.
One option is currently supported:
.RS
.TP
\f[B]extends\f[R]
String specifying the name of a built\-in element to extend.
Used to create a customized built\-in element.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if:
.RS
.IP \[bu] 2
The \f[CR]CustomElementRegistry\f[R] already contains an entry with the
same name or the same constructor (or is otherwise already defined).
.IP \[bu] 2
The extends option is specified and it is a valid custom element name
.IP \[bu] 2
The extends option is specified but the element it is trying to extend
is an unknown element.
.RE
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if the provided name is not a valid custom element name.
.TP
\f[B]TypeError\f[R]
Thrown if the referenced constructor is not a constructor.
.SH DESCRIPTION
The \f[CR]define()\f[R] method adds a definition for a custom element to
the custom element registry, mapping its name to the constructor which
will be used to create it.
.PP
There are two types of custom element you can create:
.IP \[bu] 2
\f[I]Autonomous custom elements\f[R] are standalone elements, that
don\[cq]t inherit from built\-in HTML elements.
.IP \[bu] 2
\f[I]Customized built\-in elements\f[R] are elements that inherit from,
and extend, built\-in HTML elements.
.PP
To define an autonomous custom element, you should omit the
\f[CR]options\f[R] parameter.
.PP
To define a customized built\-in element, you must pass the
\f[CR]options\f[R] parameter with its \f[CR]extends\f[R] property set to
the name of the built\-in element that you are extending, and this must
correspond to the interface that your custom element class definition
inherits from.
For example, to customize the \f[CR]<p>\f[R] element, you must pass
\f[CR]{extends: \[dq]p\[dq]}\f[R] to \f[CR]define()\f[R], and the class
definition for your element must inherit from
\f[CR]HTMLParagraphElement\f[R].
.SS Valid custom element names
Custom element names must:
.IP \[bu] 2
start with an ASCII lowercase letter (a\-z)
.IP \[bu] 2
contain a hyphen
.IP \[bu] 2
not contain any ASCII uppercase letters
.IP \[bu] 2
not contain certain other characters, as documented in the \c
.UR https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
valid custom element names
.UE \c
\ section of the Web Components specification
.IP \[bu] 2
not be any of:
.RS 2
.IP \[bu] 2
\[lq]annotation\-xml\[rq]
.IP \[bu] 2
\[lq]color\-profile\[rq]
.IP \[bu] 2
\[lq]font\-face\[rq]
.IP \[bu] 2
\[lq]font\-face\-src\[rq]
.IP \[bu] 2
\[lq]font\-face\-uri\[rq]
.IP \[bu] 2
\[lq]font\-face\-format\[rq]
.IP \[bu] 2
\[lq]font\-face\-name\[rq]
.IP \[bu] 2
\[lq]missing\-glyph\[rq]
.RE
.SH EXAMPLES
.SS Defining an autonomous custom element
The following class implements a minimal autonomous custom element:
.IP
.EX
\f[B]class\f[R] MyAutonomousElement \f[B]extends\f[R] HTMLElement {
  constructor() {
    \f[B]super\f[R]();
  }
}
.EE
.PP
This element doesn\[cq]t do anything: a real autonomous element would
implement its functionality in its constructor and in the lifecycle
callbacks provided by the standard.
See Implementing a custom element in our guide to working with custom
elements.
.PP
However, the above class definition satisfies the requirements of the
\f[CR]define()\f[R] method, so we can define it with the following code:
.IP
.EX
customElements.define(\[dq]my\-autonomous\-element\[dq], MyAutonomousElement);
.EE
.PP
We could then use it in an HTML page like this:
.IP
.EX
<\f[B]my\-autonomous\-element\f[R]>Element contents</\f[B]my\-autonomous\-element\f[R]>
.EE
.SS Defining a customized built\-in element
The following class implements a customized built\-in element:
.IP
.EX
\f[B]class\f[R] MyCustomizedBuiltInElement \f[B]extends\f[R] HTMLParagraphElement {
  constructor() {
    \f[B]super\f[R]();
  }
}
.EE
.PP
This element extends the built\-in \f[CR]<p>\f[R] element.
.PP
In this minimal example the element doesn\[cq]t implement any
customization, so it will behave just like a normal \f[CR]<p>\f[R]
element.
However, it does satisfy the requirements of \f[CR]define()\f[R], so we
can define it like this:
.IP
.EX
customElements.define(
  \[dq]my\-customized\-built\-in\-element\[dq],
  MyCustomizedBuiltInElement,
  {
    extends: \[dq]p\[dq],
  },
);
.EE
.PP
We could then use it in an HTML page like this:
.IP
.EX
<\f[B]p\f[R] is=\[dq]my\-customized\-built\-in\-element\[dq]></\f[B]p\f[R]>
.EE
.SH SEE ALSO
.IP \[bu] 2
Using custom elements
