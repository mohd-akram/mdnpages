.\" Automatically generated by Pandoc 3.4
.\"
.TH "PerformanceResourceTiming.requestStart" "JS" "October 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.requestStart \- PerformanceResourceTiming:
requestStart property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]requestStart\f[B]\f[R] read\-only property returns a
\f[CR]timestamp\f[R] of the time immediately before the browser starts
requesting the resource from the server, cache, or local resource.
If the transport connection fails and the browser retires the request,
the value returned will be the start of the retry request.
.PP
There is no \f[I]end\f[R] property for \f[CR]requestStart\f[R].
To measure the request time, calculate \f[CR]responseStart\f[R] \-
\f[CR]requestStart\f[R] (see the example below).
.SH VALUE
The \f[CR]requestStart\f[R] property can have the following values:
.IP \[bu] 2
A \f[CR]DOMHighResTimeStamp\f[R] representing the time immediately
before the browser starts requesting the resource from the server.
.IP \[bu] 2
\f[CR]0\f[R] if the resource was instantaneously retrieved from a cache.
.IP \[bu] 2
\f[CR]0\f[R] if the resource is a cross\-origin request and no
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header is used.
.SH EXAMPLES
.SS Measuring request time
The \f[CR]requestStart\f[R] and \f[CR]responseStart\f[R] properties can
be used to measure how long the request takes.
.IP
.EX
\f[B]const\f[R] request = entry.responseStart \- entry.requestStart;
.EE
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    \f[B]const\f[R] request = entry.responseStart \- entry.requestStart;
    \f[B]if\f[R] (request > 0) {
      console.log(\[ga]${entry.name}: Request time: ${request}ms\[ga]);
    }
  });
});

observer.observe({ type: \[dq]resource\[dq], buffered: \f[B]true\f[R] });
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]const\f[R] resources = performance.getEntriesByType(\[dq]resource\[dq]);
resources.forEach((entry) \f[B]=>\f[R] {
  \f[B]const\f[R] request = entry.responseStart \- entry.requestStart;
  \f[B]if\f[R] (request > 0) {
    console.log(\[ga]${entry.name}: Request time: ${request}ms\[ga]);
  }
});
.EE
.SS Cross\-origin timing information
If the value of the \f[CR]requestStart\f[R] property is \f[CR]0\f[R],
the resource might be a cross\-origin request.
To allow seeing cross\-origin timing information, the
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header needs to be set.
.PP
For example, to allow \f[CR]https://developer.mozilla.org\f[R] to see
timing resources, the cross\-origin resource should send:
.IP
.EX
Timing\-Allow\-Origin: https://developer.mozilla.org
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Timing\-Allow\-Origin\f[R]
