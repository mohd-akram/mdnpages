.\" Automatically generated by Pandoc 3.4
.\"
.TH "MediaStreamTrackProcessor" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaStreamTrackProcessor \- MediaStreamTrackProcessor
.SH SYNOPSIS
The \f[B]\f[CB]MediaStreamTrackProcessor\f[B]\f[R] interface of the
Insertable Streams for MediaStreamTrack API consumes a
\f[CR]MediaStreamTrack\f[R] object\[cq]s source and generates a stream
of media frames.
.SH CONSTRUCTOR
.TP
\f[B]MediaStreamTrackProcessor()\f[R]
Creates a new \f[CR]MediaStreamTrackProcessor\f[R] object.
.SH INSTANCE PROPERTIES
.TP
\f[B]MediaStreamTrackProcessor.readable\f[R]
Returns a \f[CR]ReadableStream\f[R].
.SH EXAMPLES
The following example is from the article \c
.UR https://developer.chrome.com/docs/capabilities/web-apis/mediastreamtrack-insertable-media-processing
Insertable streams for MediaStreamTrack
.UE \c
, and demonstrates a barcode scanner application, which transforms the
stream accessed via \f[CR]MediaStreamTrackProcessor.readable\f[R] by
highlighting the barcode.
.IP
.EX
\f[B]const\f[R] stream = \f[B]await\f[R] getUserMedia({ video: \f[B]true\f[R] });
\f[B]const\f[R] videoTrack = stream.getVideoTracks()[0];

\f[B]const\f[R] trackProcessor = \f[B]new\f[R] MediaStreamTrackProcessor({ track: videoTrack });
\f[B]const\f[R] trackGenerator = \f[B]new\f[R] MediaStreamTrackGenerator({ kind: \[dq]video\[dq] });

\f[B]const\f[R] transformer = \f[B]new\f[R] TransformStream({
  \f[B]async\f[R] transform(videoFrame, controller) {
    \f[B]const\f[R] barcodes = \f[B]await\f[R] detectBarcodes(videoFrame);
    \f[B]const\f[R] newFrame = highlightBarcodes(videoFrame, barcodes);
    videoFrame.close();
    controller.enqueue(newFrame);
  },
});

trackProcessor.readable
  .pipeThrough(transformer)
  .pipeTo(trackGenerator.writable);
.EE
