.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATATRANSFER.SETDATA" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataTransfer.setData \- DataTransfer: setData() method
.SH SYNOPSIS
The \f[B]\f[CB]DataTransfer.setData()\f[B]\f[R] method sets the drag
operation\(cqs drag data to the specified data and type.
If data for the given type does not exist, it is added at the end of the
drag data store, such that the last item in the \f[CR]types\f[R] list
will be the new type.
If data for the given type already exists, the existing data is replaced
in the same position.
That is, the order of the \f[CR]types\f[R] list is not changed when
replacing data of the same type.
.PP
Example data types are \f[CR]text/plain\f[R] and
\f[CR]text/uri\-list\f[R].
.SH SYNTAX
.IP
.EX
setData(format, data)
.EE
.SS Parameters
.TP
\f[B]format\f[R]
A string representing the type of the drag data to add to the
\f[CR]DataTransfer\f[R].
.TP
\f[B]data\f[R]
A string representing the data to add to the \f[CR]DataTransfer\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Dragging an element
In this example we can drag a \f[CR]<p>\f[R] element into a target
\f[CR]<div>\f[R] element.
.IP \(bu 2
In the \f[CR]dragstart\f[R] handler, we use \f[CR]setData()\f[R] to add
the \f[CR]id\f[R] of the \f[CR]<p>\f[R] element to the
\f[CR]DataTransfer\f[R] object.
.IP \(bu 2
In the \f[CR]drop\f[R] handler we retrieve the \f[CR]id\f[R] and use it
to move the \f[CR]<p>\f[R] element into the target.
.SS HTML
.IP
.EX
<\f[B]div\f[R]>
  <\f[B]p\f[R] id=\(dqsource\(dq draggable=\(dqtrue\(dq>
    Select this element, drag it to the drop zone and then release the selection
    to move the element.
  </\f[B]p\f[R]>
</\f[B]div\f[R]>
<\f[B]div\f[R] id=\(dqtarget\(dq>Drop Zone</\f[B]div\f[R]>

<\f[B]button\f[R] id=\(dqreset\(dq>Reset example</\f[B]button\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]margin\f[R]: 0.5em 0;
  \f[B]padding\f[R]: 2em;
}

target,
source {
  \f[B]border\f[R]: 1px solid black;
  \f[B]padding\f[R]: 0.5rem;
}

\&.dragging {
  \f[B]background\-color\f[R]: pink;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] source = document.querySelector(\(dq#source\(dq);
source.addEventListener(\(dqdragstart\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragStart\(dq);
  \f[I]// Change the source element\(aqs background color\f[R]
  \f[I]// to show that drag has started\f[R]
  ev.currentTarget.classList.add(\(dqdragging\(dq);
  \f[I]// Clear the drag data cache (for all formats/types)\f[R]
  ev.dataTransfer.clearData();
  \f[I]// Set the drag\(aqs format and data.\f[R]
  \f[I]// Use the event target\(aqs id for the data\f[R]
  ev.dataTransfer.setData(\(dqtext/plain\(dq, ev.target.id);
});
source.addEventListener(\(dqdragend\(dq, (ev) \f[B]=>\f[R]
  ev.target.classList.remove(\(dqdragging\(dq),
);

\f[B]const\f[R] target = document.querySelector(\(dq#target\(dq);
target.addEventListener(\(dqdragover\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqdragOver\(dq);
  ev.preventDefault();
});
target.addEventListener(\(dqdrop\(dq, (ev) \f[B]=>\f[R] {
  console.log(\(dqDrop\(dq);
  ev.preventDefault();
  \f[I]// Get the data, which is the id of the source element\f[R]
  \f[B]const\f[R] data = ev.dataTransfer.getData(\(dqtext\(dq);
  \f[B]const\f[R] source = document.getElementById(data);
  ev.target.appendChild(source);
});

\f[B]const\f[R] reset = document.querySelector(\(dq#reset\(dq);
reset.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] document.location.reload());
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
Drag and drop
.IP \(bu 2
Drag Operations
.IP \(bu 2
Recommended Drag Types
.IP \(bu 2
\c
.UR https://codepen.io/tech_query/pen/MqGgap
DataTransfer test \- Paste or Drag
.UE \c
