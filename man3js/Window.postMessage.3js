.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WINDOW.POSTMESSAGE" "3JS" "February 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.postMessage \- Window: postMessage() method
.SH SYNOPSIS
The \f[B]\f[CB]window.postMessage()\f[B]\f[R] method safely enables
cross\-origin communication between \f[CR]Window\f[R] objects;
\f[I]e.g.,\f[R] between a page and a pop\-up that it spawned, or between
a page and an iframe embedded within it.
.PP
Normally, scripts on different pages are allowed to access each other if
and only if the pages they originate from share the same origin (also
known as the \(lqsame\-origin policy\(rq).
\f[CR]window.postMessage()\f[R] provides a controlled mechanism to
securely circumvent this restriction (if used properly).
.PP
Furthermore, an accessing script must have obtained the window object of
the accessed document beforehand.
This can occur through methods such as \f[CR]window.open()\f[R] for
popups or \f[CR]iframe.contentWindow\f[R] for iframes.
.PP
Broadly, one window may obtain a reference to another (\f[I]e.g.,\f[R]
via \f[CR]targetWindow = window.opener\f[R]), and then dispatch a
\f[CR]MessageEvent\f[R] on it with
\f[CR]targetWindow.postMessage()\f[R].
The receiving window is then free to handle this event as needed.
The arguments passed to \f[CR]window.postMessage()\f[R] (\f[I]i.e.,\f[R]
the \(lqmessage\(rq) are exposed to the receiving window through the
event object.
.SH SYNTAX
.IP
.EX
postMessage(message)
postMessage(message, targetOrigin)
postMessage(message, targetOrigin, transfer)

postMessage(message, options)
.EE
.SS Parameters
.TP
\f[B]message\f[R]
Data to be dispatched to the other window.
The data is serialized using the structured clone algorithm.
This means you can pass a broad variety of data objects safely to the
destination window without having to serialize them yourself.
.TP
\f[B]targetOrigin\f[R] \f[I](optional)\f[R]
Specifies the origin the recipient window must have in order to receive
the event.
In order for the event to be dispatched, the origin must match exactly
(including scheme, hostname, and port).
If omitted, then defaults to the origin that is calling the method.
This mechanism provides control over where messages are sent; for
example, if \f[CR]postMessage()\f[R] was used to transmit a password, it
would be absolutely critical that this argument be a URI whose origin is
the same as the intended receiver of the message containing the
password, to prevent interception of the password by a malicious third
party.
\f[CR]*\f[R] may also be provided, which means the message can be
dispatched to a listener with any origin.
> \f[B]Note:\f[R] > Always provide a specific \f[CR]targetOrigin\f[R],
not \f[CR]*\f[R], if you know where the other window\(cqs document
should be located.
Failing to provide a specific target could disclose data to a malicious
site.
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
An optional array of transferable objects to transfer ownership of.
The ownership of these objects is given to the destination side and they
are no longer usable on the sending side.
These transferable objects should be attached to the message; otherwise
they would be moved but not actually accessible on the receiving end.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An optional object containing the following properties:
.RS
.TP
\f[B]transfer\f[R] \f[I](optional)\f[R]
Has the same meaning as the \f[CR]transfer\f[R] parameter.
.TP
\f[B]targetOrigin\f[R] \f[I](optional)\f[R]
Has the same meaning as the \f[CR]targetOrigin\f[R] parameter.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SH THE DISPATCHED EVENT
A \f[CR]window\f[R] can listen for dispatched messages by executing the
following JavaScript:
.IP
.EX
window.addEventListener(
  \(dqmessage\(dq,
  (event) \f[B]=>\f[R] {
    \f[B]if\f[R] (event.origin !== \(dqhttp://example.org:8080\(dq) \f[B]return\f[R];

    \f[I]// \&...\f[R]
  },
  \f[B]false\f[R],
);
.EE
.PP
The properties of the dispatched message are:
.TP
\f[B]data\f[R]
The object passed from the other window.
.TP
\f[B]origin\f[R]
The origin of the window that sent the message at the time
\f[CR]postMessage\f[R] was called.
This string is the concatenation of the protocol and \(lq://\(rq, the
host name if one exists, and \(lq:\(rq followed by a port number if a
port is present and differs from the default port for the given
protocol.
Examples of typical origins are \f[CR]https://example.org\f[R] (implying
port \f[CR]443\f[R]), \f[CR]http://example.net\f[R] (implying port
\f[CR]80\f[R]), and \f[CR]http://example.com:8080\f[R].
Note that this origin is \f[I]not\f[R] guaranteed to be the current or
future origin of that window, which might have been navigated to a
different location since \f[CR]postMessage\f[R] was called.
.TP
\f[B]source\f[R]
A reference to the \f[CR]window\f[R] object that sent the message; you
can use this to establish two\-way communication between two windows
with different origins.
.SH SECURITY CONCERNS
\f[B]If you do not expect to receive messages from other sites, \f[BI]do
not\f[B] add any event listeners for \f[CB]message\f[B] events.\f[R]
This is a completely foolproof way to avoid security problems.
.PP
If you do expect to receive messages from other sites, \f[B]always
verify the sender\(cqs identity\f[R] using the \f[CR]origin\f[R] and
possibly \f[CR]source\f[R] properties.
Any window (including, for example, \f[CR]http://evil.example.com\f[R])
can send a message to any other window within the iframe hierarchy from
top to every iframe below of the current document.
Having verified identity, however, you still should \f[B]always verify
the syntax of the received message\f[R].
Otherwise, a security hole in the site you trusted to send only trusted
messages could then open a cross\-site scripting hole in your site.
.PP
\f[B]Always specify an exact target origin, not \f[CB]*\f[B], when you
use \f[CB]postMessage\f[B] to dispatch data to other windows.\f[R] A
malicious site can change the location of the window without your
knowledge, and therefore it can intercept the data sent using
\f[CR]postMessage\f[R].
.SS Secure shared memory messaging
If \f[CR]postMessage()\f[R] throws when used with
\f[CR]SharedArrayBuffer\f[R] objects, you might need to make sure you
cross\-site isolated your site properly.
Shared memory is gated behind two HTTP headers:
.IP \(bu 2
\f[CR]Cross\-Origin\-Opener\-Policy\f[R] with \f[CR]same\-origin\f[R] as
value (protects your origin from attackers)
.IP \(bu 2
\f[CR]Cross\-Origin\-Embedder\-Policy\f[R] with \f[CR]require\-corp\f[R]
or \f[CR]credentialless\f[R] as value (protects victims from your
origin)
.IP
.EX
Cross\-Origin\-Opener\-Policy: same\-origin
Cross\-Origin\-Embedder\-Policy: require\-corp
.EE
.PP
To check if cross origin isolation has been successful, you can test
against the \f[CR]Window.crossOriginIsolated\f[R] property available to
window and worker contexts:
.IP
.EX
\f[B]const\f[R] myWorker = \f[B]new\f[R] Worker(\(dqworker.js\(dq);

\f[B]if\f[R] (crossOriginIsolated) {
  \f[B]const\f[R] buffer = \f[B]new\f[R] SharedArrayBuffer(16);
  myWorker.postMessage(buffer);
} \f[B]else\f[R] {
  \f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(16);
  myWorker.postMessage(buffer);
}
.EE
.SH EXAMPLES
.IP
.EX
\f[I]/*\f[R]
\f[I] * In window A\(aqs scripts, with A being on http://example.com:8080:\f[R]
\f[I] */\f[R]

\f[B]const\f[R] popup = window.open(\f[I]/* popup details */\f[R]);

\f[I]// When the popup has fully loaded, if not blocked by a popup blocker:\f[R]

\f[I]// This does nothing, assuming the window hasn\(aqt changed its location.\f[R]
popup.postMessage(
  \(dqThe user is \(aqbob\(aq and the password is \(aqsecret\(aq\(dq,
  \(dqhttps://secure.example.net\(dq,
);

\f[I]// This will successfully queue a message to be dispatched to the popup, assuming\f[R]
\f[I]// the window hasn\(aqt changed its location.\f[R]
popup.postMessage(\(dqhello there!\(dq, \(dqhttp://example.com\(dq);

window.addEventListener(
  \(dqmessage\(dq,
  (event) \f[B]=>\f[R] {
    \f[I]// Do we trust the sender of this message? (might be\f[R]
    \f[I]// different from what we originally opened, for example).\f[R]
    \f[B]if\f[R] (event.origin !== \(dqhttp://example.com\(dq) \f[B]return\f[R];

    \f[I]// event.source is popup\f[R]
    \f[I]// event.data is \(dqhi there yourself! the secret response is: rheeeeet!\(dq\f[R]
  },
  \f[B]false\f[R],
);
.EE
.IP
.EX
\f[I]/*\f[R]
\f[I] * In the popup\(aqs scripts, running on http://example.com:\f[R]
\f[I] */\f[R]

\f[I]// Called sometime after postMessage is called\f[R]
window.addEventListener(\(dqmessage\(dq, (event) \f[B]=>\f[R] {
  \f[I]// Do we trust the sender of this message?\f[R]
  \f[B]if\f[R] (event.origin !== \(dqhttp://example.com:8080\(dq) \f[B]return\f[R];

  \f[I]// event.source is window.opener\f[R]
  \f[I]// event.data is \(dqhello there!\(dq\f[R]

  \f[I]// Assuming you\(aqve verified the origin of the received message (which\f[R]
  \f[I]// you must do in any case), a convenient idiom for replying to a\f[R]
  \f[I]// message is to call postMessage on event.source and provide\f[R]
  \f[I]// event.origin as the targetOrigin.\f[R]
  event.source.postMessage(
    \(dqhi there yourself! the secret response \(dq + \(dqis: rheeeeet!\(dq,
    event.origin,
  );
});
.EE
.SS Notes
Any script in a document in a window can request to let a message get
dispatched to a document in another window whose window object it has
obtained, by calling \f[CR].postMessage()\f[R] on that window object.
Consequently, any event listener used to receive messages \f[B]must\f[R]
first check the identity of the sender of the message, using the
\f[CR]origin\f[R] and possibly \f[CR]source\f[R] properties.
This cannot be overstated: \f[B]Failure to check the \f[CB]origin\f[B]
and possibly \f[CB]source\f[B] properties enables cross\-site scripting
attacks.\f[R]
.PP
As with any asynchronously\-dispatched script (timeouts, user\-generated
events), it is not possible for the caller of \f[CR]postMessage\f[R] to
detect when an event handler listening for events sent by
\f[CR]postMessage\f[R] throws an exception.
.PP
After \f[CR]postMessage()\f[R] is called, the \f[CR]MessageEvent\f[R]
will be dispatched \f[I]only after all pending execution contexts have
finished\f[R].
For example, if \f[CR]postMessage()\f[R] is invoked in an event handler,
that event handler will run to completion, as will any remaining
handlers for that same event, before the \f[CR]MessageEvent\f[R] is
dispatched.
.PP
The value of the \f[CR]origin\f[R] property of the dispatched event is
not affected by the current value of \f[CR]document.domain\f[R] in the
calling window.
.PP
For IDN host names only, the value of the \f[CR]origin\f[R] property is
not consistently Unicode or punycode; for greatest compatibility check
for both the IDN and punycode values when using this property if you
expect messages from IDN sites.
This value will eventually be consistently IDN, but for now you should
handle both IDN and punycode forms.
.PP
The value of the \f[CR]origin\f[R] property when the sending window
contains a \f[CR]javascript:\f[R] or \f[CR]data:\f[R] URL is the origin
of the script that loaded the URL.
.SS Using window.postMessage in extensions \f[I](non\-standard)\f[R]
\f[CR]window.postMessage\f[R] is available to JavaScript running in
chrome code (e.g., in extensions and privileged code), but the
\f[CR]source\f[R] property of the dispatched event is always
\f[CR]null\f[R] as a security restriction.
(The other properties have their expected values.)
.PP
It is not possible for content or web context scripts to specify a
\f[CR]targetOrigin\f[R] to communicate directly with an extension
(either the background script or a content script).
Web or content scripts \f[I]can\f[R] use \f[CR]window.postMessage\f[R]
with a \f[CR]targetOrigin\f[R] of \f[CR]\(dq*\(dq\f[R] to broadcast to
every listener, but this is discouraged, since an extension cannot be
certain the origin of such messages, and other listeners (including
those you do not control) can listen in.
.PP
Content scripts should use \f[CR]runtime.sendMessage\f[R] to communicate
with the background script.
Web context scripts can use custom events to communicate with content
scripts (with randomly generated event names, if needed, to prevent
snooping from the guest page).
.PP
Lastly, dispatching a message to a page at a \f[CR]file:\f[R] URL
currently requires that the \f[CR]targetOrigin\f[R] argument be
\f[CR]\(dq*\(dq\f[R].
\f[CR]file://\f[R] cannot be used as a security restriction; this
restriction may be modified in the future.
.SH SEE ALSO
.IP \(bu 2
\f[CR]Document.domain\f[R]
.IP \(bu 2
\f[CR]CustomEvent\f[R]
.IP \(bu 2
\f[CR]BroadcastChannel\f[R] \- For same\-origin communication.
