.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBGL_DRAW_BUFFERS" "3JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WEBGL_draw_buffers \- WEBGL_draw_buffers extension
.SH SYNOPSIS
The \f[B]\f[CB]WEBGL_draw_buffers\f[B]\f[R] extension is part of the
WebGL API and enables a fragment shader to write to several textures,
which is useful for \c
.UR https://hacks.mozilla.org/2014/01/webgl-deferred-shading/
deferred shading
.UE \c
, for example.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] This extension is only available to WebGL1 contexts.
In WebGL2, the functionality of this extension is available on the
WebGL2 context by default.
In WebGL 2, the constants are available without the \(lqWEBGL\(rq suffix
and the new GLSL built\-ins require GLSL \f[CR]#version 300 es\f[R].
.RE
.SH CONSTANTS
This extension exposes new constants, which can be used in the
\f[CR]gl.framebufferRenderbuffer()\f[R],
\f[CR]gl.framebufferTexture2D()\f[R],
\f[CR]gl.getFramebufferAttachmentParameter()\f[R]
\f[CR]ext.drawBuffersWEBGL()\f[R], and \f[CR]gl.getParameter()\f[R]
methods.
.TP
\f[B]ext.COLOR_ATTACHMENT0_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT1_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT2_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT3_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT4_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT5_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT6_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT7_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT8_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT9_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT10_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT11_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT12_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT13_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT14_WEBGL\f[R], \f[B]ext.COLOR_ATTACHMENT15_WEBGL\f[R]
A \f[CR]GLenum\f[R] specifying a color buffer.
.TP
\f[B]ext.DRAW_BUFFER0_WEBGL\f[R], \f[B]ext.DRAW_BUFFER1_WEBGL\f[R], \f[B]ext.DRAW_BUFFER2_WEBGL\f[R], \f[B]ext.DRAW_BUFFER3_WEBGL\f[R], \f[B]ext.DRAW_BUFFER4_WEBGL\f[R], \f[B]ext.DRAW_BUFFER5_WEBGL\f[R], \f[B]ext.DRAW_BUFFER6_WEBGL\f[R], \f[B]ext.DRAW_BUFFER7_WEBGL\f[R], \f[B]ext.DRAW_BUFFER8_WEBGL ext.DRAW_BUFFER9_WEBGL\f[R], \f[B]ext.DRAW_BUFFER10_WEBGL\f[R], \f[B]ext.DRAW_BUFFER11_WEBGL\f[R], \f[B]ext.DRAW_BUFFER12_WEBGL\f[R], \f[B]ext.DRAW_BUFFER13_WEBGL\f[R], \f[B]ext.DRAW_BUFFER14_WEBGL\f[R], \f[B]ext.DRAW_BUFFER15_WEBGL\f[R]
A \f[CR]GLenum\f[R] returning a draw buffer.
.TP
\f[B]ext.MAX_COLOR_ATTACHMENTS_WEBGL\f[R]
A \f[CR]GLint\f[R] indicating the maximum number of framebuffer color
attachment points.
.TP
\f[B]ext.MAX_DRAW_BUFFERS_WEBGL\f[R]
A \f[CR]GLint\f[R] indicating the maximum number of draw buffers.
.SH INSTANCE METHODS
This extension exposes one new method.
.TP
\f[B]ext.drawBuffersWEBGL()\f[R]
Defines the draw buffers to which all fragment colors are written.
(When using \f[CR]WebGL2\f[R], this method is available as
\f[CR]gl.drawBuffers()\f[R] by default).
.SH EXAMPLES
Enabling the extension:
.IP
.EX
\f[B]const\f[R] ext = gl.getExtension(\(dqWEBGL_draw_buffers\(dq);
.EE
.PP
Binding multiple textures (to a \f[CR]tx[]\f[R] array) to different
framebuffer color attachments:
.IP
.EX
\f[B]const\f[R] fb = gl.createFramebuffer();
gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
gl.framebufferTexture2D(
  gl.FRAMEBUFFER,
  ext.COLOR_ATTACHMENT0_WEBGL,
  gl.TEXTURE_2D,
  tx[0],
  0,
);
gl.framebufferTexture2D(
  gl.FRAMEBUFFER,
  ext.COLOR_ATTACHMENT1_WEBGL,
  gl.TEXTURE_2D,
  tx[1],
  0,
);
gl.framebufferTexture2D(
  gl.FRAMEBUFFER,
  ext.COLOR_ATTACHMENT2_WEBGL,
  gl.TEXTURE_2D,
  tx[2],
  0,
);
gl.framebufferTexture2D(
  gl.FRAMEBUFFER,
  ext.COLOR_ATTACHMENT3_WEBGL,
  gl.TEXTURE_2D,
  tx[3],
  0,
);
.EE
.PP
Mapping the color attachments to draw buffer slots that the fragment
shader will write to using \f[CR]gl_FragData\f[R]:
.IP
.EX
ext.drawBuffersWEBGL([
  ext.COLOR_ATTACHMENT0_WEBGL, \f[I]// gl_FragData[0]\f[R]
  ext.COLOR_ATTACHMENT1_WEBGL, \f[I]// gl_FragData[1]\f[R]
  ext.COLOR_ATTACHMENT2_WEBGL, \f[I]// gl_FragData[2]\f[R]
  ext.COLOR_ATTACHMENT3_WEBGL, \f[I]// gl_FragData[3]\f[R]
]);
.EE
.PP
Shader code that writes to multiple textures:
.IP
.EX
<\f[B]script\f[R] type=\(dqx\-shader/x\-fragment\(dq>
  #extension GL_EXT_draw_buffers : require

  precision highp float;

  \f[B]void\f[R] main(\f[B]void\f[R]) {
    gl_FragData[0] = vec4(0.25);
    gl_FragData[1] = vec4(0.5);
    gl_FragData[2] = vec4(0.75);
    gl_FragData[3] = vec4(1.0);
  }
</\f[B]script\f[R]>
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
.IP \(bu 2
\f[CR]WebGL2RenderingContext.drawBuffers()\f[R]
.IP \(bu 2
\c
.UR https://hacks.mozilla.org/2014/01/webgl-deferred-shading/
WebGL deferred shading \- Mozilla Hacks blog
.UE \c
