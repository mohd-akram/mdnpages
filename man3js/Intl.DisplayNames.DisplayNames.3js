.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Intl.DisplayNames.DisplayNames" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.DisplayNames.DisplayNames \- Intl.DisplayNames() constructor
.SH SYNOPSIS
The \f[B]\f[CB]Intl.DisplayNames()\f[B]\f[R] constructor creates
\f[CR]Intl.DisplayNames\f[R] objects.
.IP
.EX
\f[B]const\f[R] regionNamesInEnglish = \f[B]new\f[R] Intl.DisplayNames([\[dq]en\[dq]], { type: \[dq]region\[dq] });
\f[B]const\f[R] regionNamesInTraditionalChinese = \f[B]new\f[R] Intl.DisplayNames([\[dq]zh\-Hant\[dq]], {
  type: \[dq]region\[dq],
});

console.log(regionNamesInEnglish.of(\[dq]US\[dq]));
\f[I]// Expected output: \[dq]United States\[dq]\f[R]

console.log(regionNamesInTraditionalChinese.of(\[dq]US\[dq]));
\f[I]// Expected output: \[dq]美國\[dq]\f[R]
.EE
.SH SYNTAX
.IP
.EX
new Intl.DisplayNames(locales, options)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]Intl.DisplayNames()\f[R] can only be constructed
with \f[CR]new\f[R].
Attempting to call it without \f[CR]new\f[R] throws a
\f[CR]TypeError\f[R].
.RE
.SS Parameters
.TP
\f[B]locales\f[R]
A string with a BCP 47 language tag or an \f[CR]Intl.Locale\f[R]
instance, or an array of such locale identifiers.
The runtime\[cq]s default locale is used when \f[CR]undefined\f[R] is
passed or when none of the specified locale identifiers is supported.
For the general form and interpretation of the \f[CR]locales\f[R]
argument, see the parameter description on the \f[CR]Intl\f[R] main
page.
.TP
\f[B]options\f[R]
An object containing the following properties, in the order they are
retrieved:
.RS
.TP
\f[B]localeMatcher\f[R] \f[I](optional)\f[R]
The locale matching algorithm to use.
Possible values are \f[CR]\[dq]lookup\[dq]\f[R] and
\f[CR]\[dq]best fit\[dq]\f[R]; the default is
\f[CR]\[dq]best fit\[dq]\f[R].
For information about this option, see Locale identification and
negotiation.
.TP
\f[B]style\f[R] \f[I](optional)\f[R]
The formatting style to use.
Possible values are \f[CR]\[dq]narrow\[dq]\f[R],
\f[CR]\[dq]short\[dq]\f[R], and \f[CR]\[dq]long\[dq]\f[R]; the default
is \f[CR]\[dq]long\[dq]\f[R].
.TP
\f[B]type\f[R]
The type of display names to return from \f[CR]of()\f[R].
Possible values are \f[CR]\[dq]language\[dq]\f[R],
\f[CR]\[dq]region\[dq]\f[R], \f[CR]\[dq]script\[dq]\f[R],
\f[CR]\[dq]currency\[dq]\f[R], \f[CR]\[dq]calendar\[dq]\f[R], and
\f[CR]\[dq]dateTimeField\[dq]\f[R].
.TP
\f[B]fallback\f[R] \f[I](optional)\f[R]
What to return from \f[CR]of()\f[R] if the input is structurally valid
but there\[cq]s no matching display name.
Possible values are:
.RS
.TP
\f[B]\[dq]code\[dq]\f[R] (default)
Return the input code itself.
.TP
\f[B]\[dq]none\[dq]\f[R]
Return \f[CR]undefined\f[R].
.RE
.TP
\f[B]languageDisplay\f[R] \f[I](optional)\f[R]
How language names should be displayed.
Only usable along with \f[CR]type: \[dq]language\[dq]\f[R].
Possible values are:
.RS
.TP
\f[B]\[dq]dialect\[dq]\f[R] (default)
Display special regional dialects using their own name.
E.g.
\f[CR]\[dq]nl\-BE\[dq]\f[R] will be displayed as
\f[CR]\[dq]Flemish\[dq]\f[R].
.TP
\f[B]\[dq]standard\[dq]\f[R]
Display all languages using standard format.
E.g.
\f[CR]\[dq]nl\-BE\[dq]\f[R] will be displayed as
\f[CR]\[dq]Dutch (Belgium)\[dq]\f[R].
.RE
.RE
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]options.type\f[R] is not provided.
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]locales\f[R] or \f[CR]options\f[R] contain invalid
values.
.SH EXAMPLES
.SS Basic usage
In basic use without specifying a locale, a formatted string in the
default locale and with default options is returned.
.IP
.EX
console.log(\f[B]new\f[R] Intl.DisplayNames([], { type: \[dq]language\[dq] }).of(\[dq]US\[dq]));
\f[I]// \[aq]us\[aq]\f[R]
.EE
.SS Using type \f[CR]dateTimeField\f[R]
Example using \f[CR]dateTimeField\f[R] as a type option, will return the
localized date time names strings.
.IP
.EX
\f[B]const\f[R] dn = \f[B]new\f[R] Intl.DisplayNames(\[dq]pt\[dq], { type: \[dq]dateTimeField\[dq] });
console.log(dn.of(\[dq]era\[dq])); \f[I]// \[aq]era\[aq]\f[R]
console.log(dn.of(\[dq]year\[dq])); \f[I]// \[aq]ano\[aq]\f[R]
console.log(dn.of(\[dq]month\[dq])); \f[I]// \[aq]mês\[aq]\f[R]
console.log(dn.of(\[dq]quarter\[dq])); \f[I]// \[aq]trimestre\[aq]\f[R]
console.log(dn.of(\[dq]weekOfYear\[dq])); \f[I]// \[aq]semana\[aq]\f[R]
console.log(dn.of(\[dq]weekday\[dq])); \f[I]// \[aq]dia da semana\[aq]\f[R]
console.log(dn.of(\[dq]dayPeriod\[dq])); \f[I]// \[aq]AM/PM\[aq]\f[R]
console.log(dn.of(\[dq]day\[dq])); \f[I]// \[aq]dia\[aq]\f[R]
console.log(dn.of(\[dq]hour\[dq])); \f[I]// \[aq]hora\[aq]\f[R]
console.log(dn.of(\[dq]minute\[dq])); \f[I]// \[aq]minuto\[aq]\f[R]
console.log(dn.of(\[dq]second\[dq])); \f[I]// \[aq]segundo\[aq]\f[R]
.EE
.SS Using type \f[CR]calendar\f[R]
Example using \f[CR]calendar\f[R] as a type option, will return the
localized calendar names strings.
.IP
.EX
\f[B]const\f[R] dn = \f[B]new\f[R] Intl.DisplayNames(\[dq]en\[dq], { type: \[dq]calendar\[dq] });
console.log(dn.of(\[dq]roc\[dq])); \f[I]// \[aq]Minguo Calendar\[aq]\f[R]
console.log(dn.of(\[dq]gregory\[dq])); \f[I]// \[aq]Gregorian Calendar\[aq]\f[R]
console.log(dn.of(\[dq]chinese\[dq])); \f[I]// \[aq]Chinese Calendar\[aq]\f[R]
.EE
.SS Using type \f[CR]language\f[R] with \f[CR]languageDisplay\f[R]
Example using \f[CR]language\f[R] as a type with
\f[CR]languageDisplay\f[R] options.
.IP
.EX
\f[I]// Using \[ga]dialect\[ga] option\f[R]
\f[B]const\f[R] dnDialect = \f[B]new\f[R] Intl.DisplayNames(\[dq]en\[dq], {
  type: \[dq]language\[dq],
  languageDisplay: \[dq]dialect\[dq],
});
console.log(dnDialect.of(\[dq]en\-GB\[dq])); \f[I]// \[aq]British English\[aq]\f[R]

\f[I]// Using \[ga]standard\[ga] option\f[R]
\f[B]const\f[R] dnStd = \f[B]new\f[R] Intl.DisplayNames(\[dq]en\[dq], {
  type: \[dq]language\[dq],
  languageDisplay: \[dq]standard\[dq],
});
console.log(dnStd.of(\[dq]en\-GB\[dq])); \f[I]// \[aq]English (United Kingdom)\[aq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Intl.DisplayNames\f[R]
.IP \[bu] 2
\f[CR]Intl.supportedValuesOf()\f[R]
.IP \[bu] 2
\f[CR]Intl\f[R]
