.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SERVICEWORKERGLOBALSCOPE.PUSHSUBSCRIPTIONCHANGE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerGlobalScope.pushsubscriptionchange_event \-
ServiceWorkerGlobalScope: pushsubscriptionchange event
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is only available in Service Workers.
.PP
The \f[B]\f[CB]pushsubscriptionchange\f[B]\f[R] event is sent to the
global scope of a \f[CR]ServiceWorker\f[R] to indicate a change in push
subscription that was triggered outside the application\(cqs control.
.PP
This may occur if the subscription was refreshed by the browser, but it
may also happen if the subscription has been revoked or lost.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqpushsubscriptionchange\(dq, (event) => { })

onpushsubscriptionchange = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH USAGE NOTES
Although examples demonstrating how to share subscription related
information with the application server tend to use \f[CR]fetch()\f[R],
this is not necessarily the best choice for real\-world use, since it
will not work if the app is offline, for example.
.PP
Consider using another method to synchronize subscription information
between your service worker and the app server, or make sure your code
using \f[CR]fetch()\f[R] is robust enough to handle cases where attempts
to exchange data fail.
.RS
.PP
\f[B]Note:\f[R] In earlier drafts of the specification, this event was
defined to be sent when a \f[CR]PushSubscription\f[R] has expired.
.RE
.SH EXAMPLES
This example, run in the context of a service worker, listens for a
\f[CR]pushsubscriptionchange\f[R] event and re\-subscribes to the lapsed
subscription.
.IP
.EX
self.addEventListener(
  \(dqpushsubscriptionchange\(dq,
  (event) \f[B]=>\f[R] {
    \f[B]const\f[R] conv = (val) \f[B]=>\f[R]
      self.btoa(String.fromCharCode.apply(\f[B]null\f[R], \f[B]new\f[R] Uint8Array(val)));
    \f[B]const\f[R] getPayload = (subscription) \f[B]=>\f[R] ({
      endpoint: subscription.endpoint,
      publicKey: conv(subscription.getKey(\(dqp256dh\(dq)),
      authToken: conv(subscription.getKey(\(dqauth\(dq)),
    });

    \f[B]const\f[R] subscription = self.registration.pushManager
      .subscribe(event.oldSubscription.options)
      .then((subscription) \f[B]=>\f[R]
        fetch(\(dqregister\(dq, {
          method: \(dqpost\(dq,
          headers: {
            \(dqContent\-type\(dq: \(dqapplication/json\(dq,
          },
          body: JSON.stringify({
            old: getPayload(event.oldSubscription),
            \f[B]new\f[R]: getPayload(subscription),
          }),
        }),
      );
    event.waitUntil(subscription);
  },
  \f[B]false\f[R],
);
.EE
.PP
When a \f[CR]pushsubscriptionchange\f[R] event arrives, indicating that
the subscription has expired, we resubscribe by calling the push
manager\(cqs \f[CR]subscribe()\f[R] method.
When the returned promise is resolved, we receive the new subscription.
This is delivered to the app server using a \f[CR]fetch()\f[R] call to
post a JSON formatted rendition of the subscription\(cqs
\f[CR]endpoint\f[R] to the app server.
.PP
You can also use the \f[CR]onpushsubscriptionchange\f[R] event handler
property to set up the event handler:
.IP
.EX
self.onpushsubscriptionchange = (event) \f[B]=>\f[R] {
  event.waitUntil(
    self.registration.pushManager
      .subscribe(event.oldSubscription.options)
      .then((subscription) \f[B]=>\f[R] {
        \f[I]/* ... */\f[R]
      }),
  );
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using the Push API
