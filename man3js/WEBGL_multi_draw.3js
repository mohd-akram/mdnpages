.\" Automatically generated by Pandoc 3.4
.\"
.TH "WEBGL_multi_draw" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WEBGL_multi_draw \- WEBGL_multi_draw extension
.SH SYNOPSIS
The \f[B]\f[CB]WEBGL_multi_draw\f[B]\f[R] extension is part of the WebGL
API and allows to render more than one primitive with a single function
call.
This can improve a WebGL application\[cq]s performance as it reduces
binding costs in the renderer and speeds up GPU thread time with uniform
data.
.PP
When this extension is enabled:
.IP \[bu] 2
New methods that handle multiple lists of arguments in one call are
added (see method list below).
.IP \[bu] 2
The \f[CR]gl_DrawID\f[R] built\-in is added to the shading language.
.RS
.PP
\f[B]Note:\f[R] This extension is available to both, WebGL 1 and WebGL 2
contexts.
.PP
In shader code, the directive \f[CR]#extension GL_ANGLE_multi_draw\f[R]
needs to be called to enable the extension.
.PP
This extension enables the \f[CR]ANGLE_instanced_arrays\f[R] extension
implicitly.
.RE
.SH INSTANCE METHODS
.TP
\f[B]ext.multiDrawArraysWEBGL()\f[R]
Renders multiple primitives from array data (identical to multiple calls
to \f[CR]drawArrays\f[R]).
.TP
\f[B]ext.multiDrawElementsWEBGL()\f[R]
Renders multiple primitives from element array data (identical to
multiple calls to \f[CR]drawElements\f[R]).
.TP
\f[B]ext.multiDrawArraysInstancedWEBGL()\f[R]
Renders multiple primitives from array data (identical to multiple calls
to \f[CR]drawArraysInstanced\f[R]).
.TP
\f[B]ext.multiDrawElementsInstancedWEBGL()\f[R]
Renders multiple primitives from element array data (identical to
multiple calls to \f[CR]drawElementsInstanced\f[R]).
.SH SHADER EXTENSION
Note: Although the extension name is named \f[CR]WEBGL_multi_draw\f[R],
the extension must be enabled with the
\f[CR]#extension GL_ANGLE_multi_draw\f[R] directive to use the extension
in a shader.
.PP
When this extension is enabled, the \f[CR]gl_DrawID\f[R] built\-in can
be used in shader code.
For any \f[CR]multi*\f[R] draw call variant, the index of the draw
\f[CR]i\f[R] may be read by the vertex shader as \f[CR]gl_DrawID\f[R].
For non\-\f[CR]multi*\f[R] calls, the value of \f[CR]gl_DrawID\f[R] is
\f[CR]0\f[R].
.IP
.EX
<\f[B]script\f[R] type=\[dq]x\-shader/x\-vertex\[dq]>
  #extension GL_ANGLE_multi_draw : require
  \f[B]void\f[R] main() {
    gl_Position = vec4(gl_DrawID, 0, 0, 1);
  }
</\f[B]script\f[R]>
.EE
.SH EXAMPLES
.SS Enabling the extension
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.IP
.EX
\f[B]let\f[R] ext = gl.getExtension(\[dq]WEBGL_multi_draw\[dq]);
.EE
.SS Drawing multiple arrays
Example calls for \f[CR]ext.multiDrawArraysWEBGL()\f[R] and
\f[CR]ext.multiDrawArraysInstancedWEBGL()\f[R]:
.IP
.EX
\f[I]// multiDrawArrays variant\f[R]
\f[B]const\f[R] firsts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] counts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
ext.multiDrawArraysWEBGL(gl.TRIANGLES, firsts, 0, counts, 0, firsts.length);
.EE
.IP
.EX
\f[I]// multiDrawArraysInstanced variant\f[R]
\f[B]const\f[R] firsts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] counts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] instanceCounts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
ext.multiDrawArraysInstancedWEBGL(
  gl.TRIANGLES,
  firsts,
  0,
  counts,
  0,
  instanceCounts,
  0,
  firsts.length,
);
.EE
.SS Drawing multiple elements
Example calls for \f[CR]ext.multiDrawElementsWEBGL()\f[R] and
\f[CR]ext.multiDrawElementsInstancedWEBGL()\f[R].
.PP
Assumes that the indices which have been previously uploaded to the
\f[CR]ELEMENT_ARRAY_BUFFER\f[R] are to be treated as
\f[CR]UNSIGNED_SHORT\f[R].
.IP
.EX
\f[I]// multiDrawElements variant\f[R]
\f[B]const\f[R] counts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] offsets = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
ext.multiDrawElementsWEBGL(
  gl.TRIANGLES,
  counts,
  0,
  gl.UNSIGNED_SHORT,
  offsets,
  0,
  counts.length,
);
.EE
.IP
.EX
\f[I]// multiDrawElementsInstanced variant\f[R]
\f[B]const\f[R] counts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] offsets = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] instanceCounts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
ext.multiDrawElementsInstancedWEBGL(
  gl.TRIANGLES,
  counts,
  0,
  gl.UNSIGNED_SHORT,
  offsets,
  0,
  instanceCounts,
  0,
  counts.length,
);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.drawArrays()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.drawElements()\f[R]
.IP \[bu] 2
\f[CR]ANGLE_instanced_arrays.drawArraysInstancedANGLE()\f[R] or in WebGL
2: \f[CR]WebGL2RenderingContext.drawArraysInstanced()\f[R]
.IP \[bu] 2
\f[CR]ANGLE_instanced_arrays.drawElementsInstancedANGLE()\f[R] or in
WebGL 2: \f[CR]WebGL2RenderingContext.drawElementsInstanced()\f[R]
