.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "FUNCTION.CALL" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Function.call \- Function.prototype.call()
.SH SYNOPSIS
The \f[B]\f[CB]call()\f[B]\f[R] method of \f[CR]Function\f[R] instances
calls this function with a given \f[CR]this\f[R] value and arguments
provided individually.
.IP
.EX
\f[B]function\f[R] Product(name, price) {
  \f[B]this\f[R].name = name;
  \f[B]this\f[R].price = price;
}

\f[B]function\f[R] Food(name, price) {
  Product.call(\f[B]this\f[R], name, price);
  \f[B]this\f[R].category = \(dqfood\(dq;
}

console.log(\f[B]new\f[R] Food(\(dqcheese\(dq, 5).name);
\f[I]// Expected output: \(dqcheese\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
call(thisArg)
call(thisArg, arg1)
call(thisArg, arg1, arg2)
call(thisArg, arg1, arg2, /* \&..., */ argN)
.EE
.SS Parameters
.TP
\f[B]thisArg\f[R]
The value to use as \f[CR]this\f[R] when calling \f[CR]func\f[R].
If the function is not in strict mode, \f[CR]null\f[R] and
\f[CR]undefined\f[R] will be replaced with the global object, and
primitive values will be converted to objects.
.TP
\f[B]arg1\f[R], \&..., \f[B]argN\f[R] \f[I](optional)\f[R]
Arguments for the function.
.SS Return value
The result of calling the function with the specified \f[CR]this\f[R]
value and arguments.
.SH DESCRIPTION
.RS
.PP
\f[B]Note:\f[R] This function is almost identical to \f[CR]apply()\f[R],
except that the function arguments are passed to \f[CR]call()\f[R]
individually as a list, while for \f[CR]apply()\f[R] they are combined
in one object, typically an array \(em for example,
\f[CR]func.call(this, \(dqeat\(dq, \(dqbananas\(dq)\f[R]
vs.\ \f[CR]func.apply(this, [\(dqeat\(dq, \(dqbananas\(dq])\f[R].
.RE
.PP
Normally, when calling a function, the value of \f[CR]this\f[R] inside
the function is the object that the function was accessed on.
With \f[CR]call()\f[R], you can assign an arbitrary value as
\f[CR]this\f[R] when calling an existing function, without first
attaching the function to the object as a property.
This allows you to use methods of one object as generic utility
functions.
.RS
.PP
\f[B]Warning:\f[R] Do not use \f[CR]call()\f[R] to chain constructors
(for example, to implement inheritance).
This invokes the constructor function as a plain function, which means
\f[CR]new.target\f[R] is \f[CR]undefined\f[R], and classes throw an
error because they can\(cqt be called without \f[CR]new\f[R].
Use \f[CR]Reflect.construct()\f[R] or \f[CR]extends\f[R] instead.
.RE
.SH EXAMPLES
.SS Using call() to invoke a function and specifying the this value
In the example below, when we call \f[CR]greet\f[R], the value of
\f[CR]this\f[R] will be bound to object \f[CR]obj\f[R], even when
\f[CR]greet\f[R] is not a method of \f[CR]obj\f[R].
.IP
.EX
\f[B]function\f[R] greet() {
  console.log(\f[B]this\f[R].animal, \(dqtypically sleep between\(dq, \f[B]this\f[R].sleepDuration);
}

\f[B]const\f[R] obj = {
  animal: \(dqcats\(dq,
  sleepDuration: \(dq12 and 16 hours\(dq,
};

greet.call(obj); \f[I]// cats typically sleep between 12 and 16 hours\f[R]
.EE
.SS Using call() to invoke a function without specifying the first argument
If the first \f[CR]thisArg\f[R] parameter is omitted, it defaults to
\f[CR]undefined\f[R].
In non\-strict mode, the \f[CR]this\f[R] value is then substituted with
\f[CR]globalThis\f[R] (which is akin to the global object).
.IP
.EX
globalThis.globProp = \(dqfoo\(dq;

\f[B]function\f[R] display() {
  console.log(\(gaglobProp value is ${\f[B]this\f[R].globProp}\(ga);
}

display.call(); \f[I]// Logs \(dqglobProp value is foo\(dq\f[R]
.EE
.PP
In strict mode, the value of \f[CR]this\f[R] is not substituted, so it
stays as \f[CR]undefined\f[R].
.IP
.EX
\(dquse strict\(dq;

globalThis.globProp = \(dqfoo\(dq;

\f[B]function\f[R] display() {
  console.log(\(gaglobProp value is ${\f[B]this\f[R].globProp}\(ga);
}

display.call(); \f[I]// throws TypeError: Cannot read the property of \(aqglobProp\(aq of undefined\f[R]
.EE
.SS Transforming methods to utility functions
\f[CR]call()\f[R] is almost equivalent to a normal function call, except
that \f[CR]this\f[R] is passed as a normal parameter instead of as the
value that the function was accessed on.
This is similar to how general\-purpose utility functions work: instead
of calling \f[CR]array.map(callback)\f[R], you use
\f[CR]map(array, callback)\f[R], which allows you to use \f[CR]map\f[R]
with array\-like objects that are not arrays (for example,
\f[CR]arguments\f[R]) without mutating \f[CR]Object.prototype\f[R].
.PP
Take \f[CR]Array.prototype.slice()\f[R], for example, which you want to
use for converting an array\-like object to a real array.
You could create a shortcut like this:
.IP
.EX
\f[B]const\f[R] slice = Array.prototype.slice;

\f[I]// \&...\f[R]

slice.call(\f[B]arguments\f[R]);
.EE
.PP
Note that you can\(cqt save \f[CR]slice.call\f[R] and call it as a plain
function, because the \f[CR]call()\f[R] method also reads its
\f[CR]this\f[R] value, which is the function it should call.
In this case, you can use \f[CR]bind()\f[R] to bind the value of
\f[CR]this\f[R] for \f[CR]call()\f[R].
In the following piece of code, \f[CR]slice()\f[R] is a bound version of
\f[CR]Function.prototype.call()\f[R], with the \f[CR]this\f[R] value
bound to \f[CR]Array.prototype.slice()\f[R].
This means that additional \f[CR]call()\f[R] calls can be eliminated:
.IP
.EX
\f[I]// Same as \(dqslice\(dq in the previous example\f[R]
\f[B]const\f[R] unboundSlice = Array.prototype.slice;
\f[B]const\f[R] slice = Function.prototype.call.bind(unboundSlice);

\f[I]// \&...\f[R]

slice(\f[B]arguments\f[R]);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Function.prototype.bind()\f[R]
.IP \(bu 2
\f[CR]Function.prototype.apply()\f[R]
.IP \(bu 2
\f[CR]Reflect.apply()\f[R]
.IP \(bu 2
Spread syntax (\f[CR]...\f[R])
.IP \(bu 2
Introduction to Object\-Oriented JavaScript
