.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "IDBObjectStore.openKeyCursor" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore.openKeyCursor \- IDBObjectStore: openKeyCursor() method
.SH SYNOPSIS
The \f[B]\f[CB]openKeyCursor()\f[B]\f[R] method of the
\f[CR]IDBObjectStore\f[R] interface returns an \f[CR]IDBRequest\f[R]
object whose result will be set to an \f[CR]IDBCursor\f[R] that can be
used to iterate through matching results.
Used for iterating through the keys of an object store with a cursor.
.PP
To determine if the add operation has completed successfully, listen for
the results\[cq]s \f[CR]success\f[R] event.
.SH SYNTAX
.IP
.EX
openKeyCursor()
openKeyCursor(query)
openKeyCursor(query, direction)
.EE
.SS Parameters
.TP
\f[B]query\f[R] \f[I](optional)\f[R]
The key range to be queried.
If a single valid key is passed, this will default to a range containing
only that key.
If nothing is passed, this will default to a key range that selects all
the records in this object store.
.TP
\f[B]direction\f[R] \f[I](optional)\f[R]
An \c
.UR https://w3c.github.io/IndexedDB/#enumdef-idbcursordirection
\f[CR]IDBCursorDirection\f[R]
.UE \c
\ telling the cursor what direction to travel.
Valid values are \f[CR]\[dq]next\[dq]\f[R],
\f[CR]\[dq]nextunique\[dq]\f[R], \f[CR]\[dq]prev\[dq]\f[R], and
\f[CR]\[dq]prevunique\[dq]\f[R].
The default is \f[CR]\[dq]next\[dq]\f[R].
.SS Return value
An \f[CR]IDBRequest\f[R] object on which subsequent events related to
this operation are fired.
.PP
If the operation is successful, the value of the request\[cq]s
\f[CR]result\f[R] property is:
.IP \[bu] 2
an \f[CR]IDBCursor\f[R] object pointing at the first record matching the
given query
.IP \[bu] 2
\f[CR]null\f[R] if no matching records were found.
.SS Exceptions
This method may raise a \f[CR]DOMException\f[R] of one of the following
types:
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if this \f[CR]IDBObjectStore\f[R] or \f[CR]IDBIndex\f[R] has been
deleted.
.TP
\f[B]TransactionInactiveError\f[R] \f[B]DOMException\f[R]
Thrown if this \f[CR]IDBObjectStore\f[R]\[cq]s transaction is inactive.
.TP
\f[B]DataError\f[R] \f[B]DOMException\f[R]
Thrown if the specified key or key range is invalid.
.SH EXAMPLES
In this simple fragment we create a transaction, retrieve an object
store, then use a cursor to iterate through all the records in the
object store:
.IP
.EX
\f[B]const\f[R] transaction = db.transaction(\[dq]name\[dq], \[dq]readonly\[dq]);
\f[B]const\f[R] objectStore = transaction.objectStore(\[dq]name\[dq]);
\f[B]const\f[R] request = objectStore.openKeyCursor();
request.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] cursor = event.target.result;
  \f[B]if\f[R] (cursor) {
    \f[I]// cursor.key contains the key of the current record being iterated through\f[R]
    \f[I]// note that there is no cursor.value, unlike for openCursor\f[R]
    \f[I]// this is where you\[aq]d do something with the result\f[R]
    cursor.continue();
  } \f[B]else\f[R] {
    \f[I]// no more results\f[R]
  }
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
