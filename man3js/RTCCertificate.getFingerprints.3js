.\" Automatically generated by Pandoc 3.4
.\"
.TH "RTCCertificate.getFingerprints" "JS" "September 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCCertificate.getFingerprints \- RTCCertificate: getFingerprints()
method
.SH SYNOPSIS
The \f[B]\f[CB]getFingerprints()\f[B]\f[R] method of the
\f[B]\f[CB]RTCCertificate\f[B]\f[R] interface is used to get an array of
certificate fingerprints.
.PP
An application can use this method to compare the client certificate
fingerprints with the certificate fingerprints from the server.
The server and client may support different sets of algorithms: all
fingerprint values for the set of algorithms supported by both client
and server should match.
.SH SYNTAX
.IP
.EX
getFingerprints()
.EE
.SS Parameters
None.
.SS Return value
An Array of fingerprint values.
Each fingerprint is represented by an object with the following
properties:
.TP
\f[B]algorithm\f[R]
A string indicating the hash function algorithm used to create the
fingerprint in \f[CR]value\f[R].
Allowed values include: \f[CR]\[dq]sha\-1\[dq]\f[R],
\f[CR]\[dq]sha\-224\[dq]\f[R], \f[CR]\[dq]sha\-256\[dq]\f[R],
\f[CR]\[dq]sha\-384\[dq]\f[R], \f[CR]\[dq]sha\-512\[dq]\f[R],
\f[CR]\[dq]md5\[dq]\f[R], \f[CR]\[dq]md2\[dq]\f[R].
.TP
\f[B]value\f[R]
A string containing the certificate fingerprint in lowercase hex string,
as calculated with the \f[CR]algorithm\f[R] hash function.
The format is more precisely defined in \c
.UR https://www.rfc-editor.org/rfc/rfc4572#section-5
RFC4572, Section 5
.UE \c
\&.
.SH EXAMPLES
.SS Getting certificate fingerprints
This example shows how you might get certificate fingerprints and
compare them to fingerprints from a server.
.PP
First we create a connection and get the fingerprints.
We also get the fingerprints from the server using \[lq]some
mechanism\[rq].
.IP
.EX
\f[B]const\f[R] rtcPeerConnection = \f[B]new\f[R] RTCPeerConnection();

\f[I]// Get the certificate fingerprints from the client.\f[R]
\f[B]const\f[R] fingerprintsFromClient = rtcPeerConnection.certificate.getFingerprints();

\f[I]// Get the certificate fingerprints from the server (pseudo code)\f[R]
\f[B]const\f[R] fingerprintsFromServer = ...;
.EE
.PP
There are numerous ways to compare the fingerprint arrays.
Here we convert the arrays to dictionary objects where the algorithm
name is the property and then compare them.
This works because only one fingerprint value can exist for each
algorithm.
(There are many other ways to sort and compare the two arrays).
.IP
.EX
\f[B]let\f[R] clientFingerprintDict = Object.fromEntries(
  fingerprintsFromClient.map((x) \f[B]=>\f[R] [x.algorithm, x.value]),
);
\f[B]let\f[R] serverFingerprintDict = Object.fromEntries(
  fingerprintsFromServer.map((x) \f[B]=>\f[R] [x.algorithm, x.value]),
);

\f[I]// Function to compare two objects and return true if there are common properties\f[R]
\f[I]// and all common properties match.\f[R]
\f[B]function\f[R] compareObjects(obj1, obj2) {
  \f[B]const\f[R] commonProperties = Object.keys(obj1).filter((prop) \f[B]=>\f[R]
    obj2.hasOwnProperty(prop),
  );
  \f[I]// Return false if there are no common properties\f[R]
  \f[B]if\f[R] (Object.keys(commonProperties).length === 0) \f[B]return\f[R] \f[B]false\f[R];

  \f[I]// Return false if any common properties don\[aq]t match\f[R]
  \f[B]for\f[R] (\f[B]const\f[R] prop \f[B]of\f[R] commonProperties) {
    \f[B]if\f[R] (obj1[prop] !== obj2[prop]) {
      \f[B]return\f[R] \f[B]false\f[R];
    }
  }

  \f[B]return\f[R] \f[B]true\f[R];
}

\f[B]const\f[R] matchingFingerprints = compareObjects(
  clientFingerprintDict,
  serverFingerprintDict,
);
console.log(matchingFingerprints);
.EE
