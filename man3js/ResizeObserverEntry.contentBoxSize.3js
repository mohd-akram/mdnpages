.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RESIZEOBSERVERENTRY.CONTENTBOXSIZE" "3JS" "May 30, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ResizeObserverEntry.contentBoxSize \- ResizeObserverEntry:
contentBoxSize property
.SH SYNOPSIS
The \f[B]\f[CB]contentBoxSize\f[B]\f[R] read\-only property of the
\f[CR]ResizeObserverEntry\f[R] interface returns an array containing the
new content box size of the observed element when the callback is run.
.SH VALUE
An array containing objects with the new content box size of the
observed element.
The array is necessary to support elements that have multiple fragments,
which occur in multi\-column scenarios.
Each object in the array contains two properties:
.TP
\f[B]blockSize\f[R]
The length of the observed element\(cqs content box in the block
dimension.
For boxes with a horizontal \f[CR]writing\-mode\f[R], this is the
vertical dimension, or height; if the writing\-mode is vertical, this is
the horizontal dimension, or width.
.TP
\f[B]inlineSize\f[R]
The length of the observed element\(cqs content box in the inline
dimension.
For boxes with a horizontal \f[CR]writing\-mode\f[R], this is the
horizontal dimension, or width; if the writing\-mode is vertical, this
is the vertical dimension, or height.
.RS
.PP
\f[B]Note:\f[R] For more explanation of writing modes and block and
inline dimensions, read Handling different text directions.
.RE
.SH EXAMPLES
The following snippet is taken from the \c
.UR https://mdn.github.io/dom-examples/resize-observer/resize-observer-border-radius.html
resize\-observer\-border\-radius.html
.UE \c
\ (\c
.UR https://github.com/mdn/dom-examples/blob/main/resize-observer/resize-observer-border-radius.html
see source
.UE \c
) example.
This example includes a green box, sized as a percentage of the viewport
size.
When the viewport size is changed, the box\(cqs rounded corners change
in proportion to the size of the box.
We could just implement this using \f[CR]border\-radius\f[R] with a
percentage, but that quickly leads to ugly\-looking elliptical corners;
this solution gives you nice square corners that scale with the box
size.
.IP
.EX
\f[B]const\f[R] resizeObserver = \f[B]new\f[R] ResizeObserver((entries) \f[B]=>\f[R] {
  \f[B]for\f[R] (\f[B]const\f[R] entry \f[B]of\f[R] entries) {
    \f[B]if\f[R] (entry.contentBoxSize) {
      \f[I]// The standard makes contentBoxSize an array...\f[R]
      \f[B]if\f[R] (entry.contentBoxSize[0]) {
        entry.target.style.borderRadius = \(ga${Math.min(
          100,
          entry.contentBoxSize[0].inlineSize / 10 +
            entry.contentBoxSize[0].blockSize / 10,
        )}px\(ga;
      } \f[B]else\f[R] {
        \f[I]// \&... but old versions of Firefox treat it as a single item\f[R]
        entry.target.style.borderRadius = \(ga${Math.min(
          100,
          entry.contentBoxSize.inlineSize / 10 +
            entry.contentBoxSize.blockSize / 10,
        )}px\(ga;
      }
    } \f[B]else\f[R] {
      entry.target.style.borderRadius = \(ga${Math.min(
        100,
        entry.contentRect.width / 10 + entry.contentRect.height / 10,
      )}px\(ga;
    }
  }
});

resizeObserver.observe(document.querySelector(\(dqdiv\(dq));
.EE
