'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SYMBOL.SPLIT" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Symbol.split \- Symbol.split
.SH SYNOPSIS
The \f[B]\f[CB]Symbol.split\f[B]\f[R] static data property represents
the well\-known symbol \f[CR]Symbol.split\f[R].
The \f[CR]String.prototype.split()\f[R] method looks up this symbol on
its first argument for the method that splits a string at the indices
that match the current object.
.PP
For more information, see \f[CR]RegExp.prototype[Symbol.split]()\f[R]
and \f[CR]String.prototype.split()\f[R].
.IP
.EX
\f[B]class\f[R] Split1 {
  constructor(value) {
    \f[B]this\f[R].value = value;
  }
  [Symbol.split](string) {
    \f[B]const\f[R] index = string.indexOf(\f[B]this\f[R].value);
    \f[B]return\f[R] \(ga${\f[B]this\f[R].value}${string.substring(0, index)}/${string.substring(
      index + \f[B]this\f[R].value.length,
    )}\(ga;
  }
}

console.log(\(dqfoobar\(dq.split(\f[B]new\f[R] Split1(\(dqfoo\(dq)));
\f[I]// Expected output: \(dqfoo/bar\(dq\f[R]
.EE
.SH VALUE
The well\-known symbol \f[CR]Symbol.split\f[R].
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH EXAMPLES
.SS Custom reverse split
.IP
.EX
\f[B]class\f[R] ReverseSplit {
  [Symbol.split](string) {
    \f[B]const\f[R] array = string.split(\(dq \(dq);
    \f[B]return\f[R] array.reverse();
  }
}

console.log(\(dqAnother one bites the dust\(dq.split(\f[B]new\f[R] ReverseSplit()));
\f[I]// [ \(dqdust\(dq, \(dqthe\(dq, \(dqbites\(dq, \(dqone\(dq, \(dqAnother\(dq ]\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-symbol
Polyfill of \f[CR]Symbol.split\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]Symbol.match\f[R]
.IP \(bu 2
\f[CR]Symbol.matchAll\f[R]
.IP \(bu 2
\f[CR]Symbol.replace\f[R]
.IP \(bu 2
\f[CR]Symbol.search\f[R]
.IP \(bu 2
\f[CR]String.prototype.split()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.split]()\f[R]
