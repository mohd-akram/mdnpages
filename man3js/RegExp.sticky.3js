.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REGEXP.STICKY" "3JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RegExp.sticky \- RegExp.prototype.sticky
.SH SYNOPSIS
The \f[B]\f[CB]sticky\f[B]\f[R] accessor property of \f[CR]RegExp\f[R]
instances returns whether or not the \f[CR]y\f[R] flag is used with this
regular expression.
.IP
.EX
\f[B]const\f[R] str1 = \(dqtable football\(dq;
\f[B]const\f[R] regex1 = \f[B]new\f[R] RegExp(\(dqfoo\(dq, \(dqy\(dq);

regex1.lastIndex = 6;

console.log(regex1.sticky);
\f[I]// Expected output: true\f[R]

console.log(regex1.test(str1));
\f[I]// Expected output: true\f[R]

console.log(regex1.test(str1));
\f[I]// Expected output: false\f[R]
.EE
.SH DESCRIPTION
\f[CR]RegExp.prototype.sticky\f[R] has the value \f[CR]true\f[R] if the
\f[CR]y\f[R] flag was used; otherwise, \f[CR]false\f[R].
The \f[CR]y\f[R] flag indicates that the regex attempts to match the
target string only from the index indicated by the \f[CR]lastIndex\f[R]
property (and unlike a global regex, does not attempt to match from any
later indexes).
.PP
The set accessor of \f[CR]sticky\f[R] is \f[CR]undefined\f[R].
You cannot change this property directly.
.PP
For both sticky regexes and global regexes:
.IP \(bu 2
They start matching at \f[CR]lastIndex\f[R].
.IP \(bu 2
When the match succeeds, \f[CR]lastIndex\f[R] is advanced to the end of
the match.
.IP \(bu 2
When \f[CR]lastIndex\f[R] is out of bounds of the currently matched
string, \f[CR]lastIndex\f[R] is reset to 0.
.PP
However, for the \f[CR]exec()\f[R] method, the behavior when matching
fails is different:
.IP \(bu 2
When the \f[CR]exec()\f[R] method is called on a sticky regex, if the
regex fails to match at \f[CR]lastIndex\f[R], the regex immediately
returns \f[CR]null\f[R] and resets \f[CR]lastIndex\f[R] to 0.
.IP \(bu 2
When the \f[CR]exec()\f[R] method is called on a global regex, if the
regex fails to match at \f[CR]lastIndex\f[R], it tries to match from the
next character, and so on until a match is found or the end of the
string is reached.
.PP
For the \f[CR]exec()\f[R] method, a regex that\(cqs both sticky and
global behaves the same as a sticky and non\-global regex.
Because \f[CR]test()\f[R] is a simple wrapper around \f[CR]exec()\f[R],
\f[CR]test()\f[R] would ignore the global flag and perform sticky
matches as well.
However, due to many other methods special\-casing the behavior of
global regexes, the global flag is, in general, orthogonal to the sticky
flag.
.IP \(bu 2
\f[CR]String.prototype.matchAll()\f[R] (which calls
\f[CR]RegExp.prototype[Symbol.matchAll]()\f[R]): \f[CR]y\f[R],
\f[CR]g\f[R] and \f[CR]gy\f[R] are all different.
.RS 2
.IP \(bu 2
For \f[CR]y\f[R] regexes: \f[CR]matchAll()\f[R] throws;
\f[CR][Symbol.matchAll]()\f[R] yields the \f[CR]exec()\f[R] result
exactly once, without updating the regex\(cqs \f[CR]lastIndex\f[R].
.IP \(bu 2
For \f[CR]g\f[R] or \f[CR]gy\f[R] regexes: returns an iterator that
yields a sequence of \f[CR]exec()\f[R] results.
.RE
.IP \(bu 2
\f[CR]String.prototype.match()\f[R] (which calls
\f[CR]RegExp.prototype[Symbol.match]()\f[R]): \f[CR]y\f[R], \f[CR]g\f[R]
and \f[CR]gy\f[R] are all different.
.RS 2
.IP \(bu 2
For \f[CR]y\f[R] regexes: returns the \f[CR]exec()\f[R] result and
updates the regex\(cqs \f[CR]lastIndex\f[R].
.IP \(bu 2
For \f[CR]g\f[R] or \f[CR]gy\f[R] regexes: returns an array of all
\f[CR]exec()\f[R] results.
.RE
.IP \(bu 2
\f[CR]String.prototype.search()\f[R] (which calls
\f[CR]RegExp.prototype[Symbol.search]()\f[R]): the \f[CR]g\f[R] flag is
always irrelevant.
.RS 2
.IP \(bu 2
For \f[CR]y\f[R] or \f[CR]gy\f[R] regexes: always returns \f[CR]0\f[R]
(if the very beginning of the string matches) or \f[CR]\-1\f[R] (if the
beginning doesn\(cqt match), without updating the regex\(cqs
\f[CR]lastIndex\f[R] when it exits.
.IP \(bu 2
For \f[CR]g\f[R] regexes: returns the index of the first match in the
string, or \f[CR]\-1\f[R] if no match is found.
.RE
.IP \(bu 2
\f[CR]String.prototype.split()\f[R] (which calls
\f[CR]RegExp.prototype[Symbol.split]()\f[R]): \f[CR]y\f[R],
\f[CR]g\f[R], and \f[CR]gy\f[R] all have the same behavior.
.IP \(bu 2
\f[CR]String.prototype.replace()\f[R] (which calls
\f[CR]RegExp.prototype[Symbol.replace]()\f[R]): \f[CR]y\f[R],
\f[CR]g\f[R] and \f[CR]gy\f[R] are all different.
.RS 2
.IP \(bu 2
For \f[CR]y\f[R] regexes: replaces once at the current
\f[CR]lastIndex\f[R] and updates \f[CR]lastIndex\f[R].
.IP \(bu 2
For \f[CR]g\f[R] and \f[CR]gy\f[R] regexes: replaces all occurrences
matched by \f[CR]exec()\f[R].
.RE
.IP \(bu 2
\f[CR]String.prototype.replaceAll()\f[R] (which calls
\f[CR]RegExp.prototype[Symbol.replace]()\f[R]): \f[CR]y\f[R],
\f[CR]g\f[R] and \f[CR]gy\f[R] are all different.
.RS 2
.IP \(bu 2
For \f[CR]y\f[R] regexes: \f[CR]replaceAll()\f[R] throws.
.IP \(bu 2
For \f[CR]g\f[R] and \f[CR]gy\f[R] regexes: replaces all occurrences
matched by \f[CR]exec()\f[R].
.RE
.SH EXAMPLES
.SS Using a regular expression with the sticky flag
.IP
.EX
\f[B]const\f[R] str = \(dq#foo#\(dq;
\f[B]const\f[R] regex = /foo/y;

regex.lastIndex = 1;
regex.test(str); \f[I]// true\f[R]
regex.lastIndex = 5;
regex.test(str); \f[I]// false (lastIndex is taken into account with sticky flag)\f[R]
regex.lastIndex; \f[I]// 0 (reset after match failure)\f[R]
.EE
.SS Anchored sticky flag
For several versions, Firefox\(cqs SpiderMonkey engine had \c
.UR https://bugzil.la/773687
a bug
.UE \c
\ with regard to the \f[CR]\(ha\f[R] assertion and the sticky flag which
allowed expressions starting with the \f[CR]\(ha\f[R] assertion and
using the sticky flag to match when they shouldn\(cqt.
The bug was introduced some time after Firefox 3.6 (which had the sticky
flag but not the bug) and fixed in 2015.
Perhaps because of the bug, the specification \c
.UR https://tc39.es/ecma262/multipage/text-processing.html#sec-compileassertion
specifically calls out
.UE \c
\ the fact that:
.RS
.PP
Even when the \f[CR]y\f[R] flag is used with a pattern, \f[CR]\(ha\f[R]
always matches only at the beginning of \f[I]Input\f[R], or (if
\f[I]rer\f[R].[[Multiline]] is \f[CR]true\f[R]) at the beginning of a
line.
.RE
.PP
Examples of correct behavior:
.IP
.EX
\f[B]const\f[R] regex = /\(hafoo/y;
regex.lastIndex = 2;
regex.test(\(dq..foo\(dq); \f[I]// false \- index 2 is not the beginning of the string\f[R]

\f[B]const\f[R] regex2 = /\(hafoo/my;
regex2.lastIndex = 2;
regex2.test(\(dq..foo\(dq); \f[I]// false \- index 2 is not the beginning of the string or line\f[R]
regex2.lastIndex = 2;
regex2.test(\(dq.\(rsnfoo\(dq); \f[I]// true \- index 2 is the beginning of a line\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of the \f[CR]sticky\f[R] flag in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]RegExp.prototype.lastIndex\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.dotAll\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.global\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.hasIndices\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.ignoreCase\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.multiline\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.source\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.unicode\f[R]
