.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUCOMPUTEPASSENCODER.END" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUComputePassEncoder.end \- GPUComputePassEncoder: end() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]end()\f[B]\f[R] method of the
\f[CR]GPUComputePassEncoder\f[R] interface completes recording of the
current compute pass command sequence.
.SH SYNTAX
.IP
.EX
end()
.EE
.SS Parameters
None.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]end()\f[B]\f[R], otherwise a \f[CR]GPUValidationError\f[R] is
generated and the \f[CR]GPUComputePassEncoder\f[R] becomes invalid:
.IP \(bu 2
The \f[CR]GPUComputePassEncoder\f[R] is open (i.e., not already ended
via an \f[CR]end()\f[R] call).
.IP \(bu 2
any \f[CR]pushDebugGroup()\f[R] calls made on this encoder have a
corresponding \f[CR]popDebugGroup()\f[R] call before \f[CR]end()\f[R] is
called.
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-compute-demo/
basic compute demo
.UE \c
, several commands are recorded via a \f[CR]GPUCommandEncoder\f[R].
Most of these commands originate from the
\f[CR]GPUComputePassEncoder\f[R] created via
\f[CR]GPUCommandEncoder.beginComputePass()\f[R].
.IP
.EX
\f[B]const\f[R] BUFFER_SIZE = 1000;

\f[I]// \&...\f[R]

\f[I]// Create GPUCommandEncoder to encode commands to issue to the GPU\f[R]
\f[B]const\f[R] commandEncoder = device.createCommandEncoder();

\f[I]// Initiate render pass\f[R]
\f[B]const\f[R] passEncoder = commandEncoder.beginComputePass();

\f[I]// Issue commands\f[R]
passEncoder.setPipeline(computePipeline);
passEncoder.setBindGroup(0, bindGroup);
passEncoder.dispatchWorkgroups(Math.ceil(BUFFER_SIZE / 64));

\f[I]// End the render pass\f[R]
passEncoder.end();

\f[I]// Copy output buffer to staging buffer\f[R]
commandEncoder.copyBufferToBuffer(
  output,
  0, \f[I]// Source offset\f[R]
  stagingBuffer,
  0, \f[I]// Destination offset\f[R]
  BUFFER_SIZE,
);

\f[I]// End frame by passing array of command buffers to command queue for execution\f[R]
device.queue.submit([commandEncoder.finish()]);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
