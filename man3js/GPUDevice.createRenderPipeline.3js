.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUDEVICE.CREATERENDERPIPELINE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUDevice.createRenderPipeline \- GPUDevice: createRenderPipeline()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createRenderPipeline()\f[B]\f[R] method of the
\f[CR]GPUDevice\f[R] interface creates a \f[CR]GPURenderPipeline\f[R]
that can control the vertex and fragment shader stages and be used in a
\f[CR]GPURenderPassEncoder\f[R] or \f[CR]GPURenderBundleEncoder\f[R].
.SH SYNTAX
.IP
.EX
createRenderPipeline(descriptor)
.EE
.SS Parameters
.TP
\f[B]descriptor\f[R]
An object containing the following properties:
.RS
.TP
\f[B]depthStencil\f[R] \f[I](optional)\f[R]
An object (see \f[CR]depthStencil\f[R] object structure) describing
depth\-stencil properties including testing, operations, and bias.
.TP
\f[B]fragment\f[R] \f[I](optional)\f[R]
An object (see \f[CR]fragment\f[R] object structure) describing the
fragment shader entry point of the pipeline and its output colors.
If no fragment shader entry point is defined, the pipeline will not
produce any color attachment outputs, but it still performs
rasterization and produces depth values based on the vertex position
output.
Depth testing and stencil operations can still be used.
.TP
\f[B]label\f[R] \f[I](optional)\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.TP
\f[B]layout\f[R]
Defines the layout (structure, purpose, and type) of all the GPU
resources (buffers, textures, etc.)
used during the execution of the pipeline.
Possible values are:
.RS
.IP \(bu 2
A \f[CR]GPUPipelineLayout\f[R] object, created using
\f[CR]GPUDevice.createPipelineLayout()\f[R], which allows the GPU to
figure out how to run the pipeline most efficiently ahead of time.
.IP \(bu 2
A string of \f[CR]\(dqauto\(dq\f[R], which causes the pipeline to
generate an implicit bind group layout based on any bindings defined in
the shader code.
If \f[CR]\(dqauto\(dq\f[R] is used, the generated bind group layouts may
only be used with the current pipeline.
.RE
.TP
\f[B]multisample\f[R] \f[I](optional)\f[R]
An object (see \f[CR]multisample\f[R] object structure) describing how
the pipeline interacts with a render pass\(cqs multisampled attachments.
.TP
\f[B]primitive\f[R] \f[I](optional)\f[R]
An object (see \f[CR]primitive\f[R] object structure) describing how a
pipeline constructs and rasterizes primitives from its vertex inputs.
.TP
\f[B]vertex\f[R]
An object (see \f[CR]vertex\f[R] object structure) describing the vertex
shader entry point of the pipeline and its input buffer layouts.
.RE
.SS \f[CR]depthStencil\f[R] object structure
The \f[CR]depthStencil\f[R] object can contain the following properties:
.TP
\f[B]depthBias\f[R] \f[I](optional)\f[R]
A number representing a constant depth bias that is added to each
fragment.
If omitted, \f[CR]depthBias\f[R] defaults to 0.
> \f[B]Note:\f[R] > The \f[CR]depthBias\f[R], \f[CR]depthBiasClamp\f[R],
and \f[CR]depthBiasSlopeScale\f[R] properties must be set to
\f[CR]0\f[R] for line and point topologies, i.e., if \f[CR]topology\f[R]
is set to \f[CR]\(dqline\-list\(dq\f[R], \f[CR]\(dqline\-strip\(dq\f[R],
or \f[CR]\(dqpoint\-list\(dq\f[R].
If not, a \f[CR]GPUValidationError\f[R] will be generated and the
returned \f[CR]GPURenderPipeline\f[R] will be invalid.
.TP
\f[B]depthBiasClamp\f[R] \f[I](optional)\f[R]
A number representing the maximum depth bias of a fragment.
If omitted, \f[CR]depthBiasClamp\f[R] defaults to 0.
.TP
\f[B]depthBiasSlopeScale\f[R] \f[I](optional)\f[R]
A number representing a depth bias that scales with the fragment\(cqs
slope.
If omitted, \f[CR]depthBiasSlopeScale\f[R] defaults to 0.
.TP
\f[B]depthCompare\f[R] \f[I](optional)\f[R]
An enumerated value specifying the comparison operation used to test
fragment depths against \f[CR]depthStencilAttachment\f[R] depth values.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqnever\(dq\f[R]: Comparison tests never pass.
.IP \(bu 2
\f[CR]\(dqless\(dq\f[R]: A provided value passes the comparison test if
it is less than the sampled value.
.IP \(bu 2
\f[CR]\(dqequal\(dq\f[R]: A provided value passes the comparison test if
it is equal to the sampled value.
.IP \(bu 2
\f[CR]\(dqless\-equal\(dq\f[R]: A provided value passes the comparison
test if it is less than or equal to the sampled value.
.IP \(bu 2
\f[CR]\(dqgreater\(dq\f[R]: A provided value passes the comparison test
if it is greater than the sampled value.
.IP \(bu 2
\f[CR]\(dqnot\-equal\(dq\f[R]: A provided value passes the comparison
test if it is not equal to the sampled value.
.IP \(bu 2
\f[CR]\(dqgreater\-equal\(dq\f[R]: A provided value passes the
comparison test if it is greater than or equal to the sampled value.
.IP \(bu 2
\f[CR]\(dqalways\(dq\f[R]: Comparison tests always pass.
.PP
\f[CR]depthCompare\f[R] is not required if the specified
\f[CR]format\f[R] does not have a depth component, or if the comparison
operation is not used.
.RE
.TP
\f[B]depthWriteEnabled\f[R] \f[I](optional)\f[R]
A boolean.
A value of \f[CR]true\f[R] specifies that the
\f[CR]GPURenderPipeline\f[R] can modify
\f[CR]depthStencilAttachment\f[R] depth values after creation.
Setting it to \f[CR]false\f[R] means it cannot.
.RS
.PP
\f[CR]depthWriteEnabled\f[R] is not required if the specified
\f[CR]format\f[R] does not have a depth component.
.RE
.TP
\f[B]format\f[R]
An enumerated value specifying the \f[CR]depthStencilAttachment\f[R]
format that the \f[CR]GPURenderPipeline\f[R] will be compatible with.
See the specification\(cqs \c
.UR https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat
Texture Formats
.UE \c
\ section for all the available \f[CR]format\f[R] values.
.TP
\f[B]stencilBack\f[R] \f[I](optional)\f[R]
An object that defines how stencil comparisons and operations are
performed for back\-facing primitives.
Its properties can include:
.RS
.TP
\f[B]compare\f[R] \f[I](optional)\f[R]
An enumerated value specifying the comparison operation used when
testing fragments against \f[CR]depthStencilAttachment\f[R] stencil
values.
Possible values are the same as for the \f[CR]depthCompare\f[R]
property; see above.
If omitted, \f[CR]compare\f[R] defaults to \f[CR]\(dqalways\(dq\f[R].
.TP
\f[B]depthFailOp\f[R] \f[I](optional)\f[R]
An enumerated value specifying the stencil operation performed if the
fragment depth comparison described by \f[CR]depthCompare\f[R] fails.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqdecrement\-clamp\(dq\f[R]: Decrement the current render state
stencil value, clamping it to 0.
.IP \(bu 2
\f[CR]\(dqdecrement\-wrap\(dq\f[R]: Decrement the current render state
stencil value, wrapping it to the maximum representable value of the
\f[CR]depthStencilAttachment\f[R]\(cqs stencil aspect if the value goes
below 0.
.IP \(bu 2
\f[CR]\(dqinvert\(dq\f[R]: Bitwise\-invert the current render state
stencil value.
.IP \(bu 2
\f[CR]\(dqincrement\-clamp\(dq\f[R]: Increments the current render state
stencil value, clamping it to the maximum representable value of the
\f[CR]depthStencilAttachment\f[R]\(cqs stencil aspect.
.IP \(bu 2
\f[CR]\(dqincrement\-wrap\(dq\f[R]: Increments the current render state
stencil value, wrapping it to zero if the value exceeds the maximum
representable value of the \f[CR]depthStencilAttachment\f[R]\(cqs
stencil aspect.
.IP \(bu 2
\f[CR]\(dqkeep\(dq\f[R]: Keep the current stencil value.
.IP \(bu 2
\f[CR]\(dqreplace\(dq\f[R]: Set the stencil value to the current render
state stencil value.
.IP \(bu 2
\f[CR]\(dqzero\(dq\f[R]: Set the stencil value to 0.
.PP
If omitted, \f[CR]depthFailOp\f[R] defaults to \f[CR]\(dqkeep\(dq\f[R].
.RS
.PP
\f[B]Note:\f[R] The render state stencil value is initialized to 0 at
the start of a render pass.
.RE
.RE
.TP
\f[B]failOp\f[R] \f[I](optional)\f[R]
An enumerated value specifying the stencil operation performed if the
fragment stencil comparison test described by \f[CR]compare\f[R] fails.
Possible and default values are the same as for \f[CR]depthFailOp\f[R].
.TP
\f[B]passOp\f[R] \f[I](optional)\f[R]
An enumerated value specifying the stencil operation performed if the
fragment stencil comparison test described by \f[CR]compare\f[R] passes.
Possible and default values are the same as for \f[CR]depthFailOp\f[R].
.RE
.TP
\f[B]stencilFront\f[R] \f[I](optional)\f[R]
An object that defines how stencil comparisons and operations are
performed for front\-facing primitives.
Its properties are the same as for \f[CR]stencilBack\f[R].
.TP
\f[B]stencilReadMask\f[R] \f[I](optional)\f[R]
A bitmask controlling which \f[CR]depthStencilAttachment\f[R] stencil
value bits are read when performing stencil comparison tests.
If omitted, \f[CR]stencilReadMask\f[R] defaults to
\f[CR]0xFFFFFFFF\f[R].
.TP
\f[B]stencilWriteMask\f[R] \f[I](optional)\f[R]
A bitmask controlling which \f[CR]depthStencilAttachment\f[R] stencil
value bits are written to when performing stencil operations.
If omitted, \f[CR]stencilWriteMask\f[R] defaults to
\f[CR]0xFFFFFFFF\f[R].
.RS
.PP
\f[B]Note:\f[R] \f[CR]depthStencilAttachment\f[R] values are specified
during \f[CR]GPUCommandEncoder.beginRenderPass()\f[R] calls, when the
\f[CR]GPURenderPipeline\f[R] is actually used to perform a render pass.
.RE
.SS \f[CR]fragment\f[R] object structure
The \f[CR]fragment\f[R] object contains an array of objects, each of
which can contain the following properties:
.TP
\f[B]constants\f[R] \f[I](optional)\f[R]
A sequence of record types, with the structure \f[CR](id, value)\f[R],
representing override values for \c
.UR https://gpuweb.github.io/gpuweb/#typedefdef-gpupipelineconstantvalue
WGSL constants that can be overridden in the pipeline
.UE \c
\&.
These behave like ordered maps.
In each case, the \f[CR]id\f[R] is a key used to identify or select the
record, and the \f[CR]constant\f[R] is an enumerated value representing
a WGSL.
.RS
.PP
Depending on which constant you want to override, the \f[CR]id\f[R] may
take the form of the numeric ID of the constant, if one is specified, or
otherwise the constant\(cqs identifier name.
.PP
A code snippet providing override values for several overridable
constants might look like this:
.IP
.EX
({
  \f[I]// \&...\f[R]
  constants: {
    0: \f[B]false\f[R],
    1200: 3.0,
    1300: 2.0,
    width: 20,
    depth: \-1,
    height: 15,
  },
});
.EE
.RE
.TP
\f[B]entryPoint\f[R] \f[I](optional)\f[R]
The name of the function in the \f[CR]module\f[R] that this stage will
use to perform its work.
The corresponding shader function must have the \f[CR]\(atfragment\f[R]
attribute to be identified as this entry point.
See \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#entry-point-decl
Entry Point Declaration
.UE \c
\ for more information.
.RS
.PP
You can omit the \f[CR]entryPoint\f[R] property if your shader code
contains a single function with the \f[CR]\(atfragment\f[R] attribute
set \(em the browser will use this as the default entry point.
If \f[CR]entryPoint\f[R] is omitted and the browser cannot determine a
default entry point, a \f[CR]GPUValidationError\f[R] is generated and
the resulting \f[CR]GPURenderPipeline\f[R] will be invalid.
.RE
.TP
\f[B]module\f[R]
A \f[CR]GPUShaderModule\f[R] object containing the \c
.UR https://gpuweb.github.io/gpuweb/wgsl/
WGSL
.UE \c
\ code that this programmable stage will execute.
.TP
\f[B]targets\f[R]
an array of objects representing color states that represent
configuration details for the colors output by the fragment shader
stage.
These objects can include the following properties:
.RS
.TP
\f[B]blend\f[R] \f[I](optional)\f[R]
A object that describes a blend mode to be applied to the output color.
\f[CR]blend\f[R] has two properties:
.RS
.TP
\f[B]alpha\f[R]
Describes the alpha channel value.
.TP
\f[B]color\f[R]
Describes the color value.
.PP
\f[CR]alpha\f[R] and \f[CR]color\f[R] both take an object as a value
that can include the following properties:
.TP
\f[B]dstFactor\f[R] \f[I](optional)\f[R]
An enumerated value that defines the blend factor operation to be
performed on values from the target attachment.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqconstant\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqdst\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqdst\-alpha\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqone\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqone\-minus\-dst\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqone\-minus\-src\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqone\-minus\-src1\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqone\-minus\-src\-alpha\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqone\-minus\-src1\-alpha\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqone\-minus\-dst\-alpha\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqone\-minus\-constant\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsrc\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsrc1\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsrc\-alpha\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsrc1\-alpha\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsrc\-alpha\-saturated\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqzero\(dq\f[R]
.PP
If omitted, \f[CR]dstFactor\f[R] defaults to \f[CR]\(dqzero\(dq\f[R].
.RS
.PP
\f[B]Note:\f[R] The \f[CR]dual\-source\-blending\f[R] feature needs to
be enabled for the \f[CR]src1\f[R], \f[CR]one\-minus\-src1\f[R],
\f[CR]src1\-alpha\f[R], and \f[CR]one\-minus\-src1\-alpha\f[R] blend
factor operations to be used successfully.
If not, a \f[CR]GPUValidationError\f[R] is generated.
.RE
.RE
.TP
\f[B]operation\f[R] \f[I](optional)\f[R]
An enumerated value that defines the algorithm used to combine source
and destination blend factors, to calculate the final values written to
the target attachment components.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqadd\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqmax\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqmin\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqreverse\-subtract\(dq\f[R]
.IP \(bu 2
\f[CR]\(dqsubtract\(dq\f[R]
.PP
If omitted, \f[CR]operation\f[R] defaults to \f[CR]\(dqadd\(dq\f[R].
.RE
.TP
\f[B]srcFactor\f[R] \f[I](optional)\f[R]
An enumerated value that defines the blend factor operation to be
performed on values from the fragment shader.
Possible values are the same as for \f[CR]dstFactor\f[R].
If omitted, \f[CR]srcFactor\f[R] defaults to \f[CR]\(dqone\(dq\f[R].
.RS
.PP
\f[B]Note:\f[R] For a detailed explanation of the algorithms defined by
each \f[CR]dstFactor\f[R]/\f[CR]srcFactor\f[R] and \f[CR]operation\f[R]
enumerated value, see the \c
.UR https://gpuweb.github.io/gpuweb/#blend-state
Blend State
.UE \c
\ section of the specification.
.RE
.RE
.TP
\f[B]format\f[R]
An enumerated value specifying the required format for output colors.
See the specification\(cqs \c
.UR https://gpuweb.github.io/gpuweb/#enumdef-gputextureformat
Texture Formats
.UE \c
\ section for all the available \f[CR]format\f[R] values.
.RS
.RS
.PP
\f[B]Note:\f[R] For the \f[CR]r32float\f[R], \f[CR]rg32float\f[R], and
\f[CR]rgba32float\f[R] formats to be used with blending, the
\f[CR]float32\-blendable\f[R] feature must be available in the device.
.RE
.RE
.TP
\f[B]writeMask\f[R] \f[I](optional)\f[R]
One or more bitwise flags defining the write mask to apply to the color
target state.
Possible flag values are:
.RS
.IP \(bu 2
\f[CR]GPUColorWrite.RED\f[R]
.IP \(bu 2
\f[CR]GPUColorWrite.GREEN\f[R]
.IP \(bu 2
\f[CR]GPUColorWrite.BLUE\f[R]
.IP \(bu 2
\f[CR]GPUColorWrite.ALPHA\f[R]
.IP \(bu 2
\f[CR]GPUColorWrite.ALL\f[R]
.PP
If omitted, \f[CR]writeMask\f[R] defaults to
\f[CR]GPUColorWrite.ALL\f[R].
.PP
Note that multiple flags can be specified by separating values with
bitwise OR, for example:
\f[CR]GPUColorWrite.RED | GPUColorWrite.ALPHA\f[R].
.RE
.RE
.SS \f[CR]multisample\f[R] object structure
The \f[CR]multisample\f[R] object can contain the following properties:
.TP
\f[B]alphaToCoverageEnabled\f[R] \f[I](optional)\f[R]
A boolean.
A value of \f[CR]true\f[R] indicates that a fragment\(cqs alpha channel
should be used to generate a sample coverage mask.
If omitted, \f[CR]alphaToCoverageEnabled\f[R] defaults to
\f[CR]false\f[R].
.TP
\f[B]count\f[R] \f[I](optional)\f[R]
A number that defines the number of samples per pixel.
The pipeline will be compatible only with attachment textures
(\f[CR]colorAttachment\f[R]s and \f[CR]depthStencilAttachment\f[R]s)
with matching \f[CR]sampleCounts\f[R] (see \f[CR]GPUTexture\f[R]).
.RS
.PP
If omitted, \f[CR]count\f[R] defaults to 1.
.RE
.TP
\f[B]mask\f[R] \f[I](optional)\f[R]
A bitmask that determines which samples are written to.
If omitted, \f[CR]mask\f[R] defaults to \f[CR]0xFFFFFFFF\f[R].
.RS
.PP
\f[B]Note:\f[R] \f[CR]colorAttachment\f[R] and
\f[CR]depthStencilAttachment\f[R] values are specified during
\f[CR]GPUCommandEncoder.beginRenderPass()\f[R] calls, when the
\f[CR]GPURenderPipeline\f[R] is actually used to perform a render pass.
.RE
.SS \f[CR]primitive\f[R] object structure
The \f[CR]primitive\f[R] object can contain the following properties:
.TP
\f[B]cullMode\f[R] \f[I](optional)\f[R]
An enumerated value that defines which polygon orientation will be
culled, if any.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqback\(dq\f[R]: Back\-facing polygons are culled.
.IP \(bu 2
\f[CR]\(dqfront\(dq\f[R]: Front\-facing polygons are culled.
.IP \(bu 2
\f[CR]\(dqnone\(dq\f[R]: No polygons are culled.
.PP
If omitted, \f[CR]cullMode\f[R] defaults to \f[CR]\(dqnone\(dq\f[R].
.RE
.TP
\f[B]frontFace\f[R] \f[I](optional)\f[R]
An enumerated value that defines which polygons are considered
front\-facing.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqccw\(dq\f[R]: Polygons with vertices whose framebuffer
coordinates are given in counter\-clockwise order.
.IP \(bu 2
\f[CR]\(dqcw\(dq\f[R]: Polygons with vertices whose framebuffer
coordinates are given in clockwise order.
.PP
If omitted, \f[CR]frontFace\f[R] defaults to \f[CR]\(dqccw\(dq\f[R].
.RS
.PP
\f[B]Note:\f[R] The \f[CR]frontFace\f[R] and \f[CR]cullMode\f[R] values
have no effect on the \f[CR]\(dqpoint\-list\(dq\f[R],
\f[CR]\(dqline\-list\(dq\f[R], or \f[CR]\(dqline\-strip\(dq\f[R]
topologies.
.RE
.RE
.TP
\f[B]stripIndexFormat\f[R] \f[I](optional)\f[R]
An enumerated value that determines the index buffer format and
primitive restart value in the case of pipelines with strip topologies
(\f[CR]\(dqline\-strip\(dq\f[R] or \f[CR]\(dqtriangle\-strip\(dq\f[R]).
The primitive restart value specifies which index value indicates that a
new primitive should be started rather than continuing to construct the
strip with the prior indexed vertices.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dquint16\(dq\f[R]: Indicates a byte size of 2 and a primitive
restart value of \f[CR]0xFFFF\f[R].
.IP \(bu 2
\f[CR]\(dquint32\(dq\f[R]: Indicates a byte size of 4 and a primitive
restart value of \f[CR]0xFFFFFFFF\f[R].
.PP
GPU primitive states that specify a strip primitive topology must
specify a strip index format if they are used for indexed draws (for
example, via \f[CR]GPURenderPassEncoder.drawIndexed()\f[R]) so that the
primitive restart value that will be used is known at pipeline creation
time.
Pipelines with list primitive topologies (\f[CR]\(dqline\-list\(dq\f[R],
\f[CR]\(dqpoint\-list\(dq\f[R], or \f[CR]\(dqtriangle\-list\(dq\f[R])
should not specify a \f[CR]stripIndexFormat\f[R] value.
They will instead use the index format passed to, for example,
\f[CR]GPURenderPassEncoder.setIndexBuffer()\f[R] when doing indexed
rendering.
.RE
.TP
\f[B]topology\f[R] \f[I](optional)\f[R]
An enumerated value that defines the type of primitive to be constructed
from the specified \f[CR]vertex\f[R] inputs.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqline\-list\(dq\f[R]: Each consecutive pair of two vertices
defines a line primitive.
.IP \(bu 2
\f[CR]\(dqline\-strip\(dq\f[R]: Each vertex after the first defines a
line primitive between it and the previous vertex.
.IP \(bu 2
\f[CR]\(dqpoint\-list\(dq\f[R]: Each vertex defines a point primitive.
.IP \(bu 2
\f[CR]\(dqtriangle\-list\(dq\f[R]: Each consecutive triplet of three
vertices defines a triangle primitive.
.IP \(bu 2
\f[CR]\(dqtriangle\-strip\(dq\f[R]: Each vertex after the first two
defines a triangle primitive between it and the previous two vertices.
.PP
If omitted, \f[CR]topology\f[R] defaults to
\f[CR]\(dqtriangle\-list\(dq\f[R].
.RE
.TP
\f[B]unclippedDepth\f[R] \f[I](optional)\f[R]
A boolean.
A value of \f[CR]true\f[R] indicates that depth clipping is disabled.
If omitted, \f[CR]unclippedDepth\f[R] defaults to \f[CR]false\f[R].
Note that to control depth clipping, the \f[CR]depth\-clip\-control\f[R]
feature must be enabled in the \f[CR]GPUDevice\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] The \f[CR]depth\-clip\-control\f[R] feature needs to be
enabled for the \f[CR]unclippedDepth\f[R] property to be used
successfully.
If not, a \f[CR]GPUValidationError\f[R] is generated.
.RE
.RE
.SS \f[CR]vertex\f[R] object structure
The \f[CR]vertex\f[R] object can contain the following properties:
.TP
\f[B]constants\f[R] \f[I](optional)\f[R]
A sequence of record types, with the structure \f[CR](id, value)\f[R],
representing override values for \c
.UR https://gpuweb.github.io/gpuweb/#typedefdef-gpupipelineconstantvalue
WGSL constants that can be overridden in the pipeline
.UE \c
\&.
These behave like ordered maps.
In each case, the \f[CR]id\f[R] is a key used to identify or select the
record, and the \f[CR]constant\f[R] is an enumerated value representing
a WGSL.
.RS
.PP
Depending on which constant you want to override, the \f[CR]id\f[R] may
take the form of the numeric ID of the constant, if one is specified, or
otherwise the constant\(cqs identifier name.
.PP
A code snippet providing override values for several overridable
constants might look like this:
.IP
.EX
({
  \f[I]// \&...\f[R]
  constants: {
    0: \f[B]false\f[R],
    1200: 3.0,
    1300: 2.0,
    width: 20,
    depth: \-1,
    height: 15,
  },
});
.EE
.RE
.TP
\f[B]entryPoint\f[R] \f[I](optional)\f[R]
The name of the function in the \f[CR]module\f[R] that this stage will
use to perform its work.
The corresponding shader function must have the \f[CR]\(atvertex\f[R]
attribute to be identified as this entry point.
See \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#entry-point-decl
Entry Point Declaration
.UE \c
\ for more information.
.RS
.PP
You can omit the \f[CR]entryPoint\f[R] property if your shader code
contains a single function with the \f[CR]\(atvertex\f[R] attribute set
\(em the browser will use this as the default entry point.
If \f[CR]entryPoint\f[R] is omitted and the browser cannot determine a
default entry point, a \f[CR]GPUValidationError\f[R] is generated and
the resulting \f[CR]GPURenderPipeline\f[R] will be invalid.
.RE
.TP
\f[B]module\f[R]
A \f[CR]GPUShaderModule\f[R] object containing the \c
.UR https://gpuweb.github.io/gpuweb/wgsl/
WGSL
.UE \c
\ code that this programmable stage will execute.
.TP
\f[B]buffers\f[R] \f[I](optional)\f[R]
An array of objects, each representing the expected layout of a vertex
buffer used in the pipeline.
Each object can contain the following properties:
.RS
.TP
\f[B]arrayStride\f[R]
A number representing the stride, in bytes, between the different
structures (e.g., vertices) inside the buffer.
.TP
\f[B]attributes\f[R]
An array of objects defining the layout of the vertex attributes within
each structure.
Each object has the following properties:
.RS
.TP
\f[B]format\f[R]
An enumerated value that specifies the format of the vertex.
For all the available values, see the \c
.UR https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat
\f[CR]GPUVertexFormat\f[R]
.UE \c
\ definition in the specification.
.TP
\f[B]offset\f[R]
A number specifying the offset, in bytes, from the beginning of the
structure to the data for the attribute.
.TP
\f[B]shaderLocation\f[R]
The numeric location associated with this attribute, which will
correspond with a \c
.UR https://gpuweb.github.io/gpuweb/wgsl/#input-output-locations
\f[CR]\(atlocation\f[R]
.UE \c
\ attribute declared in the WGSL code of the associated
\f[CR]GPUShaderModule\f[R] referenced in the \f[CR]vertex\f[R]
object\(cqs \f[CR]module\f[R] property.
.RE
.TP
\f[B]stepMode\f[R] \f[I](optional)\f[R]
An enumerated value that defines whether the separate structures inside
the buffer represent vertices or instances.
Possible values are:
.RS
.IP \(bu 2
\f[CR]\(dqinstance\(dq\f[R]: Each structure is an instance \(em the
address is advanced by \f[CR]arrayStride\f[R] for each instance.
.IP \(bu 2
\f[CR]\(dqvertex\(dq\f[R]: Each structure is a vertex \(em the address
is advanced by \f[CR]arrayStride\f[R] for each vertex, and reset between
instances.
.PP
If omitted, \f[CR]stepMode\f[R] defaults to \f[CR]\(dqvertex\(dq\f[R].
.RE
.RE
.SS Return value
A \f[CR]GPURenderPipeline\f[R] object instance.
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]createRenderPipeline()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and an invalid
\f[CR]GPURenderPipeline\f[R] object is returned:
.IP \(bu 2
For \f[CR]depthStencil\f[R] objects:
.RS 2
.IP \(bu 2
\f[CR]format\f[R] is a \c
.UR https://gpuweb.github.io/gpuweb/#depth-or-stencil-format
\f[CR]depth\-or\-stencil\f[R]
.UE \c
\ format.
.IP \(bu 2
The \f[CR]depthBias\f[R], \f[CR]depthBiasClamp\f[R], and
\f[CR]depthBiasSlopeScale\f[R] properties are set to 0 for line and
point topologies, i.e., if \f[CR]topology\f[R] is set to
\f[CR]\(dqline\-list\(dq\f[R], \f[CR]\(dqline\-strip\(dq\f[R], or
\f[CR]\(dqpoint\-list\(dq\f[R].
.IP \(bu 2
If \f[CR]depthWriteEnabled\f[R] is \f[CR]true\f[R] or
\f[CR]depthCompare\f[R] is not \f[CR]\(dqalways\(dq\f[R],
\f[CR]format\f[R] has a depth component.
.IP \(bu 2
If \f[CR]stencilFront\f[R] or \f[CR]stencilBack\f[R]\(cqs properties are
not at their default values, \f[CR]format\f[R] has a stencil component.
.RE
.IP \(bu 2
For \f[CR]fragment\f[R] objects:
.RS 2
.IP \(bu 2
\f[CR]targets.length\f[R] is less than or equal to the
\f[CR]GPUDevice\f[R]\(cqs \f[CR]maxColorAttachments\f[R] limit.
.IP \(bu 2
For each \f[CR]target\f[R], \f[CR]writeMask\f[R]\(cqs numeric equivalent
is less than 16.
.IP \(bu 2
If any of the used blend factor operations use the source alpha channel
(for example \f[CR]\(dqsrc\-alpha\-saturated\(dq\f[R]), the output has
an alpha channel (that is, it must be a \f[CR]vec4\f[R]).
.IP \(bu 2
If the \f[CR]src1\f[R], \f[CR]one\-minus\-src1\f[R],
\f[CR]src1\-alpha\f[R], or \f[CR]one\-minus\-src1\-alpha\f[R] blend
factor operations are used, the \f[CR]dual\-source\-blending\f[R]
feature is enabled.
.IP \(bu 2
If the \f[CR]entryPoint\f[R] property is omitted, the shader code
contains a single fragment shader entry point function for the browser
to use as the default entry point.
.RE
.IP \(bu 2
For \f[CR]primitive\f[R] objects:
.RS 2
.IP \(bu 2
If the \f[CR]unclippedDepth\f[R] property is used, the
\f[CR]depth\-clip\-control\f[R] feature is enabled.
.RE
.IP \(bu 2
For \f[CR]vertex\f[R] objects:
.RS 2
.IP \(bu 2
If the \f[CR]entryPoint\f[R] property is omitted, the shader code
contains a single vertex shader entry point function for the browser to
use as the default entry point.
.RE
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Basic example
Our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
\ provides an example of the construction of a valid render pipeline
descriptor object, which is then used to create a
\f[CR]GPURenderPipeline\f[R] via a \f[CR]createRenderPipeline()\f[R]
call.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] vertexBuffers = [
  {
    attributes: [
      {
        shaderLocation: 0, \f[I]// position\f[R]
        offset: 0,
        format: \(dqfloat32x4\(dq,
      },
      {
        shaderLocation: 1, \f[I]// color\f[R]
        offset: 16,
        format: \(dqfloat32x4\(dq,
      },
    ],
    arrayStride: 32,
    stepMode: \(dqvertex\(dq,
  },
];

\f[B]const\f[R] pipelineDescriptor = {
  vertex: {
    module: shaderModule,
    entryPoint: \(dqvertex_main\(dq,
    buffers: vertexBuffers,
  },
  fragment: {
    module: shaderModule,
    entryPoint: \(dqfragment_main\(dq,
    targets: [
      {
        format: navigator.gpu.getPreferredCanvasFormat(),
      },
    ],
  },
  primitive: {
    topology: \(dqtriangle\-list\(dq,
  },
  layout: \(dqauto\(dq,
};

\f[B]const\f[R] renderPipeline = device.createRenderPipeline(pipelineDescriptor);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
