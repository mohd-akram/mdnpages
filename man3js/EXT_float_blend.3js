.\" Automatically generated by Pandoc 3.4
.\"
.TH "EXT_float_blend" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
EXT_float_blend \- EXT_float_blend extension
.SH SYNOPSIS
The WebGL API\[cq]s \f[CR]EXT_float_blend\f[R] extension allows blending
and draw buffers with 32\-bit floating\-point components.
.PP
WebGL extensions are available using the
\f[CR]WebGLRenderingContext.getExtension()\f[R] method.
For more information, see also Using Extensions in the WebGL tutorial.
.RS
.PP
\f[B]Note:\f[R] This extension is available to both, WebGL1 and WebGL2
contexts.
However, to use it, you need to enable the use of 32\-bit
floating\-point draw buffers by enabling the extension
\f[CR]WEBGL_color_buffer_float\f[R] (for WebGL1) or
\f[CR]EXT_color_buffer_float\f[R] (for WebGL2).
Doing so automatically enables \f[CR]EXT_float_blend\f[R] as well, if
and only if \f[CR]EXT_float_blend\f[R] is also supported.
Support for \f[CR]EXT_color_buffer_float\f[R] does not imply support for
\f[CR]EXT_float_blend\f[R].
.RE
.PP
With this extension enabled, calling \f[CR]drawArrays()\f[R] or
\f[CR]drawElements()\f[R] with blending enabled and a draw buffer with
32\-bit floating\-point components will no longer result in an
\f[CR]INVALID_OPERATION\f[R] error.
.SH USAGE NOTES
On devices that support the \f[CR]EXT_float_blend\f[R] extension, it is
automatically, implicitly, enabled when any one or more of
\f[CR]EXT_color_buffer_float\f[R], \f[CR]OES_texture_float\f[R], or
\f[CR]WEBGL_color_buffer_float\f[R] are enabled.
This ensures that content written before \f[CR]EXT_float_blend\f[R] was
exposed by WebGL will function as expected.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] gl = canvas.getContext(\[dq]webgl2\[dq]);

\f[I]// enable necessary extensions\f[R]
gl.getExtension(\[dq]EXT_color_buffer_float\[dq]);
gl.getExtension(\[dq]EXT_float_blend\[dq]);

\f[B]const\f[R] tex = gl.createTexture();
gl.bindTexture(gl.TEXTURE_2D, tex);

\f[I]// use floating point format\f[R]
gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, 1, 1, 0, gl.RGBA, gl.FLOAT, \f[B]null\f[R]);

\f[B]const\f[R] fb = gl.createFramebuffer();
gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
gl.framebufferTexture2D(
  gl.FRAMEBUFFER,
  gl.COLOR_ATTACHMENT0,
  gl.TEXTURE_2D,
  tex,
  0,
);

\f[I]// enable blending\f[R]
gl.enable(gl.BLEND);

gl.drawArrays(gl.POINTS, 0, 1);
\f[I]// won\[aq]t throw gl.INVALID_OPERATION with the extension enabled\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
WebGL API
.IP \[bu] 2
Using WebGL extensions
.IP \[bu] 2
WebGL tutorial
.IP \[bu] 2
\f[CR]WebGLRenderingContext.getExtension()\f[R]
.IP \[bu] 2
\f[CR]EXT_color_buffer_float\f[R]
.IP \[bu] 2
\f[CR]WEBGL_color_buffer_float\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.drawArrays()\f[R]
.IP \[bu] 2
\f[CR]WebGLRenderingContext.drawElements()\f[R]
