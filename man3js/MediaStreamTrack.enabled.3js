.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "MediaStreamTrack.enabled" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaStreamTrack.enabled \- MediaStreamTrack: enabled property
.SH SYNOPSIS
The \f[B]\f[CB]enabled\f[B]\f[R] property of the
\f[CR]MediaStreamTrack\f[R] interface is a Boolean value which is
\f[CR]true\f[R] if the track is allowed to render the source stream or
\f[CR]false\f[R] if it is not.
This can be used to intentionally mute a track.
.PP
When enabled, a track\[cq]s data is output from the source to the
destination; otherwise, empty frames are output.
.PP
In the case of audio, a disabled track generates frames of silence (that
is, frames in which every sample\[cq]s value is 0).
For video tracks, every frame is filled entirely with black pixels.
.PP
The value of \f[CR]enabled\f[R], in essence, represents what a typical
user would consider the muting state for a track, whereas the
\f[CR]muted\f[R] property indicates a state in which the track is
temporarily unable to output data, such as a scenario in which frames
have been lost in transit.
.RS
.PP
\f[B]Note:\f[R] If the track has been disconnected, the value of this
property can be changed, but has no effect.
.RE
.SH VALUE
When \f[CR]true\f[R], \f[CR]enabled\f[R] indicates that the track is
permitted to render its actual media to the output.
When \f[CR]enabled\f[R] is set to \f[CR]false\f[R], the track only
generates empty frames.
.PP
Empty audio frames have every sample\[cq]s value set to 0.
Empty video frames have every pixel set to black.
.RS
.PP
\f[B]Note:\f[R] When implementing a mute/unmute feature, you should use
the \f[CR]enabled\f[R] property.
.RE
.SH USAGE NOTES
If the \f[CR]MediaStreamTrack\f[R] represents the video input from a
camera, disabling the track by setting \f[CR]enabled\f[R] to
\f[CR]false\f[R] also updates device activity indicators to show that
the camera is not currently recording or streaming.
For example, the green \[lq]in use\[rq] light next to the camera in iMac
and MacBook computers turns off while the track is muted in this way.
.SH EXAMPLE
This example demonstrates a \f[CR]click\f[R] event handler for a pause
button.
.IP
.EX
pauseButton.onclick = (evt) \f[B]=>\f[R] {
  \f[B]const\f[R] newState = !myAudioTrack.enabled;

  pauseButton.innerHTML = newState ? \[dq]&#x25B6;&#xFE0F;\[dq] : \[dq]&#x23F8;&#xFE0F;\[dq];
  myAudioTrack.enabled = newState;
};
.EE
.PP
This creates a variable, \f[CR]newState\f[R], which is the opposite of
the current value of \f[CR]enabled\f[R], then uses that to select either
the Emoji character for the \[lq]play\[rq] icon or the character for the
\[lq]pause\[rq] icon as the new \f[CR]innerHTML\f[R] of the pause
button\[cq]s element.
.PP
Finally, the new value of \f[CR]enabled\f[R] is saved, making the change
take effect.
.SH SEE ALSO
.IP \[bu] 2
Media Capture and Streams API
.IP \[bu] 2
\f[CR]MediaStream\f[R]
.IP \[bu] 2
\f[CR]MediaStreamTrack\f[R]
.IP \[bu] 2
WebRTC
