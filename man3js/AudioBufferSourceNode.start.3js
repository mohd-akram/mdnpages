.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "AudioBufferSourceNode.start" "JS" "December 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioBufferSourceNode.start \- AudioBufferSourceNode: start() method
.SH SYNOPSIS
The \f[CR]start()\f[R] method of the \f[CR]AudioBufferSourceNode\f[R]
Interface is used to schedule playback of the audio data contained in
the buffer, or to begin playback immediately.
.SH SYNTAX
.IP
.EX
start(when)
start(when, offset)
start(when, offset, duration)
.EE
.SS Parameters
.TP
\f[B]when\f[R] \f[I](optional)\f[R]
The time, in seconds, at which the sound should begin to play, in the
same time coordinate system used by the \f[CR]AudioContext\f[R].
If \f[CR]when\f[R] is less than (\f[CR]AudioContext.currentTime\f[R], or
if it\[cq]s 0, the sound begins to play at once.
\f[B]The default value is 0.\f[R]
.TP
\f[B]offset\f[R] \f[I](optional)\f[R]
An offset, specified as the number of seconds in the same time
coordinate system as the \f[CR]AudioContext\f[R], to the time within the
audio buffer that playback should begin.
For example, to start playback halfway through a 10\-second audio clip,
\f[CR]offset\f[R] should be 5.
The default value, 0, will begin playback at the beginning of the audio
buffer, and offsets past the end of the audio which will be played
(based on the audio buffer\[cq]s \f[CR]duration\f[R] and/or the
\f[CR]loopEnd\f[R] property) are silently clamped to the maximum value
allowed.
The computation of the offset into the sound is performed using the
sound buffer\[cq]s natural sample rate, rather than the current playback
rate, so even if the sound is playing at twice its normal speed, the
midway point through a 10\-second audio buffer is still 5.
.TP
\f[B]duration\f[R] \f[I](optional)\f[R]
The duration of the sound to be played, specified in seconds.
If this parameter isn\[cq]t specified, the sound plays until it reaches
its natural conclusion or is stopped using the \f[CR]stop()\f[R] method.
Using this parameter is functionally identical to calling
\f[CR]start(when, offset)\f[R] and then calling
\f[CR]stop(when+duration)\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if a negative value was specified for one or more of the three
time parameters.
Please don\[cq]t attempt to tamper with the laws of temporal physics.
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if \f[CR]start()\f[R] has already been called.
You can only call this function once during the lifetime of an
\f[CR]AudioBufferSourceNode\f[R].
.SH EXAMPLES
The most simple example just starts the audio buffer playing from the
beginning \[em] you don\[cq]t need to specify any parameters in this
case:
.IP
.EX
source.start();
.EE
.PP
The following more complex example will, 1 second from now, start
playing 10 seconds worth of sound starting 3 seconds into the audio
buffer.
.IP
.EX
source.start(audioCtx.currentTime + 1, 3, 10);
.EE
.RS
.PP
\f[B]Note:\f[R] For a more complete example showing \f[CR]start()\f[R]
in use, check out our \f[CR]AudioContext.decodeAudioData()\f[R] example.
You can also \c
.UR https://mdn.github.io/webaudio-examples/decode-audio-data/promise/
try the example live
.UE \c
, and have a look at \c
.UR https://github.com/mdn/webaudio-examples/tree/main/decode-audio-data
the example source
.UE \c
\&.
.RE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
