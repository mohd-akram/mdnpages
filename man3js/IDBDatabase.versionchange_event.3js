.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "IDBDATABASE.VERSIONCHANGE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBDatabase.versionchange_event \- IDBDatabase: versionchange event
.SH SYNOPSIS
The \f[CR]versionchange\f[R] event is fired when a database structure
change (\f[CR]upgradeneeded\f[R] event send on an
\f[CR]IDBOpenDBRequest\f[R] or \f[CR]IDBFactory.deleteDatabase\f[R]) was
requested elsewhere (most probably in another window/tab on the same
computer).
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqversionchange\(dq, (event) => { })

onversionchange = (event) => { }
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This example opens a database and, on success, adds a listener to
\f[CR]versionchange\f[R]:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\(dqNonexistent\(dq, 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;
  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

dBOpenRequest.addEventListener(\(dqsuccess\(dq, (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;
  db.addEventListener(\(dqversionchange\(dq, (event) \f[B]=>\f[R] {
    console.log(\(dqThe version of this database has changed\(dq);
  });
});
.EE
.PP
The same example, using the \f[CR]onversionchange\f[R] event handler
property:
.IP
.EX
\f[I]// Open the database\f[R]
\f[B]const\f[R] dBOpenRequest = window.indexedDB.open(\(dqNonexistent\(dq, 4);

dBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;
  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\(dqtoDoList\(dq, {
    keyPath: \(dqtaskTitle\(dq,
  });

  \f[I]// define what data items the objectStore will contain\f[R]
  objectStore.createIndex(\(dqhours\(dq, \(dqhours\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqminutes\(dq, \(dqminutes\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqday\(dq, \(dqday\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqmonth\(dq, \(dqmonth\(dq, { unique: \f[B]false\f[R] });
  objectStore.createIndex(\(dqyear\(dq, \(dqyear\(dq, { unique: \f[B]false\f[R] });
};

dBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;
  db.onversionchange = (event) \f[B]=>\f[R] {
    console.log(\(dqThe version of this database has changed\(dq);
  };
};
.EE
.SH SEE ALSO
.IP \(bu 2
Using IndexedDB
