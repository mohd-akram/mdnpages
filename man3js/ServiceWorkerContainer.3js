.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ServiceWorkerContainer" "JS" "February 5, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerContainer \- ServiceWorkerContainer
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]ServiceWorkerContainer\f[B]\f[R] interface of the Service
Worker API provides an object representing the service worker as an
overall unit in the network ecosystem, including facilities to register,
unregister and update service workers, and access the state of service
workers and their registrations.
.PP
Most importantly, it exposes the
\f[CR]ServiceWorkerContainer.register()\f[R] method used to register
service workers, and the \f[CR]ServiceWorkerContainer.controller\f[R]
property used to determine whether or not the current page is actively
controlled.
.SH INSTANCE PROPERTIES
.TP
\f[B]ServiceWorkerContainer.controller\f[R] \f[I](read\-only)\f[R]
Returns a \f[CR]ServiceWorker\f[R] object if its state is
\f[CR]activating\f[R] or \f[CR]activated\f[R] (the same object returned
by \f[CR]ServiceWorkerRegistration.active\f[R]).
This property returns \f[CR]null\f[R] during a force\-refresh request
(\f[I]Shift\f[R] + refresh) or if there is no active worker.
.TP
\f[B]ServiceWorkerContainer.ready\f[R] \f[I](read\-only)\f[R]
Provides a way of delaying code execution until a service worker is
active.
It returns a \f[CR]Promise\f[R] that will never reject, and which waits
indefinitely until the \f[CR]ServiceWorkerRegistration\f[R] associated
with the current page has an \f[CR]ServiceWorkerRegistration.active\f[R]
worker.
Once that condition is met, it resolves with the
\f[CR]ServiceWorkerRegistration\f[R].
.SH INSTANCE METHODS
.TP
\f[B]ServiceWorkerContainer.getRegistration()\f[R]
Gets a \f[CR]ServiceWorkerRegistration\f[R] object whose scope matches
the provided document URL.
The method returns a \f[CR]Promise\f[R] that resolves to a
\f[CR]ServiceWorkerRegistration\f[R] or \f[CR]undefined\f[R].
.TP
\f[B]ServiceWorkerContainer.getRegistrations()\f[R]
Returns all \f[CR]ServiceWorkerRegistration\f[R] objects associated with
a \f[CR]ServiceWorkerContainer\f[R] in an array.
The method returns a \f[CR]Promise\f[R] that resolves to an array of
\f[CR]ServiceWorkerRegistration\f[R].
.TP
\f[B]ServiceWorkerContainer.register()\f[R]
Creates or updates a \f[CR]ServiceWorkerRegistration\f[R] for the given
\f[CR]scriptURL\f[R].
.TP
\f[B]ServiceWorkerContainer.startMessages()\f[R]
explicitly starts the flow of messages being dispatched from a service
worker to pages under its control (e.g.\ sent via
\f[CR]Client.postMessage()\f[R]).
This can be used to react to sent messages earlier, even before that
page\[cq]s content has finished loading.
.SH EVENTS
.TP
\f[B]controllerchange\f[R]
Occurs when the document\[cq]s associated
\f[CR]ServiceWorkerRegistration\f[R] acquires a new \f[CR]active\f[R]
worker.
.TP
\f[B]error\f[R] \f[I](deprecated)\f[R] \f[I](non\-standard)\f[R]
Fired whenever an error occurs in the associated service workers.
.TP
\f[B]message\f[R]
Occurs when incoming messages are received by the
\f[CR]ServiceWorkerContainer\f[R] object (e.g.\ via a
\f[CR]MessagePort.postMessage()\f[R] call).
.TP
\f[B]messageerror\f[R]
Occurs when incoming messages can not deserialized by the
\f[CR]ServiceWorkerContainer\f[R] object (e.g.\ via a
\f[CR]MessagePort.postMessage()\f[R] call).
.SH EXAMPLES
The example below first checks to see if the browser supports service
workers.
If supported, the code registers the service worker and determines if
the page is actively controlled by the service worker.
If it isn\[cq]t, it prompts the user to reload the page so the service
worker can take control.
The code also reports any registration failures.
.IP
.EX
\f[B]if\f[R] (\[dq]serviceWorker\[dq] \f[B]in\f[R] navigator) {
  \f[I]// Register a service worker hosted at the root of the\f[R]
  \f[I]// site using the default scope.\f[R]
  navigator.serviceWorker
    .register(\[dq]/sw.js\[dq])
    .then((registration) \f[B]=>\f[R] {
      console.log(\[dq]Service worker registration succeeded:\[dq], registration);

      \f[I]// At this point, you can optionally do something\f[R]
      \f[I]// with registration. See https://developer.mozilla.org/en\-US/docs/Web/API/ServiceWorkerRegistration\f[R]
    })
    .catch((error) \f[B]=>\f[R] {
      console.error(\[ga]Service worker registration failed: ${error}\[ga]);
    });

  \f[I]// Independent of the registration, let\[aq]s also display\f[R]
  \f[I]// information about whether the current page is controlled\f[R]
  \f[I]// by an existing service worker, and when that\f[R]
  \f[I]// controller changes.\f[R]

  \f[I]// First, do a one\-off check if there\[aq]s currently a\f[R]
  \f[I]// service worker in control.\f[R]
  \f[B]if\f[R] (navigator.serviceWorker.controller) {
    console.log(
      \[dq]This page is currently controlled by:\[dq],
      navigator.serviceWorker.controller,
    );
  }

  \f[I]// Then, register a handler to detect when a new or\f[R]
  \f[I]// updated service worker takes control.\f[R]
  navigator.serviceWorker.oncontrollerchange = () \f[B]=>\f[R] {
    console.log(
      \[dq]This page is now controlled by\[dq],
      navigator.serviceWorker.controller,
    );
  };
} \f[B]else\f[R] {
  console.log(\[dq]Service workers are not supported.\[dq]);
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \[bu] 2
Using web workers
