.\" Automatically generated by Pandoc 3.4
.\"
.TH "HTMLImageElement.naturalHeight" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLImageElement.naturalHeight \- HTMLImageElement: naturalHeight
property
.SH SYNOPSIS
The \f[CR]HTMLImageElement\f[R] interface\[cq]s
\f[B]\f[CB]naturalHeight\f[B]\f[R] property is a read\-only value which
returns the intrinsic (natural), density\-corrected height of the image
in CSS pixels.
.PP
This is the height the image is if drawn with nothing constraining its
height; if you don\[cq]t specify a height for the image, or place the
image inside a container that either limits or expressly specifies the
image height, it will be rendered this tall.
.RS
.PP
\f[B]Note:\f[R] Most of the time the natural height is the actual height
of the image sent by the server.
Nevertheless, browsers can modify an image before pushing it to the
renderer.
For example, Chrome \c
.UR https://crbug.com/1187043#c7
degrades the resolution of images on low\-end devices
.UE \c
\&.
In such cases, \f[CR]naturalHeight\f[R] will consider the height of the
image modified by such browser interventions as the natural height, and
returns this value.
.RE
.SH VALUE
An integer value indicating the intrinsic height, in CSS pixels, of the
image.
This is the height at which the image is naturally drawn when no
constraint or specific value is established for the image.
This natural height is corrected for the pixel density of the device on
which it\[cq]s being presented, unlike \f[CR]height\f[R].
.PP
If the intrinsic height is not available\[em]either because the image
does not specify an intrinsic height or because the image data is not
available in order to obtain this information, \f[CR]naturalHeight\f[R]
returns 0.
.SH EXAMPLES
This example displays both the natural, density\-adjusted size of an
image as well as its rendered size as altered by the page\[cq]s CSS and
other factors.
.SS HTML
.IP
.EX
<\f[B]div\f[R] class=\[dq]box\[dq]>
  <\f[B]img\f[R]
    src=\[dq]/en\-US/docs/Web/HTML/Element/img/clock\-demo\-400px.png\[dq]
    class=\[dq]image\[dq]
    alt=\[dq]A round wall clock with a white dial and black numbers\[dq] />
</\f[B]div\f[R]>
<\f[B]pre\f[R]></\f[B]pre\f[R]>
.EE
.PP
The HTML features a 400x398 pixel image which is placed inside a
\f[CR]<div>\f[R].
.SS CSS
.IP
.EX
\&.box {
  \f[B]width\f[R]: 200px;
  \f[B]height\f[R]: 200px;
}

\&.image {
  \f[B]width\f[R]: 100%;
}
.EE
.PP
The main thing of note in the CSS above is that the style used for the
container the image will be drawn in is 200px wide, and the image will
be drawn to fill its width (100%).
.SS JavaScript
.IP
.EX
\f[B]const\f[R] output = document.querySelector(\[dq]pre\[dq]);
\f[B]const\f[R] image = document.querySelector(\[dq]img\[dq]);

image.addEventListener(\[dq]load\[dq], (event) \f[B]=>\f[R] {
  \f[B]const\f[R] { naturalWidth, naturalHeight, width, height } = image;
  output.textContent = \[ga]
Natural size: ${naturalWidth} x ${naturalHeight} pixels
Displayed size: ${width} x ${height} pixels
\[ga];
});
.EE
.PP
The JavaScript code dumps the natural and as\-displayed sizes into the
\f[CR]<pre>\f[R].
This is done in response to the images\[cq]s \f[CR]load\f[R] event
handler, in order to ensure that the image is available before
attempting to examine its width and height.
.SS Result
