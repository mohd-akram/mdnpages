.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERPASSENCODER.SETVIEWPORT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderPassEncoder.setViewport \- GPURenderPassEncoder: setViewport()
method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]setViewport()\f[B]\f[R] method of the
\f[CR]GPURenderPassEncoder\f[R] interface sets the viewport used during
the rasterization stage to linearly map from normalized device
coordinates to viewport coordinates.
.SH SYNTAX
.IP
.EX
setViewport(x, y, width, height, minDepth, maxDepth)
.EE
.SS Parameters
.TP
\f[B]x\f[R]
A number representing the minimum X value of the viewport, in pixels.
.TP
\f[B]y\f[R]
A number representing the minimum Y value of the viewport, in pixels.
.TP
\f[B]width\f[R]
A number representing the width of the viewport, in pixels.
.TP
\f[B]height\f[R]
A number representing the height of the viewport, in pixels.
.TP
\f[B]minDepth\f[R]
A number representing the minimum depth value of the viewport.
.TP
\f[B]maxDepth\f[R]
A number representing the maximum depth value of the viewport.
.RS
.PP
\f[B]Note:\f[R] If a \f[CR]setViewport()\f[R] call is not made, the
default values are
\f[CR](0, 0, attachment width, attachment height, 0, 1)\f[R] for each
render pass.
.RE
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]setViewport()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the
\f[CR]GPURenderPassEncoder\f[R] becomes invalid:
.IP \(bu 2
\f[CR]x\f[R], \f[CR]y\f[R], \f[CR]width\f[R], and \f[CR]height\f[R] are
all greater than or equal to 0.
.IP \(bu 2
\f[CR]x\f[R] + \f[CR]width\f[R] is less than or equal to the width of
the render pass\(cqs render attachments (see note below).
.IP \(bu 2
\f[CR]y\f[R] + \f[CR]height\f[R] is less than or equal to the height of
the render pass\(cqs render attachments (see note below).
.IP \(bu 2
\f[CR]minDepth\f[R] and \f[CR]maxDepth\f[R] are both inside the range
0.0\(en1.0 inclusive.
.IP \(bu 2
\f[CR]minDepth\f[R] is less than \f[CR]maxDepth\f[R].
.RS
.PP
\f[B]Note:\f[R] See the color and depth/stencil attachments specified in
the descriptor of \f[CR]GPUCommandEncoder.beginRenderPass()\f[R]; the
width and height are based on that of the \f[CR]GPUTexture\f[R] that
their \f[CR]view\f[R]s originate from.
.RE
.SH EXAMPLES
.SS Basic snippet
In a typical canvas render, the following could be used to halve the
width and height of the rendered graphics:
.IP
.EX
passEncoder.setViewport(0, 0, canvas.width / 2, canvas.height / 2, 0, 1);
.EE
.SS In context
In the WebGPU Samples \c
.UR https://webgpu.github.io/webgpu-samples/samples/reversedZ/
reversedZ example
.UE \c
, \f[CR]setViewport\f[R] is used several times to set the viewport for
the different render passes.
Study the example code listing for the full context.
.PP
For example:
.IP
.EX
\f[I]// \&...\f[R]

colorPass.setViewport(
  (canvas.width * m) / 2,
  0,
  canvas.width / 2,
  canvas.height,
  0,
  1,
);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
