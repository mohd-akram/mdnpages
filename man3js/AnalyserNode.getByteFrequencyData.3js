.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ANALYSERNODE.GETBYTEFREQUENCYDATA" "3JS" "July 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AnalyserNode.getByteFrequencyData \- AnalyserNode:
getByteFrequencyData() method
.SH SYNOPSIS
The \f[B]\f[CB]getByteFrequencyData()\f[B]\f[R] method of the
\f[CR]AnalyserNode\f[R] interface copies the current frequency data into
a \f[CR]Uint8Array\f[R] (unsigned byte array) passed into it.
.PP
The frequency data is composed of integers on a scale from 0 to 255.
.PP
Each item in the array represents the decibel value for a specific
frequency.
The frequencies are spread linearly from 0 to 1/2 of the sample rate.
For example, for \f[CR]48000\f[R] sample rate, the last item of the
array will represent the decibel value for \f[CR]24000\f[R] Hz.
.PP
If the array has fewer elements than the
\f[CR]AnalyserNode.frequencyBinCount\f[R], excess elements are dropped.
If it has more elements than needed, excess elements are ignored.
.SH SYNTAX
.IP
.EX
getByteFrequencyData(array)
.EE
.SS Parameters
.TP
\f[B]array\f[R]
The \f[CR]Uint8Array\f[R] that the frequency domain data will be copied
to.
If the array has fewer elements than the
\f[CR]AnalyserNode.frequencyBinCount\f[R], excess elements are dropped.
If it has more elements than needed, excess elements are ignored.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
The following example shows basic usage of an \f[CR]AudioContext\f[R] to
create an \f[CR]AnalyserNode\f[R], then \f[CR]requestAnimationFrame\f[R]
and \f[CR]<canvas>\f[R] to collect frequency data repeatedly and draw a
\(lqwinamp bar graph style\(rq output of the current audio input.
For more complete applied examples/information, check out our \c
.UR https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR https://github.com/mdn/webaudio-examples/blob/main/voice-change-o-matic/scripts/app.js#L108-L193
app.js lines 108\(en193
.UE \c
\ for relevant code).
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();
\f[B]const\f[R] analyser = audioCtx.createAnalyser();

\f[I]// \&...\f[R]

analyser.fftSize = 256;
\f[B]const\f[R] bufferLength = analyser.frequencyBinCount;
console.log(bufferLength);
\f[B]const\f[R] dataArray = \f[B]new\f[R] Uint8Array(bufferLength);

canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);

\f[B]function\f[R] draw() {
  drawVisual = requestAnimationFrame(draw);

  analyser.getByteFrequencyData(dataArray);

  canvasCtx.fillStyle = \(dqrgb(0 0 0)\(dq;
  canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

  \f[B]const\f[R] barWidth = (WIDTH / bufferLength) * 2.5;
  \f[B]let\f[R] barHeight;
  \f[B]let\f[R] x = 0;

  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < bufferLength; i++) {
    barHeight = dataArray[i];

    canvasCtx.fillStyle = \(gargb(${barHeight + 100} 50 50)\(ga;
    canvasCtx.fillRect(x, HEIGHT \- barHeight / 2, barWidth, barHeight / 2);

    x += barWidth + 1;
  }
}

draw();
.EE
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
