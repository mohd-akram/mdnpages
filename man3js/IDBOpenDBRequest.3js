.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "IDBOpenDBRequest" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBOpenDBRequest \- IDBOpenDBRequest
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]IDBOpenDBRequest\f[B]\f[R] interface of the IndexedDB API
provides access to the results of requests to open or delete databases
(performed using \f[CR]IDBFactory.open\f[R] and
\f[CR]IDBFactory.deleteDatabase\f[R]), using specific event handler
attributes.
.SH INSTANCE PROPERTIES
\f[I]Also inherits properties from its parents \f[CI]IDBRequest\f[I] and
\f[CI]EventTarget\f[I]\f[R].
.SH INSTANCE METHODS
\f[I]No methods, but inherits methods from its parents
\f[CI]IDBRequest\f[I] and \f[CI]EventTarget\f[I].\f[R]
.SH EVENTS
\f[I]Events defined on parent interfaces, \f[CI]IDBRequest\f[I] and
\f[CI]EventTarget\f[I], can also be dispatched on
\f[CI]IDBOpenDBRequest\f[I] objects.\f[R]
.PP
Listen to these generic and specific events using
\f[CR]addEventListener()\f[R] or by assigning an event listener to the
\f[CR]oneventname\f[R] property of this interface.
.PP
Events specific to this interface are:
.TP
\f[B]blocked\f[R]
Fired when an open connection to a database is blocking a
\f[CR]versionchange\f[R] transaction on the same database.
Also available via the \f[CR]onblocked\f[R] property.
.TP
\f[B]upgradeneeded\f[R]
Fired when an attempt was made to open a database with a version number
higher than its current version.
Also available via the \f[CR]onupgradeneeded\f[R] property.
.SH EXAMPLE
In the following example you can see the onupgradeneeded handler being
used to update the database structure if a database with a higher
version number is loaded.
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
\&.)
.IP
.EX
\f[B]let\f[R] db;

\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

\f[I]// these event handlers act on the database being opened.\f[R]
DBOpenRequest.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Error loading database.\[dq];
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db\f[R]
  \f[I]// variable. This is used a lot below\f[R]
  db = DBOpenRequest.result;

  \f[I]// Run the displayData() function to populate the task\f[R]
  \f[I]// list with all the to\-do list data already in the IDB\f[R]
  displayData();
};

\f[I]// This event handles the event whereby a new version of\f[R]
\f[I]// the database needs to be created Either one has not\f[R]
\f[I]// been created before, or a new version number has been\f[R]
\f[I]// submitted via the window.indexedDB.open line above\f[R]
\f[I]// it is only implemented in recent browsers\f[R]
DBOpenRequest.onupgradeneeded = (event) \f[B]=>\f[R] {
  \f[B]const\f[R] db = event.target.result;

  db.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Error loading database.\[dq];
  };

  \f[I]// Create an objectStore for this database\f[R]
  \f[B]const\f[R] objectStore = db.createObjectStore(\[dq]toDoList\[dq], {
    keyPath: \[dq]taskTitle\[dq],
  });

  \f[I]// define what data items the objectStore will contain\f[R]

  objectStore.createIndex(\[dq]hours\[dq], \[dq]hours\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]minutes\[dq], \[dq]minutes\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]day\[dq], \[dq]day\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]month\[dq], \[dq]month\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]year\[dq], \[dq]year\[dq], { unique: \f[B]false\f[R] });
  objectStore.createIndex(\[dq]notified\[dq], \[dq]notified\[dq], { unique: \f[B]false\f[R] });
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
