.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUQUEUE.WRITEBUFFER" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUQueue.writeBuffer \- GPUQueue: writeBuffer() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]writeBuffer()\f[B]\f[R] method of the \f[CR]GPUQueue\f[R]
interface writes a provided data source into a given
\f[CR]GPUBuffer\f[R].
.PP
This is a convenience function, which provides an alternative to setting
buffer data via buffer mapping and buffer\-to\-buffer copies.
It lets the user agent determine the most efficient way to copy the data
over.
.SH SYNTAX
.IP
.EX
writeBuffer(buffer, bufferOffset, data, dataOffset, size)
.EE
.SS Parameters
.TP
\f[B]buffer\f[R]
A \f[CR]GPUBuffer\f[R] object representing the buffer to write data to.
.TP
\f[B]bufferOffset\f[R]
A number representing the offset, in bytes, to start writing the data at
inside the \f[CR]GPUBuffer\f[R].
.TP
\f[B]data\f[R]
An object representing the data source to write into the
\f[CR]GPUBuffer\f[R].
This can be an \f[CR]ArrayBuffer\f[R], \f[CR]TypedArray\f[R], or
\f[CR]DataView\f[R].
.TP
\f[B]dataOffset\f[R] \f[I](optional)\f[R]
A number representing the offset to start writing the data from inside
the data source.
This value is a number of elements if \f[CR]data\f[R] is a
\f[CR]TypedArray\f[R], and a number of bytes if not.
If omitted, \f[CR]dataOffset\f[R] defaults to 0.
.TP
\f[B]size\f[R] \f[I](optional)\f[R]
A number representing the size of the content to write from
\f[CR]data\f[R] to \f[CR]buffer\f[R].
This value is a number of elements if \f[CR]data\f[R] is a
\f[CR]TypedArray\f[R], and a number of bytes if not.
If omitted, \f[CR]size\f[R] will be equal to the overall size of
\f[CR]data\f[R], minus \f[CR]dataOffset\f[R].
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Exceptions
.TP
\f[B]OperationError\f[R] \f[B]DOMException\f[R]
The method throws an \f[CR]OperationError\f[R] if the following criteria
are not met:
.RS
.IP \(bu 2
The size of \f[CR]data\f[R] is equal to or greater than 0.
.IP \(bu 2
\f[CR]dataOffset\f[R] is equal to or smaller than the size of
\f[CR]data\f[R].
.IP \(bu 2
The size of \f[CR]data\f[R] (when converted to bytes, in the case of
\f[CR]TypedArray\f[R]s) is a multiple of 4.
.RE
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]writeBuffer()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the \f[CR]GPUQueue\f[R]
becomes invalid:
.IP \(bu 2
\f[CR]buffer\f[R] is available for use, i.e., not unavailable
(\f[CR]GPUBuffer\f[R]s are unavailable if they are currently mapped) or
destroyed (with the \f[CR]GPUBuffer.destroy()\f[R] method).
.IP \(bu 2
The \f[CR]buffer\f[R]\(cqs \f[CR]GPUBuffer.usage\f[R] includes the
\f[CR]GPUBufferUsage.COPY_DST\f[R] flag.
.IP \(bu 2
\f[CR]bufferOffset\f[R], when converted to bytes, is a multiple of 4.
.IP \(bu 2
The size of \f[CR]data\f[R] \- \f[CR]dataOffset\f[R] +
\f[CR]bufferOffset\f[R], when converted to bytes, is equal to or less
than the \f[CR]buffer\f[R]\(cqs \f[CR]GPUBuffer.size\f[R].
.SH EXAMPLES
In our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
, we define some vertex data in a \f[CR]Float32Array\f[R] that we\(cqll
use to draw a triangle:
.IP
.EX
\f[B]const\f[R] vertices = \f[B]new\f[R] Float32Array([
  0.0, 0.6, 0, 1, 1, 0, 0, 1, \-0.5, \-0.6, 0, 1, 0, 1, 0, 1, 0.5, \-0.6, 0, 1, 0,
  0, 1, 1,
]);
.EE
.PP
To use this data in a render pipeline, we need to put it into a
\f[CR]GPUBuffer\f[R].
First we\(cqll create the buffer:
.IP
.EX
\f[B]const\f[R] vertexBuffer = device.createBuffer({
  size: vertices.byteLength, \f[I]// make it big enough to store vertices in\f[R]
  usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
});
.EE
.PP
To get the data into the buffer we can use \f[CR]writeBuffer()\f[R]:
.IP
.EX
device.queue.writeBuffer(vertexBuffer, 0, vertices, 0, vertices.length);
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
