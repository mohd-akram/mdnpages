.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Atomics.notify" "JS" "January 22, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Atomics.notify \- Atomics.notify()
.SH SYNOPSIS
The \f[B]\f[CB]Atomics.notify()\f[B]\f[R] static method notifies up some
agents that are sleeping in the wait queue.
.RS
.PP
\f[B]Note:\f[R] This operation only works with an \f[CR]Int32Array\f[R]
or \f[CR]BigInt64Array\f[R] that views a \f[CR]SharedArrayBuffer\f[R].
It will return \f[CR]0\f[R] on non\-shared \f[CR]ArrayBuffer\f[R]
objects.
.RE
.SH SYNTAX
.IP
.EX
Atomics.notify(typedArray, index, count)
.EE
.SS Parameters
.TP
\f[B]typedArray\f[R]
An \f[CR]Int32Array\f[R] or \f[CR]BigInt64Array\f[R] that views a
\f[CR]SharedArrayBuffer\f[R].
.TP
\f[B]index\f[R]
The position in the \f[CR]typedArray\f[R] to wake up on.
.TP
\f[B]count\f[R] \f[I](optional)\f[R]
The number of sleeping agents to notify.
Defaults to \f[CR]Infinity\f[R].
.SS Return value
.IP \[bu] 2
Returns the number of woken up agents.
.IP \[bu] 2
Returns \f[CR]0\f[R], if a non\-shared \f[CR]ArrayBuffer\f[R] object is
used.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]typedArray\f[R] is not an \f[CR]Int32Array\f[R] or
\f[CR]BigInt64Array\f[R] that views a \f[CR]SharedArrayBuffer\f[R].
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]index\f[R] is out of bounds in the
\f[CR]typedArray\f[R].
.SH EXAMPLES
.SS Using \f[CR]notify\f[R]
Given a shared \f[CR]Int32Array\f[R]:
.IP
.EX
\f[B]const\f[R] sab = \f[B]new\f[R] SharedArrayBuffer(1024);
\f[B]const\f[R] int32 = \f[B]new\f[R] Int32Array(sab);
.EE
.PP
A reading thread is sleeping and waiting on location 0 because the
provided \f[CR]value\f[R] matches what is stored at the provided
\f[CR]index\f[R].
The reading thread will not move on until the writing thread has called
\f[CR]Atomics.notify()\f[R] on position 0 of the provided
\f[CR]typedArray\f[R].
Note that if, after being woken up, the value of location 0 has not been
changed by the writing thread, the reading thread will \f[B]not\f[R] go
back to sleep, but will continue on.
.IP
.EX
Atomics.wait(int32, 0, 0);
console.log(int32[0]); \f[I]// 123\f[R]
.EE
.PP
A writing thread stores a new value and notifies the waiting thread once
it has written:
.IP
.EX
console.log(int32[0]); \f[I]// 0;\f[R]
Atomics.store(int32, 0, 123);
Atomics.notify(int32, 0, 1);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Atomics\f[R]
.IP \[bu] 2
\f[CR]Atomics.wait()\f[R]
.IP \[bu] 2
\f[CR]Atomics.waitAsync()\f[R]
