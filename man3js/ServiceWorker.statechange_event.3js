.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ServiceWorker.statechange_event" "JS" "June 7, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorker.statechange_event \- ServiceWorker: statechange event
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[CR]statechange\f[R] event fires anytime the
\f[CR]ServiceWorker.state\f[R] changes.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]statechange\[dq], (event) \f[B]=>\f[R] {});

onstatechange = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A generic \f[CR]Event\f[R].
.SH EXAMPLES
This code snippet is from the \c
.UR https://github.com/GoogleChrome/samples/blob/gh-pages/service-worker/registration-events/index.html
service worker registration\-events sample
.UE \c
\ (\c
.UR https://googlechrome.github.io/samples/service-worker/registration-events/
live demo
.UE \c
).
The code listens for any change in the \f[CR]ServiceWorker.state\f[R]
and returns its value.
.IP
.EX
\f[B]let\f[R] serviceWorker;
\f[B]if\f[R] (registration.installing) {
  serviceWorker = registration.installing;
  document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]installing\[dq];
} \f[B]else\f[R] \f[B]if\f[R] (registration.waiting) {
  serviceWorker = registration.waiting;
  document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]waiting\[dq];
} \f[B]else\f[R] \f[B]if\f[R] (registration.active) {
  serviceWorker = registration.active;
  document.querySelector(\[dq]#kind\[dq]).textContent = \[dq]active\[dq];
}

\f[B]if\f[R] (serviceWorker) {
  logState(serviceWorker.state);
  serviceWorker.addEventListener(\[dq]statechange\[dq], (e) \f[B]=>\f[R] {
    logState(e.target.state);
  });
}
.EE
.PP
Note that when \f[CR]statechange\f[R] fires, the service worker\[cq]s
references may have changed.
For example:
.IP
.EX
navigator.serviceWorker.register(\[dq]/sw.js\[dq]).then((swr) \f[B]=>\f[R] {
  swr.installing.state = \[dq]installing\[dq];
  swr.installing.onstatechange = () \f[B]=>\f[R] {
    swr.installing = \f[B]null\f[R];
    \f[I]// At this point, swr.waiting OR swr.active might be true. This is because the statechange\f[R]
    \f[I]// event gets queued, meanwhile the underlying worker may have gone into the waiting\f[R]
    \f[I]// state and will be immediately activated if possible.\f[R]
  };
});
.EE
