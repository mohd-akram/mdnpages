.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WINDOW.MESSAGE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Window.message_event \- Window: message event
.SH SYNOPSIS
The \f[CR]message\f[R] event is fired on a \f[CR]Window\f[R] object when
the window receives a message, for example from a call to
\f[CR]Window.postMessage()\f[R] from another browsing context.
.PP
This event is not cancellable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqmessage\(dq, (event) => { })

onmessage = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g., in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
Suppose a script sends a message to a different browsing context, such
as another \f[CR]<iframe>\f[R], using code like this:
.IP
.EX
\f[B]const\f[R] targetFrame = window.top.frames[1];
\f[B]const\f[R] targetOrigin = \(dqhttps://example.org\(dq;
\f[B]const\f[R] windowMessageButton = document.querySelector(\(dq#window\-message\(dq);

windowMessageButton.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  targetFrame.postMessage(\(dqhello there\(dq, targetOrigin);
});
.EE
.PP
The receiver can listen for the message using
\f[CR]addEventListener()\f[R] with code like this:
.IP
.EX
window.addEventListener(\(dqmessage\(dq, (event) \f[B]=>\f[R] {
  console.log(\(gaReceived message: ${event.data}\(ga);
});
.EE
.PP
Alternatively the listener could use the \f[CR]onmessage\f[R] event
handler property:
.IP
.EX
window.onmessage = (event) \f[B]=>\f[R] {
  console.log(\(gaReceived message: ${event.data}\(ga);
};
.EE
.SH SEE ALSO
.IP \(bu 2
Related events: \f[CR]messageerror\f[R].
.IP \(bu 2
\f[CR]Window.postMessage()\f[R].
