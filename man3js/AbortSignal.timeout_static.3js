.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "AbortSignal.timeout_static" "JS" "January 1, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AbortSignal.timeout_static \- AbortSignal: timeout() static method
.SH SYNOPSIS
The \f[B]\f[CB]AbortSignal.timeout()\f[B]\f[R] static method returns an
\f[CR]AbortSignal\f[R] that will automatically abort after a specified
time.
.PP
The signal aborts with a \f[CR]TimeoutError\f[R] \f[CR]DOMException\f[R]
on timeout, or with \f[CR]AbortError\f[R] \f[CR]DOMException\f[R] due to
pressing a browser stop button (or some other inbuilt \[lq]stop\[rq]
operation).
This allows UIs to differentiate timeout errors, which typically require
user notification, from user\-triggered aborts that do not.
.PP
The timeout is based on active rather than elapsed time, and will
effectively be paused if the code is running in a suspended worker, or
while the document is in a back\-forward cache (\[lq]\c
.UR https://web.dev/articles/bfcache
bfcache
.UE \c
\[rq]).
.PP
To combine multiple signals, you can use \f[CR]AbortSignal.any()\f[R],
for example, to directly abort a download using either a timeout signal
or by calling \f[CR]AbortController.abort()\f[R].
.SH SYNTAX
.IP
.EX
AbortSignal.timeout(time)
.EE
.SS Parameters
.TP
\f[B]time\f[R]
The \[lq]active\[rq] time in milliseconds before the returned
\f[CR]AbortSignal\f[R] will abort.
.SS Return value
An \f[CR]AbortSignal\f[R].
.PP
The signal will abort with its \f[CR]AbortSignal.reason\f[R] property
set to a \f[CR]TimeoutError\f[R] \f[CR]DOMException\f[R] on timeout, or
an \f[CR]AbortError\f[R] \f[CR]DOMException\f[R] if the operation was
user\-triggered.
.SH EXAMPLES
Below is a simple example showing a fetch operation that will timeout if
unsuccessful after 5 seconds.
Note that this may also fail if the method is not supported, if a
browser \[lq]stop\[rq] button is pressed, or for another reason.
.IP
.EX
\f[B]const\f[R] url = \[dq]https://path_to_large_file.mp4\[dq];

\f[B]try\f[R] {
  \f[B]const\f[R] res = \f[B]await\f[R] fetch(url, { signal: AbortSignal.timeout(5000) });
  \f[B]const\f[R] result = \f[B]await\f[R] res.blob();
  \f[I]// \&...\f[R]
} \f[B]catch\f[R] (err) {
  \f[B]if\f[R] (err.name === \[dq]TimeoutError\[dq]) {
    console.error(\[dq]Timeout: It took more than 5 seconds to get the result!\[dq]);
  } \f[B]else\f[R] \f[B]if\f[R] (err.name === \[dq]AbortError\[dq]) {
    console.error(
      \[dq]Fetch aborted by user action (browser stop button, closing tab, etc.\[dq],
    );
  } \f[B]else\f[R] \f[B]if\f[R] (err.name === \[dq]TypeError\[dq]) {
    console.error(\[dq]AbortSignal.timeout() method is not supported\[dq]);
  } \f[B]else\f[R] {
    \f[I]// A network error, or some other problem.\f[R]
    console.error(\[ga]Error: type: ${err.name}, message: ${err.message}\[ga]);
  }
}
.EE
