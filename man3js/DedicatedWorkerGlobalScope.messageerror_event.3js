.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DEDICATEDWORKERGLOBALSCOPE.MESSAGEERROR_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DedicatedWorkerGlobalScope.messageerror_event \-
DedicatedWorkerGlobalScope: messageerror event
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is only available in Dedicated Web Workers.
.PP
The \f[CR]messageerror\f[R] event is fired on a
\f[CR]DedicatedWorkerGlobalScope\f[R] object when it receives a message
that can\(cqt be deserialized.
.PP
This event is not cancellable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqmessageerror\(dq, (event) => { })

onmessageerror = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]MessageEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface also inherits properties from its parent,
\f[CI]Event\f[I].\f[R]
.TP
\f[B]MessageEvent.data\f[R] \f[I](read\-only)\f[R]
The data sent by the message emitter.
.TP
\f[B]MessageEvent.origin\f[R] \f[I](read\-only)\f[R]
A string representing the origin of the message emitter.
.TP
\f[B]MessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
A string representing a unique ID for the event.
.TP
\f[B]MessageEvent.source\f[R] \f[I](read\-only)\f[R]
A \f[CR]MessageEventSource\f[R] (which can be a WindowProxy,
\f[CR]MessagePort\f[R], or \f[CR]ServiceWorker\f[R] object) representing
the message emitter.
.TP
\f[B]MessageEvent.ports\f[R] \f[I](read\-only)\f[R]
An array of \f[CR]MessagePort\f[R] objects representing the ports
associated with the channel the message is being sent through (where
appropriate, e.g., in channel messaging or when sending a message to a
shared worker).
.SH EXAMPLES
Listen for \f[CR]messageerror\f[R] using \f[CR]addEventListener()\f[R]:
.IP
.EX
\f[I]// worker.js\f[R]

self.addEventListener(\(dqmessageerror\(dq, (event) \f[B]=>\f[R] {
  self.postMessage(\(dqError receiving message\(dq);
  console.error(event);
});
.EE
.PP
The same, but using the \f[CR]onmessageerror\f[R] event handler
property:
.IP
.EX
\f[I]// worker.js\f[R]

self.onmessageerror = (event) \f[B]=>\f[R] {
  self.postMessage(\(dqError receiving message\(dq);
  console.error(event);
};
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]DedicatedWorkerGlobalScope\f[R]
.IP \(bu 2
\f[CR]WorkerGlobalScope\f[R]
.IP \(bu 2
Related events: \f[CR]message\f[R]
.IP \(bu 2
\f[CR]Worker.postMessage()\f[R]
.IP \(bu 2
Using channel messaging
