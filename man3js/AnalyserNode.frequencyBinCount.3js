.\" Automatically generated by Pandoc 3.4
.\"
.TH "AnalyserNode.frequencyBinCount" "JS" "July 21, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AnalyserNode.frequencyBinCount \- AnalyserNode: frequencyBinCount
property
.SH SYNOPSIS
The \f[B]\f[CB]frequencyBinCount\f[B]\f[R] read\-only property of the
\f[CR]AnalyserNode\f[R] interface contains the total number of data
points available to \f[CR]AudioContext\f[R] \f[CR]sampleRate\f[R].
This is half of the \f[CR]value\f[R] of the
\f[CR]AnalyserNode.fftSize\f[R].
The two methods\[cq] indices have a linear relationship with the
frequencies they represent, between 0 and the \c
.UR https://en.wikipedia.org/wiki/Nyquist_frequency
Nyquist frequency
.UE \c
\&.
.SH VALUE
An unsigned integer, equal to the number of values that
\f[CR]AnalyserNode.getByteFrequencyData()\f[R] and
\f[CR]AnalyserNode.getFloatFrequencyData()\f[R] copy into the provided
\f[CR]TypedArray\f[R].
.PP
For technical reasons related to how the \c
.UR https://en.wikipedia.org/wiki/Fast_Fourier_transform
Fast Fourier transform
.UE \c
\ is defined, it is always half the value of
\f[CR]AnalyserNode.fftSize\f[R].
Therefore, it will be one of \f[CR]16\f[R], \f[CR]32\f[R],
\f[CR]64\f[R], \f[CR]128\f[R], \f[CR]256\f[R], \f[CR]512\f[R],
\f[CR]1024\f[R], \f[CR]2048\f[R], \f[CR]4096\f[R], \f[CR]8192\f[R], and
\f[CR]16384\f[R].
.SH EXAMPLES
The following example shows basic usage of an \f[CR]AudioContext\f[R] to
create an \f[CR]AnalyserNode\f[R], then \f[CR]requestAnimationFrame\f[R]
and \f[CR]<canvas>\f[R] to collect frequency data repeatedly and draw a
\[lq]winamp bar graph style\[rq] output of the current audio input.
For more complete applied examples/information, check out our \c
.UR https://mdn.github.io/webaudio-examples/voice-change-o-matic/
Voice\-change\-O\-matic
.UE \c
\ demo.
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();
\f[B]const\f[R] analyser = audioCtx.createAnalyser();
analyser.minDecibels = \-90;
analyser.maxDecibels = \-10;

\f[I]// \&...\f[R]

analyser.fftSize = 256;
\f[B]const\f[R] bufferLength = analyser.frequencyBinCount;
console.log(bufferLength);
\f[B]const\f[R] dataArray = \f[B]new\f[R] Uint8Array(bufferLength);

canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);

\f[B]function\f[R] draw() {
  drawVisual = requestAnimationFrame(draw);

  analyser.getByteFrequencyData(dataArray);

  canvasCtx.fillStyle = \[dq]rgb(0 0 0)\[dq];
  canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

  \f[B]const\f[R] barWidth = (WIDTH / bufferLength) * 2.5 \- 1;
  \f[B]let\f[R] barHeight;
  \f[B]let\f[R] x = 0;

  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < bufferLength; i++) {
    barHeight = dataArray[i];

    canvasCtx.fillStyle = \[ga]rgb(${barHeight + 100} 50 50)\[ga];
    canvasCtx.fillRect(x, HEIGHT \- barHeight / 2, barWidth, barHeight / 2);

    x += barWidth;
  }
}

draw();
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
