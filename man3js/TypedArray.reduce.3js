.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "TYPEDARRAY.REDUCE" "3JS" "March 14, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TypedArray.reduce \- TypedArray.prototype.reduce()
.SH SYNOPSIS
The \f[B]\f[CB]reduce()\f[B]\f[R] method of \f[CR]TypedArray\f[R]
instances executes a user\-supplied \(lqreducer\(rq callback function on
each element of the typed array, in order, passing in the return value
from the calculation on the preceding element.
The final result of running the reducer across all elements of the typed
array is a single value.
This method has the same algorithm as
\f[CR]Array.prototype.reduce()\f[R].
.IP
.EX
\f[B]const\f[R] uint8 = \f[B]new\f[R] Uint8Array([0, 1, 2, 3]);

\f[B]function\f[R] sum(accumulator, currentValue) {
  \f[B]return\f[R] accumulator + currentValue;
}

console.log(uint8.reduce(sum));
\f[I]// Expected output: 6\f[R]
.EE
.SH SYNTAX
.IP
.EX
reduce(callbackFn)
reduce(callbackFn, initialValue)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the typed array.
Its return value becomes the value of the \f[CR]accumulator\f[R]
parameter on the next invocation of \f[CR]callbackFn\f[R].
For the last invocation, the return value becomes the return value of
\f[CR]reduce()\f[R].
The function is called with the following arguments:
.RS
.TP
\f[B]accumulator\f[R]
The value resulting from the previous call to \f[CR]callbackFn\f[R].
On the first call, its value is \f[CR]initialValue\f[R] if the latter is
specified; otherwise its value is \f[CR]array[0]\f[R].
.TP
\f[B]currentValue\f[R]
The value of the current element.
On the first call, its value is \f[CR]array[0]\f[R] if
\f[CR]initialValue\f[R] is specified; otherwise its value is
\f[CR]array[1]\f[R].
.TP
\f[B]currentIndex\f[R]
The index position of \f[CR]currentValue\f[R] in the typed array.
On the first call, its value is \f[CR]0\f[R] if \f[CR]initialValue\f[R]
is specified, otherwise \f[CR]1\f[R].
.TP
\f[B]array\f[R]
The typed array \f[CR]reduce()\f[R] was called upon.
.RE
.TP
\f[B]initialValue\f[R] \f[I](optional)\f[R]
A value to which \f[CR]accumulator\f[R] is initialized the first time
the callback is called.
If \f[CR]initialValue\f[R] is specified, \f[CR]callbackFn\f[R] starts
executing with the first value in the typed array as
\f[CR]currentValue\f[R].
If \f[CR]initialValue\f[R] is \f[I]not\f[R] specified,
\f[CR]accumulator\f[R] is initialized to the first value in the typed
array, and \f[CR]callbackFn\f[R] starts executing with the second value
in the typed array as \f[CR]currentValue\f[R].
In this case, if the typed array is empty (so that there\(cqs no first
value to return as \f[CR]accumulator\f[R]), an error is thrown.
.SS Return value
The value that results from running the \(lqreducer\(rq callback
function to completion over the entire typed array.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the typed array contains no elements and
\f[CR]initialValue\f[R] is not provided.
.SH DESCRIPTION
See \f[CR]Array.prototype.reduce()\f[R] for more details.
This method is not generic and can only be called on typed array
instances.
.SH EXAMPLES
.SS Sum up all values within an array
.IP
.EX
\f[B]const\f[R] total = \f[B]new\f[R] Uint8Array([0, 1, 2, 3]).reduce((a, b) \f[B]=>\f[R] a + b);
\f[I]// total === 6\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-typed-arrays
Polyfill of \f[CR]TypedArray.prototype.reduce\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
JavaScript typed arrays guide
.IP \(bu 2
\f[CR]TypedArray\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.map()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.reduceRight()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.reduce()\f[R]
.IP \(bu 2
\f[CR]Object.groupBy()\f[R]
.IP \(bu 2
\f[CR]Map.groupBy()\f[R]
