.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "WeakSet.WeakSet" "JS" "November 4, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WeakSet.WeakSet \- WeakSet() constructor
.SH SYNOPSIS
The \f[B]\f[CB]WeakSet()\f[B]\f[R] constructor creates
\f[CR]WeakSet\f[R] objects.
.SH SYNTAX
.IP
.EX
new WeakSet()
new WeakSet(iterable)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]WeakSet()\f[R] can only be constructed with
\f[CR]new\f[R].
Attempting to call it without \f[CR]new\f[R] throws a
\f[CR]TypeError\f[R].
.RE
.SS Parameters
.TP
\f[B]iterable\f[R] \f[I](optional)\f[R]
If an iterable object is passed, all of its elements will be added to
the new \f[CR]WeakSet\f[R].
\f[CR]null\f[R] is treated as \f[CR]undefined\f[R].
.SH EXAMPLES
.SS Using the WeakSet object
.IP
.EX
\f[B]const\f[R] ws = \f[B]new\f[R] WeakSet();
\f[B]const\f[R] foo = {};
\f[B]const\f[R] bar = {};

ws.add(foo);
ws.add(bar);

ws.has(foo); \f[I]// true\f[R]
ws.has(bar); \f[I]// true\f[R]

ws.delete(foo); \f[I]// removes foo from the set\f[R]
ws.has(foo); \f[I]// false, foo has been removed\f[R]
ws.has(bar); \f[I]// true, bar is retained\f[R]
.EE
.PP
Note that \f[CR]foo !== bar\f[R].
While they are similar objects, \f[I]they are not \f[BI]the same
object\f[I]\f[R].
And so they are both added to the set.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#weakset
Polyfill of \f[CR]WeakSet\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]WeakSet\f[R]
