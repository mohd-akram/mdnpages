.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "COOKIESTORE.DELETE" "3JS" "April 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CookieStore.delete \- CookieStore: delete() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Service Workers.
.PP
The \f[B]\f[CB]delete()\f[B]\f[R] method of the \f[CR]CookieStore\f[R]
interface deletes a cookie that matches the given \f[CR]name\f[R] or
\f[CR]options\f[R] object.
The method expires the cookie by changing its date to one in the past.
.PP
Note that there is no error if a cookie cannot be matched: the returned
promise will fulfill when the matched cookie is deleted or if no cookie
is matched.
.SH SYNTAX
.IP
.EX
delete(name)
delete(options)
.EE
.SS Parameters
This method requires one of the following:
.TP
\f[B]name\f[R] \f[I](optional)\f[R]
A string with the name of a cookie.
.PP
Or
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object containing:
.RS
.TP
\f[B]name\f[R]
A string with the name of a cookie.
.TP
\f[B]domain\f[R] \f[I](optional)\f[R]
A string with the domain of a cookie.
Defaults to \f[CR]null\f[R].
.TP
\f[B]path\f[R] \f[I](optional)\f[R]
A string containing a path.
Defaults to \f[CR]/\f[R].
.TP
\f[B]partitioned\f[R] \f[I](optional)\f[R]
A boolean value that defaults to \f[CR]false\f[R].
Setting it to \f[CR]true\f[R] specifies that the cookie to delete will
be a partitioned cookie.
See Cookies Having Independent Partitioned State (CHIPS) for more
information.
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with \f[CR]undefined\f[R] when the
deletion operation completes or no cookie is matched.
.SS Exceptions
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Thrown if the origin can not be serialized to a URL.
.TP
\f[B]TypeError\f[R]
Thrown if a cookie that matches a given \f[CR]name\f[R] or
\f[CR]options\f[R] cannot be deleted.
.SH EXAMPLES
.SS Delete a named cookie
This example shows how a cookie can be deleted by passing its name to
the \f[CR]delete()\f[R] method.
.PP
This will work if the cookie to be deleted matches the cookie name and
the default values of the \f[CR]options\f[R] above.
This will be the case if the cookie was \f[CR]set()\f[R] using the just
a name and value, but may not be if the cookie was created with options
or using \f[CR]Document.cookie\f[R].
.PP
The code first defines \f[CR]setTestCookies()\f[R] which creates some
test cookies and logs their names.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] setTestCookies() {
  \f[I]// Set two cookies\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set(\(dqcookie1\(dq, \(dqcookie1\-value\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie1: ${error}\(ga);
  }

  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set(\(dqcookie2\(dq, \(dqcookie2\-value\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie2: ${error}\(ga);
  }

  \f[I]// Log cookie names\f[R]
  \f[B]const\f[R] cookieNames = (\f[B]await\f[R] cookieStore.getAll())
    .map((cookie) \f[B]=>\f[R] cookie.name)
    .join(\(dq \(dq);
  console.log(\(gaInitial cookies: ${cookieNames}\(ga);
}
.EE
.PP
The \f[CR]cookieTest()\f[R] method calls \f[CR]setTestCookies()\f[R].
It then deletes \(lqcookie1\(rq that we just created, and lists all
cookie names again.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] cookieTest() {
  \f[I]// Create our test cookies\f[R]
  \f[B]await\f[R] setTestCookies();

  \f[I]// Delete cookie1\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.delete(\(dqcookie1\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError deleting cookie1: ${error}\(ga);
  }

  \f[I]// Log cookie names again (to show cookie1 deleted)\f[R]
  \f[B]const\f[R] cookieNames = (\f[B]await\f[R] cookieStore.getAll())
    .map((cookie) \f[B]=>\f[R] cookie.name)
    .join(\(dq \(dq);
  console.log(
    \(gaCookies remaining after attempting to delete cookie1: ${cookieNames}\(ga,
  );
}

cookieTest();
.EE
.PP
When run, the console log should initially show that both cookie1 and
cookie2 are present, but cookie1 is not listed after it has been
deleted.
.SS Delete a cookie with options
This example is almost identical to the previous one, except it
demonstrates that the options must match those of the cookie to be
deleted.
.PP
The code first defines \f[CR]setTestCookies()\f[R].
This creates two cookies with the \f[CR]partitioned\f[R] property set to
\f[CR]true\f[R], and logs their names.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] setTestCookies() {
  \f[I]// Set two cookies\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set({
      name: \(dqcookie1\(dq,
      value: \(gacookie1\-value\(ga,
      partitioned: \f[B]true\f[R],
    });
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie1: ${error}\(ga);
  }

  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.set({
      name: \(dqcookie2\(dq,
      value: \(gacookie2\-value\(ga,
      partitioned: \f[B]true\f[R],
    });
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError setting cookie2: ${error}\(ga);
  }

  \f[I]// Log cookie names\f[R]
  \f[B]const\f[R] cookieNames = (\f[B]await\f[R] cookieStore.getAll())
    .map((cookie) \f[B]=>\f[R] cookie.name)
    .join(\(dq \(dq);
  console.log(\(gaInitial cookies: ${cookieNames}\(ga);
}
.EE
.PP
The \f[CR]cookieTest()\f[R] method calls \f[CR]setTestCookies()\f[R].
It then attempts to delete the cookies named \(lqcookie1\(rq, specifying
its name, and \(lqcookie2\(rq specifying its name and
\f[CR]partitioned: true\f[R].
The method then lists the cookie names again.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] cookieTest() {
  \f[I]// Create our test cookies\f[R]
  \f[B]await\f[R] setTestCookies();

  \f[I]// Delete cookie1 specifying just the name\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.delete(\(dqcookie1\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError deleting cookie1: ${error}\(ga);
  }

  \f[I]// Delete cookie2, setting partitioned to true\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.delete({
      name: \(dqcookie2\(dq,
      partitioned: \f[B]true\f[R],
    });
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError deleting cookie2: ${error}\(ga);
  }

  \f[I]// Log cookie names again (to show cookie1 deleted)\f[R]
  cookieNames = (\f[B]await\f[R] cookieStore.getAll())
    .map((cookie) \f[B]=>\f[R] cookie.name)
    .join(\(dq \(dq);
  console.log(
    \(gaCookies remaining after attempted deletions (cookie2 should be deleted): ${cookieNames}\(ga,
  );
}

cookieTest();
.EE
.PP
When run, the console log should show that both \(lqcookie1\(rq and
\(lqcookie2\(rq are present initially, but \(lqcookie2\(rq is not listed
afterwards.
The cookie named \(lqcookie1\(rq is still present because it does not
match the cookies specified in the \f[CR]delete()\f[R] call.
.RS
.PP
\f[B]Note:\f[R] The deletion silently fails if no cookie is matched.
.RE
.SS Delete cookies created using document.cookies
Deleting a cookie that was created using \f[CR]document.cookie\f[R] has
the same requirements as deleting a cookie created using
\f[CR]CookieStore.set()\f[R]: the cookie either needs to match the
passed \f[CR]options\f[R], or the \f[CR]name\f[R] and the default
options.
.RS
.PP
\f[B]Note:\f[R] Cookies created with \f[CR]set()\f[R] always have a
default path of \f[CR]/\f[R], while cookies created with
\f[CR]document.cookie\f[R] have a default path equal to the path of the
document they are created in.
Therefore when deleting cookies created with \f[CR]document.cookie\f[R],
you can\(cqt assume they have the path \f[CR]/\f[R] (unless it was been
explicitly set as such), and hence that it will match the default
\f[CR]delete()\f[R] options.
.RE
.PP
The code below uses \f[CR]document.cookie\f[R] to create cookies named
\(lqdoc_cookie1\(rq and \(lqdoc_cookie2\(rq, with the paths
\f[CR]/some_path\f[R] and \f[CR]/\f[R] respectively, and then logs both
cookies.
The code then deletes both cookies without specifying a \f[CR]path\f[R]
match option, and lists the cookies again.
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] cookieTest() {
  \f[I]// Create doc_cookie1 with path /some_path\f[R]
  document.cookie =
    \(dqdoc_cookie1=doc_cookie1_name; SameSite=None; Secure; max\-age=10; path=\(aq/some_path\(aq\(dq;

  \f[I]// Create doc_cookie2 with path / (the CookieStore.set() default)\f[R]
  document.cookie =
    \(dqdoc_cookie2=doc_cookie2_name; SameSite=None; Secure; max\-age=10; path=/\(dq;

  \f[I]// Log cookie names\f[R]
  \f[B]let\f[R] cookieNames = (\f[B]await\f[R] cookieStore.getAll())
    .map((cookie) \f[B]=>\f[R] cookie.name)
    .join(\(dq \(dq);
  console.log(\(gaInitial cookies: ${cookieNames}\(ga);

  \f[I]// Delete doc_cookie1 (should fail)\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.delete(\(dqdoc_cookie1\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError deleting doc_cookie1: ${error}\(ga);
  }

  \f[I]// Delete doc_cookie2 (should succeed)\f[R]
  \f[B]try\f[R] {
    \f[B]await\f[R] cookieStore.delete(\(dqdoc_cookie2\(dq);
  } \f[B]catch\f[R] (error) {
    console.log(\(gaError deleting cookie2: ${error}\(ga);
  }

  \f[I]// Log cookie names again (to show cookie1 deleted)\f[R]
  cookieNames = (\f[B]await\f[R] cookieStore.getAll())
    .map((cookie) \f[B]=>\f[R] cookie.name)
    .join(\(dq \(dq);
  console.log(
    \(gaCookies remaining after attempted deletions (doc_cookie2 should be deleted): ${cookieNames}\(ga,
  );
}

cookieTest();
.EE
.PP
When run, the first log should show that both cookies are present.
The second log should not include \(lqdoc_cookie2\(rq, as it should have
matched and been deleted.
It should include \(lqdoc_cookie1\(rq because \f[CR]/some_path\f[R] will
not match the default deletion path (\f[CR]/\f[R]).
