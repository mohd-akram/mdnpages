.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Object.isFrozen" "JS" "September 25, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.isFrozen \- Object.isFrozen()
.SH SYNOPSIS
The \f[B]\f[CB]Object.isFrozen()\f[B]\f[R] static method determines if
an object is frozen.
.SH SYNTAX
.IP
.EX
Object.isFrozen(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object which should be checked.
.SS Return value
A \f[CR]Boolean\f[R] indicating whether or not the given object is
frozen.
.SH DESCRIPTION
An object is frozen if and only if it is not extensible, all its
properties are non\-configurable, and all its data properties (that is,
properties which are not accessor properties with getter or setter
components) are non\-writable.
.SH EXAMPLES
.SS Using Object.isFrozen
.IP
.EX
\f[I]// A new object is extensible, so it is not frozen.\f[R]
Object.isFrozen({}); \f[I]// false\f[R]

\f[I]// An empty object which is not extensible\f[R]
\f[I]// is vacuously frozen.\f[R]
\f[B]const\f[R] vacuouslyFrozen = Object.preventExtensions({});
Object.isFrozen(vacuouslyFrozen); \f[I]// true\f[R]

\f[I]// A new object with one property is also extensible,\f[R]
\f[I]// ergo not frozen.\f[R]
\f[B]const\f[R] oneProp = { p: 42 };
Object.isFrozen(oneProp); \f[I]// false\f[R]

\f[I]// Preventing extensions to the object still doesn\[aq]t\f[R]
\f[I]// make it frozen, because the property is still\f[R]
\f[I]// configurable (and writable).\f[R]
Object.preventExtensions(oneProp);
Object.isFrozen(oneProp); \f[I]// false\f[R]

\f[I]// Deleting that property makes the object vacuously frozen.\f[R]
\f[B]delete\f[R] oneProp.p;
Object.isFrozen(oneProp); \f[I]// true\f[R]

\f[I]// A non\-extensible object with a non\-writable\f[R]
\f[I]// but still configurable property is not frozen.\f[R]
\f[B]const\f[R] nonWritable = { e: \[dq]plep\[dq] };
Object.preventExtensions(nonWritable);
Object.defineProperty(nonWritable, \[dq]e\[dq], {
  writable: \f[B]false\f[R],
}); \f[I]// make non\-writable\f[R]
Object.isFrozen(nonWritable); \f[I]// false\f[R]

\f[I]// Changing that property to non\-configurable\f[R]
\f[I]// then makes the object frozen.\f[R]
Object.defineProperty(nonWritable, \[dq]e\[dq], {
  configurable: \f[B]false\f[R],
}); \f[I]// make non\-configurable\f[R]
Object.isFrozen(nonWritable); \f[I]// true\f[R]

\f[I]// A non\-extensible object with a non\-configurable\f[R]
\f[I]// but still writable property also isn\[aq]t frozen.\f[R]
\f[B]const\f[R] nonConfigurable = { release: \[dq]the kraken!\[dq] };
Object.preventExtensions(nonConfigurable);
Object.defineProperty(nonConfigurable, \[dq]release\[dq], {
  configurable: \f[B]false\f[R],
});
Object.isFrozen(nonConfigurable); \f[I]// false\f[R]

\f[I]// Changing that property to non\-writable\f[R]
\f[I]// then makes the object frozen.\f[R]
Object.defineProperty(nonConfigurable, \[dq]release\[dq], {
  writable: \f[B]false\f[R],
});
Object.isFrozen(nonConfigurable); \f[I]// true\f[R]

\f[I]// A non\-extensible object with a configurable\f[R]
\f[I]// accessor property isn\[aq]t frozen.\f[R]
\f[B]const\f[R] accessor = {
  \f[B]get\f[R] food() {
    \f[B]return\f[R] \[dq]yum\[dq];
  },
};
Object.preventExtensions(accessor);
Object.isFrozen(accessor); \f[I]// false\f[R]

\f[I]// When we make that property non\-configurable it becomes frozen.\f[R]
Object.defineProperty(accessor, \[dq]food\[dq], {
  configurable: \f[B]false\f[R],
});
Object.isFrozen(accessor); \f[I]// true\f[R]

\f[I]// But the easiest way for an object to be frozen\f[R]
\f[I]// is if Object.freeze has been called on it.\f[R]
\f[B]const\f[R] frozen = { 1: 81 };
Object.isFrozen(frozen); \f[I]// false\f[R]
Object.freeze(frozen);
Object.isFrozen(frozen); \f[I]// true\f[R]

\f[I]// By definition, a frozen object is non\-extensible.\f[R]
Object.isExtensible(frozen); \f[I]// false\f[R]

\f[I]// Also by definition, a frozen object is sealed.\f[R]
Object.isSealed(frozen); \f[I]// true\f[R]
.EE
.SS Non\-object argument
In ES5, if the argument to this method is not an object (a primitive),
then it will cause a \f[CR]TypeError\f[R].
In ES2015, it will return \f[CR]true\f[R] without any errors if a
non\-object argument is passed, since primitives are, by definition,
immutable.
.IP
.EX
Object.isFrozen(1);
\f[I]// TypeError: 1 is not an object (ES5 code)\f[R]

Object.isFrozen(1);
\f[I]// true                          (ES2015 code)\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Object.freeze()\f[R]
.IP \[bu] 2
\f[CR]Object.preventExtensions()\f[R]
.IP \[bu] 2
\f[CR]Object.isExtensible()\f[R]
.IP \[bu] 2
\f[CR]Object.seal()\f[R]
.IP \[bu] 2
\f[CR]Object.isSealed()\f[R]
