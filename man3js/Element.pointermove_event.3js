.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ELEMENT.POINTERMOVE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.pointermove_event \- Element: pointermove event
.SH SYNOPSIS
The \f[CR]pointermove\f[R] event is fired when a pointer changes
coordinates, and the pointer has not been canceled by a browser
touch\-action.
It\(cqs very similar to the \f[CR]mousemove\f[R] event, but with more
features.
.PP
These events happen whether or not any pointer buttons are pressed.
They can fire at a very high rate, depends on how fast the user moves
the pointer, how fast the machine is, what other tasks and processes are
happening, etc.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqpointermove\(dq, (event) => { })

onpointermove = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]PointerEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]This interface inherits properties from \f[CI]MouseEvent\f[I] and
\f[CI]Event\f[I].\f[R]
.TP
\f[B]PointerEvent.altitudeAngle\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Represents the angle between a transducer (a pointer or stylus) axis and
the X\-Y plane of a device screen.
.TP
\f[B]PointerEvent.azimuthAngle\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
Represents the angle between the Y\-Z plane and the plane containing
both the transducer (a pointer or stylus) axis and the Y axis.
.TP
\f[B]PointerEvent.persistentDeviceId\f[R] \f[I](read\-only)\f[R] \f[I](experimental)\f[R]
A unique identifier for the pointing device generating the
\f[CR]PointerEvent\f[R].
.TP
\f[B]PointerEvent.pointerId\f[R] \f[I](read\-only)\f[R]
A unique identifier for the pointer causing the event.
.TP
\f[B]PointerEvent.width\f[R] \f[I](read\-only)\f[R]
The width (magnitude on the X axis), in CSS pixels, of the contact
geometry of the pointer.
.TP
\f[B]PointerEvent.height\f[R] \f[I](read\-only)\f[R]
The height (magnitude on the Y axis), in CSS pixels, of the contact
geometry of the pointer.
.TP
\f[B]PointerEvent.pressure\f[R] \f[I](read\-only)\f[R]
The normalized pressure of the pointer input in the range \f[CR]0\f[R]
to \f[CR]1\f[R], where \f[CR]0\f[R] and \f[CR]1\f[R] represent the
minimum and maximum pressure the hardware is capable of detecting,
respectively.
.TP
\f[B]PointerEvent.tangentialPressure\f[R] \f[I](read\-only)\f[R]
The normalized tangential pressure of the pointer input (also known as
barrel pressure or \c
.UR https://en.wikipedia.org/wiki/Cylinder_stress
cylinder stress
.UE \c
) in the range \f[CR]\-1\f[R] to \f[CR]1\f[R], where \f[CR]0\f[R] is the
neutral position of the control.
.TP
\f[B]PointerEvent.tiltX\f[R] \f[I](read\-only)\f[R]
The plane angle (in degrees, in the range of \f[CR]\-90\f[R] to
\f[CR]90\f[R]) between the Y\(enZ plane and the plane containing both
the pointer (e.g., pen stylus) axis and the Y axis.
.TP
\f[B]PointerEvent.tiltY\f[R] \f[I](read\-only)\f[R]
The plane angle (in degrees, in the range of \f[CR]\-90\f[R] to
\f[CR]90\f[R]) between the X\(enZ plane and the plane containing both
the pointer (e.g., pen stylus) axis and the X axis.
.TP
\f[B]PointerEvent.twist\f[R] \f[I](read\-only)\f[R]
The clockwise rotation of the pointer (e.g., pen stylus) around its
major axis in degrees, with a value in the range \f[CR]0\f[R] to
\f[CR]359\f[R].
.TP
\f[B]PointerEvent.pointerType\f[R] \f[I](read\-only)\f[R]
Indicates the device type that caused the event (mouse, pen, touch,
etc.).
.TP
\f[B]PointerEvent.isPrimary\f[R] \f[I](read\-only)\f[R]
Indicates if the pointer represents the primary pointer of this pointer
type.
.SH USAGE NOTES
The event, which is of type \f[CR]PointerEvent\f[R], provides all the
information you need to know about the user\(cqs interaction with the
pointing device, including the position, movement distance, button
states, and much more.
.SH EXAMPLES
To add a handler for \f[CR]pointermove\f[R] events using
\f[CR]addEventListener()\f[R]:
.IP
.EX
\f[B]const\f[R] para = document.querySelector(\(dqp\(dq);

para.addEventListener(\(dqpointermove\(dq, (event) \f[B]=>\f[R] {
  console.log(\(dqPointer moved\(dq);
});
.EE
.PP
You can also use the \f[CR]onpointermove\f[R] event handler property:
.IP
.EX
\f[B]const\f[R] para = document.querySelector(\(dqp\(dq);

para.onpointermove = (event) \f[B]=>\f[R] {
  console.log(\(dqPointer moved\(dq);
};
.EE
.SH SEE ALSO
.IP \(bu 2
Related events
.RS 2
.IP \(bu 2
\f[CR]gotpointercapture\f[R]
.IP \(bu 2
\f[CR]lostpointercapture\f[R]
.IP \(bu 2
\f[CR]pointerover\f[R]
.IP \(bu 2
\f[CR]pointerenter\f[R]
.IP \(bu 2
\f[CR]pointerdown\f[R]
.IP \(bu 2
\f[CR]pointerup\f[R]
.IP \(bu 2
\f[CR]pointercancel\f[R]
.IP \(bu 2
\f[CR]pointerout\f[R]
.IP \(bu 2
\f[CR]pointerleave\f[R]
.IP \(bu 2
\f[CR]pointerrawupdate\f[R]
.IP \(bu 2
\f[CR]mousemove\f[R]
.RE
