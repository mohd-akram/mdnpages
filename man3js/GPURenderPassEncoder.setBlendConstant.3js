.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERPASSENCODER.SETBLENDCONSTANT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderPassEncoder.setBlendConstant \- GPURenderPassEncoder:
setBlendConstant() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]setBlendConstant()\f[B]\f[R] method of the
\f[CR]GPURenderPassEncoder\f[R] interface sets the constant blend color
and alpha values used with \f[CR]\(dqconstant\(dq\f[R] and
\f[CR]\(dqone\-minus\-constant\(dq\f[R] blend factors (as set in the
descriptor of the \f[CR]GPUDevice.createRenderPipeline()\f[R] method, in
the \f[CR]blend\f[R] property).
.SH SYNTAX
.IP
.EX
setBlendConstant(color)
.EE
.SS Parameters
.TP
\f[B]color\f[R]
An object or array representing the color to use when blending \(em the
\f[CR]r\f[R], \f[CR]g\f[R], \f[CR]b\f[R], and \f[CR]a\f[R] components
are represented as floating point numbers between 0.0 and 1.0.
.RS
.PP
What follows is an object example:
.IP
.EX
\f[B]const\f[R] color = { r: 0.0, g: 0.5, b: 1.0, a: 1.0 };
.EE
.PP
The array equivalent would look like this:
.IP
.EX
\f[B]const\f[R] color = [0.0, 0.5, 1.0, 1.0];
.EE
.RE
.RS
.PP
\f[B]Note:\f[R] If a \f[CR]setBlendConstant()\f[R] call is not made, the
blend constant color value defaults to \f[CR](0, 0, 0, 0)\f[R] for each
render pass.
.RE
.SS Return value
None (\f[CR]Undefined\f[R]).
.SH EXAMPLES
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

passEncoder.setPipeline(renderPipeline);
passEncoder.setVertexBuffer(0, vertexBuffer);
passEncoder.setBlendConstant([1.0, 0.0, 0.0, 1.0]);
passEncoder.draw(3);

passEncoder.end();

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
