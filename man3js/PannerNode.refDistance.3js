.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "PannerNode.refDistance" "JS" "July 25, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PannerNode.refDistance \- PannerNode: refDistance property
.SH SYNOPSIS
The \f[CR]refDistance\f[R] property of the \f[CR]PannerNode\f[R]
interface is a double value representing the reference distance for
reducing volume as the audio source moves further from the listener
\[en] i.e.\ the distance at which the volume reduction starts taking
effect.
This value is used by all distance models.
.PP
The \f[CR]refDistance\f[R] property\[cq]s default value is \f[CR]1\f[R].
.SH VALUE
A non\-negative number.
If the value is set to less than 0, a \f[CR]RangeError\f[R] is thrown.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if the property has been given a value that is outside the
accepted range.
.SH EXAMPLES
This example demonstrates how different values of \f[CR]refDistance\f[R]
affect how the volume of a sound decays as it moves away from the
listener.
Unlike \f[CR]rolloffFactor\f[R], changing this value also
\f[I]delays\f[R] the volume decay until the sound moves past the
reference point.
.IP
.EX
\f[B]const\f[R] context = \f[B]new\f[R] AudioContext();
\f[I]// all our test tones will last this many seconds\f[R]
\f[B]const\f[R] NOTE_LENGTH = 6;
\f[I]// this is how far we\[aq]ll move the sound\f[R]
\f[B]const\f[R] Z_DISTANCE = 20;

\f[I]// this function creates a graph for the test tone with a given refDistance\f[R]
\f[I]// and schedules it to move away from the listener along the Z (depth\-wise) axis\f[R]
\f[I]// at the given start time, resulting in a decrease in volume (decay)\f[R]
\f[B]const\f[R] scheduleTestTone = (refDistance, startTime) \f[B]=>\f[R] {
  \f[B]const\f[R] osc = \f[B]new\f[R] OscillatorNode(context);

  \f[B]const\f[R] panner = \f[B]new\f[R] PannerNode(context);
  panner.refDistance = refDistance;

  \f[I]// set the initial Z position, then schedule the ramp\f[R]
  panner.positionZ.setValueAtTime(0, startTime);
  panner.positionZ.linearRampToValueAtTime(Z_DISTANCE, startTime + NOTE_LENGTH);

  osc.connect(panner).connect(context.destination);

  osc.start(startTime);
  osc.stop(startTime + NOTE_LENGTH);
};

\f[I]// this tone should decay immediately and fairly quickly\f[R]
scheduleTestTone(1, context.currentTime);
\f[I]// this tone should decay slower and later than the previous one\f[R]
scheduleTestTone(4, context.currentTime + NOTE_LENGTH);
\f[I]// this tone should decay only slightly, and only start decaying fairly late\f[R]
scheduleTestTone(7, context.currentTime + NOTE_LENGTH * 2);
.EE
.PP
After running this code, the resulting waveforms should look something
like this:
[IMAGE: A waveform visualization of three oscillator tones produced in
Web Audio.
Each oscillator moves away from the listener at the same speed, but with
different refDistances affecting the resulting volume decay.]
A waveform visualization of three oscillator tones produced in Web
Audio.
Each oscillator moves away from the listener at the same speed, but with
different refDistances affecting the resulting volume decay.
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
.IP \[bu] 2
Web Audio spatialization basics
