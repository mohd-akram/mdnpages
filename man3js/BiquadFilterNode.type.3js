'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "BIQUADFILTERNODE.TYPE" "3JS" "April 27, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BiquadFilterNode.type \- BiquadFilterNode: type property
.SH SYNOPSIS
The \f[CR]type\f[R] property of the \f[CR]BiquadFilterNode\f[R]
interface is a string (enum) value defining the kind of filtering
algorithm the node is implementing.
.SH VALUE
A string (enum) representing a \c
.UR https://webaudio.github.io/web-audio-api/#idl-def-BiquadFilterType
BiquadFilterType
.UE \c
\&.
.SH \f[CR]type\f[R] VALUES AND THEIR MEANING
.PP
.TS
tab(@);
l l l l l.
T{
\f[CR]type\f[R]
T}@T{
Description
T}@T{
\f[CR]frequency\f[R]
T}@T{
\f[CR]Q\f[R]
T}@T{
\f[CR]gain\f[R]
T}
T{
\f[CR]lowpass\f[R]
T}@T{
Standard second\-order resonant lowpass filter with 12dB/octave rolloff.
Frequencies below the cutoff pass through; frequencies above it are
attenuated.
T}@T{
The cutoff frequency.
T}@T{
Indicates how peaked the frequency is around the cutoff.
The greater the value is, the greater is the peak.
T}@T{
\f[I]Not used\f[R]
T}
T{
\f[CR]highpass\f[R]
T}@T{
Standard second\-order resonant highpass filter with 12dB/octave
rolloff.
Frequencies below the cutoff are attenuated; frequencies above it pass
through.
T}@T{
The cutoff frequency.
T}@T{
Indicates how peaked the frequency is around the cutoff.
The greater the value, the greater the peak.
T}@T{
\f[I]Not used\f[R]
T}
T{
\f[CR]bandpass\f[R]
T}@T{
Standard second\-order bandpass filter.
Frequencies outside the given range of frequencies are attenuated; the
frequencies inside it pass through.
T}@T{
The center of the range of frequencies.
T}@T{
Controls the width of the frequency band.
The greater the \f[CR]Q\f[R] value, the larger the frequency band.
T}@T{
\f[I]Not used\f[R]
T}
T{
\f[CR]lowshelf\f[R]
T}@T{
Standard second\-order lowshelf filer.
Frequencies lower than the frequency get a boost, or an attenuation;
frequencies over it are unchanged.
T}@T{
The upper limit of the frequencies getting a boost or an attenuation.
T}@T{
\f[I]Not used\f[R]
T}@T{
The boost, in dB, to be applied; if negative, it will be an attenuation.
T}
T{
\f[CR]highshelf\f[R]
T}@T{
Standard second\-order highshelf filer.
Frequencies higher than the frequency get a boost or an attenuation;
frequencies lower than it are unchanged.
T}@T{
The lower limit of the frequencies getting a boost or an attenuation.
T}@T{
\f[I]Not used\f[R]
T}@T{
The boost, in dB, to be applied; if negative, it will be an attenuation.
T}
T{
\f[CR]peaking\f[R]
T}@T{
Frequencies inside the range get a boost or an attenuation; frequencies
outside it are unchanged.
T}@T{
The middle of the frequency range getting a boost or an attenuation.
T}@T{
Controls the width of the frequency band.
The greater the \f[CR]Q\f[R] value, the larger the frequency band.
T}@T{
The boost, in dB, to be applied; if negative, it will be an attenuation.
T}
T{
\f[CR]notch\f[R]
T}@T{
Standard \c
.UR https://en.wikipedia.org/wiki/Band-stop_filter
notch
.UE \c
\ filter, also called a \f[I]band\-stop\f[R] or
\f[I]band\-rejection\f[R] filter.
It is the opposite of a bandpass filter: frequencies outside the give
range of frequencies pass through; frequencies inside it are attenuated.
T}@T{
The center of the range of frequencies.
T}@T{
Controls the width of the frequency band.
The greater the \f[CR]Q\f[R] value, the larger the frequency band.
T}@T{
\f[I]Not used\f[R]
T}
T{
\f[CR]allpass\f[R]
T}@T{
Standard second\-order \c
.UR https://en.wikipedia.org/wiki/All-pass_filter#Digital_Implementation
allpass
.UE \c
\ filter.
It Lets all frequencies through, but changes the phase\-relationship
between the various frequencies.
T}@T{
The frequency with the maximal \c
.UR https://en.wikipedia.org/wiki/Group_delay_and_phase_delay
group delay
.UE \c
, that is, the frequency where the center of the phase transition
occurs.
T}@T{
Controls how sharp the transition is at the medium frequency.
The larger this parameter is, the sharper and larger the transition will
be.
T}@T{
\f[I]Not used\f[R]
T}
.TE
.SH EXAMPLES
The following example shows basic usage of an AudioContext to create a
Biquad filter node.
For more complete applied examples/information, check out our \c
.UR https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR https://github.com/mdn/webaudio-examples/blob/main/voice-change-o-matic/scripts/app.js#L108-L193
app.js lines 108\(en193
.UE \c
\ for relevant code).
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[I]// Set up the different audio nodes we will use for the app\f[R]
\f[B]const\f[R] analyser = audioCtx.createAnalyser();
\f[B]const\f[R] distortion = audioCtx.createWaveShaper();
\f[B]const\f[R] gainNode = audioCtx.createGain();
\f[B]const\f[R] biquadFilter = audioCtx.createBiquadFilter();
\f[B]const\f[R] convolver = audioCtx.createConvolver();

\f[I]// Connect the nodes together\f[R]

source = audioCtx.createMediaStreamSource(stream);
source.connect(analyser);
analyser.connect(distortion);
distortion.connect(biquadFilter);
biquadFilter.connect(convolver);
convolver.connect(gainNode);
gainNode.connect(audioCtx.destination);

\f[I]// Manipulate the Biquad filter\f[R]

biquadFilter.type = \(dqlowshelf\(dq;
biquadFilter.frequency.value = 1000;
biquadFilter.gain.value = 25;
.EE
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
