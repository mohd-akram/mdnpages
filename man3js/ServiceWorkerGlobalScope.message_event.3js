.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "ServiceWorkerGlobalScope.message_event" "JS" "March 2, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ServiceWorkerGlobalScope.message_event \- ServiceWorkerGlobalScope:
message event
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]message\f[B]\f[R] event of the
\f[CR]ServiceWorkerGlobalScope\f[R] interface occurs when incoming
messages are received.
Controlled pages can use the \f[CR]ServiceWorker.postMessage()\f[R]
method to send messages to service workers.
The service worker can optionally send a response back via the
\f[CR]Client.postMessage()\f[R], corresponding to the controlled page.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {});

onmessage = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
An \f[CR]ExtendableMessageEvent\f[R].
Inherits from \f[CR]ExtendableEvent\f[R].
.SH EVENT PROPERTIES
\f[I]Inherits properties from its parent,
\f[CI]ExtendableEvent\f[I]\f[R].
.TP
\f[B]ExtendableMessageEvent.data\f[R] \f[I](read\-only)\f[R]
Returns the event\[cq]s data.
It can be any data type.
If dispatched in \f[CR]messageerror\f[R] event, the property will be
\f[CR]null\f[R].
.TP
\f[B]ExtendableMessageEvent.origin\f[R] \f[I](read\-only)\f[R]
Returns the origin of the \f[CR]Client\f[R] that sent the message.
.TP
\f[B]ExtendableMessageEvent.lastEventId\f[R] \f[I](read\-only)\f[R]
Represents, in server\-sent events, the last event ID of the event
source.
.TP
\f[B]ExtendableMessageEvent.source\f[R] \f[I](read\-only)\f[R]
Returns a reference to the \f[CR]Client\f[R] object that sent the
message.
.TP
\f[B]ExtendableMessageEvent.ports\f[R] \f[I](read\-only)\f[R]
Returns the array containing the \f[CR]MessagePort\f[R] objects
representing the ports of the associated message channel.
.SH EXAMPLES
In the below example a page gets a handle to the
\f[CR]ServiceWorker\f[R] object via
\f[CR]ServiceWorkerRegistration.active\f[R], and then calls its
\f[CR]postMessage()\f[R] function.
.IP
.EX
\f[I]// main.js\f[R]
\f[B]if\f[R] (navigator.serviceWorker) {
  navigator.serviceWorker.register(\[dq]service\-worker.js\[dq]);

  navigator.serviceWorker.addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
    \f[I]// event is a MessageEvent object\f[R]
    console.log(\[ga]The service worker sent me a message: ${event.data}\[ga]);
  });

  navigator.serviceWorker.ready.then((registration) \f[B]=>\f[R] {
    registration.active.postMessage(\[dq]Hi service worker\[dq]);
  });
}
.EE
.PP
The service worker can receive the message by listening to the
\f[CR]message\f[R] event:
.IP
.EX
\f[I]// service\-worker.js\f[R]
addEventListener(\[dq]message\[dq], (event) \f[B]=>\f[R] {
  \f[I]// event is an ExtendableMessageEvent object\f[R]
  console.log(\[ga]The client sent me a message: ${event.data}\[ga]);

  event.source.postMessage(\[dq]Hi client\[dq]);
});
.EE
.PP
Alternatively, the script can listen for the message using
\f[CR]onmessage\f[R]:
.IP
.EX
\f[I]// service\-worker.js\f[R]
self.onmessage = (event) \f[B]=>\f[R] {
  \f[I]// event is an ExtendableMessageEvent object\f[R]
  console.log(\[ga]The client sent me a message: ${event.data}\[ga]);

  event.source.postMessage(\[dq]Hi client\[dq]);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using Service Workers
.IP \[bu] 2
\c
.UR https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker
Service workers basic code example
.UE \c
.IP \[bu] 2
Using web workers
