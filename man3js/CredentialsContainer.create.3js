.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "CredentialsContainer.create" "JS" "February 4, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CredentialsContainer.create \- CredentialsContainer: create() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]create()\f[B]\f[R] method of the
\f[CR]CredentialsContainer\f[R] interface creates a new credential,
which can then be stored and later retrieved using the
\f[CR]navigator.credentials.get()\f[R] method.
The retrieved credential can then be used by a website to authenticate a
user.
.PP
This method supports three different types of credential:
.IP \[bu] 2
A password credential, which enables a user to sign in using a password.
.IP \[bu] 2
A federated credential, which enables a user to sign in using a
federated identity provider.
.IP \[bu] 2
A public key credential, which enables a user to sign in with an
authenticator such as a biometric reader built into the platform or a
removable hardware token.
.PP
Note that the Federated Credential Management API (FedCM) supersedes the
federated credential type.
.SH SYNTAX
.IP
.EX
create()
create(options)
.EE
.SS Parameters
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object that contains options for the requested new
\f[CR]Credentials\f[R] object.
It can contain the following properties:
.RS
.TP
\f[B]signal\f[R] \f[I](optional)\f[R]
An \f[CR]AbortSignal\f[R] object instance that allows an ongoing
\f[CR]create()\f[R] operation to be aborted.
An aborted operation may complete normally (generally if the abort was
received after the operation finished) or reject with an
\f[CR]AbortError\f[R] \f[CR]DOMException\f[R].
.PP
Each of the following properties represents a \f[I]credential type\f[R]
being created.
One and only one of them must be specified:
.TP
\f[B]federated\f[R] \f[I](optional)\f[R]
A \f[CR]FederatedCredentialInit\f[R] object containing requirements for
creating a federated identify provider credential.
.TP
\f[B]password\f[R] \f[I](optional)\f[R]
A \f[CR]PasswordCredentialInit\f[R] object containing requirements for
creating a password credential.
.TP
\f[B]publicKey\f[R] \f[I](optional)\f[R]
A \f[CR]PublicKeyCredentialCreationOptions\f[R] object containing
requirements for creating a public key credential.
Causes the \f[CR]create()\f[R] call to request that the user agent
creates new credentials via an authenticator \[em] either for
registering a new account or for associating a new asymmetric key pair
with an existing account.
.RS
.RS
.PP
\f[B]Note:\f[R] Usage of \f[CR]create()\f[R] with the
\f[CR]publicKey\f[R] parameter may be blocked by a
\f[CR]publickey\-credentials\-create\f[R] Permissions Policy set on your
server.
.RE
.RE
.RE
.SS Return value
A \f[CR]Promise\f[R] that resolves with one of the following:
.IP \[bu] 2
A \f[CR]FederatedCredential\f[R], if the credential type was
\f[CR]federated\f[R].
.IP \[bu] 2
A \f[CR]PasswordCredential\f[R], if the credential type was
\f[CR]password\f[R].
.IP \[bu] 2
A \f[CR]PublicKeyCredential\f[R], if the credential type was
\f[CR]publicKey\f[R].
.PP
If no credential object can be created, the promise resolves with
\f[CR]null\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
In the case of a \f[CR]PasswordCredential\f[R] creation request,
\f[CR]id\f[R], \f[CR]origin\f[R], or \f[CR]password\f[R] were not
provided (empty).
.TP
\f[B]NotAllowedError\f[R] \f[B]DOMException\f[R]
Possible causes include:
.RS
.IP \[bu] 2
Usage was blocked by a \f[CR]publickey\-credentials\-create\f[R]
Permissions Policy.
.IP \[bu] 2
The function is called cross\-origin but the iframe\[cq]s
\f[CR]allow\f[R] attribute does not set an appropriate
\f[CR]publickey\-credentials\-create\f[R] policy.
.IP \[bu] 2
The function is called cross\-origin and the \f[CR]<iframe>\f[R] does
not have transient activation.
.IP \[bu] 2
An attempt is made to create a discoverable credential
(\f[CR]residentKey\f[R] is set to \f[CR]required\f[R] in the
\f[CR]create()\f[R] call\[cq]s
\f[CR]PublicKeyCredentialCreationOptions\f[R] option), but the user does
not have a security key that supports discoverable credentials, and
cancels the operation.
.RE
.TP
\f[B]AbortError\f[R] \f[B]DOMException\f[R]
The operation was aborted.
.SH EXAMPLES
.SS Creating a password credential
This example creates a password credential from a
\f[CR]PasswordCredentialInit\f[R] object.
.IP
.EX
\f[B]const\f[R] credInit = {
  id: \[dq]1234\[dq],
  name: \[dq]Serpentina\[dq],
  origin: \[dq]https://example.org\[dq],
  password: \[dq]the last visible dog\[dq],
};

\f[B]const\f[R] makeCredential = document.querySelector(\[dq]#make\-credential\[dq]);

makeCredential.addEventListener(\[dq]click\[dq], \f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]const\f[R] cred = \f[B]await\f[R] navigator.credentials.create({
    password: credInit,
  });
  console.log(cred.name);
  \f[I]// Serpentina\f[R]
  console.log(cred.password);
  \f[I]// the last visible dog\f[R]
});
.EE
.SS Creating a federated credential
This example creates a federated credential from a
\f[CR]FederatedCredentialInit\f[R] object.
.IP
.EX
\f[B]const\f[R] credInit = {
  id: \[dq]1234\[dq],
  name: \[dq]Serpentina\[dq],
  origin: \[dq]https://example.org\[dq],
  protocol: \[dq]openidconnect\[dq],
  provider: \[dq]https://provider.example.org\[dq],
};

\f[B]const\f[R] makeCredential = document.querySelector(\[dq]#make\-credential\[dq]);

makeCredential.addEventListener(\[dq]click\[dq], \f[B]async\f[R] () \f[B]=>\f[R] {
  \f[B]const\f[R] cred = \f[B]await\f[R] navigator.credentials.create({
    federated: credInit,
  });
  console.log(cred.name);
  console.log(cred.provider);
});
.EE
.SS Creating a public key credential
This example creates a public key credential from a
\f[CR]PublicKeyCredentialCreationOptions\f[R] object.
.IP
.EX
\f[B]const\f[R] publicKey = {
  challenge: challengeFromServer,
  rp: { id: \[dq]acme.com\[dq], name: \[dq]ACME Corporation\[dq] },
  user: {
    id: \f[B]new\f[R] Uint8Array([79, 252, 83, 72, 214, 7, 89, 26]),
    name: \[dq]jamiedoe\[dq],
    displayName: \[dq]Jamie Doe\[dq],
  },
  pubKeyCredParams: [{ type: \[dq]public\-key\[dq], alg: \-7 }],
};

\f[B]const\f[R] publicKeyCredential = \f[B]await\f[R] navigator.credentials.create({ publicKey });
.EE
.PP
The \f[CR]create()\f[R] call, if successful, returns a promise that
resolves with a \f[CR]PublicKeyCredential\f[R] object instance,
representing a public key credential that can later be used to
authenticate a user via a WebAuthn \f[CR]get()\f[R] call.
Its \f[CR]PublicKeyCredential.response\f[R] property contains an
\f[CR]AuthenticatorAttestationResponse\f[R] object providing access to
several useful pieces of information including the authenticator data,
public key, transport mechanisms, and more.
.IP
.EX
navigator.credentials.create({ publicKey }).then((publicKeyCredential) \f[B]=>\f[R] {
  \f[B]const\f[R] response = publicKeyCredential.response;

  \f[I]// Access attestationObject ArrayBuffer\f[R]
  \f[B]const\f[R] attestationObj = response.attestationObject;

  \f[I]// Access client JSON\f[R]
  \f[B]const\f[R] clientJSON = response.clientDataJSON;

  \f[I]// Return authenticator data ArrayBuffer\f[R]
  \f[B]const\f[R] authenticatorData = response.getAuthenticatorData();

  \f[I]// Return public key ArrayBuffer\f[R]
  \f[B]const\f[R] pk = response.getPublicKey();

  \f[I]// Return public key algorithm identifier\f[R]
  \f[B]const\f[R] pkAlgo = response.getPublicKeyAlgorithm();

  \f[I]// Return permissible transports array\f[R]
  \f[B]const\f[R] transports = response.getTransports();
});
.EE
.PP
Some of this data will need to be stored on the server for future
authentication operations against this credential \[em] for example the
public key, the algorithm used, and the permissible transports.
.RS
.PP
\f[B]Note:\f[R] See Creating a key pair and registering a user for more
information about how the overall flow works.
.RE
