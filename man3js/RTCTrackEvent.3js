.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "RTCTrackEvent" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCTrackEvent \- RTCTrackEvent
.SH SYNOPSIS
The WebRTC API interface \f[B]\f[CB]RTCTrackEvent\f[B]\f[R] represents
the \f[CR]track\f[R] event, which is sent when a new
\f[CR]MediaStreamTrack\f[R] is added to an \f[CR]RTCRtpReceiver\f[R]
which is part of the \f[CR]RTCPeerConnection\f[R].
.PP
The target is the \f[CR]RTCPeerConnection\f[R] object to which the track
is being added.
.PP
This event is sent by the WebRTC layer to the website or application, so
you will not typically need to instantiate an \f[CR]RTCTrackEvent\f[R]
yourself.
.SH CONSTRUCTOR
.TP
\f[B]RTCTrackEvent()\f[R]
Creates and returns a new \f[CR]RTCTrackEvent\f[R] object.
You will probably not need to create new track events yourself, since
they\[cq]re typically created by the WebRTC infrastructure and sent to
the connection\[cq]s \f[CR]ontrack\f[R] event handler.
.SH INSTANCE PROPERTIES
\f[I]Since \f[CI]RTCTrackEvent\f[I] is based on \f[CI]Event\f[I], its
properties are also available.\f[R]
.TP
\f[B]receiver\f[R] \f[I](read\-only)\f[R]
The \f[CR]RTCRtpReceiver\f[R] used by the track that\[cq]s been added to
the \f[CR]RTCPeerConnection\f[R].
.TP
\f[B]streams\f[R] \f[I](read\-only)\f[R] \f[I](optional)\f[R]
An array of \f[CR]MediaStream\f[R] objects, each representing one of the
media streams to which the added \f[CR]track\f[R] belongs.
By default, the array is empty, indicating a streamless track.
.TP
\f[B]track\f[R] \f[I](read\-only)\f[R]
The \f[CR]MediaStreamTrack\f[R] which has been added to the connection.
.TP
\f[B]transceiver\f[R] \f[I](read\-only)\f[R]
The \f[CR]RTCRtpTransceiver\f[R] being used by the new track.
.SH TRACK EVENT TYPES
There is only one type of track event.
.SS \f[CR]track\f[R]
The \f[CR]track\f[R] event is sent to the \f[CR]RTCPeerConnection\f[R]
when a new track has been added to the connection.
By the time the \f[CR]track\f[R] event is delivered to the
\f[CR]RTCPeerConnection\f[R]\[cq]s \f[CR]ontrack\f[R] handler, the new
media has completed its negotiation for a specific
\f[CR]RTCRtpReceiver\f[R] (which is specified by the event\[cq]s
\f[CR]receiver\f[R] property).
.PP
In addition, the \f[CR]MediaStreamTrack\f[R] specified by the
receiver\[cq]s \f[CR]track\f[R] is the same one specified by the
event\[cq]s \f[CR]track\f[R], and the track has been added to any
associated remote \f[CR]MediaStream\f[R] objects.
.PP
You can add a \f[CR]track\f[R] event listener to be notified when the
new track is available so that you can, for example, attach its media to
a \f[CR]<video>\f[R] element, using either
\f[CR]RTCPeerConnection.addEventListener()\f[R] or the
\f[CR]ontrack\f[R] event handler property.
.RS
.PP
\f[B]Note:\f[R] It may be helpful to keep in mind that you receive the
\f[CR]track\f[R] event when a new inbound track has been added to your
connection, and you call \f[CR]addTrack()\f[R] to add a track to the far
end of the connection, thereby triggering a \f[CR]track\f[R] event on
the remote peer.
.RE
.SH EXAMPLE
This simple example creates an event listener for the \f[CR]track\f[R]
event which sets the \f[CR]srcObject\f[R] of the \f[CR]<video>\f[R]
element with the ID \f[CR]videobox\f[R] to the first stream in the list
passed in the event\[cq]s \f[CR]streams\f[R] array.
.IP
.EX
peerConnection.addEventListener(
  \[dq]track\[dq],
  (e) \f[B]=>\f[R] {
    \f[B]let\f[R] videoElement = document.getElementById(\[dq]videobox\[dq]);
    videoElement.srcObject = e.streams[0];
  },
  \f[B]false\f[R],
);
.EE
