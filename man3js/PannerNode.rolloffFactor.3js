.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "PANNERNODE.ROLLOFFFACTOR" "3JS" "September 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PannerNode.rolloffFactor \- PannerNode: rolloffFactor property
.SH SYNOPSIS
The \f[CR]rolloffFactor\f[R] property of the \f[CR]PannerNode\f[R]
interface is a double value describing how quickly the volume is reduced
as the source moves away from the listener.
This value is used by all distance models.
The \f[CR]rolloffFactor\f[R] property\(cqs default value is
\f[CR]1\f[R].
.SH VALUE
A number whose range depends on the \f[CR]distanceModel\f[R] of the
panner as follows (negative values are not allowed):
.TP
\f[B]\(dqlinear\(dq\f[R]
The range is 0 to 1.
.TP
\f[B]\(dqinverse\(dq\f[R]
The range is 0 to \f[CR]Infinity\f[R].
.TP
\f[B]\(dqexponential\(dq\f[R]
The range is 0 to \f[CR]Infinity\f[R].
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if the property has been given a value that is outside the
accepted range.
.SH EXAMPLES
This example demonstrates how different \f[CR]rolloffFactor\f[R] values
affect how the volume of the test tone decreases with increasing
distance from the listener:
.IP
.EX
\f[B]const\f[R] context = \f[B]new\f[R] AudioContext();
\f[I]// all our test tones will last this many seconds\f[R]
\f[B]const\f[R] NOTE_LENGTH = 4;
\f[I]// this is how far we\(aqll move the sound\f[R]
\f[B]const\f[R] Z_DISTANCE = 20;

\f[I]// this function creates a graph for the test tone with a given rolloffFactor\f[R]
\f[I]// and schedules it to move away from the listener along the Z (depth\-wise) axis\f[R]
\f[I]// at the given start time, resulting in a decrease in volume (decay)\f[R]
\f[B]const\f[R] scheduleTestTone = (rolloffFactor, startTime) \f[B]=>\f[R] {
  \f[B]const\f[R] osc = \f[B]new\f[R] OscillatorNode(context);

  \f[B]const\f[R] panner = \f[B]new\f[R] PannerNode(context);
  panner.rolloffFactor = rolloffFactor;

  \f[I]// set the initial Z position, then schedule the ramp\f[R]
  panner.positionZ.setValueAtTime(0, startTime);
  panner.positionZ.linearRampToValueAtTime(Z_DISTANCE, startTime + NOTE_LENGTH);

  osc.connect(panner).connect(context.destination);

  osc.start(startTime);
  osc.stop(startTime + NOTE_LENGTH);
};

\f[I]// this tone should decay fairly quickly\f[R]
scheduleTestTone(1, context.currentTime);
\f[I]// this tone should decay slower than the previous one\f[R]
scheduleTestTone(0.5, context.currentTime + NOTE_LENGTH);
\f[I]// this tone should decay only slightly\f[R]
scheduleTestTone(0.1, context.currentTime + NOTE_LENGTH * 2);
.EE
.PP
After running this code, the resulting waveforms should look something
like this:
[IMAGE: A waveform visualization of three oscillator tones produced in
Web Audio.
Each oscillator moves away from the listener at the same speed, but with
different rolloffFactors affecting the resulting volume decay.]
A waveform visualization of three oscillator tones produced in Web
Audio.
Each oscillator moves away from the listener at the same speed, but with
different rolloffFactors affecting the resulting volume decay.
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
.IP \(bu 2
Web Audio spatialization basics
