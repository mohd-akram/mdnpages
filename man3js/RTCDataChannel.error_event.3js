.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RTCDATACHANNEL.ERROR_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCDataChannel.error_event \- RTCDataChannel: error event
.SH SYNOPSIS
A WebRTC \f[CR]error\f[R] event is sent to an \f[CR]RTCDataChannel\f[R]
object\(cqs \f[CR]onerror\f[R] event handler when an error occurs on the
data channel.
.PP
The \f[CR]RTCErrorEvent\f[R] object provides details about the error
that occurred; see that article for details.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqerror\(dq, (event) => { })

onerror = (event) => { }
.EE
.SH EVENT TYPE
An \f[CR]RTCErrorEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]In addition to the properties listed below, properties from the
parent interface, \f[CI]Event\f[I], are available.\f[R]
.TP
\f[B]error\f[R] \f[I](read\-only)\f[R]
An \f[CR]RTCError\f[R] object specifying the error which occurred; this
object includes the type of error that occurred, and information about
where the error occurred (such as which line number in the SDP or what
SCTP cause code was at issue).
.SH EXAMPLES
.IP
.EX
\f[I]// Strings for each of the SCTP cause codes found in RFC\f[R]
\f[I]// 4960, section 3.3.10:\f[R]
\f[I]// https://datatracker.ietf.org/doc/html/rfc4960#section\-3.3.10\f[R]

\f[B]const\f[R] sctpCauseCodes = [
  \(dqNo SCTP error\(dq,
  \(dqInvalid stream identifier\(dq,
  \(dqMissing mandatory parameter\(dq,
  \(dqStale cookie error\(dq,
  \(dqSender is out of resource (i.e., memory)\(dq,
  \(dqUnable to resolve address\(dq,
  \(dqUnrecognized SCTP chunk type received\(dq,
  \(dqInvalid mandatory parameter\(dq,
  \(dqUnrecognized parameters\(dq,
  \(dqNo user data (SCTP DATA chunk has no data)\(dq,
  \(dqCookie received while shutting down\(dq,
  \(dqRestart of an association with new addresses\(dq,
  \(dqUser\-initiated abort\(dq,
  \(dqProtocol violation\(dq,
];

dc.addEventListener(
  \(dqerror\(dq,
  (ev) \f[B]=>\f[R] {
    \f[B]const\f[R] err = ev.error;

    console.error(\(dqWebRTC error: \(dq, err.message);

    \f[I]// Handle specific error detail types\f[R]

    \f[B]switch\f[R] (err.errorDetail) {
      \f[B]case\f[R] \(dqsdp\-syntax\-error\(dq:
        console.error(\(dq    SDP syntax error in line \(dq, err.sdpLineNumber);
        \f[B]break\f[R];
      \f[B]case\f[R] \(dqidp\-load\-failure\(dq:
        console.error(
          \(dq    Identity provider load failure: HTTP error \(dq,
          err.httpRequestStatusCode,
        );
        \f[B]break\f[R];
      \f[B]case\f[R] \(dqsctp\-failure\(dq:
        \f[B]if\f[R] (err.sctpCauseCode < sctpCauseCodes.length) {
          console.error(\(dq    SCTP failure: \(dq, err.sctpCauseCode);
        } \f[B]else\f[R] {
          console.error(\(dq    Unknown SCTP error\(dq);
        }
        \f[B]break\f[R];
      \f[B]case\f[R] \(dqdtls\-failure\(dq:
        \f[B]if\f[R] (err.receivedAlert) {
          console.error(\(dq    Received DTLS failure alert: \(dq, err.receivedAlert);
        }
        \f[B]if\f[R] (err.sentAlert) {
          console.error(\(dq    Sent DTLS failure alert: \(dq, err.receivedAlert);
        }
        \f[B]break\f[R];
    }

    \f[I]// Add source file name and line information\f[R]

    console.error(
      \(dq    Error in file \(dq,
      err.filename,
      \(dq at line \(dq,
      err.lineNumber,
      \(dq, column \(dq,
      err.columnNumber,
    );
  },
  \f[B]false\f[R],
);
.EE
.PP
The received event provides details in an \f[CR]RTCError\f[R] object
called \f[CR]error\f[R]; \f[CR]RTCError\f[R] is an extension of the
\f[CR]DOMException\f[R] interface.
The error\(cqs \f[CR]name\f[R] is \f[CR]RTCError\f[R] and the
\f[CR]message\f[R] is an error string specified by the WebRTC layer.
.PP
Error information is output to the console using
\f[CR]console.error()\f[R].
The \f[CR]message\f[R] string is always output, as is information about
the source file\(cqs name, line number, and column number at which the
error occurred.
.PP
In addition, however, depending on the value of \f[CR]errorDetail\f[R],
additional information may be output.
Each error type has a different set of information output.
For example, an SDP syntax error displays the line number of the error
within the SDP, and an SCTP error displays a message corresponding to
the SCTP cause code.
Other error types similarly output appropriate information.
.PP
You can also set up an event handler for \f[CR]error\f[R] events using
the \f[CR]RTCDataChannel\f[R] interface\(cqs \f[CR]onerror\f[R] event
handler property:
.IP
.EX
dc.onerror = (ev) \f[B]=>\f[R] {
  \f[B]const\f[R] err = ev.error;

  \f[I]// \&...\f[R]
};
.EE
.RS
.PP
\f[B]Note:\f[R] Since \f[CR]RTCError\f[R] is not one of the legacy
errors, the value of \f[CR]RTCError.code\f[R] is always 0.
.RE
.SH SEE ALSO
.IP \(bu 2
WebRTC API
.IP \(bu 2
A simple RTCDataChannel example
.IP \(bu 2
Related events: \f[CR]open\f[R], \f[CR]message\f[R], and
\f[CR]close\f[R]
