.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Document.querySelector" "JS" "August 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Document.querySelector \- Document: querySelector() method
.SH SYNOPSIS
The \f[CR]Document\f[R] method \f[B]\f[CB]querySelector()\f[B]\f[R]
returns the first \f[CR]Element\f[R] within the document that matches
the specified CSS selector, or group of CSS selectors.
If no matches are found, \f[CR]null\f[R] is returned.
.PP
The matching is done using depth\-first pre\-order traversal of the
document\[cq]s nodes starting with the first element in the
document\[cq]s markup and iterating through sequential nodes by order of
the number of child nodes.
.PP
If the specified selector matches an ID that is incorrectly used more
than once in the document, the first element with that ID is returned.
.PP
CSS pseudo\-elements will never return any elements, as specified in the
\c
.UR https://www.w3.org/TR/selectors-api/#grammar
Selectors API
.UE \c
\&.
.SH SYNTAX
.IP
.EX
querySelector(selectors)
.EE
.SS Parameters
.TP
\f[B]selectors\f[R]
A string containing one or more selectors to match.
This string must be a valid CSS selector string; if it isn\[cq]t, a
\f[CR]SyntaxError\f[R] exception is thrown.
.RS
.PP
Note that the HTML specification does not require attribute values to be
valid CSS identifiers.
If a \f[CR]class\f[R] or \f[CR]id\f[R] attribute value is not a valid
CSS identifier, then you must escape it before using it in a selector,
either by calling \f[CR]CSS.escape()\f[R] on the value, or using one of
the techniques described in Escaping characters.
See Escaping attribute values for an example.
.RE
.SS Return value
An \f[CR]Element\f[R] object representing the first element in the
document that matches the specified set of CSS selectors, or
\f[CR]null\f[R] is returned if there are no matches.
.PP
If you need a list of all elements matching the specified selectors, you
should use \f[CR]querySelectorAll()\f[R] instead.
.SS Exceptions
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if the syntax of the specified \f[I]selectors\f[R] is invalid.
.SH EXAMPLES
.SS Finding the first element matching a class
In this example, the first element in the document with the class
\[lq]\f[CR]myclass\f[R]\[rq] is returned:
.IP
.EX
\f[B]const\f[R] el = document.querySelector(\[dq].myclass\[dq]);
.EE
.SS Complex selectors
Selectors can also be really powerful, as demonstrated in the following
example.
Here, the first \f[CR]<input>\f[R] element with the name \[lq]login\[rq]
(\f[CR]<input name=\[dq]login\[dq]/>\f[R]) located inside a
\f[CR]<div>\f[R] whose class is \[lq]user\-panel main\[rq]
(\f[CR]<div class=\[dq]user\-panel main\[dq]>\f[R]) in the document is
returned:
.IP
.EX
\f[B]const\f[R] el = document.querySelector(\[dq]div.user\-panel.main input[name=\[aq]login\[aq]]\[dq]);
.EE
.SS Negation
As all CSS selector strings are valid, you can also negate selectors:
.IP
.EX
\f[B]const\f[R] el = document.querySelector(
  \[dq]div.user\-panel:not(.main) input[name=\[aq]login\[aq]]\[dq],
);
.EE
.PP
This will select an input with a parent div with the
\f[CR]user\-panel\f[R] class but not the \f[CR]main\f[R] class.
.SS Escaping attribute values
This example shows that if an HTML document contains an \f[CR]id\f[R]
which is not a valid CSS identifier, then we must escape the attribute
value before using it in \f[CR]querySelector()\f[R].
.SS HTML
In the following code, a \f[CR]<div>\f[R] element has an \f[CR]id\f[R]
of \f[CR]\[dq]this?element\[dq]\f[R], which is not a valid CSS
identifier, because the \f[CR]\[dq]?\[dq]\f[R] character is not allowed
in CSS identifiers.
.PP
We also have three buttons, and a \f[CR]<pre>\f[R] element for logging
errors.
.IP
.EX
<\f[B]div\f[R] id=\[dq]this?element\[dq]></\f[B]div\f[R]>

<\f[B]button\f[R] id=\[dq]no\-escape\[dq]>No escape</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]css\-escape\[dq]>CSS.escape()</\f[B]button\f[R]>
<\f[B]button\f[R] id=\[dq]manual\-escape\[dq]>Manual escape</\f[B]button\f[R]>

<\f[B]pre\f[R] id=\[dq]log\[dq]></\f[B]pre\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]background\-color\f[R]: blue;
  \f[B]margin\f[R]: 1rem 0;
  \f[B]height\f[R]: 100px;
  \f[B]width\f[R]: 200px;
}
.EE
.SS JavaScript
All three buttons, when clicked, try to select the \f[CR]<div>\f[R], and
then set its background color to a random value.
.IP \[bu] 2
The first button uses the \f[CR]\[dq]this?element\[dq]\f[R] value
directly.
.IP \[bu] 2
The second button escapes the value using \f[CR]CSS.escape()\f[R].
.IP \[bu] 2
The third button explicitly escapes the \f[CR]\[dq]?\[dq]\f[R] character
using a backslash.
Note that we must also escape the backslash itself, using another
backslash, like: \f[CR]\[dq]\[rs]\[rs]?\[dq]\f[R].
.IP
.EX
\f[B]const\f[R] log = document.querySelector(\[dq]#log\[dq]);

\f[B]function\f[R] random(number) {
  \f[B]return\f[R] Math.floor(Math.random() * number);
}

\f[B]function\f[R] setBackgroundColor(id) {
  log.textContent = \[dq]\[dq];

  \f[B]try\f[R] {
    \f[B]const\f[R] element = document.querySelector(\[ga]#${id}\[ga]);
    \f[B]const\f[R] randomColor = \[ga]rgb(${random(255)} ${random(255)} ${random(255)})\[ga];
    element.style.backgroundColor = randomColor;
  } \f[B]catch\f[R] (e) {
    log.textContent = e;
  }
}

document.querySelector(\[dq]#no\-escape\[dq]).addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  setBackgroundColor(\[dq]this?element\[dq]);
});

document.querySelector(\[dq]#css\-escape\[dq]).addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  setBackgroundColor(CSS.escape(\[dq]this?element\[dq]));
});

document.querySelector(\[dq]#manual\-escape\[dq]).addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  setBackgroundColor(\[dq]this\[rs]\[rs]?element\[dq]);
});
.EE
.SS Result
Clicking the first button gives an error, while the second and third
buttons work properly.
.SH SEE ALSO
.IP \[bu] 2
Locating DOM elements using selectors
.IP \[bu] 2
\f[CR]Element.querySelector()\f[R]
.IP \[bu] 2
\f[CR]Document.querySelectorAll()\f[R]
.IP \[bu] 2
\f[CR]Element.querySelectorAll()\f[R]
