.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RTCIceCandidate.address" "JS" "October 16, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCIceCandidate.address \- RTCIceCandidate: address property
.SH SYNOPSIS
The \f[B]\f[CB]RTCIceCandidate\f[B]\f[R] interface\[cq]s read\-only
\f[B]\f[CB]address\f[B]\f[R] property is a string providing the IP
address of the device which is the source of the candidate.
The \f[CR]address\f[R] is \f[CR]null\f[R] by default if not otherwise
specified.
.PP
The \f[CR]address\f[R] field\[cq]s value is set from the
\f[CR]candidateInfo\f[R] options object passed to the
\f[CR]RTCIceCandidate()\f[R] constructor.
You can\[cq]t specify the value of \f[CR]address\f[R] directly in the
options object, but its value is automatically extracted from the
object\[cq]s \f[CR]candidate\f[R] a\-line, if it\[cq]s formatted
properly.
.SH VALUE
A string providing the IP address from which the candidate comes.
.RS
.PP
\f[B]Note:\f[R] If \f[CR]port\f[R] is \f[CR]null\f[R] \[em] and
\f[CR]port\f[R] is supported by the user agent \[em] passing the
candidate to \f[CR]addIceCandidate()\f[R] will fail, throwing an
\f[CR]OperationError\f[R] exception.
.RE
.SH SECURITY NOTES
It\[cq]s important to note here that although WebRTC does not require
the two peers on an \f[CR]RTCPeerConnection\f[R] to know one
another\[cq]s true IP addresses, the \f[CR]address\f[R] property on
\f[CR]RTCIceCandidate\f[R] \f[I]can\f[R] expose more information about
the source of the remote peer than the user expects.
The IP address can be used to derive information about the remote
device\[cq]s location, network topology, and so forth.
It can also be used for fingerprinting purposes.
.PP
The candidate IP addresses are \f[I]always\f[R] exposed to the
application through \f[CR]address\f[R], and unsavory applications can in
turn potentially reveal the address to the user.
This can occur without the remote peer\[cq]s consent.
.PP
Applications being built with user privacy and security in mind can
choose to limit the permitted candidates to relay candidates only.
Doing so prevents the remote user\[cq]s address from being exposed, but
reduces the pool of available candidates to choose from.
To do this, configure the ICE agent\[cq]s ICE transport policy with an
object confirming to the \f[CR]configuration\f[R] property described in
\f[CR]RTCPeerConnection.setConfiguration\f[R], like this:
.IP
.EX
\f[B]const\f[R] rtcConfig = {
  iceServers: [
    {
      urls: \[dq]turn:my\-turn.server.ip\[dq],
      username: \[dq]username\[dq],
      credential: \[dq]password\[dq],
    },
  ],
  iceTransportPolicy: \[dq]relay\[dq],
};
.EE
.PP
By setting \f[CR]iceTransportPolicy\f[R] to \f[CR]\[dq]relay\[dq]\f[R],
any host candidates (candidates where the IP address is the peer\[cq]s
own IP address) are left out of the pool of candidates, as are any other
candidates which aren\[cq]t relay candidates.
.SH USAGE NOTES
Consider this SDP attribute line (a\-line) which describes an ICE
candidate:
.IP
.EX
a=candidate:4234997325 1 udp 2043278322 192.0.2.172 44323 typ host
.EE
.PP
The fifth field, \f[CR]\[dq]192.0.2.172\[dq]\f[R] is the IP address in
this candidate\[cq]s a\-line string.
.SH EXAMPLES
This code snippet uses the value of \f[CR]address\f[R] to implement an
IP address based ban feature.
.IP
.EX
\f[B]if\f[R] (ipBanList.includes(candidate.address)) {
  rejectCandidate(candidate);
} \f[B]else\f[R] {
  acceptCandidate(candidate);
}
.EE
