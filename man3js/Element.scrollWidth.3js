.\" Automatically generated by Pandoc 3.4
.\"
.TH "Element.scrollWidth" "JS" "November 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Element.scrollWidth \- Element: scrollWidth property
.SH SYNOPSIS
The \f[B]\f[CB]Element.scrollWidth\f[B]\f[R] read\-only property is a
measurement of the width of an element\[cq]s content, including content
not visible on the screen due to overflow.
.PP
The \f[CR]scrollWidth\f[R] value is equal to the minimum width the
element would require in order to fit all the content in the viewport
without using a horizontal scrollbar.
The width is measured in the same way as \f[CR]clientWidth\f[R]: it
includes the element\[cq]s padding, but not its border, margin or
vertical scrollbar (if present).
It can also include the width of pseudo\-elements such as
\f[CR]::before\f[R] or \f[CR]::after\f[R].
If the element\[cq]s content can fit without a need for horizontal
scrollbar, its \f[CR]scrollWidth\f[R] is equal to
\f[CR]clientWidth\f[R].
.RS
.PP
\f[B]Note:\f[R] This property will round the value to an integer.
If you need a fractional value, use
\f[CR]Element.getBoundingClientRect()\f[R].
.RE
.SH VALUE
An integer.
.SH EXAMPLES
.SS Detecting overflowing content
In this example, we use the \f[CR]scrollWidth\f[R] property to check if
the content of an element is overflowing its boundaries.
We have two \f[CR]div\f[R] elements, the first with a width of
\f[CR]100px\f[R], and the second without a fixed width.
Their content is exactly the same, and we display a message about
whether each one is overflowing its container.
.SS HTML
.IP
.EX
<\f[B]div\f[R] id=\[dq]div1\[dq]>FooBar\-FooBar\-FooBar\-FooBar</\f[B]div\f[R]>
<\f[B]button\f[R] id=\[dq]button1\[dq]>Check for overflow</\f[B]button\f[R]>
<\f[B]pre\f[R] id=\[dq]log1\[dq]></\f[B]pre\f[R]>
<\f[B]div\f[R] id=\[dq]div2\[dq]>FooBar\-FooBar\-FooBar\-FooBar</\f[B]div\f[R]>
<\f[B]button\f[R] id=\[dq]button2\[dq]>Check for overflow</\f[B]button\f[R]>
<\f[B]pre\f[R] id=\[dq]log2\[dq]></\f[B]pre\f[R]>
.EE
.SS CSS
.IP
.EX
div {
  \f[B]padding\f[R]: 0.15em;
  \f[B]overflow\f[R]: hidden;
  \f[B]white\-space\f[R]: nowrap;
  \f[B]text\-overflow\f[R]: ellipsis;
}

button {
  \f[B]margin\f[R]: 0.15em 0 0.5em 0;
}

pre {
  \f[B]margin\f[R]: 0.5em 0;
}

div1 {
  \f[B]width\f[R]: 100px;
}

log1 {
  \f[B]margin\-bottom\f[R]: 2em;
}
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] button1 = document.getElementById(\[dq]button1\[dq]);
\f[B]const\f[R] button2 = document.getElementById(\[dq]button2\[dq]);

\f[B]const\f[R] div1 = document.getElementById(\[dq]div1\[dq]);
\f[B]const\f[R] div2 = document.getElementById(\[dq]div2\[dq]);

\f[B]const\f[R] log1 = document.getElementById(\[dq]log1\[dq]);
\f[B]const\f[R] log2 = document.getElementById(\[dq]log2\[dq]);

\f[I]// Check if the scrollWidth is bigger than the clientWidth or not\f[R]
\f[B]function\f[R] isOverflowing(element) {
  \f[B]return\f[R] element.scrollWidth > element.clientWidth;
}

\f[B]function\f[R] checkOverflow(element, log) {
  \f[B]if\f[R] (isOverflowing(element)) {
    log.innerText = \[ga]Content is overflowing, scrollWidth is ${element.scrollWidth}px\[ga];
  } \f[B]else\f[R] {
    log.innerText = \[ga]No overflows, scrollWidth is ${element.scrollWidth}px\[ga];
  }
}

button1.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  checkOverflow(div1, log1);
});

button2.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  checkOverflow(div2, log2);
});
.EE
.SS Result
Click the buttons to check if the content is overflowing the containers.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Element.clientWidth\f[R]
.IP \[bu] 2
Determining the dimensions of elements
