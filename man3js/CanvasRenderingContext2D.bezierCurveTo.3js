.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CANVASRENDERINGCONTEXT2D.BEZIERCURVETO" "3JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.bezierCurveTo \- CanvasRenderingContext2D:
bezierCurveTo() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.bezierCurveTo()\f[B]\f[R] method
of the Canvas 2D API adds a cubic Bézier curve to the current sub\-path.
It requires three points: the first two are control points and the third
one is the end point.
The starting point is the latest point in the current path, which can be
changed using \f[CR]moveTo()\f[R] before creating the Bézier curve.
.SH SYNTAX
.IP
.EX
bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)
.EE
.SS Parameters
.TP
\f[B]cp1x\f[R]
The x\-axis coordinate of the first control point.
.TP
\f[B]cp1y\f[R]
The y\-axis coordinate of the first control point.
.TP
\f[B]cp2x\f[R]
The x\-axis coordinate of the second control point.
.TP
\f[B]cp2y\f[R]
The y\-axis coordinate of the second control point.
.TP
\f[B]x\f[R]
The x\-axis coordinate of the end point.
.TP
\f[B]y\f[R]
The y\-axis coordinate of the end point.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS How bezierCurveTo works
This example shows how a cubic Bézier curve is drawn.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[I]// Define canvas and context\f[R]
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

\f[I]// Define the points as {x, y}\f[R]
\f[B]let\f[R] start = { x: 50, y: 20 };
\f[B]let\f[R] cp1 = { x: 230, y: 30 };
\f[B]let\f[R] cp2 = { x: 150, y: 80 };
\f[B]let\f[R] end = { x: 250, y: 100 };

\f[I]// Cubic Bézier curve\f[R]
ctx.beginPath();
ctx.moveTo(start.x, start.y);
ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, end.x, end.y);
ctx.stroke();

\f[I]// Start and end points\f[R]
ctx.fillStyle = \(dqblue\(dq;
ctx.beginPath();
ctx.arc(start.x, start.y, 5, 0, 2 * Math.PI); \f[I]// Start point\f[R]
ctx.arc(end.x, end.y, 5, 0, 2 * Math.PI); \f[I]// End point\f[R]
ctx.fill();

\f[I]// Control points\f[R]
ctx.fillStyle = \(dqred\(dq;
ctx.beginPath();
ctx.arc(cp1.x, cp1.y, 5, 0, 2 * Math.PI); \f[I]// Control point one\f[R]
ctx.arc(cp2.x, cp2.y, 5, 0, 2 * Math.PI); \f[I]// Control point two\f[R]
ctx.fill();
.EE
.SS Result
In this example, the control points are red and the start and end points
are blue.
.SS A simple Bézier curve
This example draws a simple Bézier curve using
\f[CR]bezierCurveTo()\f[R].
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
The curve begins at the point specified by \f[CR]moveTo()\f[R]: (30,
30).
The first control point is placed at (120, 160), and the second at (180,
10).
The curve ends at (220, 140).
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

ctx.beginPath();
ctx.moveTo(30, 30);
ctx.bezierCurveTo(120, 160, 180, 10, 220, 140);
ctx.stroke();
.EE
.SS Result
.SH SEE ALSO
.IP \(bu 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \(bu 2
Bézier curve
