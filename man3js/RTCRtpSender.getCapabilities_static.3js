.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "RTCRtpSender.getCapabilities_static" "JS" "August 6, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCRtpSender.getCapabilities_static \- RTCRtpSender: getCapabilities()
static method
.SH SYNOPSIS
The \f[I]static method\f[R]
\f[B]\f[CB]RTCRtpSender.getCapabilities()\f[B]\f[R] returns an object
describing the codec and header extension capabilities supported by the
\f[CR]RTCRtpSender\f[R].
.PP
You can, similarly, obtain the capabilities of \f[CR]RTCRtpReceiver\f[R]
objects on the device by calling the static function
\f[CR]RTCRtpReceiver.getCapabilities()\f[R].
.SH SYNTAX
.IP
.EX
RTCRtpSender.getCapabilities(kind)
.EE
.SS Parameters
.TP
\f[B]kind\f[R]
A string indicating the type of media for which the browser\[cq]s send
capabilities are requested.
The supported media kinds are: \f[CR]audio\f[R] and \f[CR]video\f[R].
.SS Return value
A new object that indicates what capabilities the browser has for
sending the specified media kind over an \f[CR]RTCPeerConnection\f[R].
If the browser doesn\[cq]t have any support for the given media
\f[CR]kind\f[R], the returned value is \f[CR]null\f[R].
.PP
The returned object has the following properties:
.TP
\f[B]codecs\f[R]
An array of objects, each describing the basic capabilities of a single
media codec supported by the \f[CR]RTCRtpSender\f[R].
.RS
.RS
.PP
\f[B]Note:\f[R] The array contains special entries that represent the
underlying components of the transport \[em] these may be ignored if
you\[cq]re only interested in the actual codecs used for the media
itself.
These are described below in the section The codecs array.
.RE
.PP
Each codec object has the following properties:
.TP
\f[B]channels\f[R] \f[I](optional)\f[R]
A positive integer value indicating the maximum number of channels
supported by the codec; for example, a codec that supports only mono
sound would have a value of 1; stereo codecs would have a 2, etc.
.TP
\f[B]clockRate\f[R]
A positive integer specifying the codec\[cq]s clock rate in Hertz (Hz).
The IANA maintains a \c
.UR https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-1
list of codecs and their parameters
.UE \c
, including their clock rates.
.TP
\f[B]mimeType\f[R]
A string indicating the codec\[cq]s MIME media type and subtype.
The MIME type strings used by RTP differ from those used elsewhere.
See RFC 3555, section 4 for the complete IANA registry of these types.
Also see Codecs used by WebRTC for details about potential codecs that
might be referenced here.
.TP
\f[B]sdpFmtpLine\f[R] \f[I](optional)\f[R]
A string giving the format specific parameters field from the
\f[CR]a=fmtp\f[R] line in the SDP which corresponds to the codec, if
such a line exists.
If there is no parameters field, this property is left out.
.RE
.TP
\f[B]headerExtensions\f[R]
An array of objects, each providing the URI of a \c
.UR https://datatracker.ietf.org/doc/html/rfc3550#section-5.3.1
header extension
.UE \c
\ supported for the current \f[CR]kind\f[R] of media.
Each object has the following property:
.RS
.TP
\f[B]uri\f[R]
A string, specifying the URI of a header extension.
The URI is formatted as described in RFC 5285.
.RE
.SH DESCRIPTION
As a static function, this is always called using the form:
.IP
.EX
capabilities = RTCRtpSender.getCapabilities(\[dq]audio\[dq]);
.EE
.PP
The returned set of capabilities is the most optimistic possible list.
It is entirely possible that certain combinations of options may fail to
work when you actually try to use them.
.PP
Calling \f[CR]RTCRtpSender.getCapabilities()\f[R] doesn\[cq]t prime the
browser in any way to handle media.
Nothing is loaded, fetched, or otherwise prepared.
It\[cq]s a means of determining what might be usable before starting to
try to access media.
.PP
Because the set of capabilities available tend to be stable for a length
of time (people don\[cq]t install and uninstall codecs and the like very
often), the media capabilities can in whole or in part provide a
cross\-origin method for identifying a user.
For that reason, in privacy\-sensitive contexts, the browser may choose
to obscure the capabilities; this might be done, for example, by leaving
out rarely\-used codec configurations.
.SS The codecs array
The \f[CR]codecs\f[R] array is an array of objects that describes a
single codec and its basic capabilities.
The browser will only report distinct capability combinations
separately.
If two sets of capabilities can be described as one, they will be.
That means that, for instance, if there are two entries for the H.264
codec (as identified by the \f[CR]mimeType\f[R] being
\[lq]video/H264\[rq]), there are other values in the capabilities
objects indicating how they\[cq]re different in some way.
.PP
There are three special entries that should always be present,
representing underlying components of the transport.
Those components are:
.TP
RED (REDundant Audio Data)
The media type of an RED entry may vary due to there being several
versions of it, but it will end with \f[CR]red\f[R], such as
\f[CR]video/red\f[R] or \f[CR]video/fwdred\f[R].
The base RED standard can be found in RFC 2198.
There may be multiple entries for RED if different forms are supported;
each will have a unique media type in that case.
.TP
FEC (Forward Error Correction)
An FEC component handles error correction data; its media type may also
vary due to there being advanced versions of the standard available, but
it will always end with \f[CR]fec\f[R].
One possible value is \f[CR]video/ulpfec\f[R] (a generic error
connection model).
There may also be multiple FEC entries if more than one form is
supported.
.TP
RTX (Retransmission)
This component is responsible for retransmission of data; it\[cq]s media
type should be \f[CR]video/rtx\f[R].
There will only be one entry for RTX, and it will not have an
\f[CR]sdpFmtpLine\f[R] property.
.PP
These entries should be ignored if only codecs related to the media are
of interest.
.SH EXAMPLES
.SS Feature support
You can use \f[CR]Object.hasOwn()\f[R] to check that
\f[CR]RTCRtpSender.getCapabilities()\f[R] is supported:
.IP
.EX
log.textContent = \[ga]RTCRtpSender.getCapabilities() supported: ${Object.hasOwn(
  RTCRtpSender,
  \[dq]getCapabilities\[dq],
)}\[ga];
.EE
.SS Checking support for a particular codec
The function below returns a \f[CR]true\f[R] or \f[CR]false\f[R]
indicating whether or not the device supports sending H.264 video on an
\f[CR]RTCRtpSender\f[R].
.RS
.PP
\f[B]Note:\f[R] Since \f[CR]RTCRtpSender.getCapabilities()\f[R] actually
only indicates \f[I]probable\f[R] support.
So below H.264 support might still fail even after getting a positive
response from this function.
.RE
.IP
.EX
\f[B]function\f[R] canSendH264() {
  \f[B]let\f[R] capabilities = RTCRtpSender.getCapabilities(\[dq]video\[dq]);

  capabilities.codecs.forEach((codec) \f[B]=>\f[R] {
    \f[B]if\f[R] (codec.mimeType === \[dq]video/H264\[dq]) {
      \f[B]return\f[R] \f[B]true\f[R];
    }
  });
  \f[B]return\f[R] \f[B]false\f[R];
}
.EE
.SS Getting all capabilities
This code example shows how we might get all supported codecs and
headers.
The HTML defines a selection list for the two kinds of capabilities, and
a log area.
.IP
.EX
<\f[B]select\f[R] id=\[dq]kind\[dq]>
  <\f[B]option\f[R] value=\[dq]audio\[dq]>audio</\f[B]option\f[R]>
  <\f[B]option\f[R] value=\[dq]video\[dq]>video</\f[B]option\f[R]>
</\f[B]select\f[R]>
<\f[B]textarea\f[R] rows=\[dq]40\[dq] cols=\[dq]100\[dq] id=\[dq]log\[dq]></\f[B]textarea\f[R]>
.EE
.PP
The JavaScript defines a function to log the capabilities for a
particular \[lq]kind\[rq].
This is called initially with the value \f[CR]audio\f[R].
A listener updates the value when the selection list \f[CR]kind\f[R] is
changed.
.IP
.EX
\f[B]const\f[R] log = document.querySelector(\[dq]#log\[dq]);
\f[B]const\f[R] kindSelector = document.querySelector(\[dq]#kind\[dq]);

logMediaCapabilities(\[dq]audio\[dq]);

kindSelector.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  log.textContent = \[dq]\[dq];
  logMediaCapabilities(kindSelector.value);
});

\f[B]function\f[R] logMediaCapabilities(kind) {
  \f[B]const\f[R] capabilities = RTCRtpSender.getCapabilities(\[ga]${kind}\[ga]);
  log.textContent += \[dq]Headers\[rs]n\[dq];
  capabilities.headerExtensions.forEach((header) \f[B]=>\f[R] {
    log.textContent += \[ga] uri: ${header.uri}\[rs]n\[ga];
  });

  log.textContent += \[dq]\[rs]nCodecs\[rs]n\[dq];
  capabilities.codecs.forEach((codec) \f[B]=>\f[R] {
    log.textContent += \[ga] mime type: ${codec.mimeType}\[rs]n\[ga];
    log.textContent += \[ga]   channels: ${codec.channels}\[rs]n\[ga]; \f[I]// max channels \- e.g. 2 is stereo\f[R]
    log.textContent += \[ga]   clockRate: ${codec.clockRate}\[rs]n\[ga]; \f[I]// clock rate in Hz\f[R]
    log.textContent += \[ga]   sdpFmtpLine: ${codec.sdpFmtpLine}\[rs]n\[ga]; \f[I]// mime media type and subtype\f[R]
  });
}
.EE
.SS Result
