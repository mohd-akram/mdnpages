.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "HTMLFormElement.elements" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLFormElement.elements \- HTMLFormElement: elements property
.SH SYNOPSIS
The \f[CR]HTMLFormElement\f[R] property \f[B]\f[CB]elements\f[B]\f[R]
returns an \f[CR]HTMLFormControlsCollection\f[R] listing all the form
controls contained in the \f[CR]<form>\f[R] element.
.PP
Independently, you can obtain just the number of form controls using the
\f[CR]length\f[R] property.
.PP
You can access a particular form control in the returned collection by
using either an index or the element\[cq]s \f[CR]name\f[R] or
\f[CR]id\f[R] attributes.
.PP
Prior to HTML 5, the returned object was an \f[CR]HTMLCollection\f[R],
on which \f[CR]HTMLFormControlsCollection\f[R] is based.
.RS
.PP
\f[B]Note:\f[R] Similarly, you can get a list of all of the forms
contained within a given document using the document\[cq]s
\f[CR]forms\f[R] property.
.RE
.SH VALUE
An \f[CR]HTMLFormControlsCollection\f[R] containing all non\-image
controls in the form.
This is a live collection; if form controls are added to or removed from
the form, this collection will update to reflect the change.
.PP
The form controls in the returned collection are in the same order in
which they appear in the form by following a preorder, depth\-first
traversal of the tree.
This is called \f[B]tree order\f[R].
.PP
Only the following elements are returned:
.IP \[bu] 2
\f[CR]<button>\f[R]
.IP \[bu] 2
\f[CR]<fieldset>\f[R]
.IP \[bu] 2
\f[CR]<input>\f[R] (with the exception that any whose \f[CR]type\f[R] is
\f[CR]\[dq]image\[dq]\f[R] are omitted for historical reasons)
.IP \[bu] 2
\f[CR]<object>\f[R]
.IP \[bu] 2
\f[CR]<output>\f[R]
.IP \[bu] 2
\f[CR]<select>\f[R]
.IP \[bu] 2
\f[CR]<textarea>\f[R]
.IP \[bu] 2
\c
.UR https://html.spec.whatwg.org/multipage/custom-elements.html#form-associated-custom-element
form\-associated custom elements
.UE \c
.SH EXAMPLES
.SS Quick syntax example
In this example, we see how to obtain the list of form controls as well
as how to access its members by index and by name or ID.
.IP
.EX
<\f[B]form\f[R] id=\[dq]my\-form\[dq]>
  <\f[B]label\f[R]>
    Username:
    <\f[B]input\f[R] type=\[dq]text\[dq] name=\[dq]username\[dq] />
  </\f[B]label\f[R]>
  <\f[B]label\f[R]>
    Full name:
    <\f[B]input\f[R] type=\[dq]text\[dq] name=\[dq]full\-name\[dq] />
  </\f[B]label\f[R]>
  <\f[B]label\f[R]>
    Password:
    <\f[B]input\f[R] type=\[dq]password\[dq] name=\[dq]password\[dq] />
  </\f[B]label\f[R]>
</\f[B]form\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] inputs = document.getElementById(\[dq]my\-form\[dq]).elements;
\f[B]const\f[R] inputByIndex = inputs[0];
\f[B]const\f[R] inputByName = inputs[\[dq]username\[dq]];
.EE
.SS Accessing form controls
This example gets the form\[cq]s element list, then iterates over the
list, looking for \f[CR]<input>\f[R] elements of type
\f[CR]\[dq]text\[dq]\f[R] so that some form of processing can be
performed on them.
.IP
.EX
\f[B]const\f[R] inputs = document.getElementById(\[dq]my\-form\[dq]).elements;

\f[I]// Iterate over the form controls\f[R]
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < inputs.length; i++) {
  \f[B]if\f[R] (inputs[i].nodeName === \[dq]INPUT\[dq] && inputs[i].type === \[dq]text\[dq]) {
    \f[I]// Update text input\f[R]
    inputs[i].value.toLocaleUpperCase();
  }
}
.EE
.SS Disabling form controls
.IP
.EX
\f[B]const\f[R] inputs = document.getElementById(\[dq]my\-form\[dq]).elements;

\f[I]// Iterate over the form controls\f[R]
\f[B]for\f[R] (\f[B]let\f[R] i = 0; i < inputs.length; i++) {
  \f[I]// Disable all form controls\f[R]
  inputs[i].setAttribute(\[dq]disabled\[dq], \[dq]\[dq]);
}
.EE
