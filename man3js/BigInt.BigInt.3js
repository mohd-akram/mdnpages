.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "BIGINT.BIGINT" "3JS" "September 30, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BigInt.BigInt \- BigInt() constructor
.SH SYNOPSIS
The \f[B]\f[CB]BigInt()\f[B]\f[R] function returns primitive values of
type BigInt.
.SH SYNTAX
.IP
.EX
BigInt(value)
.EE
.RS
.PP
\f[B]Note:\f[R] \f[CR]BigInt()\f[R] can only be called without
\f[CR]new\f[R].
Attempting to construct it with \f[CR]new\f[R] throws a
\f[CR]TypeError\f[R].
.RE
.SS Parameters
.TP
\f[B]value\f[R]
The value to be converted to a BigInt value.
It may be a string, an integer, a boolean, or another \f[CR]BigInt\f[R].
.SS Return value
A \f[CR]BigInt\f[R] value.
Number values must be integers and are converted to BigInts.
The boolean value \f[CR]true\f[R] becomes \f[CR]1n\f[R], and
\f[CR]false\f[R] becomes \f[CR]0n\f[R].
Strings are parsed as if they are source text for integer literals,
which means they can have leading and trailing whitespaces and can be
prefixed with \f[CR]0b\f[R], \f[CR]0o\f[R], or \f[CR]0x\f[R].
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if the parameter is a non\-integral number.
.TP
\f[B]TypeError\f[R]
Thrown in one of the following cases:
.RS
.IP \(bu 2
The parameter cannot be converted to a primitive.
.IP \(bu 2
After conversion to a primitive, the result is \f[CR]undefined\f[R],
\f[CR]null\f[R], \f[CR]symbol\f[R].
.RE
.TP
\f[B]SyntaxError\f[R]
Thrown if the parameter is a string that cannot be parsed as a
\f[CR]BigInt\f[R].
.SH EXAMPLES
.SS Using BigInt() to convert a number to a BigInt
\f[CR]BigInt()\f[R] is the only case where a number can be converted to
a BigInt without throwing, because it\(cqs very explicit.
However, only integers are allowed.
.IP
.EX
BigInt(123); \f[I]// 123n\f[R]
BigInt(123.3); \f[I]// RangeError: The number 123.3 cannot be converted to a BigInt because it is not an integer\f[R]
.EE
.SS Using string values
.IP
.EX
BigInt(\(dq123\(dq); \f[I]// 123n\f[R]
BigInt(\(dq0b10101\(dq); \f[I]// 21n, which is 10101 in binary\f[R]
BigInt(\(dq0o123\(dq); \f[I]// 83n, which is 123 in octal\f[R]
BigInt(\(dq0x123\(dq); \f[I]// 291n, which is 123 in hexadecimal\f[R]
BigInt(\(dq  123  \(dq); \f[I]// 123n, leading and trailing whitespaces are allowed\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]BigInt\f[R]
