.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "AnalyserNode.smoothingTimeConstant" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AnalyserNode.smoothingTimeConstant \- AnalyserNode:
smoothingTimeConstant property
.SH SYNOPSIS
The \f[B]\f[CB]smoothingTimeConstant\f[B]\f[R] property of the
\f[CR]AnalyserNode\f[R] interface is a double value representing the
averaging constant with the last analysis frame.
It\[cq]s basically an average between the current buffer and the last
buffer the \f[CR]AnalyserNode\f[R] processed, and results in a much
smoother set of value changes over time.
.SH VALUE
A double within the range \f[CR]0\f[R] to \f[CR]1\f[R] (\f[CR]0\f[R]
meaning no time averaging).
The default value is \f[CR]0.8\f[R].
.PP
If 0 is set, there is no averaging done, whereas a value of 1 means
\[lq]overlap the previous and current buffer quite a lot while computing
the value\[rq], which essentially smooths the changes across
\f[CR]AnalyserNode.getFloatFrequencyData\f[R]/\f[CR]AnalyserNode.getByteFrequencyData\f[R]
calls.
.PP
In technical terms, we apply a \c
.UR https://webaudio.github.io/web-audio-api/#blackman-window
Blackman window
.UE \c
\ and smooth the values over time.
The default value is good enough for most cases.
.RS
.PP
\f[B]Note:\f[R] If a value outside the range 0\[en]1 is set, an
\f[CR]INDEX_SIZE_ERR\f[R] exception is thrown.
.RE
.SH EXAMPLES
The following example shows basic usage of an \f[CR]AudioContext\f[R] to
create an \f[CR]AnalyserNode\f[R], then \f[CR]requestAnimationFrame\f[R]
and \f[CR]<canvas>\f[R] to collect frequency data repeatedly and draw a
\[lq]winamp bar graph style\[rq] output of the current audio input.
For more complete applied examples/information, check out our \c
.UR https://github.com/mdn/webaudio-examples/tree/main/voice-change-o-matic
Voice\-change\-O\-matic
.UE \c
\ demo (see \c
.UR https://github.com/mdn/webaudio-examples/blob/main/voice-change-o-matic/scripts/app.js#L108-L193
app.js lines 108\[en]193
.UE \c
\ for relevant code).
.PP
If you are curious about the effect the
\f[CR]smoothingTimeConstant()\f[R] has, try cloning the above example
and setting \f[CR]analyser.smoothingTimeConstant = 0;\f[R] instead.
You\[cq]ll notice that the value changes are much more jarring.
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();
\f[B]const\f[R] analyser = audioCtx.createAnalyser();
analyser.minDecibels = \-90;
analyser.maxDecibels = \-10;
analyser.smoothingTimeConstant = 0.85;

\f[I]// \&...\f[R]

analyser.fftSize = 256;
\f[B]const\f[R] bufferLength = analyser.frequencyBinCount;
console.log(bufferLength);
\f[B]const\f[R] dataArray = \f[B]new\f[R] Uint8Array(bufferLength);

canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);

\f[B]function\f[R] draw() {
  drawVisual = requestAnimationFrame(draw);

  analyser.getByteFrequencyData(dataArray);

  canvasCtx.fillStyle = \[dq]rgb(0 0 0)\[dq];
  canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

  \f[B]const\f[R] barWidth = (WIDTH / bufferLength) * 2.5;
  \f[B]let\f[R] barHeight;
  \f[B]let\f[R] x = 0;

  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i < bufferLength; i++) {
    barHeight = dataArray[i];

    canvasCtx.fillStyle = \[ga]rgb(${barHeight + 100} 50 50)\[ga];
    canvasCtx.fillRect(x, HEIGHT \- barHeight / 2, barWidth, barHeight / 2);

    x += barWidth + 1;
  }
}

draw();
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
