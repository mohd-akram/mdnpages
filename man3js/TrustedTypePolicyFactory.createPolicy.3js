.\" Automatically generated by Pandoc 3.4
.\"
.TH "TrustedTypePolicyFactory.createPolicy" "JS" "August 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
TrustedTypePolicyFactory.createPolicy \- TrustedTypePolicyFactory:
createPolicy() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]createPolicy()\f[B]\f[R] method of the
\f[CR]TrustedTypePolicyFactory\f[R] interface creates a
\f[CR]TrustedTypePolicy\f[R] object that implements the rules passed as
\f[CR]policyOptions\f[R].
.SS The default policy
In Chrome a policy with a name of \[lq]default\[rq] creates a special
policy that will be used if a string (rather than a Trusted Type object)
is passed to an injection sink.
This can be used in a transitional phase while moving from an
application that inserted strings into injection sinks.
.RS
.PP
\f[B]Note:\f[R] The above behavior is not yet settled in the
specification and may change in future.
.RE
.RS
.PP
\f[B]Warning:\f[R] A lax default policy could defeat the purpose of
using Trusted Types, and therefore should be defined with strict rules
to ensure it cannot be used to run dangerous code.
.RE
.SH SYNTAX
.IP
.EX
createPolicy(policyName, policyOptions)
.EE
.SS Parameters
.TP
\f[B]policyName\f[R]
A string with the name of the policy.
.TP
\f[B]policyOptions\f[R] \f[I](optional)\f[R]
User\-defined functions for converting strings into trusted values.
.RS
.TP
\f[B]createHTML(input[,args])\f[R]
A callback function in the form of a string that contains code to run
when creating a \f[CR]TrustedHTML\f[R] object.
.TP
\f[B]createScript(input[,args])\f[R]
A callback function in the form of a string that contains code to run
when creating a \f[CR]TrustedScript\f[R] object.
.TP
\f[B]createScriptURL(input[,args])\f[R]
A callback function in the form of a string that contains code to run
when creating a \f[CR]TrustedScriptURL\f[R] object.
.RE
.SS Return value
A \f[CR]TrustedTypePolicy\f[R] object.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if policy names are restricted by the Content Security Policy
\f[CR]trusted\-types\f[R] directive and this name is not on the
allowlist.
.TP
\f[B]TypeError\f[R]
Thrown if the name is a duplicate and the Content Security Policy
trusted\-types directive is not using \f[CR]allow\-duplicates\f[R].
.SH EXAMPLES
The below code creates a policy with the name
\f[CR]\[dq]myEscapePolicy\[dq]\f[R] with a function defined for
\f[CR]createHTML()\f[R] which sanitizes HTML.
.IP
.EX
\f[B]const\f[R] escapeHTMLPolicy = trustedTypes.createPolicy(\[dq]myEscapePolicy\[dq], {
  createHTML: (string) \f[B]=>\f[R] string.replace(/</g, \[dq]&lt;\[dq]),
});
.EE
.SS Creating a default policy
On a site where Trusted Types are enforced via a Content Security Policy
with the \f[CR]require\-trusted\-types\-for\f[R] directive set to
\f[CR]script\f[R], any injection script that accepts a script expects a
Trusted Type object.
In the case that a string is inserted instead, the following default
policy will be used.
.PP
The policy logs a message to the console to remind the developer to
refactor this part of the application to use a Trusted Type object.
It also appends details of the use of the default policy, type, and
injection sink to the returned value.
.IP
.EX
trustedTypes.createPolicy(\[dq]default\[dq], {
  createScriptURL: (s, type, sink) \f[B]=>\f[R] {
    console.log(\[dq]Please refactor.\[dq]);
    \f[B]return\f[R] \[ga]${s}?default\-policy\-used&type=${encodeURIComponent(
      type,
    )}&sink=${encodeURIComponent(sink)}\[ga];
  },
});
.EE
