.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "ConstantSourceNode.offset" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ConstantSourceNode.offset \- ConstantSourceNode: offset property
.SH SYNOPSIS
The read\-only \f[CR]offset\f[R] property of the
\f[CR]ConstantSourceNode\f[R] interface returns a \f[CR]AudioParam\f[R]
object indicating the numeric a\-rate value which is always returned by
the source when asked for the next sample.
.RS
.PP
\f[B]Note:\f[R] While the \f[CR]AudioParam\f[R] named \f[CR]offset\f[R]
is read\-only, the \f[CR]value\f[R] property within is not.
So you can change the value of \f[CR]offset\f[R] by setting the value of
\f[CR]ConstantSourceNode.offset.value\f[R]:
.IP
.EX
myConstantSourceNode.offset.value = newValue;
.EE
.RE
.SH VALUE
An \f[CR]AudioParam\f[R] object indicating the a\-rate value returned
for every sample by this node.
The default value is 1.0.
.PP
To access the \f[CR]offset\f[R] parameter\[cq]s current value, access
the parameter\[cq]s \f[CR]value\f[R] property, as shown in the syntax
box above.
.SH EXAMPLES
This example shows how to set up a \f[CR]ConstantSourceNode\f[R] so its
\f[CR]offset\f[R] is used as the input to a pair of
\f[CR]GainNode\f[R]s; this snippet is derived from the complete example
you can find in Controlling multiple parameters with ConstantSourceNode.
.IP
.EX
gainNode2 = context.createGain();
gainNode3 = context.createGain();
gainNode2.gain.value = gainNode3.gain.value = 0.5;

volumeSliderControl.value = gainNode2.gain.value;

constantSource = context.createConstantSource();
constantSource.connect(gainNode2.gain);
constantSource.connect(gainNode3.gain);
.EE
.PP
First, the gain nodes are created and configured, and a slider
control\[cq]s value is set to match the gain on the two nodes.
Then we create a new \f[CR]ConstantSourceNode\f[R] and make it the
source for the two gain nodes\[cq] \f[CR]GainNode.gain\f[R] values.
Each of those values is also an \f[CR]AudioParam\f[R].
.PP
Let\[cq]s say we have an event handler (for \f[CR]click\f[R] events, in
this case) which needs to respond by altering the value of the two gain
nodes.
With the linkage above in place, that can be done using this simple
event handler:
.IP
.EX
\f[B]function\f[R] handleClickEvent(event) {
  constantSource.offset.value = volumeSliderControl.value;
}
.EE
.PP
All this function has to do is fetch the current value of the slider
control we\[cq]re using to control the paired nodes\[cq] gains, then
store that value into the \f[CR]ConstantSourceNode\f[R]\[cq]s
\f[CR]offset\f[R] parameter.
That\[cq]s done by changing the contents of its
\f[CR]AudioParam.value\f[R] property.
The two gain nodes quickly adopt the new volume level.
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
.IP \[bu] 2
\f[CR]ConstantSourceNode\f[R]
.IP \[bu] 2
\f[CR]AudioNode\f[R]
.IP \[bu] 2
\f[CR]AudioParam\f[R]
