.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "Array.every" "JS" "November 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.every \- Array.prototype.every()
.SH SYNOPSIS
The \f[B]\f[CB]every()\f[B]\f[R] method of \f[CR]Array\f[R] instances
tests whether all elements in the array pass the test implemented by the
provided function.
It returns a Boolean value.
.SH SYNTAX
.IP
.EX
every(callbackFn)
every(callbackFn, thisArg)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
It should return a truthy value to indicate the element passes the test,
and a falsy value otherwise.
The function is called with the following arguments:
.RS
.TP
\f[B]element\f[R]
The current element being processed in the array.
.TP
\f[B]index\f[R]
The index of the current element being processed in the array.
.TP
\f[B]array\f[R]
The array \f[CR]every()\f[R] was called upon.
.RE
.TP
\f[B]thisArg\f[R] \f[I](optional)\f[R]
A value to use as \f[CR]this\f[R] when executing \f[CR]callbackFn\f[R].
See iterative methods.
.SS Return value
\f[CR]true\f[R] unless \f[CR]callbackFn\f[R] returns a falsy value for
an array element, in which case \f[CR]false\f[R] is immediately
returned.
.SH DESCRIPTION
The \f[CR]every()\f[R] method is an iterative method.
It calls a provided \f[CR]callbackFn\f[R] function once for each element
in an array, until the \f[CR]callbackFn\f[R] returns a falsy value.
If such an element is found, \f[CR]every()\f[R] immediately returns
\f[CR]false\f[R] and stops iterating through the array.
Otherwise, if \f[CR]callbackFn\f[R] returns a truthy value for all
elements, \f[CR]every()\f[R] returns \f[CR]true\f[R].
Read the iterative methods section for more information about how these
methods work in general.
.PP
\f[CR]every\f[R] acts like the \[lq]for all\[rq] quantifier in
mathematics.
In particular, for an empty array, it returns \f[CR]true\f[R].
(It is \c
.UR https://en.wikipedia.org/wiki/Vacuous_truth
vacuously true
.UE \c
\ that all elements of the \c
.UR https://en.wikipedia.org/wiki/Empty_set#Properties
empty set
.UE \c
\ satisfy any given condition.)
.PP
\f[CR]callbackFn\f[R] is invoked only for array indexes which have
assigned values.
It is not invoked for empty slots in sparse arrays.
.PP
The \f[CR]every()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Testing size of all array elements
The following example tests whether all elements in the array are 10 or
bigger.
.IP
.EX
\f[B]function\f[R] isBigEnough(element, index, array) {
  \f[B]return\f[R] element >= 10;
}
[12, 5, 8, 130, 44].every(isBigEnough); \f[I]// false\f[R]
[12, 54, 18, 130, 44].every(isBigEnough); \f[I]// true\f[R]
.EE
.SS Check if one array is a subset of another array
The following example tests if all the elements of an array are present
in another array.
.IP
.EX
\f[B]const\f[R] isSubset = (array1, array2) \f[B]=>\f[R]
  array2.every((element) \f[B]=>\f[R] array1.includes(element));

console.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 7, 6])); \f[I]// true\f[R]
console.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 8, 7])); \f[I]// false\f[R]
.EE
.SS Using the third argument of callbackFn
The \f[CR]array\f[R] argument is useful if you want to access another
element in the array.
The following example first uses \f[CR]filter()\f[R] to extract the
positive values and then uses \f[CR]every()\f[R] to check whether the
array is strictly increasing.
.IP
.EX
\f[B]const\f[R] numbers = [\-2, 4, \-8, 16, \-32];
\f[B]const\f[R] isIncreasing = numbers
  .filter((num) \f[B]=>\f[R] num > 0)
  .every((num, idx, arr) \f[B]=>\f[R] {
    \f[I]// Without the arr argument, there\[aq]s no way to easily access the\f[R]
    \f[I]// intermediate array without saving it to a variable.\f[R]
    \f[B]if\f[R] (idx === 0) \f[B]return\f[R] \f[B]true\f[R];
    \f[B]return\f[R] num > arr[idx \- 1];
  });
console.log(isIncreasing); \f[I]// true\f[R]
.EE
.SS Using every() on sparse arrays
\f[CR]every()\f[R] will not run its predicate on empty slots.
.IP
.EX
console.log([1, , 3].every((x) \f[B]=>\f[R] x !== \f[B]undefined\f[R])); \f[I]// true\f[R]
console.log([2, , 2].every((x) \f[B]=>\f[R] x === 2)); \f[I]// true\f[R]
.EE
.SS Calling every() on non\-array objects
The \f[CR]every()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each property with a nonnegative
integer key less than \f[CR]length\f[R] until they all have been
accessed or \f[CR]callbackFn\f[R] returns \f[CR]false\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: \[dq]a\[dq],
  1: \[dq]b\[dq],
  2: \[dq]c\[dq],
  3: 345, \f[I]// ignored by every() since length is 3\f[R]
};
console.log(
  Array.prototype.every.call(arrayLike, (x) \f[B]=>\f[R] \f[B]typeof\f[R] x === \[dq]string\[dq]),
); \f[I]// true\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.every\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.forEach()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.some()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.find()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.every()\f[R]
