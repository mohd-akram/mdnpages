.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "HTMLELEMENT.BEFORETOGGLE_EVENT" "3JS" "May 2, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
HTMLElement.beforetoggle_event \- HTMLElement: beforetoggle event
.SH SYNOPSIS
The \f[B]\f[CB]beforetoggle\f[B]\f[R] event of the
\f[CR]HTMLElement\f[R] interface fires on a popover or
\f[CR]<dialog>\f[R] element just before it is shown or hidden.
.IP \(bu 2
If the element is transitioning from hidden to showing, the
\f[CR]event.oldState\f[R] property will be set to \f[CR]closed\f[R] and
the \f[CR]event.newState\f[R] property will be set to \f[CR]open\f[R].
.IP \(bu 2
If the element is transitioning from showing to hidden, then
\f[CR]event.oldState\f[R] will be \f[CR]open\f[R] and
\f[CR]event.newState\f[R] will be \f[CR]closed\f[R].
.PP
This event is cancelable when an element is toggled to open
(\(lqshow\(rq) but not when the element is closing.
.PP
Among other things, this event can be used to:
.IP \(bu 2
prevent an element from being shown.
.IP \(bu 2
add or remove classes or properties from the element or associated
elements, for example to control the animation behavior of a dialog as
it is opened and closed.
.IP \(bu 2
clear the state of the element before it is opened or after it is
hidden, for example to reset a dialog form and return value to an empty
state, or hide any nested manual popovers when reopening a popup.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\(dqbeforetoggle\(dq, (event) => { })

onbeforetoggle = (event) => { }
.EE
.SH EVENT TYPE
A \f[CR]ToggleEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EXAMPLES
The examples below demonstrates how the \f[CR]beforetoggle\f[R] event
might be used for a popover or \f[CR]<dialog>\f[R] element.
The same examples would work similarly on the other element types.
.SS Basic example
This example shows how to listen for the \f[CR]beforetoggle\f[R] event
and log the result.
.SS HTML
The HTML consists of a popover and a button for toggling it open and
closed.
.IP
.EX
<\f[B]button\f[R] popovertarget=\(dqmypopover\(dq>Toggle the popover</\f[B]button\f[R]>
<\f[B]div\f[R] id=\(dqmypopover\(dq popover>Popover content</\f[B]div\f[R]>
.EE
.SS JavaScript
The code gets adds an event listener for the \f[CR]beforetoggle\f[R]
event and logs the state.
.IP
.EX
\f[B]const\f[R] popover = document.getElementById(\(dqmypopover\(dq);

popover.addEventListener(\(dqbeforetoggle\(dq, (event) \f[B]=>\f[R] {
  \f[B]if\f[R] (event.newState === \(dqopen\(dq) {
    log(\(dqPopover is about to be shown\(dq);
  } \f[B]else\f[R] {
    log(\(dqPopover is about to be hidden\(dq);
  }
});
.EE
.SS Result
.SS Prevent a popover opening
The \f[CR]beforetoggle\f[R] event is cancelable if fired when opening an
element.
.PP
Below we show how a popover that might first check if it is allowed to
open, and if not, call \f[CR]Event.preventDefault()\f[R] to cancel the
event.
In this example we use a button to set whether the popover can open or
not: in a more \(lqfull featured\(rq example this might depend on the
application state, or the data in the popover being ready to display.
.SS HTML
The HTML consists of a popover, a button for toggling it open and
closed, and a button for setting whether the button can be opened.
.IP
.EX
<\f[B]button\f[R] popovertarget=\(dqmypopover\(dq>Toggle the popover</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqallow_button\(dq></\f[B]button\f[R]>
<\f[B]div\f[R] id=\(dqmypopover\(dq popover>Popover content</\f[B]div\f[R]>
.EE
.SS JavaScript
First we set up the code to simulate a state where we don\(cqt want to
allow the popover to open.
This is represented by the variable \f[CR]allowOpen\f[R], which is
toggled when the associated button is clicked.
.IP
.EX
\f[B]const\f[R] allowButton = document.getElementById(\(dqallow_button\(dq);

\f[B]let\f[R] allowOpen = \f[B]true\f[R];

\f[B]function\f[R] toggleState() {
  allowOpen = !allowOpen;
  allowButton.innerText = allowOpen ? \(dqOpen Allowed\(dq : \(dqOpen Prevented\(dq;
}

toggleState();

allowButton.addEventListener(\(dqclick\(dq, (event) \f[B]=>\f[R] {
  toggleState();
});
.EE
.PP
The code gets adds an event listener for the \f[CR]beforetoggle\f[R]
event.
If \f[CR]allowOpen\f[R] is false then \f[CR]preventDefault()\f[R] is
called, which stops the popup from opening.
.IP
.EX
\f[B]const\f[R] popover = document.getElementById(\(dqmypopover\(dq);

popover.addEventListener(\(dqbeforetoggle\(dq, (event) \f[B]=>\f[R] {
  \f[B]if\f[R] (event.newState === \(dqopen\(dq) {
    \f[B]if\f[R] (allowOpen) {
      log(\(dqPopover is about to be shown\(dq);
    } \f[B]else\f[R] {
      log(\(dqPopover opening prevented\(dq);
      event.preventDefault();
    }
  } \f[B]else\f[R] {
    log(\(dqPopover is about to be hidden\(dq);
  }
});
.EE
.SS Result
.SS A note on beforetoggle event coalescing
If multiple \f[CR]beforetoggle\f[R] events are fired before the event
loop has a chance to cycle, only a single event will be fired.
This is referred to as \(lqevent coalescing\(rq.
.PP
For example:
.IP
.EX
popover.addEventListener(\(dqbeforetoggle\(dq, () \f[B]=>\f[R] {
  \f[I]// \&...\f[R]
});

popover.showPopover();
popover.hidePopover();
\f[I]// \(gabeforetoggle\(ga only fires once\f[R]
.EE
.SS Other examples
.IP \(bu 2
Opening a modal dialog example in \f[CR]HTMLDialogElement\f[R]
.SH SEE ALSO
.IP \(bu 2
\f[CR]popover\f[R] HTML global attribute
.IP \(bu 2
Popover API
.IP \(bu 2
Related event: \f[CR]toggle\f[R]
