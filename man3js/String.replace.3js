'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.REPLACE" "3JS" "April 28, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.replace \- String.prototype.replace()
.SH SYNOPSIS
The \f[B]\f[CB]replace()\f[B]\f[R] method of \f[CR]String\f[R] values
returns a new string with one, some, or all matches of a
\f[CR]pattern\f[R] replaced by a \f[CR]replacement\f[R].
The \f[CR]pattern\f[R] can be a string or a \f[CR]RegExp\f[R], and the
\f[CR]replacement\f[R] can be a string or a function called for each
match.
If \f[CR]pattern\f[R] is a string, only the first occurrence will be
replaced.
The original string is left unchanged.
.IP
.EX
\f[B]const\f[R] paragraph = \(dqI think Ruth\(aqs dog is cuter than your dog!\(dq;

console.log(paragraph.replace(\(dqRuth\(aqs\(dq, \(dqmy\(dq));
\f[I]// Expected output: \(dqI think my dog is cuter than your dog!\(dq\f[R]

\f[B]const\f[R] regex = /Dog/i;
console.log(paragraph.replace(regex, \(dqferret\(dq));
\f[I]// Expected output: \(dqI think Ruth\(aqs ferret is cuter than your dog!\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
replace(pattern, replacement)
.EE
.SS Parameters
.TP
\f[B]pattern\f[R]
Can be a string or an object with a \f[CR]Symbol.replace\f[R] method
\(em the typical example being a regular expression.
Any value that doesn\(cqt have the \f[CR]Symbol.replace\f[R] method will
be coerced to a string.
.TP
\f[B]replacement\f[R]
Can be a string or a function.
.RS
.IP \(bu 2
If it\(cqs a string, it will replace the substring matched by
\f[CR]pattern\f[R].
A number of special replacement patterns are supported; see the
Specifying a string as the replacement section below.
.IP \(bu 2
If it\(cqs a function, it will be invoked for every match and its return
value is used as the replacement text.
The arguments supplied to this function are described in the Specifying
a function as the replacement section below.
.RE
.SS Return value
A new string, with one, some, or all matches of the pattern replaced by
the specified replacement.
.SH DESCRIPTION
This method does not mutate the string value it\(cqs called on.
It returns a new string.
.PP
A string pattern will only be replaced once.
To perform a global search and replace, use a regular expression with
the \f[CR]g\f[R] flag, or use \f[CR]replaceAll()\f[R] instead.
.PP
If \f[CR]pattern\f[R] is an object with a \f[CR]Symbol.replace\f[R]
method (including \f[CR]RegExp\f[R] objects), that method is called with
the target string and \f[CR]replacement\f[R] as arguments.
Its return value becomes the return value of \f[CR]replace()\f[R].
In this case the behavior of \f[CR]replace()\f[R] is entirely encoded by
the \f[CR][Symbol.replace]()\f[R] method \(em for example, any mention
of \(lqcapturing groups\(rq in the description below is actually
functionality provided by \f[CR]RegExp.prototype[Symbol.replace]()\f[R].
.PP
If the \f[CR]pattern\f[R] is an empty string, the replacement is
prepended to the start of the string.
.IP
.EX
\(dqxxx\(dq.replace(\(dq\(dq, \(dq_\(dq); \f[I]// \(dq_xxx\(dq\f[R]
.EE
.PP
A regexp with the \f[CR]g\f[R] flag is the only case where
\f[CR]replace()\f[R] replaces more than once.
For more information about how regex properties (especially the sticky
flag) interact with \f[CR]replace()\f[R], see
\f[CR]RegExp.prototype[Symbol.replace]()\f[R].
.SS Specifying a string as the replacement
The replacement string can include the following special replacement
patterns:
.PP
.TS
tab(@);
lw(6.1n) lw(63.9n).
T{
Pattern
T}@T{
Inserts
T}
_
T{
\f[CR]$$\f[R]
T}@T{
Inserts a \f[CR]\(dq$\(dq\f[R].
T}
T{
\f[CR]$&\f[R]
T}@T{
Inserts the matched substring.
T}
T{
\f[CR]$\(ga\f[R]
T}@T{
Inserts the portion of the string that precedes the matched substring.
T}
T{
\f[CR]$\(aq\f[R]
T}@T{
Inserts the portion of the string that follows the matched substring.
T}
T{
\f[CR]$n\f[R]
T}@T{
Inserts the \f[CR]n\f[R]th (\f[CR]1\f[R]\-indexed) capturing group where
\f[CR]n\f[R] is a positive integer less than 100.
T}
T{
\f[CR]$<Name>\f[R]
T}@T{
Inserts the named capturing group where \f[CR]Name\f[R] is the group
name.
T}
.TE
.PP
\f[CR]$n\f[R] and \f[CR]$<Name>\f[R] are only available if the
\f[CR]pattern\f[R] argument is a \f[CR]RegExp\f[R] object.
If the \f[CR]pattern\f[R] is a string, or if the corresponding capturing
group isn\(cqt present in the regex, then the pattern will be replaced
as a literal.
If the group is present but isn\(cqt matched (because it\(cqs part of a
disjunction), it will be replaced with an empty string.
.IP
.EX
\(dqfoo\(dq.replace(/(f)/, \(dq$2\(dq);
\f[I]// \(dq$2oo\(dq; the regex doesn\(aqt have the second group\f[R]

\(dqfoo\(dq.replace(\(dqf\(dq, \(dq$1\(dq);
\f[I]// \(dq$1oo\(dq; the pattern is a string, so it doesn\(aqt have any groups\f[R]

\(dqfoo\(dq.replace(/(f)|(g)/, \(dq$2\(dq);
\f[I]// \(dqoo\(dq; the second group exists but isn\(aqt matched\f[R]
.EE
.SS Specifying a function as the replacement
You can specify a function as the second parameter.
In this case, the function will be invoked after the match has been
performed.
The function\(cqs result (return value) will be used as the replacement
string.
.RS
.PP
\f[B]Note:\f[R] The above\-mentioned special replacement patterns do
\f[I]not\f[R] apply for strings returned from the replacer function.
.RE
.PP
The function has the following signature:
.IP
.EX
\f[B]function\f[R] replacer(match, p1, p2, \f[I]/* \&..., */\f[R] pN, offset, string, groups) {
  \f[B]return\f[R] replacement;
}
.EE
.PP
The arguments to the function are as follows:
.TP
\f[B]match\f[R]
The matched substring.
(Corresponds to \f[CR]$&\f[R] above.)
.TP
\f[B]p1\f[R], \f[B]p2\f[R], \&..., \f[B]pN\f[R]
The \f[CR]n\f[R]th string found by a capture group (including named
capturing groups), provided the first argument to \f[CR]replace()\f[R]
is a \f[CR]RegExp\f[R] object.
(Corresponds to \f[CR]$1\f[R], \f[CR]$2\f[R], etc.
above.)
For example, if the \f[CR]pattern\f[R] is \f[CR]/(\(rsa+)(\(rsb+)/\f[R],
then \f[CR]p1\f[R] is the match for \f[CR]\(rsa+\f[R], and \f[CR]p2\f[R]
is the match for \f[CR]\(rsb+\f[R].
If the group is part of a disjunction (e.g.,
\f[CR]\(dqabc\(dq.replace(/(a)|(b)/, replacer)\f[R]), the unmatched
alternative will be \f[CR]undefined\f[R].
.TP
\f[B]offset\f[R]
The offset of the matched substring within the whole string being
examined.
For example, if the whole string was \f[CR]\(aqabcd\(aq\f[R], and the
matched substring was \f[CR]\(aqbc\(aq\f[R], then this argument will be
\f[CR]1\f[R].
.TP
\f[B]string\f[R]
The whole string being examined.
.TP
\f[B]groups\f[R]
An object whose keys are the used group names, and whose values are the
matched portions (\f[CR]undefined\f[R] if not matched).
Only present if the \f[CR]pattern\f[R] contains at least one named
capturing group.
.PP
The exact number of arguments depends on whether the first argument is a
\f[CR]RegExp\f[R] object \(em and, if so, how many capture groups it
has.
.PP
The following example will set \f[CR]newString\f[R] to
\f[CR]\(aqabc \- 12345 \- #$*%\(aq\f[R]:
.IP
.EX
\f[B]function\f[R] replacer(match, p1, p2, p3, offset, string) {
  \f[I]// p1 is non\-digits, p2 digits, and p3 non\-alphanumerics\f[R]
  \f[B]return\f[R] [p1, p2, p3].join(\(dq \- \(dq);
}
\f[B]const\f[R] newString = \(dqabc12345#$*%\(dq.replace(/([\(ha\(rsd]*)(\(rsd*)([\(ha\(rsw]*)/, replacer);
console.log(newString); \f[I]// abc \- 12345 \- #$*%\f[R]
.EE
.PP
The function will be invoked multiple times for each full match to be
replaced if the regular expression in the first parameter is global.
.SH EXAMPLES
.SS Defining the regular expression in replace()
In the following example, the regular expression is defined in
\f[CR]replace()\f[R] and includes the ignore case flag.
.IP
.EX
\f[B]const\f[R] str = \(dqTwas the night before Xmas...\(dq;
\f[B]const\f[R] newStr = str.replace(/xmas/i, \(dqChristmas\(dq);
console.log(newStr); \f[I]// Twas the night before Christmas...\f[R]
.EE
.PP
This logs \f[CR]\(aqTwas the night before Christmas...\(aq\f[R].
.RS
.PP
\f[B]Note:\f[R] See the regular expression guide for more explanations
about regular expressions.
.RE
.SS Using the global and ignoreCase flags with replace()
Global replace can only be done with a regular expression.
In the following example, the regular expression includes the global and
ignore case flags which permits \f[CR]replace()\f[R] to replace each
occurrence of \f[CR]\(aqapples\(aq\f[R] in the string with
\f[CR]\(aqoranges\(aq\f[R].
.IP
.EX
\f[B]const\f[R] re = /apples/gi;
\f[B]const\f[R] str = \(dqApples are round, and apples are juicy.\(dq;
\f[B]const\f[R] newStr = str.replace(re, \(dqoranges\(dq);
console.log(newStr); \f[I]// oranges are round, and oranges are juicy.\f[R]
.EE
.PP
This logs \f[CR]\(aqoranges are round, and oranges are juicy\(aq\f[R].
.SS Switching words in a string
The following script switches the words in the string.
For the replacement text, the script uses capturing groups and the
\f[CR]$1\f[R] and \f[CR]$2\f[R] replacement patterns.
.IP
.EX
\f[B]const\f[R] re = /(\(rsw+)\(rss(\(rsw+)/;
\f[B]const\f[R] str = \(dqMaria Cruz\(dq;
\f[B]const\f[R] newStr = str.replace(re, \(dq$2, $1\(dq);
console.log(newStr); \f[I]// Cruz, Maria\f[R]
.EE
.PP
This logs \f[CR]\(aqCruz, Maria\(aq\f[R].
.SS Using an inline function that modifies the matched characters
In this example, all occurrences of capital letters in the string are
converted to lower case, and a hyphen is inserted just before the match
location.
The important thing here is that additional operations are needed on the
matched item before it is given back as a replacement.
.PP
The replacement function accepts the matched snippet as its parameter,
and uses it to transform the case and concatenate the hyphen before
returning.
.IP
.EX
\f[B]function\f[R] styleHyphenFormat(propertyName) {
  \f[B]function\f[R] upperToHyphenLower(match, offset, string) {
    \f[B]return\f[R] (offset > 0 ? \(dq\-\(dq : \(dq\(dq) + match.toLowerCase();
  }
  \f[B]return\f[R] propertyName.replace(/[A\-Z]/g, upperToHyphenLower);
}
.EE
.PP
Given \f[CR]styleHyphenFormat(\(aqborderTop\(aq)\f[R], this returns
\f[CR]\(aqborder\-top\(aq\f[R].
.PP
Because we want to further transform the \f[I]result\f[R] of the match
before the final substitution is made, we must use a function.
This forces the evaluation of the match prior to the
\f[CR]toLowerCase()\f[R] method.
If we had tried to do this using the match without a function, the
\f[CR]toLowerCase()\f[R] would have no effect.
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[I]// Won\(aqt work\f[R]
\f[B]const\f[R] newString = propertyName.replace(/[A\-Z]/g, \(dq\-\(dq + \(dq$&\(dq.toLowerCase());
.EE
.PP
This is because \f[CR]\(aq$&\(aq.toLowerCase()\f[R] would first be
evaluated as a string literal (resulting in the same
\f[CR]\(aq$&\(aq\f[R]) before using the characters as a pattern.
.SS Replacing a Fahrenheit degree with its Celsius equivalent
The following example replaces a Fahrenheit degree with its equivalent
Celsius degree.
The Fahrenheit degree should be a number ending with
\f[CR]\(dqF\(dq\f[R].
The function returns the Celsius number ending with
\f[CR]\(dqC\(dq\f[R].
For example, if the input number is \f[CR]\(dq212F\(dq\f[R], the
function returns \f[CR]\(dq100C\(dq\f[R].
If the number is \f[CR]\(dq0F\(dq\f[R], the function returns
\f[CR]\(dq\-17.77777777777778C\(dq\f[R].
.PP
The regular expression \f[CR]test\f[R] checks for any number that ends
with \f[CR]F\f[R].
The number of Fahrenheit degrees is accessible to the function through
its second parameter, \f[CR]p1\f[R].
The function sets the Celsius number based on the number of Fahrenheit
degrees passed in a string to the \f[CR]f2c()\f[R] function.
\f[CR]f2c()\f[R] then returns the Celsius number.
This function approximates Perl\(cqs \f[CR]s///e\f[R] flag.
.IP
.EX
\f[B]function\f[R] f2c(x) {
  \f[B]function\f[R] convert(str, p1, offset, s) {
    \f[B]return\f[R] \(ga${((p1 \- 32) * 5) / 9}C\(ga;
  }
  \f[B]const\f[R] s = String(x);
  \f[B]const\f[R] test = /(\-?\(rsd+(?:\(rs.\(rsd*)?)F\(rsb/g;
  \f[B]return\f[R] s.replace(test, convert);
}
.EE
.SS Making a generic replacer
Suppose we want to create a replacer that appends the offset data to
every matched string.
Because the replacer function already receives the \f[CR]offset\f[R]
parameter, it will be trivial if the regex is statically known.
.IP
.EX
\(dqabcd\(dq.replace(/(bc)/, (match, p1, offset) \f[B]=>\f[R] \(ga${match} (${offset}) \(ga);
\f[I]// \(dqabc (1) d\(dq\f[R]
.EE
.PP
However, this replacer would be hard to generalize if we want it to work
with any regex pattern.
The replacer is \f[I]variadic\f[R] \(em the number of arguments it
receives depends on the number of capturing groups present.
We can use rest parameters, but it would also collect \f[CR]offset\f[R],
\f[CR]string\f[R], etc.
into the array.
The fact that \f[CR]groups\f[R] may or may not be passed depending on
the identity of the regex would also make it hard to generically know
which argument corresponds to the \f[CR]offset\f[R].
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]function\f[R] addOffset(match, ...args) {
  \f[B]const\f[R] offset = args.at(\-2);
  \f[B]return\f[R] \(ga${match} (${offset}) \(ga;
}

console.log(\(dqabcd\(dq.replace(/(bc)/, addOffset)); \f[I]// \(dqabc (1) d\(dq\f[R]
console.log(\(dqabcd\(dq.replace(/(?<group>bc)/, addOffset)); \f[I]// \(dqabc (abcd) d\(dq\f[R]
.EE
.PP
The \f[CR]addOffset\f[R] example above doesn\(cqt work when the regex
contains a named group, because in this case \f[CR]args.at(\-2)\f[R]
would be the \f[CR]string\f[R] instead of the \f[CR]offset\f[R].
.PP
Instead, you need to extract the last few arguments based on type,
because \f[CR]groups\f[R] is an object while \f[CR]string\f[R] is a
string.
.IP
.EX
\f[B]function\f[R] addOffset(match, ...args) {
  \f[B]const\f[R] hasNamedGroups = \f[B]typeof\f[R] args.at(\-1) === \(dqobject\(dq;
  \f[B]const\f[R] offset = hasNamedGroups ? args.at(\-3) : args.at(\-2);
  \f[B]return\f[R] \(ga${match} (${offset}) \(ga;
}

console.log(\(dqabcd\(dq.replace(/(bc)/, addOffset)); \f[I]// \(dqabc (1) d\(dq\f[R]
console.log(\(dqabcd\(dq.replace(/(?<group>bc)/, addOffset)); \f[I]// \(dqabc (1) d\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-string-and-regexp
Polyfill of \f[CR]String.prototype.replace\f[R] in \f[CR]core\-js\f[R]
with fixes and implementation of modern behavior like
\f[CR]Symbol.replace\f[R] support
.UE \c
.IP \(bu 2
Regular expressions guide
.IP \(bu 2
\f[CR]String.prototype.replaceAll()\f[R]
.IP \(bu 2
\f[CR]String.prototype.match()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.exec()\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype.test()\f[R]
.IP \(bu 2
\f[CR]Symbol.replace\f[R]
.IP \(bu 2
\f[CR]RegExp.prototype[Symbol.replace]()\f[R]
