.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Intl.NumberFormat.format" "JS" "May 22, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Intl.NumberFormat.format \- Intl.NumberFormat.prototype.format()
.SH SYNOPSIS
The \f[B]\f[CB]format()\f[B]\f[R] method of \f[CR]Intl.NumberFormat\f[R]
instances formats a number according to the locale and formatting
options of this \f[CR]Intl.NumberFormat\f[R] object.
.SH SYNTAX
.IP
.EX
format(number)
.EE
.SS Parameters
.TP
\f[B]number\f[R]
A \f[CR]Number\f[R], \f[CR]BigInt\f[R], or string, to format.
Strings are parsed in the same way as in number conversion, except that
\f[CR]format()\f[R] will use the exact value that the string represents,
avoiding loss of precision during implicitly conversion to a number.
.RS
.PP
\f[B]Note:\f[R] Older versions of the specification parsed strings as a
\f[CR]Number\f[R].
Check the compatibility table for your browser.
.RE
.SS Return value
A string representing the given \f[CR]number\f[R] formatted according to
the locale and formatting options of this \f[CR]Intl.NumberFormat\f[R]
object.
.SH DESCRIPTION
\f[CR]Number\f[R] values in JavaScript suffer from loss of precision if
they are too big or too small, making the text representation
inaccurate.
If you are performing calculations with integers larger than
\f[CR]Number.MAX_SAFE_INTEGER\f[R] you should use a \f[CR]BigInt\f[R]
instead, which will format correctly:
.IP
.EX
\f[B]new\f[R] Intl.NumberFormat(\[dq]en\-US\[dq]).format(1234567891234567891); \f[I]// 1,234,567,891,234,568,000\f[R]
\f[B]new\f[R] Intl.NumberFormat(\[dq]en\-US\[dq]).format(1234567891234567891n); \f[I]// 1,234,567,891,234,567,891\f[R]
.EE
.PP
You can also pass through very large strings to be formatted as an
arbitrary\-precision decimal string (if you\[cq]re performing
calculations on the data you will still need to work with
\f[CR]BigInt\f[R]):
.IP
.EX
\f[B]new\f[R] Intl.NumberFormat(\[dq]en\-US\[dq]).format(\[dq]1234567891234567891\[dq]); \f[I]// 1,234,567,891,234,567,891\f[R]
.EE
.SH EXAMPLES
.SS Using format
Use the \f[CR]format\f[R] getter function for formatting a single
currency value.
The code below shows how to format the roubles currency for a Russian
locale:
.IP
.EX
\f[B]const\f[R] options = { style: \[dq]currency\[dq], currency: \[dq]RUB\[dq] };
\f[B]const\f[R] numberFormat = \f[B]new\f[R] Intl.NumberFormat(\[dq]ru\-RU\[dq], options);
console.log(numberFormat.format(654321.987));
\f[I]// \[dq]654 321,99 â‚½\[dq]\f[R]
.EE
.SS Using format with map
Use the \f[CR]format\f[R] getter function for formatting all numbers in
an array.
Note that the function is bound to the \f[CR]Intl.NumberFormat\f[R] from
which it was obtained, so it can be passed directly to
\f[CR]Array.prototype.map\f[R].
This is considered a historical artefact, as part of a convention which
is no longer followed for new features, but is preserved to maintain
compatibility with existing programs.
.IP
.EX
\f[B]const\f[R] a = [123456.789, 987654.321, 456789.123];
\f[B]const\f[R] numberFormat = \f[B]new\f[R] Intl.NumberFormat(\[dq]es\-ES\[dq]);
\f[B]const\f[R] formatted = a.map((n) \f[B]=>\f[R] numberFormat.format(n));
console.log(formatted.join(\[dq]; \[dq]));
\f[I]// \[dq]123.456,789; 987.654,321; 456.789,123\[dq]\f[R]
.EE
.SS Using format with a string
Using a string we can specify numbers that are larger than
\f[CR]Number.MAX_SAFE_INTEGER\f[R] without losing precision.
.IP
.EX
\f[B]const\f[R] numberFormat = \f[B]new\f[R] Intl.NumberFormat(\[dq]en\-US\[dq]);

\f[I]// Here the value is converted to a Number\f[R]
console.log(numberFormat.format(987654321987654321));
\f[I]// 987,654,321,987,654,300\f[R]

\f[I]// Here we use a string and don\[aq]t lose precision\f[R]
console.log(numberFormat.format(\[dq]987654321987654321\[dq]));
\f[I]// 987,654,321,987,654,321\f[R]
.EE
.PP
We can also use the general \[lq]E\[rq] exponent syntax for decimal
strings: \f[CR]#.#E#\f[R].
The code below creates a \f[CR]BigInt\f[R], coerces it to a string with
the suffix \f[CR]E\-6\f[R], and then formats it.
.IP
.EX
\f[B]const\f[R] numberFormat = \f[B]new\f[R] Intl.NumberFormat(\[dq]en\-US\[dq]);
\f[B]const\f[R] bigNum = 1000000000000000110000n;
console.log(numberFormat.format(bigNum));
\f[I]// \[dq]1,000,000,000,000,000,110,000\[dq]\f[R]

\f[I]// Format as a string using the \[ga]E\[ga] syntax:\f[R]
console.log(numberFormat.format(\[ga]${bigNum}E\-6\[ga]));
\f[I]// \[dq]1,000,000,000,000,000.11\[dq]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Intl.NumberFormat\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toLocaleString()\f[R]
