.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "XMLSerializer.serializeToString" "JS" "December 5, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
XMLSerializer.serializeToString \- XMLSerializer: serializeToString()
method
.SH SYNOPSIS
The \f[CR]XMLSerializer\f[R] method
\f[B]\f[CB]serializeToString()\f[B]\f[R] constructs a string
representing the specified DOM tree in XML form.
.SH SYNTAX
.IP
.EX
serializeToString(rootNode)
.EE
.SS Parameters
.TP
\f[B]rootNode\f[R]
The \f[CR]Node\f[R] to use as the root of the DOM tree or subtree for
which to construct an XML representation.
.SS Return value
A string containing the XML representation of the specified DOM tree.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the specified \f[CR]rootNode\f[R] is not a compatible node
type.
The root node must be either \f[CR]Node\f[R] or \f[CR]Attr\f[R].
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown if the tree could not be successfully serialized, probably due to
issues with the content\[cq]s compatibility with XML serialization.
.TP
\f[B]SyntaxError\f[R] \f[B]DOMException\f[R]
Thrown if a serialization of HTML was requested but could not succeed
due to the content not being well\-formed.
.SH USAGE NOTES
.SS Compatible node types
The specified root node\[em]and all of its descendants\[em]must be
compatible with the XML serialization algorithm.
The root node itself must be either a \f[CR]Node\f[R] or \f[CR]Attr\f[R]
object.
.PP
The following types are also permitted as descendants of the root node,
in addition to \f[CR]Node\f[R] and \f[CR]Attr\f[R]:
.IP \[bu] 2
\f[CR]DocumentType\f[R]
.IP \[bu] 2
\f[CR]Document\f[R]
.IP \[bu] 2
\f[CR]DocumentFragment\f[R]
.IP \[bu] 2
\f[CR]Element\f[R]
.IP \[bu] 2
\f[CR]Comment\f[R]
.IP \[bu] 2
\f[CR]Text\f[R]
.IP \[bu] 2
\f[CR]ProcessingInstruction\f[R]
.IP \[bu] 2
\f[CR]Attr\f[R]
.PP
If any other type is encountered, a \f[CR]TypeError\f[R] exception is
thrown.
.SS Notes on the resulting XML
There are some things worth noting about the XML output by
\f[CR]serializeToString()\f[R]:
.IP \[bu] 2
For XML serializations, \f[CR]Element\f[R] and \f[CR]Attr\f[R] nodes are
always serialized with their \f[CR]namespaceURI\f[R] intact.
This may mean that a previously\-specified \f[CR]prefix\f[R] or default
namespace may be dropped or altered.
.IP \[bu] 2
The resulting XML is compatible with the HTML parser.
.IP \[bu] 2
Elements in the HTML namespace that have no child nodes (thereby
representing empty tags) are serialized with both begin and end tags
(\f[CR]\[dq]<someelement></someelement>\[dq]\f[R]) instead of using the
empty\-element tag (\f[CR]\[dq]<someelement/>\[dq]\f[R]).
.SH SEE ALSO
.IP \[bu] 2
Parsing and serializing XML
.IP \[bu] 2
Serializing to HTML: \f[CR]Element.innerHTML\f[R] and
\f[CR]Element.outerHTML\f[R]
.IP \[bu] 2
Parsing HTML or XML to create a DOM tree: \f[CR]DOMParser\f[R]
