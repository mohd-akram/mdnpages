'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "NUMBER.POSITIVE_INFINITY" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.POSITIVE_INFINITY \- Number.POSITIVE_INFINITY
.SH SYNOPSIS
The \f[B]\f[CB]Number.POSITIVE_INFINITY\f[B]\f[R] static data property
represents the positive Infinity value.
.IP
.EX
\f[B]function\f[R] checkNumber(bigNumber) {
  \f[B]if\f[R] (bigNumber === Number.POSITIVE_INFINITY) {
    \f[B]return\f[R] \(dqProcess number as Infinity\(dq;
  }
  \f[B]return\f[R] bigNumber;
}

console.log(checkNumber(Number.MAX_VALUE));
\f[I]// Expected output: 1.7976931348623157e+308\f[R]

console.log(checkNumber(Number.MAX_VALUE * 2));
\f[I]// Expected output: \(dqProcess number as Infinity\(dq\f[R]
.EE
.SH VALUE
The same as the value of the global \f[CR]Infinity\f[R] property.
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
no
T}
.TE
.SH DESCRIPTION
The \f[CR]Number.POSITIVE_INFINITY\f[R] value behaves slightly
differently than mathematical infinity:
.IP \(bu 2
Any positive value, including \f[CR]POSITIVE_INFINITY\f[R], multiplied
by \f[CR]POSITIVE_INFINITY\f[R] is \f[CR]POSITIVE_INFINITY\f[R].
.IP \(bu 2
Any negative value, including \f[CR]NEGATIVE_INFINITY\f[R], multiplied
by \f[CR]POSITIVE_INFINITY\f[R] is \f[CR]NEGATIVE_INFINITY\f[R].
.IP \(bu 2
Any positive number divided by \f[CR]POSITIVE_INFINITY\f[R] is \c
.UR https://en.wikipedia.org/wiki/Signed_zero
positive zero
.UE \c
\ (as defined in \c
.UR https://en.wikipedia.org/wiki/IEEE_754
IEEE 754
.UE \c
).
.IP \(bu 2
Any negative number divided by \f[CR]POSITIVE_INFINITY\f[R] is \c
.UR https://en.wikipedia.org/wiki/Signed_zero
negative zero
.UE \c
\ (as defined in \c
.UR https://en.wikipedia.org/wiki/IEEE_754
IEEE 754
.UE \c
\&.
.IP \(bu 2
Zero multiplied by \f[CR]POSITIVE_INFINITY\f[R] is \f[CR]NaN\f[R].
.IP \(bu 2
\f[CR]NaN\f[R] multiplied by \f[CR]POSITIVE_INFINITY\f[R] is
\f[CR]NaN\f[R].
.IP \(bu 2
\f[CR]POSITIVE_INFINITY\f[R], divided by any negative value except
\f[CR]NEGATIVE_INFINITY\f[R], is \f[CR]NEGATIVE_INFINITY\f[R].
.IP \(bu 2
\f[CR]POSITIVE_INFINITY\f[R], divided by any positive value except
\f[CR]POSITIVE_INFINITY\f[R], is \f[CR]POSITIVE_INFINITY\f[R].
.IP \(bu 2
\f[CR]POSITIVE_INFINITY\f[R], divided by either
\f[CR]NEGATIVE_INFINITY\f[R] or \f[CR]POSITIVE_INFINITY\f[R], is
\f[CR]NaN\f[R].
.IP \(bu 2
\f[CR]Number.POSITIVE_INFINITY > x\f[R] is true for any number
\f[I]x\f[R] that isn\(cqt \f[CR]POSITIVE_INFINITY\f[R].
.PP
You might use the \f[CR]Number.POSITIVE_INFINITY\f[R] property to
indicate an error condition that returns a finite number in case of
success.
Note, however, that \f[CR]NaN\f[R] would be more appropriate in such a
case.
.PP
Because \f[CR]POSITIVE_INFINITY\f[R] is a static property of
\f[CR]Number\f[R], you always use it as
\f[CR]Number.POSITIVE_INFINITY\f[R], rather than as a property of a
number value.
.SH EXAMPLES
.SS Using POSITIVE_INFINITY
In the following example, the variable \f[CR]bigNumber\f[R] is assigned
a value that is larger than the maximum value.
When the \f[CR]if\f[R] statement executes, \f[CR]bigNumber\f[R] has the
value \f[CR]Infinity\f[R], so \f[CR]bigNumber\f[R] is set to a more
manageable value before continuing.
.IP
.EX
\f[B]let\f[R] bigNumber = Number.MAX_VALUE * 2;

\f[B]if\f[R] (bigNumber === Number.POSITIVE_INFINITY) {
  bigNumber = returnFinite();
}
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Number.NEGATIVE_INFINITY\f[R]
.IP \(bu 2
\f[CR]Number.isFinite()\f[R]
.IP \(bu 2
\f[CR]Infinity\f[R]
.IP \(bu 2
\f[CR]isFinite()\f[R]
