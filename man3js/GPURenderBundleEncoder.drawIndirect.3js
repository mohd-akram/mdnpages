.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERBUNDLEENCODER.DRAWINDIRECT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderBundleEncoder.drawIndirect \- GPURenderBundleEncoder:
drawIndirect() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]drawIndirect()\f[B]\f[R] method of the
\f[CR]GPURenderBundleEncoder\f[R] interface draws primitives using
parameters read from a \f[CR]GPUBuffer\f[R].
.RS
.PP
\f[B]Note:\f[R] This method is functionally identical to its equivalent
on \f[CR]GPURenderPassEncoder\f[R] \(em \f[CR]drawIndirect()\f[R].
.RE
.SH SYNTAX
.IP
.EX
drawIndirect(indirectBuffer, indirectOffset)
.EE
.SS Parameters
.TP
\f[B]indirectBuffer\f[R]
A \f[CR]GPUBuffer\f[R] containing the \f[CR]vertexCount\f[R],
\f[CR]instanceCount\f[R], \f[CR]firstVertex\f[R], and
\f[CR]firstInstance\f[R] values needed to carry out the drawing
operation.
The buffer must contain a tightly packed block of four 32\-bit unsigned
integer values representing the values (16 bytes total), given in the
same order as the arguments for
\f[CR]GPURenderBundleEncoder.draw()\f[R].
So for example:
.RS
.IP
.EX
\f[B]const\f[R] uint32 = \f[B]new\f[R] Uint32Array(4);
uint32[0] = 3; \f[I]// The vertexCount value\f[R]
uint32[1] = 1; \f[I]// The instanceCount value\f[R]
uint32[2] = 0; \f[I]// The firstVertex value\f[R]
uint32[3] = 0; \f[I]// The firstInstance value\f[R]

\f[I]// Write values into a GPUBuffer\f[R]
device.queue.writeBuffer(buffer, 0, uint32, 0, uint32.length);
.EE
.RS
.PP
\f[B]Note:\f[R] The \f[CR]indirect\-first\-instance\f[R] feature needs
to be enabled for non\-zero \f[CR]firstInstance\f[R] values to be used.
If the \f[CR]indirect\-first\-instance\f[R] feature is not enabled and
\f[CR]firstInstance\f[R] is not zero, the \f[CR]drawIndirect()\f[R] call
will be treated as a no\-op.
.RE
.RE
.TP
\f[B]indirectOffset\f[R]
The offset, in bytes, into \f[CR]indirectBuffer\f[R] where the value
data begins.
.SS Return value
None (\f[CR]Undefined\f[R]).
.SS Validation
The following criteria must be met when calling
\f[B]\f[CB]drawIndirect()\f[B]\f[R], otherwise a
\f[CR]GPUValidationError\f[R] is generated and the
\f[CR]GPURenderBundleEncoder\f[R] becomes invalid:
.IP \(bu 2
\f[CR]indirectBuffer\f[R]\(cqs \f[CR]GPUBuffer.usage\f[R] contains the
\f[CR]GPUBufferUsage.INDIRECT\f[R] flag.
.IP \(bu 2
\f[CR]indirectOffset\f[R] + the total size specified by the value
parameters in the \f[CR]indirectBuffer\f[R] is less than or equal to the
\f[CR]indirectBuffer\f[R]\(cqs \f[CR]GPUBuffer.size\f[R].
.IP \(bu 2
\f[CR]indirectOffset\f[R] is a multiple of 4.
.SH EXAMPLES
.IP
.EX
\f[I]// \&...\f[R]

\f[I]// Create GPURenderBundleEncoder\f[R]
\f[B]const\f[R] bundleEncoder = device.createRenderBundleEncoder(descriptor);

\f[I]// Set pipeline and vertex buffer\f[R]
bundleEncoder.setPipeline(renderPipeline);
bundleEncoder.setVertexBuffer(0, vertexBuffer);

\f[I]// Create drawIndirect values\f[R]
\f[B]const\f[R] uint32 = \f[B]new\f[R] Uint32Array(4);
uint32[0] = 3;
uint32[1] = 1;
uint32[2] = 0;
uint32[3] = 0;

\f[I]// Create a GPUBuffer and write the draw values into it\f[R]
\f[B]const\f[R] drawValues = device.createBuffer({
  size: 16,
  usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.INDIRECT,
});
device.queue.writeBuffer(drawValues, 0, uint32, 0, uint32.length);

\f[I]// Draw the vertices\f[R]
bundleEncoder.drawIndirect(drawValues, 0);

\f[I]// End the bundle recording\f[R]
\f[B]const\f[R] renderBundle = bundleEncoder.finish();

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
