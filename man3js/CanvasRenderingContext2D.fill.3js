.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "CanvasRenderingContext2D.fill" "JS" "April 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.fill \- CanvasRenderingContext2D: fill() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.fill()\f[B]\f[R] method of the
Canvas 2D API fills the current or given path with the current
\f[CR]fillStyle\f[R].
.SH SYNTAX
.IP
.EX
fill()
fill(path)
fill(fillRule)
fill(path, fillRule)
.EE
.SS Parameters
.TP
\f[B]fillRule\f[R]
The algorithm by which to determine if a point is inside or outside the
filling region.
Possible values:
.RS
.TP
\f[B]nonzero\f[R]
The \c
.UR https://en.wikipedia.org/wiki/Nonzero-rule
non\-zero winding rule
.UE \c
\&.
Default rule.
.TP
\f[B]evenodd\f[R]
The \c
.UR https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule
even\-odd winding rule
.UE \c
\&.
.RE
.TP
\f[B]path\f[R]
A \f[CR]Path2D\f[R] path to fill.
.SS Return value
None (\f[CR]undefined\f[R]).
.SH EXAMPLES
.SS Filling a rectangle
This example fills a rectangle with the \f[CR]fill()\f[R] method.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
ctx.rect(10, 10, 150, 100);
ctx.fill();
.EE
.SS Result
.SS Specifying a path and a fillRule
This example saves some intersecting lines to a Path2D object.
The \f[CR]fill()\f[R] method is then used to render the object to the
canvas.
A hole is left unfilled in the object\[cq]s center by using the
\f[CR]\[dq]evenodd\[dq]\f[R] rule; by default (with the
\f[CR]\[dq]nonzero\[dq]\f[R] rule), the hole would also be filled.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);

\f[I]// Create path\f[R]
\f[B]let\f[R] region = \f[B]new\f[R] Path2D();
region.moveTo(30, 90);
region.lineTo(110, 20);
region.lineTo(240, 130);
region.lineTo(60, 130);
region.lineTo(190, 20);
region.lineTo(270, 90);
region.closePath();

\f[I]// Fill path\f[R]
ctx.fillStyle = \[dq]green\[dq];
ctx.fill(region, \[dq]evenodd\[dq]);
.EE
.SS Result
.SH SEE ALSO
.IP \[bu] 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
.IP \[bu] 2
\f[CR]CanvasRenderingContext2D.fillStyle\f[R]
