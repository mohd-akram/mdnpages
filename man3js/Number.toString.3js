.\" Automatically generated by Pandoc 3.4
.\"
.TH "Number.toString" "JS" "July 13, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Number.toString \- Number.prototype.toString()
.SH SYNOPSIS
The \f[B]\f[CB]toString()\f[B]\f[R] method of \f[CR]Number\f[R] values
returns a string representing this number value.
.SH SYNTAX
.IP
.EX
toString()
toString(radix)
.EE
.SS Parameters
.TP
\f[B]radix\f[R] \f[I](optional)\f[R]
An integer in the range \f[CR]2\f[R] through \f[CR]36\f[R] specifying
the base to use for representing the number value.
Defaults to 10.
.SS Return value
A string representing the specified number value.
Scientific notation is used if radix is 10 and the number\[cq]s
magnitude (ignoring sign) is greater than or equal to 10\[ha]21 or less
than 10\[ha]\-6.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if \f[CR]radix\f[R] is less than 2 or greater than 36.
.TP
\f[B]TypeError\f[R]
Thrown if this method is invoked on an object that is not a
\f[CR]Number\f[R].
.SH DESCRIPTION
The \f[CR]Number\f[R] object overrides the \f[CR]toString\f[R] method of
\f[CR]Object\f[R]; it does not inherit
\f[CR]Object.prototype.toString()\f[R].
For \f[CR]Number\f[R] values, the \f[CR]toString\f[R] method returns a
string representation of the value in the specified radix.
.PP
For radixes above 10, the letters of the alphabet indicate digits
greater than 9.
For example, for hexadecimal numbers (base 16) \f[CR]a\f[R] through
\f[CR]f\f[R] are used.
.PP
If the specified number value is negative, the sign is preserved.
This is the case even if the radix is 2; the string returned is the
positive binary representation of the number value preceded by a
\f[CR]\-\f[R] sign, \f[B]not\f[R] the two\[cq]s complement of the number
value.
.PP
Both \f[CR]0\f[R] and \f[CR]\-0\f[R] have \f[CR]\[dq]0\[dq]\f[R] as
their string representation.
\f[CR]Infinity\f[R] returns \f[CR]\[dq]Infinity\[dq]\f[R] and
\f[CR]NaN\f[R] returns \f[CR]\[dq]NaN\[dq]\f[R].
.PP
If the number is not a whole number, the decimal point \f[CR].\f[R] is
used to separate the decimal places.
Scientific notation is used if the radix is 10 and the number\[cq]s
magnitude (ignoring sign) is greater than or equal to 10\[ha]21 or less
than 10\[ha]\-6.
In this case, the returned string always explicitly specifies the sign
of the exponent.
.IP
.EX
console.log((10 ** 21.5).toString()); \f[I]// \[dq]3.1622776601683794e+21\[dq]\f[R]
console.log((10 ** 21.5).toString(8)); \f[I]// \[dq]526665530627250154000000\[dq]\f[R]
.EE
.PP
The underlying representation for floating point numbers is base\-2
scientific notation (see number encoding).
However, the \f[CR]toString()\f[R] method doesn\[cq]t directly use this
most precise representation of the number value.
Rather, the algorithm uses the least number of significant figures
necessary to distinguish the output from adjacent number values.
For example, if the number is large, there will be many equivalent
string representations of the same floating point number, and
\f[CR]toString()\f[R] will choose the one with the most 0s to the right
(for any given radix).
.IP
.EX
console.log((1000000000000000128).toString()); \f[I]// \[dq]1000000000000000100\[dq]\f[R]
console.log(1000000000000000100 === 1000000000000000128); \f[I]// true\f[R]
.EE
.PP
On the other hand, \f[CR]Number.prototype.toFixed()\f[R] and
\f[CR]Number.prototype.toPrecision()\f[R] allow you to specify the
precision and can be more precise than \f[CR]toString()\f[R].
.PP
The \f[CR]toString()\f[R] method requires its \f[CR]this\f[R] value to
be a \f[CR]Number\f[R] primitive or wrapper object.
It throws a \f[CR]TypeError\f[R] for other \f[CR]this\f[R] values
without attempting to coerce them to number values.
.PP
Because \f[CR]Number\f[R] doesn\[cq]t have a
\f[CR][Symbol.toPrimitive]()\f[R] method, JavaScript calls the
\f[CR]toString()\f[R] method automatically when a \f[CR]Number\f[R]
\f[I]object\f[R] is used in a context expecting a string, such as in a
template literal.
However, Number \f[I]primitive\f[R] values do not consult the
\f[CR]toString()\f[R] method to be coerced to strings \[em] rather, they
are directly converted using the same algorithm as the initial
\f[CR]toString()\f[R] implementation.
.IP
.EX
Number.prototype.toString = () \f[B]=>\f[R] \[dq]Overridden\[dq];
console.log(\[ga]${1}\[ga]); \f[I]// \[dq]1\[dq]\f[R]
console.log(\[ga]${\f[B]new\f[R] Number(1)}\[ga]); \f[I]// \[dq]Overridden\[dq]\f[R]
.EE
.SH EXAMPLES
.SS Using toString()
.IP
.EX
\f[B]const\f[R] count = 10;
console.log(count.toString()); \f[I]// \[dq]10\[dq]\f[R]

console.log((17).toString()); \f[I]// \[dq]17\[dq]\f[R]
console.log((17.2).toString()); \f[I]// \[dq]17.2\[dq]\f[R]

\f[B]const\f[R] x = 6;
console.log(x.toString(2)); \f[I]// \[dq]110\[dq]\f[R]
console.log((254).toString(16)); \f[I]// \[dq]fe\[dq]\f[R]
console.log((\-10).toString(2)); \f[I]// \[dq]\-1010\[dq]\f[R]
console.log((\-0xff).toString(2)); \f[I]// \[dq]\-11111111\[dq]\f[R]
.EE
.SS Converting radix of number strings
If you have a string representing a number in a non\-decimal radix, you
can use \f[CR]parseInt()\f[R] and \f[CR]toString()\f[R] to convert it to
a different radix.
.IP
.EX
\f[B]const\f[R] hex = \[dq]CAFEBABE\[dq];
\f[B]const\f[R] bin = parseInt(hex, 16).toString(2); \f[I]// \[dq]11001010111111101011101010111110\[dq]\f[R]
.EE
.PP
Beware of loss of precision: if the original number string is too large
(larger than \f[CR]Number.MAX_SAFE_INTEGER\f[R], for example), you
should use a \f[CR]BigInt\f[R] instead.
However, the \f[CR]BigInt\f[R] constructor only has support for strings
representing number literals (i.e.\ strings starting with \f[CR]0b\f[R],
\f[CR]0o\f[R], \f[CR]0x\f[R]).
In case your original radix is not one of binary, octal, decimal, or
hexadecimal, you may need to hand\-write your radix converter, or use a
library.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Number.prototype.toFixed()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toExponential()\f[R]
.IP \[bu] 2
\f[CR]Number.prototype.toPrecision()\f[R]
