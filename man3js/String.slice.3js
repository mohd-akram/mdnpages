.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "STRING.SLICE" "3JS" "April 3, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
String.slice \- String.prototype.slice()
.SH SYNOPSIS
The \f[B]\f[CB]slice()\f[B]\f[R] method of \f[CR]String\f[R] values
extracts a section of this string and returns it as a new string,
without modifying the original string.
.IP
.EX
\f[B]const\f[R] str = \(dqThe quick brown fox jumps over the lazy dog.\(dq;

console.log(str.slice(31));
\f[I]// Expected output: \(dqthe lazy dog.\(dq\f[R]

console.log(str.slice(4, 19));
\f[I]// Expected output: \(dqquick brown fox\(dq\f[R]

console.log(str.slice(\-4));
\f[I]// Expected output: \(dqdog.\(dq\f[R]

console.log(str.slice(\-9, \-5));
\f[I]// Expected output: \(dqlazy\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
slice(indexStart)
slice(indexStart, indexEnd)
.EE
.SS Parameters
.TP
\f[B]indexStart\f[R]
The index of the first character to include in the returned substring.
.TP
\f[B]indexEnd\f[R] \f[I](optional)\f[R]
The index of the first character to exclude from the returned substring.
.SS Return value
A new string containing the extracted section of the string.
.SH DESCRIPTION
\f[CR]slice()\f[R] extracts the text from one string and returns a new
string.
.PP
\f[CR]slice()\f[R] extracts up to but not including \f[CR]indexEnd\f[R].
For example, \f[CR]str.slice(4, 8)\f[R] extracts the fifth character
through the eighth character (characters indexed \f[CR]4\f[R],
\f[CR]5\f[R], \f[CR]6\f[R], and \f[CR]7\f[R]):
.IP
.EX
              indexStart        indexEnd
                  ↓               ↓
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
| T | h | e |   | m | i | r | r | o | r |

                  m   i   r   r
                 _______________
                      ↑
                    Result
.EE
.IP \(bu 2
If \f[CR]indexStart >= str.length\f[R], an empty string is returned.
.IP \(bu 2
If \f[CR]indexStart < 0\f[R], the index is counted from the end of the
string.
More formally, in this case, the substring starts at
\f[CR]max(indexStart + str.length, 0)\f[R].
.IP \(bu 2
If \f[CR]indexStart\f[R] is omitted, \f[CR]undefined\f[R], or cannot be
converted to a number, it\(cqs treated as \f[CR]0\f[R].
.IP \(bu 2
If \f[CR]indexEnd\f[R] is omitted or \f[CR]undefined\f[R], or if
\f[CR]indexEnd >= str.length\f[R], \f[CR]slice()\f[R] extracts to the
end of the string.
.IP \(bu 2
If \f[CR]indexEnd < 0\f[R], the index is counted from the end of the
string.
More formally, in this case, the substring ends at
\f[CR]max(indexEnd + str.length, 0)\f[R].
.IP \(bu 2
If \f[CR]indexEnd <= indexStart\f[R] after normalizing negative values
(i.e., \f[CR]indexEnd\f[R] represents a character that\(cqs before
\f[CR]indexStart\f[R]), an empty string is returned.
.SH EXAMPLES
.SS Using slice() to create a new string
The following example uses \f[CR]slice()\f[R] to create a new string.
.IP
.EX
\f[B]const\f[R] str1 = \(dqThe morning is upon us.\(dq; \f[I]// The length of str1 is 23.\f[R]
\f[B]const\f[R] str2 = str1.slice(1, 8);
\f[B]const\f[R] str3 = str1.slice(4, \-2);
\f[B]const\f[R] str4 = str1.slice(12);
\f[B]const\f[R] str5 = str1.slice(30);
console.log(str2); \f[I]// he morn\f[R]
console.log(str3); \f[I]// morning is upon u\f[R]
console.log(str4); \f[I]// is upon us.\f[R]
console.log(str5); \f[I]// \(dq\(dq\f[R]
.EE
.SS Using slice() with negative indexes
The following example uses \f[CR]slice()\f[R] with negative indexes.
.IP
.EX
\f[B]const\f[R] str = \(dqThe morning is upon us.\(dq;
str.slice(\-3); \f[I]// \(aqus.\(aq\f[R]
str.slice(\-3, \-1); \f[I]// \(aqus\(aq\f[R]
str.slice(0, \-1); \f[I]// \(aqThe morning is upon us\(aq\f[R]
str.slice(4, \-1); \f[I]// \(aqmorning is upon us\(aq\f[R]
.EE
.PP
This example counts backwards from the end of the string by
\f[CR]11\f[R] to find the start index and forwards from the start of the
string by \f[CR]16\f[R] to find the end index.
.IP
.EX
console.log(str.slice(\-11, 16)); \f[I]// \(dqis u\(dq\f[R]
.EE
.PP
Here it counts forwards from the start by \f[CR]11\f[R] to find the
start index and backwards from the end by \f[CR]7\f[R] to find the end
index.
.IP
.EX
console.log(str.slice(11, \-7)); \f[I]// \(dq is u\(dq\f[R]
.EE
.PP
These arguments count backwards from the end by \f[CR]5\f[R] to find the
start index and backwards from the end by \f[CR]1\f[R] to find the end
index.
.IP
.EX
console.log(str.slice(\-5, \-1)); \f[I]// \(dqn us\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]String.prototype.substr()\f[R]
.IP \(bu 2
\f[CR]String.prototype.substring()\f[R]
.IP \(bu 2
\f[CR]Array.prototype.slice()\f[R]
