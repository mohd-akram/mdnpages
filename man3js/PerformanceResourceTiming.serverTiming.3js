.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "PerformanceResourceTiming.serverTiming" "JS" "July 7, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
PerformanceResourceTiming.serverTiming \- PerformanceResourceTiming:
serverTiming property
.SH SYNOPSIS
\f[B]Secure context\f[R]: This feature is available only in secure
contexts (HTTPS).
.PP
The \f[B]\f[CB]serverTiming\f[B]\f[R] read\-only property returns an
array of \f[CR]PerformanceServerTiming\f[R] entries containing server
timing metrics.
.PP
Server timing metrics require the server to send the
\f[CR]Server\-Timing\f[R] header.
For example:
.IP
.EX
Server\-Timing: cache;desc=\[dq]Cache Read\[dq];dur=23.2
.EE
.PP
The \f[CR]serverTiming\f[R] entries can live on \f[CR]navigation\f[R]
and \f[CR]resource\f[R] entries.
.SH VALUE
An array of \f[CR]PerformanceServerTiming\f[R] entries.
.SH EXAMPLES
.SS Logging server timing entries
You can use a \f[CR]PerformanceObserver\f[R] to watch for
\f[CR]PerformanceServerTiming\f[R] entries.
Each server entry\[cq]s duration is logged to the console.
.PP
Example using a \f[CR]PerformanceObserver\f[R], which notifies of new
\f[CR]resource\f[R] performance entries as they are recorded in the
browser\[cq]s performance timeline.
Use the \f[CR]buffered\f[R] option to access entries from before the
observer creation.
.IP
.EX
\f[B]const\f[R] observer = \f[B]new\f[R] PerformanceObserver((list) \f[B]=>\f[R] {
  list.getEntries().forEach((entry) \f[B]=>\f[R] {
    entry.serverTiming.forEach((serverEntry) \f[B]=>\f[R] {
      console.log(\[ga]${serverEntry.name} duration: ${serverEntry.duration}\[ga]);
    });
  });
});

[\[dq]navigation\[dq], \[dq]resource\[dq]].forEach((type) \f[B]=>\f[R]
  observer.observe({ type, buffered: \f[B]true\f[R] }),
);
.EE
.PP
Example using \f[CR]Performance.getEntriesByType()\f[R], which only
shows \f[CR]resource\f[R] performance entries present in the
browser\[cq]s performance timeline at the time you call this method:
.IP
.EX
\f[B]for\f[R] (\f[B]const\f[R] entryType \f[B]of\f[R] [\[dq]navigation\[dq], \[dq]resource\[dq]]) {
  \f[B]for\f[R] (\f[B]const\f[R] { name: url, serverTiming } \f[B]of\f[R] performance.getEntriesByType(
    entryType,
  )) {
    \f[B]if\f[R] (serverTiming) {
      \f[B]for\f[R] (\f[B]const\f[R] { name, duration } \f[B]of\f[R] serverTiming) {
        console.log(\[ga]${url}: ${name} duration: ${duration}\[ga]);
      }
    }
  }
}
.EE
.SS Cross\-origin server timing information
Access to server timing information is restricted to the same origin.
To expose cross\-origin timing information, the
\f[CR]Timing\-Allow\-Origin\f[R] HTTP response header needs to be set.
.PP
For example, to allow \f[CR]https://developer.mozilla.org\f[R] to see
server timing information, the cross\-origin resource should send:
.IP
.EX
Timing\-Allow\-Origin: https://developer.mozilla.org
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]PerformanceServerTiming\f[R]
.IP \[bu] 2
\f[CR]Server\-Timing\f[R]
