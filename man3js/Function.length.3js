'\" t
.\" Automatically generated by Pandoc 3.4
.\"
.TH "Function.length" "JS" "July 4, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Function.length \- Function: length
.SH SYNOPSIS
The \f[B]\f[CB]length\f[B]\f[R] data property of a \f[CR]Function\f[R]
instance indicates the number of parameters expected by the function.
.SH VALUE
A number.
.PP
.TS
tab(@);
l l.
T{
Writable
T}@T{
no
T}
T{
Enumerable
T}@T{
no
T}
T{
Configurable
T}@T{
yes
T}
.TE
.SH DESCRIPTION
A \f[CR]Function\f[R] object\[cq]s \f[CR]length\f[R] property indicates
how many arguments the function expects, i.e.\ the number of formal
parameters:
.IP \[bu] 2
Only parameters before the first one with a default value are counted.
.IP \[bu] 2
A destructuring pattern counts as a single parameter.
.IP \[bu] 2
The rest parameter is excluded.
.PP
By contrast, \f[CR]arguments.length\f[R] is local to a function and
provides the number of arguments actually passed to the function.
.PP
The \f[CR]Function\f[R] constructor is itself a \f[CR]Function\f[R]
object.
Its \f[CR]length\f[R] data property has a value of \f[CR]1\f[R].
.PP
Due to historical reasons, \f[CR]Function.prototype\f[R] is a callable
itself.
The \f[CR]length\f[R] property of \f[CR]Function.prototype\f[R] has a
value of \f[CR]0\f[R].
.SH EXAMPLES
.SS Using function length
.IP
.EX
console.log(Function.length); \f[I]// 1\f[R]

console.log((() \f[B]=>\f[R] {}).length); \f[I]// 0\f[R]
console.log(((a) \f[B]=>\f[R] {}).length); \f[I]// 1\f[R]
console.log(((a, b) \f[B]=>\f[R] {}).length); \f[I]// 2 etc.\f[R]

console.log(((...args) \f[B]=>\f[R] {}).length);
\f[I]// 0, rest parameter is not counted\f[R]

console.log(((a, b = 1, c) \f[B]=>\f[R] {}).length);
\f[I]// 1, only parameters before the first one with\f[R]
\f[I]// a default value are counted\f[R]

console.log((({ a, b }, [c, d]) \f[B]=>\f[R] {}).length);
\f[I]// 2, destructuring patterns each count as\f[R]
\f[I]// a single parameter\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Function\f[R]
