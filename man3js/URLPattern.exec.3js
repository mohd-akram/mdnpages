.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "URLPATTERN.EXEC" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
URLPattern.exec \- URLPattern: exec() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]exec()\f[B]\f[R] method of the \f[CR]URLPattern\f[R]
interface takes a URL or object of URL parts, and returns either an
object containing the results of matching the URL to the pattern, or
\f[CR]null\f[R] if the URL does not match the pattern.
.SH SYNTAX
.IP
.EX
exec(input)
exec(input, baseURL)
.EE
.SS Parameters
.TP
\f[B]input\f[R]
The URL or URL parts to match against.
This can either be a string, or an object providing the individual URL
parts.
The object members can be any of \f[CR]protocol\f[R],
\f[CR]username\f[R], \f[CR]password\f[R], \f[CR]hostname\f[R],
\f[CR]port\f[R], \f[CR]pathname\f[R], \f[CR]search\f[R],
\f[CR]hash\f[R], or \f[CR]baseURL\f[R].
Omitted parts in the object will be treated as empty strings.
If the input cannot be parsed, or a relative URL without a base is
provided, the method will return \f[CR]null\f[R].
.TP
\f[B]baseURL\f[R] \f[I](optional)\f[R]
A string representing the base URL to use in cases where
\f[CR]input\f[R] is a relative URL.
If not specified, it defaults to \f[CR]undefined\f[R].
If this parameter cannot be parsed, the method will return
\f[CR]null\f[R].
.SS Return value
An \f[CR]object\f[R] with an \f[CR]inputs\f[R] key containing the array
of arguments passed into the function, and keys for each of the URL
parts containing the matched input, and matched groups for that part.
.SH EXAMPLES
This example shows how to use the \f[CR]exec()\f[R] method to match a
URL against a pattern.
The example prints the result of the \f[CR]exec()\f[R] calls to the
console.
.IP
.EX
\f[B]const\f[R] pattern = \f[B]new\f[R] URLPattern(\(dqhttp{s}?://*.example.com/books/:id\(dq);

\f[I]// Absolute URL strings\f[R]
console.log(pattern.exec(\(dqhttps://example.com/books/123\(dq)); \f[I]// null\f[R]
\f[B]let\f[R] match = pattern.exec(\(dqhttps://store.example.com/books/123\(dq);
console.log(match.inputs); \f[I]// [\(aqhttps://store.example.com/books/123\(aq]\f[R]
console.log(match.protocol); \f[I]// { input: \(dqhttps\(dq, groups: {} }\f[R]
console.log(match.username); \f[I]// { input: \(dq\(dq, groups: {} }\f[R]
console.log(match.password); \f[I]// { input: \(dq\(dq, groups: {} }\f[R]
console.log(match.hostname); \f[I]// { input: \(dqstore.example.com\(dq, groups: { \(dq0\(dq: \(dqstore\(dq } }\f[R]
console.log(match.port); \f[I]// { input: \(dq\(dq, groups: {} }\f[R]
console.log(match.pathname); \f[I]// { input: \(dq/books/123\(dq, groups: { \(dqid\(dq: \(dq123\(dq } }\f[R]
console.log(match.search); \f[I]// { input: \(dq\(dq, groups: {} }\f[R]
console.log(match.hash); \f[I]// { input: \(dq\(dq, groups: {} }\f[R]

\f[I]// Relative URL strings\f[R]
pattern.exec(\(dq/books/123\(dq, \(dqhttp://store.example.com\(dq); \f[I]// returns object\f[R]
pattern.exec(\(dq/books/123\(dq, \(dqdata:text/plain,hello world!\(dq); \f[I]// returns object\f[R]
pattern.exec(\(dq/books/123\(dq); \f[I]// returns null\f[R]

\f[I]// Structured objects\f[R]
pattern.exec({
  pathname: \(dq/books/123\(dq,
  baseURL: \(dqhttp://store.example.com\(dq,
}); \f[I]// returns object\f[R]
pattern.exec({
  protocol: \(dqhttps\(dq,
  hostname: \(dqstore.example.com\(dq,
  pathname: \(dq/books/123\(dq,
}); \f[I]// returns object\f[R]
pattern.exec({
  protocol: \(dqfile\(dq,
  hostname: \(dqstore.example.com\(dq,
  pathname: \(dq/books/123\(dq,
}); \f[I]// returns null\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
A polyfill of \f[CR]URLPattern\f[R] is available \c
.UR https://github.com/kenchris/urlpattern-polyfill
on GitHub
.UE \c
