.\" Automatically generated by Pandoc 3.4
.\"
.TH "ConvolverNode.normalize" "JS" "November 27, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ConvolverNode.normalize \- ConvolverNode: normalize property
.SH SYNOPSIS
The \f[CR]normalize\f[R] property of the \f[CR]ConvolverNode\f[R]
interface is a boolean that controls whether the impulse response from
the buffer will be scaled by an equal\-power normalization when the
\f[CR]buffer\f[R] attribute is set, or not.
.PP
Its default value is \f[CR]true\f[R] in order to achieve a more uniform
output level from the convolver, when loaded with diverse impulse
responses.
If normalize is set to \f[CR]false\f[R], then the convolution will be
rendered with no pre\-processing/scaling of the impulse response.
Changes to this value do not take effect until the next time the
\f[CR]buffer\f[R] attribute is set.
.SH VALUE
A boolean.
.SH EXAMPLES
.SS Switching normalization off
The following example creates a convolver node and assigns it an
\f[CR]AudioBuffer\f[R].
Before assigning the audio buffer, it sets \f[CR]normalize\f[R] to
\f[CR]false\f[R].
.IP
.EX
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();
\f[I]// ...\f[R]

\f[B]const\f[R] convolver = audioCtx.createConvolver();
\f[I]// ...\f[R]

\f[I]// Grab audio track via fetch() for convolver node\f[R]
\f[B]try\f[R] {
  \f[B]const\f[R] response = \f[B]await\f[R] fetch(
    \[dq]https://mdn.github.io/voice\-change\-o\-matic/audio/concert\-crowd.ogg\[dq],
  );
  \f[B]const\f[R] arrayBuffer = \f[B]await\f[R] response.arrayBuffer();
  \f[B]const\f[R] decodedAudio = \f[B]await\f[R] audioCtx.decodeAudioData(arrayBuffer);
  convolver.normalize = \f[B]false\f[R]; \f[I]// must be set before the buffer, to take effect\f[R]
  convolver.buffer = decodedAudio;
} \f[B]catch\f[R] (error) {
  console.error(
    \[ga]Unable to fetch the audio file: ${name} Error: ${err.message}\[ga],
  );
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
