.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "SVGStyleElement.disabled" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
SVGStyleElement.disabled \- SVGStyleElement: disabled property
.SH SYNOPSIS
The \f[B]\f[CB]SVGStyleElement.disabled\f[B]\f[R] property can be used
to get and set whether the stylesheet is disabled (\f[CR]true\f[R]) or
not (\f[CR]false\f[R]).
.PP
Note that there is no corresponding \f[CR]disabled\f[R] attribute on the
SVG \f[CR]<style>\f[R] element.
.SH VALUE
Returns \f[CR]true\f[R] if the stylesheet is disabled, or there is no
associated stylesheet; otherwise \f[CR]false\f[R].
The value is \f[CR]false\f[R] by default (if there is an associated
stylesheet).
.PP
The property can be used to enable or disable an associated stylesheet.
Setting the property to \f[CR]true\f[R] when there is no associated
stylesheet has no effect.
.SH EXAMPLES
.SS Disabling a style defined in the SVG
This example demonstrates programmatically setting the disabled property
on a style that was defined in the HTML SVG definition.
.SS HTML
The HTML contains an SVG definition for a \f[CR]<circle>\f[R] with a
\f[CR]<style>\f[R] element, along with a button that will be used to
disable the style.
.IP
.EX
<\f[B]button\f[R]>Enable</\f[B]button\f[R]>
<\f[B]svg\f[R]
  xmlns=\[dq]http://www.w3.org/2000/svg\[dq]
  xmlns:xlink=\[dq]http://www.w3.org/1999/xlink\[dq]>
  <\f[B]style\f[R] id=\[dq]circle_style_id\[dq]>
    circle {
      \f[B]fill\f[R]: gold;
      \f[B]stroke\f[R]: green;
      stroke\-width: 3px;
    }
  </\f[B]style\f[R]>
  <\f[B]circle\f[R] cx=\[dq]50\[dq] cy=\[dq]50\[dq] r=\[dq]25\[dq] />
</\f[B]svg\f[R]>
.EE
.SS JavaScript
The code below gets the \f[CR]style\f[R] element (an
\f[CR]SVGStyleElement\f[R]) using its id, and then sets it as disabled.
The style already exists because it is defined in the SVG, so this
should succeed.
.IP
.EX
\f[B]const\f[R] svg = document.querySelector(\[dq]svg\[dq]);
\f[B]const\f[R] style = svg.getElementById(\[dq]circle_style_id\[dq]);
style.disabled = \f[B]true\f[R];
.EE
.PP
We then add an event handler for the button that toggles the disabled
state and button text.
.IP
.EX
\f[B]const\f[R] button = document.querySelector(\[dq]button\[dq]);

button.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  style.disabled = !style.disabled;
  button.textContent = style.disabled ? \[dq]Enable\[dq] : \[dq]Disable\[dq];
});
.EE
.SS Result
The result is shown below.
Press the button to toggle the \f[CR]disabled\f[R] property on the style
used for the circle.
.SS Disabling a programmatically defined style
This example is very similar to the one above, except that the style is
defined programmatically.
.PP
Note that you can have multiple styles applied both in SVG source and
programmatically.
This example is primarily provided to demonstrate how to create the
style externally, and show at what point the style can be disabled.
.SS HTML
The HTML is similar to the previous case, but the SVG definition does
not include any default styling.
.IP
.EX
<\f[B]button\f[R]>Enable</\f[B]button\f[R]>
<\f[B]svg\f[R]
  xmlns=\[dq]http://www.w3.org/2000/svg\[dq]
  xmlns:xlink=\[dq]http://www.w3.org/1999/xlink\[dq]>
  <\f[B]circle\f[R] cx=\[dq]50\[dq] cy=\[dq]50\[dq] r=\[dq]25\[dq] />
</\f[B]svg\f[R]>
.EE
.SS JavaScript
First we create the new SVG style node.
This is done by first creating a style element in the SVG namespace
using \f[CR]Document.createElementNS()\f[R], creating and appending a
text node with the style definition, and then appending the node to the
SVG defined above.
.RS
.PP
\f[B]Note:\f[R] You must use \f[CR]Document.createElementNS()\f[R] and
not \f[CR]Document.createElement()\f[R] to create the style, or by
default you\[cq]ll create the equivalent HTML style element.
.RE
.IP
.EX
\f[B]const\f[R] svg = document.querySelector(\[dq]svg\[dq]);

\f[I]// Create the \[ga]style\[ga] element in the SVG namespace\f[R]
\f[B]const\f[R] style = document.createElementNS(\[dq]http://www.w3.org/2000/svg\[dq], \[dq]style\[dq]);
\f[B]const\f[R] node = document.createTextNode(\[dq]circle { fill: red; }\[dq]);
svg.appendChild(style);
style.appendChild(node);
.EE
.PP
Then we disable the style.
Note that this is the earliest point at which setting the property to
\f[CR]true\f[R] will succeed.
Before this point the SVG did not have a style associated, and so the
value defaults to \f[CR]false\f[R].
.IP
.EX
\f[I]//Disable the style\f[R]
style.disabled = \f[B]true\f[R];
.EE
.PP
Last of all we add an event handler for the button that toggles the
disabled state and button text (this is the same as in the previous
example).
.IP
.EX
\f[B]const\f[R] button = document.querySelector(\[dq]button\[dq]);

button.addEventListener(\[dq]click\[dq], () \f[B]=>\f[R] {
  style.disabled = !style.disabled;
  button.textContent = style.disabled ? \[dq]Enable\[dq] : \[dq]Disable\[dq];
});
.EE
.SS Result
The result is shown below.
Press the button to toggle the \f[CR]disabled\f[R] state on the style
used for the circle.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]HTMLStyleElement.disabled\f[R]
