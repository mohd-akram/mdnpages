.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "SHADOWROOT.SETHTMLUNSAFE" "3JS" "June 8, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ShadowRoot.setHTMLUnsafe \- ShadowRoot: setHTMLUnsafe() method
.SH SYNOPSIS
The \f[B]\f[CB]setHTMLUnsafe()\f[B]\f[R] method of the
\f[CR]ShadowRoot\f[R] interface can be used to parse a string of HTML
into a \f[CR]DocumentFragment\f[R], optionally filtering out unwanted
elements and attributes, and then use it to replace the existing tree in
the Shadow DOM.
.PP
Unlike with \f[CR]ShadowRoot.setHTML()\f[R], XSS\-unsafe HTML entities
are not guaranteed to be removed.
.SH SYNTAX
.IP
.EX
setHTMLUnsafe(input)
setHTMLUnsafe(input, options)
.EE
.SS Parameters
.TP
\f[B]input\f[R]
A string or \f[CR]TrustedHTML\f[R] instance defining HTML to be parsed.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An options object with the following optional parameters:
.RS
.TP
\f[B]sanitizer\f[R] \f[I](optional)\f[R]
A \f[CR]Sanitizer\f[R] or \f[CR]SanitizerConfig\f[R] object which
defines what elements of the input will be allowed or removed.
Note that generally a \f[CR]\(dqSanitizer\f[R] is expected than the to
be more efficient than a \f[CR]SanitizerConfig\f[R] if the configuration
is to reused.
If not specified, no sanitizer is used.
.RE
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]TypeError\f[R]
This is thrown if:
.RS
.IP \(bu 2
\f[CR]html\f[R] is passed a string when Trusted Types are enforced by a
CSP and no default policy is defined.
.IP \(bu 2
\f[CR]options.sanitizer\f[R] is passed a:
.RS 2
.IP \(bu 2
value that is not a \f[CR]Sanitizer\f[R], \f[CR]SanitizerConfig\f[R], or
string.
.IP \(bu 2
non\-normalized \f[CR]SanitizerConfig\f[R] (one that includes both
\(lqallowed\(rq and \(lqremoved\(rq configuration settings).
.IP \(bu 2
string that does not have the value \f[CR]\(dqdefault\(dq\f[R].
.RE
.RE
.SH DESCRIPTION
The \f[B]\f[CB]setHTMLUnsafe()\f[B]\f[R] method can be used to parse a
string of HTML, optionally filtering out unwanted elements and
attributes, and use it to replace the existing Shadow DOM.
.PP
The suffix \(lqUnsafe\(rq in the method name indicates that while the
method does allow the input string to be filtered of unwanted HTML
entities, it does not enforce the sanitization or removal of potentially
unsafe XSS\-relevant input, such as \f[CR]<script>\f[R] elements, and
script or event handler content attributes.
If no sanitizer configuration is specified in the
\f[CR]options.sanitizer\f[R] parameter, \f[CR]setHTMLUnsafe()\f[R] is
used without any sanitization.
.PP
The input HTML may include declarative shadow roots.
If the string of HTML defines more than one declarative shadow root in a
particular shadow host then only the first \f[CR]ShadowRoot\f[R] is
created \(em subsequent declarations are parsed as \f[CR]<template>\f[R]
elements within that shadow root.
.PP
\f[CR]setHTMLUnsafe()\f[R] should be instead of
\f[CR]ShadowRoot.setHTML()\f[R] when parsing potentially unsafe strings
of HTML that for whatever reason need to contain XSS\-unsafe elements or
attributes.
If strings to be injected don\(cqt need to contain unsafe HTML entities,
then you should use \f[CR]ShadowRoot.setHTML()\f[R].
.PP
Note that since this method does not necessarily sanitize input strings
of XSS\-unsafe entities, input strings should also be validated using
the Trusted Types API.
If the method is used with both a trusted types and a sanitizer, the
input string will be passed through the trusted transformation function
before it is sanitized.
.SH EXAMPLES
.SS Basic usage
This example shows some of the ways you can use
\f[CR]setHTMLUnsafe()\f[R] to sanitize and inject a string of HTML.
.PP
First we will create the \f[CR]ShadowRoot\f[R] we want to target.
This could be created programmatically using
\f[CR]Element.attachShadow()\f[R] but for this example we\(cqll create
the root declaratively.
.IP
.EX
<\f[B]div\f[R] id=\(dqhost\(dq>
  <\f[B]template\f[R] shadowrootmode=\(dqopen\(dq>
    <\f[B]span\f[R]>A span element in the shadow DOM</\f[B]span\f[R]>
  </\f[B]template\f[R]>
</\f[B]div\f[R]>
.EE
.PP
We can get a handle to the shadow root from the \f[CR]#host\f[R] element
like this:
.IP
.EX
\f[B]const\f[R] shadow = document.querySelector(\(dq#host\(dq).shadowRoot;
.EE
.PP
The code below shows how we can call \f[CR]setHTMLUnsafe()\f[R] with a
string and different sanitizers in order to filter and inject the HTML
into the shadow root.
.IP
.EX
\f[I]// Define unsanitized string of HTML\f[R]
\f[B]const\f[R] unsanitizedString = \(dqabc <script>alert(1)<\(dq + \(dq/script> def\(dq;

\f[I]// setHTMLUnsafe() with no sanitizer (no filtering)\f[R]
shadow.setHTMLUnsafe(unsanitizedString);

\f[I]// Define custom Sanitizer and use in setHTMLUnsafe()\f[R]
\f[I]// This allows only elements: <div>, <p>, <span>, <script> (<script> is unsafe)\f[R]
\f[B]const\f[R] sanitizer1 = \f[B]new\f[R] Sanitizer({ elements: [\(dqdiv\(dq, \(dqp\(dq, \(dqspan\(dq, \(dqscript\(dq] });
shadow.setHTMLUnsafe(unsanitizedString, { sanitizer: sanitizer1 });

\f[I]// Define custom SanitizerConfig within setHTMLUnsafe()\f[R]
\f[I]// This removes only the script\f[R]
shadow.setHTMLUnsafe(unsanitizedString, {
  sanitizer: { removeElements: [\(dqscript\(dq] },
});
.EE
.SS \f[CR]setHTMLUnsafe()\f[R] live example
This example provides a \(lqlive\(rq demonstration of the method when
called with different sanitizers.
The code defines buttons that you can click to sanitize and inject a
string of HTML using a default and a custom sanitizer, respectively.
The original string and sanitized HTML are logged so you can inspect the
results in each case.
.SS HTML
The HTML defines two \f[CR]<button>\f[R] elements for injecting the HTML
with no sanitizer and with a custom sanitizer (respectively), another
button to reset the example, and a \f[CR]<div>\f[R] that contains the
declarative shadow root.
.IP
.EX
<\f[B]button\f[R] id=\(dqbuttonNoSanitizer\(dq type=\(dqbutton\(dq>None</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqbuttonAllowScript\(dq type=\(dqbutton\(dq>allowScript</\f[B]button\f[R]>
<\f[B]button\f[R] id=\(dqreload\(dq type=\(dqbutton\(dq>Reload</\f[B]button\f[R]>

<\f[B]div\f[R] id=\(dqhost\(dq>
  <\f[B]template\f[R] shadowrootmode=\(dqopen\(dq>
    <\f[B]span\f[R]>I am in the shadow DOM </\f[B]span\f[R]>
  </\f[B]template\f[R]>
</\f[B]div\f[R]>
.EE
.SS JavaScript
First we define the handler for the reload button.
.IP
.EX
\f[B]const\f[R] reload = document.querySelector(\(dq#reload\(dq);
reload.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] document.location.reload());
.EE
.PP
Then we define the input string to inject into the shadow root, which
will be the same for all cases.
This contains the \f[CR]<script>\f[R] element and the \f[CR]onclick\f[R]
handler, both of which are considered XSS\-unsafe.
We also get variable \f[CR]shadow\f[R], which is our handle to the
shadow root.
.IP
.EX
\f[I]// Define unsafe string of HTML\f[R]
\f[B]const\f[R] unsanitizedString = \(ga
  <div>
    <p>Paragraph to inject into shadow DOM. <button onclick=\(dqalert(\(aqYou clicked the button!\(aq)\(dq>Click me</button></p>
    <script src=\(dqpath/to/a/module.js\(dq type=\(dqmodule\(dq><script>
  </div>
\(ga;

\f[B]const\f[R] shadow = document.querySelector(\(dq#host\(dq).shadowRoot;
.EE
.PP
Next we define the click handler for the button that sets the shadow
root using \f[CR]setHTMLUnsafe()\f[R] without passing a sanitizer.
As there is no sanitizer, we expect the injected HTML to match the input
string.
.IP
.EX
\f[B]const\f[R] buttonNoSanitizer = document.querySelector(\(dq#buttonNoSanitizer\(dq);
buttonNoSanitizer.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[I]// Set the content of the element with no sanitizer\f[R]
  shadow.setHTMLUnsafe(unsanitizedString);

  \f[I]// Log HTML before sanitization and after being injected\f[R]
  logElement.textContent = \(dqNo sanitizer\(rsn\(rsn\(dq;
  log(\(ga\(rsnunsanitized: ${unsanitizedString}\(ga);
  log(\(ga\(rsnsanitized: ${shadow.innerHTML}\(ga);
});
.EE
.PP
The next click handler sets the target HTML using a custom sanitizer
that allows only \f[CR]<div>\f[R], \f[CR]<p>\f[R], and
\f[CR]<script>\f[R] elements.
.IP
.EX
\f[B]const\f[R] allowScriptButton = document.querySelector(\(dq#buttonAllowScript\(dq);
allowScriptButton.addEventListener(\(dqclick\(dq, () \f[B]=>\f[R] {
  \f[I]// Set the content of the element using a custom sanitizer\f[R]
  \f[B]const\f[R] sanitizer1 = \f[B]new\f[R] Sanitizer({
    elements: [\(dqdiv\(dq, \(dqp\(dq, \(dqscript\(dq],
  });
  shadow.setHTMLUnsafe(unsanitizedString, { sanitizer: sanitizer1 });

  \f[I]// Log HTML before sanitization and after being injected\f[R]
  logElement.textContent = \(dqSanitizer: {elements: [\(aqdiv\(aq, \(aqp\(aq, \(aqscript\(aq]}\(rsn\(dq;
  log(\(ga\(rsnunsanitized: ${unsanitizedString}\(ga);
  log(\(ga\(rsnsanitized: ${shadow.innerHTML}\(ga);
});
.EE
.SS Results
Click the \(lqNone\(rq and \(lqallowScript\(rq buttons to see the
effects of no sanitizer and a custom sanitizer, respectively.
.PP
When you click the \(lqNone\(rq button, you should see that the input
and output match, as no sanitizer is applied.
When you click the \(lqallowScript\(rq button the \f[CR]<script>\f[R]
element is still present, but the \f[CR]<button>\f[R] element is
removed.
With this approach you can create safe HTML, but you aren\(cqt forced
to.
.SH SEE ALSO
.IP \(bu 2
\f[CR]ShadowRoot.setHTML()\f[R]
.IP \(bu 2
\f[CR]ShadowRoot.innerHTML\f[R]
.IP \(bu 2
\f[CR]Element.setHTML()\f[R] and \f[CR]Element.setHTMLUnsafe()\f[R]
.IP \(bu 2
\f[CR]Document.parseHTML()\f[R] and
\f[CR]Document.parseHTMLUnsafe()\f[R]
.IP \(bu 2
HTML Sanitizer API
