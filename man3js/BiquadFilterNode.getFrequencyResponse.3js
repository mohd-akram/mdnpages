.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "BIQUADFILTERNODE.GETFREQUENCYRESPONSE" "3JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BiquadFilterNode.getFrequencyResponse \- BiquadFilterNode:
getFrequencyResponse() method
.SH SYNOPSIS
The \f[CR]getFrequencyResponse()\f[R] method of the
\f[CR]BiquadFilterNode\f[R] interface takes the current filtering
algorithm\(cqs settings and calculates the frequency response for
frequencies specified in a specified array of frequencies.
.PP
The two output arrays, \f[CR]magResponseOutput\f[R] and
\f[CR]phaseResponseOutput\f[R], must be created before calling this
method; they must be the same size as the array of input frequency
values (\f[CR]frequencyArray\f[R]).
.SH SYNTAX
.IP
.EX
getFrequencyResponse(frequencyArray, magResponseOutput, phaseResponseOutput)
.EE
.SS Parameters
.TP
\f[B]frequencyArray\f[R]
A \f[CR]Float32Array\f[R] containing an array of frequencies, specified
in Hertz, which you want to filter.
.TP
\f[B]magResponseOutput\f[R]
A \f[CR]Float32Array\f[R] to receive the computed magnitudes of the
frequency response for each frequency value in the
\f[CR]frequencyArray\f[R].
For any frequency in \f[CR]frequencyArray\f[R] whose value is outside
the range 0.0 to \f[CR]sampleRate\f[R]/2 (where \f[CR]sampleRate\f[R] is
the sample rate of the \f[CR]AudioContext\f[R]), the corresponding value
in this array is \f[CR]NaN\f[R].
These are unitless values.
.TP
\f[B]phaseResponseOutput\f[R]
A \f[CR]Float32Array\f[R] to receive the computed phase response values
in radians for each frequency value in the input
\f[CR]frequencyArray\f[R].
For any frequency in \f[CR]frequencyArray\f[R] whose value is outside
the range 0.0 to \f[CR]sampleRate\f[R]/2 (where \f[CR]sampleRate\f[R] is
the sample rate of the \f[CR]AudioContext\f[R]), the corresponding value
in this array is \f[CR]NaN\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidAccessError\f[R]
The three arrays provided are not all of the same length.
.SH EXAMPLES
In the following example we are using a biquad filter on a media stream
(for the full demo, see our \c
.UR https://mdn.github.io/webaudio-examples/stream-source-buffer/
stream\-source\-buffer demo
.UE \c
\ live, or \c
.UR https://github.com/mdn/webaudio-examples/blob/main/stream-source-buffer/index.html
read the source
.UE \c
\&.)
As part of this demo, we get the frequency responses for this biquad
filter, for five sample frequencies.
We first create the \f[CR]Float32Array\f[R]s we need, one containing the
input frequencies, and two to receive the output magnitude and phase
values:
.IP
.EX
\f[B]const\f[R] myFrequencyArray = \f[B]new\f[R] Float32Array(5);
myFrequencyArray[0] = 1000;
myFrequencyArray[1] = 2000;
myFrequencyArray[2] = 3000;
myFrequencyArray[3] = 4000;
myFrequencyArray[4] = 5000;

\f[B]const\f[R] magResponseOutput = \f[B]new\f[R] Float32Array(5);
\f[B]const\f[R] phaseResponseOutput = \f[B]new\f[R] Float32Array(5);
.EE
.PP
Next we create a \f[CR]<ul>\f[R] element in our HTML to contain our
results, and grab a reference to it in our JavaScript:
.IP
.EX
<\f[B]p\f[R]>Biquad filter frequency response for:</\f[B]p\f[R]>
<\f[B]ul\f[R] class=\(dqfreq\-response\-output\(dq></\f[B]ul\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] freqResponseOutput = document.querySelector(\(dq.freq\-response\-output\(dq);
.EE
.PP
Finally, after creating our biquad filter, we use
\f[CR]getFrequencyResponse()\f[R] to generate the response data and put
it in our arrays, then loop through each data set and output them in a
human\-readable list at the bottom of the page:
.IP
.EX
\f[B]const\f[R] biquadFilter = audioCtx.createBiquadFilter();
biquadFilter.type = \(dqlowshelf\(dq;
biquadFilter.frequency.value = 1000;
biquadFilter.gain.value = range.value;

\f[I]// \&...\f[R]

\f[B]function\f[R] calcFrequencyResponse() {
  biquadFilter.getFrequencyResponse(
    myFrequencyArray,
    magResponseOutput,
    phaseResponseOutput,
  );

  \f[B]for\f[R] (\f[B]let\f[R] i = 0; i <= myFrequencyArray.length \- 1; i++) {
    \f[B]const\f[R] listItem = document.createElement(\(dqli\(dq);
    listItem.textContent = \(ga: Magnitude ${magResponseOutput[i]}, Phase ${phaseResponseOutput[i]} radians.\(ga;
    listItem.insertBefore(
      document.createElement(\(dqstrong\(dq),
      listItem.firstChild,
    ).textContent = \(ga${myFrequencyArray[i]}Hz\(ga;
    freqResponseOutput.appendChild(listItem);
  }
}

calcFrequencyResponse();
.EE
.SH SEE ALSO
.IP \(bu 2
Using the Web Audio API
