.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "REFLECT.CONSTRUCT" "3JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.construct \- Reflect.construct()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.construct()\f[B]\f[R] static method is like the
\f[CR]new\f[R] operator, but as a function.
It is equivalent to calling \f[CR]new target(...args)\f[R].
It additionally allows to specify a different \f[CR]new.target\f[R]
value.
.IP
.EX
\f[B]function\f[R] func1(a, b, c) {
  \f[B]this\f[R].sum = a + b + c;
}

\f[B]const\f[R] args = [1, 2, 3];
\f[B]const\f[R] object1 = \f[B]new\f[R] func1(...args);
\f[B]const\f[R] object2 = Reflect.construct(func1, args);

console.log(object2.sum);
\f[I]// Expected output: 6\f[R]

console.log(object1.sum);
\f[I]// Expected output: 6\f[R]
.EE
.SH SYNTAX
.IP
.EX
Reflect.construct(target, argumentsList)
Reflect.construct(target, argumentsList, newTarget)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target function to call.
.TP
\f[B]argumentsList\f[R]
An array\-like object specifying the arguments with which
\f[CR]target\f[R] should be called.
.TP
\f[B]newTarget\f[R] \f[I](optional)\f[R]
The value of the \f[CR]new.target\f[R] expression inside
\f[CR]target\f[R].
Defaults to \f[CR]target\f[R].
Generally (see example), \f[CR]target\f[R] specifies the \f[I]logic\f[R]
to initialize the object, while \f[CR]newTarget.prototype\f[R] specifies
the \f[I]prototype\f[R] of the constructed object.
.SS Return value
A new instance of \f[CR]target\f[R] (or \f[CR]newTarget\f[R], if
present), initialized by \f[CR]target\f[R] as a constructor with the
given \f[CR]argumentsList\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] or \f[CR]newTarget\f[R] is not a
constructor, or if \f[CR]argumentsList\f[R] is not an object.
.SH DESCRIPTION
\f[CR]Reflect.construct()\f[R] provides the reflective semantic of a
constructor call.
That is, \f[CR]Reflect.construct(target, argumentsList, newTarget)\f[R]
is semantically equivalent to:
.IP
.EX
\f[B]new\f[R] target(...argumentsList);
.EE
.PP
Note that when using the \f[CR]new\f[R] operator, \f[CR]target\f[R] and
\f[CR]newTarget\f[R] are always the same constructor \(em but
\f[CR]Reflect.construct()\f[R] allows you to pass a different
\f[CR]new.target\f[R] value.
Conceptually, \f[CR]newTarget\f[R] is the function on which
\f[CR]new\f[R] was called, and \f[CR]newTarget.prototype\f[R] will
become the constructed object\(cqs prototype, while \f[CR]target\f[R] is
the constructor that is actually executed to initialize the object.
For example, \f[CR]new.target\f[R] may also be different from the
currently executed constructor in class inheritance.
.IP
.EX
\f[B]class\f[R] A {
  constructor() {
    console.log(\f[B]new\f[R].target.name);
  }
}
\f[B]class\f[R] B \f[B]extends\f[R] A {}

\f[B]new\f[R] B(); \f[I]// \(dqB\(dq\f[R]
.EE
.PP
\f[CR]Reflect.construct()\f[R] allows you to invoke a constructor with a
variable number of arguments.
(This is also possible with the spread syntax in a normal constructor
call.)
.IP
.EX
\f[B]const\f[R] obj = \f[B]new\f[R] Foo(...args);
\f[B]const\f[R] obj = Reflect.construct(Foo, args);
.EE
.PP
\f[CR]Reflect.construct()\f[R] invokes the \f[CR][[Construct]]\f[R]
object internal method of \f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.construct()
.IP
.EX
\f[B]const\f[R] d = Reflect.construct(Date, [1776, 6, 4]);
d \f[B]instanceof\f[R] Date; \f[I]// true\f[R]
d.getFullYear(); \f[I]// 1776\f[R]
.EE
.SS Changing new.target
If \f[CR]newTarget\f[R] is passed, it changes the value of
\f[CR]new.target\f[R] inside the constructor.
The constructed object will be an instance of \f[CR]newTarget\f[R], not
\f[CR]target\f[R].
.IP
.EX
\f[B]function\f[R] OneClass() {
  console.log(\(dqOneClass executed\(dq);
  console.log(\(ganew.target is ${\f[B]new\f[R].target.name}\(ga);
}

\f[B]function\f[R] OtherClass() {
  console.log(\(dqOtherClass executed\(dq);
  console.log(\(ganew.target is ${\f[B]new\f[R].target.name}\(ga);
}

\f[B]const\f[R] obj1 = Reflect.construct(OneClass, []);
\f[I]// Logs:\f[R]
\f[I]// OneClass executed\f[R]
\f[I]// new.target is OneClass\f[R]
console.log(obj1 \f[B]instanceof\f[R] OneClass); \f[I]// true\f[R]

\f[B]const\f[R] obj2 = Reflect.construct(OneClass, [], OtherClass);
\f[I]// Logs:\f[R]
\f[I]// OneClass executed\f[R]
\f[I]// new.target is OtherClass\f[R]
console.log(obj2 \f[B]instanceof\f[R] OtherClass); \f[I]// true\f[R]
console.log(obj2 \f[B]instanceof\f[R] OneClass); \f[I]// false\f[R]
.EE
.PP
Of course, there\(cqs no strong guarantee about the prototype chain of
the constructed object, as it depends on the constructor\(cqs
implementation.
For example, if the \f[CR]target\f[R] constructor returns an object,
then that object will be the constructed object, regardless of the
\f[CR]newTarget\f[R] value.
If \f[CR]target\f[R] is a proxy with a \f[CR]construct\f[R] trap, then
the trap fully controls the construction process.
.IP
.EX
\f[B]function\f[R] OneClass() {
  \f[B]return\f[R] { name: \(dqone\(dq };
}

\f[B]function\f[R] OtherClass() {
  \f[B]return\f[R] { name: \(dqother\(dq };
}

\f[B]const\f[R] obj1 = Reflect.construct(OneClass, [], OtherClass);
console.log(obj1.name); \f[I]// \(aqone\(aq\f[R]
console.log(obj1 \f[B]instanceof\f[R] OneClass); \f[I]// false\f[R]
console.log(obj1 \f[B]instanceof\f[R] OtherClass); \f[I]// false\f[R]
.EE
.PP
A valid \f[CR]new.target\f[R] should be a constructor function with a
\f[CR]prototype\f[R] property, but the latter is not enforced.
If the \f[CR]prototype\f[R] property\(cqs value is not an object, the
initialized object will inherit from \f[CR]Object.prototype\f[R].
.IP
.EX
\f[B]function\f[R] OneClass() {
  console.log(\(dqOneClass executed\(dq);
  console.log(\(ganew.target is ${\f[B]new\f[R].target.name}\(ga);
}

\f[B]function\f[R] OtherClass() {
  console.log(\(dqOtherClass executed\(dq);
  console.log(\(ganew.target is ${\f[B]new\f[R].target.name}\(ga);
}

OtherClass.prototype = \f[B]null\f[R];

\f[B]const\f[R] obj = Reflect.construct(OneClass, [], OtherClass);
\f[I]// Logs:\f[R]
\f[I]// OneClass executed\f[R]
\f[I]// new.target is OtherClass\f[R]
console.log(Object.getPrototypeOf(obj) === Object.prototype); \f[I]// true\f[R]
.EE
.SS Reflect.construct() vs.\ Object.create()
Prior to the introduction of \f[CR]Reflect\f[R], objects could be
constructed using an arbitrary combination of constructors and
prototypes using \f[CR]Object.create()\f[R].
.IP
.EX
\f[B]function\f[R] OneClass() {
  \f[B]this\f[R].name = \(dqone\(dq;
}

\f[B]function\f[R] OtherClass() {
  \f[B]this\f[R].name = \(dqother\(dq;
}

\f[B]const\f[R] args = [];
\f[B]const\f[R] obj1 = Reflect.construct(OneClass, args, OtherClass);
\f[B]const\f[R] obj2 = Object.create(OtherClass.prototype);
OneClass.apply(obj2, args);

console.log(obj1.name); \f[I]// \(aqone\(aq\f[R]
console.log(obj2.name); \f[I]// \(aqone\(aq\f[R]

console.log(obj1 \f[B]instanceof\f[R] OneClass); \f[I]// false\f[R]
console.log(obj2 \f[B]instanceof\f[R] OneClass); \f[I]// false\f[R]

console.log(obj1 \f[B]instanceof\f[R] OtherClass); \f[I]// true\f[R]
console.log(obj2 \f[B]instanceof\f[R] OtherClass); \f[I]// true\f[R]
.EE
.PP
However, while the end result is the same, there is one important
difference in the process.
When using \f[CR]Object.create()\f[R] and
\f[CR]Function.prototype.apply()\f[R], the \f[CR]new.target\f[R]
operator will point to \f[CR]undefined\f[R] within the function used as
the constructor, since the \f[CR]new\f[R] keyword is not being used to
create the object.
(In fact, it uses the \f[CR]apply\f[R] semantic, not
\f[CR]construct\f[R], although normal functions happen to operate nearly
the same.)
.PP
When invoking \f[CR]Reflect.construct()\f[R], on the other hand, the
\f[CR]new.target\f[R] operator will point to the \f[CR]newTarget\f[R]
parameter if supplied, or \f[CR]target\f[R] if not.
.IP
.EX
\f[B]function\f[R] OneClass() {
  console.log(\(dqOneClass\(dq);
  console.log(\f[B]new\f[R].target);
}
\f[B]function\f[R] OtherClass() {
  console.log(\(dqOtherClass\(dq);
  console.log(\f[B]new\f[R].target);
}

\f[B]const\f[R] obj1 = Reflect.construct(OneClass, args);
\f[I]// Logs:\f[R]
\f[I]// OneClass\f[R]
\f[I]// function OneClass { ... }\f[R]

\f[B]const\f[R] obj2 = Reflect.construct(OneClass, args, OtherClass);
\f[I]// Logs:\f[R]
\f[I]// OneClass\f[R]
\f[I]// function OtherClass { ... }\f[R]

\f[B]const\f[R] obj3 = Object.create(OtherClass.prototype);
OneClass.apply(obj3, args);
\f[I]// Output:\f[R]
\f[I]//     OneClass\f[R]
\f[I]//     undefined\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-reflect
Polyfill of \f[CR]Reflect.construct\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\f[CR]Reflect\f[R]
.IP \(bu 2
\f[CR]new\f[R]
.IP \(bu 2
\f[CR]new.target\f[R]
.IP \(bu 2
\f[CR]handler.construct()\f[R]
