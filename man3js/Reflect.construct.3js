.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Reflect.construct" "JS" "April 23, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Reflect.construct \- Reflect.construct()
.SH SYNOPSIS
The \f[B]\f[CB]Reflect.construct()\f[B]\f[R] static method is like the
\f[CR]new\f[R] operator, but as a function.
It is equivalent to calling \f[CR]new target(...args)\f[R].
It additionally allows to specify a different \f[CR]new.target\f[R]
value.
.SH SYNTAX
.IP
.EX
Reflect.construct(target, argumentsList)
Reflect.construct(target, argumentsList, newTarget)
.EE
.SS Parameters
.TP
\f[B]target\f[R]
The target function to call.
.TP
\f[B]argumentsList\f[R]
An array\-like object specifying the arguments with which
\f[CR]target\f[R] should be called.
.TP
\f[B]newTarget\f[R] \f[I](optional)\f[R]
The value of \f[CR]new.target\f[R] operator, which usually specifies the
prototype of the returned object.
If \f[CR]newTarget\f[R] is not present, its value defaults to
\f[CR]target\f[R].
.SS Return value
A new instance of \f[CR]target\f[R] (or \f[CR]newTarget\f[R], if
present), initialized by \f[CR]target\f[R] as a constructor with the
given \f[CR]argumentsList\f[R].
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if \f[CR]target\f[R] or \f[CR]newTarget\f[R] is not a
constructor, or if \f[CR]argumentsList\f[R] is not an object.
.SH DESCRIPTION
\f[CR]Reflect.apply()\f[R] provides the reflective semantic of a
constructor call.
That is, \f[CR]Reflect.construct(target, argumentsList, newTarget)\f[R]
is semantically equivalent to:
.IP
.EX
\f[B]new\f[R] target(...argumentsList);
.EE
.PP
Note that when using the \f[CR]new\f[R] operator, \f[CR]target\f[R] and
\f[CR]newTarget\f[R] are always the same constructor \[em] but
\f[CR]Reflect.construct()\f[R] allows you to pass a different
\f[CR]new.target\f[R] value.
Conceptually, \f[CR]newTarget\f[R] is the function on which
\f[CR]new\f[R] was called, and \f[CR]newTarget.prototype\f[R] will
become the constructed object\[cq]s prototype, while \f[CR]target\f[R]
is the constructor that is actually executed to initialize the object.
For example, \f[CR]new.target\f[R] may also be different from the
currently executed constructor in class inheritance.
.IP
.EX
\f[B]class\f[R] A {
  constructor() {
    console.log(\f[B]new\f[R].target.name);
  }
}
\f[B]class\f[R] B \f[B]extends\f[R] A {}

\f[B]new\f[R] B(); \f[I]// \[dq]B\[dq]\f[R]
.EE
.PP
\f[CR]Reflect.construct()\f[R] allows you to invoke a constructor with a
variable number of arguments.
(This is also possible with the spread syntax in a normal constructor
call.)
.IP
.EX
\f[B]const\f[R] obj = \f[B]new\f[R] Foo(...args);
\f[B]const\f[R] obj = Reflect.construct(Foo, args);
.EE
.PP
\f[CR]Reflect.construct()\f[R] invokes the \f[CR][[Construct]]\f[R]
object internal method of \f[CR]target\f[R].
.SH EXAMPLES
.SS Using Reflect.construct()
.IP
.EX
\f[B]const\f[R] d = Reflect.construct(Date, [1776, 6, 4]);
d \f[B]instanceof\f[R] Date; \f[I]// true\f[R]
d.getFullYear(); \f[I]// 1776\f[R]
.EE
.SS Reflect.construct() vs.\ Object.create()
Prior to the introduction of \f[CR]Reflect\f[R], objects could be
constructed using an arbitrary combination of constructors and
prototypes using \f[CR]Object.create()\f[R].
.IP
.EX
\f[B]function\f[R] OneClass() {
  \f[B]this\f[R].name = \[dq]one\[dq];
}

\f[B]function\f[R] OtherClass() {
  \f[B]this\f[R].name = \[dq]other\[dq];
}

\f[B]const\f[R] args = [];
\f[B]const\f[R] obj1 = Reflect.construct(OneClass, args, OtherClass);
\f[B]const\f[R] obj2 = Object.create(OtherClass.prototype);
OneClass.apply(obj2, args);

console.log(obj1.name); \f[I]// \[aq]one\[aq]\f[R]
console.log(obj2.name); \f[I]// \[aq]one\[aq]\f[R]

console.log(obj1 \f[B]instanceof\f[R] OneClass); \f[I]// false\f[R]
console.log(obj2 \f[B]instanceof\f[R] OneClass); \f[I]// false\f[R]

console.log(obj1 \f[B]instanceof\f[R] OtherClass); \f[I]// true\f[R]
console.log(obj2 \f[B]instanceof\f[R] OtherClass); \f[I]// true\f[R]
.EE
.PP
However, while the end result is the same, there is one important
difference in the process.
When using \f[CR]Object.create()\f[R] and
\f[CR]Function.prototype.apply()\f[R], the \f[CR]new.target\f[R]
operator will point to \f[CR]undefined\f[R] within the function used as
the constructor, since the \f[CR]new\f[R] keyword is not being used to
create the object.
(In fact, it uses the \f[CR]apply\f[R] semantic, not
\f[CR]construct\f[R], although normal functions happen to operate nearly
the same.)
.PP
When invoking \f[CR]Reflect.construct()\f[R], on the other hand, the
\f[CR]new.target\f[R] operator will point to the \f[CR]newTarget\f[R]
parameter if supplied, or \f[CR]target\f[R] if not.
.IP
.EX
\f[B]function\f[R] OneClass() {
  console.log(\[dq]OneClass\[dq]);
  console.log(\f[B]new\f[R].target);
}
\f[B]function\f[R] OtherClass() {
  console.log(\[dq]OtherClass\[dq]);
  console.log(\f[B]new\f[R].target);
}

\f[B]const\f[R] obj1 = Reflect.construct(OneClass, args);
\f[I]// Logs:\f[R]
\f[I]// OneClass\f[R]
\f[I]// function OneClass { ... }\f[R]

\f[B]const\f[R] obj2 = Reflect.construct(OneClass, args, OtherClass);
\f[I]// Logs:\f[R]
\f[I]// OneClass\f[R]
\f[I]// function OtherClass { ... }\f[R]

\f[B]const\f[R] obj3 = Object.create(OtherClass.prototype);
OneClass.apply(obj3, args);
\f[I]// Output:\f[R]
\f[I]//     OneClass\f[R]
\f[I]//     undefined\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-reflect
Polyfill of \f[CR]Reflect.construct\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Reflect\f[R]
.IP \[bu] 2
\f[CR]new\f[R]
.IP \[bu] 2
\f[CR]new.target\f[R]
.IP \[bu] 2
\f[CR]handler.construct()\f[R]
