.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPURENDERPIPELINE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPURenderPipeline \- GPURenderPipeline
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPURenderPipeline\f[B]\f[R] interface of the WebGPU API
represents a pipeline that controls the vertex and fragment shader
stages and can be used in a \f[CR]GPURenderPassEncoder\f[R] or
\f[CR]GPURenderBundleEncoder\f[R].
.PP
A \f[CR]GPURenderPipeline\f[R] object instance can be created using the
\f[CR]GPUDevice.createRenderPipeline()\f[R] or
\f[CR]GPUDevice.createRenderPipelineAsync()\f[R] methods.
.SH INSTANCE PROPERTIES
.TP
\f[B]label\f[R]
A string providing a label that can be used to identify the object, for
example in \f[CR]GPUError\f[R] messages or console warnings.
.SH INSTANCE METHODS
.TP
\f[B]getBindGroupLayout()\f[R]
Returns the pipeline\(cqs \f[CR]GPUBindGroupLayout\f[R] object with the
given index (i.e., included in the originating
\f[CR]GPUDevice.createRenderPipeline()\f[R] or
\f[CR]GPUDevice.createRenderPipelineAsync()\f[R] call\(cqs pipeline
layout).
.SH EXAMPLES
.RS
.PP
\f[B]Note:\f[R] The \c
.UR https://webgpu.github.io/webgpu-samples/
WebGPU samples
.UE \c
\ feature many more examples.
.RE
.SS Basic example
Our \c
.UR https://mdn.github.io/dom-examples/webgpu-render-demo/
basic render demo
.UE \c
\ provides an example of the construction of a valid render pipeline
descriptor object, which is then used to create a
\f[CR]GPURenderPipeline\f[R] via a \f[CR]createRenderPipeline()\f[R]
call.
.IP
.EX
\f[I]// \&...\f[R]

\f[B]const\f[R] vertexBuffers = [
  {
    attributes: [
      {
        shaderLocation: 0, \f[I]// position\f[R]
        offset: 0,
        format: \(dqfloat32x4\(dq,
      },
      {
        shaderLocation: 1, \f[I]// color\f[R]
        offset: 16,
        format: \(dqfloat32x4\(dq,
      },
    ],
    arrayStride: 32,
    stepMode: \(dqvertex\(dq,
  },
];

\f[B]const\f[R] pipelineDescriptor = {
  vertex: {
    module: shaderModule,
    entryPoint: \(dqvertex_main\(dq,
    buffers: vertexBuffers,
  },
  fragment: {
    module: shaderModule,
    entryPoint: \(dqfragment_main\(dq,
    targets: [
      {
        format: navigator.gpu.getPreferredCanvasFormat(),
      },
    ],
  },
  primitive: {
    topology: \(dqtriangle\-list\(dq,
  },
  layout: \(dqauto\(dq,
};

\f[B]const\f[R] renderPipeline = device.createRenderPipeline(pipelineDescriptor);

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
