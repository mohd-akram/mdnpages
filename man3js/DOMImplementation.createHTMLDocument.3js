.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DOMIMPLEMENTATION.CREATEHTMLDOCUMENT" "3JS" "June 19, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMImplementation.createHTMLDocument \- DOMImplementation:
createHTMLDocument() method
.SH SYNOPSIS
The \f[B]\f[CB]DOMImplementation.createHTMLDocument()\f[B]\f[R] method
creates a new HTML \f[CR]Document\f[R].
.SH SYNTAX
.IP
.EX
createHTMLDocument()
createHTMLDocument(title)
.EE
.SS Parameters
.TP
\f[B]title\f[R] \f[I](optional)\f[R]
A string containing the title to give the new HTML document.
.SS Return value
A new HTML \f[CR]Document\f[R] object.
.SH EXAMPLES
This example creates a new HTML document and inserts it into an
\f[CR]<iframe>\f[R] in the current document.
.PP
Here\(cqs the HTML for this example:
.IP
.EX
<button id=\(dqcreate\-doc\(dq>Create new document</button>
<iframe id=\(dqtheFrame\(dq src=\(dqabout:blank\(dq></iframe>
.EE
.PP
The JavaScript implementation of \f[CR]makeDocument()\f[R] follows:
.IP
.EX
function makeDocument() {
  const frame = document.getElementById(\(dqtheFrame\(dq);

  const doc = document.implementation.createHTMLDocument(\(dqNew Document\(dq);
  const p = doc.createElement(\(dqp\(dq);
  p.textContent = \(dqThis is a new paragraph.\(dq;

  try {
    doc.body.appendChild(p);
  } catch (e) {
    console.log(e);
  }

  // Copy the new HTML document into the frame

  const destDocument = frame.contentDocument;
  const srcNode = doc.documentElement;
  const newNode = destDocument.importNode(srcNode, true);

  destDocument.replaceChild(newNode, destDocument.documentElement);
}

document.getElementById(\(dqcreate\-doc\(dq).addEventListener(\(dqclick\(dq, makeDocument);
.EE
.PP
The code handles creating the new HTML document and inserting some
content into it.
\f[CR]createHTMLDocument()\f[R] constructs a new HTML document whose
\f[CR]<title>\f[R] is \f[CR]\(dqNew Document\(dq\f[R].
Then we create a new paragraph element with some simple content, and
then the new paragraph gets inserted into the new document.
.PP
\f[CR]destDocument\f[R] stores the \f[CR]contentDocument\f[R] of the
frame; this is the document into which we\(cqll be injecting the new
content.
The next two lines handle importing the contents of our new document
into the new document\(cqs context.
Finally, \f[CR]destDocument.replaceChild\f[R] actually replaces the
contents of the frame with the new document\(cqs contents.
.PP
The returned document is pre\-constructed with the following HTML:
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\(dqen\-US\(dq>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R] charset=\(dqUTF\-8\(dq />
    <\f[B]title\f[R]>title</\f[B]title\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    \&...
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SH SEE ALSO
.IP \(bu 2
The \f[CR]DOMImplementation\f[R] interface it belongs to.
