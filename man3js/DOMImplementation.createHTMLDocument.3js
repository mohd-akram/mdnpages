.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "DOMImplementation.createHTMLDocument" "JS" "June 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMImplementation.createHTMLDocument \- DOMImplementation:
createHTMLDocument() method
.SH SYNOPSIS
The \f[B]\f[CB]DOMImplementation.createHTMLDocument()\f[B]\f[R] method
creates a new HTML \f[CR]Document\f[R].
.SH SYNTAX
.IP
.EX
createHTMLDocument()
createHTMLDocument(title)
.EE
.SS Parameters
.TP
\f[B]title\f[R] \f[I](optional)\f[R]
A string containing the title to give the new HTML document.
.SS Return value
A new HTML \f[CR]Document\f[R] object.
.SH EXAMPLES
This example creates a new HTML document and inserts it into an
\f[CR]<iframe>\f[R] in the current document.
.PP
Here\[cq]s the HTML for this example:
.IP
.EX
<\f[B]body\f[R]>
  <\f[B]p\f[R]>
    Click <\f[B]a\f[R] href=\[dq]javascript:makeDocument()\[dq]>here</\f[B]a\f[R]> to create a new document
    and insert it below.
  </\f[B]p\f[R]>
  <\f[B]iframe\f[R] id=\[dq]theFrame\[dq] src=\[dq]about:blank\[dq] />
</\f[B]body\f[R]>
.EE
.PP
The JavaScript implementation of \f[CR]makeDocument()\f[R] follows:
.IP
.EX
\f[B]function\f[R] makeDocument() {
  \f[B]let\f[R] frame = document.getElementById(\[dq]theFrame\[dq]);

  \f[B]let\f[R] doc = document.implementation.createHTMLDocument(\[dq]New Document\[dq]);
  \f[B]let\f[R] p = doc.createElement(\[dq]p\[dq]);
  p.textContent = \[dq]This is a new paragraph.\[dq];

  \f[B]try\f[R] {
    doc.body.appendChild(p);
  } \f[B]catch\f[R] (e) {
    console.log(e);
  }

  \f[I]// Copy the new HTML document into the frame\f[R]

  \f[B]let\f[R] destDocument = frame.contentDocument;
  \f[B]let\f[R] srcNode = doc.documentElement;
  \f[B]let\f[R] newNode = destDocument.importNode(srcNode, \f[B]true\f[R]);

  destDocument.replaceChild(newNode, destDocument.documentElement);
}
.EE
.PP
The code handles creating the new HTML document and inserting some
content into it.
\f[CR]createHTMLDocument()\f[R] constructs a new HTML document whose
\f[CR]<title>\f[R] is \f[CR]\[dq]New Document\[dq]\f[R].
Then we create a new paragraph element with some simple content, and
then the new paragraph gets inserted into the new document.
.PP
\f[CR]destDocument\f[R] stores the \f[CR]contentDocument\f[R] of the
frame; this is the document into which we\[cq]ll be injecting the new
content.
The next two lines handle importing the contents of our new document
into the new document\[cq]s context.
Finally, \f[CR]destDocument.replaceChild\f[R] actually replaces the
contents of the frame with the new document\[cq]s contents.
.PP
\c
.UR https://mdn.dev/archives/media/samples/domref/createHTMLDocument.html
View Live Examples
.UE \c
.PP
The returned document is pre\-constructed with the following HTML:
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\[dq]en\-US\[dq]>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R] charset=\[dq]UTF\-8\[dq] />
    <\f[B]title\f[R]>title</\f[B]title\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    \&...
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SH SEE ALSO
.IP \[bu] 2
The \f[CR]DOMImplementation\f[R] interface it belongs to.
