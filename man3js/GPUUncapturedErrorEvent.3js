.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUUNCAPTUREDERROREVENT" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUUncapturedErrorEvent \- GPUUncapturedErrorEvent
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]GPUUncapturedErrorEvent\f[B]\f[R] interface of the WebGPU
API is the event object type for the \f[CR]GPUDevice\f[R]
\f[CR]uncapturederror\f[R] event, used for telemetry and to report
unexpected errors.
.PP
Known error cases should be handled using \f[CR]pushErrorScope()\f[R]
and \f[CR]popErrorScope()\f[R].
.SH CONSTRUCTOR
.TP
\f[B]GPUUncapturedErrorEvent()\f[R]
Creates a new \f[CR]GPUUncapturedErrorEvent\f[R] object instance.
.SH INSTANCE PROPERTIES
\f[I]Inherits properties from its parent, \f[CI]Event\f[I].\f[R]
.TP
\f[B]error\f[R] \f[I](read\-only)\f[R]
A \f[CR]GPUError\f[R] object instance providing access to the details of
the error.
.SH EXAMPLES
You could use something like the following as a global mechanism to pick
up any errors that aren\(cqt handled by error scopes and capture them.
.IP
.EX
\f[I]// \&...\f[R]

device.addEventListener(\(dquncapturederror\(dq, (event) \f[B]=>\f[R] {
  \f[I]// Re\-surface the error\f[R]
  console.error(\(dqA WebGPU error was not captured:\(dq, event.error.message);
  reportErrorToServer({
    type: event.error.constructor.name,
    message: event.error.message,
  });
});

\f[I]// \&...\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
.IP \(bu 2
\c
.UR https://toji.dev/webgpu-best-practices/error-handling
WebGPU Error Handling best practices
.UE \c
