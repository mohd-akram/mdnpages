.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "IDBFactory.open" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBFactory.open \- IDBFactory: open() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]open()\f[B]\f[R] method of the \f[CR]IDBFactory\f[R]
interface requests opening a connection to a database.
.PP
The method returns an \f[CR]IDBOpenDBRequest\f[R] object immediately,
and performs the open operation asynchronously.
If the operation is successful, a \f[CR]success\f[R] event is fired on
the request object that is returned from this method, with its
\f[CR]result\f[R] attribute set to the new \f[CR]IDBDatabase\f[R] object
for the connection.
.PP
May trigger \f[CR]upgradeneeded\f[R], \f[CR]blocked\f[R] or
\f[CR]versionchange\f[R] events.
.SH SYNTAX
.IP
.EX
open(name)
open(name, version)
.EE
.SS Parameters
.TP
\f[B]name\f[R]
The name of the database.
.TP
\f[B]version\f[R] \f[I](optional)\f[R]
Optional.
The version to open the database with.
If the version is not provided and the database exists, then a
connection to the database will be opened without changing its version.
If the version is not provided and the database does not exist, then it
will be created with version \f[CR]1\f[R].
.SS Return value
A \f[CR]IDBOpenDBRequest\f[R] object on which subsequent events related
to this request are fired.
.PP
If the operation is successful, the value of the request\[cq]s
\f[CR]result\f[R] property is a \f[CR]IDBDatabase\f[R] object
representing the connection to the database.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the value of \f[CR]version\f[R] is not a number greater than
zero.
.SH EXAMPLES
Example of calling \f[CR]open\f[R] with the current specification\[cq]s
\f[CR]version\f[R] parameter:
.IP
.EX
\f[B]const\f[R] request = window.indexedDB.open(\[dq]toDoList\[dq], 4);
.EE
.PP
In the following code snippet, we make a request to open a database, and
include handlers for the success and error cases.
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
.IP
.EX
\f[B]const\f[R] note = document.querySelector(\[dq]ul\[dq]);

\f[I]// Let us open version 4 of our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

\f[I]// these two event handlers act on the database being opened\f[R]
\f[I]// successfully, or not\f[R]
DBOpenRequest.onerror = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Error loading database.\[dq];
};

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db\f[R]
  \f[I]// variable. This is used a lot later on, for opening\f[R]
  \f[I]// transactions and suchlike.\f[R]
  db = DBOpenRequest.result;
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Browser storage quotas and eviction criteria.
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
