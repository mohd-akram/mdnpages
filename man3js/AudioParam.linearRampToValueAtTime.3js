.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "AudioParam.linearRampToValueAtTime" "JS" "May 7, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
AudioParam.linearRampToValueAtTime \- AudioParam:
linearRampToValueAtTime() method
.SH SYNOPSIS
The \f[CR]linearRampToValueAtTime()\f[R] method of the
\f[CR]AudioParam\f[R] Interface schedules a gradual linear change in the
value of the \f[CR]AudioParam\f[R].
The change starts at the time specified for the \f[I]previous\f[R]
event, follows a linear ramp to the new value given in the
\f[CR]value\f[R] parameter, and reaches the new value at the time given
in the \f[CR]endTime\f[R] parameter.
.SH SYNTAX
.IP
.EX
linearRampToValueAtTime(value, endTime)
.EE
.SS Parameters
.TP
\f[B]value\f[R]
A floating point number representing the value the \f[CR]AudioParam\f[R]
will ramp to by the given time.
.TP
\f[B]endTime\f[R]
A double representing the exact time (in seconds) after the ramping
starts that the changing of the value will stop.
.SS Return value
A reference to this \f[CR]AudioParam\f[R] object.
In some browsers older implementations of this interface return
\f[CR]undefined\f[R].
.SH EXAMPLES
In this example, we have a media source with two control buttons (see
the \c
.UR https://github.com/mdn/webaudio-examples/tree/main/audio-param
audio\-param repo
.UE \c
\ for the source code, or \c
.UR https://mdn.github.io/webaudio-examples/audio-param/
view the example live
.UE \c
\&.)
When these buttons are pressed, \f[CR]linearRampToValueAtTime()\f[R] is
used to fade the gain value up to 1.0, and down to 0, respectively.
This is pretty useful for fade in/fade out effects, although
\f[CR]AudioParam.exponentialRampToValueAtTime()\f[R] is often said to be
a bit more natural.
.IP
.EX
\f[I]// create audio context\f[R]
\f[B]const\f[R] audioCtx = \f[B]new\f[R] AudioContext();

\f[I]// set basic variables for example\f[R]
\f[B]const\f[R] myAudio = document.querySelector(\[dq]audio\[dq]);

\f[B]const\f[R] linearRampPlus = document.querySelector(\[dq].linear\-ramp\-plus\[dq]);
\f[B]const\f[R] linearRampMinus = document.querySelector(\[dq].linear\-ramp\-minus\[dq]);

\f[I]// Create a MediaElementAudioSourceNode\f[R]
\f[I]// Feed the HTMLMediaElement into it\f[R]
\f[B]const\f[R] source = audioCtx.createMediaElementSource(myAudio);

\f[I]// Create a gain node and set its gain value to 0.5\f[R]
\f[B]const\f[R] gainNode = audioCtx.createGain();

\f[I]// connect the AudioBufferSourceNode to the gainNode\f[R]
\f[I]// and the gainNode to the destination\f[R]
gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
source.connect(gainNode);
gainNode.connect(audioCtx.destination);

\f[I]// set buttons to do something onclick\f[R]
linearRampPlus.onclick = () \f[B]=>\f[R] {
  gainNode.gain.linearRampToValueAtTime(1.0, audioCtx.currentTime + 2);
};

linearRampMinus.onclick = () \f[B]=>\f[R] {
  gainNode.gain.linearRampToValueAtTime(0, audioCtx.currentTime + 2);
};
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the Web Audio API
