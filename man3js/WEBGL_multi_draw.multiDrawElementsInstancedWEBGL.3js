.\" Automatically generated by Pandoc 3.4
.\"
.TH "WEBGL_multi_draw.multiDrawElementsInstancedWEBGL" "JS" "July 24, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WEBGL_multi_draw.multiDrawElementsInstancedWEBGL \- WEBGL_multi_draw:
multiDrawElementsInstancedWEBGL() method
.SH SYNOPSIS
The
\f[B]\f[CB]WEBGL_multi_draw.multiDrawElementsInstancedWEBGL()\f[B]\f[R]
method of the WebGL API renders multiple primitives from array data.
It is identical to multiple calls to the
\f[CR]gl.drawElementsInstanced()\f[R] method.
.SH SYNTAX
.IP
.EX
multiDrawElementsInstancedWEBGL(mode,
    countsList, countsOffset,
    type,
    firstsList, firstsOffset,
    instanceCountsList, instanceCountsOffset,
    drawCount);
.EE
.SS Parameters
.TP
\f[B]mode\f[R]
A \f[CR]GLenum\f[R] specifying the type primitive to render.
Possible values are:
.RS
.IP \[bu] 2
\f[CR]gl.POINTS\f[R]: Draws a single dot.
.IP \[bu] 2
\f[CR]gl.LINE_STRIP\f[R]: Draws a straight line to the next vertex.
.IP \[bu] 2
\f[CR]gl.LINE_LOOP\f[R]: Draws a straight line to the next vertex, and
connects the last vertex back to the first.
.IP \[bu] 2
\f[CR]gl.LINES\f[R]: Draws a line between a pair of vertices.
.IP \[bu] 2
\c
.UR https://en.wikipedia.org/wiki/Triangle_strip
\f[CR]gl.TRIANGLE_STRIP\f[R]
.UE \c
.IP \[bu] 2
\c
.UR https://en.wikipedia.org/wiki/Triangle_fan
\f[CR]gl.TRIANGLE_FAN\f[R]
.UE \c
.IP \[bu] 2
\f[CR]gl.TRIANGLES\f[R]: Draws a triangle for a group of three vertices.
.RE
.TP
\f[B]countsList\f[R]
An \f[CR]Int32Array\f[R] or \f[CR]Array\f[R] (of \f[CR]GLint\f[R])
specifying a list of numbers of indices to be rendered.
.TP
\f[B]countsOffset\f[R]
A \f[CR]GLUint\f[R] defining the starting point into the
\f[CR]countsList\f[R] array.
.TP
type
A \f[CR]GLenum\f[R] specifying the type of the values in the element
array buffer.
Possible values are:
.RS
.IP \[bu] 2
\f[CR]gl.UNSIGNED_BYTE\f[R]
.IP \[bu] 2
\f[CR]gl.UNSIGNED_SHORT\f[R]
.IP \[bu] 2
When using the \f[CR]OES_element_index_uint\f[R] extension:
.RS 2
.IP \[bu] 2
\f[CR]gl.UNSIGNED_INT\f[R]
.RE
.RE
.TP
\f[B]offsetsList\f[R]
An \f[CR]Int32Array\f[R] or \f[CR]Array\f[R] (of \f[CR]GLsizei\f[R])
specifying a list of starting indices for the arrays of vector points.
.TP
\f[B]offsetsOffset\f[R]
A \f[CR]GLuint\f[R] defining the starting point into the
\f[CR]offsetsList\f[R] array.
.TP
\f[B]instanceCountsList\f[R]
An \f[CR]Int32Array\f[R] or \f[CR]Array\f[R] (of \f[CR]GLsizei\f[R])
specifying a list of numbers of instances of the range of elements to
execute.
.TP
\f[B]instanceCountsOffset\f[R]
A \f[CR]GLuint\f[R] defining the starting point into the
\f[CR]instanceCountsList\f[R] array.
.TP
\f[B]drawCount\f[R]
A \f[CR]GLsizei\f[R] specifying the number of instances of the range of
elements to execute.
.SS Return value
None.
.SS Exceptions
.IP \[bu] 2
If \f[CR]mode\f[R] is not one of the accepted values, a
\f[CR]gl.INVALID_ENUM\f[R] error is thrown.
.IP \[bu] 2
If \f[CR]drawCount\f[R] or items in \f[CR]countsList\f[R],
\f[CR]offsetsList\f[R], or \f[CR]instanceCountsList\f[R] are negative, a
\f[CR]gl.INVALID_VALUE\f[R] error is thrown.
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] counts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] offsets = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
\f[B]const\f[R] instanceCounts = \f[B]new\f[R] Int32Array(\f[I]/* \&... */\f[R]);
ext.multiDrawElementsInstancedWEBGL(
  gl.TRIANGLES,
  counts,
  0,
  gl.UNSIGNED_SHORT,
  offsets,
  0,
  instanceCounts,
  0,
  counts.length,
);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]WebGLRenderingContext.drawElements()\f[R]
.IP \[bu] 2
\f[CR]WebGL2RenderingContext.drawElementsInstanced()\f[R]
