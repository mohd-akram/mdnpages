.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "Response.headers" "JS" "September 21, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Response.headers \- Response: headers property
.SH SYNOPSIS
The \f[B]\f[CB]headers\f[B]\f[R] read\-only property of the
\f[CR]Response\f[R] interface contains the \f[CR]Headers\f[R] object
associated with the response.
.SH VALUE
A \f[CR]Headers\f[R] object.
.SH EXAMPLES
In our \c
.UR https://github.com/mdn/dom-examples/tree/main/fetch/fetch-response
Fetch Response example
.UE \c
\ (see \c
.UR https://mdn.github.io/dom-examples/fetch/fetch-response/
Fetch Response live
.UE \c
) we create a new \f[CR]Request\f[R] object using the
\f[CR]Request()\f[R] constructor, passing it a JPG path.
We then fetch this request using \f[CR]fetch()\f[R], extract a blob from
the response using \f[CR]Response.blob\f[R], create an object URL out of
it using \f[CR]URL.createObjectURL()\f[R], and display this in an
\f[CR]<img>\f[R].
.PP
Note that at the top of the \f[CR]fetch()\f[R] block, we log the
response headers to the console.
.IP
.EX
\f[B]const\f[R] myImage = document.querySelector(\[dq]img\[dq]);

\f[B]const\f[R] myRequest = \f[B]new\f[R] Request(\[dq]flowers.jpg\[dq]);

fetch(myRequest)
  .then((response) \f[B]=>\f[R] {
    console.log(\[dq]response.headers =\[dq], response.headers);
    \f[B]return\f[R] response.blob();
  })
  .then((myBlob) \f[B]=>\f[R] {
    \f[B]const\f[R] objectURL = URL.createObjectURL(myBlob);
    myImage.src = objectURL;
  });
.EE
.SH SEE ALSO
.IP \[bu] 2
ServiceWorker API
.IP \[bu] 2
HTTP access control (CORS)
.IP \[bu] 2
HTTP
