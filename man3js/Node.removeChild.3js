.\" Automatically generated by Pandoc 3.4
.\"
.TH "Node.removeChild" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Node.removeChild \- Node: removeChild() method
.SH SYNOPSIS
The \f[B]\f[CB]removeChild()\f[B]\f[R] method of the \f[CR]Node\f[R]
interface removes a child node from the DOM and returns the removed
node.
.RS
.PP
\f[B]Note:\f[R] As long as a reference is kept on the removed child, it
still exists in memory, but is no longer part of the DOM.
It can still be reused later in the code.
.PP
If the return value of \f[CR]removeChild()\f[R] is not stored, and no
other reference is kept, it will be automatically deleted from memory
after a short time.
.RE
.PP
Unlike \f[CR]Node.cloneNode()\f[R] the return value preserves the
\f[CR]EventListener\f[R] objects associated with it.
.SH SYNTAX
.IP
.EX
removeChild(child)
.EE
.SS Parameters
.TP
\f[B]child\f[R]
A \f[CR]Node\f[R] that is the child node to be removed from the DOM.
.SS Exceptions
.TP
\f[B]NotFoundError\f[R] \f[B]DOMException\f[R]
Thrown if the \f[CR]child\f[R] is not a child of the node.
.TP
\f[B]TypeError\f[R]
Thrown if the \f[CR]child\f[R] is \f[CR]null\f[R].
.SH EXAMPLES
.SS Simple examples
Given this HTML:
.IP
.EX
<\f[B]div\f[R] id=\[dq]parent\[dq]>
  <\f[B]div\f[R] id=\[dq]child\[dq]></\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.PP
To remove a specified element when knowing its parent node:
.IP
.EX
\f[B]const\f[R] parent = document.getElementById(\[dq]parent\[dq]);
\f[B]const\f[R] child = document.getElementById(\[dq]child\[dq]);
\f[B]const\f[R] throwawayNode = parent.removeChild(child);
.EE
.PP
To remove a specified element without having to specify its parent node:
.IP
.EX
\f[B]const\f[R] node = document.getElementById(\[dq]child\[dq]);
\f[B]if\f[R] (node.parentNode) {
  node.parentNode.removeChild(node);
}
.EE
.PP
To remove all children from an element:
.IP
.EX
\f[B]const\f[R] element = document.getElementById(\[dq]idOfParent\[dq]);
\f[B]while\f[R] (element.firstChild) {
  element.removeChild(element.firstChild);
}
.EE
.SS Causing a TypeError
.IP
.EX
\f[I]<!\-\-Sample HTML code\-\->\f[R]
<\f[B]div\f[R] id=\[dq]parent\[dq]></\f[B]div\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] parent = document.getElementById(\[dq]parent\[dq]);
\f[B]const\f[R] child = document.getElementById(\[dq]child\[dq]);

\f[I]// Throws Uncaught TypeError\f[R]
\f[B]const\f[R] garbage = parent.removeChild(child);
.EE
.SS Causing a NotFoundError
.IP
.EX
\f[I]<!\-\-Sample HTML code\-\->\f[R]
<\f[B]div\f[R] id=\[dq]parent\[dq]>
  <\f[B]div\f[R] id=\[dq]child\[dq]></\f[B]div\f[R]>
</\f[B]div\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] parent = document.getElementById(\[dq]parent\[dq]);
\f[B]const\f[R] child = document.getElementById(\[dq]child\[dq]);

\f[I]// This first call correctly removes the node\f[R]
\f[B]const\f[R] garbage = parent.removeChild(child);

\f[I]// Throws NotFoundError\f[R]
garbage = parent.removeChild(child);
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Node.replaceChild()\f[R]
.IP \[bu] 2
\f[CR]Node.parentNode\f[R]
.IP \[bu] 2
\f[CR]Element.remove()\f[R]
.IP \[bu] 2
\f[CR]Node.cloneNode()\f[R]
