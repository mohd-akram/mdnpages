.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "MATH" "3JS" "March 8, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Math \- Math
.SH SYNOPSIS
The \f[B]\f[CB]Math\f[B]\f[R] namespace object contains static
properties and methods for mathematical constants and functions.
.PP
\f[CR]Math\f[R] works with the \f[CR]Number\f[R] type.
It doesn\(cqt work with \f[CR]BigInt\f[R].
.SH DESCRIPTION
Unlike most global objects, \f[CR]Math\f[R] is not a constructor.
You cannot use it with the \f[CR]new\f[R] operator or invoke the
\f[CR]Math\f[R] object as a function.
All properties and methods of \f[CR]Math\f[R] are static.
.RS
.PP
\f[B]Note:\f[R] Many \f[CR]Math\f[R] functions have a precision
that\(cqs \f[I]implementation\-dependent\f[R].
.PP
This means that different browsers can give a different result.
Even the same JavaScript engine on a different OS or architecture can
give different results!
.RE
.SH STATIC PROPERTIES
.TP
\f[B]Math.E\f[R]
Euler\(cqs number and the base of natural logarithms; approximately
\f[CR]2.718\f[R].
.TP
\f[B]Math.LN10\f[R]
Natural logarithm of \f[CR]10\f[R]; approximately \f[CR]2.303\f[R].
.TP
\f[B]Math.LN2\f[R]
Natural logarithm of \f[CR]2\f[R]; approximately \f[CR]0.693\f[R].
.TP
\f[B]Math.LOG10E\f[R]
Base\-10 logarithm of \f[CR]E\f[R]; approximately \f[CR]0.434\f[R].
.TP
\f[B]Math.LOG2E\f[R]
Base\-2 logarithm of \f[CR]E\f[R]; approximately \f[CR]1.443\f[R].
.TP
\f[B]Math.PI\f[R]
Ratio of a circle\(cqs circumference to its diameter; approximately
\f[CR]3.14159\f[R].
.TP
\f[B]Math.SQRT1_2\f[R]
Square root of ½; approximately \f[CR]0.707\f[R].
.TP
\f[B]Math.SQRT2\f[R]
Square root of \f[CR]2\f[R]; approximately \f[CR]1.414\f[R].
.TP
\f[B]Math[Symbol.toStringTag]\f[R]
The initial value of the \f[CR][Symbol.toStringTag]\f[R] property is the
string \f[CR]\(dqMath\(dq\f[R].
This property is used in \f[CR]Object.prototype.toString()\f[R].
.SH STATIC METHODS
.TP
\f[B]Math.abs()\f[R]
Returns the absolute value of the input.
.TP
\f[B]Math.acos()\f[R]
Returns the arccosine of the input.
.TP
\f[B]Math.acosh()\f[R]
Returns the hyperbolic arccosine of the input.
.TP
\f[B]Math.asin()\f[R]
Returns the arcsine of the input.
.TP
\f[B]Math.asinh()\f[R]
Returns the hyperbolic arcsine of a number.
.TP
\f[B]Math.atan()\f[R]
Returns the arctangent of the input.
.TP
\f[B]Math.atan2()\f[R]
Returns the arctangent of the quotient of its arguments.
.TP
\f[B]Math.atanh()\f[R]
Returns the hyperbolic arctangent of the input.
.TP
\f[B]Math.cbrt()\f[R]
Returns the cube root of the input.
.TP
\f[B]Math.ceil()\f[R]
Returns the smallest integer greater than or equal to the input.
.TP
\f[B]Math.clz32()\f[R]
Returns the number of leading zero bits of the 32\-bit integer input.
.TP
\f[B]Math.cos()\f[R]
Returns the cosine of the input.
.TP
\f[B]Math.cosh()\f[R]
Returns the hyperbolic cosine of the input.
.TP
\f[B]Math.exp()\f[R]
Returns e\(hax, where x is the argument, and e is Euler\(cqs number
(\f[CR]2.718\f[R]\&..., the base of the natural logarithm).
.TP
\f[B]Math.expm1()\f[R]
Returns subtracting \f[CR]1\f[R] from \f[CR]exp(x)\f[R].
.TP
\f[B]Math.floor()\f[R]
Returns the largest integer less than or equal to the input.
.TP
\f[B]Math.f16round()\f[R]
Returns the nearest \c
.UR https://en.wikipedia.org/wiki/Half-precision_floating-point_format
half precision
.UE \c
\ float representation of the input.
.TP
\f[B]Math.fround()\f[R]
Returns the nearest \c
.UR https://en.wikipedia.org/wiki/Single-precision_floating-point_format
single precision
.UE \c
\ float representation of the input.
.TP
\f[B]Math.hypot()\f[R]
Returns the square root of the sum of squares of its arguments.
.TP
\f[B]Math.imul()\f[R]
Returns the result of the 32\-bit integer multiplication of the inputs.
.TP
\f[B]Math.log()\f[R]
Returns the natural logarithm (㏒_e; also, ㏑) of the input.
.TP
\f[B]Math.log10()\f[R]
Returns the base\-10 logarithm of the input.
.TP
\f[B]Math.log1p()\f[R]
Returns the natural logarithm (㏒_e; also ㏑) of \f[CR]1 + x\f[R] for
the number \f[CR]x\f[R].
.TP
\f[B]Math.log2()\f[R]
Returns the base\-2 logarithm of the input.
.TP
\f[B]Math.max()\f[R]
Returns the largest of zero or more numbers.
.TP
\f[B]Math.min()\f[R]
Returns the smallest of zero or more numbers.
.TP
\f[B]Math.pow()\f[R]
Returns base \f[CR]x\f[R] to the exponent power \f[CR]y\f[R] (that is,
\f[CR]x\f[R]\(hay).
.TP
\f[B]Math.random()\f[R]
Returns a pseudo\-random number between \f[CR]0\f[R] and \f[CR]1\f[R].
.TP
\f[B]Math.round()\f[R]
Returns the value of the input rounded to the nearest integer.
.TP
\f[B]Math.sign()\f[R]
Returns the sign of the input, indicating whether it is positive,
negative, or zero.
.TP
\f[B]Math.sin()\f[R]
Returns the sine of the input.
.TP
\f[B]Math.sinh()\f[R]
Returns the hyperbolic sine of the input.
.TP
\f[B]Math.sqrt()\f[R]
Returns the positive square root of the input.
.TP
\f[B]Math.sumPrecise()\f[R] \f[I](experimental)\f[R]
Returns the sum of a passed iterable of numbers, avoiding floating point
precision loss in intermediate results.
.TP
\f[B]Math.tan()\f[R]
Returns the tangent of the input.
.TP
\f[B]Math.tanh()\f[R]
Returns the hyperbolic tangent of the input.
.TP
\f[B]Math.trunc()\f[R]
Returns the integer portion of the input, removing any fractional
digits.
.SH EXAMPLES
.SS Converting between degrees and radians
The trigonometric functions \f[CR]sin()\f[R], \f[CR]cos()\f[R],
\f[CR]tan()\f[R], \f[CR]asin()\f[R], \f[CR]acos()\f[R],
\f[CR]atan()\f[R], and \f[CR]atan2()\f[R] expect (and return) angles in
\f[I]radians\f[R].
.PP
Since humans tend to think in degrees, and some functions (such as CSS
transforms) can accept degrees, it is a good idea to keep functions
handy that convert between the two:
.IP
.EX
\f[B]function\f[R] degToRad(degrees) {
  \f[B]return\f[R] degrees * (Math.PI / 180);
}

\f[B]function\f[R] radToDeg(rad) {
  \f[B]return\f[R] rad / (Math.PI / 180);
}
.EE
.SS Calculating the height of an equilateral triangle
If we want to calculate the height of an equilateral triangle, and we
know its side length is 100, we can use the formulae \f[I]length of the
adjacent multiplied by the tangent of the angle is equal to the
opposite.\f[R]
[IMAGE: An equilateral triangle where a perpendicular of one edge is
drawn from the opposite vertex, forming a right triangle with three
sides marked as \(lqadjacent\(rq, \(lqopposite\(rq, and
\(lqhypotenuse\(rq.
The angle between the \(lqadjacent\(rq and \(lqhypotenuse\(rq sides is
60 degrees.]
An equilateral triangle where a perpendicular of one edge is drawn from
the opposite vertex, forming a right triangle with three sides marked as
\(lqadjacent\(rq, \(lqopposite\(rq, and \(lqhypotenuse\(rq.
The angle between the \(lqadjacent\(rq and \(lqhypotenuse\(rq sides is
60 degrees.
.PP
In JavaScript, we can do this with the following:
.IP
.EX
50 * Math.tan(degToRad(60));
.EE
.PP
We use our \f[CR]degToRad()\f[R] function to convert 60 degrees to
radians, as \f[CR]Math.tan()\f[R] expects an input value in radians.
.SS Returning a random integer between two bounds
This can be achieved with a combination of \f[CR]Math.random()\f[R] and
\f[CR]Math.floor()\f[R]:
.IP
.EX
\f[B]function\f[R] random(min, max) {
  \f[B]const\f[R] num = Math.floor(Math.random() * (max \- min + 1)) + min;
  \f[B]return\f[R] num;
}

random(1, 10);
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Number\f[R]
