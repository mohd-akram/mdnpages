.\" Automatically generated by Pandoc 3.4
.\"
.TH "Function.toString" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Function.toString \- Function.prototype.toString()
.SH SYNOPSIS
The \f[B]\f[CB]toString()\f[B]\f[R] method of \f[CR]Function\f[R]
instances returns a string representing the source code of this
function.
.SH SYNTAX
.IP
.EX
toString()
.EE
.SS Parameters
None.
.SS Return value
A string representing the source code of the function.
.SH DESCRIPTION
The \f[CR]Function\f[R] object overrides the \f[CR]toString()\f[R]
method inherited from \f[CR]Object\f[R]; it does not inherit
\f[CR]Object.prototype.toString\f[R].
For user\-defined \f[CR]Function\f[R] objects, the \f[CR]toString\f[R]
method returns a string containing the source text segment which was
used to define the function.
.PP
JavaScript calls the \f[CR]toString\f[R] method automatically when a
\f[CR]Function\f[R] is to be represented as a text value, e.g.\ when a
function is concatenated with a string.
.PP
The \f[CR]toString()\f[R] method will throw a \f[CR]TypeError\f[R]
exception (\[lq]Function.prototype.toString called on incompatible
object\[rq]), if its \f[CR]this\f[R] value object is not a
\f[CR]Function\f[R] object.
.PP
\f[B]Bad\f[R]
.IP
.EX
Function.prototype.toString.call(\[dq]foo\[dq]); \f[I]// throws TypeError\f[R]
.EE
.PP
If the \f[CR]toString()\f[R] method is called on built\-in function
objects, a function created by \f[CR]Function.prototype.bind()\f[R], or
other non\-JavaScript functions, then \f[CR]toString()\f[R] returns a
\f[I]native function string\f[R] which looks like
.IP
.EX
function someName() { [native code] }
.EE
.PP
For intrinsic object methods and functions, \f[CR]someName\f[R] is the
initial name of the function; otherwise its content may be
implementation\-defined, but will always be in property name syntax,
like \f[CR][1 + 1]\f[R], \f[CR]someName\f[R], or \f[CR]1\f[R].
.RS
.PP
\f[B]Note:\f[R] This means using \f[CR]eval()\f[R] on native function
strings is a guaranteed syntax error.
.RE
.PP
If the \f[CR]toString()\f[R] method is called on a function created by
the \f[CR]Function\f[R] constructor, \f[CR]toString()\f[R] returns the
source code of a synthesized function declaration named
\[lq]anonymous\[rq] using the provided parameters and function body.
For example,
\f[CR]Function(\[dq]a\[dq], \[dq]b\[dq], \[dq]return a + b\[dq]).toString()\f[R]
will return:
.IP
.EX
function anonymous(a,b
) {
return a + b
}
.EE
.PP
Since ES2018, the spec requires the return value of
\f[CR]toString()\f[R] to be the exact same source code as it was
declared, including any whitespace and/or comments \[em] or, if the host
doesn\[cq]t have the source code available for some reason, requires
returning a native function string.
Support for this revised behavior can be found in the compatibility
table.
.SH EXAMPLES
.SS Comparing actual source code and toString results
.IP
.EX
\f[B]function\f[R] test(fn) {
  console.log(fn.toString());
}

\f[B]function\f[R] f() {}
\f[B]class\f[R] A {
  a() {}
}
\f[B]function\f[R]* g() {}

test(f); \f[I]// \[dq]function f() {}\[dq]\f[R]
test(A); \f[I]// \[dq]class A { a() {} }\[dq]\f[R]
test(g); \f[I]// \[dq]function* g() {}\[dq]\f[R]
test((a) \f[B]=>\f[R] a); \f[I]// \[dq](a) => a\[dq]\f[R]
test({ a() {} }.a); \f[I]// \[dq]a() {}\[dq]\f[R]
test({ *a() {} }.a); \f[I]// \[dq]*a() {}\[dq]\f[R]
test({ [0]() {} }[0]); \f[I]// \[dq][0]() {}\[dq]\f[R]
test(Object.getOwnPropertyDescriptor({ \f[B]get\f[R] a() {} }, \[dq]a\[dq]).get); \f[I]// \[dq]get a() {}\[dq]\f[R]
test(Object.getOwnPropertyDescriptor({ \f[B]set\f[R] a(x) {} }, \[dq]a\[dq]).set); \f[I]// \[dq]set a(x) {}\[dq]\f[R]
test(Function.prototype.toString); \f[I]// \[dq]function toString() { [native code] }\[dq]\f[R]
test(\f[B]function\f[R] f() {}.bind(0)); \f[I]// \[dq]function () { [native code] }\[dq]\f[R]
test(Function(\[dq]a\[dq], \[dq]b\[dq])); \f[I]// function anonymous(a\[rs]n) {\[rs]nb\[rs]n}\f[R]
.EE
.PP
Note that after the \f[CR]Function.prototype.toString()\f[R] revision,
when \f[CR]toString()\f[R] is called, implementations are never allowed
to synthesize a function\[cq]s source that is not a native function
string.
The method always returns the exact source code used to create the
function \[em] including the getter and setter examples above.
The \f[CR]Function\f[R] constructor itself has the capability of
synthesizing the source code for the function (and is therefore a form
of implicit \f[CR]eval()\f[R]).
.SS Getting source text of a function
It is possible to get the source text of a function by coercing it to a
string \[em] for example, by wrapping it in a template literal:
.IP
.EX
\f[B]function\f[R] foo() {
  \f[B]return\f[R] \[dq]bar\[dq];
}
console.log(\[ga]${foo}\[ga]);
\f[I]// function foo() {\f[R]
\f[I]//   return \[dq]bar\[dq];\f[R]
\f[I]// }\f[R]
.EE
.PP
This source text is \f[I]exact\f[R], including any interspersed comments
(which won\[cq]t be stored by the engine\[cq]s internal representation
otherwise).
.IP
.EX
\f[B]function\f[R] foo \f[I]/* a comment */\f[R]() {
  \f[B]return\f[R] \[dq]bar\[dq];
}
console.log(foo.toString());
\f[I]// function foo /* a comment */() {\f[R]
\f[I]//   return \[dq]bar\[dq];\f[R]
\f[I]// }\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Object.prototype.toString()\f[R]
