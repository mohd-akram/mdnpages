'\" t
.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Array.reduce" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.reduce \- Array.prototype.reduce()
.SH SYNOPSIS
The \f[B]\f[CB]reduce()\f[B]\f[R] method of \f[CR]Array\f[R] instances
executes a user\-supplied \[lq]reducer\[rq] callback function on each
element of the array, in order, passing in the return value from the
calculation on the preceding element.
The final result of running the reducer across all elements of the array
is a single value.
.PP
The first time that the callback is run there is no \[lq]return value of
the previous calculation\[rq].
If supplied, an initial value may be used in its place.
Otherwise the array element at index 0 is used as the initial value and
iteration starts from the next element (index 1 instead of index 0).
.IP
.EX
\f[B]const\f[R] array1 = [1, 2, 3, 4];

\f[I]// 0 + 1 + 2 + 3 + 4\f[R]
\f[B]const\f[R] initialValue = 0;
\f[B]const\f[R] sumWithInitial = array1.reduce(
  (accumulator, currentValue) \f[B]=>\f[R] accumulator + currentValue,
  initialValue,
);

console.log(sumWithInitial);
\f[I]// Expected output: 10\f[R]
.EE
.SH SYNTAX
.IP
.EX
reduce(callbackFn)
reduce(callbackFn, initialValue)
.EE
.SS Parameters
.TP
\f[B]callbackFn\f[R]
A function to execute for each element in the array.
Its return value becomes the value of the \f[CR]accumulator\f[R]
parameter on the next invocation of \f[CR]callbackFn\f[R].
For the last invocation, the return value becomes the return value of
\f[CR]reduce()\f[R].
The function is called with the following arguments:
.RS
.TP
\f[B]accumulator\f[R]
The value resulting from the previous call to \f[CR]callbackFn\f[R].
On the first call, its value is \f[CR]initialValue\f[R] if the latter is
specified; otherwise its value is \f[CR]array[0]\f[R].
.TP
\f[B]currentValue\f[R]
The value of the current element.
On the first call, its value is \f[CR]array[0]\f[R] if
\f[CR]initialValue\f[R] is specified; otherwise its value is
\f[CR]array[1]\f[R].
.TP
\f[B]currentIndex\f[R]
The index position of \f[CR]currentValue\f[R] in the array.
On the first call, its value is \f[CR]0\f[R] if \f[CR]initialValue\f[R]
is specified, otherwise \f[CR]1\f[R].
.TP
\f[B]array\f[R]
The array \f[CR]reduce()\f[R] was called upon.
.RE
.TP
\f[B]initialValue\f[R] \f[I](optional)\f[R]
A value to which \f[CR]accumulator\f[R] is initialized the first time
the callback is called.
If \f[CR]initialValue\f[R] is specified, \f[CR]callbackFn\f[R] starts
executing with the first value in the array as \f[CR]currentValue\f[R].
If \f[CR]initialValue\f[R] is \f[I]not\f[R] specified,
\f[CR]accumulator\f[R] is initialized to the first value in the array,
and \f[CR]callbackFn\f[R] starts executing with the second value in the
array as \f[CR]currentValue\f[R].
In this case, if the array is empty (so that there\[cq]s no first value
to return as \f[CR]accumulator\f[R]), an error is thrown.
.SS Return value
The value that results from running the \[lq]reducer\[rq] callback
function to completion over the entire array.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
Thrown if the array contains no elements and \f[CR]initialValue\f[R] is
not provided.
.SH DESCRIPTION
The \f[CR]reduce()\f[R] method is an iterative method.
It runs a \[lq]reducer\[rq] callback function over all elements in the
array, in ascending\-index order, and accumulates them into a single
value.
Every time, the return value of \f[CR]callbackFn\f[R] is passed into
\f[CR]callbackFn\f[R] again on next invocation as
\f[CR]accumulator\f[R].
The final value of \f[CR]accumulator\f[R] (which is the value returned
from \f[CR]callbackFn\f[R] on the final iteration of the array) becomes
the return value of \f[CR]reduce()\f[R].
Read the iterative methods section for more information about how these
methods work in general.
.PP
\f[CR]callbackFn\f[R] is invoked only for array indexes which have
assigned values.
It is not invoked for empty slots in sparse arrays.
.PP
Unlike other iterative methods, \f[CR]reduce()\f[R] does not accept a
\f[CR]thisArg\f[R] argument.
\f[CR]callbackFn\f[R] is always called with \f[CR]undefined\f[R] as
\f[CR]this\f[R], which gets substituted with \f[CR]globalThis\f[R] if
\f[CR]callbackFn\f[R] is non\-strict.
.PP
\f[CR]reduce()\f[R] is a central concept in \c
.UR https://en.wikipedia.org/wiki/Functional_programming
functional programming
.UE \c
, where it\[cq]s not possible to mutate any value, so in order to
accumulate all values in an array, one must return a new accumulator
value on every iteration.
This convention propagates to JavaScript\[cq]s \f[CR]reduce()\f[R]: you
should use spreading or other copying methods where possible to create
new arrays and objects as the accumulator, rather than mutating the
existing one.
If you decided to mutate the accumulator instead of copying it, remember
to still return the modified object in the callback, or the next
iteration will receive undefined.
However, note that copying the accumulator may in turn lead to increased
memory usage and degraded performance \[em] see When to not use reduce()
for more details.
In such cases, to avoid bad performance and unreadable code, it\[cq]s
better to use a \f[CR]for\f[R] loop instead.
.PP
The \f[CR]reduce()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SS Edge cases
If the array only has one element (regardless of position) and no
\f[CR]initialValue\f[R] is provided, or if \f[CR]initialValue\f[R] is
provided but the array is empty, the solo value will be returned
\f[I]without\f[R] calling \f[CR]callbackFn\f[R].
.PP
If \f[CR]initialValue\f[R] is provided and the array is not empty, then
the reduce method will always invoke the callback function starting at
index 0.
.PP
If \f[CR]initialValue\f[R] is not provided then the reduce method will
act differently for arrays with length larger than 1, equal to 1 and 0,
as shown in the following example:
.IP
.EX
\f[B]const\f[R] getMax = (a, b) \f[B]=>\f[R] Math.max(a, b);

\f[I]// callback is invoked for each element in the array starting at index 0\f[R]
[1, 100].reduce(getMax, 50); \f[I]// 100\f[R]
[50].reduce(getMax, 10); \f[I]// 50\f[R]

\f[I]// callback is invoked once for element at index 1\f[R]
[1, 100].reduce(getMax); \f[I]// 100\f[R]

\f[I]// callback is not invoked\f[R]
[50].reduce(getMax); \f[I]// 50\f[R]
[].reduce(getMax, 1); \f[I]// 1\f[R]

[].reduce(getMax); \f[I]// TypeError\f[R]
.EE
.SH EXAMPLES
.SS How reduce() works without an initial value
The code below shows what happens if we call \f[CR]reduce()\f[R] with an
array and no initial value.
.IP
.EX
\f[B]const\f[R] array = [15, 16, 17, 18, 19];

\f[B]function\f[R] reducer(accumulator, currentValue, index) {
  \f[B]const\f[R] returns = accumulator + currentValue;
  console.log(
    \[ga]accumulator: ${accumulator}, currentValue: ${currentValue}, index: ${index}, returns: ${returns}\[ga],
  );
  \f[B]return\f[R] returns;
}

array.reduce(reducer);
.EE
.PP
The callback would be invoked four times, with the arguments and return
values in each call being as follows:
.PP
.TS
tab(@);
lw(13.5n) lw(16.0n) lw(17.2n) lw(8.6n) lw(14.7n).
T{
T}@T{
\f[CR]accumulator\f[R]
T}@T{
\f[CR]currentValue\f[R]
T}@T{
\f[CR]index\f[R]
T}@T{
Return value
T}
_
T{
First call
T}@T{
\f[CR]15\f[R]
T}@T{
\f[CR]16\f[R]
T}@T{
\f[CR]1\f[R]
T}@T{
\f[CR]31\f[R]
T}
T{
Second call
T}@T{
\f[CR]31\f[R]
T}@T{
\f[CR]17\f[R]
T}@T{
\f[CR]2\f[R]
T}@T{
\f[CR]48\f[R]
T}
T{
Third call
T}@T{
\f[CR]48\f[R]
T}@T{
\f[CR]18\f[R]
T}@T{
\f[CR]3\f[R]
T}@T{
\f[CR]66\f[R]
T}
T{
Fourth call
T}@T{
\f[CR]66\f[R]
T}@T{
\f[CR]19\f[R]
T}@T{
\f[CR]4\f[R]
T}@T{
\f[CR]85\f[R]
T}
.TE
.PP
The \f[CR]array\f[R] parameter never changes through the process \[em]
it\[cq]s always \f[CR][15, 16, 17, 18, 19]\f[R].
The value returned by \f[CR]reduce()\f[R] would be that of the last
callback invocation (\f[CR]85\f[R]).
.SS How reduce() works with an initial value
Here we reduce the same array using the same algorithm, but with an
\f[CR]initialValue\f[R] of \f[CR]10\f[R] passed as the second argument
to \f[CR]reduce()\f[R]:
.IP
.EX
[15, 16, 17, 18, 19].reduce(
  (accumulator, currentValue) \f[B]=>\f[R] accumulator + currentValue,
  10,
);
.EE
.PP
The callback would be invoked five times, with the arguments and return
values in each call being as follows:
.PP
.TS
tab(@);
lw(13.5n) lw(16.0n) lw(17.2n) lw(8.6n) lw(14.7n).
T{
T}@T{
\f[CR]accumulator\f[R]
T}@T{
\f[CR]currentValue\f[R]
T}@T{
\f[CR]index\f[R]
T}@T{
Return value
T}
_
T{
First call
T}@T{
\f[CR]10\f[R]
T}@T{
\f[CR]15\f[R]
T}@T{
\f[CR]0\f[R]
T}@T{
\f[CR]25\f[R]
T}
T{
Second call
T}@T{
\f[CR]25\f[R]
T}@T{
\f[CR]16\f[R]
T}@T{
\f[CR]1\f[R]
T}@T{
\f[CR]41\f[R]
T}
T{
Third call
T}@T{
\f[CR]41\f[R]
T}@T{
\f[CR]17\f[R]
T}@T{
\f[CR]2\f[R]
T}@T{
\f[CR]58\f[R]
T}
T{
Fourth call
T}@T{
\f[CR]58\f[R]
T}@T{
\f[CR]18\f[R]
T}@T{
\f[CR]3\f[R]
T}@T{
\f[CR]76\f[R]
T}
T{
Fifth call
T}@T{
\f[CR]76\f[R]
T}@T{
\f[CR]19\f[R]
T}@T{
\f[CR]4\f[R]
T}@T{
\f[CR]95\f[R]
T}
.TE
.PP
The value returned by \f[CR]reduce()\f[R] in this case would be
\f[CR]95\f[R].
.SS Sum of values in an object array
To sum up the values contained in an array of objects, you
\f[B]must\f[R] supply an \f[CR]initialValue\f[R], so that each item
passes through your function.
.IP
.EX
\f[B]const\f[R] objects = [{ x: 1 }, { x: 2 }, { x: 3 }];
\f[B]const\f[R] sum = objects.reduce(
  (accumulator, currentValue) \f[B]=>\f[R] accumulator + currentValue.x,
  0,
);

console.log(sum); \f[I]// 6\f[R]
.EE
.SS Function sequential piping
The \f[CR]pipe\f[R] function takes a sequence of functions and returns a
new function.
When the new function is called with an argument, the sequence of
functions are called in order, which each one receiving the return value
of the previous function.
.IP
.EX
\f[B]const\f[R] pipe =
  (...functions) \f[B]=>\f[R]
  (initialValue) \f[B]=>\f[R]
    functions.reduce((acc, fn) \f[B]=>\f[R] fn(acc), initialValue);

\f[I]// Building blocks to use for composition\f[R]
\f[B]const\f[R] double = (x) \f[B]=>\f[R] 2 * x;
\f[B]const\f[R] triple = (x) \f[B]=>\f[R] 3 * x;
\f[B]const\f[R] quadruple = (x) \f[B]=>\f[R] 4 * x;

\f[I]// Composed functions for multiplication of specific values\f[R]
\f[B]const\f[R] multiply6 = pipe(double, triple);
\f[B]const\f[R] multiply9 = pipe(triple, triple);
\f[B]const\f[R] multiply16 = pipe(quadruple, quadruple);
\f[B]const\f[R] multiply24 = pipe(double, triple, quadruple);

\f[I]// Usage\f[R]
multiply6(6); \f[I]// 36\f[R]
multiply9(9); \f[I]// 81\f[R]
multiply16(16); \f[I]// 256\f[R]
multiply24(10); \f[I]// 240\f[R]
.EE
.SS Running promises in sequence
Promise sequencing is essentially function piping demonstrated in the
previous section, except done asynchronously.
.IP
.EX
\f[I]// Compare this with pipe: fn(acc) is changed to acc.then(fn),\f[R]
\f[I]// and initialValue is ensured to be a promise\f[R]
\f[B]const\f[R] asyncPipe =
  (...functions) \f[B]=>\f[R]
  (initialValue) \f[B]=>\f[R]
    functions.reduce((acc, fn) \f[B]=>\f[R] acc.then(fn), Promise.resolve(initialValue));

\f[I]// Building blocks to use for composition\f[R]
\f[B]const\f[R] p1 = \f[B]async\f[R] (a) \f[B]=>\f[R] a * 5;
\f[B]const\f[R] p2 = \f[B]async\f[R] (a) \f[B]=>\f[R] a * 2;
\f[I]// The composed functions can also return non\-promises, because the values are\f[R]
\f[I]// all eventually wrapped in promises\f[R]
\f[B]const\f[R] f3 = (a) \f[B]=>\f[R] a * 3;
\f[B]const\f[R] p4 = \f[B]async\f[R] (a) \f[B]=>\f[R] a * 4;

asyncPipe(p1, p2, f3, p4)(10).then(console.log); \f[I]// 1200\f[R]
.EE
.PP
\f[CR]asyncPipe\f[R] can also be implemented using
\f[CR]async\f[R]/\f[CR]await\f[R], which better demonstrates its
similarity with \f[CR]pipe\f[R]:
.IP
.EX
\f[B]const\f[R] asyncPipe =
  (...functions) \f[B]=>\f[R]
  (initialValue) \f[B]=>\f[R]
    functions.reduce(\f[B]async\f[R] (acc, fn) \f[B]=>\f[R] fn(\f[B]await\f[R] acc), initialValue);
.EE
.SS Using reduce() with sparse arrays
\f[CR]reduce()\f[R] skips missing elements in sparse arrays, but it does
not skip \f[CR]undefined\f[R] values.
.IP
.EX
console.log([1, 2, , 4].reduce((a, b) \f[B]=>\f[R] a + b)); \f[I]// 7\f[R]
console.log([1, 2, \f[B]undefined\f[R], 4].reduce((a, b) \f[B]=>\f[R] a + b)); \f[I]// NaN\f[R]
.EE
.SS Calling reduce() on non\-array objects
The \f[CR]reduce()\f[R] method reads the \f[CR]length\f[R] property of
\f[CR]this\f[R] and then accesses each property whose key is a
nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
  3: 99, \f[I]// ignored by reduce() since length is 3\f[R]
};
console.log(Array.prototype.reduce.call(arrayLike, (x, y) \f[B]=>\f[R] x + y));
\f[I]// 9\f[R]
.EE
.SS When to not use reduce()
Multipurpose higher\-order functions like \f[CR]reduce()\f[R] can be
powerful but sometimes difficult to understand, especially for
less\-experienced JavaScript developers.
If code becomes clearer when using other array methods, developers must
weigh the readability tradeoff against the other benefits of using
\f[CR]reduce()\f[R].
.PP
Note that \f[CR]reduce()\f[R] is always equivalent to a
\f[CR]for...of\f[R] loop, except that instead of mutating a variable in
the upper scope, we now return the new value for each iteration:
.IP
.EX
\f[B]const\f[R] val = array.reduce((acc, cur) \f[B]=>\f[R] update(acc, cur), initialValue);

\f[I]// Is equivalent to:\f[R]
\f[B]let\f[R] val = initialValue;
\f[B]for\f[R] (\f[B]const\f[R] cur \f[B]of\f[R] array) {
  val = update(val, cur);
}
.EE
.PP
As previously stated, the reason why people may want to use
\f[CR]reduce()\f[R] is to mimic functional programming practices of
immutable data.
Therefore, developers who uphold the immutability of the accumulator
often copy the entire accumulator for each iteration, like this:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] names = [\[dq]Alice\[dq], \[dq]Bob\[dq], \[dq]Tiff\[dq], \[dq]Bruce\[dq], \[dq]Alice\[dq]];
\f[B]const\f[R] countedNames = names.reduce((allNames, name) \f[B]=>\f[R] {
  \f[B]const\f[R] currCount = Object.hasOwn(allNames, name) ? allNames[name] : 0;
  \f[B]return\f[R] {
    ...allNames,
    [name]: currCount + 1,
  };
}, {});
.EE
.PP
This code is ill\-performing, because each iteration has to copy the
entire \f[CR]allNames\f[R] object, which could be big, depending how
many unique names there are.
This code has worst\-case \f[CR]O(N\[ha]2)\f[R] performance, where
\f[CR]N\f[R] is the length of \f[CR]names\f[R].
.PP
A better alternative is to \f[I]mutate\f[R] the \f[CR]allNames\f[R]
object on each iteration.
However, if \f[CR]allNames\f[R] gets mutated anyway, you may want to
convert the \f[CR]reduce()\f[R] to a \f[CR]for\f[R] loop instead, which
is much clearer:
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] names = [\[dq]Alice\[dq], \[dq]Bob\[dq], \[dq]Tiff\[dq], \[dq]Bruce\[dq], \[dq]Alice\[dq]];
\f[B]const\f[R] countedNames = names.reduce((allNames, name) \f[B]=>\f[R] {
  \f[B]const\f[R] currCount = allNames[name] ?? 0;
  allNames[name] = currCount + 1;
  \f[I]// return allNames, otherwise the next iteration receives undefined\f[R]
  \f[B]return\f[R] allNames;
}, Object.create(\f[B]null\f[R]));
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] names = [\[dq]Alice\[dq], \[dq]Bob\[dq], \[dq]Tiff\[dq], \[dq]Bruce\[dq], \[dq]Alice\[dq]];
\f[B]const\f[R] countedNames = Object.create(\f[B]null\f[R]);
\f[B]for\f[R] (\f[B]const\f[R] name \f[B]of\f[R] names) {
  \f[B]const\f[R] currCount = countedNames[name] ?? 0;
  countedNames[name] = currCount + 1;
}
.EE
.PP
Therefore, if your accumulator is an array or an object and you are
copying the array or object on each iteration, you may accidentally
introduce quadratic complexity into your code, causing performance to
quickly degrade on large data.
This has happened in real\-world code \[em] see for example \c
.UR https://jpcamara.com/2023/03/07/making-tanstack-table.html
Making Tanstack Table 1000x faster with a 1 line change
.UE \c
\&.
.PP
Some of the acceptable use cases of \f[CR]reduce()\f[R] are given above
(most notably, summing an array, promise sequencing, and function
piping).
There are other cases where better alternatives than \f[CR]reduce()\f[R]
exist.
.IP \[bu] 2
Flattening an array of arrays.
Use \f[CR]flat()\f[R] instead.
.RS 2
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] flattened = array.reduce((acc, cur) \f[B]=>\f[R] acc.concat(cur), []);
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] flattened = array.flat();
.EE
.RE
.IP \[bu] 2
Grouping objects by a property.
Use \f[CR]Object.groupBy()\f[R] instead.
.RS 2
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] groups = array.reduce((acc, obj) \f[B]=>\f[R] {
  \f[B]const\f[R] key = obj.name;
  \f[B]const\f[R] curGroup = acc[key] ?? [];
  \f[B]return\f[R] { ...acc, [key]: [...curGroup, obj] };
}, {});
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] groups = Object.groupBy(array, (obj) \f[B]=>\f[R] obj.name);
.EE
.RE
.IP \[bu] 2
Concatenating arrays contained in an array of objects.
Use \f[CR]flatMap()\f[R] instead.
.RS 2
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] friends = [
  { name: \[dq]Anna\[dq], books: [\[dq]Bible\[dq], \[dq]Harry Potter\[dq]] },
  { name: \[dq]Bob\[dq], books: [\[dq]War and peace\[dq], \[dq]Romeo and Juliet\[dq]] },
  { name: \[dq]Alice\[dq], books: [\[dq]The Lord of the Rings\[dq], \[dq]The Shining\[dq]] },
];
\f[B]const\f[R] allBooks = friends.reduce((acc, cur) \f[B]=>\f[R] [...acc, ...cur.books], []);
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] allBooks = friends.flatMap((person) \f[B]=>\f[R] person.books);
.EE
.RE
.IP \[bu] 2
Removing duplicate items in an array.
Use \f[CR]Set\f[R] and \f[CR]Array.from()\f[R] instead.
.RS 2
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] uniqArray = array.reduce(
  (acc, cur) \f[B]=>\f[R] (acc.includes(cur) ? acc : [...acc, cur]),
  [],
);
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] uniqArray = Array.from(\f[B]new\f[R] Set(array));
.EE
.RE
.IP \[bu] 2
Eliminating or adding elements in an array.
Use \f[CR]flatMap()\f[R] instead.
.RS 2
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[I]// Takes an array of numbers and splits perfect squares into its square roots\f[R]
\f[B]const\f[R] roots = array.reduce((acc, cur) \f[B]=>\f[R] {
  \f[B]if\f[R] (cur < 0) \f[B]return\f[R] acc;
  \f[B]const\f[R] root = Math.sqrt(cur);
  \f[B]if\f[R] (Number.isInteger(root)) \f[B]return\f[R] [...acc, root, root];
  \f[B]return\f[R] [...acc, cur];
}, []);
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] roots = array.flatMap((val) \f[B]=>\f[R] {
  \f[B]if\f[R] (val < 0) \f[B]return\f[R] [];
  \f[B]const\f[R] root = Math.sqrt(val);
  \f[B]if\f[R] (Number.isInteger(root)) \f[B]return\f[R] [root, root];
  \f[B]return\f[R] [val];
});
.EE
.PP
If you are only eliminating elements from an array, you also can use
\f[CR]filter()\f[R].
.RE
.IP \[bu] 2
Searching for elements or testing if elements satisfy a condition.
Use \f[CR]find()\f[R] and \f[CR]findIndex()\f[R], or \f[CR]some()\f[R]
and \f[CR]every()\f[R] instead.
These methods have the additional benefit that they return as soon as
the result is certain, without iterating the entire array.
.RS 2
.PP
\f[B]Bad\f[R]
.IP
.EX
\f[B]const\f[R] allEven = array.reduce((acc, cur) \f[B]=>\f[R] acc && cur % 2 === 0, \f[B]true\f[R]);
.EE
.PP
\f[B]Good\f[R]
.IP
.EX
\f[B]const\f[R] allEven = array.every((val) \f[B]=>\f[R] val % 2 === 0);
.EE
.RE
.PP
In cases where \f[CR]reduce()\f[R] is the best choice, documentation and
semantic variable naming can help mitigate readability drawbacks.
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-array
Polyfill of \f[CR]Array.prototype.reduce\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
Indexed collections guide
.IP \[bu] 2
\f[CR]Array\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.map()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.flat()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.flatMap()\f[R]
.IP \[bu] 2
\f[CR]Array.prototype.reduceRight()\f[R]
.IP \[bu] 2
\f[CR]TypedArray.prototype.reduce()\f[R]
.IP \[bu] 2
\f[CR]Object.groupBy()\f[R]
.IP \[bu] 2
\f[CR]Map.groupBy()\f[R]
