.\" Automatically generated by Pandoc 3.4
.\"
.TH "MediaRecorder.error_event" "JS" "March 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
MediaRecorder.error_event \- MediaRecorder: error event
.SH SYNOPSIS
The \f[B]\f[CB]error\f[B]\f[R] event of the \f[CR]MediaRecorder\f[R]
interface is fired when an error occurs: for example because recording
wasn\[cq]t allowed or was attempted using an unsupported codec.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]event\[dq], (event) \f[B]=>\f[R] {});

onevent = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
A \f[CR]MediaRecorderErrorEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]Inherits properties from its parent interface,
\f[CI]Event\f[I]\f[R].
.TP
\f[B]error\f[R] \f[I](read\-only)\f[R]
A \f[CR]DOMException\f[R] containing information about the error that
occurred.
.SH DESCRIPTION
.SS Trigger
A function to be called whenever an error occurs during the
recorder\[cq]s lifetime.
In addition to other general errors that might occur, the following
errors are specifically possible when using the MediaStream Recording
API; to determine which occurred, check the value of
\f[CR]MediaRecorderErrorEvent.error.name\f[R].
.TP
\f[B]SecurityError\f[R]
The \f[CR]MediaStream\f[R] is configured to disallow recording.
This may be the case, for example, with sources obtained using
\f[CR]getUserMedia()\f[R] when the user denies permission to use an
input device.
.TP
\f[B]InvalidModificationError\f[R]
The number of tracks on the stream being recorded has changed.
You can\[cq]t add or remove tracks while recording media.
.TP
\f[B]UnknownError\f[R]
An non\-security related error occurred that cannot otherwise be
categorized.
Recording stops, the \f[CR]MediaRecorder\f[R]\[cq]s \f[CR]state\f[R]
becomes \f[CR]inactive\f[R], one last \f[CR]dataavailable\f[R] event is
sent to the \f[CR]MediaRecorder\f[R] with the remaining received data,
and finally a \f[CR]stop\f[R] event is sent.
.SH EXAMPLES
Using \f[CR]addEventListener()\f[R] to listen for \f[CR]error\f[R]
events:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] record() {
  \f[B]const\f[R] stream = \f[B]await\f[R] navigator.mediaDevices.getUserMedia({ audio: \f[B]true\f[R] });
  \f[B]const\f[R] recorder = \f[B]new\f[R] MediaRecorder(stream);
  recorder.addEventListener(\[dq]error\[dq], (event) \f[B]=>\f[R] {
    console.error(\[ga]error recording stream: ${event.error.name}\[ga]);
  });
  recorder.start();
}

record();
.EE
.PP
The same, but using the \f[CR]onerror\f[R] event handler property:
.IP
.EX
\f[B]async\f[R] \f[B]function\f[R] record() {
  \f[B]const\f[R] stream = \f[B]await\f[R] navigator.mediaDevices.getUserMedia({ audio: \f[B]true\f[R] });
  \f[B]const\f[R] recorder = \f[B]new\f[R] MediaRecorder(stream);
  recorder.onerror = (event) \f[B]=>\f[R] {
    console.error(\[ga]error recording stream: ${event.error.name}\[ga]);
  };
  recorder.start();
}

record();
.EE
.SH SEE ALSO
.IP \[bu] 2
Using the MediaStream Recording API
