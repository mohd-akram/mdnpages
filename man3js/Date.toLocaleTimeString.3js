.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "DATE.TOLOCALETIMESTRING" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date.toLocaleTimeString \- Date.prototype.toLocaleTimeString()
.SH SYNOPSIS
The \f[B]\f[CB]toLocaleTimeString()\f[B]\f[R] method of \f[CR]Date\f[R]
instances returns a string with a language\-sensitive representation of
the time portion of this date in the local timezone.
In implementations with \f[CR]Intl.DateTimeFormat\f[R] API support, this
method delegates to \f[CR]Intl.DateTimeFormat\f[R].
.PP
Every time \f[CR]toLocaleTimeString\f[R] is called, it has to perform a
search in a big database of localization strings, which is potentially
inefficient.
When the method is called many times with the same arguments, it is
better to create a \f[CR]Intl.DateTimeFormat\f[R] object and use its
\f[CR]format()\f[R] method, because a \f[CR]DateTimeFormat\f[R] object
remembers the arguments passed to it and may decide to cache a slice of
the database, so future \f[CR]format\f[R] calls can search for
localization strings within a more constrained context.
.IP
.EX
\f[I]// Depending on timezone, your results will vary\f[R]
\f[B]const\f[R] event = \f[B]new\f[R] Date(\(dqAugust 19, 1975 23:15:30 GMT+00:00\(dq);

console.log(event.toLocaleTimeString(\(dqen\-US\(dq));
\f[I]// Expected output: \(dq1:15:30 AM\(dq\f[R]

console.log(event.toLocaleTimeString(\(dqit\-IT\(dq));
\f[I]// Expected output: \(dq01:15:30\(dq\f[R]

console.log(event.toLocaleTimeString(\(dqar\-EG\(dq));
\f[I]// Expected output: \(dq١٢:١٥:٣٠ ص\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
toLocaleTimeString()
toLocaleTimeString(locales)
toLocaleTimeString(locales, options)
.EE
.SS Parameters
The \f[CR]locales\f[R] and \f[CR]options\f[R] parameters customize the
behavior of the function and let applications specify the language whose
formatting conventions should be used.
.PP
In implementations that support the \f[CR]Intl.DateTimeFormat\f[R] API,
these parameters correspond exactly to the
\f[CR]Intl.DateTimeFormat()\f[R] constructor\(cqs parameters.
Implementations without \f[CR]Intl.DateTimeFormat\f[R] support are asked
to ignore both parameters, making the locale used and the form of the
string returned entirely implementation\-dependent.
.TP
\f[B]locales\f[R] \f[I](optional)\f[R]
A string with a BCP 47 language tag, or an array of such strings.
Corresponds to the \f[CR]locales\f[R] parameter of the
\f[CR]Intl.DateTimeFormat()\f[R] constructor.
.RS
.PP
In implementations without \f[CR]Intl.DateTimeFormat\f[R] support, this
parameter is ignored and the host\(cqs locale is usually used.
.RE
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object adjusting the output format.
Corresponds to the \f[CR]options\f[R] parameter of the
\f[CR]Intl.DateTimeFormat()\f[R] constructor.
If \f[CR]dayPeriod\f[R], \f[CR]hour\f[R], \f[CR]minute\f[R],
\f[CR]second\f[R], and \f[CR]fractionalSecondDigits\f[R] are all
undefined, then \f[CR]hour\f[R], \f[CR]minute\f[R], \f[CR]second\f[R]
will be set to \f[CR]\(dqnumeric\(dq\f[R].
.RS
.PP
In implementations without \f[CR]Intl.DateTimeFormat\f[R] support, this
parameter is ignored.
.RE
.PP
See the \f[CR]Intl.DateTimeFormat()\f[R] constructor for details on
these parameters and how to use them.
.SS Return value
A string representing the time portion of the given date according to
language\-specific conventions.
.PP
In implementations with \f[CR]Intl.DateTimeFormat\f[R], this is
equivalent to
\f[CR]new Intl.DateTimeFormat(locales, options).format(date)\f[R], where
\f[CR]options\f[R] has been normalized as described above.
.RS
.PP
\f[B]Note:\f[R] Most of the time, the formatting returned by
\f[CR]toLocaleTimeString()\f[R] is consistent.
However, the output may vary between implementations, even within the
same locale \(em output variations are by design and allowed by the
specification.
It may also not be what you expect.
For example, the string may use non\-breaking spaces or be surrounded by
bidirectional control characters.
You should not compare the results of \f[CR]toLocaleTimeString()\f[R] to
hardcoded constants.
.RE
.SH EXAMPLES
.SS Using toLocaleTimeString()
Basic use of this method without specifying a \f[CR]locale\f[R] returns
a formatted string in the default locale and with default options.
.IP
.EX
\f[B]const\f[R] date = \f[B]new\f[R] Date(Date.UTC(2012, 11, 12, 3, 0, 0));

\f[I]// toLocaleTimeString() without arguments depends on the implementation,\f[R]
\f[I]// the default locale, and the default time zone\f[R]
console.log(date.toLocaleTimeString());
\f[I]// \(dq7:00:00 PM\(dq if run in en\-US locale with time zone America/Los_Angeles\f[R]
.EE
.SS Checking for support for locales and options parameters
The \f[CR]locales\f[R] and \f[CR]options\f[R] parameters may not be
supported in all implementations, because support for the
internationalization API is optional, and some systems may not have the
necessary data.
For implementations without internationalization support,
\f[CR]toLocaleTimeString()\f[R] always uses the system\(cqs locale,
which may not be what you want.
Because any implementation that supports the \f[CR]locales\f[R] and
\f[CR]options\f[R] parameters must support the \f[CR]Intl\f[R] API, you
can check the existence of the latter for support:
.IP
.EX
\f[B]function\f[R] toLocaleTimeStringSupportsLocales() {
  \f[B]return\f[R] (
    \f[B]typeof\f[R] Intl === \(dqobject\(dq &&
    !!Intl &&
    \f[B]typeof\f[R] Intl.DateTimeFormat === \(dqfunction\(dq
  );
}
.EE
.SS Using locales
This example shows some of the variations in localized time formats.
In order to get the format of the language used in the user interface of
your application, make sure to specify that language (and possibly some
fallback languages) using the \f[CR]locales\f[R] argument:
.IP
.EX
\f[B]const\f[R] date = \f[B]new\f[R] Date(Date.UTC(2012, 11, 20, 3, 0, 0));

\f[I]// formats below assume the local time zone of the locale;\f[R]
\f[I]// America/Los_Angeles for the US\f[R]

\f[I]// US English uses 12\-hour time with AM/PM\f[R]
console.log(date.toLocaleTimeString(\(dqen\-US\(dq));
\f[I]// \(dq7:00:00 PM\(dq\f[R]

\f[I]// British English uses 24\-hour time without AM/PM\f[R]
console.log(date.toLocaleTimeString(\(dqen\-GB\(dq));
\f[I]// \(dq03:00:00\(dq\f[R]

\f[I]// Korean uses 12\-hour time with AM/PM\f[R]
console.log(date.toLocaleTimeString(\(dqko\-KR\(dq));
\f[I]// \(dq오후 12:00:00\(dq\f[R]

\f[I]// Arabic in most Arabic speaking countries uses real Arabic digits\f[R]
console.log(date.toLocaleTimeString(\(dqar\-EG\(dq));
\f[I]// \(dq٧:٠٠:٠٠ م\(dq\f[R]

\f[I]// when requesting a language that may not be supported, such as\f[R]
\f[I]// Balinese, include a fallback language, in this case Indonesian\f[R]
console.log(date.toLocaleTimeString([\(dqban\(dq, \(dqid\(dq]));
\f[I]// \(dq11.00.00\(dq\f[R]
.EE
.SS Using options
The results provided by \f[CR]toLocaleTimeString()\f[R] can be
customized using the \f[CR]options\f[R] parameter:
.IP
.EX
\f[B]const\f[R] date = \f[B]new\f[R] Date(Date.UTC(2012, 11, 20, 3, 0, 0));

\f[I]// An application may want to use UTC and make that visible\f[R]
\f[B]const\f[R] options = { timeZone: \(dqUTC\(dq, timeZoneName: \(dqshort\(dq };
console.log(date.toLocaleTimeString(\(dqen\-US\(dq, options));
\f[I]// \(dq3:00:00 AM GMT\(dq\f[R]

\f[I]// Sometimes even the US needs 24\-hour time\f[R]
console.log(date.toLocaleTimeString(\(dqen\-US\(dq, { hour12: \f[B]false\f[R] }));
\f[I]// \(dq19:00:00\(dq\f[R]

\f[I]// Show only hours and minutes, use options with the default locale \- use an empty array\f[R]
console.log(
  date.toLocaleTimeString([], { hour: \(dq2\-digit\(dq, minute: \(dq2\-digit\(dq }),
);
\f[I]// \(dq20:01\(dq\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]Intl.DateTimeFormat\f[R]
.IP \(bu 2
\f[CR]Date.prototype.toLocaleDateString()\f[R]
.IP \(bu 2
\f[CR]Date.prototype.toLocaleString()\f[R]
.IP \(bu 2
\f[CR]Date.prototype.toTimeString()\f[R]
.IP \(bu 2
\f[CR]Date.prototype.toString()\f[R]
