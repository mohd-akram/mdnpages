.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "OBJECT.ENTRIES" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.entries \- Object.entries()
.SH SYNOPSIS
The \f[B]\f[CB]Object.entries()\f[B]\f[R] static method returns an array
of a given object\(cqs own enumerable string\-keyed property key\-value
pairs.
.IP
.EX
\f[B]const\f[R] object1 = {
  a: \(dqsome string\(dq,
  b: 42,
};

\f[B]for\f[R] (\f[B]const\f[R] [key, value] \f[B]of\f[R] Object.entries(object1)) {
  console.log(\(ga${key}: ${value}\(ga);
}

\f[I]// Expected output:\f[R]
\f[I]// \(dqa: some string\(dq\f[R]
\f[I]// \(dqb: 42\(dq\f[R]
.EE
.SH SYNTAX
.IP
.EX
Object.entries(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
An object.
.SS Return value
An array of the given object\(cqs own enumerable string\-keyed property
key\-value pairs.
Each key\-value pair is an array with two elements: the first element is
the property key (which is always a string), and the second element is
the property value.
.SH DESCRIPTION
\f[CR]Object.entries()\f[R] returns an array whose elements are arrays
corresponding to the enumerable string\-keyed property key\-value pairs
found directly upon \f[CR]object\f[R].
This is the same as iterating with a \f[CR]for...in\f[R] loop, except
that a \f[CR]for...in\f[R] loop enumerates properties in the prototype
chain as well.
The order of the array returned by \f[CR]Object.entries()\f[R] is the
same as that provided by a \f[CR]for...in\f[R] loop.
.PP
If you only need the property keys, use \f[CR]Object.keys()\f[R]
instead.
If you only need the property values, use \f[CR]Object.values()\f[R]
instead.
.SH EXAMPLES
.SS Using Object.entries()
.IP
.EX
\f[B]const\f[R] obj = { foo: \(dqbar\(dq, baz: 42 };
console.log(Object.entries(obj)); \f[I]// [ [\(aqfoo\(aq, \(aqbar\(aq], [\(aqbaz\(aq, 42] ]\f[R]

\f[B]const\f[R] arrayLike = { 0: \(dqa\(dq, 1: \(dqb\(dq, 2: \(dqc\(dq };
console.log(Object.entries(arrayLike)); \f[I]// [ [\(aq0\(aq, \(aqa\(aq], [\(aq1\(aq, \(aqb\(aq], [\(aq2\(aq, \(aqc\(aq] ]\f[R]

\f[B]const\f[R] randomKeyOrder = { 100: \(dqa\(dq, 2: \(dqb\(dq, 7: \(dqc\(dq };
console.log(Object.entries(randomKeyOrder)); \f[I]// [ [\(aq2\(aq, \(aqb\(aq], [\(aq7\(aq, \(aqc\(aq], [\(aq100\(aq, \(aqa\(aq] ]\f[R]

\f[I]// getFoo is a non\-enumerable property\f[R]
\f[B]const\f[R] myObj = Object.create(
  {},
  {
    getFoo: {
      value() {
        \f[B]return\f[R] \f[B]this\f[R].foo;
      },
    },
  },
);
myObj.foo = \(dqbar\(dq;
console.log(Object.entries(myObj)); \f[I]// [ [\(aqfoo\(aq, \(aqbar\(aq] ]\f[R]
.EE
.SS Using Object.entries() on primitives
Non\-object arguments are coerced to objects.
\f[CR]undefined\f[R] and \f[CR]null\f[R] cannot be coerced to objects
and throw a \f[CR]TypeError\f[R] upfront.
Only strings may have own enumerable properties, while all other
primitives return an empty array.
.IP
.EX
\f[I]// Strings have indices as enumerable own properties\f[R]
console.log(Object.entries(\(dqfoo\(dq)); \f[I]// [ [\(aq0\(aq, \(aqf\(aq], [\(aq1\(aq, \(aqo\(aq], [\(aq2\(aq, \(aqo\(aq] ]\f[R]

\f[I]// Other primitives except undefined and null have no own properties\f[R]
console.log(Object.entries(100)); \f[I]// []\f[R]
.EE
.SS Converting an Object to a Map
The \f[CR]Map()\f[R] constructor accepts an iterable of
\f[CR]entries\f[R].
With \f[CR]Object.entries\f[R], you can easily convert from
\f[CR]Object\f[R] to \f[CR]Map\f[R]:
.IP
.EX
\f[B]const\f[R] obj = { foo: \(dqbar\(dq, baz: 42 };
\f[B]const\f[R] map = \f[B]new\f[R] Map(Object.entries(obj));
console.log(map); \f[I]// Map(2) {\(dqfoo\(dq => \(dqbar\(dq, \(dqbaz\(dq => 42}\f[R]
.EE
.SS Iterating through an Object
Using array destructuring, you can iterate through objects easily.
.IP
.EX
\f[I]// Using for...of loop\f[R]
\f[B]const\f[R] obj = { a: 5, b: 7, c: 9 };
\f[B]for\f[R] (\f[B]const\f[R] [key, value] \f[B]of\f[R] Object.entries(obj)) {
  console.log(\(ga${key} ${value}\(ga); \f[I]// \(dqa 5\(dq, \(dqb 7\(dq, \(dqc 9\(dq\f[R]
}

\f[I]// Using array methods\f[R]
Object.entries(obj).forEach(([key, value]) \f[B]=>\f[R] {
  console.log(\(ga${key} ${value}\(ga); \f[I]// \(dqa 5\(dq, \(dqb 7\(dq, \(dqc 9\(dq\f[R]
});
.EE
.SH SEE ALSO
.IP \(bu 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-object
Polyfill of \f[CR]Object.entries\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \(bu 2
\c
.UR https://www.npmjs.com/package/object.entries
es\-shims polyfill of \f[CR]Object.entries\f[R]
.UE \c
.IP \(bu 2
Enumerability and ownership of properties
.IP \(bu 2
\f[CR]Object.keys()\f[R]
.IP \(bu 2
\f[CR]Object.values()\f[R]
.IP \(bu 2
\f[CR]Object.prototype.propertyIsEnumerable()\f[R]
.IP \(bu 2
\f[CR]Object.create()\f[R]
.IP \(bu 2
\f[CR]Object.fromEntries()\f[R]
.IP \(bu 2
\f[CR]Object.getOwnPropertyNames()\f[R]
.IP \(bu 2
\f[CR]Map.prototype.entries()\f[R]
