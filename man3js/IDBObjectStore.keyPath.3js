.\" Automatically generated by Pandoc 3.4
.\"
.TH "IDBObjectStore.keyPath" "JS" "July 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
IDBObjectStore.keyPath \- IDBObjectStore: keyPath property
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]keyPath\f[B]\f[R] read\-only property of the
\f[CR]IDBObjectStore\f[R] interface returns the key path of this object
store.
.PP
If this property is null, the application must provide a key for each
modification operation.
.SH VALUE
Any value type.
.SH EXAMPLES
In the following code snippet, we open a read/write transaction on our
database and add some data to an object store using \f[CR]add()\f[R].
After the object store has been created, we log
\f[CR]objectStore.keyPath\f[R] to the console.
For a full working example, see our \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ app (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
view example live
.UE \c
).
.IP
.EX
\f[I]// Let us open our database\f[R]
\f[B]const\f[R] DBOpenRequest = window.indexedDB.open(\[dq]toDoList\[dq], 4);

DBOpenRequest.onsuccess = (event) \f[B]=>\f[R] {
  note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
    \[dq]Database initialized.\[dq];

  \f[I]// store the result of opening the database in the db variable.\f[R]
  \f[I]// This is used a lot below\f[R]
  db = DBOpenRequest.result;

  \f[I]// Run the addData() function to add the data to the database\f[R]
  addData();
};

\f[B]function\f[R] addData() {
  \f[I]// Create a new object ready to insert into the IDB\f[R]
  \f[B]const\f[R] newItem = [
    {
      taskTitle: \[dq]Walk dog\[dq],
      hours: 19,
      minutes: 30,
      day: 24,
      month: \[dq]December\[dq],
      year: 2013,
      notified: \[dq]no\[dq],
    },
  ];

  \f[I]// open a read/write db transaction, ready for adding the data\f[R]
  \f[B]const\f[R] transaction = db.transaction([\[dq]toDoList\[dq]], \[dq]readwrite\[dq]);

  \f[I]// report on the success of the transaction completing, when everything is done\f[R]
  transaction.oncomplete = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Transaction completed.\[dq];
  };

  transaction.onerror = (event) \f[B]=>\f[R] {
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Transaction not opened due to error. Duplicate items not allowed.\[dq];
  };

  \f[I]// create an object store on the transaction\f[R]
  \f[B]const\f[R] objectStore = transaction.objectStore(\[dq]toDoList\[dq]);
  console.log(objectStore.keyPath);

  \f[I]// Make a request to add our newItem object to the object store\f[R]
  \f[B]const\f[R] objectStoreRequest = objectStore.add(newItem[0]);

  objectStoreRequest.onsuccess = (event) \f[B]=>\f[R] {
    \f[I]// report the success of our request\f[R]
    note.appendChild(document.createElement(\[dq]li\[dq])).textContent =
      \[dq]Request successful.\[dq];
  };
}
.EE
.SH SEE ALSO
.IP \[bu] 2
Using IndexedDB
.IP \[bu] 2
Starting transactions: \f[CR]IDBDatabase\f[R]
.IP \[bu] 2
Using transactions: \f[CR]IDBTransaction\f[R]
.IP \[bu] 2
Setting a range of keys: \f[CR]IDBKeyRange\f[R]
.IP \[bu] 2
Retrieving and making changes to your data: \f[CR]IDBObjectStore\f[R]
.IP \[bu] 2
Using cursors: \f[CR]IDBCursor\f[R]
.IP \[bu] 2
Reference example: \c
.UR https://github.com/mdn/dom-examples/tree/main/to-do-notifications
To\-do Notifications
.UE \c
\ (\c
.UR https://mdn.github.io/dom-examples/to-do-notifications/
View the example live
.UE \c
).
