.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "DataView.getInt8" "JS" "February 11, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DataView.getInt8 \- DataView.prototype.getInt8()
.SH SYNOPSIS
The \f[B]\f[CB]getInt8()\f[B]\f[R] method of \f[CR]DataView\f[R]
instances reads 1 byte at the specified byte offset of this
\f[CR]DataView\f[R] and interprets it as an 8\-bit signed integer.
.IP
.EX
\f[I]// Create an ArrayBuffer with a size in bytes\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(16);

\f[B]const\f[R] view = \f[B]new\f[R] DataView(buffer);
view.setInt8(1, 127); \f[I]// Max signed 8\-bit integer\f[R]

console.log(view.getInt8(1));
\f[I]// Expected output: 127\f[R]
.EE
.SH SYNTAX
.IP
.EX
getInt8(byteOffset)
.EE
.SS Parameters
.TP
\f[B]byteOffset\f[R]
The offset, in bytes, from the start of the view to read the data from.
.SS Return value
An integer from \-128 to 127, inclusive.
.SS Exceptions
.TP
\f[B]RangeError\f[R]
Thrown if the \f[CR]byteOffset\f[R] is set such that it would read
beyond the end of the view.
.SH EXAMPLES
.SS Using getInt8()
.IP
.EX
\f[B]const\f[R] { buffer } = \f[B]new\f[R] Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
\f[B]const\f[R] dataview = \f[B]new\f[R] DataView(buffer);
console.log(dataview.getInt8(1)); \f[I]// 1\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]DataView\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]Int8Array\f[R]
