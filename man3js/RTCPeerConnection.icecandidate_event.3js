.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "RTCPeerConnection.icecandidate_event" "JS" "July 31, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.icecandidate_event \- RTCPeerConnection: icecandidate
event
.SH SYNOPSIS
An \f[B]\f[CB]icecandidate\f[B]\f[R] event is sent to an
\f[CR]RTCPeerConnection\f[R] when:
.IP \[bu] 2
An \f[CR]RTCIceCandidate\f[R] has been identified and added to the local
peer by a call to \f[CR]RTCPeerConnection.setLocalDescription()\f[R],
.IP \[bu] 2
Every \f[CR]RTCIceCandidate\f[R] correlated with a particular username
fragment and password combination (a \f[B]generation\f[R]) has been so
identified and added, and
.IP \[bu] 2
All ICE gathering on all transports is complete.
.PP
In the first two cases, the event handler should transmit the candidate
to the remote peer over the signaling channel so the remote peer can add
it to its set of remote candidates.
.PP
This event is not cancelable and does not bubble.
.SH SYNTAX
Use the event name in methods like \f[CR]addEventListener()\f[R], or set
an event handler property.
.IP
.EX
addEventListener(\[dq]icecandidate\[dq], (event) \f[B]=>\f[R] {});

onicecandidate = (event) \f[B]=>\f[R] {};
.EE
.SH EVENT TYPE
An \f[CR]RTCPeerConnectionIceEvent\f[R].
Inherits from \f[CR]Event\f[R].
.SH EVENT PROPERTIES
\f[I]A \f[CI]RTCPeerConnectionIceEvent\f[I] being an \f[CI]Event\f[I],
this event also implements the following property\f[R].
.TP
\f[B]RTCPeerConnectionIceEvent.candidate\f[R] \f[I](read\-only)\f[R]
Indicates the \f[CR]RTCIceCandidate\f[R] containing the candidate
associated with the event.
This will be the empty string if the event indicates that there are no
further candidates to come in this \f[B]generation\f[R], or
\f[CR]null\f[R] if all ICE gathering on all transports is complete.
.SH DESCRIPTION
There are three reasons why the \f[CR]icecandidate\f[R] event is fired
on an \f[CR]RTCPeerConnection\f[R].
.SS Sharing a new candidate
The majority of \f[CR]icecandidate\f[R] events are fired to indicate
that a new candidate has been gathered.
This candidate needs to be delivered to the remote peer over the
signaling channel your code manages.
.IP
.EX
rtcPeerConnection.onicecandidate = (event) \f[B]=>\f[R] {
  \f[B]if\f[R] (event.candidate !== \f[B]null\f[R]) {
    sendCandidateToRemotePeer(event.candidate);
  } \f[B]else\f[R] {
    \f[I]/* there are no more candidates coming during this negotiation */\f[R]
  }
};
.EE
.PP
The remote peer, upon receiving the candidate, will add the candidate to
its candidate pool by calling \f[CR]addIceCandidate()\f[R], passing in
the \f[CR]candidate\f[R] string you have passed along using the
signaling server.
.SS Indicating the end of a generation of candidates
When an ICE negotiation session runs out of candidates to propose for a
given \f[CR]RTCIceTransport\f[R], it has completed gathering for a
\f[B]generation\f[R] of candidates.
That this has occurred is indicated by an \f[CR]icecandidate\f[R] event
whose \f[CR]candidate\f[R] string is empty (\f[CR]\[dq]\[dq]\f[R]).
.PP
You should deliver this to the remote peer just like any standard
candidate, as described under Sharing a new candidate above.
This ensures that the remote peer is given the end\-of\-candidates
notification as well.
As you see in the code in the previous section, every candidate is sent
to the other peer, including any that might have an empty candidate
string.
Only candidates for which the event\[cq]s \f[CR]candidate\f[R] property
is \f[CR]null\f[R] are not forwarded across the signaling connection.
.PP
The end\-of\-candidates indication is described in \c
.UR https://datatracker.ietf.org/doc/html/draft-ietf-mmusic-trickle-ice-02#section-9.3
section 9.3 of the Trickle ICE draft specification
.UE \c
\ (note that the section number is subject to change as the
specification goes through repeated drafts).
.SS Indicating that ICE gathering is complete
Once all ICE transports have finished gathering candidates and the value
of the \f[CR]RTCPeerConnection\f[R] object\[cq]s
\f[CR]iceGatheringState\f[R] has made the transition to
\f[CR]complete\f[R], an \f[CR]icecandidate\f[R] event is sent with the
value of \f[CR]candidate\f[R] set to \f[CR]null\f[R].
.PP
This signal exists for backward compatibility purposes and does
\f[I]not\f[R] need to be delivered onward to the remote peer (which is
why the code snippet above checks to see if \f[CR]event.candidate\f[R]
is \f[CR]null\f[R] prior to sending the candidate along).
.PP
If you need to perform any special actions when there are no further
candidates expected, you\[cq]re much better off watching the ICE
gathering state by watching for \f[CR]icegatheringstatechange\f[R]
events:
.IP
.EX
pc.addEventListener(\[dq]icegatheringstatechange\[dq], (ev) \f[B]=>\f[R] {
  \f[B]switch\f[R] (pc.iceGatheringState) {
    \f[B]case\f[R] \[dq]new\[dq]:
      \f[I]/* gathering is either just starting or has been reset */\f[R]
      \f[B]break\f[R];
    \f[B]case\f[R] \[dq]gathering\[dq]:
      \f[I]/* gathering has begun or is ongoing */\f[R]
      \f[B]break\f[R];
    \f[B]case\f[R] \[dq]complete\[dq]:
      \f[I]/* gathering has ended */\f[R]
      \f[B]break\f[R];
  }
});
.EE
.PP
As you can see in this example, the \f[CR]icegatheringstatechange\f[R]
event lets you know when the value of the \f[CR]RTCPeerConnection\f[R]
property \f[CR]iceGatheringState\f[R] has been updated.
If that value is now \f[CR]complete\f[R], you know that ICE gathering
has just ended.
.PP
This is a more reliable approach than looking at the individual ICE
messages for one indicating that the ICE session is finished.
.SH EXAMPLES
This example creates a simple handler for the \f[CR]icecandidate\f[R]
event that uses a function called \f[CR]sendMessage()\f[R] to create and
send a reply to the remote peer through the signaling server.
.PP
First, an example using \f[CR]addEventListener()\f[R]:
.IP
.EX
pc.addEventListener(
  \[dq]icecandidate\[dq],
  (ev) \f[B]=>\f[R] {
    \f[B]if\f[R] (ev.candidate !== \f[B]null\f[R]) {
      sendMessage({
        type: \[dq]new\-ice\-candidate\[dq],
        candidate: ev.candidate,
      });
    }
  },
  \f[B]false\f[R],
);
.EE
.PP
You can also set the \f[CR]onicecandidate\f[R] event handler property
directly:
.IP
.EX
pc.onicecandidate = (ev) \f[B]=>\f[R] {
  \f[B]if\f[R] (ev.candidate !== \f[B]null\f[R]) {
    sendMessage({
      type: \[dq]new\-ice\-candidate\[dq],
      candidate: ev.candidate,
    });
  }
};
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
Signaling and video calling
