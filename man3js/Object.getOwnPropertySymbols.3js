.\" Automatically generated by Pandoc 3.4
.\"
.TH "Object.getOwnPropertySymbols" "JS" "June 13, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Object.getOwnPropertySymbols \- Object.getOwnPropertySymbols()
.SH SYNOPSIS
The \f[B]\f[CB]Object.getOwnPropertySymbols()\f[B]\f[R] static method
returns an array of all symbol properties found directly upon a given
object.
.SH SYNTAX
.IP
.EX
Object.getOwnPropertySymbols(obj)
.EE
.SS Parameters
.TP
\f[B]obj\f[R]
The object whose symbol properties are to be returned.
.SS Return value
An array of all symbol properties found directly upon the given object.
.SH DESCRIPTION
Similar to \f[CR]Object.getOwnPropertyNames()\f[R], you can get all
symbol properties of a given object as an array of symbols.
Note that \f[CR]Object.getOwnPropertyNames()\f[R] itself does not
contain the symbol properties of an object and only the string
properties.
.PP
As all objects have no own symbol properties initially,
\f[CR]Object.getOwnPropertySymbols()\f[R] returns an empty array unless
you have set symbol properties on your object.
.SH EXAMPLES
.SS Using Object.getOwnPropertySymbols()
.IP
.EX
\f[B]const\f[R] obj = {};
\f[B]const\f[R] a = Symbol(\[dq]a\[dq]);
\f[B]const\f[R] b = Symbol.for(\[dq]b\[dq]);

obj[a] = \[dq]localSymbol\[dq];
obj[b] = \[dq]globalSymbol\[dq];

\f[B]const\f[R] objectSymbols = Object.getOwnPropertySymbols(obj);

console.log(objectSymbols.length); \f[I]// 2\f[R]
console.log(objectSymbols); \f[I]// [Symbol(a), Symbol(b)]\f[R]
console.log(objectSymbols[0]); \f[I]// Symbol(a)\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#ecmascript-symbol
Polyfill of \f[CR]Object.getOwnPropertySymbols\f[R] in
\f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Object.getOwnPropertyNames()\f[R]
.IP \[bu] 2
\f[CR]Symbol\f[R]
