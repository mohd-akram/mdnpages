'\" t
.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "GPUBUFFER.USAGE" "3JS" "June 18, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
GPUBuffer.usage \- GPUBuffer: usage property
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]usage\f[B]\f[R] read\-only property of the
\f[CR]GPUBuffer\f[R] interface contains the bitwise flags representing
the allowed usages of the \f[CR]GPUBuffer\f[R].
.PP
\f[CR]usage\f[R] is set via the \f[CR]usage\f[R] property in the
descriptor object passed into the originating
\f[CR]GPUDevice.createBuffer()\f[R] call.
.SH VALUE
The bitwise flags representing the original usages set when the
\f[CR]GPUBuffer\f[R] was first created.
The returned number is the sum of decimal values representing the
different flags, as seen in the table below.
.PP
.TS
tab(@);
lw(5.3n) lw(60.4n) lw(1.8n) lw(2.5n).
T{
Bitwise flag
T}@T{
Usage description
T}@T{
Hex equiv.
T}@T{
Decimal equiv.
T}
_
T{
\f[CR]GPUBufferUsage.COPY_SRC\f[R]
T}@T{
The buffer can be used as the source of a copy operation, for example
the source argument of a \f[CR]copyBufferToBuffer()\f[R] call.
T}@T{
0x0004
T}@T{
4
T}
T{
\f[CR]GPUBufferUsage.COPY_DST\f[R]
T}@T{
The buffer can be used as the destination of a copy/write operation, for
example the destination argument of a \f[CR]copyTextureToBuffer()\f[R]
call.
T}@T{
0x0008
T}@T{
8
T}
T{
\f[CR]GPUBufferUsage.INDEX\f[R]
T}@T{
The buffer can be used as an index buffer, for example as the
\f[CR]buffer\f[R] argument passed to \f[CR]setIndexBuffer()\f[R].
T}@T{
0x0010
T}@T{
16
T}
T{
\f[CR]GPUBufferUsage.INDIRECT\f[R]
T}@T{
The buffer can be used to store indirect command arguments, for example
as the \f[CR]indirectBuffer\f[R] argument of a \f[CR]drawIndirect()\f[R]
or \f[CR]dispatchWorkgroupsIndirect()\f[R] call.
T}@T{
0x0100
T}@T{
256
T}
T{
\f[CR]GPUBufferUsage.MAP_READ\f[R]
T}@T{
The buffer can be mapped for reading, for example when calling
\f[CR]mapAsync()\f[R] with a \f[CR]mode\f[R] of
\f[CR]GPUMapMode.READ\f[R].
This flag may only be combined with \f[CR]GPUBufferUsage.COPY_DST\f[R].
T}@T{
0x0001
T}@T{
1
T}
T{
\f[CR]GPUBufferUsage.MAP_WRITE\f[R]
T}@T{
The buffer can be mapped for writing, for example when calling
\f[CR]mapAsync()\f[R] with a \f[CR]mode\f[R] of
\f[CR]GPUMapMode.WRITE\f[R].
This flag may only be combined with \f[CR]GPUBufferUsage.COPY_SRC\f[R].
T}@T{
0x0002
T}@T{
2
T}
T{
\f[CR]GPUBufferUsage.QUERY_RESOLVE\f[R]
T}@T{
The buffer can be used to capture query results, for example as the
destination argument of a \f[CR]resolveQuerySet()\f[R] call.
T}@T{
0x0200
T}@T{
512
T}
T{
\f[CR]GPUBufferUsage.STORAGE\f[R]
T}@T{
The buffer can be used as a storage buffer, for example as a resource in
a bind group entry when creating a \f[CR]GPUBindGroup\f[R] (via
\f[CR]createBindGroup()\f[R]), which adheres to a
\f[CR]GPUBindGroupLayout\f[R] entry with a buffer binding layout
\f[CR]type\f[R] of \f[CR]\(dqstorage\(dq\f[R] or
\f[CR]\(dqread\-only\-storage\(dq\f[R].
T}@T{
0x0080
T}@T{
128
T}
T{
\f[CR]GPUBufferUsage.UNIFORM\f[R]
T}@T{
The buffer can be used as a uniform buffer, for example as a resource in
a bind group entry when creating a \f[CR]GPUBindGroup\f[R] (via
\f[CR]createBindGroup()\f[R]), which adheres to a
\f[CR]GPUBindGroupLayout\f[R] entry with a buffer binding layout
\f[CR]type\f[R] of \f[CR]\(dquniform\(dq\f[R].
T}@T{
0x0040
T}@T{
64
T}
T{
\f[CR]GPUBufferUsage.VERTEX\f[R]
T}@T{
The buffer can be used as a vertex buffer, for example as the
\f[CR]buffer\f[R] argument passed to \f[CR]setVertexBuffer()\f[R].
T}@T{
0x0020
T}@T{
32
T}
.TE
.SH EXAMPLES
.IP
.EX
\f[B]const\f[R] output = device.createBuffer({
  size: BUFFER_SIZE,
  usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,
});

console.log(output.usage); \f[I]// 132\f[R]

\f[B]const\f[R] stagingBuffer = device.createBuffer({
  size: BUFFER_SIZE,
  usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,
});

console.log(stagingBuffer.usage); \f[I]// 9\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
The WebGPU API
