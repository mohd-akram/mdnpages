.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "StorageManager.getDirectory" "JS" "May 3, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
StorageManager.getDirectory \- StorageManager: getDirectory() method
.SH SYNOPSIS
\f[B]Secure context:\f[R] This feature is available only in secure
contexts (HTTPS).
.PP
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]getDirectory()\f[B]\f[R] method of the
\f[CR]StorageManager\f[R] interface is used to obtain a reference to a
\f[CR]FileSystemDirectoryHandle\f[R] object allowing access to a
directory and its contents, stored in the origin private file system
(OPFS).
.SH SYNTAX
.IP
.EX
getDirectory()
.EE
.SS Parameters
None.
.SS Return value
A \f[CR]Promise\f[R] that fulfills with a
\f[CR]FileSystemDirectoryHandle\f[R] object.
.SS Exceptions
.TP
\f[B]SecurityError\f[R] \f[B]DOMException\f[R]
Thrown if the user agent is not able to map the requested directory to
the local OPFS.
.SH EXAMPLES
The following asynchronous event handler function is contained inside a
Web Worker.
On receiving a message from the main thread it:
.IP "1." 3
Gets a \f[CR]FileSystemDirectoryHandle\f[R] representing the root of the
OPFS using \f[CR]getDirectory()\f[R], storing it in the \f[CR]root\f[R]
variable.
.IP "2." 3
Gets a file handle using
\f[CR]FileSystemDirectoryHandle.getFileHandle()\f[R].
.IP "3." 3
Creates a synchronous file access handle using
\f[CR]FileSystemFileHandle.createSyncAccessHandle()\f[R].
.IP "4." 3
Gets the size of the file and creates an \f[CR]ArrayBuffer\f[R] to
contain it.
.IP "5." 3
Reads and writes to the file.
.IP "6." 3
Persists the changes to disk and closes the synchronous access handle.
.IP
.EX
onmessage = \f[B]async\f[R] (e) \f[B]=>\f[R] {
  \f[I]// Retrieve message sent to work from main script\f[R]
  \f[B]const\f[R] message = e.data;

  \f[I]// Get handle to draft file\f[R]
  \f[B]const\f[R] root = \f[B]await\f[R] navigator.storage.getDirectory();
  \f[B]const\f[R] draftHandle = \f[B]await\f[R] root.getFileHandle(\[dq]draft.txt\[dq], { create: \f[B]true\f[R] });
  \f[I]// Get sync access handle\f[R]
  \f[B]const\f[R] accessHandle = \f[B]await\f[R] draftHandle.createSyncAccessHandle();

  \f[I]// Get size of the file.\f[R]
  \f[B]const\f[R] fileSize = accessHandle.getSize();
  \f[I]// Read file content to a buffer.\f[R]
  \f[B]const\f[R] buffer = \f[B]new\f[R] DataView(\f[B]new\f[R] ArrayBuffer(fileSize));
  \f[B]const\f[R] readBuffer = accessHandle.read(buffer, { at: 0 });

  \f[I]// Write the message to the end of the file.\f[R]
  \f[B]const\f[R] encoder = \f[B]new\f[R] TextEncoder();
  \f[B]const\f[R] encodedMessage = encoder.encode(message);
  \f[B]const\f[R] writeBuffer = accessHandle.write(encodedMessage, { at: readBuffer });

  \f[I]// Persist changes to disk.\f[R]
  accessHandle.flush();

  \f[I]// Always close FileSystemSyncAccessHandle if done.\f[R]
  accessHandle.close();
};
.EE
.RS
.PP
\f[B]Note:\f[R] In earlier versions of the spec, \f[CR]close()\f[R],
\f[CR]flush()\f[R], \f[CR]getSize()\f[R], and \f[CR]truncate()\f[R] were
wrongly specified as asynchronous methods, and older versions of some
browsers implement them in this way.
However, all current browsers that support these methods implement them
as synchronous methods.
.RE
.SH SEE ALSO
.IP \[bu] 2
\f[CR]StorageManager\f[R]
.IP \[bu] 2
\f[CR]Navigator.storage\f[R]
.IP \[bu] 2
\f[CR]WorkerNavigator.storage\f[R]
.IP \[bu] 2
\f[CR]FileSystemDirectoryHandle\f[R]
