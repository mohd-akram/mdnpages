'\" t
.\" Automatically generated by Pandoc 3.2.1
.\"
.TH "DOMMatrixReadOnly" "JS" "July 26, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
DOMMatrixReadOnly \- DOMMatrixReadOnly
.SH SYNOPSIS
The \f[B]\f[CB]DOMMatrixReadOnly\f[B]\f[R] interface represents a
read\-only 4×4 matrix, suitable for 2D and 3D operations.
The \f[CR]DOMMatrix\f[R] interface \[em] which is based upon
\f[CR]DOMMatrixReadOnly\f[R]\[em]adds \c
.UR https://en.wikipedia.org/wiki/Immutable_object
mutability
.UE \c
, allowing you to alter the matrix after creating it.
.PP
This interface should be available inside web workers, though some
implementations doesn\[cq]t allow it yet.
.SH CONSTRUCTOR
.TP
\f[B]DOMMatrixReadOnly()\f[R]
Creates a new \f[CR]DOMMatrixReadOnly\f[R] object.
.SH INSTANCE PROPERTIES
\f[I]This interface doesn\[cq]t inherit any properties.\f[R]
.TP
\f[B]is2D\f[R] \f[I](read\-only)\f[R]
A Boolean flag whose value is \f[CR]true\f[R] if the matrix was
initialized as a 2D matrix.
If \f[CR]false\f[R], the matrix is 3D.
.TP
\f[B]isIdentity\f[R] \f[I](read\-only)\f[R]
A Boolean whose value is \f[CR]true\f[R] if the matrix is the \c
.UR https://en.wikipedia.org/wiki/Identity_matrix
identity matrix
.UE \c
\&.
The identity matrix is one in which every value is \f[CR]0\f[R]
\f[I]except\f[R] those on the main diagonal from top\-left to
bottom\-right corner (in other words, where the offsets in each
direction are equal).
.TP
\f[B]m11\f[R], \f[B]m12\f[R], \f[B]m13\f[R], \f[B]m14\f[R], \f[B]m21\f[R], \f[B]m22\f[R], \f[B]m23\f[R], \f[B]m24\f[R], \f[B]m31\f[R], \f[B]m32\f[R], \f[B]m33\f[R], \f[B]m34\f[R], \f[B]m41\f[R], \f[B]m42\f[R], \f[B]m43\f[R], \f[B]m44\f[R]
Double\-precision floating\-point values representing each component of
a 4×4 matrix, where \f[CR]m11\f[R] through \f[CR]m14\f[R] are the first
column, \f[CR]m21\f[R] through \f[CR]m24\f[R] are the second column, and
so forth.
.TP
\f[B]a\f[R], \f[B]b\f[R], \f[B]c\f[R], \f[B]d\f[R], \f[B]e\f[R], \f[B]f\f[R]
Double\-precision floating\-point values representing the components of
a 4×4 matrix which are required in order to perform 2D rotations and
translations.
These are aliases for specific components of a 4×4 matrix, as shown
below.
.RS
.PP
.TS
tab(@);
l l.
T{
2D
T}@T{
3D equivalent
T}
_
T{
\f[CR]a\f[R]
T}@T{
\f[CR]m11\f[R]
T}
T{
\f[CR]b\f[R]
T}@T{
\f[CR]m12\f[R]
T}
T{
\f[CR]c\f[R]
T}@T{
\f[CR]m21\f[R]
T}
T{
\f[CR]d\f[R]
T}@T{
\f[CR]m22\f[R]
T}
T{
\f[CR]e\f[R]
T}@T{
\f[CR]m41\f[R]
T}
T{
\f[CR]f\f[R]
T}@T{
\f[CR]m42\f[R]
T}
.TE
.RE
.SH INSTANCE METHODS
\f[I]This interface doesn\[cq]t inherit any methods.
None of the following methods alter the original matrix.\f[R]
.TP
\f[B]DOMMatrixReadOnly.flipX()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by flipping the source matrix
around its X\-axis.
This is equivalent to multiplying the matrix by
\f[CR]DOMMatrix(\-1, 0, 0, 1, 0, 0)\f[R].
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.flipY()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by flipping the source matrix
around its Y\-axis.
This is equivalent to multiplying the matrix by
\f[CR]DOMMatrix(1, 0, 0, \-1, 0, 0)\f[R].
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.inverse()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by inverting the source
matrix.
If the matrix cannot be inverted, the new matrix\[cq]s components are
all set to \f[CR]NaN\f[R] and its \f[CR]is2D\f[R] property is set to
\f[CR]false\f[R].
The original matrix is not altered.
.TP
\f[B]DOMMatrixReadOnly.multiply()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by computing the dot product
of the source matrix and the specified matrix: \f[CR]A⋅B\f[R].
If no matrix is specified as the multiplier, the matrix is multiplied by
a matrix in which every element is \f[CR]0\f[R] \f[I]except\f[R] the
bottom\-right corner and the element immediately above and to its left:
\f[CR]m33\f[R] and \f[CR]m34\f[R].
These have the default value of \f[CR]1\f[R].
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.rotateAxisAngle()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by rotating the source matrix
by the given angle around the specified vector.
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.rotate()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by rotating the source matrix
around each of its axes by the specified number of degrees.
The original matrix is not altered.
.TP
\f[B]DOMMatrixReadOnly.rotateFromVector()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by rotating the source matrix
by the angle between the specified vector and \f[CR](1, 0)\f[R].
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.scale()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by scaling the source matrix
by the amount specified for each axis, centered on the given origin.
By default, the X and Z axes are scaled by \f[CR]1\f[R] and the Y axis
has no default scaling value.
The default origin is \f[CR](0, 0, 0)\f[R].
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.scale3d()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by scaling the source 3D
matrix by the given factor along all its axes, centered on the specified
origin point.
The default origin is \f[CR](0, 0, 0)\f[R].
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.scaleNonUniform()\f[R] \f[I](deprecated)\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by applying the specified
scaling on the X, Y, and Z axes, centered at the given origin.
By default, the Y and Z axes\[cq] scaling factors are both \f[CR]1\f[R],
but the scaling factor for X must be specified.
The default origin is \f[CR](0, 0, 0)\f[R].
The original matrix is not changed.
.TP
\f[B]DOMMatrixReadOnly.skewX()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by applying the specified
skew transformation to the source matrix along its X\-axis.
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.skewY()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] created by applying the specified
skew transformation to the source matrix along its Y\-axis.
The original matrix is not modified.
.TP
\f[B]DOMMatrixReadOnly.toFloat32Array()\f[R]
Returns a new \f[CR]Float32Array\f[R] containing all 16 elements
(\f[CR]m11\f[R], \f[CR]m12\f[R], \f[CR]m13\f[R], \f[CR]m14\f[R],
\f[CR]m21\f[R], \f[CR]m22\f[R], \f[CR]m23\f[R], \f[CR]m24\f[R],
\f[CR]m31\f[R], \f[CR]m32\f[R], \f[CR]m33\f[R], \f[CR]m34\f[R],
\f[CR]m41\f[R], \f[CR]m42\f[R], \f[CR]m43\f[R], \f[CR]m44\f[R]) which
comprise the matrix.
The elements are stored into the array as single\-precision
floating\-point numbers in column\-major (colexographical access, or
\[lq]colex\[rq]) order.
(In other words, down the first column from top to bottom, then the
second column, and so forth.)
.TP
\f[B]DOMMatrixReadOnly.toFloat64Array()\f[R]
Returns a new \f[CR]Float64Array\f[R] containing all 16 elements
(\f[CR]m11\f[R], \f[CR]m12\f[R], \f[CR]m13\f[R], \f[CR]m14\f[R],
\f[CR]m21\f[R], \f[CR]m22\f[R], \f[CR]m23\f[R], \f[CR]m24\f[R],
\f[CR]m31\f[R], \f[CR]m32\f[R], \f[CR]m33\f[R], \f[CR]m34\f[R],
\f[CR]m41\f[R], \f[CR]m42\f[R], \f[CR]m43\f[R], \f[CR]m44\f[R]) which
comprise the matrix.
The elements are stored into the array as double\-precision
floating\-point numbers in column\-major (colexographical access, or
\[lq]colex\[rq]) order.
(In other words, down the first column from top to bottom, then the
second column, and so forth.)
.TP
\f[B]DOMMatrixReadOnly.toJSON()\f[R]
Returns a JSON representation of the \f[CR]DOMMatrixReadOnly\f[R]
object.
.TP
\f[B]DOMMatrixReadOnly.toString()\f[R]
Creates and returns a string which contains a string representation of
the matrix in CSS matrix syntax, using the appropriate CSS matrix
notation.
See the \f[CR]matrix()\f[R] CSS function for details on this syntax.
.RS
.PP
For a 2D matrix, the elements \f[CR]a\f[R] through \f[CR]f\f[R] are
listed, for a total of six values and the form
\f[CR]matrix(a, b, c, d, e, f)\f[R].
.PP
For a 3D matrix, the returned string contains all 16 elements and takes
the form
\f[CR]matrix3d(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44)\f[R].
See the CSS \f[CR]matrix3d()\f[R] function for details on the 3D
notation\[cq]s syntax.
.PP
Throws an \f[CR]InvalidStateError\f[R] exception if any of the elements
in the matrix are non\-finite (even if, in the case of a 2D matrix, the
non\-finite values are in elements not used by the 2D matrix
representation).
.RE
.TP
\f[B]DOMMatrixReadOnly.transformPoint()\f[R]
Transforms the specified point using the matrix, returning a new
\f[CR]DOMPoint\f[R] object containing the transformed point.
Neither the matrix nor the original point are altered.
.TP
\f[B]DOMMatrixReadOnly.translate()\f[R]
Returns a new \f[CR]DOMMatrix\f[R] containing a matrix calculated by
translating the source matrix using the specified vector.
By default, the vector is \f[CR](0, 0, 0)\f[R].
The original matrix is not changed.
.SH STATIC METHODS
.TP
\f[B]fromFloat32Array()\f[R]
Creates a new mutable \f[CR]DOMMatrix\f[R] object given an array of
single\-precision (32\-bit) floating\-point values.
If the array has six values, the result is a 2D matrix; if the array has
16 values, the result is a 3D matrix.
Otherwise, a \f[CR]TypeError\f[R] exception is thrown.
.TP
\f[B]fromFloat64Array()\f[R]
Creates a new mutable \f[CR]DOMMatrix\f[R] object given an array of
double\-precision (64\-bit) floating\-point values.
If the array has six values, the result is a 2D matrix; if the array has
16 values, the result is a 3D matrix.
Otherwise, a \f[CR]TypeError\f[R] exception is thrown.
.TP
\f[B]fromMatrix()\f[R]
Creates a new mutable \f[CR]DOMMatrix\f[R] object given an existing
matrix or an object which provides the values for its properties.
If no matrix is specified, the matrix is initialized with every element
set to \f[CR]0\f[R] \f[I]except\f[R] the bottom\-right corner and the
element immediately above and to its left: \f[CR]m33\f[R] and
\f[CR]m34\f[R].
These have the default value of \f[CR]1\f[R].
.SH SEE ALSO
.IP \[bu] 2
The mutable matrix type, \f[CR]DOMMatrix\f[R], which is based on this
one.
.IP \[bu] 2
The CSS \f[CR]matrix()\f[R] and \f[CR]matrix3d()\f[R] functional
notation that can be generated from this interface to be used in a CSS
\f[CR]transform\f[R].
