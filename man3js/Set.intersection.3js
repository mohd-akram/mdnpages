.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "Set.intersection" "JS" "July 29, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Set.intersection \- Set.prototype.intersection()
.SH SYNOPSIS
The \f[B]\f[CB]intersection()\f[B]\f[R] method of \f[CR]Set\f[R]
instances takes a set and returns a new set containing elements in both
this set and the given set.
.SH SYNTAX
.IP
.EX
intersection(other)
.EE
.SS Parameters
.TP
\f[B]other\f[R]
A \f[CR]Set\f[R] object, or set\-like object.
.SS Return value
A new \f[CR]Set\f[R] object containing elements in both this set and the
\f[CR]other\f[R] set.
.SH DESCRIPTION
In mathematical notation, \f[I]intersection\f[R] is defined as:
.PP
\ A∩B={x∊A∣x∊B}AB = \[rs]{xAxB\[rs]} 
.PP
And using Venn diagram:
[IMAGE: A Venn diagram where two circles overlap.
The intersection of A and B is the part where they overlap.]
A Venn diagram where two circles overlap.
The intersection of A and B is the part where they overlap.
.PP
\f[CR]intersection()\f[R] accepts set\-like objects as the
\f[CR]other\f[R] parameter.
It requires \f[CR]this\f[R] to be an actual \f[CR]Set\f[R] instance,
because it directly retrieves the underlying data stored in
\f[CR]this\f[R] without invoking any user code.
Then, its behavior depends on the sizes of \f[CR]this\f[R] and
\f[CR]other\f[R]:
.IP \[bu] 2
If there are more elements in \f[CR]this\f[R] than
\f[CR]other.size\f[R], then it iterates over \f[CR]other\f[R] by calling
its \f[CR]keys()\f[R] method, and constructs a new set with all elements
produced that are also present in \f[CR]this\f[R].
.IP \[bu] 2
Otherwise, it iterates over the elements in \f[CR]this\f[R], and
constructs a new set with all elements \f[CR]e\f[R] in \f[CR]this\f[R]
that cause \f[CR]other.has(e)\f[R] to return a truthy value.
.PP
Because of this implementation, the efficiency of
\f[CR]intersection()\f[R] mostly depends on the size of the smaller set
between \f[CR]this\f[R] and \f[CR]other\f[R] (assuming sets can be
accessed in sublinear time).
The order of elements in the returned set is the same as that of the
smaller of \f[CR]this\f[R] and \f[CR]other\f[R].
.SH EXAMPLES
.SS Using intersection()
The following example computes the intersection between the set of odd
numbers (<10) and the set of perfect squares (<10).
The result is the set of odd numbers that are perfect squares.
.IP
.EX
\f[B]const\f[R] odds = \f[B]new\f[R] Set([1, 3, 5, 7, 9]);
\f[B]const\f[R] squares = \f[B]new\f[R] Set([1, 4, 9]);
console.log(odds.intersection(squares)); \f[I]// Set(2) { 1, 9 }\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
\c
.UR https://github.com/zloirock/core-js#new-set-methods
Polyfill of \f[CR]Set.prototype.intersection\f[R] in \f[CR]core\-js\f[R]
.UE \c
.IP \[bu] 2
\f[CR]Set.prototype.difference()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.isDisjointFrom()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.isSubsetOf()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.isSupersetOf()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.symmetricDifference()\f[R]
.IP \[bu] 2
\f[CR]Set.prototype.union()\f[R]
