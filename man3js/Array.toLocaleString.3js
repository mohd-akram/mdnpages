.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "ARRAY.TOLOCALESTRING" "3JS" "June 20, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Array.toLocaleString \- Array.prototype.toLocaleString()
.SH SYNOPSIS
The \f[B]\f[CB]toLocaleString()\f[B]\f[R] method of \f[CR]Array\f[R]
instances returns a string representing the elements of the array.
The elements are converted to strings using their
\f[CR]toLocaleString\f[R] methods and these strings are separated by a
locale\-specific string (such as a comma \(lq,\(rq).
.IP
.EX
\f[B]const\f[R] array1 = [1, \(dqa\(dq, \f[B]new\f[R] Date(\(dq21 Dec 1997 14:12:00 UTC\(dq)];
\f[B]const\f[R] localeString = array1.toLocaleString(\(dqen\(dq, { timeZone: \(dqUTC\(dq });

console.log(localeString);
\f[I]// Expected output: \(dq1,a,12/21/1997, 2:12:00 PM\(dq,\f[R]
\f[I]// This assumes \(dqen\(dq locale and UTC timezone \- your results may vary\f[R]
.EE
.SH SYNTAX
.IP
.EX
toLocaleString()
toLocaleString(locales)
toLocaleString(locales, options)
.EE
.SS Parameters
.TP
\f[B]locales\f[R] \f[I](optional)\f[R]
A string with a BCP 47 language tag, or an array of such strings.
For the general form and interpretation of the \f[CR]locales\f[R]
argument, see the parameter description on the \f[CR]Intl\f[R] main
page.
.TP
\f[B]options\f[R] \f[I](optional)\f[R]
An object with configuration properties.
What you can pass here depends on what elements are being converted.
For example, for numbers, see
\f[CR]Number.prototype.toLocaleString()\f[R].
.SS Return value
A string representing the elements of the array.
.SH DESCRIPTION
The \f[CR]Array.prototype.toLocaleString\f[R] method traverses its
content, calling the \f[CR]toLocaleString\f[R] method of every element
with the \f[CR]locales\f[R] and \f[CR]options\f[R] parameters provided,
and concatenates them with an implementation\-defined separator (such as
a comma \(lq,\(rq).
.RS
.PP
\f[B]Note:\f[R] The \f[CR]locales\f[R] or \f[CR]options\f[R] arguments
do not control the separator used between array elements; they are
simply passed to the \f[CR]toLocaleString()\f[R] method of each element.
The actual separator (usually a comma) depends solely on the host\(cqs
current locale.
If you expect localized list formatting, consider using
\f[CR]Intl.ListFormat\f[R] instead.
.RE
.PP
If an element is \f[CR]undefined\f[R], \f[CR]null\f[R], it is converted
to an empty string instead of the string \f[CR]\(dqnull\(dq\f[R] or
\f[CR]\(dqundefined\(dq\f[R].
.PP
When used on sparse arrays, the \f[CR]toLocaleString()\f[R] method
iterates empty slots as if they have the value \f[CR]undefined\f[R].
.PP
The \f[CR]toLocaleString()\f[R] method is generic.
It only expects the \f[CR]this\f[R] value to have a \f[CR]length\f[R]
property and integer\-keyed properties.
.SH EXAMPLES
.SS Using locales and options
The elements of the array are converted to strings using their
\f[CR]toLocaleString\f[R] methods.
For example, this snippet implicitly calls the
\f[CR]Number.prototype.toLocaleString()\f[R] method to display the
currency for the strings and numbers in the \f[CR]prices\f[R] array:
.IP
.EX
\f[B]const\f[R] prices = [\(dq￥7\(dq, 500, 8123, 12];
prices.toLocaleString(\(dqja\-JP\(dq, { style: \(dqcurrency\(dq, currency: \(dqJPY\(dq });

\f[I]// \(dq￥7,￥500,￥8,123,￥12\(dq\f[R]
.EE
.SS List separators
The list separator is not affected by the \f[CR]locales\f[R] parameter.
To configure it, use \f[CR]Intl.ListFormat\f[R] instead.
.IP
.EX
\f[B]const\f[R] nums = [8888, 9999];
console.log(nums.toLocaleString(\(dqzh\(dq)); \f[I]// \(dq8,888,9,999\(dq\f[R]

\f[B]const\f[R] formatter = \f[B]new\f[R] Intl.ListFormat(\(dqzh\(dq, {
  type: \(dqconjunction\(dq,
  style: \(dqnarrow\(dq,
});
console.log(formatter.format(nums.map((x) \f[B]=>\f[R] x.toLocaleString(\(dqzh\(dq))));
\f[I]// \(dq8,888、9,999\(dq\f[R]
.EE
.SS Using toLocaleString() on sparse arrays
\f[CR]toLocaleString()\f[R] treats empty slots the same as
\f[CR]undefined\f[R] and produces an extra separator:
.IP
.EX
console.log([1, , 3].toLocaleString()); \f[I]// \(aq1,,3\(aq\f[R]
.EE
.SS Calling toLocaleString() on non\-array objects
The \f[CR]toLocaleString()\f[R] method reads the \f[CR]length\f[R]
property of \f[CR]this\f[R] and then accesses each property whose key is
a nonnegative integer less than \f[CR]length\f[R].
.IP
.EX
\f[B]const\f[R] arrayLike = {
  length: 3,
  0: 1,
  1: 2,
  2: 3,
  3: 4, \f[I]// ignored by toLocaleString() since length is 3\f[R]
};
console.log(Array.prototype.toLocaleString.call(arrayLike));
\f[I]// 1,2,3\f[R]
.EE
.SH SEE ALSO
.IP \(bu 2
Indexed collections guide
.IP \(bu 2
\f[CR]Array\f[R]
.IP \(bu 2
\f[CR]Array.prototype.toString()\f[R]
.IP \(bu 2
\f[CR]TypedArray.prototype.toLocaleString()\f[R]
.IP \(bu 2
\f[CR]Intl\f[R]
.IP \(bu 2
\f[CR]Intl.ListFormat\f[R]
.IP \(bu 2
\f[CR]Object.prototype.toLocaleString()\f[R]
.IP \(bu 2
\f[CR]Number.prototype.toLocaleString()\f[R]
.IP \(bu 2
\f[CR]Temporal.PlainDate.prototype.toLocaleString()\f[R]
