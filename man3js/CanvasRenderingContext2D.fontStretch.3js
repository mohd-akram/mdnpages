.\" Automatically generated by Pandoc 3.1.12.3
.\"
.TH "CanvasRenderingContext2D.fontStretch" "JS" "November 10, 2023" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.fontStretch \- CanvasRenderingContext2D:
fontStretch property
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.fontStretch\f[B]\f[R] property
of the Canvas API specifies how the font may be expanded or condensed
when drawing text.
.PP
The property corresponds to the \f[CR]font\-stretch\f[R] CSS property
when used with keywords (percentage values are not supported).
.SH VALUE
The font stretch value as a string.
This is one of: \f[CR]ultra\-condensed\f[R],
\f[CR]extra\-condensed\f[R], \f[CR]condensed\f[R],
\f[CR]semi\-condensed\f[R], \f[CR]normal\f[R] (default),
\f[CR]semi\-expanded\f[R], \f[CR]expanded\f[R],
\f[CR]extra\-expanded\f[R], \f[CR]ultra\-expanded\f[R].
.PP
The property can be used to get or set the font stretch value.
.SH EXAMPLES
In this example we display the text \[lq]Hello World\[rq] using each of
the supported values of the \f[CR]fontStretch\f[R] property.
The stretch value is also displayed for each case by reading the
property.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\[dq]canvas\[dq] width=\[dq]700\[dq] height=\[dq]310\[dq]></\f[B]canvas\f[R]>
.EE
.SS JavaScript
First we get the canvas declared in the HTML file and use it to get the
\f[CR]CanvasRenderingContext2D\f[R] that will later be used for drawing
text.
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\[dq]canvas\[dq]);
\f[B]const\f[R] ctx = canvas.getContext(\[dq]2d\[dq]);
.EE
.PP
The next step in the example is to load a variable font that can be
varied in the width axis.
This is needed because \f[CR]fontStretch\f[R] can only stretch a font
that contains information about how glyphs are drawn when stretched
\[em] otherwise text will be drawn using the closest available font
stretch value for the font, which will often be the normal width.
.PP
In this case we use \f[CR]FontFace\f[R] to define a font face for the \c
.UR https://fonts.google.com/specimen/Inconsolata/tester
Inconsolata
.UE \c
\ Google Font, which supports font widths from 50% to 200% (allowing us
to demonstrate \f[CR]fontStretch\f[R] values from
\f[CR]ultra\-condensed\f[R] to \f[CR]ultra\-expanded\f[R]).
We then add this to the document\[cq]s \f[CR]FontFaceSet\f[R]
(\f[CR]document.fonts\f[R]) so that it can be used for drawing.
.IP
.EX
\f[B]const\f[R] fontFile = \f[B]new\f[R] FontFace(
  \[dq]Inconsolata\[dq],
  \[aq]url(https://fonts.gstatic.com/s/inconsolata/v31/QlddNThLqRwH\-OJ1UHjlKENVzlm\-WkL3GZQmAwPyya15.woff2) format(\[dq]woff2\[dq])\[aq],
  { stretch: \[dq]50% 200%\[dq] },
);

document.fonts.add(fontFile);
.EE
.PP
The code below then calls \f[CR]FontFaceSet.load()\f[R] to fetch and
load the Google Font.
Note that this call sets the size of the font that is needed, and
returns a promise that resolves when the font has been loaded.
.PP
We then assign the font face we downloaded to the context, and use the
context to draw text to the canvas at each of the keyword stretch
levels.
Note that again the size of the desired font is specified (this does not
have to match the loaded font size).
.IP
.EX
document.fonts.load(\[dq]30px Inconsolata\[dq]).then(
  () \f[B]=>\f[R] {
    ctx.font = \[dq]30px \[aq]Inconsolata\[aq]\[dq];
    \f[I]// Default (normal)\f[R]
    ctx.fillText(\[ga]Hello world (default: ${ctx.fontStretch})\[ga], 5, 20);

    ctx.fontStretch = \[dq]ultra\-condensed\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 50);

    ctx.fontStretch = \[dq]extra\-condensed\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 80);

    ctx.fontStretch = \[dq]condensed\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 110);

    ctx.fontStretch = \[dq]semi\-condensed\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 140);

    ctx.fontStretch = \[dq]extra\-condensed\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 170);

    ctx.fontStretch = \[dq]semi\-expanded\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 200);

    ctx.fontStretch = \[dq]expanded\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 230);

    ctx.fontStretch = \[dq]extra\-expanded\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 260);

    ctx.fontStretch = \[dq]ultra\-expanded\[dq];
    ctx.fillText(\[ga]Hello world (${ctx.fontStretch})\[ga], 5, 290);
  },
  (err) \f[B]=>\f[R] {
    console.error(err);
  },
);
.EE
.SS Result
