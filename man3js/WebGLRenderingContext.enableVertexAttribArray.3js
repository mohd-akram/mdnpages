.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "WEBGLRENDERINGCONTEXT.ENABLEVERTEXATTRIBARRAY" "3JS" "September 28, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
WebGLRenderingContext.enableVertexAttribArray \- WebGLRenderingContext:
enableVertexAttribArray() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[CR]WebGLRenderingContext\f[R] method
\f[B]\f[CB]enableVertexAttribArray()\f[B]\f[R], part of the WebGL API,
turns on the generic vertex attribute array at the specified index into
the list of attribute arrays.
.RS
.PP
\f[B]Note:\f[R] You can disable the attribute array by calling
\f[CR]disableVertexAttribArray()\f[R].
.RE
.PP
In WebGL, values that apply to a specific vertex are stored in
attributes.
These are only available to the JavaScript code and the vertex shader.
Attributes are referenced by an index number into the list of attributes
maintained by the GPU.
Some vertex attribute indices may have predefined purposes, depending on
the platform and/or the GPU.
Others are assigned by the WebGL layer when you create the attributes.
.PP
Either way, since attributes cannot be used unless enabled, and are
disabled by default, you need to call
\f[CR]enableVertexAttribArray()\f[R] to enable individual attributes so
that they can be used.
Once that\(cqs been done, other methods can be used to access the
attribute, including \f[CR]vertexAttribPointer()\f[R],
\f[CR]vertexAttrib*()\f[R], and \f[CR]getVertexAttrib()\f[R].
.SH SYNTAX
.IP
.EX
enableVertexAttribArray(index)
.EE
.SS Parameters
.TP
\f[B]index\f[R]
A \f[CR]GLuint\f[R] specifying the index number that uniquely identifies
the vertex attribute to enable.
If you know the name of the attribute but not its index, you can get the
index by calling \f[CR]getAttribLocation()\f[R].
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Errors
To check for errors after calling \f[CR]enableVertexAttribArray()\f[R],
call \f[CR]getError()\f[R].
.TP
\f[B]WebGLRenderingContext.INVALID_VALUE\f[R]
The specified \f[CR]index\f[R] is invalid; that is, it\(cqs greater than
or equal to the maximum number of entries permitted in the context\(cqs
vertex attribute list, as indicated by the value of
\f[CR]WebGLRenderingContext.MAX_VERTEX_ATTRIBS\f[R].
.SH EXAMPLES
This code \(em a snippet taken from the full example A basic 2D WebGL
animation example \(em shows the use of \f[CR]enableVertexArray()\f[R]
to activate the attribute that will be used by the WebGL layer to pass
individual vertexes from the vertex buffer into the vertex shader
function.
.IP
.EX
gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);

aVertexPosition = gl.getAttribLocation(shaderProgram, \(dqaVertexPosition\(dq);

gl.enableVertexAttribArray(aVertexPosition);
gl.vertexAttribPointer(
  aVertexPosition,
  vertexNumComponents,
  gl.FLOAT,
  \f[B]false\f[R],
  0,
  0,
);

gl.drawArrays(gl.TRIANGLES, 0, vertexCount);
.EE
.RS
.PP
\f[B]Note:\f[R] This code snippet is taken from the function
\f[CR]animateScene()\f[R] in \(lqA basic 2D WebGL animation example.\(rq
See that article for the full sample and to see the resulting animation
in action.
.RE
.PP
This code sets the buffer of vertexes that will be used to draw the
triangles of the shape by calling \f[CR]bindBuffer()\f[R].
Then the vertex position attribute\(cqs index is obtained from the
shader program by calling \f[CR]getAttribLocation()\f[R].
.PP
With the index of the vertex position attribute now available in
\f[CR]aVertexPosition\f[R], we call \f[CR]enableVertexAttribArray()\f[R]
to enable the position attribute so it can be used by the shader program
(in particular, by the vertex shader).
.PP
Then the vertex buffer is bound to the \f[CR]aVertexPosition\f[R]
attribute by calling \f[CR]vertexAttribPointer()\f[R].
This step is not obvious, since this binding is almost a side effect.
But as a result, accessing \f[CR]aVertexPosition\f[R] now obtains data
from the vertex buffer.
.PP
With the association in place between the vertex buffer for our shape
and the \f[CR]aVertexPosition\f[R] attribute used to deliver vertexes
one by one into the vertex shader, we\(cqre ready to draw the shape by
calling \f[CR]drawArrays()\f[R].
.SH SEE ALSO
.IP \(bu 2
Data in WebGL
.IP \(bu 2
Adding 2D content to a WebGL context
.IP \(bu 2
A basic 2D WebGL animation sample
.IP \(bu 2
\f[CR]disableVertexAttribArray()\f[R]
