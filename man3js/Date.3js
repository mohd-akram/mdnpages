'\" t
.\" Automatically generated by Pandoc 3.4
.\"
.TH "Date" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
Date \- Date
.SH SYNOPSIS
JavaScript \f[B]\f[CB]Date\f[B]\f[R] objects represent a single moment
in time in a platform\-independent format.
\f[CR]Date\f[R] objects encapsulate an integral number that represents
milliseconds since the midnight at the beginning of January 1, 1970, UTC
(the \f[I]epoch\f[R]).
.RS
.PP
\f[B]Note:\f[R] TC39 is working on \c
.UR https://tc39.es/proposal-temporal/docs/index.html
Temporal
.UE \c
, a new Date/Time API.
Read more about it on the \c
.UR https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/
Igalia blog
.UE \c
\&.
It is not yet ready for production use!
.RE
.SH DESCRIPTION
.SS The epoch, timestamps, and invalid date
A JavaScript date is fundamentally specified as the time in milliseconds
that has elapsed since the \c
.UR https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-time-values-and-time-range
epoch
.UE \c
, which is defined as the midnight at the beginning of January 1, 1970,
UTC (equivalent to the UNIX epoch).
This timestamp is \f[I]timezone\-agnostic\f[R] and uniquely defines an
instant in history.
.RS
.PP
\f[B]Note:\f[R] While the time value at the heart of a Date object is
UTC, the basic methods to fetch the date and time or its components all
work in the local (i.e.\ host system) time zone and offset.
.RE
.PP
The maximum timestamp representable by a \f[CR]Date\f[R] object is
slightly smaller than the maximum safe integer
(\f[CR]Number.MAX_SAFE_INTEGER\f[R], which is 9,007,199,254,740,991).
A \f[CR]Date\f[R] object can represent a maximum of
±8,640,000,000,000,000 milliseconds, or ±100,000,000 (one hundred
million) days, relative to the epoch.
This is the range from April 20, 271821 BC to September 13, 275760 AD.
Any attempt to represent a time outside this range results in the
\f[CR]Date\f[R] object holding a timestamp value of \f[CR]NaN\f[R],
which is an \[lq]Invalid Date\[rq].
.IP
.EX
console.log(\f[B]new\f[R] Date(8.64e15).toString()); \f[I]// \[dq]Sat Sep 13 275760 00:00:00 GMT+0000 (Coordinated Universal Time)\[dq]\f[R]
console.log(\f[B]new\f[R] Date(8.64e15 + 1).toString()); \f[I]// \[dq]Invalid Date\[dq]\f[R]
.EE
.PP
There are various methods that allow you to interact with the timestamp
stored in the date:
.IP \[bu] 2
You can interact with the timestamp value directly using the
\f[CR]getTime()\f[R] and \f[CR]setTime()\f[R] methods.
.IP \[bu] 2
The \f[CR]valueOf()\f[R] and \f[CR][Symbol.toPrimitive]()\f[R] (when
passed \f[CR]\[dq]number\[dq]\f[R]) methods \[em] which are
automatically called in number coercion \[em] return the timestamp,
causing \f[CR]Date\f[R] objects to behave like their timestamps when
used in number contexts.
.IP \[bu] 2
All static methods (\f[CR]Date.now()\f[R], \f[CR]Date.parse()\f[R], and
\f[CR]Date.UTC()\f[R]) return timestamps instead of \f[CR]Date\f[R]
objects.
.IP \[bu] 2
The \f[CR]Date()\f[R] constructor can be called with a timestamp as the
only argument.
.SS Date components and time zones
A date is represented internally as a single number, the
\f[I]timestamp\f[R].
When interacting with it, the timestamp needs to be interpreted as a
structured date\-and\-time representation.
There are always two ways to interpret a timestamp: as a local time or
as a Coordinated Universal Time (UTC), the global standard time defined
by the World Time Standard.
The local timezone is not stored in the date object, but is determined
by the host environment (user\[cq]s device).
.RS
.PP
\f[B]Note:\f[R] UTC should not be confused with the \c
.UR https://en.wikipedia.org/wiki/Greenwich_Mean_Time
Greenwich Mean Time
.UE \c
\ (GMT), because they are not always equal \[em] this is explained in
more detail in the linked Wikipedia page.
.RE
.PP
For example, the timestamp 0 represents a unique instant in history, but
it can be interpreted in two ways:
.IP \[bu] 2
As a UTC time, it is midnight at the beginning of January 1, 1970, UTC,
.IP \[bu] 2
As a local time in New York (UTC\-5), it is 19:00:00 on December 31,
1969.
.PP
The \f[CR]getTimezoneOffset()\f[R] method returns the difference between
UTC and the local time in minutes.
Note that the timezone offset does not only depend on the current
timezone, but also on the time represented by the \f[CR]Date\f[R]
object, because of daylight saving time and historical changes.
In essence, the timezone offset is the offset from UTC time, at the time
represented by the \f[CR]Date\f[R] object and at the location of the
host environment.
.PP
There are two groups of \f[CR]Date\f[R] methods: one group gets and sets
various date components by interpreting the timestamp as a local time,
while the other uses UTC.
.PP
.TS
tab(@);
l l l l l.
T{
Component
T}@T{
Local
T}@T{
T}@T{
UTC
T}@T{
T}
_
T{
T}@T{
Get
T}@T{
Set
T}@T{
Get
T}@T{
Set
T}
T{
Year
T}@T{
\[ga]getFullYear()\[ga]
T}@T{
\[ga]setFullYear()\[ga]
T}@T{
\[ga]getUTCFullYear()\[ga]
T}@T{
\[ga]setUTCFullYear()\[ga]
T}
T{
Month
T}@T{
\[ga]getMonth()\[ga]
T}@T{
\[ga]setMonth()\[ga]
T}@T{
\[ga]getUTCMonth()\[ga]
T}@T{
\[ga]setUTCMonth()\[ga]
T}
T{
Date (of month)
T}@T{
\[ga]getDate()\[ga]
T}@T{
\[ga]setDate()\[ga]
T}@T{
\[ga]getUTCDate()\[ga]
T}@T{
\[ga]setUTCDate()\[ga]
T}
T{
Hours
T}@T{
\[ga]getHours()\[ga]
T}@T{
\[ga]setHours()\[ga]
T}@T{
\[ga]getUTCHours()\[ga]
T}@T{
\[ga]setUTCHours()\[ga]
T}
T{
Minutes
T}@T{
\[ga]getMinutes()\[ga]
T}@T{
\[ga]setMinutes()\[ga]
T}@T{
\[ga]getUTCMinutes()\[ga]
T}@T{
\[ga]setUTCMinutes()\[ga]
T}
T{
Seconds
T}@T{
\[ga]getSeconds()\[ga]
T}@T{
\[ga]setSeconds()\[ga]
T}@T{
\[ga]getUTCSeconds()\[ga]
T}@T{
\[ga]setUTCSeconds()\[ga]
T}
T{
Milliseconds
T}@T{
\[ga]getMilliseconds()\[ga]
T}@T{
\[ga]setMilliseconds()\[ga]
T}@T{
\[ga]getUTCMilliseconds()\[ga]
T}@T{
\[ga]setUTCMilliseconds()\[ga]
T}
T{
Day (of week)
T}@T{
\[ga]getDay()\[ga]
T}@T{
N/A
T}@T{
\[ga]getUTCDay()\[ga]
T}@T{
N/A
T}
.TE
.PP
The \f[CR]Date()\f[R] constructor can be called with two or more
arguments, in which case they are interpreted as the year, month, day,
hour, minute, second, and millisecond, respectively, in local time.
\f[CR]Date.UTC()\f[R] works similarly, but it interprets the components
as UTC time and also accepts a single argument representing the year.
.RS
.PP
\f[B]Note:\f[R] Some methods, including the \f[CR]Date()\f[R]
constructor, \f[CR]Date.UTC()\f[R], and the deprecated
\f[CR]getYear()\f[R]/\f[CR]setYear()\f[R] methods, interpret a
two\-digit year as a year in the 1900s.
For example, \f[CR]new Date(99, 5, 24)\f[R] is interpreted as June 24,
1999, not June 24, 99.
See Interpretation of two\-digit years for more information.
.RE
.PP
When a segment overflows or underflows its expected range, it usually
\[lq]carries over to\[rq] or \[lq]borrows from\[rq] the higher segment.
For example, if the month is set to 12 (months are zero\-based, so
December is 11), it become the January of the next year.
If the day of month is set to 0, it becomes the last day of the previous
month.
This also applies to dates specified with the date time string format.
.SS Date time string format
There are many ways to format a date as a string.
The JavaScript specification only specifies one format to be universally
supported: the \c
.UR https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date-time-string-format
\f[I]date time string format\f[R]
.UE \c
, a simplification of the ISO 8601 calendar date extended format.
The format is as follows:
.IP
.EX
YYYY\-MM\-DDTHH:mm:ss.sssZ
.EE
.IP \[bu] 2
\f[CR]YYYY\f[R] is the year, with four digits (\f[CR]0000\f[R] to
\f[CR]9999\f[R]), or as an \f[I]expanded year\f[R] of \f[CR]+\f[R] or
\f[CR]\-\f[R] followed by six digits.
The sign is required for expanded years.
\f[CR]\-000000\f[R] is explicitly disallowed as a valid year.
.IP \[bu] 2
\f[CR]MM\f[R] is the month, with two digits (\f[CR]01\f[R] to
\f[CR]12\f[R]).
Defaults to \f[CR]01\f[R].
.IP \[bu] 2
\f[CR]DD\f[R] is the day of the month, with two digits (\f[CR]01\f[R] to
\f[CR]31\f[R]).
Defaults to \f[CR]01\f[R].
.IP \[bu] 2
\f[CR]T\f[R] is a literal character, which indicates the beginning of
the \f[I]time\f[R] part of the string.
The \f[CR]T\f[R] is required when specifying the time part.
.IP \[bu] 2
\f[CR]HH\f[R] is the hour, with two digits (\f[CR]00\f[R] to
\f[CR]23\f[R]).
As a special case, \f[CR]24:00:00\f[R] is allowed, and is interpreted as
midnight at the beginning of the next day.
Defaults to \f[CR]00\f[R].
.IP \[bu] 2
\f[CR]mm\f[R] is the minute, with two digits (\f[CR]00\f[R] to
\f[CR]59\f[R]).
Defaults to \f[CR]00\f[R].
.IP \[bu] 2
\f[CR]ss\f[R] is the second, with two digits (\f[CR]00\f[R] to
\f[CR]59\f[R]).
Defaults to \f[CR]00\f[R].
.IP \[bu] 2
\f[CR]sss\f[R] is the millisecond, with three digits (\f[CR]000\f[R] to
\f[CR]999\f[R]).
Defaults to \f[CR]000\f[R].
.IP \[bu] 2
\f[CR]Z\f[R] is the timezone offset, which can either be the literal
character \f[CR]Z\f[R] (indicating UTC), or \f[CR]+\f[R] or
\f[CR]\-\f[R] followed by \f[CR]HH:mm\f[R], the offset in hours and
minutes from UTC.
.PP
Various components can be omitted, so the following are all valid:
.IP \[bu] 2
Date\-only form: \f[CR]YYYY\f[R], \f[CR]YYYY\-MM\f[R],
\f[CR]YYYY\-MM\-DD\f[R]
.IP \[bu] 2
Date\-time form: one of the above date\-only forms, followed by
\f[CR]T\f[R], followed by \f[CR]HH:mm\f[R], \f[CR]HH:mm:ss\f[R], or
\f[CR]HH:mm:ss.sss\f[R].
Each combination can be followed by a time zone offset.
.PP
For example, \f[CR]\[dq]2011\-10\-10\[dq]\f[R] (\f[I]date\-only\f[R]
form), \f[CR]\[dq]2011\-10\-10T14:48:00\[dq]\f[R] (\f[I]date\-time\f[R]
form), or \f[CR]\[dq]2011\-10\-10T14:48:00.000+09:00\[dq]\f[R]
(\f[I]date\-time\f[R] form with milliseconds and time zone) are all
valid date time strings.
.PP
When the time zone offset is absent, \f[B]date\-only forms are
interpreted as a UTC time and date\-time forms are interpreted as a
local time.\f[R] The interpretation as a UTC time is due to a historical
spec error that was not consistent with ISO 8601 but could not be
changed due to web compatibility.
See \c
.UR https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/
Broken Parser \[en] A Web Reality Issue
.UE \c
\&.
.PP
\f[CR]Date.parse()\f[R] and the \f[CR]Date()\f[R] constructor both
accept strings in the date time string format as input.
Furthermore, implementations are allowed to support other date formats
when the input fails to match this format.
.PP
The \f[CR]toISOString()\f[R] method returns a string representation of
the date in the date time string format, with the time zone offset
always set to \f[CR]Z\f[R] (UTC).
.RS
.PP
\f[B]Note:\f[R] You are encouraged to make sure your input conforms to
the date time string format above for maximum compatibility, because
support for other formats is not guaranteed.
However, there are some formats that are supported in all major
implementations \[em] like RFC 2822 format \[em] in which case their
usage can be acceptable.
Always conduct cross\-browser tests to ensure your code works in all
target browsers.
A library can help if many different formats are to be accommodated.
.RE
.PP
Non\-standard strings can be parsed in any way as desired by the
implementation, including the time zone \[em] most implementations use
the local time zone by default.
Implementations are not required to return invalid date for
out\-of\-bounds date components, although they usually do.
A string may have in\-bounds date components (with the bounds defined
above), but does not represent a date in reality (for example,
\[lq]February 30\[rq]).
Implementations behave inconsistently in this case.
The \f[CR]Date.parse()\f[R] page offers more examples about these
non\-standard cases.
.SS Other ways to format a date
.IP \[bu] 2
\f[CR]toISOString()\f[R] returns a string in the format
\f[CR]1970\-01\-01T00:00:00.000Z\f[R] (the date time string format
introduced above, which is simplified \c
.UR https://en.wikipedia.org/wiki/ISO_8601
ISO 8601
.UE \c
).
\f[CR]toJSON()\f[R] calls \f[CR]toISOString()\f[R] and returns the
result.
.IP \[bu] 2
\f[CR]toString()\f[R] returns a string in the format
\f[CR]Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\f[R],
while \f[CR]toDateString()\f[R] and \f[CR]toTimeString()\f[R] return the
date and time parts of the string, respectively.
\f[CR][Symbol.toPrimitive]()\f[R] (when passed
\f[CR]\[dq]string\[dq]\f[R] or \f[CR]\[dq]default\[dq]\f[R]) calls
\f[CR]toString()\f[R] and returns the result.
.IP \[bu] 2
\f[CR]toUTCString()\f[R] returns a string in the format
\f[CR]Thu, 01 Jan 1970 00:00:00 GMT\f[R] (generalized RFC 7231).
.IP \[bu] 2
\f[CR]toLocaleDateString()\f[R], \f[CR]toLocaleTimeString()\f[R], and
\f[CR]toLocaleString()\f[R] use locale\-specific date and time formats,
usually provided by the \f[CR]Intl\f[R] API.
.PP
See the Formats of \f[CR]toString\f[R] method return values section for
examples.
.SH CONSTRUCTOR
.TP
\f[B]Date()\f[R]
When called as a constructor, returns a new \f[CR]Date\f[R] object.
When called as a function, returns a string representation of the
current date and time.
.SH STATIC METHODS
.TP
\f[B]Date.now()\f[R]
Returns the numeric value corresponding to the current time\[em]the
number of milliseconds since January 1, 1970 00:00:00 UTC, with leap
seconds ignored.
.TP
\f[B]Date.parse()\f[R]
Parses a string representation of a date and returns the number of
milliseconds since January 1, 1970 00:00:00 UTC, with leap seconds
ignored.
.TP
\f[B]Date.UTC()\f[R]
Accepts the same parameters as the longest form of the constructor
(i.e.\ 2 to 7) and returns the number of milliseconds since January 1,
1970 00:00:00 UTC, with leap seconds ignored.
.SH INSTANCE PROPERTIES
These properties are defined on \f[CR]Date.prototype\f[R] and shared by
all \f[CR]Date\f[R] instances.
.TP
\f[B]Date.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]Date\f[R] instances, the initial value is the \f[CR]Date\f[R]
constructor.
.SH INSTANCE METHODS
.TP
\f[B]Date.prototype.getDate()\f[R]
Returns the day of the month (\f[CR]1\f[R] \[en] \f[CR]31\f[R]) for the
specified date according to local time.
.TP
\f[B]Date.prototype.getDay()\f[R]
Returns the day of the week (\f[CR]0\f[R] \[en] \f[CR]6\f[R]) for the
specified date according to local time.
.TP
\f[B]Date.prototype.getFullYear()\f[R]
Returns the year (4 digits for 4\-digit years) of the specified date
according to local time.
.TP
\f[B]Date.prototype.getHours()\f[R]
Returns the hour (\f[CR]0\f[R] \[en] \f[CR]23\f[R]) in the specified
date according to local time.
.TP
\f[B]Date.prototype.getMilliseconds()\f[R]
Returns the milliseconds (\f[CR]0\f[R] \[en] \f[CR]999\f[R]) in the
specified date according to local time.
.TP
\f[B]Date.prototype.getMinutes()\f[R]
Returns the minutes (\f[CR]0\f[R] \[en] \f[CR]59\f[R]) in the specified
date according to local time.
.TP
\f[B]Date.prototype.getMonth()\f[R]
Returns the month (\f[CR]0\f[R] \[en] \f[CR]11\f[R]) in the specified
date according to local time.
.TP
\f[B]Date.prototype.getSeconds()\f[R]
Returns the seconds (\f[CR]0\f[R] \[en] \f[CR]59\f[R]) in the specified
date according to local time.
.TP
\f[B]Date.prototype.getTime()\f[R]
Returns the numeric value of the specified date as the number of
milliseconds since January 1, 1970 00:00:00 UTC.
(Negative values are returned for prior times.)
.TP
\f[B]Date.prototype.getTimezoneOffset()\f[R]
Returns the time\-zone offset in minutes for the current locale.
.TP
\f[B]Date.prototype.getUTCDate()\f[R]
Returns the day (date) of the month (\f[CR]1\f[R] \[en] \f[CR]31\f[R])
in the specified date according to universal time.
.TP
\f[B]Date.prototype.getUTCDay()\f[R]
Returns the day of the week (\f[CR]0\f[R] \[en] \f[CR]6\f[R]) in the
specified date according to universal time.
.TP
\f[B]Date.prototype.getUTCFullYear()\f[R]
Returns the year (4 digits for 4\-digit years) in the specified date
according to universal time.
.TP
\f[B]Date.prototype.getUTCHours()\f[R]
Returns the hours (\f[CR]0\f[R] \[en] \f[CR]23\f[R]) in the specified
date according to universal time.
.TP
\f[B]Date.prototype.getUTCMilliseconds()\f[R]
Returns the milliseconds (\f[CR]0\f[R] \[en] \f[CR]999\f[R]) in the
specified date according to universal time.
.TP
\f[B]Date.prototype.getUTCMinutes()\f[R]
Returns the minutes (\f[CR]0\f[R] \[en] \f[CR]59\f[R]) in the specified
date according to universal time.
.TP
\f[B]Date.prototype.getUTCMonth()\f[R]
Returns the month (\f[CR]0\f[R] \[en] \f[CR]11\f[R]) in the specified
date according to universal time.
.TP
\f[B]Date.prototype.getUTCSeconds()\f[R]
Returns the seconds (\f[CR]0\f[R] \[en] \f[CR]59\f[R]) in the specified
date according to universal time.
.TP
\f[B]Date.prototype.getYear()\f[R] \f[I](deprecated)\f[R]
Returns the year (usually 2\[en]3 digits) in the specified date
according to local time.
Use \f[CR]getFullYear()\f[R] instead.
.TP
\f[B]Date.prototype.setDate()\f[R]
Sets the day of the month for a specified date according to local time.
.TP
\f[B]Date.prototype.setFullYear()\f[R]
Sets the full year (e.g.\ 4 digits for 4\-digit years) for a specified
date according to local time.
.TP
\f[B]Date.prototype.setHours()\f[R]
Sets the hours for a specified date according to local time.
.TP
\f[B]Date.prototype.setMilliseconds()\f[R]
Sets the milliseconds for a specified date according to local time.
.TP
\f[B]Date.prototype.setMinutes()\f[R]
Sets the minutes for a specified date according to local time.
.TP
\f[B]Date.prototype.setMonth()\f[R]
Sets the month for a specified date according to local time.
.TP
\f[B]Date.prototype.setSeconds()\f[R]
Sets the seconds for a specified date according to local time.
.TP
\f[B]Date.prototype.setTime()\f[R]
Sets the \f[CR]Date\f[R] object to the time represented by the number of
milliseconds since January 1, 1970 00:00:00 UTC.
Use negative numbers for times prior.
.TP
\f[B]Date.prototype.setUTCDate()\f[R]
Sets the day of the month for a specified date according to universal
time.
.TP
\f[B]Date.prototype.setUTCFullYear()\f[R]
Sets the full year (e.g.\ 4 digits for 4\-digit years) for a specified
date according to universal time.
.TP
\f[B]Date.prototype.setUTCHours()\f[R]
Sets the hour for a specified date according to universal time.
.TP
\f[B]Date.prototype.setUTCMilliseconds()\f[R]
Sets the milliseconds for a specified date according to universal time.
.TP
\f[B]Date.prototype.setUTCMinutes()\f[R]
Sets the minutes for a specified date according to universal time.
.TP
\f[B]Date.prototype.setUTCMonth()\f[R]
Sets the month for a specified date according to universal time.
.TP
\f[B]Date.prototype.setUTCSeconds()\f[R]
Sets the seconds for a specified date according to universal time.
.TP
\f[B]Date.prototype.setYear()\f[R] \f[I](deprecated)\f[R]
Sets the year (usually 2\[en]3 digits) for a specified date according to
local time.
Use \f[CR]setFullYear()\f[R] instead.
.TP
\f[B]Date.prototype.toDateString()\f[R]
Returns the \[lq]date\[rq] portion of the \f[CR]Date\f[R] as a
human\-readable string like \f[CR]\[aq]Thu Apr 12 2018\[aq]\f[R].
.TP
\f[B]Date.prototype.toISOString()\f[R]
Converts a date to a string following the ISO 8601 Extended Format.
.TP
\f[B]Date.prototype.toJSON()\f[R]
Returns a string representing the \f[CR]Date\f[R] using
\f[CR]toISOString()\f[R].
Intended for use by \f[CR]JSON.stringify()\f[R].
.TP
\f[B]Date.prototype.toLocaleDateString()\f[R]
Returns a string with a locality sensitive representation of the date
portion of this date based on system settings.
.TP
\f[B]Date.prototype.toLocaleString()\f[R]
Returns a string with a locality\-sensitive representation of this date.
Overrides the \f[CR]Object.prototype.toLocaleString()\f[R] method.
.TP
\f[B]Date.prototype.toLocaleTimeString()\f[R]
Returns a string with a locality\-sensitive representation of the time
portion of this date, based on system settings.
.TP
\f[B]Date.prototype.toString()\f[R]
Returns a string representing the specified \f[CR]Date\f[R] object.
Overrides the \f[CR]Object.prototype.toString()\f[R] method.
.TP
\f[B]Date.prototype.toTimeString()\f[R]
Returns the \[lq]time\[rq] portion of the \f[CR]Date\f[R] as a
human\-readable string.
.TP
\f[B]Date.prototype.toUTCString()\f[R]
Converts a date to a string using the UTC timezone.
.TP
\f[B]Date.prototype.valueOf()\f[R]
Returns the primitive value of a \f[CR]Date\f[R] object.
Overrides the \f[CR]Object.prototype.valueOf()\f[R] method.
.TP
\f[B]Date.prototype[Symbol.toPrimitive]()\f[R]
Converts this \f[CR]Date\f[R] object to a primitive value.
.SH EXAMPLES
.SS Several ways to create a Date object
The following examples show several ways to create JavaScript dates:
.RS
.PP
\f[B]Note:\f[R] Creating a date from a string has a lot of behavior
inconsistencies.
See date time string format for caveats on using different formats.
.RE
.IP
.EX
\f[B]const\f[R] today = \f[B]new\f[R] Date();
\f[B]const\f[R] birthday = \f[B]new\f[R] Date(\[dq]December 17, 1995 03:24:00\[dq]); \f[I]// DISCOURAGED: may not work in all runtimes\f[R]
\f[B]const\f[R] birthday2 = \f[B]new\f[R] Date(\[dq]1995\-12\-17T03:24:00\[dq]); \f[I]// This is standardized and will work reliably\f[R]
\f[B]const\f[R] birthday3 = \f[B]new\f[R] Date(1995, 11, 17); \f[I]// the month is 0\-indexed\f[R]
\f[B]const\f[R] birthday4 = \f[B]new\f[R] Date(1995, 11, 17, 3, 24, 0);
\f[B]const\f[R] birthday5 = \f[B]new\f[R] Date(628021800000); \f[I]// passing epoch timestamp\f[R]
.EE
.SS Formats of toString method return values
.IP
.EX
\f[B]const\f[R] date = \f[B]new\f[R] Date(\[dq]2020\-05\-12T23:50:21.817Z\[dq]);
date.toString(); \f[I]// Tue May 12 2020 18:50:21 GMT\-0500 (Central Daylight Time)\f[R]
date.toDateString(); \f[I]// Tue May 12 2020\f[R]
date.toTimeString(); \f[I]// 18:50:21 GMT\-0500 (Central Daylight Time)\f[R]
date[Symbol.toPrimitive](\[dq]string\[dq]); \f[I]// Tue May 12 2020 18:50:21 GMT\-0500 (Central Daylight Time)\f[R]

date.toISOString(); \f[I]// 2020\-05\-12T23:50:21.817Z\f[R]
date.toJSON(); \f[I]// 2020\-05\-12T23:50:21.817Z\f[R]

date.toUTCString(); \f[I]// Tue, 12 May 2020 23:50:21 GMT\f[R]

date.toLocaleString(); \f[I]// 5/12/2020, 6:50:21 PM\f[R]
date.toLocaleDateString(); \f[I]// 5/12/2020\f[R]
date.toLocaleTimeString(); \f[I]// 6:50:21 PM\f[R]
.EE
.SS To get Date, Month and Year or Time
.IP
.EX
\f[B]const\f[R] date = \f[B]new\f[R] Date(\[dq]2000\-01\-17T16:45:30\[dq]);
\f[B]const\f[R] [month, day, year] = [
  date.getMonth(),
  date.getDate(),
  date.getFullYear(),
];
\f[I]// [0, 17, 2000] as month are 0\-indexed\f[R]
\f[B]const\f[R] [hour, minutes, seconds] = [
  date.getHours(),
  date.getMinutes(),
  date.getSeconds(),
];
\f[I]// [16, 45, 30]\f[R]
.EE
.SS Interpretation of two\-digit years
\f[CR]new Date()\f[R] exhibits legacy undesirable, inconsistent behavior
with two\-digit year values; specifically, when a \f[CR]new Date()\f[R]
call is given a two\-digit year value, that year value does not get
treated as a literal year and used as\-is but instead gets interpreted
as a relative offset \[em] in some cases as an offset from the year
\f[CR]1900\f[R], but in other cases, as an offset from the year
\f[CR]2000\f[R].
.IP
.EX
\f[B]let\f[R] date = \f[B]new\f[R] Date(98, 1); \f[I]// Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)\f[R]
date = \f[B]new\f[R] Date(22, 1); \f[I]// Wed Feb 01 1922 00:00:00 GMT+0000 (GMT)\f[R]
date = \f[B]new\f[R] Date(\[dq]2/1/22\[dq]); \f[I]// Tue Feb 01 2022 00:00:00 GMT+0000 (GMT)\f[R]

\f[I]// Legacy method; always interprets two\-digit year values as relative to 1900\f[R]
date.setYear(98);
date.toString(); \f[I]// Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)\f[R]
date.setYear(22);
date.toString(); \f[I]// Wed Feb 01 1922 00:00:00 GMT+0000 (GMT)\f[R]
.EE
.PP
So, to create and get dates between the years \f[CR]0\f[R] and
\f[CR]99\f[R], instead use the preferred \f[CR]setFullYear()\f[R] and
\f[CR]getFullYear()\f[R] methods:.
.IP
.EX
\f[I]// Preferred method; never interprets any value as being a relative offset,\f[R]
\f[I]// but instead uses the year value as\-is\f[R]
date.setFullYear(98);
date.getFullYear(); \f[I]// 98 (not 1998)\f[R]
date.setFullYear(22);
date.getFullYear(); \f[I]// 22 (not 1922, not 2022)\f[R]
.EE
.SS Calculating elapsed time
The following examples show how to determine the elapsed time between
two JavaScript dates in milliseconds.
.PP
Due to the differing lengths of days (due to daylight saving
changeover), months, and years, expressing elapsed time in units greater
than hours, minutes, and seconds requires addressing a number of issues,
and should be thoroughly researched before being attempted.
.IP
.EX
\f[I]// Using Date objects\f[R]
\f[B]const\f[R] start = Date.now();

\f[I]// The event to time goes here:\f[R]
doSomethingForALongTime();
\f[B]const\f[R] end = Date.now();
\f[B]const\f[R] elapsed = end \- start; \f[I]// elapsed time in milliseconds\f[R]
.EE
.IP
.EX
\f[I]// Using built\-in methods\f[R]
\f[B]const\f[R] start = \f[B]new\f[R] Date();

\f[I]// The event to time goes here:\f[R]
doSomethingForALongTime();
\f[B]const\f[R] end = \f[B]new\f[R] Date();
\f[B]const\f[R] elapsed = end.getTime() \- start.getTime(); \f[I]// elapsed time in milliseconds\f[R]
.EE
.IP
.EX
\f[I]// To test a function and get back its return\f[R]
\f[B]function\f[R] printElapsedTime(testFn) {
  \f[B]const\f[R] startTime = Date.now();
  \f[B]const\f[R] result = testFn();
  \f[B]const\f[R] endTime = Date.now();

  console.log(\[ga]Elapsed time: ${String(endTime \- startTime)} milliseconds\[ga]);
  \f[B]return\f[R] result;
}

\f[B]const\f[R] yourFunctionReturn = printElapsedTime(yourFunction);
.EE
.RS
.PP
\f[B]Note:\f[R] In browsers that support the Performance API\[cq]s
high\-resolution time feature, \f[CR]Performance.now()\f[R] can provide
more reliable and precise measurements of elapsed time than
\f[CR]Date.now()\f[R].
.RE
.SS Get the number of seconds since the ECMAScript Epoch
.IP
.EX
\f[B]const\f[R] seconds = Math.floor(Date.now() / 1000);
.EE
.PP
In this case, it\[cq]s important to return only an integer\[em]so a
simple division won\[cq]t do.
It\[cq]s also important to only return actually elapsed seconds.
(That\[cq]s why this code uses \f[CR]Math.floor()\f[R], and
\f[I]not\f[R] \f[CR]Math.round()\f[R].)
.SH SEE ALSO
.IP \[bu] 2
\f[CR]Date()\f[R]
