.\" Automatically generated by Pandoc 3.4
.\"
.TH "CSPViolationReportBody.columnNumber" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CSPViolationReportBody.columnNumber \- CSPViolationReportBody:
columnNumber property
.SH SYNOPSIS
The \f[B]\f[CB]columnNumber\f[B]\f[R] read\-only property of the
\f[CR]CSPViolationReportBody\f[R] interface indicates the column number
in the source file that triggered the Content Security Policy (CSP)
violation.
.PP
Note that the browser extracts the value from \f[I]the global
object\f[R] of the file that triggered the violation.
If the resource that triggers the CSP violation is not loaded, the value
will be \f[CR]null\f[R].
See \f[CR]CSPViolationReportBody.sourceFile\f[R] for more information.
.PP
This property is most useful alongside
\f[CR]CSPViolationReportBody.sourceFile\f[R] and
\f[CR]CSPViolationReportBody.lineNumber\f[R], as it provides the
location of the column in that file and line that resulted in a
violation.
.SH VALUE
An integer containing the column number that triggered the violation, or
\f[CR]null\f[R].
.SH EXAMPLES
.SS CSP inline script violation
This example triggers a CSP violation using an inline script, and
reports the violation using a \f[CR]ReportingObserver\f[R].
.SS HTML
The HTML file below uses the \f[CR]<meta>\f[R] element to set the
\f[CR]Content\-Security\-Policy\f[R] \f[CR]default\-src\f[R] to
\f[CR]self\f[R], which allows scripts and other resources to be loaded
from the same origin, but does not allow inline scripts to be executed.
The document also includes an inline script, which should therefore
trigger a CSP violation.
.IP
.EX
<!doctype html>
<\f[B]html\f[R] lang=\[dq]en\[dq]>
  <\f[B]head\f[R]>
    <\f[B]meta\f[R]
      http\-equiv=\[dq]Content\-Security\-Policy\[dq]
      content=\[dq]default\-src \[aq]self\[aq]; report\-to csp\-endpoint\[dq] />
    <\f[B]meta\f[R]
      http\-equiv=\[dq]Reporting\-Endpoints\[dq]
      content=\[dq]csp\-endpoint=\[aq]https://example.com/csp\-reports\[aq]\[dq] />
    <\f[B]script\f[R] src=\[dq]main.js\[dq]></\f[B]script\f[R]>
    <\f[B]title\f[R]>CSP: Violation due to inline script</\f[B]title\f[R]>
  </\f[B]head\f[R]>
  <\f[B]body\f[R]>
    <\f[B]h1\f[R]>CSP: Violation due to inline script</\f[B]h1\f[R]>
    <\f[B]script\f[R]>
      \f[B]const\f[R] int = 4;
    </\f[B]script\f[R]>
  </\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SS JavaScript (main.js)
The document above also loads the external script \f[CR]main.js\f[R],
which is shown below.
Because this is loaded from the same domain as the HTML, it is not
blocked by the CSP.
.PP
The script creates a new \f[CR]ReportingObserver\f[R] to observe content
violation reports of type \f[CR]\[dq]csp\-violation\[dq]\f[R].
Each time the callback function is invoked, we get the body of the first
entry of the reports array, and use it to log the file, line, and column
of the violation to the console.
.IP
.EX
\f[I]// main.js\f[R]
\f[B]const\f[R] observer = \f[B]new\f[R] ReportingObserver(
  (reports, observer) \f[B]=>\f[R] {
    \f[B]const\f[R] cspViolationBody = reports[0].body;
    console.log(\[ga]sourceFile: ${cspViolationBody.sourceFile}\[ga]);
    console.log(\[ga]lineNumber: ${cspViolationBody.lineNumber}\[ga]);
    console.log(\[ga]columnNumber: ${cspViolationBody.columnNumber}\[ga]);
  },
  {
    types: [\[dq]csp\-violation\[dq]],
    buffered: \f[B]true\f[R],
  },
);

observer.observe();
.EE
.PP
Note that while there might be multiple reports in the returned array,
for brevity we only log the values of the first element.
.SS Results
You can try this out using a local server.
Copy the above code into \f[CR]test/index.html\f[R] and
\f[CR]test/main.js\f[R] and run the server in the root directory.
Assuming the address of the local server is
\f[CR]http://127.0.0.1:9999\f[R], you can then load the HTML file from
\f[CR]http://127.0.0.1:9999/test/\f[R] (or
\f[CR]http://127.0.0.1:9999/test/index.html\f[R]).
.PP
With the above setup, the output of the log on Chrome is:
.IP
.EX
sourceFile: http://127.0.0.1:9999/test/
lineNumber: 15
columnNumber: 0
.EE
.PP
The result is similar for Firefox:
.IP
.EX
sourceFile: http://127.0.0.1:9999/test/
lineNumber: 15
columnNumber: 13
.EE
.PP
Note that the column number is different for the two browsers.
Chrome always appears to report \f[CR]0\f[R].
The value on Firefox represents the position of the first character
after the end of the opening \f[CR]<script>\f[R] element.
.SH SEE ALSO
.IP \[bu] 2
\f[CR]SecurityPolicyViolationEvent.columnNumber\f[R]
