.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "RTCPEERCONNECTION.GENERATECERTIFICATE_STATIC" "3JS" "April 19, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.generateCertificate_static \- RTCPeerConnection:
generateCertificate() static method
.SH SYNOPSIS
The \f[B]\f[CB]generateCertificate()\f[B]\f[R] static function of the
\f[CR]RTCPeerConnection\f[R] interface creates an X.509 certificate and
corresponding private key, returning a promise that resolves with the
new \f[CR]RTCCertificate\f[R] once it\(cqs generated.
.SH SYNTAX
.IP
.EX
RTCPeerConnection.generateCertificate(keygenAlgorithm)
.EE
.SS Parameters
.TP
\f[B]keygenAlgorithm\f[R]
A Web Crypto API algorithm identifier string or object.
See \f[CR]SubtleCrypto.generateKey()\f[R] for details on the format of
the object.
.RS
.PP
\f[B]Note:\f[R] \f[CR]generateCertificate()\f[R] is a static method, so
it is always called on the \f[CR]RTCPeerConnection\f[R] interface
itself, not an instance thereof.
.RE
.SS Return value
A promise which resolves to a new \f[CR]RTCCertificate\f[R] object
containing a new key based on the specified options.
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if the normalized form of \f[CR]keygenAlgorithm\f[R] specifies an
algorithm or algorithm settings that the browser doesn\(cqt support, or
which it does not allow for use with an \f[CR]RTCPeerConnection\f[R].
.PP
Other errors may occur; for example, if the specified
\f[CR]keygenAlgorithm\f[R] can\(cqt be successfully converted into an
\f[CR]RTCCertificateExpiration\f[R] dictionary, the error that occurs
during that conversion will be thrown.
.SH DESCRIPTION
If a string is specified, it must be a Web Crypto API\-compatible
algorithm name string.
Alternatively, you can provide specific details for the algorithm\(cqs
configuration by providing an object based on one of the Web Crypto
API\(cqs \f[CR]Algorithm\f[R] class\(cqs subclasses.
.SS Standard configurations
All browsers are required to support the following two configurations.
It\(cqs entirely possible that a browser\(cqs \f[I]default\f[R] settings
may be different, but these are always supported.
.SS RSASSA\-PKCS1\-v1_5
.IP
.EX
\f[B]let\f[R] stdRSACertificate = {
  name: \(dqRSASSA\-PKCS1\-v1_5\(dq,
  modulusLength: 2048,
  publicExponent: \f[B]new\f[R] Uint8Array([1, 0, 1]),
  hash: \(dqSHA\-256\(dq,
};
.EE
.SS ECDSA
.IP
.EX
\f[B]let\f[R] stdECDSACertificate = {
  name: \(dqECDSA\(dq,
  namedCurve: \(dqP\-256\(dq,
};
.EE
.SS Certificate expiration time
By default the new certificate is configured with \f[CR]expires\f[R] set
to a value of 2592000000 milliseconds, or 30 days.
The expiration time cannot exceed 31536000000 milliseconds, or 365 days.
It\(cqs also useful to note that browsers may further restrict the
expiration time of certificates if they choose.
.SH EXAMPLES
.SS Specifying algorithm details
This example requests a new RSASSA\-PKCS1\-v1_5 certificate using a
SHA\-256 hash and a modulus length of 2048.
.IP
.EX
RTCPeerConnection.generateCertificate({
  name: \(dqRSASSA\-PKCS1\-v1_5\(dq,
  hash: \(dqSHA\-256\(dq,
  modulusLength: 2048,
  publicExponent: \f[B]new\f[R] Uint8Array([1, 0, 1]),
}).then((cert) \f[B]=>\f[R] {
  \f[B]const\f[R] pc = \f[B]new\f[R] RTCPeerConnection({ certificates: [cert] });
});
.EE
.SS Specifying an algorithm by name
The example below specifies a string requesting an \c
.UR https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm
ECDSA
.UE \c
\ certificate.
.IP
.EX
RTCPeerConnection.generateCertificate(\(dqECDSA\(dq);
.EE
.SH SEE ALSO
.IP \(bu 2
WebRTC API
.IP \(bu 2
Web Crypto API
.IP \(bu 2
Website security
.IP \(bu 2
Web security
.IP \(bu 2
Symmetric\-key cryptography
.IP \(bu 2
\f[CR]Crypto\f[R]
