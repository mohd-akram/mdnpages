.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "RTCPeerConnection.generateCertificate_static" "JS" "December 19, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
RTCPeerConnection.generateCertificate_static \- RTCPeerConnection:
generateCertificate() static method
.SH SYNOPSIS
The \f[B]\f[CB]generateCertificate()\f[B]\f[R] static function of the
\f[CR]RTCPeerConnection\f[R] interface creates an X.509 certificate and
corresponding private key, returning a promise that resolves with the
new \f[CR]RTCCertificate\f[R] once it\[cq]s generated.
.SH SYNTAX
.IP
.EX
RTCPeerConnection.generateCertificate(keygenAlgorithm)
.EE
.SS Parameters
.TP
\f[B]keygenAlgorithm\f[R]
A Web Crypto API \f[CR]AlgorithmIdentifier\f[R] string or an
\f[CR]Algorithm\f[R] \-subclassed object specifying an algorithm to use
when creating the certificate\[cq]s key.
.RS
.PP
\f[B]Note:\f[R] \f[CR]generateCertificate()\f[R] is a static method, so
it is always called on the \f[CR]RTCPeerConnection\f[R] interface
itself, not an instance thereof.
.RE
.SS Return value
A promise which resolves to a new \f[CR]RTCCertificate\f[R] object
containing a new key based on the specified options.
.SS Exceptions
.TP
\f[B]NotSupportedError\f[R] \f[B]DOMException\f[R]
Thrown if the normalized form of \f[CR]keygenAlgorithm\f[R] specifies an
algorithm or algorithm settings that the browser doesn\[cq]t support, or
which it does not allow for use with an \f[CR]RTCPeerConnection\f[R].
.PP
Other errors may occur; for example, if the specified
\f[CR]keygenAlgorithm\f[R] can\[cq]t be successfully converted into an
\f[CR]RTCCertificateExpiration\f[R] dictionary, the error that occurs
during that conversion will be thrown.
.SH DESCRIPTION
If a string is specified, it must be a Web Crypto API\-compatible
algorithm name string.
Alternatively, you can provide specific details for the algorithm\[cq]s
configuration by providing an object based on one of the Web Crypto
API\[cq]s \f[CR]Algorithm\f[R] class\[cq]s subclasses.
.SS Standard configurations
All browsers are required to support the following two configurations.
It\[cq]s entirely possible that a browser\[cq]s \f[I]default\f[R]
settings may be different, but these are always supported.
.SS RSASSA\-PKCS1\-v1_5
.IP
.EX
\f[B]let\f[R] stdRSACertificate = {
  name: \[dq]RSASSA\-PKCS1\-v1_5\[dq],
  modulusLength: 2048,
  publicExponent: \f[B]new\f[R] Uint8Array([1, 0, 1]),
  hash: \[dq]SHA\-256\[dq],
};
.EE
.SS ECDSA
.IP
.EX
\f[B]let\f[R] stdECDSACertificate = {
  name: \[dq]ECDSA\[dq],
  namedCurve: \[dq]P\-256\[dq],
};
.EE
.SS Certificate expiration time
By default the new certificate is configured with \f[CR]expires\f[R] set
to a value of 2592000000 milliseconds, or 30 days.
The expiration time cannot exceed 31536000000 milliseconds, or 365 days.
It\[cq]s also useful to note that browsers may further restrict the
expiration time of certificates if they choose.
.SH EXAMPLES
.SS Specifying algorithm details
This example requests a new RSASSA\-PKCS1\-v1_5 certificate using a
SHA\-256 hash and a modulus length of 2048.
.IP
.EX
RTCPeerConnection.generateCertificate({
  name: \[dq]RSASSA\-PKCS1\-v1_5\[dq],
  hash: \[dq]SHA\-256\[dq],
  modulusLength: 2048,
  publicExponent: \f[B]new\f[R] Uint8Array([1, 0, 1]),
}).then((cert) \f[B]=>\f[R] {
  \f[B]const\f[R] pc = \f[B]new\f[R] RTCPeerConnection({ certificates: [cert] });
});
.EE
.SS Specifying an algorithm by name
The example below specifies a string requesting an \c
.UR https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm
ECDSA
.UE \c
\ certificate.
.IP
.EX
RTCPeerConnection.generateCertificate(\[dq]ECDSA\[dq]);
.EE
.SH SEE ALSO
.IP \[bu] 2
WebRTC API
.IP \[bu] 2
Web Crypto API
.IP \[bu] 2
Website security
.IP \[bu] 2
Web security
.IP \[bu] 2
Symmetric\-key cryptography
.IP \[bu] 2
\f[CR]Crypto\f[R]
