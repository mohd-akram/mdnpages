.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "CANVASRENDERINGCONTEXT2D.DRAWIMAGE" "3JS" "June 19, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
CanvasRenderingContext2D.drawImage \- CanvasRenderingContext2D:
drawImage() method
.SH SYNOPSIS
The \f[B]\f[CB]CanvasRenderingContext2D.drawImage()\f[B]\f[R] method of
the Canvas 2D API provides different ways to draw an image onto the
canvas.
.SH SYNTAX
.IP
.EX
drawImage(image, dx, dy)
drawImage(image, dx, dy, dWidth, dHeight)
drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)
.EE
[IMAGE: drawImage]
drawImage
.SS Parameters
.TP
\f[B]image\f[R]
An element to draw into the context.
The specification permits any canvas image source, specifically, an
\f[CR]HTMLImageElement\f[R], an \f[CR]SVGImageElement\f[R], an
\f[CR]HTMLVideoElement\f[R], an \f[CR]HTMLCanvasElement\f[R], an
\f[CR]ImageBitmap\f[R], an \f[CR]OffscreenCanvas\f[R], or a
\f[CR]VideoFrame\f[R].
.TP
\f[B]sx\f[R] \f[I](optional)\f[R]
The x\-axis coordinate of the top left corner of the sub\-rectangle of
the source \f[CR]image\f[R] to draw into the destination context.
Use the 3\- or 5\-argument syntax to omit this argument.
.TP
\f[B]sy\f[R] \f[I](optional)\f[R]
The y\-axis coordinate of the top left corner of the sub\-rectangle of
the source \f[CR]image\f[R] to draw into the destination context.
Use the 3\- or 5\-argument syntax to omit this argument.
.TP
\f[B]sWidth\f[R] \f[I](optional)\f[R]
The width of the sub\-rectangle of the source \f[CR]image\f[R] to draw
into the destination context.
If not specified, the entire rectangle from the coordinates specified by
\f[CR]sx\f[R] and \f[CR]sy\f[R] to the bottom\-right corner of the image
is used.
Use the 3\- or 5\-argument syntax to omit this argument.
A negative value will flip the image.
.TP
\f[B]sHeight\f[R] \f[I](optional)\f[R]
The height of the sub\-rectangle of the source \f[CR]image\f[R] to draw
into the destination context.
Use the 3\- or 5\-argument syntax to omit this argument.
A negative value will flip the image.
.TP
\f[B]dx\f[R]
The x\-axis coordinate in the destination canvas at which to place the
top\-left corner of the source \f[CR]image\f[R].
.TP
\f[B]dy\f[R]
The y\-axis coordinate in the destination canvas at which to place the
top\-left corner of the source \f[CR]image\f[R].
.TP
\f[B]dWidth\f[R]
The width to draw the \f[CR]image\f[R] in the destination canvas.
This allows scaling of the drawn image.
If not specified, the image is not scaled in width when drawn.
Note that this argument is not included in the 3\-argument syntax.
.TP
\f[B]dHeight\f[R]
The height to draw the \f[CR]image\f[R] in the destination canvas.
This allows scaling of the drawn image.
If not specified, the image is not scaled in height when drawn.
Note that this argument is not included in the 3\-argument syntax.
.SS Return value
None (\f[CR]undefined\f[R]).
.SS Exceptions
.TP
\f[B]InvalidStateError\f[R] \f[B]DOMException\f[R]
Thrown when the image has no image data or if the canvas or source
rectangle width or height is zero.
.TP
\f[B]TypeMismatchError\f[R] \f[B]DOMException\f[R]
Thrown when a \f[CR]null\f[R] or \f[CR]undefined\f[R] image is passed as
parameter.
.SH EXAMPLES
.SS Drawing an image to the canvas
This example draws an image to the canvas using the
\f[CR]drawImage()\f[R] method.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
<\f[B]div\f[R] class=\(dqhidden\(dq>
  <\f[B]img\f[R]
    id=\(dqsource\(dq
    src=\(dqhttps://mdn.github.io/shared\-assets/images/examples/rhino.jpg\(dq
    width=\(dq300\(dq
    height=\(dq227\(dq />
</\f[B]div\f[R]>
.EE
.SS JavaScript
The source image is taken from the coordinates (33, 71), with a width of
104 and a height of 124.
It is drawn to the canvas at (21, 20), where it is given a width of 87
and a height of 104.
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);
\f[B]const\f[R] image = document.getElementById(\(dqsource\(dq);

image.addEventListener(\(dqload\(dq, (e) \f[B]=>\f[R] {
  ctx.drawImage(image, 33, 71, 104, 124, 21, 20, 87, 104);
});
.EE
.SS Result
.SS Understanding source element size
The \f[CR]drawImage()\f[R] method uses the source element\(cqs
\f[I]intrinsic size in CSS pixels\f[R] when drawing.
.PP
For example, if you load an \f[CR]Image\f[R] and specify the optional
size parameters in its constructor, you will have to use the
\f[CR]naturalWidth\f[R] and \f[CR]naturalHeight\f[R] properties of the
created instance to properly calculate things like crop and scale
regions, rather than \f[CR]element.width\f[R] and
\f[CR]element.height\f[R].
The same goes for \f[CR]videoWidth\f[R] and \f[CR]videoHeight\f[R] if
the element is a \f[CR]<video>\f[R] element, and so on.
.SS HTML
.IP
.EX
<\f[B]canvas\f[R] id=\(dqcanvas\(dq></\f[B]canvas\f[R]>
.EE
.SS JavaScript
.IP
.EX
\f[B]const\f[R] canvas = document.getElementById(\(dqcanvas\(dq);
\f[B]const\f[R] ctx = canvas.getContext(\(dq2d\(dq);

\f[B]const\f[R] image = \f[B]new\f[R] Image(60, 45); \f[I]// Using optional size for image\f[R]
image.onload = drawImageActualSize; \f[I]// Draw when image has loaded\f[R]

\f[I]// Load an image of intrinsic size 300x227 in CSS pixels\f[R]
image.src = \(dqhttps://mdn.github.io/shared\-assets/images/examples/rhino.jpg\(dq;

\f[B]function\f[R] drawImageActualSize() {
  \f[I]// Use the intrinsic size of image in CSS pixels for the canvas element\f[R]
  canvas.width = \f[B]this\f[R].naturalWidth;
  canvas.height = \f[B]this\f[R].naturalHeight;

  \f[I]// Will draw the image as 300x227, ignoring the custom size of 60x45\f[R]
  \f[I]// given in the constructor\f[R]
  ctx.drawImage(\f[B]this\f[R], 0, 0);

  \f[I]// To use the custom size we\(aqll have to specify the scale parameters\f[R]
  \f[I]// using the element\(aqs width and height properties \- lets draw one\f[R]
  \f[I]// on top in the corner:\f[R]
  ctx.drawImage(\f[B]this\f[R], 0, 0, \f[B]this\f[R].width, \f[B]this\f[R].height);
}
.EE
.SS Result
.SH NOTES
.IP \(bu 2
\f[CR]drawImage()\f[R] only works correctly on an
\f[CR]HTMLVideoElement\f[R] when its
\f[CR]HTMLMediaElement.readyState\f[R] is greater than 1 (i.e.,
\f[B]seek\f[R] event fired after setting the \f[CR]currentTime\f[R]
property).
.IP \(bu 2
\f[CR]drawImage()\f[R] will always use the source element\(cqs
\f[I]intrinsic size in CSS pixels\f[R] when drawing, cropping, and/or
scaling.
.IP \(bu 2
In some older browser versions, \f[CR]drawImage()\f[R] will ignore all
EXIF metadata in images, including the Orientation.
This behavior is especially troublesome on iOS devices.
You should detect the Orientation yourself and use \f[CR]rotate()\f[R]
to make it right.
.SH SEE ALSO
.IP \(bu 2
The interface defining this method: \f[CR]CanvasRenderingContext2D\f[R]
