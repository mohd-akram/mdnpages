.\" Automatically generated by Pandoc 3.7.0.1
.\"
.TH "READABLESTREAM.CANCEL" "3JS" "June 13, 2025" "JavaScript" "JavaScript Reference Manual"
.SH NAME
ReadableStream.cancel \- ReadableStream: cancel() method
.SH SYNOPSIS
\f[B]Note:\f[R] This feature is available in Web Workers.
.PP
The \f[B]\f[CB]cancel()\f[B]\f[R] method of the
\f[CR]ReadableStream\f[R] interface returns a \f[CR]Promise\f[R] that
resolves when the stream is canceled.
.PP
Cancel is used when you\(cqve completely finished with the stream and
don\(cqt need any more data from it, even if there are chunks enqueued
waiting to be read.
That data is lost after cancel is called, and the stream is not readable
any more.
To read those chunks still and not completely get rid of the stream,
you\(cqd use \f[CR]ReadableStreamDefaultController.close()\f[R].
.SH SYNTAX
.IP
.EX
cancel()
cancel(reason)
.EE
.SS Parameters
.TP
\f[B]reason\f[R] \f[I](optional)\f[R]
A human\-readable reason for the cancellation.
This is passed to the underlying source, which may or may not use it.
.SS Return value
A \f[CR]Promise\f[R], which fulfills with \f[CR]undefined\f[R] value.
.SS Exceptions
.TP
\f[B]TypeError\f[R]
The stream you are trying to cancel is not a \f[CR]ReadableStream\f[R],
or it is locked.
.SH EXAMPLES
In the following example, a stream is used to fetch the WHATWG HTML spec
chunk by chunk; each chunk is searched for the string \(lqservice
workers\(rq.
When the search terms is found, \f[CR]cancel()\f[R] is used to cancel
the stream \(em the job is finished so it is no longer needed.
.IP
.EX
<\f[B]pre\f[R] id=\(dqoutput\(dq></\f[B]pre\f[R]>
.EE
.IP
.EX
\f[B]const\f[R] searchTerm = \(dqservice workers\(dq;
\f[I]// Chars to show either side of the result in the match\f[R]
\f[B]const\f[R] contextBefore = 30;
\f[B]const\f[R] contextAfter = 30;
\f[B]const\f[R] caseInsensitive = \f[B]true\f[R];
\f[B]const\f[R] url = \(dqhttps://html.spec.whatwg.org/\(dq;

log(\(gaSearching \(aq${url}\(aq for \(aq${searchTerm}\(aq\(ga);

fetch(url)
  .then((response) \f[B]=>\f[R] {
    log(\(dqReceived headers\(dq);

    \f[B]const\f[R] decoder = \f[B]new\f[R] TextDecoder();
    \f[B]const\f[R] reader = response.body.getReader();
    \f[B]const\f[R] toMatch = caseInsensitive ? searchTerm.toLowerCase() : searchTerm;
    \f[B]const\f[R] bufferSize = Math.max(toMatch.length \- 1, contextBefore);

    \f[B]let\f[R] bytesReceived = 0;
    \f[B]let\f[R] buffer = \(dq\(dq;
    \f[B]let\f[R] matchFoundAt = \-1;

    \f[B]return\f[R] reader.read().then(\f[B]function\f[R] process(result) {
      \f[B]if\f[R] (result.done) {
        log(\(dqFailed to find match\(dq);
        \f[B]return\f[R];
      }

      bytesReceived += result.value.length;
      log(\(gaReceived ${bytesReceived} bytes of data so far\(ga);

      buffer += decoder.decode(result.value, { stream: \f[B]true\f[R] });

      \f[I]// already found match & just context\-gathering?\f[R]
      \f[B]if\f[R] (matchFoundAt === \-1) {
        matchFoundAt = (
          caseInsensitive ? buffer.toLowerCase() : buffer
        ).indexOf(toMatch);
      }

      \f[B]if\f[R] (matchFoundAt === \-1) {
        buffer = buffer.slice(\-bufferSize);
      } \f[B]else\f[R] \f[B]if\f[R] (
        buffer.slice(matchFoundAt + toMatch.length).length >= contextAfter
      ) {
        log(\(dqHere\(aqs the match:\(dq);
        log(
          buffer.slice(
            Math.max(0, matchFoundAt \- contextBefore),
            matchFoundAt + toMatch.length + contextAfter,
          ),
        );
        log(\(dqCancelling fetch\(dq);
        reader.cancel();
        \f[B]return\f[R];
      } \f[B]else\f[R] {
        log(\(dqFound match, but need more context\&...\(dq);
      }

      \f[I]// keep reading\f[R]
      \f[B]return\f[R] reader.read().then(process);
    });
  })
  .catch((err) \f[B]=>\f[R] {
    log(
      \(dqSomething went wrong. See devtools for details. Does the response lack CORS headers?\(dq,
    );
    \f[B]throw\f[R] err;
  });
.EE
.SH SEE ALSO
.IP \(bu 2
\f[CR]ReadableStream()\f[R] constructor
.IP \(bu 2
Using readable streams
