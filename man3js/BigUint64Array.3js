.\" Automatically generated by Pandoc 3.4
.\"
.TH "BigUint64Array" "JS" "June 12, 2024" "JavaScript" "JavaScript Reference Manual"
.SH NAME
BigUint64Array \- BigUint64Array
.SH SYNOPSIS
The \f[B]\f[CB]BigUint64Array\f[B]\f[R] typed array represents an array
of 64\-bit unsigned integers in the platform byte order.
If control over byte order is needed, use \f[CR]DataView\f[R] instead.
The contents are initialized to \f[CR]0n\f[R] unless initialization data
is explicitly provided.
Once established, you can reference elements in the array using the
object\[cq]s methods, or using standard array index syntax (that is,
using bracket notation).
.PP
\f[CR]BigUint64Array\f[R] is a subclass of the hidden
\f[CR]TypedArray\f[R] class.
.SH CONSTRUCTOR
.TP
\f[B]BigUint64Array()\f[R]
Creates a new \f[CR]BigUint64Array\f[R] object.
.SH STATIC PROPERTIES
\f[I]Also inherits static properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.TP
\f[B]BigUint64Array.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]8\f[R] in the case of \f[CR]BigUint64Array\f[R].
.SH STATIC METHODS
\f[I]Inherits static methods from its parent \f[CI]TypedArray\f[I]\f[R].
.SH INSTANCE PROPERTIES
\f[I]Also inherits instance properties from its parent
\f[CI]TypedArray\f[I]\f[R].
.PP
These properties are defined on \f[CR]BigUint64Array.prototype\f[R] and
shared by all \f[CR]BigUint64Array\f[R] instances.
.TP
\f[B]BigUint64Array.prototype.BYTES_PER_ELEMENT\f[R]
Returns a number value of the element size.
\f[CR]8\f[R] in the case of a \f[CR]BigUint64Array\f[R].
.TP
\f[B]BigUint64Array.prototype.constructor\f[R]
The constructor function that created the instance object.
For \f[CR]BigUint64Array\f[R] instances, the initial value is the
\f[CR]BigUint64Array\f[R] constructor.
.SH INSTANCE METHODS
\f[I]Inherits instance methods from its parent
\f[CI]TypedArray\f[I]\f[R].
.SH EXAMPLES
.SS Different ways to create a BigUint64Array
.IP
.EX
\f[I]// From a length\f[R]
\f[B]const\f[R] biguint64 = \f[B]new\f[R] BigUint64Array(2);
biguint64[0] = 42n;
console.log(biguint64[0]); \f[I]// 42n\f[R]
console.log(biguint64.length); \f[I]// 2\f[R]
console.log(biguint64.BYTES_PER_ELEMENT); \f[I]// 8\f[R]

\f[I]// From an array\f[R]
\f[B]const\f[R] x = \f[B]new\f[R] BigUint64Array([21n, 31n]);
console.log(x[1]); \f[I]// 31n\f[R]

\f[I]// From another TypedArray\f[R]
\f[B]const\f[R] y = \f[B]new\f[R] BigUint64Array(x);
console.log(y[0]); \f[I]// 21n\f[R]

\f[I]// From an ArrayBuffer\f[R]
\f[B]const\f[R] buffer = \f[B]new\f[R] ArrayBuffer(64);
\f[B]const\f[R] z = \f[B]new\f[R] BigUint64Array(buffer, 8, 4);
console.log(z.byteOffset); \f[I]// 8\f[R]

\f[I]// From an iterable\f[R]
\f[B]const\f[R] iterable = (\f[B]function\f[R]* () {
  \f[B]yield\f[R]* [1n, 2n, 3n];
})();
\f[B]const\f[R] biguint64FromIterable = \f[B]new\f[R] BigUint64Array(iterable);
console.log(biguint64FromIterable);
\f[I]// BigUint64Array [1n, 2n, 3n]\f[R]
.EE
.SH SEE ALSO
.IP \[bu] 2
JavaScript typed arrays guide
.IP \[bu] 2
\f[CR]TypedArray\f[R]
.IP \[bu] 2
\f[CR]ArrayBuffer\f[R]
.IP \[bu] 2
\f[CR]DataView\f[R]
